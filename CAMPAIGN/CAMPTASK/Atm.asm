; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPTASK\Atm.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ		; VuEntity::VuState
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?RequestReliableTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestReliableTransmit
PUBLIC	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::get
PUBLIC	?IsSimBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsSimBase
PUBLIC	?IsCampBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsCampBase
PUBLIC	?IsCampaign@FalconEntity@@QAEHXZ		; FalconEntity::IsCampaign
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?OnGround@FalconEntity@@UAEHXZ			; FalconEntity::OnGround
PUBLIC	?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z	; FalconEntity::HasEntity
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsMover@FalconEntity@@UAEHXZ			; FalconEntity::IsMover
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsExploding@FalconEntity@@UAEHXZ		; FalconEntity::IsExploding
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsEmitting@FalconEntity@@UAEHXZ		; FalconEntity::IsEmitting
PUBLIC	?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ; FalconEntity::GetMovementType
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?IsSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsSPJamming
PUBLIC	?IsAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsAreaJamming
PUBLIC	?HasSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasSPJamming
PUBLIC	?HasAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasAreaJamming
PUBLIC	?GetRCSFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetRCSFactor
PUBLIC	?GetIRFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetIRFactor
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?GetUserData@ListElementClass@@QAEPAXXZ		; ListElementClass::GetUserData
PUBLIC	?GetNext@ListElementClass@@QAEPAV1@XZ		; ListElementClass::GetNext
PUBLIC	?GetPrev@ListElementClass@@QAEPAV1@XZ		; ListElementClass::GetPrev
PUBLIC	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
PUBLIC	?GetLastElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetLastElement
PUBLIC	??_GListClass@@QAEPAXI@Z			; ListClass::`scalar deleting destructor'
PUBLIC	?SetWPRouteAction@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPRouteAction
PUBLIC	?UnSetWPFlag@WayPointClass@@QAEXK@Z		; WayPointClass::UnSetWPFlag
PUBLIC	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ	; WayPointClass::GetWPTargetID
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?GetWPRouteAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPRouteAction
PUBLIC	?GetWPFlags@WayPointClass@@QAEKXZ		; WayPointClass::GetWPFlags
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetPrevWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetPrevWP
PUBLIC	?GetWPSpeed@WayPointClass@@QAEMXZ		; WayPointClass::GetWPSpeed
PUBLIC	?GetWPAltitude@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAltitude
PUBLIC	?GetWPArrivalTime@WayPointClass@@QAEKXZ		; WayPointClass::GetWPArrivalTime
PUBLIC	?GetWPDepartureTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPDepartureTime
PUBLIC	?GetWPLocation@WayPointClass@@QBEXPAF0@Z	; WayPointClass::GetWPLocation
PUBLIC	??_GMissionRequestClass@@QAEPAXI@Z		; MissionRequestClass::`scalar deleting destructor'
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?HasDelta@CampBaseClass@@QAEHXZ			; CampBaseClass::HasDelta
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ	; ObjectiveClass::GetObjectiveStatus
PUBLIC	?CampEnterCriticalSection@@YAXXZ		; CampEnterCriticalSection
PUBLIC	?CampLeaveCriticalSection@@YAXXZ		; CampLeaveCriticalSection
PUBLIC	?DontPlan@UnitClass@@QBEHXZ			; UnitClass::DontPlan
PUBLIC	?Engaged@UnitClass@@QBEHXZ			; UnitClass::Engaged
PUBLIC	?Scripted@UnitClass@@QBEHXZ			; UnitClass::Scripted
PUBLIC	?Broken@UnitClass@@QBEHXZ			; UnitClass::Broken
PUBLIC	?Aborted@UnitClass@@QBEHXZ			; UnitClass::Aborted
PUBLIC	?Final@UnitClass@@QBEHXZ			; UnitClass::Final
PUBLIC	?Diverted@UnitClass@@QAEHXZ			; UnitClass::Diverted
PUBLIC	?SetUnitDestination@UnitClass@@QAEXFF@Z		; UnitClass::SetUnitDestination
PUBLIC	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ	; UnitClass::GetTarget
PUBLIC	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ		; UnitClass::GetTargetID
PUBLIC	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
PUBLIC	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
PUBLIC	?GetVt@CampManagerClass@@UBEMXZ			; CampManagerClass::GetVt
PUBLIC	?GetKias@CampManagerClass@@UBEMXZ		; CampManagerClass::GetKias
PUBLIC	?Wake@CampManagerClass@@UAEHXZ			; CampManagerClass::Wake
PUBLIC	?Sleep@CampManagerClass@@UAEHXZ			; CampManagerClass::Sleep
PUBLIC	?GetCampID@CampManagerClass@@UAEFXZ		; CampManagerClass::GetCampID
PUBLIC	?GetTeam@CampManagerClass@@UAEEXZ		; CampManagerClass::GetTeam
PUBLIC	?GetCountry@CampManagerClass@@UAEEXZ		; CampManagerClass::GetCountry
PUBLIC	?GetAAStrength@PackageClass@@QAEFXZ		; PackageClass::GetAAStrength
PUBLIC	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
PUBLIC	?GetRating@SquadronClass@@QAEEH@Z		; SquadronClass::GetRating
PUBLIC	?GetAssigned@SquadronClass@@QAEEXZ		; SquadronClass::GetAssigned
PUBLIC	??0ATMAirbaseClass@@QAE@XZ			; ATMAirbaseClass::ATMAirbaseClass
PUBLIC	??0ATMAirbaseClass@@QAE@PAVCampBaseClass@@@Z	; ATMAirbaseClass::ATMAirbaseClass
PUBLIC	??0ATMAirbaseClass@@QAE@PAPAEPAJ@Z		; ATMAirbaseClass::ATMAirbaseClass
PUBLIC	??0ATMAirbaseClass@@QAE@PAU_iobuf@@@Z		; ATMAirbaseClass::ATMAirbaseClass
PUBLIC	??1ATMAirbaseClass@@QAE@XZ			; ATMAirbaseClass::~ATMAirbaseClass
PUBLIC	?Save@ATMAirbaseClass@@QAEHPAPAE@Z		; ATMAirbaseClass::Save
PUBLIC	?Save@ATMAirbaseClass@@QAEHPAU_iobuf@@@Z	; ATMAirbaseClass::Save
PUBLIC	?Size@ATMAirbaseClass@@QAEHXZ			; ATMAirbaseClass::Size
PUBLIC	??_GATMAirbaseClass@@QAEPAXI@Z			; ATMAirbaseClass::`scalar deleting destructor'
PUBLIC	??0AirTaskingManagerClass@@QAE@GE@Z		; AirTaskingManagerClass::AirTaskingManagerClass
PUBLIC	??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z	; AirTaskingManagerClass::AirTaskingManagerClass
PUBLIC	??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z	; AirTaskingManagerClass::AirTaskingManagerClass
PUBLIC	??1AirTaskingManagerClass@@UAE@XZ		; AirTaskingManagerClass::~AirTaskingManagerClass
PUBLIC	?SaveSize@AirTaskingManagerClass@@UAEHXZ	; AirTaskingManagerClass::SaveSize
PUBLIC	?Save@AirTaskingManagerClass@@UAEHPAPAE@Z	; AirTaskingManagerClass::Save
PUBLIC	?Save@AirTaskingManagerClass@@UAEHPAU_iobuf@@@Z	; AirTaskingManagerClass::Save
PUBLIC	?Task@AirTaskingManagerClass@@UAEHXZ		; AirTaskingManagerClass::Task
PUBLIC	?DoCalculations@AirTaskingManagerClass@@UAEXXZ	; AirTaskingManagerClass::DoCalculations
PUBLIC	?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z ; AirTaskingManagerClass::Handle
PUBLIC	?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z ; AirTaskingManagerClass::BuildPackage
PUBLIC	?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z ; AirTaskingManagerClass::BuildDivert
PUBLIC	?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z ; AirTaskingManagerClass::BuildSpecificDivert
PUBLIC	?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z ; AirTaskingManagerClass::ProcessRequest
PUBLIC	?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z ; AirTaskingManagerClass::FindBestAir
PUBLIC	?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z ; AirTaskingManagerClass::FindBestAirFlight
PUBLIC	?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z ; AirTaskingManagerClass::SendATMMessage
PUBLIC	?FindTakeoffSlot@AirTaskingManagerClass@@QAEHVVU_ID@@PAVWayPointClass@@@Z ; AirTaskingManagerClass::FindTakeoffSlot
PUBLIC	?ScheduleAircraft@AirTaskingManagerClass@@QAEXVVU_ID@@PAVWayPointClass@@H@Z ; AirTaskingManagerClass::ScheduleAircraft
PUBLIC	?ZapAirbase@AirTaskingManagerClass@@QAEXVVU_ID@@@Z ; AirTaskingManagerClass::ZapAirbase
PUBLIC	?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z ; AirTaskingManagerClass::ZapSchedule
PUBLIC	?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z ; AirTaskingManagerClass::FindATMAirbase
PUBLIC	?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z ; AirTaskingManagerClass::AddToAirbaseList
PUBLIC	?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z ; AirTaskingManagerClass::FindNearestActiveTanker
PUBLIC	?FindNearestActiveJammer@AirTaskingManagerClass@@QAEHPAF0PAK@Z ; AirTaskingManagerClass::FindNearestActiveJammer
PUBLIC	??_GAirTaskingManagerClass@@UAEPAXI@Z		; AirTaskingManagerClass::`scalar deleting destructor'
PUBLIC	?RequestSARMission@@YAHPAVFlightClass@@@Z	; RequestSARMission
PUBLIC	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ; RequestIntercept
PUBLIC	?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z	; TargetAllSites
PUBLIC	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
PUBLIC	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?FindBestLocation@@YAXPAVMissionRequestClass@@PAVListClass@@@Z ; FindBestLocation
PUBLIC	?ChillPackage@@YAXPAPAVPackageClass@@@Z		; ChillPackage
PUBLIC	?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z	; RecalculateWaypoint
PUBLIC	?RebuildATMLists@@YAXXZ				; RebuildATMLists
PUBLIC	?ShowMissionLists@@YAXXZ			; ShowMissionLists
PUBLIC	?RequestPlayerDivert@@YAXXZ			; RequestPlayerDivert
PUBLIC	?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z	; AlreadyPlanned
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7AirTaskingManagerClass@@6B@			; AirTaskingManagerClass::`vftable'
PUBLIC	??_C@_0DP@LKGLCDBH@Team?5?$CD?$CFd?5?$CIrequ?$CJ?0?5Mission?3?5?$CFd?5at?5@ ; `string'
PUBLIC	??_C@_0O@EPMACBFE@In?5progress?3?6?$AA@		; `string'
PUBLIC	??_C@_0DP@EAMHBGII@Team?5?$CD?$CFd?5?$CIplan?$CJ?0?5Mission?3?5?$CFd?5at?5@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4AirTaskingManagerClass@@6B@		; AirTaskingManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAirTaskingManagerClass@@@8		; AirTaskingManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3AirTaskingManagerClass@@8			; AirTaskingManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AirTaskingManagerClass@@8			; AirTaskingManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AirTaskingManagerClass@@8		; AirTaskingManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CampManagerClass@@8		; CampManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCampManagerClass@@@8			; CampManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3CampManagerClass@@8			; CampManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CampManagerClass@@8			; CampManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3f99999a
PUBLIC	__real@40000000
PUBLIC	__real@42200000
PUBLIC	__real@42700000
PUBLIC	__real@437a0000
PUBLIC	__real@4a5bba00
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	_abs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_MonoPrint:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Register@VuCollection@@QAEXXZ:PROC		; VuCollection::Register
EXTRN	?Unregister@VuCollection@@QAEXXZ:PROC		; VuCollection::Unregister
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0VuFullUpdateEvent@@QAE@PAVVuEntity@@PAVVuTargetEntity@@E@Z:PROC ; VuFullUpdateEvent::VuFullUpdateEvent
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z:PROC ; VuMessageQueue::PostVuMessage
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?CleanupData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::CleanupData
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetRadarType@FalconEntity@@UAEHXZ:PROC		; FalconEntity::GetRadarType
EXTRN	?GetDamageModifiers@FalconEntity@@UAEPAEXZ:PROC	; FalconEntity::GetDamageModifiers
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z:PROC	; FalconPrivateList::FalconPrivateList
EXTRN	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z:PROC ; FalconPrivateList::ForcedInsert
EXTRN	?Camp_GetCurrentTime@@YAKXZ:PROC		; Camp_GetCurrentTime
EXTRN	?GetOwner@@YAEPAEFF@Z:PROC			; GetOwner
EXTRN	??0ListClass@@QAE@E@Z:PROC			; ListClass::ListClass
EXTRN	??1ListClass@@QAE@XZ:PROC			; ListClass::~ListClass
EXTRN	?Insert@ListClass@@QAEXPAVListElementClass@@@Z:PROC ; ListClass::Insert
EXTRN	?Remove@ListClass@@QAEXPAVListElementClass@@@Z:PROC ; ListClass::Remove
EXTRN	?Detach@ListClass@@QAEXPAVListElementClass@@@Z:PROC ; ListClass::Detach
EXTRN	?InsertNewElement@ListClass@@QAEXFPAXE@Z:PROC	; ListClass::InsertNewElement
EXTRN	?Purge@ListClass@@QAEXXZ:PROC			; ListClass::Purge
EXTRN	?GetClassID@@YAHEEEEEEEE@Z:PROC			; GetClassID
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??0WayPointClass@@QAE@FFHHKKEH@Z:PROC		; WayPointClass::WayPointClass
EXTRN	?InsertWP@WayPointClass@@QAEXPAV1@@Z:PROC	; WayPointClass::InsertWP
EXTRN	?SetWPTimes@WayPointClass@@QAEXK@Z:PROC		; WayPointClass::SetWPTimes
EXTRN	?DistanceTo@WayPointClass@@QAEMPAV1@@Z:PROC	; WayPointClass::DistanceTo
EXTRN	??0MissionRequestClass@@QAE@XZ:PROC		; MissionRequestClass::MissionRequestClass
EXTRN	??1MissionRequestClass@@QAE@XZ:PROC		; MissionRequestClass::~MissionRequestClass
EXTRN	?RequestMission@MissionRequestClass@@QAEHXZ:PROC ; MissionRequestClass::RequestMission
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?Remove@CampBaseClass@@QAEHXZ:PROC		; CampBaseClass::Remove
EXTRN	?GetSpotted@CampBaseClass@@QAEHE@Z:PROC		; CampBaseClass::GetSpotted
EXTRN	?GetAdjustedDataRate@ObjectiveClass@@QAEFXZ:PROC ; ObjectiveClass::GetAdjustedDataRate
EXTRN	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ:PROC ; ObjectiveClass::GetObjectiveClassData
EXTRN	?GetRepairTime@ObjectiveClass@@QAEHH@Z:PROC	; ObjectiveClass::GetRepairTime
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?TimeOfDayGeneral@@YAHK@Z:PROC			; TimeOfDayGeneral
EXTRN	?IsValidAircraftType@CampaignClass@@QAEHPAVUnitClass@@@Z:PROC ; CampaignClass::IsValidAircraftType
EXTRN	?SendUnitMessage@UnitClass@@QAEXVVU_ID@@FFFF@Z:PROC ; UnitClass::SendUnitMessage
EXTRN	?SetDead@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetDead
EXTRN	?SetDiverted@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetDiverted
EXTRN	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ:PROC ; UnitClass::GetUnitClassData
EXTRN	?GetUnitDestination@UnitClass@@QAEXPAF0@Z:PROC	; UnitClass::GetUnitDestination
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?GetMaxSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetMaxSpeed
EXTRN	?GetCruiseSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetCruiseSpeed
EXTRN	?GetCombatSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetCombatSpeed
EXTRN	?GetUnitRange@UnitClass@@QAEHXZ:PROC		; UnitClass::GetUnitRange
EXTRN	?BuildElements@UnitClass@@QAEXXZ:PROC		; UnitClass::BuildElements
EXTRN	?KillUnit@UnitClass@@QAEXXZ:PROC		; UnitClass::KillUnit
EXTRN	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ:PROC ; UnitClass::GetCurrentUnitWP
EXTRN	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetFirstUnit
EXTRN	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetNextUnit
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?DistanceToFront@@YAMFF@Z:PROC			; DistanceToFront
EXTRN	?UnpackXY@@YAXPAXPAF1@Z:PROC			; UnpackXY
EXTRN	?TimeToArrive@@YAKMM@Z:PROC			; TimeToArrive
EXTRN	?DirectionTo@@YAEFFFF@Z:PROC			; DirectionTo
EXTRN	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z:PROC	; FindUnit
EXTRN	?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z:PROC ; FindUnitByXY
EXTRN	?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z:PROC ; FindNearestObjective
EXTRN	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z:PROC ; GetObjectiveByXY
EXTRN	?ScoreThreatFast@@YAHFFHE@Z:PROC		; ScoreThreatFast
EXTRN	?GetAltitudeLevel@@YAHH@Z:PROC			; GetAltitudeLevel
EXTRN	?FillDistanceList@@YAXPAVListClass@@EHH@Z:PROC	; FillDistanceList
EXTRN	?SetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ:PROC ; TeamClass::SetCurrentStats
EXTRN	?GetTTRelations@@YAHEE@Z:PROC			; GetTTRelations
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?GetEnemyTeam@@YAEE@Z:PROC			; GetEnemyTeam
EXTRN	??0CampManagerClass@@QAE@GE@Z:PROC		; CampManagerClass::CampManagerClass
EXTRN	??0CampManagerClass@@QAE@PAPAEPAJ@Z:PROC	; CampManagerClass::CampManagerClass
EXTRN	??0CampManagerClass@@QAE@PAU_iobuf@@@Z:PROC	; CampManagerClass::CampManagerClass
EXTRN	??1CampManagerClass@@UAE@XZ:PROC		; CampManagerClass::~CampManagerClass
EXTRN	?InitData@CampManagerClass@@UAEXXZ:PROC		; CampManagerClass::InitData
EXTRN	?SaveSize@CampManagerClass@@UAEHXZ:PROC		; CampManagerClass::SaveSize
EXTRN	?Save@CampManagerClass@@UAEHPAPAE@Z:PROC	; CampManagerClass::Save
EXTRN	?Save@CampManagerClass@@UAEHPAU_iobuf@@@Z:PROC	; CampManagerClass::Save
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuSessionEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?InsertionCallback@CampManagerClass@@UAEHXZ:PROC ; CampManagerClass::InsertionCallback
EXTRN	?RemovalCallback@CampManagerClass@@UAEHXZ:PROC	; CampManagerClass::RemovalCallback
EXTRN	?CheckNeedRequests@PackageClass@@QAEHXZ:PROC	; PackageClass::CheckNeedRequests
EXTRN	?GetMainFlightID@PackageClass@@QAE?AVVU_ID@@XZ:PROC ; PackageClass::GetMainFlightID
EXTRN	?NewPackage@@YAPAVPackageClass@@H@Z:PROC	; NewPackage
EXTRN	?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z:PROC ; FlightClass::DetectVs
EXTRN	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z:PROC ; FlightClass::DetectVs
EXTRN	?CancelFlight@@YAXPAVFlightClass@@@Z:PROC	; CancelFlight
EXTRN	?SetRating@SquadronClass@@QAEXHE@Z:PROC		; SquadronClass::SetRating
EXTRN	?SetAssigned@SquadronClass@@QAEXE@Z:PROC	; SquadronClass::SetAssigned
EXTRN	?ShiftSchedule@SquadronClass@@QAEXXZ:PROC	; SquadronClass::ShiftSchedule
EXTRN	?FindAvailableAircraft@SquadronClass@@QAEHPAVMissionRequestClass@@@Z:PROC ; SquadronClass::FindAvailableAircraft
EXTRN	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z:PROC ; GetUnitScore
EXTRN	??_EAirTaskingManagerClass@@UAEPAXI@Z:PROC	; AirTaskingManagerClass::`vector deleting destructor'
EXTRN	??0FalconAirTaskingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconAirTaskingMessage::FalconAirTaskingMessage
EXTRN	??0FalconDivertMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDivertMessage::FalconDivertMessage
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	?FriendlyTerritory@@YAHFFH@Z:PROC		; FriendlyTerritory
EXTRN	?CheckForClimb@@YAXPAVWayPointClass@@@Z:PROC	; CheckForClimb
EXTRN	?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z:PROC ; recalculate_waypoint_list
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?MissionData@@3PAUMissionDataType@@A:BYTE	; MissionData
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AllAirFilter@@3VAirUnitFilter@@A:QWORD		; AllAirFilter
EXTRN	?AllAirList@@3PAVVuLinkedList@@A:DWORD		; AllAirList
EXTRN	?AllRealList@@3PAVVuLinkedList@@A:DWORD		; AllRealList
EXTRN	?AllObjList@@3PAVVuLinkedList@@A:DWORD		; AllObjList
EXTRN	?POList@@3PAVFalconPrivateOrderedList@@A:DWORD	; POList
EXTRN	?AirDefenseList@@3PAVFalconPrivateList@@A:DWORD	; AirDefenseList
EXTRN	?dx@@3PAFA:BYTE					; dx
EXTRN	?dy@@3PAFA:BYTE					; dy
EXTRN	?campCritical@@3PAUF4CSECTIONHANDLE@@A:DWORD	; campCritical
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?gCampDataVersion@@3HA:DWORD			; gCampDataVersion
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?LONGRANGE_MIN_TIME@@3FA:WORD			; LONGRANGE_MIN_TIME
EXTRN	?MAX_FLYMISSION_THREAT@@3FA:WORD		; MAX_FLYMISSION_THREAT
EXTRN	?MAX_FLYMISSION_HIGHTHREAT@@3FA:WORD		; MAX_FLYMISSION_HIGHTHREAT
EXTRN	?MAX_FLYMISSION_NOTHREAT@@3FA:WORD		; MAX_FLYMISSION_NOTHREAT
EXTRN	?MINIMUM_AWACS_DISTANCE@@3FA:WORD		; MINIMUM_AWACS_DISTANCE
EXTRN	?MAXIMUM_AWACS_DISTANCE@@3FA:WORD		; MAXIMUM_AWACS_DISTANCE
EXTRN	?MINIMUM_TANKER_DISTANCE@@3FA:WORD		; MINIMUM_TANKER_DISTANCE
EXTRN	?MAXIMUM_TANKER_DISTANCE@@3FA:WORD		; MAXIMUM_TANKER_DISTANCE
EXTRN	?MINIMUM_ECM_DISTANCE@@3FA:WORD			; MINIMUM_ECM_DISTANCE
EXTRN	?MAXIMUM_ECM_DISTANCE@@3FA:WORD			; MAXIMUM_ECM_DISTANCE
EXTRN	?MIN_PLAN_AIR@@3FA:WORD				; MIN_PLAN_AIR
EXTRN	?MAX_SAR_DIST@@3FA:WORD				; MAX_SAR_DIST
EXTRN	?PackInserted@@3HA:DWORD			; PackInserted
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@4a5bba00
CONST	SEGMENT
__real@4a5bba00 DD 04a5bba00r			; 3.6e+006
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CampManagerClass@@8
rdata$r	SEGMENT
??_R2CampManagerClass@@8 DD FLAT:??_R1A@?0A@EA@CampManagerClass@@8 ; CampManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CampManagerClass@@8
rdata$r	SEGMENT
??_R3CampManagerClass@@8 DD 00H				; CampManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CampManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCampManagerClass@@@8
_DATA	SEGMENT
??_R0?AVCampManagerClass@@@8 DD FLAT:??_7type_info@@6B@	; CampManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCampManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CampManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CampManagerClass@@8 DD FLAT:??_R0?AVCampManagerClass@@@8 ; CampManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CampManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AirTaskingManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AirTaskingManagerClass@@8 DD FLAT:??_R0?AVAirTaskingManagerClass@@@8 ; AirTaskingManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AirTaskingManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2AirTaskingManagerClass@@8
rdata$r	SEGMENT
??_R2AirTaskingManagerClass@@8 DD FLAT:??_R1A@?0A@EA@AirTaskingManagerClass@@8 ; AirTaskingManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CampManagerClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3AirTaskingManagerClass@@8
rdata$r	SEGMENT
??_R3AirTaskingManagerClass@@8 DD 00H			; AirTaskingManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2AirTaskingManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAirTaskingManagerClass@@@8
_DATA	SEGMENT
??_R0?AVAirTaskingManagerClass@@@8 DD FLAT:??_7type_info@@6B@ ; AirTaskingManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAirTaskingManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AirTaskingManagerClass@@6B@
rdata$r	SEGMENT
??_R4AirTaskingManagerClass@@6B@ DD 00H			; AirTaskingManagerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAirTaskingManagerClass@@@8
	DD	FLAT:??_R3AirTaskingManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@EAMHBGII@Team?5?$CD?$CFd?5?$CIplan?$CJ?0?5Mission?3?5?$CFd?5at?5@
CONST	SEGMENT
??_C@_0DP@EAMHBGII@Team?5?$CD?$CFd?5?$CIplan?$CJ?0?5Mission?3?5?$CFd?5at?5@ DB 'T'
	DB	'eam #%d (plan), Mission: %d at %d,%d - priority: %d, tot: %f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EPMACBFE@In?5progress?3?6?$AA@
CONST	SEGMENT
??_C@_0O@EPMACBFE@In?5progress?3?6?$AA@ DB 'In progress:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@LKGLCDBH@Team?5?$CD?$CFd?5?$CIrequ?$CJ?0?5Mission?3?5?$CFd?5at?5@
CONST	SEGMENT
??_C@_0DP@LKGLCDBH@Team?5?$CD?$CFd?5?$CIrequ?$CJ?0?5Mission?3?5?$CFd?5at?5@ DB 'T'
	DB	'eam #%d (requ), Mission: %d at %d,%d - priority: %d, tot: %f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7AirTaskingManagerClass@@6B@
CONST	SEGMENT
??_7AirTaskingManagerClass@@6B@ DD FLAT:??_R4AirTaskingManagerClass@@6B@ ; AirTaskingManagerClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@AirTaskingManagerClass@@UAEHXZ
	DD	FLAT:?Save@AirTaskingManagerClass@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@AirTaskingManagerClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EAirTaskingManagerClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@CampManagerClass@@UAEHXZ
	DD	FLAT:?RemovalCallback@CampManagerClass@@UAEHXZ
	DD	FLAT:?InitData@CampManagerClass@@UAEXXZ
	DD	FLAT:?CleanupData@FalconEntity@@UAEXXZ
	DD	FLAT:?IsSimBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?IsCampBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?Wake@CampManagerClass@@UAEHXZ
	DD	FLAT:?Sleep@CampManagerClass@@UAEHXZ
	DD	FLAT:?GetCampID@CampManagerClass@@UAEFXZ
	DD	FLAT:?GetTeam@CampManagerClass@@UAEEXZ
	DD	FLAT:?GetCountry@CampManagerClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@FalconEntity@@UAEHXZ
	DD	FLAT:?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@FalconEntity@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@FalconEntity@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@FalconEntity@@UAEHXZ
	DD	FLAT:?GetVt@CampManagerClass@@UBEMXZ
	DD	FLAT:?GetKias@CampManagerClass@@UBEMXZ
	DD	FLAT:?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?GetRCSFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetIRFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetRadarType@FalconEntity@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@FalconEntity@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?Task@AirTaskingManagerClass@@UAEHXZ
	DD	FLAT:?DoCalculations@AirTaskingManagerClass@@UAEXXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z$0
__unwindtable$?RequestPlayerDivert@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestPlayerDivert@@YAXXZ$0
__unwindtable$?ShowMissionLists@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowMissionLists@@YAXXZ$0
__unwindtable$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z$0
__unwindtable$?RequestSARMission@@YAHPAVFlightClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestSARMission@@YAHPAVFlightClass@@@Z$0
__unwindtable$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z$0
__unwindtable$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z$0
__unwindtable$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z$0
__unwindtable$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z$0
__unwindtable$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z$0
__unwindtable$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z$0
__unwindtable$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z$0
__unwindtable$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z$0
__unwindtable$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z$0
__unwindtable$?Task@AirTaskingManagerClass@@UAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Task@AirTaskingManagerClass@@UAEHXZ$0
__unwindtable$??1AirTaskingManagerClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AirTaskingManagerClass@@UAE@XZ$0
__unwindtable$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z$1
__unwindtable$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z$1
__unwindtable$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z$1
__unwindtable$?DoCalculations@AirTaskingManagerClass@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoCalculations@AirTaskingManagerClass@@UAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoCalculations@AirTaskingManagerClass@@UAEXXZ$1
__unwindtable$?RebuildATMLists@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RebuildATMLists@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RebuildATMLists@@YAXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?RebuildATMLists@@YAXXZ$2
__unwindtable$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z$2
__ehfuncinfo$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RequestPlayerDivert@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestPlayerDivert@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ShowMissionLists@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ShowMissionLists@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RebuildATMLists@@YAXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RebuildATMLists@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RequestSARMission@@YAHPAVFlightClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestSARMission@@YAHPAVFlightClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DoCalculations@AirTaskingManagerClass@@UAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DoCalculations@AirTaskingManagerClass@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Task@AirTaskingManagerClass@@UAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Task@AirTaskingManagerClass@@UAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1AirTaskingManagerClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AirTaskingManagerClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0AirTaskingManagerClass@@QAE@GE@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0AirTaskingManagerClass@@QAE@GE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0AirTaskingManagerClass@@QAE@GE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$5
__unwindtable$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$6
__unwindtable$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_packit$2 = -44						; size = 12
_nlp$3 = -32						; size = 4
$T4 = -28						; size = 4
_pack$5 = -24						; size = 4
_pmis$6 = -20						; size = 4
_lp$7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_mis$ = 8						; size = 4
_who$ = 12						; size = 4
?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z PROC	; AlreadyPlanned

; 2280 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2281 : 	// Check for repeat requests/missions
; 2282 : 	// KCK NOTE: This assumes RequestIntercept will always be called by host machine
; 2283 : 	if (TeamInfo[who] && TeamInfo[who]->atm)

	mov	eax, DWORD PTR _who$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	je	$LN11@AlreadyPla
	mov	ecx, DWORD PTR _who$[ebp]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	cmp	DWORD PTR [edx+876], 0
	je	$LN11@AlreadyPla

; 2284 : 	{
; 2285 : 		MissionRequest	pmis;
; 2286 : 
; 2287 : 		// Check to see if a similar mission is already in progress, and cancel if so.
; 2288 : 		if (TeamInfo[who]->atm->packageList)

	mov	eax, DWORD PTR _who$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	cmp	DWORD PTR [edx+192], 0
	je	$LN10@AlreadyPla

; 2289 : 		{
; 2290 : 			VuListIterator	packit(TeamInfo[who]->atm->packageList);

	mov	eax, DWORD PTR _who$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	eax, DWORD PTR [edx+192]
	push	eax
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2291 : 			Package			pack = (Package) GetFirstUnit(&packit);

	lea	ecx, DWORD PTR _packit$2[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _pack$5[ebp], eax
$LN9@AlreadyPla:

; 2292 : 			while (pack)

	cmp	DWORD PTR _pack$5[ebp], 0
	je	SHORT $LN8@AlreadyPla

; 2293 : 			{
; 2294 : 				pmis = pack->GetMissionRequest();

	mov	ecx, DWORD PTR _pack$5[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	DWORD PTR _pmis$6[ebp], eax

; 2295 : 				if (pmis->mission == mis->mission && pmis->targetID == mis->targetID && !pack->Aborted())

	mov	edx, DWORD PTR _pmis$6[ebp]
	movzx	eax, BYTE PTR [edx+60]
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	eax, edx
	jne	SHORT $LN7@AlreadyPla
	mov	eax, DWORD PTR _mis$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _pmis$6[ebp]
	add	ecx, 8
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@AlreadyPla
	mov	ecx, DWORD PTR _pack$5[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	jne	SHORT $LN7@AlreadyPla

; 2296 : 					return 1;

	mov	DWORD PTR $T4[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T4[ebp]
	jmp	$LN12@AlreadyPla
$LN7@AlreadyPla:

; 2297 : 				pack = (Package) GetNextUnit(&packit);

	lea	edx, DWORD PTR _packit$2[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _pack$5[ebp], eax

; 2298 : 			}

	jmp	SHORT $LN9@AlreadyPla
$LN8@AlreadyPla:

; 2299 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN10@AlreadyPla:

; 2300 : 		// Now check to see if a similar mission request is already on the queue
; 2301 : 		if (TeamInfo[who]->atm->requestList)

	mov	eax, DWORD PTR _who$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	cmp	DWORD PTR [edx+180], 0
	je	$LN11@AlreadyPla

; 2302 : 		{
; 2303 : 			ListNode		lp = TeamInfo[who]->atm->requestList->GetFirstElement();

	mov	eax, DWORD PTR _who$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	ecx, DWORD PTR [edx+180]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$7[ebp], eax
$LN5@AlreadyPla:

; 2304 : 			while (lp)

	cmp	DWORD PTR _lp$7[ebp], 0
	je	$LN11@AlreadyPla

; 2305 : 			{
; 2306 : 				pmis = (MissionRequest) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$7[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _pmis$6[ebp], eax

; 2307 : 				if (pmis->mission == mis->mission && pmis->targetID == mis->targetID)

	mov	eax, DWORD PTR _pmis$6[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	cmp	ecx, eax
	jne	SHORT $LN3@AlreadyPla
	mov	ecx, DWORD PTR _mis$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _pmis$6[ebp]
	add	ecx, 8
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@AlreadyPla

; 2308 : 				{
; 2309 : 					// Dump earlier requests
; 2310 : 					if (pmis->tot > mis->tot)

	mov	eax, DWORD PTR _pmis$6[ebp]
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+36]
	jbe	SHORT $LN2@AlreadyPla

; 2311 : 						return 1;

	mov	eax, 1
	jmp	SHORT $LN12@AlreadyPla
$LN2@AlreadyPla:

; 2312 : 					ListNode		nlp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$7[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _nlp$3[ebp], eax

; 2313 : 					CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 2314 : 					TeamInfo[who]->atm->requestList->Remove(lp);

	mov	eax, DWORD PTR _lp$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _who$[ebp]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	eax, DWORD PTR [edx+876]
	mov	ecx, DWORD PTR [eax+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 2315 : 					CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 2316 : 					lp = nlp;

	mov	ecx, DWORD PTR _nlp$3[ebp]
	mov	DWORD PTR _lp$7[ebp], ecx

; 2317 : 				}
; 2318 : 				else

	jmp	SHORT $LN1@AlreadyPla
$LN3@AlreadyPla:

; 2319 : 					lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$7[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$7[ebp], eax
$LN1@AlreadyPla:

; 2320 : 			}

	jmp	$LN5@AlreadyPla
$LN11@AlreadyPla:

; 2321 : 		}
; 2322 : 	}
; 2323 : 	return 0;

	xor	eax, eax
$LN12@AlreadyPla:

; 2324 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z$0:
	lea	ecx, DWORD PTR _packit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z ENDP	; AlreadyPlanned
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -60						; size = 8
$T3 = -52						; size = 8
$T4 = -44						; size = 8
$T5 = -36						; size = 4
_target$6 = -32						; size = 4
_pflight$ = -28						; size = 4
tv160 = -24						; size = 4
$T7 = -20						; size = 4
_msg$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?RequestPlayerDivert@@YAXXZ PROC			; RequestPlayerDivert

; 2262 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestPlayerDivert@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2263 : 	FalconAirTaskingMessage *msg;
; 2264 : 	Flight	pflight;
; 2265 : 
; 2266 : 	pflight = FalconLocalSession->GetPlayerFlight();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
	mov	DWORD PTR _pflight$[ebp], eax

; 2267 : 	if (pflight)

	cmp	DWORD PTR _pflight$[ebp], 0
	je	$LN2@RequestPla

; 2268 : 	{
; 2269 : 		//		AirTaskingManagerClass::SendATMMessage(pflight->Id(), TheCampaign.PlayerTeam, FalconAirTaskingMessage::atmAssignDivert, 0, 0, NULL, 0);
; 2270 : 		VuTargetEntity	*target = (VuTargetEntity*) vuDatabase->Find(TeamInfo[FalconLocalSession->GetTeam()]->atm->OwnerId());

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$6[ebp], eax

; 2271 : 		msg = new FalconAirTaskingMessage(TeamInfo[FalconLocalSession->GetTeam()]->atm->Id(), target);

	push	77					; 0000004dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN4@RequestPla
	push	1
	mov	eax, DWORD PTR _target$6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	edx, al
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconAirTaskingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconAirTaskingMessage::FalconAirTaskingMessage
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN5@RequestPla
$LN4@RequestPla:
	mov	DWORD PTR tv160[ebp], 0
$LN5@RequestPla:
	mov	eax, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _msg$[ebp], ecx

; 2272 : 		msg->dataBlock.from = pflight->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _pflight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 2273 : 		msg->dataBlock.messageType = FalconAirTaskingMessage::atmAssignDivert;

	mov	ecx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx+65], 3

; 2274 : 		msg->dataBlock.team = FalconLocalSession->GetTeam();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	mov	edx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [edx+64], al

; 2275 : 		FalconSendMessage(msg,TRUE);

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN2@RequestPla:

; 2276 : 	}
; 2277 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RequestPlayerDivert@@YAXXZ$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?RequestPlayerDivert@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestPlayerDivert@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestPlayerDivert@@YAXXZ ENDP			; RequestPlayerDivert
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_packit$2 = -40						; size = 12
_pack$ = -28						; size = 4
_lp$ = -24						; size = 4
_i$ = -20						; size = 4
_mis$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ShowMissionLists@@YAXXZ PROC				; ShowMissionLists

; 2213 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ShowMissionLists@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2214 : 	int				i;
; 2215 : 	MissionRequest	mis;
; 2216 : 	ListNode		lp;
; 2217 : 	Package			pack;
; 2218 : 
; 2219 : 	for (i=0; i<NUM_TEAMS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@ShowMissio
$LN8@ShowMissio:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@ShowMissio:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN10@ShowMissio

; 2220 : 	{
; 2221 : 		if (TeamInfo[i]->atm)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	cmp	DWORD PTR [edx+876], 0
	je	$LN6@ShowMissio

; 2222 : 		{
; 2223 : 			lp = TeamInfo[i]->atm->requestList->GetLastElement();

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	ecx, DWORD PTR [edx+180]
	call	?GetLastElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetLastElement
	mov	DWORD PTR _lp$[ebp], eax
$LN5@ShowMissio:

; 2224 : 			while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN4@ShowMissio

; 2225 : 			{
; 2226 : 				mis = (MissionRequest) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _mis$[ebp], eax

; 2227 : 				MonoPrint("Team #%d (requ), Mission: %d at %d,%d - priority: %d, tot: %f\n",i,mis->mission,mis->tx,mis->ty,mis->priority,mis->tot);

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DP@LKGLCDBH@Team?5?$CD?$CFd?5?$CIrequ?$CJ?0?5Mission?3?5?$CFd?5at?5@
	call	_MonoPrint
	add	esp, 28					; 0000001cH

; 2228 : 				lp = lp->GetPrev();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetPrev@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetPrev
	mov	DWORD PTR _lp$[ebp], eax

; 2229 : 			}

	jmp	SHORT $LN5@ShowMissio
$LN4@ShowMissio:

; 2230 : 			Sleep(1000);

	push	1000					; 000003e8H
	call	DWORD PTR __imp__Sleep@4

; 2231 : 			if (TeamInfo[i]->atm->packageList)

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	cmp	DWORD PTR [ecx+192], 0
	je	$LN3@ShowMissio

; 2232 : 			{
; 2233 : 				VuListIterator	packit(TeamInfo[i]->atm->packageList);

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	mov	edx, DWORD PTR [ecx+192]
	push	edx
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2234 : 				MonoPrint("In progress:\n");

	push	OFFSET ??_C@_0O@EPMACBFE@In?5progress?3?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 2235 : 				pack = (Package) GetFirstUnit(&packit);

	lea	eax, DWORD PTR _packit$2[ebp]
	push	eax
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _pack$[ebp], eax
$LN2@ShowMissio:

; 2236 : 				while (pack)

	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $LN1@ShowMissio

; 2237 : 				{
; 2238 : 					mis = pack->GetMissionRequest();

	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	DWORD PTR _mis$[ebp], eax

; 2239 : 					MonoPrint("Team #%d (plan), Mission: %d at %d,%d - priority: %d, tot: %f\n",i,mis->mission,mis->tx,mis->ty,mis->priority,mis->tot);

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+42]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0DP@EAMHBGII@Team?5?$CD?$CFd?5?$CIplan?$CJ?0?5Mission?3?5?$CFd?5at?5@
	call	_MonoPrint
	add	esp, 28					; 0000001cH

; 2240 : 					pack = (Package) GetNextUnit(&packit);

	lea	eax, DWORD PTR _packit$2[ebp]
	push	eax
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _pack$[ebp], eax

; 2241 : 				}

	jmp	SHORT $LN2@ShowMissio
$LN1@ShowMissio:

; 2242 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN3@ShowMissio:

; 2243 : 			Sleep(1000);

	push	1000					; 000003e8H
	call	DWORD PTR __imp__Sleep@4
$LN6@ShowMissio:

; 2244 : 		}
; 2245 : 	}

	jmp	$LN8@ShowMissio
$LN10@ShowMissio:

; 2246 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ShowMissionLists@@YAXXZ$0:
	lea	ecx, DWORD PTR _packit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?ShowMissionLists@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ShowMissionLists@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ShowMissionLists@@YAXXZ ENDP				; ShowMissionLists
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_myit$ = -60						; size = 12
$T2 = -48						; size = 4
$T3 = -44						; size = 4
_cycle$ = -40						; size = 4
tv267 = -36						; size = 4
$T4 = -32						; size = 4
tv242 = -28						; size = 4
$T5 = -24						; size = 4
_u$ = -20						; size = 4
_t$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?RebuildATMLists@@YAXXZ PROC				; RebuildATMLists

; 2130 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RebuildATMLists@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2131 : 	Unit				u;
; 2132 : 	int					t,cycle;
; 2133 : 
; 2134 : 	// Reset the threat search array, so we only target threats once per planning cycle.
; 2135 : 	//	memset(ThreatSearch,0,sizeof(uchar)*MAX_CAMP_ENTITIES);
; 2136 : 
; 2137 : 	// Increment our cycle
; 2138 : 	// sfr: @TODO remove JB check
; 2139 : 	if (TeamInfo[0] && TeamInfo[0]->atm && !F4IsBadReadPtr(TeamInfo[0], sizeof(TeamClass)) && !F4IsBadReadPtr(TeamInfo[0]->atm, sizeof(AirTaskingManagerClass))) // JB 010220 CTD

	mov	eax, 4
	imul	eax, 0
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax], 0
	je	$LN13@RebuildATM
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx]
	cmp	DWORD PTR [edx+876], 0
	je	SHORT $LN13@RebuildATM
	push	904					; 00000388H
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@RebuildATM
	push	208					; 000000d0H
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax]
	mov	edx, DWORD PTR [ecx+876]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN13@RebuildATM

; 2140 : 		cycle = (TeamInfo[0]->atm->cycle+1)%ATM_MAX_CYCLES;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx]
	mov	eax, DWORD PTR [edx+876]
	movzx	ecx, BYTE PTR [eax+201]
	add	ecx, 1
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN24@RebuildATM
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN24@RebuildATM:
	mov	DWORD PTR _cycle$[ebp], ecx
$LN13@RebuildATM:

; 2141 : 
; 2142 : 	for (t=0;t<NUM_TEAMS;t++){

	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN12@RebuildATM
$LN11@RebuildATM:
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, 1
	mov	DWORD PTR _t$[ebp], edx
$LN12@RebuildATM:
	cmp	DWORD PTR _t$[ebp], 8
	jge	$LN10@RebuildATM

; 2143 : 		// sfr: added mem check
; 2144 : 		if (TeamInfo[t] && TeamInfo[t]->VuState() == VU_MEM_ACTIVE){

	mov	eax, DWORD PTR _t$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	je	$LN9@RebuildATM
	mov	ecx, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	jne	$LN9@RebuildATM

; 2145 : 			TeamInfo[t]->atm->squadrons = 0;

	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	xor	edx, edx
	mov	WORD PTR [ecx+150], dx

; 2146 : 			TeamInfo[t]->atm->cycle = cycle;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	al, BYTE PTR _cycle$[ebp]
	mov	BYTE PTR [edx+201], al

; 2147 : 			// Truncate schedule time to minute.
; 2148 : 			TeamInfo[t]->atm->scheduleTime = TheCampaign.CurrentTime / CampaignMinutes;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	DWORD PTR [edx+204], eax

; 2149 : 			TeamInfo[t]->atm->scheduleTime *= CampaignMinutes;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	eax, DWORD PTR [edx+204]
	imul	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	mov	DWORD PTR [ecx+204], eax

; 2150 : 			if (TeamInfo[t]->atm->squadronList){

	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	cmp	DWORD PTR [ecx+188], 0
	je	SHORT $LN9@RebuildATM

; 2151 : 				TeamInfo[t]->atm->squadronList->Purge();

	push	1
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	mov	edx, DWORD PTR [ecx+188]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	eax, DWORD PTR [ecx+876]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+188]
	mov	eax, DWORD PTR [edx]
	call	eax

; 2152 : 				TeamInfo[t]->atm->packageList->Purge();

	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	eax, DWORD PTR [edx+876]
	mov	ecx, DWORD PTR [eax+192]
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	edx, DWORD PTR [eax+876]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+192]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN9@RebuildATM:

; 2153 : 			}
; 2154 : 		}
; 2155 : 	}

	jmp	$LN11@RebuildATM
$LN10@RebuildATM:

; 2156 : 
; 2157 : 	// Rebuild list of available assets
; 2158 : 	VuListIterator myit(AllAirList);

	mov	eax, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2159 : 	u = GetFirstUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN7@RebuildATM:

; 2160 : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN6@RebuildATM

; 2161 : 	{
; 2162 : 		t = u->GetTeam();

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	DWORD PTR _t$[ebp], eax

; 2163 : 		// Since we know we have a squadron/package now, initialize the lists
; 2164 : 		// if we don't have them
; 2165 : 		if (TeamInfo[t]){

	mov	ecx, DWORD PTR _t$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4], 0
	je	$LN5@RebuildATM

; 2166 : 			if (!TeamInfo[t]->atm->squadronList){

	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	cmp	DWORD PTR [ecx+188], 0
	jne	$LN4@RebuildATM

; 2167 : 				TeamInfo[t]->atm->squadronList = new FalconPrivateList(&AllAirFilter);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN16@RebuildATM
	push	OFFSET ?AllAirFilter@@3VAirUnitFilter@@A ; AllAirFilter
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z ; FalconPrivateList::FalconPrivateList
	mov	DWORD PTR tv242[ebp], eax
	jmp	SHORT $LN17@RebuildATM
$LN16@RebuildATM:
	mov	DWORD PTR tv242[ebp], 0
$LN17@RebuildATM:
	mov	edx, DWORD PTR tv242[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+188], eax

; 2168 : 				TeamInfo[t]->atm->squadronList->Register();

	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	eax, DWORD PTR [edx+876]
	mov	ecx, DWORD PTR [eax+188]
	call	?Register@VuCollection@@QAEXXZ		; VuCollection::Register

; 2169 : 				TeamInfo[t]->atm->packageList = new FalconPrivateList(&AllAirFilter);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN18@RebuildATM
	push	OFFSET ?AllAirFilter@@3VAirUnitFilter@@A ; AllAirFilter
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z ; FalconPrivateList::FalconPrivateList
	mov	DWORD PTR tv267[ebp], eax
	jmp	SHORT $LN19@RebuildATM
$LN18@RebuildATM:
	mov	DWORD PTR tv267[ebp], 0
$LN19@RebuildATM:
	mov	ecx, DWORD PTR tv267[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+192], edx

; 2170 : 				TeamInfo[t]->atm->packageList->Register();

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	ecx, DWORD PTR [edx+192]
	call	?Register@VuCollection@@QAEXXZ		; VuCollection::Register
$LN4@RebuildATM:

; 2171 : 			}
; 2172 : 			// Add to the correct list;
; 2173 : 			if (u->GetType() == TYPE_SQUADRON && !u->Scripted()){

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 3
	jne	SHORT $LN3@RebuildATM
	mov	ecx, DWORD PTR _u$[ebp]
	call	?Scripted@UnitClass@@QBEHXZ		; UnitClass::Scripted
	test	eax, eax
	jne	SHORT $LN3@RebuildATM

; 2174 : 				TeamInfo[t]->atm->squadronList->ForcedInsert(u);

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	mov	ecx, DWORD PTR [ecx+188]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert

; 2175 : 				TeamInfo[t]->atm->squadrons++;

	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	mov	dx, WORD PTR [ecx+150]
	add	dx, 1
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	eax, DWORD PTR [ecx+876]
	mov	WORD PTR [eax+150], dx
	jmp	SHORT $LN5@RebuildATM
$LN3@RebuildATM:

; 2176 : 			}
; 2177 : 			else if (u->GetType() == TYPE_PACKAGE){

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN5@RebuildATM

; 2178 : 				TeamInfo[t]->atm->packageList->ForcedInsert(u);

	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+876]
	mov	ecx, DWORD PTR [edx+192]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert
$LN5@RebuildATM:

; 2179 : 			}
; 2180 : 		}
; 2181 : 
; 2182 : 		u = GetNextUnit(&myit);

	lea	eax, DWORD PTR _myit$[ebp]
	push	eax
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 2183 : 	}

	jmp	$LN7@RebuildATM
$LN6@RebuildATM:

; 2184 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RebuildATMLists@@YAXXZ$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?RebuildATMLists@@YAXXZ$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?RebuildATMLists@@YAXXZ$2:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?RebuildATMLists@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RebuildATMLists@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RebuildATMLists@@YAXXZ ENDP				; RebuildATMLists
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -108						; size = 4
$T3 = -104						; size = 4
_newDist$ = -100					; size = 4
_time$ = -96						; size = 4
tv309 = -92						; size = 4
tv300 = -88						; size = 4
_newSpeed$ = -84					; size = 4
tv226 = -80						; size = 4
$T4 = -76						; size = 4
tv200 = -72						; size = 4
$T5 = -68						; size = 4
_legDist$ = -64						; size = 4
_dist$ = -60						; size = 4
_tw$ = -56						; size = 4
_cw$ = -52						; size = 4
_plannedSpeed$ = -48					; size = 4
_nw$ = -44						; size = 4
_tx$ = -40						; size = 2
_ty$ = -36						; size = 2
_x$ = -32						; size = 2
_y$ = -28						; size = 2
_nx$ = -24						; size = 2
_ny$ = -20						; size = 2
_h$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_w$ = 8							; size = 4
_newDeparture$ = 12					; size = 4
?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z PROC	; RecalculateWaypoint

; 2626 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2627 : 	GridIndex		x,y,nx,ny,tx,ty;
; 2628 : 	float			dist,newDist,newSpeed,plannedSpeed;
; 2629 : 	int				time,legDist;
; 2630 : 	WayPoint		nw,tw,cw;
; 2631 : 	CampaignHeading	h;
; 2632 : 
; 2633 : 	// Let the waypoint recalculation routine do all the work
; 2634 : 	nw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax

; 2635 : 	plannedSpeed = nw->GetWPSpeed();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR _plannedSpeed$[ebp]

; 2636 : 	w->SetWPTimes(newDeparture);

	mov	eax, DWORD PTR _newDeparture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPTimes@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPTimes

; 2637 : 	recalculate_waypoint_list(w, 0, FloatToInt32(plannedSpeed*1.2F));

	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint_list
	add	esp, 12					; 0000000cH

; 2638 : 
; 2639 : 	// Check for errors
; 2640 : 	newSpeed = nw->GetWPSpeed();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR _newSpeed$[ebp]

; 2641 : 	if (newSpeed < plannedSpeed*0.5F)

	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR _newSpeed$[ebp]
	jbe	$LN10@Recalculat

; 2642 : 	{
; 2643 : 		// Find the assembly point (if one exists) and distance
; 2644 : 		cw = w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _cw$[ebp], edx

; 2645 : 		nw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax

; 2646 : 		dist = cw->DistanceTo(nw);

	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cw$[ebp]
	call	?DistanceTo@WayPointClass@@QAEMPAV1@@Z	; WayPointClass::DistanceTo
	fstp	DWORD PTR _dist$[ebp]
$LN9@Recalculat:

; 2647 : 		while (nw && !(nw->GetWPFlags() & WPF_ASSEMBLE))

	cmp	DWORD PTR _nw$[ebp], 0
	je	SHORT $LN8@Recalculat
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2
	jne	SHORT $LN8@Recalculat

; 2648 : 		{
; 2649 : 			dist += cw->DistanceTo(nw);

	mov	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cw$[ebp]
	call	?DistanceTo@WayPointClass@@QAEMPAV1@@Z	; WayPointClass::DistanceTo
	fstp	DWORD PTR tv300[ebp]
	movss	xmm0, DWORD PTR tv300[ebp]
	addss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0

; 2650 : 			cw = nw;

	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR _cw$[ebp], edx

; 2651 : 			nw = nw->GetNextWP();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax

; 2652 : 		}

	jmp	SHORT $LN9@Recalculat
$LN8@Recalculat:

; 2653 : 		if (!nw)

	cmp	DWORD PTR _nw$[ebp], 0
	jne	SHORT $LN7@Recalculat

; 2654 : 		{
; 2655 : 			nw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax

; 2656 : 			dist += cw->DistanceTo(nw);

	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cw$[ebp]
	call	?DistanceTo@WayPointClass@@QAEMPAV1@@Z	; WayPointClass::DistanceTo
	fstp	DWORD PTR tv309[ebp]
	movss	xmm0, DWORD PTR tv309[ebp]
	addss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0
$LN7@Recalculat:

; 2657 : 		}
; 2658 : 		time = nw->GetWPArrivalTime() - newDeparture;

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	sub	eax, DWORD PTR _newDeparture$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 2659 : 		newDist = (plannedSpeed*0.6F*time)/CampaignHours;

	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	cvtsi2ss xmm1, DWORD PTR _time$[ebp]
	mulss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@4a5bba00
	movss	DWORD PTR _newDist$[ebp], xmm0

; 2660 : 		legDist = FloatToInt32(((newDist-dist)+1)/2);

	movss	xmm0, DWORD PTR _newDist$[ebp]
	subss	xmm0, DWORD PTR _dist$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _legDist$[ebp], eax

; 2661 : 		if (legDist > 2)

	cmp	DWORD PTR _legDist$[ebp], 2
	jle	$LN6@Recalculat

; 2662 : 		{
; 2663 : 			// We're going to add two timing waypoints in front of the assembly point.
; 2664 : 			// First, add one legDist km away from the assembly point in the
; 2665 : 			// general direction of the previous waypoint.
; 2666 : 			nw->GetWPLocation(&nx,&ny);

	lea	ecx, DWORD PTR _ny$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 2667 : 			cw = nw->GetPrevWP();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _cw$[ebp], eax

; 2668 : 			cw->GetWPLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cw$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 2669 : 			h = DirectionTo (nx,ny,x,y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	call	?DirectionTo@@YAEFFFF@Z			; DirectionTo
	add	esp, 16					; 00000010H
	mov	BYTE PTR _h$[ebp], al

; 2670 : 			tx = nx + legDist * dx[h];

	movsx	eax, WORD PTR _nx$[ebp]
	movzx	ecx, BYTE PTR _h$[ebp]
	movsx	edx, WORD PTR ?dx@@3PAFA[ecx*2]
	imul	edx, DWORD PTR _legDist$[ebp]
	add	eax, edx
	mov	WORD PTR _tx$[ebp], ax

; 2671 : 			ty = ny + legDist * dy[h];

	movsx	eax, WORD PTR _ny$[ebp]
	movzx	ecx, BYTE PTR _h$[ebp]
	movsx	edx, WORD PTR ?dy@@3PAFA[ecx*2]
	imul	edx, DWORD PTR _legDist$[ebp]
	add	eax, edx
	mov	WORD PTR _ty$[ebp], ax

; 2672 : 			// Add the first waypoint
; 2673 : 			tw = new WayPointClass (tx, ty, nw->GetWPAltitude(), FloatToInt32(plannedSpeed*0.6F), 0, 0, WP_TIMING, 0);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN13@Recalculat
	push	0
	push	8
	push	0
	push	0
	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0WayPointClass@@QAE@FFHHKKEH@Z	; WayPointClass::WayPointClass
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN14@Recalculat
$LN13@Recalculat:
	mov	DWORD PTR tv200[ebp], 0
$LN14@Recalculat:
	mov	edx, DWORD PTR tv200[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _tw$[ebp], eax

; 2674 : 			tw->SetWPRouteAction(nw->GetWPRouteAction());

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	push	eax
	mov	ecx, DWORD PTR _tw$[ebp]
	call	?SetWPRouteAction@WayPointClass@@QAEXH@Z ; WayPointClass::SetWPRouteAction

; 2675 : 			cw->InsertWP(tw);

	mov	ecx, DWORD PTR _tw$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cw$[ebp]
	call	?InsertWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::InsertWP

; 2676 : 			// Add the second waypoint (at assembly point)
; 2677 : 			tw = new WayPointClass (nx, ny, nw->GetWPAltitude(), FloatToInt32(plannedSpeed*0.6F), 0, 0, WP_TIMING, 0);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@Recalculat
	push	0
	push	8
	push	0
	push	0
	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0WayPointClass@@QAE@FFHHKKEH@Z	; WayPointClass::WayPointClass
	mov	DWORD PTR tv226[ebp], eax
	jmp	SHORT $LN16@Recalculat
$LN15@Recalculat:
	mov	DWORD PTR tv226[ebp], 0
$LN16@Recalculat:
	mov	ecx, DWORD PTR tv226[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _tw$[ebp], edx

; 2678 : 			tw->SetWPRouteAction(nw->GetWPRouteAction());

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	push	eax
	mov	ecx, DWORD PTR _tw$[ebp]
	call	?SetWPRouteAction@WayPointClass@@QAEXH@Z ; WayPointClass::SetWPRouteAction

; 2679 : 			cw->InsertWP(tw);

	mov	eax, DWORD PTR _tw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cw$[ebp]
	call	?InsertWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::InsertWP

; 2680 : 			CheckForClimb(tw);

	mov	ecx, DWORD PTR _tw$[ebp]
	push	ecx
	call	?CheckForClimb@@YAXPAVWayPointClass@@@Z	; CheckForClimb
	add	esp, 4

; 2681 : 			CheckForClimb(tw->GetNextWP());

	mov	ecx, DWORD PTR _tw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	push	eax
	call	?CheckForClimb@@YAXPAVWayPointClass@@@Z	; CheckForClimb
	add	esp, 4

; 2682 : 			recalculate_waypoint_list(w, FloatToInt32(plannedSpeed*0.5F), FloatToInt32(plannedSpeed*1.2F));

	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint_list
	add	esp, 12					; 0000000cH
$LN6@Recalculat:

; 2683 : 		}
; 2684 : 	}

	jmp	$LN4@Recalculat
$LN10@Recalculat:

; 2685 : 	else if (newSpeed > plannedSpeed*1.2F)

	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR _newSpeed$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN4@Recalculat

; 2686 : 	{
; 2687 : 		// Find the assembly point (if one exists), clear the timing lock, and recalculate
; 2688 : 		nw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax

; 2689 : 		plannedSpeed = nw->GetWPSpeed();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR _plannedSpeed$[ebp]
$LN3@Recalculat:

; 2690 : 		while (nw && !(nw->GetWPFlags() & WPF_ASSEMBLE))

	cmp	DWORD PTR _nw$[ebp], 0
	je	SHORT $LN2@Recalculat
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2
	jne	SHORT $LN2@Recalculat

; 2691 : 			nw = nw->GetNextWP();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax
	jmp	SHORT $LN3@Recalculat
$LN2@Recalculat:

; 2692 : 		if (!nw)

	cmp	DWORD PTR _nw$[ebp], 0
	jne	SHORT $LN1@Recalculat

; 2693 : 			nw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax
$LN1@Recalculat:

; 2694 : 		nw->UnSetWPFlag(WPF_TIME_LOCKED);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?UnSetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::UnSetWPFlag

; 2695 : 		recalculate_waypoint_list(w, FloatToInt32(plannedSpeed*0.8F), FloatToInt32(plannedSpeed*1.2F));

	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	movss	xmm0, DWORD PTR _plannedSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint_list
	add	esp, 12					; 0000000cH
$LN4@Recalculat:

; 2696 : 	}
; 2697 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z ENDP	; RecalculateWaypoint
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_pc$ = 8						; size = 4
?ChillPackage@@YAXPAPAVPackageClass@@@Z PROC		; ChillPackage

; 2251 : {

	push	ebp
	mov	ebp, esp

; 2252 : 	//	CampEnterCriticalSection();
; 2253 : 	(*pc)->SetDead(1);

	push	1
	mov	eax, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetDead@UnitClass@@QAEXH@Z		; UnitClass::SetDead

; 2254 : 	(*pc)->KillUnit();

	mov	ecx, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 2255 : 	(*pc)->Remove();

	mov	edx, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Remove@CampBaseClass@@QAEHXZ		; CampBaseClass::Remove

; 2256 : 	*pc = NULL;

	mov	eax, DWORD PTR _pc$[ebp]
	mov	DWORD PTR [eax], 0

; 2257 : 	PackInserted = 0;

	mov	DWORD PTR ?PackInserted@@3HA, 0		; PackInserted

; 2258 : 	//	CampLeaveCriticalSection();
; 2259 : }

	pop	ebp
	ret	0
?ChillPackage@@YAXPAPAVPackageClass@@@Z ENDP		; ChillPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_loc$ = -32						; size = 4
_bd$ = -28						; size = 4
_d$ = -24						; size = 4
_lp$ = -20						; size = 4
_by$ = -16						; size = 2
_bx$ = -12						; size = 2
_y$ = -8						; size = 2
_x$ = -4						; size = 2
_mis$ = 8						; size = 4
_list$ = 12						; size = 4
?FindBestLocation@@YAXPAVMissionRequestClass@@PAVListClass@@@Z PROC ; FindBestLocation

; 2188 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 2189 : 	ListNode				lp;
; 2190 : 	void					*loc;
; 2191 : 	GridIndex				x,y,bx=0,by=0;

	xor	eax, eax
	mov	WORD PTR _bx$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _by$[ebp], cx

; 2192 : 	Int32					d,bd = 9999;

	mov	DWORD PTR _bd$[ebp], 9999		; 0000270fH

; 2193 : 
; 2194 : 	lp = list->GetFirstElement();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN3@FindBestLo:

; 2195 : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN2@FindBestLo

; 2196 : 	{
; 2197 : 		loc = (void*) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _loc$[ebp], eax

; 2198 : 		UnpackXY (loc, &x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loc$[ebp]
	push	ecx
	call	?UnpackXY@@YAXPAXPAF1@Z			; UnpackXY
	add	esp, 12					; 0000000cH

; 2199 : 		d = FloatToInt32(Distance(x,y,mis->tx,mis->ty));

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, WORD PTR [edx+42]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+40]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 2200 : 		if (d < bd)

	mov	edx, DWORD PTR _d$[ebp]
	cmp	edx, DWORD PTR _bd$[ebp]
	jge	SHORT $LN1@FindBestLo

; 2201 : 		{
; 2202 : 			bx = x;

	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR _bx$[ebp], ax

; 2203 : 			by = y;

	mov	cx, WORD PTR _y$[ebp]
	mov	WORD PTR _by$[ebp], cx

; 2204 : 			bd = d;

	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _bd$[ebp], edx
$LN1@FindBestLo:

; 2205 : 		}
; 2206 : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 2207 : 	}

	jmp	SHORT $LN3@FindBestLo
$LN2@FindBestLo:

; 2208 : 	mis->tx = bx;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	cx, WORD PTR _bx$[ebp]
	mov	WORD PTR [eax+40], cx

; 2209 : 	mis->ty = by;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	ax, WORD PTR _by$[ebp]
	mov	WORD PTR [edx+42], ax

; 2210 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindBestLocation@@YAXPAVMissionRequestClass@@PAVListClass@@@Z ENDP ; FindBestLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ PROC ; FalconSessionEntity::GetPlayerFlight, COMDAT
; _this$ = ecx

; 139  : 	FlightClass* GetPlayerFlight(void) const      { return playerFlightPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 480				; 000001e0H
	call	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ENDP ; FalconSessionEntity::GetPlayerFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ PROC	; VuBin<FlightClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ENDP	; VuBin<FlightClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -184						; size = 8
$T3 = -176						; size = 8
$T4 = -168						; size = 8
$T5 = -160						; size = 8
$T6 = -152						; size = 8
_ait$7 = -144						; size = 12
_oit$8 = -132						; size = 12
$T9 = -120						; size = 4
_oc$10 = -116						; size = 4
$T11 = -112						; size = 4
_o$ = -108						; size = 4
_utarget$ = -104					; size = 4
_requests$ = -100					; size = 4
_otarget$ = -96						; size = 4
_mis$ = -92						; size = 76
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_action$ = 12						; size = 4
_team$ = 16						; size = 4
_startTime$ = 20					; size = 4
?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z PROC	; TargetAllSites

; 2449 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2450 : 	Objective			otarget,o;
; 2451 : 	Unit				utarget;
; 2452 : 	MissionRequestClass	mis;

	lea	ecx, DWORD PTR _mis$[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2453 : 	int					requests = 0;

	mov	DWORD PTR _requests$[ebp], 0

; 2454 : 
; 2455 : 	if (!action)

	cmp	DWORD PTR _action$[ebp], 0
	jne	SHORT $LN28@TargetAllS

; 2456 : 		return 0;

	mov	DWORD PTR $T11[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	mov	eax, DWORD PTR $T11[ebp]
	jmp	$LN29@TargetAllS
$LN28@TargetAllS:

; 2457 : 
; 2458 : 	// Standard shit
; 2459 : 	mis.who = team;

	mov	al, BYTE PTR _team$[ebp]
	mov	BYTE PTR _mis$[ebp+32], al

; 2460 : 	mis.tot_type = TYPE_EQ;

	mov	BYTE PTR _mis$[ebp+58], 3

; 2461 : 	mis.roe_check = ROE_AIR_ATTACK;

	mov	BYTE PTR _mis$[ebp+63], 8

; 2462 : 	mis.flags = REQF_PART_OF_ACTION;

	mov	DWORD PTR _mis$[ebp+44], 1024		; 00000400H

; 2463 : 	mis.action_type = action;

	mov	cl, BYTE PTR _action$[ebp]
	mov	BYTE PTR _mis$[ebp+59], cl

; 2464 : 
; 2465 : 	// Target any appropriate objective targets
; 2466 : 	{
; 2467 : 		VuListIterator		oit(AllObjList);

	mov	edx, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	edx
	lea	ecx, DWORD PTR _oit$8[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2468 : 		otarget = (Objective) oit.GetFirst();

	lea	ecx, DWORD PTR _oit$8[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _otarget$[ebp], eax
$LN27@TargetAllS:

; 2469 : 		while (otarget){

	cmp	DWORD PTR _otarget$[ebp], 0
	je	$LN26@TargetAllS

; 2470 : 			if (otarget->GetObjectiveStatus() > 30 && GetRoE(team,otarget->GetTeam(),ROE_AIR_ATTACK) == ROE_ALLOWED){

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	eax, al
	cmp	eax, 30					; 0000001eH
	jle	$LN25@TargetAllS
	push	8
	mov	ecx, DWORD PTR _otarget$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _otarget$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR _team$[ebp]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	$LN25@TargetAllS

; 2471 : 				otarget->GetLocation(&mis.tx,&mis.ty);

	lea	eax, DWORD PTR _mis$[ebp+42]
	push	eax
	lea	ecx, DWORD PTR _mis$[ebp+40]
	push	ecx
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2472 : 				o = FindNearestObjective(POList, mis.tx, mis.ty, NULL);

	push	0
	movzx	edx, WORD PTR _mis$[ebp+42]
	push	edx
	movzx	eax, WORD PTR _mis$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax

; 2473 : 				if (o == po){

	mov	edx, DWORD PTR _o$[ebp]
	cmp	edx, DWORD PTR _po$[ebp]
	jne	$LN25@TargetAllS

; 2474 : 					mis.requesterID = otarget->Id();

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp], ecx
	mov	DWORD PTR _mis$[ebp+4], edx

; 2475 : 					mis.targetID = otarget->Id();

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp+8], ecx
	mov	DWORD PTR _mis$[ebp+12], edx

; 2476 : 					mis.vs = otarget->GetTeam();

	mov	eax, DWORD PTR _otarget$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _otarget$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _mis$[ebp+33], al

; 2477 : 					mis.priority = 0;

	xor	ecx, ecx
	mov	WORD PTR _mis$[ebp+56], cx

; 2478 : 					mis.target_num = 255;

	mov	edx, 255				; 000000ffH
	mov	WORD PTR _mis$[ebp+50], dx

; 2479 : 					if (
; 2480 : 						otarget->GetType() == TYPE_AIRBASE || 
; 2481 : 						otarget->GetType() == TYPE_AIRSTRIP || 
; 2482 : 						otarget->GetType() == TYPE_ARMYBASE
; 2483 : 					){

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 1
	je	SHORT $LN22@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 2
	je	SHORT $LN22@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 3
	jne	SHORT $LN23@TargetAllS
$LN22@TargetAllS:

; 2484 : 						// Request enemy strike vs this airbase
; 2485 : 						mis.tot = startTime + 15*CampaignMinutes;

	mov	eax, DWORD PTR _startTime$[ebp]
	add	eax, 900000				; 000dbba0H
	mov	DWORD PTR _mis$[ebp+36], eax

; 2486 : 						mis.mission = AMIS_OCASTRIKE;

	mov	BYTE PTR _mis$[ebp+60], 13		; 0000000dH

; 2487 : 						if (action == AACTION_OCA)

	cmp	DWORD PTR _action$[ebp], 2
	jne	SHORT $LN21@TargetAllS

; 2488 : 							mis.context = AirActionOCA;

	mov	BYTE PTR _mis$[ebp+62], 56		; 00000038H

; 2489 : 						else

	jmp	SHORT $LN20@TargetAllS
$LN21@TargetAllS:

; 2490 : 							mis.context = AirActionPrepAB;

	mov	BYTE PTR _mis$[ebp+62], 53		; 00000035H
$LN20@TargetAllS:

; 2491 : 						mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2492 : 						requests++;

	mov	ecx, DWORD PTR _requests$[ebp]
	add	ecx, 1
	mov	DWORD PTR _requests$[ebp], ecx
	jmp	$LN25@TargetAllS
$LN23@TargetAllS:

; 2493 : 					}
; 2494 : 					else if (otarget->GetType() == TYPE_COM_CONTROL)

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 9
	jne	SHORT $LN18@TargetAllS

; 2495 : 					{
; 2496 : 						// Request enemy strike vs this C3 facility
; 2497 : 						mis.tot = startTime + 15*CampaignMinutes;

	mov	eax, DWORD PTR _startTime$[ebp]
	add	eax, 900000				; 000dbba0H
	mov	DWORD PTR _mis$[ebp+36], eax

; 2498 : 						mis.mission = AMIS_STRIKE;

	mov	BYTE PTR _mis$[ebp+60], 15		; 0000000fH

; 2499 : 						if (action == AACTION_OCA)

	cmp	DWORD PTR _action$[ebp], 2
	jne	SHORT $LN17@TargetAllS

; 2500 : 							mis.context = AirActionOCA;

	mov	BYTE PTR _mis$[ebp+62], 56		; 00000038H

; 2501 : 						else

	jmp	SHORT $LN16@TargetAllS
$LN17@TargetAllS:

; 2502 : 							mis.context = AirActionPrepAB;

	mov	BYTE PTR _mis$[ebp+62], 53		; 00000035H
$LN16@TargetAllS:

; 2503 : 						mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2504 : 						requests++;

	mov	ecx, DWORD PTR _requests$[ebp]
	add	ecx, 1
	mov	DWORD PTR _requests$[ebp], ecx
	jmp	$LN25@TargetAllS
$LN18@TargetAllS:

; 2505 : 					}
; 2506 : 					else if (otarget->GetType() == TYPE_RADAR)

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 21					; 00000015H
	jne	SHORT $LN14@TargetAllS

; 2507 : 					{
; 2508 : 						// Generate a mission to take out the radar
; 2509 : 						ObjClassDataType	*oc = otarget->GetObjectiveClassData();

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
	mov	DWORD PTR _oc$10[ebp], eax

; 2510 : 						mis.target_num = oc->RadarFeature;

	mov	eax, DWORD PTR _oc$10[ebp]
	movzx	cx, BYTE PTR [eax+51]
	mov	WORD PTR _mis$[ebp+50], cx

; 2511 : 						mis.tot = startTime + 15*CampaignMinutes;

	mov	edx, DWORD PTR _startTime$[ebp]
	add	edx, 900000				; 000dbba0H
	mov	DWORD PTR _mis$[ebp+36], edx

; 2512 : 						mis.mission = AMIS_OCASTRIKE;

	mov	BYTE PTR _mis$[ebp+60], 13		; 0000000dH

; 2513 : 						if (action == AACTION_OCA)

	cmp	DWORD PTR _action$[ebp], 2
	jne	SHORT $LN13@TargetAllS

; 2514 : 							mis.context = AirActionOCA;

	mov	BYTE PTR _mis$[ebp+62], 56		; 00000038H

; 2515 : 						else

	jmp	SHORT $LN12@TargetAllS
$LN13@TargetAllS:

; 2516 : 							mis.context = AirActionPrepAB;

	mov	BYTE PTR _mis$[ebp+62], 53		; 00000035H
$LN12@TargetAllS:

; 2517 : 						mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2518 : 						requests++;

	mov	eax, DWORD PTR _requests$[ebp]
	add	eax, 1
	mov	DWORD PTR _requests$[ebp], eax

; 2519 : 					}
; 2520 : 					//TJL 01/02/04 Remove INTERDICT mode condition.  That mode
; 2521 : 					//is not called correctly.  These missions types should be called
; 2522 : 					//like the rest.  The player should use the sliders to determine
; 2523 : 					//what should/should not be targeted.  
; 2524 : 					//This will also fix the supply code that calls for attacks on the 
; 2525 : 					//powergrid.
; 2526 : 					//if (action == AACTION_INTERDICT)
; 2527 : 					else if (otarget->GetType() == TYPE_FACTORY || 

	jmp	$LN25@TargetAllS
$LN14@TargetAllS:

; 2528 : 									otarget->GetType() == TYPE_CHEMICAL || 
; 2529 : 									otarget->GetType() == TYPE_DEPOT || 
; 2530 : 									otarget->GetType() == TYPE_REFINERY || 
; 2531 : 									otarget->GetType() == TYPE_PORT || 
; 2532 : 									otarget->GetType() == TYPE_NUCLEAR || 
; 2533 : 									otarget->GetType() == TYPE_POWERPLANT)

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 11					; 0000000bH
	je	SHORT $LN9@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 7
	je	SHORT $LN9@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN9@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 25					; 00000019H
	je	SHORT $LN9@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 19					; 00000013H
	je	SHORT $LN9@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 17					; 00000011H
	je	SHORT $LN9@TargetAllS
	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 20					; 00000014H
	jne	SHORT $LN10@TargetAllS
$LN9@TargetAllS:

; 2534 : 					{
; 2535 : 						// Generate a mission to strike this facility
; 2536 : 						mis.tot = startTime + 25*CampaignMinutes;

	mov	edx, DWORD PTR _startTime$[ebp]
	add	edx, 1500000				; 0016e360H
	mov	DWORD PTR _mis$[ebp+36], edx

; 2537 : 						mis.mission = AMIS_INTSTRIKE;

	mov	BYTE PTR _mis$[ebp+60], 14		; 0000000eH

; 2538 : 						mis.context = AirActionInterdiction;

	mov	BYTE PTR _mis$[ebp+62], 57		; 00000039H

; 2539 : 						mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2540 : 						requests++;

	mov	eax, DWORD PTR _requests$[ebp]
	add	eax, 1
	mov	DWORD PTR _requests$[ebp], eax

; 2541 : 					}
; 2542 : 					else if (otarget->GetType() == TYPE_BRIDGE && 

	jmp	$LN25@TargetAllS
$LN10@TargetAllS:

; 2543 : 									TeamInfo[team]->GetGroundAction()->actionObjective != po->Id())

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 6
	jne	SHORT $LN7@TargetAllS
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _po$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	add	eax, 8
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@TargetAllS

; 2544 : 					{
; 2545 : 						// Generate a mission to take out this bridge (Shouldn't happen
; 2546 : 						// if this primary is a target of a ground offensive)
; 2547 : 						mis.tot = startTime + 25*CampaignMinutes;

	mov	edx, DWORD PTR _startTime$[ebp]
	add	edx, 1500000				; 0016e360H
	mov	DWORD PTR _mis$[ebp+36], edx

; 2548 : 						mis.mission = AMIS_INTSTRIKE;

	mov	BYTE PTR _mis$[ebp+60], 14		; 0000000eH

; 2549 : 						mis.context = AirActionInterdiction;

	mov	BYTE PTR _mis$[ebp+62], 57		; 00000039H

; 2550 : 						mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2551 : 						requests++;

	mov	eax, DWORD PTR _requests$[ebp]
	add	eax, 1
	mov	DWORD PTR _requests$[ebp], eax
	jmp	SHORT $LN25@TargetAllS
$LN7@TargetAllS:

; 2552 : 					}
; 2553 : 					// TJL 01/02/04 Remove the AACTION_CAS.  This is never called.
; 2554 : 					//if (action == AACTION_CAS)
; 2555 : 					else if (otarget->GetType() == TYPE_FORTIFICATION)

	mov	ecx, DWORD PTR _otarget$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN25@TargetAllS

; 2556 : 					{
; 2557 : 						// Generate a mission to strike this facility
; 2558 : 						mis.tot = startTime + 25*CampaignMinutes;

	mov	edx, DWORD PTR _startTime$[ebp]
	add	edx, 1500000				; 0016e360H
	mov	DWORD PTR _mis$[ebp+36], edx

; 2559 : 						mis.mission = AMIS_INTSTRIKE;

	mov	BYTE PTR _mis$[ebp+60], 14		; 0000000eH

; 2560 : 						mis.context = AirActionCAS;

	mov	BYTE PTR _mis$[ebp+62], 59		; 0000003bH

; 2561 : 						mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2562 : 						requests++;

	mov	eax, DWORD PTR _requests$[ebp]
	add	eax, 1
	mov	DWORD PTR _requests$[ebp], eax
$LN25@TargetAllS:

; 2563 : 					}
; 2564 : 				}
; 2565 : 			}
; 2566 : 			otarget = (Objective) oit.GetNext();

	lea	ecx, DWORD PTR _oit$8[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _otarget$[ebp], eax

; 2567 : 		}

	jmp	$LN27@TargetAllS
$LN26@TargetAllS:

; 2568 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _oit$8[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 2569 : 
; 2570 : 	// Target Air defense assets
; 2571 : 	{
; 2572 : 		VuListIterator		ait(AirDefenseList);

	mov	ecx, DWORD PTR ?AirDefenseList@@3PAVFalconPrivateList@@A ; AirDefenseList
	push	ecx
	lea	ecx, DWORD PTR _ait$7[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 2573 : 		utarget = (Unit) ait.GetFirst();

	lea	ecx, DWORD PTR _ait$7[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _utarget$[ebp], eax
$LN4@TargetAllS:

; 2574 : 		while (utarget){

	cmp	DWORD PTR _utarget$[ebp], 0
	je	$LN3@TargetAllS

; 2575 : 			if (
; 2576 : 				GetRoE(team,utarget->GetTeam(),ROE_AIR_ATTACK) == ROE_ALLOWED && 
; 2577 : 				utarget->GetElectronicDetectionRange(Air) > 0
; 2578 : 			){

	push	8
	mov	edx, DWORD PTR _utarget$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _utarget$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	movzx	ecx, BYTE PTR _team$[ebp]
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	$LN2@TargetAllS
	push	5
	mov	edx, DWORD PTR _utarget$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _utarget$[ebp]
	mov	edx, DWORD PTR [eax+420]
	call	edx
	test	eax, eax
	jle	$LN2@TargetAllS

; 2579 : 				utarget->GetLocation(&mis.tx,&mis.ty);

	lea	eax, DWORD PTR _mis$[ebp+42]
	push	eax
	lea	ecx, DWORD PTR _mis$[ebp+40]
	push	ecx
	mov	ecx, DWORD PTR _utarget$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2580 : 				o = FindNearestObjective(POList, mis.tx, mis.ty, NULL);

	push	0
	movzx	edx, WORD PTR _mis$[ebp+42]
	push	edx
	movzx	eax, WORD PTR _mis$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax

; 2581 : 				if (o == po){

	mov	edx, DWORD PTR _o$[ebp]
	cmp	edx, DWORD PTR _po$[ebp]
	jne	SHORT $LN2@TargetAllS

; 2582 : 					// Request enemy strike vs this air defense asset
; 2583 : 					mis.requesterID = utarget->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _utarget$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp], ecx
	mov	DWORD PTR _mis$[ebp+4], edx

; 2584 : 					mis.targetID = utarget->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _utarget$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp+8], ecx
	mov	DWORD PTR _mis$[ebp+12], edx

; 2585 : 					mis.vs = utarget->GetTeam();

	mov	eax, DWORD PTR _utarget$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _utarget$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _mis$[ebp+33], al

; 2586 : 					mis.tot = startTime + 5*CampaignMinutes;

	mov	ecx, DWORD PTR _startTime$[ebp]
	add	ecx, 300000				; 000493e0H
	mov	DWORD PTR _mis$[ebp+36], ecx

; 2587 : 					mis.mission = AMIS_SEADSTRIKE;

	mov	BYTE PTR _mis$[ebp+60], 11		; 0000000bH

; 2588 : 					mis.priority = 0;

	xor	edx, edx
	mov	WORD PTR _mis$[ebp+56], dx

; 2589 : 					mis.context = AirActionPrepAD;

	mov	BYTE PTR _mis$[ebp+62], 52		; 00000034H

; 2590 : 					mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2591 : 					requests++;

	mov	eax, DWORD PTR _requests$[ebp]
	add	eax, 1
	mov	DWORD PTR _requests$[ebp], eax
$LN2@TargetAllS:

; 2592 : 				}
; 2593 : 			}
; 2594 : 			utarget = (Unit) ait.GetNext();

	lea	ecx, DWORD PTR _ait$7[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _utarget$[ebp], eax

; 2595 : 		}

	jmp	$LN4@TargetAllS
$LN3@TargetAllS:

; 2596 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ait$7[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 2597 : 
; 2598 : 	// Set up a few sweep missions
; 2599 : 	mis.requesterID = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _mis$[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _mis$[ebp+4], edx

; 2600 : 	mis.targetID = FalconNullId;

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _mis$[ebp+8], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _mis$[ebp+12], ecx

; 2601 : 	mis.vs = po->GetTeam();

	mov	edx, DWORD PTR _po$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _po$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	mov	BYTE PTR _mis$[ebp+33], al

; 2602 : 	mis.mission = AMIS_SWEEP;

	mov	BYTE PTR _mis$[ebp+60], 7

; 2603 : 	mis.context = AirActionPrepAir;

	mov	BYTE PTR _mis$[ebp+62], 54		; 00000036H

; 2604 : 	mis.tot = startTime + 5*CampaignMinutes;

	mov	eax, DWORD PTR _startTime$[ebp]
	add	eax, 300000				; 000493e0H
	mov	DWORD PTR _mis$[ebp+36], eax

; 2605 : 	mis.priority = 0;

	xor	ecx, ecx
	mov	WORD PTR _mis$[ebp+56], cx

; 2606 : 	po->GetLocation(&mis.tx,&mis.ty);

	lea	edx, DWORD PTR _mis$[ebp+42]
	push	edx
	lea	eax, DWORD PTR _mis$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _po$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2607 : 	mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2608 : 	requests++;

	mov	ecx, DWORD PTR _requests$[ebp]
	add	ecx, 1
	mov	DWORD PTR _requests$[ebp], ecx

; 2609 : 	mis.tot = startTime + 15*CampaignMinutes;

	mov	edx, DWORD PTR _startTime$[ebp]
	add	edx, 900000				; 000dbba0H
	mov	DWORD PTR _mis$[ebp+36], edx

; 2610 : 	mis.priority = 0;

	xor	eax, eax
	mov	WORD PTR _mis$[ebp+56], ax

; 2611 : 	mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2612 : 	requests++;

	mov	ecx, DWORD PTR _requests$[ebp]
	add	ecx, 1
	mov	DWORD PTR _requests$[ebp], ecx

; 2613 : 	mis.tot = startTime + 25*CampaignMinutes;

	mov	edx, DWORD PTR _startTime$[ebp]
	add	edx, 1500000				; 0016e360H
	mov	DWORD PTR _mis$[ebp+36], edx

; 2614 : 	mis.priority = 0;

	xor	eax, eax
	mov	WORD PTR _mis$[ebp+56], ax

; 2615 : 	mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2616 : 	requests++;

	mov	ecx, DWORD PTR _requests$[ebp]
	add	ecx, 1
	mov	DWORD PTR _requests$[ebp], ecx

; 2617 : 
; 2618 : 	// KCK TODO?: CAS actions -> BAI Interdiction?
; 2619 : 	return requests;

	mov	edx, DWORD PTR _requests$[ebp]
	mov	DWORD PTR $T9[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	mov	eax, DWORD PTR $T9[ebp]
$LN29@TargetAllS:

; 2620 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z$0:
	lea	ecx, DWORD PTR _mis$[ebp]
	jmp	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
__unwindfunclet$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z$1:
	lea	ecx, DWORD PTR _oit$8[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z$2:
	lea	ecx, DWORD PTR _ait$7[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TargetAllSites@@YAHPAVObjectiveClass@@HHK@Z ENDP	; TargetAllSites
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -140						; size = 8
$T3 = -132						; size = 8
_y$ = -124						; size = 2
_nx$ = -120						; size = 2
_ny$ = -116						; size = 2
_x$ = -112						; size = 2
_enemyPackage$ = -108					; size = 4
_w$ = -104						; size = 4
_test$4 = -100						; size = 4
_main$ = -96						; size = 4
_mis$ = -92						; size = 76
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_enemy$ = 8						; size = 4
_who$ = 12						; size = 4
_hint$ = 16						; size = 4
?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z PROC ; RequestIntercept

; 2353 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2354 : 	MissionRequestClass		mis;

	lea	ecx, DWORD PTR _mis$[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2355 : 	Package					enemyPackage;
; 2356 : 	Flight					main;
; 2357 : 	GridIndex				x,y,nx,ny;
; 2358 : 	WayPoint				w;
; 2359 : 
; 2360 : 	//TJL 11/16/03 The Help Request will now target BARCAPSs
; 2361 : 	// 2001-10-27 MODIFIED BY S.G. Do bother with BARCAP if yelling for help
; 2362 : 	//if (enemy->GetUnitMission() == AMIS_BARCAP || enemy->GetUnitMission() == AMIS_BARCAP2 || enemy->GetUnitMission() == AMIS_FAC)
; 2363 : 	// 2001-12-17 M.N. changed back, don't think this is right at all...
; 2364 : 	//	if (hint == RI_HELP || (enemy->GetUnitMission() == AMIS_BARCAP || enemy->GetUnitMission() == AMIS_BARCAP2 || enemy->GetUnitMission() == AMIS_FAC))
; 2365 : 	//return;
; 2366 : 	/*
; 2367 : 	// Don't bother intercepting FAC
; 2368 : 	if (enemy->GetUnitMission() == AMIS_FAC)
; 2369 : 	return;
; 2370 : 
; 2371 : 	// Don't bother intercepting helecopter flights (this is admittidly hackish)
; 2372 : 	if (enemy->IsHelicopter())
; 2373 : 	return;*/
; 2374 : 
; 2375 : 	//Cobra Cheat script
; 2376 : 	if (hint != RI_HELP)

	cmp	DWORD PTR _hint$[ebp], 1
	je	SHORT $LN9@RequestInt

; 2377 : 	{
; 2378 : 		int test = enemy->GetUnitMission();

	mov	eax, DWORD PTR _enemy$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	DWORD PTR _test$4[ebp], eax

; 2379 : 		if (test != AMIS_OCASTRIKE &&
; 2380 : 						test != AMIS_INTSTRIKE &&
; 2381 : 						test != AMIS_STRIKE && 
; 2382 : 						test != AMIS_DEEPSTRIKE &&
; 2383 : 						test != AMIS_STSTRIKE && 
; 2384 : 						test != AMIS_STRATBOMB &&
; 2385 : 						test != AMIS_SEADSTRIKE)

	cmp	DWORD PTR _test$4[ebp], 13		; 0000000dH
	je	SHORT $LN9@RequestInt
	cmp	DWORD PTR _test$4[ebp], 14		; 0000000eH
	je	SHORT $LN9@RequestInt
	cmp	DWORD PTR _test$4[ebp], 15		; 0000000fH
	je	SHORT $LN9@RequestInt
	cmp	DWORD PTR _test$4[ebp], 16		; 00000010H
	je	SHORT $LN9@RequestInt
	cmp	DWORD PTR _test$4[ebp], 17		; 00000011H
	je	SHORT $LN9@RequestInt
	cmp	DWORD PTR _test$4[ebp], 18		; 00000012H
	je	SHORT $LN9@RequestInt
	cmp	DWORD PTR _test$4[ebp], 11		; 0000000bH
	je	SHORT $LN9@RequestInt

; 2386 : 			return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	jmp	$LN10@RequestInt
$LN9@RequestInt:

; 2387 : 	}
; 2388 : 
; 2389 : 	if (enemy->IsHelicopter())

	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	eax, DWORD PTR [edx+992]
	call	eax
	test	eax, eax
	je	SHORT $LN7@RequestInt

; 2390 : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	jmp	$LN10@RequestInt
$LN7@RequestInt:

; 2391 : 
; 2392 : 	// We're tasking vs the entire incoming package, not just this flight.
; 2393 : 	enemyPackage = (Package)enemy->GetUnitParent();

	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _enemyPackage$[ebp], eax

; 2394 : 	if (!enemyPackage)

	cmp	DWORD PTR _enemyPackage$[ebp], 0
	jne	SHORT $LN6@RequestInt

; 2395 : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	jmp	$LN10@RequestInt
$LN6@RequestInt:

; 2396 : 
; 2397 : 	main = (Flight) enemyPackage->GetFirstUnitElement();

	mov	ecx, DWORD PTR _enemyPackage$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _enemyPackage$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	mov	DWORD PTR _main$[ebp], eax

; 2398 : 	if (!main)

	cmp	DWORD PTR _main$[ebp], 0
	jne	SHORT $LN5@RequestInt

; 2399 : 		main = enemy;

	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	DWORD PTR _main$[ebp], ecx
$LN5@RequestInt:

; 2400 : 
; 2401 : 	// Don't intercept flights/packages which are aborting
; 2402 : 	if (main->Aborted())

	mov	ecx, DWORD PTR _main$[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	je	SHORT $LN4@RequestInt

; 2403 : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	jmp	$LN10@RequestInt
$LN4@RequestInt:

; 2404 : 
; 2405 : 	main->GetLocation(&mis.tx,&mis.ty);

	lea	edx, DWORD PTR _mis$[ebp+42]
	push	edx
	lea	eax, DWORD PTR _mis$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _main$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2406 : 	mis.requesterID = enemy->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _enemy$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp], edx
	mov	DWORD PTR _mis$[ebp+4], eax

; 2407 : 	// Target vs package
; 2408 : 	mis.targetID = enemyPackage->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _enemyPackage$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp+8], edx
	mov	DWORD PTR _mis$[ebp+12], eax

; 2409 : 	mis.vs = enemy->GetTeam();

	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _mis$[ebp+33], al

; 2410 : 	mis.who = who;

	mov	cl, BYTE PTR _who$[ebp]
	mov	BYTE PTR _mis$[ebp+32], cl

; 2411 : 	mis.tot = Camp_GetCurrentTime();

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	DWORD PTR _mis$[ebp+36], eax

; 2412 : 	mis.tot_type = TYPE_NE;

	mov	BYTE PTR _mis$[ebp+58], 0

; 2413 : 	mis.mission = AMIS_INTERCEPT;

	mov	BYTE PTR _mis$[ebp+60], 9

; 2414 : 	mis.roe_check = ROE_AIR_ATTACK;

	mov	BYTE PTR _mis$[ebp+63], 8

; 2415 : 	mis.context = interceptEnemyAircraft;

	mov	BYTE PTR _mis$[ebp+62], 20		; 00000014H

; 2416 : 	mis.match_strength = GetUnitScore(enemyPackage, Air);	// Take entire package's score

	push	5
	mov	edx, DWORD PTR _enemyPackage$[ebp]
	push	edx
	call	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z ; GetUnitScore
	add	esp, 8
	mov	WORD PTR _mis$[ebp+54], ax

; 2417 : 	mis.flags = AMIS_IMMEDIATE;

	mov	DWORD PTR _mis$[ebp+44], 65536		; 00010000H

; 2418 : 
; 2419 : 	// 2001-10-27 ADDED BY S.G. Flag the intercept has been an help request 
; 2420 : 	if (hint == RI_HELP)

	cmp	DWORD PTR _hint$[ebp], 1
	jne	SHORT $LN3@RequestInt

; 2421 : 		mis.flags |= AMIS_HELP_REQUEST;

	mov	eax, DWORD PTR _mis$[ebp+44]
	or	eax, 1073741824				; 40000000H
	mov	DWORD PTR _mis$[ebp+44], eax
$LN3@RequestInt:

; 2422 : 	// END OF ADDED SECTION 2001-10-27
; 2423 : 
; 2424 : 	// Check for repeat requests/missions
; 2425 : 	// KCK NOTE: This assumes RequestIntercept will always be called by host machine
; 2426 : 	// Experimental! Try no checking for repeat intercepts
; 2427 : 	//	if (AlreadyPlanned(&mis, mis.who))
; 2428 : 	//		return;
; 2429 : 
; 2430 : 	// We're going to store our heading in the min_to variable
; 2431 : 	main->GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _main$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2432 : 	w = main->GetCurrentUnitWP();

	mov	ecx, DWORD PTR _main$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 2433 : 	if (!w)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN2@RequestInt

; 2434 : 	{
; 2435 : 		// The main flight hasn't taken off yet, get it's first non-takeoff wp
; 2436 : 		w = main->GetFirstUnitWP();

	mov	ecx, DWORD PTR _main$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 2437 : 		if (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN2@RequestInt

; 2438 : 			w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax
$LN2@RequestInt:

; 2439 : 	}
; 2440 : 	ShiAssert(w);
; 2441 : 	w->GetWPLocation(&nx,&ny);

	lea	eax, DWORD PTR _ny$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 2442 : 	mis.min_to = DirectionTo(x,y,nx,ny);

	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?DirectionTo@@YAEFFFF@Z			; DirectionTo
	add	esp, 16					; 00000010H
	mov	BYTE PTR _mis$[ebp+71], al

; 2443 : 
; 2444 : 	mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2445 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
$LN10@RequestInt:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z$0:
	lea	ecx, DWORD PTR _mis$[ebp]
	jmp	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
__ehhandler$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ENDP ; RequestIntercept
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -120						; size = 8
$T3 = -112						; size = 4
tv179 = -108						; size = 4
$T4 = -104						; size = 4
$T5 = -100						; size = 4
_rel$ = -96						; size = 4
_mis$ = -92						; size = 76
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
?RequestSARMission@@YAHPAVFlightClass@@@Z PROC		; RequestSARMission

; 2327 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestSARMission@@YAHPAVFlightClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2328 : 	MissionRequestClass		mis;

	lea	ecx, DWORD PTR _mis$[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2329 : 	int						rel;
; 2330 : 
; 2331 : 	mis.requesterID = flight->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp], ecx
	mov	DWORD PTR _mis$[ebp+4], edx

; 2332 : 	mis.who = flight->GetTeam();

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _mis$[ebp+32], al

; 2333 : 	mis.tot = Camp_GetCurrentTime();

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	DWORD PTR _mis$[ebp+36], eax

; 2334 : 	mis.tot_type = TYPE_NE;

	mov	BYTE PTR _mis$[ebp+58], 0

; 2335 : 	mis.mission = AMIS_SAR;

	mov	BYTE PTR _mis$[ebp+60], 34		; 00000022H

; 2336 : 	mis.context = friendlyRescueExpected;

	mov	BYTE PTR _mis$[ebp+62], 24		; 00000018H

; 2337 : 	flight->GetLocation(&mis.tx,&mis.ty);

	lea	ecx, DWORD PTR _mis$[ebp+42]
	push	ecx
	lea	edx, DWORD PTR _mis$[ebp+40]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2338 : 
; 2339 : 	// Check if it's already planned
; 2340 : 	if (AlreadyPlanned(&mis, mis.who))

	movzx	eax, BYTE PTR _mis$[ebp+32]
	push	eax
	lea	ecx, DWORD PTR _mis$[ebp]
	push	ecx
	call	?AlreadyPlanned@@YAHPAVMissionRequestClass@@H@Z ; AlreadyPlanned
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@RequestSAR

; 2341 : 		return 1;

	mov	DWORD PTR $T3[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	mov	eax, DWORD PTR $T3[ebp]
	jmp	$LN3@RequestSAR
$LN2@RequestSAR:

; 2342 : 
; 2343 : 	// Check if we're to far into enemy territory
; 2344 : 	rel = GetTTRelations(GetOwner(TheCampaign.CampMapData, mis.tx,mis.ty),mis.who);

	movzx	edx, BYTE PTR _mis$[ebp+32]
	push	edx
	movzx	eax, WORD PTR _mis$[ebp+42]
	push	eax
	movzx	ecx, WORD PTR _mis$[ebp+40]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+296
	push	edx
	call	?GetOwner@@YAEPAEFF@Z			; GetOwner
	add	esp, 12					; 0000000cH
	movzx	eax, al
	push	eax
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	mov	DWORD PTR _rel$[ebp], eax

; 2345 : 	if (rel != Friendly && rel != Allied && DistanceToFront(mis.tx,mis.ty) > MAX_SAR_DIST)

	cmp	DWORD PTR _rel$[ebp], 2
	je	SHORT $LN1@RequestSAR
	cmp	DWORD PTR _rel$[ebp], 1
	je	SHORT $LN1@RequestSAR
	movzx	ecx, WORD PTR _mis$[ebp+42]
	push	ecx
	movzx	edx, WORD PTR _mis$[ebp+40]
	push	edx
	call	?DistanceToFront@@YAMFF@Z		; DistanceToFront
	add	esp, 8
	fstp	DWORD PTR tv179[ebp]
	movss	xmm0, DWORD PTR tv179[ebp]
	movsx	eax, WORD PTR ?MAX_SAR_DIST@@3FA	; MAX_SAR_DIST
	cvtsi2ss xmm1, eax
	comiss	xmm0, xmm1
	jbe	SHORT $LN1@RequestSAR

; 2346 : 		return 0;

	mov	DWORD PTR $T5[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	mov	eax, DWORD PTR $T5[ebp]
	jmp	SHORT $LN3@RequestSAR
$LN1@RequestSAR:

; 2347 : 
; 2348 : 	mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission

; 2349 : 	return 1;

	mov	DWORD PTR $T4[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	mov	eax, DWORD PTR $T4[ebp]
$LN3@RequestSAR:

; 2350 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RequestSARMission@@YAHPAVFlightClass@@@Z$0:
	lea	ecx, DWORD PTR _mis$[ebp]
	jmp	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
__ehhandler$?RequestSARMission@@YAHPAVFlightClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestSARMission@@YAHPAVFlightClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestSARMission@@YAHPAVFlightClass@@@Z ENDP		; RequestSARMission
; Function compile flags: /Odtp
;	COMDAT ??_GAirTaskingManagerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAirTaskingManagerClass@@UAEPAXI@Z PROC		; AirTaskingManagerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AirTaskingManagerClass@@UAE@XZ	; AirTaskingManagerClass::~AirTaskingManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAirTaskingManagerClass@@UAEPAXI@Z ENDP		; AirTaskingManagerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_time$ = 16						; size = 4
?FindNearestActiveJammer@AirTaskingManagerClass@@QAEHPAF0PAK@Z PROC ; AirTaskingManagerClass::FindNearestActiveJammer
; _this$ = ecx

; 2087 : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2088 : 	return 0;

	xor	eax, eax

; 2089 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindNearestActiveJammer@AirTaskingManagerClass@@QAEHPAF0PAK@Z ENDP ; AirTaskingManagerClass::FindNearestActiveJammer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_myit$2 = -52						; size = 12
_d$ = -40						; size = 4
_this$ = -36						; size = 4
_bd$ = -32						; size = 4
_bt$3 = -28						; size = 4
_p$4 = -24						; size = 4
_by$5 = -20						; size = 2
_bx$6 = -16						; size = 2
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_time$ = 16						; size = 4
?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z PROC ; AirTaskingManagerClass::FindNearestActiveTanker
; _this$ = ecx

; 2048 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2049 : 	Int32				d,bd=9999;

	mov	DWORD PTR _bd$[ebp], 9999		; 0000270fH

; 2050 : 
; 2051 : 	if (packageList)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	$LN6@FindNeares

; 2052 : 	{
; 2053 : 		GridIndex			bx=0,by=0;

	xor	ecx, ecx
	mov	WORD PTR _bx$6[ebp], cx
	xor	edx, edx
	mov	WORD PTR _by$5[ebp], dx

; 2054 : 		CampaignTime		bt=0;

	mov	DWORD PTR _bt$3[ebp], 0

; 2055 : 		Package				p;
; 2056 : 
; 2057 : 		VuListIterator		myit(packageList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2058 : 		p = (Package) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _p$4[ebp], eax
$LN5@FindNeares:

; 2059 : 		while (p)

	cmp	DWORD PTR _p$4[ebp], 0
	je	$LN4@FindNeares

; 2060 : 		{
; 2061 : 			if (p->GetMissionRequest()->mission == AMIS_TANKER && p->GetMissionRequest()->tot < *time && p->GetMissionRequest()->tot+(MissionData[AMIS_TANKER].loitertime*CampaignMinutes) > *time)

	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	movzx	edx, BYTE PTR [eax+60]
	cmp	edx, 28					; 0000001cH
	jne	$LN2@FindNeares
	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	ecx, DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx]
	jae	$LN2@FindNeares
	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	ecx, 32					; 00000020H
	imul	ecx, 28					; 0000001cH
	movsx	edx, WORD PTR ?MissionData@@3PAUMissionDataType@@A[ecx+16]
	imul	edx, 60000				; 0000ea60H
	add	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _time$[ebp]
	cmp	edx, DWORD PTR [eax]
	jbe	$LN2@FindNeares

; 2062 : 			{
; 2063 : 				// It's a tanker mission and it's planning to be around when we need it
; 2064 : 				d = FloatToInt32(Distance(*x,*y,p->GetMissionRequest()->tx,p->GetMissionRequest()->ty));

	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	cx, WORD PTR [eax+42]
	movzx	edx, cx
	push	edx
	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	ax, WORD PTR [eax+40]
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 2065 : 				if (d < bd)

	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR _bd$[ebp]
	jge	SHORT $LN2@FindNeares

; 2066 : 				{
; 2067 : 					bd = d;

	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _bd$[ebp], ecx

; 2068 : 					bx = p->GetMissionRequest()->tx;

	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	dx, WORD PTR [eax+40]
	mov	WORD PTR _bx$6[ebp], dx

; 2069 : 					by = p->GetMissionRequest()->ty;

	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	ax, WORD PTR [eax+42]
	mov	WORD PTR _by$5[ebp], ax

; 2070 : 					bt = p->GetMissionRequest()->tot + (MissionData[AMIS_TANKER].loitertime*CampaignMinutes);

	mov	ecx, DWORD PTR _p$4[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	ecx, 32					; 00000020H
	imul	ecx, 28					; 0000001cH
	movsx	edx, WORD PTR ?MissionData@@3PAUMissionDataType@@A[ecx+16]
	imul	edx, 60000				; 0000ea60H
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _bt$3[ebp], edx
$LN2@FindNeares:

; 2071 : 				}
; 2072 : 			}
; 2073 : 			p = (Package) myit.GetNext();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _p$4[ebp], eax

; 2074 : 		}

	jmp	$LN5@FindNeares
$LN4@FindNeares:

; 2075 : 
; 2076 : 		if (bt > 1)

	cmp	DWORD PTR _bt$3[ebp], 1
	jbe	SHORT $LN1@FindNeares

; 2077 : 		{
; 2078 : 			*x = bx;

	mov	eax, DWORD PTR _x$[ebp]
	mov	cx, WORD PTR _bx$6[ebp]
	mov	WORD PTR [eax], cx

; 2079 : 			*y = by;

	mov	edx, DWORD PTR _y$[ebp]
	mov	ax, WORD PTR _by$5[ebp]
	mov	WORD PTR [edx], ax

; 2080 : 			*time = bt;

	mov	ecx, DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _bt$3[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FindNeares:

; 2081 : 		}
; 2082 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN6@FindNeares:

; 2083 : 	return bd;

	mov	eax, DWORD PTR _bd$[ebp]

; 2084 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestActiveTanker@AirTaskingManagerClass@@QAEHPAF0PAK@Z ENDP ; AirTaskingManagerClass::FindNearestActiveTanker
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 8
$T3 = -32						; size = 4
tv92 = -28						; size = 4
$T4 = -24						; size = 4
_this$ = -20						; size = 4
_cur$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ent$ = 8						; size = 4
?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z PROC ; AirTaskingManagerClass::AddToAirbaseList
; _this$ = ecx

; 2026 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2027 : 	ATMAirbaseClass	*cur;
; 2028 : 
; 2029 : 	cur = airbaseList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@AddToAirba:

; 2030 : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@AddToAirba

; 2031 : 	{
; 2032 : 		if (cur->id == ent->Id())

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@AddToAirba

; 2033 : 		{
; 2034 : 			cur->usage++;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	dl, BYTE PTR [ecx+40]
	add	dl, 1
	mov	eax, DWORD PTR _cur$[ebp]
	mov	BYTE PTR [eax+40], dl

; 2035 : 			return cur;

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN4@AddToAirba
$LN1@AddToAirba:

; 2036 : 		}
; 2037 : 		cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _cur$[ebp], edx

; 2038 : 	}

	jmp	SHORT $LN3@AddToAirba
$LN2@AddToAirba:

; 2039 : 
; 2040 : 	cur = new ATMAirbaseClass(ent);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN6@AddToAirba
	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0ATMAirbaseClass@@QAE@PAVCampBaseClass@@@Z ; ATMAirbaseClass::ATMAirbaseClass
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN7@AddToAirba
$LN6@AddToAirba:
	mov	DWORD PTR tv92[ebp], 0
$LN7@AddToAirba:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 2041 : 	cur->next = airbaseList;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR [eax+44], edx

; 2042 : 	cur->usage++;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR [eax+40]
	add	cl, 1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	BYTE PTR [edx+40], cl

; 2043 : 	airbaseList = cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+196], ecx

; 2044 : 	return cur;

	mov	eax, DWORD PTR _cur$[ebp]
$LN4@AddToAirba:

; 2045 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z ENDP ; AirTaskingManagerClass::AddToAirbaseList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_abid$ = 8						; size = 8
?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z PROC ; AirTaskingManagerClass::FindATMAirbase
; _this$ = ecx

; 2012 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2013 : 	ATMAirbaseClass	*cur;
; 2014 : 
; 2015 : 	cur = airbaseList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@FindATMAir:

; 2016 : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@FindATMAir

; 2017 : 	{
; 2018 : 		if (cur->id == abid)

	lea	edx, DWORD PTR _abid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@FindATMAir

; 2019 : 			return cur;

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN4@FindATMAir
$LN1@FindATMAir:

; 2020 : 		cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _cur$[ebp], edx

; 2021 : 	}

	jmp	SHORT $LN3@FindATMAir
$LN2@FindATMAir:

; 2022 : 	return NULL;

	xor	eax, eax
$LN4@FindATMAir:

; 2023 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z ENDP ; AirTaskingManagerClass::FindATMAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_myit$ = -56						; size = 12
$T2 = -44						; size = 8
_mins_til_takeoff$3 = -36				; size = 4
_this$ = -32						; size = 4
_block$4 = -28						; size = 4
_w$5 = -24						; size = 4
_u$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rw$ = 8						; size = 4
_airbase$ = 12						; size = 4
_tilblock$ = 16						; size = 4
?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z PROC ; AirTaskingManagerClass::ZapSchedule
; _this$ = ecx

; 1964 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1965 : 	int					i;
; 1966 : 	Unit				u;
; 1967 : 
; 1968 : 	if (tilblock >= ATM_MAX_CYCLES)

	cmp	DWORD PTR _tilblock$[ebp], 32		; 00000020H
	jl	SHORT $LN18@ZapSchedul

; 1969 : 		tilblock = ATM_MAX_CYCLES-1;

	mov	DWORD PTR _tilblock$[ebp], 31		; 0000001fH
$LN18@ZapSchedul:

; 1970 : 	if (!rw)

	cmp	DWORD PTR _rw$[ebp], 0
	jne	SHORT $LN17@ZapSchedul

; 1971 : 	{
; 1972 : 		// We have no runway's operating currently - zap the entire schedule
; 1973 : 		for (i=0; i<=tilblock; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@ZapSchedul
$LN15@ZapSchedul:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@ZapSchedul:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _tilblock$[ebp]
	jg	SHORT $LN14@ZapSchedul

; 1974 : 			airbase->schedule[i] = ATM_CYCLE_FULL;

	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+8], 31			; 0000001fH
	jmp	SHORT $LN15@ZapSchedul
$LN14@ZapSchedul:

; 1975 : 	}
; 1976 : 	else if (rw == 1)

	jmp	SHORT $LN13@ZapSchedul
$LN17@ZapSchedul:
	cmp	DWORD PTR _rw$[ebp], 1
	jne	SHORT $LN12@ZapSchedul

; 1977 : 	{
; 1978 : 		// We have one runway working - zap half our blocks
; 1979 : 		for (i=0; i<=tilblock; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@ZapSchedul
$LN10@ZapSchedul:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@ZapSchedul:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _tilblock$[ebp]
	jg	SHORT $LN9@ZapSchedul

; 1980 : 		{
; 1981 : 			if (i%2)

	mov	edx, DWORD PTR _i$[ebp]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN23@ZapSchedul
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN23@ZapSchedul:
	test	edx, edx
	je	SHORT $LN8@ZapSchedul

; 1982 : 				airbase->schedule[i] = ATM_CYCLE_FULL;

	mov	eax, DWORD PTR _airbase$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+8], 31			; 0000001fH
$LN8@ZapSchedul:

; 1983 : 		}

	jmp	SHORT $LN10@ZapSchedul
$LN9@ZapSchedul:

; 1984 : 	}
; 1985 : 	else

	jmp	SHORT $LN13@ZapSchedul
$LN12@ZapSchedul:

; 1986 : 		// We have more than one runway working
; 1987 : 		return;

	jmp	$LN19@ZapSchedul
$LN13@ZapSchedul:

; 1988 : 
; 1989 : 	// Now cancel flights in the offending blocks
; 1990 : 	VuListIterator		myit(AllAirList);

	mov	ecx, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	ecx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1991 : 	u = GetFirstUnit(&myit);

	lea	edx, DWORD PTR _myit$[ebp]
	push	edx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN6@ZapSchedul:

; 1992 : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN5@ZapSchedul

; 1993 : 	{
; 1994 : 		if (u->GetTeam() == owner && u->GetType() == TYPE_FLIGHT)

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	cmp	ecx, eax
	jne	$LN4@ZapSchedul
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	jne	$LN4@ZapSchedul

; 1995 : 		{
; 1996 : 			WayPoint		w = u->GetCurrentUnitWP();

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$5[ebp], eax

; 1997 : 			if (w && w->GetWPAction() == WP_TAKEOFF && w->GetWPTargetID() == airbase->id)

	cmp	DWORD PTR _w$5[ebp], 0
	je	$LN4@ZapSchedul
	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	SHORT $LN4@ZapSchedul
	mov	edx, DWORD PTR _airbase$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@ZapSchedul

; 1998 : 			{
; 1999 : 				int			block,mins_til_takeoff;
; 2000 : 				mins_til_takeoff = (w->GetWPDepartureTime() - TheCampaign.lastAirPlan) / CampaignMinutes;

	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	sub	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+32
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _mins_til_takeoff$3[ebp], eax

; 2001 : 				block = mins_til_takeoff/5;

	mov	eax, DWORD PTR _mins_til_takeoff$3[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _block$4[ebp], eax

; 2002 : 				if (block < tilblock && (!rw || block%2)){

	mov	edx, DWORD PTR _block$4[ebp]
	cmp	edx, DWORD PTR _tilblock$[ebp]
	jge	SHORT $LN4@ZapSchedul
	cmp	DWORD PTR _rw$[ebp], 0
	je	SHORT $LN1@ZapSchedul
	mov	eax, DWORD PTR _block$4[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN24@ZapSchedul
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN24@ZapSchedul:
	test	eax, eax
	je	SHORT $LN4@ZapSchedul
$LN1@ZapSchedul:

; 2003 : 					CancelFlight ((Flight)u);

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	?CancelFlight@@YAXPAVFlightClass@@@Z	; CancelFlight
	add	esp, 4
$LN4@ZapSchedul:

; 2004 : 				}
; 2005 : 			}
; 2006 : 		}
; 2007 : 		u = GetNextUnit(&myit);

	lea	edx, DWORD PTR _myit$[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 2008 : 	}

	jmp	$LN6@ZapSchedul
$LN5@ZapSchedul:

; 2009 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN19@ZapSchedul:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z ENDP ; AirTaskingManagerClass::ZapSchedule
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_airbase$ = -12						; size = 4
_the_airbase$ = -8					; size = 4
_tilblock$ = -4						; size = 4
_abid$ = 8						; size = 8
?ZapAirbase@AirTaskingManagerClass@@QAEXVVU_ID@@@Z PROC	; AirTaskingManagerClass::ZapAirbase
; _this$ = ecx

; 1926 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 	int				tilblock;
; 1928 : 	ATMAirbaseClass	*airbase;
; 1929 : 	CampEntity		the_airbase;
; 1930 : 
; 1931 : 	airbase = FindATMAirbase(abid);

	mov	eax, DWORD PTR _abid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _abid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z ; AirTaskingManagerClass::FindATMAirbase
	mov	DWORD PTR _airbase$[ebp], eax

; 1932 : 	if (!airbase)

	cmp	DWORD PTR _airbase$[ebp], 0
	jne	SHORT $LN8@ZapAirbase

; 1933 : 		// KCK Note: airbase no longer in use. Still, it would be nice
; 1934 : 		// to eliminate flights.. But it'd require a few minutes work..
; 1935 : 		return;			

	jmp	$LN9@ZapAirbase
$LN8@ZapAirbase:

; 1936 : 	the_airbase = (CampEntity) vuDatabase->Find(abid);

	mov	edx, DWORD PTR _abid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _abid$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _the_airbase$[ebp], eax

; 1937 : 	if (the_airbase->IsUnit())

	mov	ecx, DWORD PTR _the_airbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _the_airbase$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN7@ZapAirbase
	jmp	$LN9@ZapAirbase
$LN7@ZapAirbase:

; 1938 : 	{
; 1939 : 		// This is probably an aircraft carrier which was sunk.
; 1940 : 		// Techinically, we should kill all squadrons based here and cancle all flights..
; 1941 : 		// But for now, we do nothing.
; 1942 : 	}
; 1943 : 	else if ((((Objective)the_airbase)->static_data.class_data) && ((Objective)the_airbase)->static_data.class_data->DataRate == 1)

	mov	ecx, DWORD PTR _the_airbase$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	je	SHORT $LN5@ZapAirbase
	mov	edx, DWORD PTR _the_airbase$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movsx	ecx, WORD PTR [eax+22]
	cmp	ecx, 1
	jne	SHORT $LN5@ZapAirbase

; 1944 : 	{
; 1945 : 		// Find out how long til we get our runway active
; 1946 : 		tilblock = ((Objective)the_airbase)->GetRepairTime(1)*(60/MIN_PLAN_AIR);

	push	1
	mov	ecx, DWORD PTR _the_airbase$[ebp]
	call	?GetRepairTime@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetRepairTime
	mov	ecx, eax
	movsx	esi, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, 60					; 0000003cH
	cdq
	idiv	esi
	imul	ecx, eax
	mov	DWORD PTR _tilblock$[ebp], ecx

; 1947 : 		if (tilblock > 0)

	cmp	DWORD PTR _tilblock$[ebp], 0
	jle	SHORT $LN4@ZapAirbase

; 1948 : 			ZapSchedule(0,airbase,tilblock);

	mov	edx, DWORD PTR _tilblock$[ebp]
	push	edx
	mov	eax, DWORD PTR _airbase$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z ; AirTaskingManagerClass::ZapSchedule
$LN4@ZapAirbase:

; 1949 : 	}
; 1950 : 	else

	jmp	SHORT $LN9@ZapAirbase
$LN5@ZapAirbase:

; 1951 : 	{
; 1952 : 		// Find out how long til we get one runway active
; 1953 : 		tilblock = ((Objective)the_airbase)->GetRepairTime(1)*(60/MIN_PLAN_AIR);

	push	1
	mov	ecx, DWORD PTR _the_airbase$[ebp]
	call	?GetRepairTime@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetRepairTime
	mov	ecx, eax
	movsx	esi, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, 60					; 0000003cH
	cdq
	idiv	esi
	imul	ecx, eax
	mov	DWORD PTR _tilblock$[ebp], ecx

; 1954 : 		if (tilblock > 0)

	cmp	DWORD PTR _tilblock$[ebp], 0
	jle	SHORT $LN2@ZapAirbase

; 1955 : 			ZapSchedule(0,airbase,tilblock);

	mov	edx, DWORD PTR _tilblock$[ebp]
	push	edx
	mov	eax, DWORD PTR _airbase$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z ; AirTaskingManagerClass::ZapSchedule
$LN2@ZapAirbase:

; 1956 : 		// Find out how long til we get our second runway active
; 1957 : 		tilblock = ((Objective)the_airbase)->GetRepairTime(51)*(60/MIN_PLAN_AIR);

	push	51					; 00000033H
	mov	ecx, DWORD PTR _the_airbase$[ebp]
	call	?GetRepairTime@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetRepairTime
	mov	ecx, eax
	movsx	esi, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, 60					; 0000003cH
	cdq
	idiv	esi
	imul	ecx, eax
	mov	DWORD PTR _tilblock$[ebp], ecx

; 1958 : 		if (tilblock > 0)

	cmp	DWORD PTR _tilblock$[ebp], 0
	jle	SHORT $LN9@ZapAirbase

; 1959 : 			ZapSchedule(1,airbase,tilblock);

	mov	edx, DWORD PTR _tilblock$[ebp]
	push	edx
	mov	eax, DWORD PTR _airbase$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZapSchedule@AirTaskingManagerClass@@QAEXHPAVATMAirbaseClass@@H@Z ; AirTaskingManagerClass::ZapSchedule
$LN9@ZapAirbase:

; 1960 : 	}
; 1961 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?ZapAirbase@AirTaskingManagerClass@@QAEXVVU_ID@@@Z ENDP	; AirTaskingManagerClass::ZapAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 8
$T2 = -40						; size = 8
_this$ = -32						; size = 4
_sortie_rate$ = -28					; size = 4
_abe$ = -24						; size = 4
_lw$ = -20						; size = 4
_slot$ = -16						; size = 4
_airbase$ = -12						; size = 4
_mins$ = -8						; size = 4
_block$ = -4						; size = 4
_abid$ = 8						; size = 8
_w$ = 16						; size = 4
_aircraft$ = 20						; size = 4
?ScheduleAircraft@AirTaskingManagerClass@@QAEXVVU_ID@@PAVWayPointClass@@H@Z PROC ; AirTaskingManagerClass::ScheduleAircraft
; _this$ = ecx

; 1846 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 1847 : 	int				block,slot,mins,sortie_rate = 2;

	mov	DWORD PTR _sortie_rate$[ebp], 2

; 1848 : 	ATMAirbaseClass	*airbase;
; 1849 : 	CampEntity		abe;
; 1850 : 	WayPoint		lw;
; 1851 : 
; 1852 : 	airbase = FindATMAirbase(abid);

	mov	eax, DWORD PTR _abid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _abid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z ; AirTaskingManagerClass::FindATMAirbase
	mov	DWORD PTR _airbase$[ebp], eax

; 1853 : 	if (!airbase)

	cmp	DWORD PTR _airbase$[ebp], 0
	jne	SHORT $LN18@ScheduleAi

; 1854 : 		return;

	jmp	$LN19@ScheduleAi
$LN18@ScheduleAi:

; 1855 : 
; 1856 : 	// Find minutes to takeoff
; 1857 : 	mins = (int)((w->GetWPArrivalTime() - scheduleTime)/CampaignMinutes);

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	edx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [edx+204]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _mins$[ebp], eax

; 1858 : 
; 1859 : 	// Find block and slot
; 1860 : 	block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1861 : 	slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx

; 1862 : 	if (block >= ATM_MAX_CYCLES || mins <= 0)

	cmp	DWORD PTR _block$[ebp], 32		; 00000020H
	jge	SHORT $LN16@ScheduleAi
	cmp	DWORD PTR _mins$[ebp], 0
	jg	SHORT $LN17@ScheduleAi
$LN16@ScheduleAi:

; 1863 : 		return;

	jmp	$LN19@ScheduleAi
$LN17@ScheduleAi:

; 1864 : 
; 1865 : 	// Now fill the takeoff slot
; 1866 : 	airbase->schedule[block] |= (0x01 << slot);

	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _airbase$[ebp]
	add	eax, DWORD PTR _block$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	or	ecx, edx
	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	mov	BYTE PTR [edx+8], cl

; 1867 : 	// Fill the same slot in the next block - to allow for fudge time
; 1868 : 	if (block+1 < ATM_MAX_CYCLES)

	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 1
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN15@ScheduleAi

; 1869 : 		airbase->schedule[block+1] |= (0x01 << slot);

	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _airbase$[ebp]
	add	eax, DWORD PTR _block$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	or	ecx, edx
	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	mov	BYTE PTR [edx+9], cl
$LN15@ScheduleAi:

; 1870 : 
; 1871 : 	// If we're a large flight, fill the next slot
; 1872 : 	if (aircraft > 2)

	cmp	DWORD PTR _aircraft$[ebp], 2
	jle	SHORT $LN14@ScheduleAi

; 1873 : 	{
; 1874 : 		mins++;

	mov	eax, DWORD PTR _mins$[ebp]
	add	eax, 1
	mov	DWORD PTR _mins$[ebp], eax

; 1875 : 		block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1876 : 		slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx

; 1877 : 		if (block < ATM_MAX_CYCLES)

	cmp	DWORD PTR _block$[ebp], 32		; 00000020H
	jge	SHORT $LN14@ScheduleAi

; 1878 : 		{
; 1879 : 			airbase->schedule[block] |= (0x01 << slot);

	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _airbase$[ebp]
	add	eax, DWORD PTR _block$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	or	ecx, edx
	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	mov	BYTE PTR [edx+8], cl

; 1880 : 			// Fill the same slot in the next block - to allow for fudge time
; 1881 : 			if (block+1 < ATM_MAX_CYCLES)

	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 1
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN14@ScheduleAi

; 1882 : 				airbase->schedule[block+1] |= (0x01 << slot);

	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _airbase$[ebp]
	add	eax, DWORD PTR _block$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	or	ecx, edx
	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	mov	BYTE PTR [edx+9], cl
$LN14@ScheduleAi:

; 1883 : 		}
; 1884 : 	}
; 1885 : 
; 1886 : 	// If this is a one runway airbase, find the landing waypoint and 
; 1887 : 	// fill in the landing time - otherwise, assume landing aircraft will
; 1888 : 	// use the other runway.
; 1889 : 	abe = (CampEntity) vuDatabase->Find(airbase->id);

	mov	eax, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _abe$[ebp], eax

; 1890 : 	if (abe->IsObjective())

	mov	eax, DWORD PTR _abe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _abe$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN11@ScheduleAi

; 1891 : 	{
; 1892 : 		sortie_rate = ((Objective)abe)->GetAdjustedDataRate();

	mov	ecx, DWORD PTR _abe$[ebp]
	call	?GetAdjustedDataRate@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetAdjustedDataRate
	movsx	ecx, ax
	mov	DWORD PTR _sortie_rate$[ebp], ecx
	jmp	SHORT $LN10@ScheduleAi
$LN11@ScheduleAi:

; 1893 : 		ShiAssert (sortie_rate <= 2);
; 1894 : 	}
; 1895 : 	else if (abe->IsUnit())

	mov	edx, DWORD PTR _abe$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _abe$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	SHORT $LN10@ScheduleAi

; 1896 : 		sortie_rate = 1;

	mov	DWORD PTR _sortie_rate$[ebp], 1
$LN10@ScheduleAi:

; 1897 : 	if (sortie_rate < 2)

	cmp	DWORD PTR _sortie_rate$[ebp], 2
	jge	$LN19@ScheduleAi

; 1898 : 	{
; 1899 : 		lw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _lw$[ebp], eax
$LN7@ScheduleAi:

; 1900 : 		while (lw && (lw->GetWPAction() != WP_LAND || lw->GetWPTargetID() != w->GetWPTargetID()))

	cmp	DWORD PTR _lw$[ebp], 0
	je	SHORT $LN6@ScheduleAi
	mov	ecx, DWORD PTR _lw$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	jne	SHORT $LN5@ScheduleAi
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lw$[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@ScheduleAi
$LN5@ScheduleAi:

; 1901 : 			lw = lw->GetNextWP();

	mov	ecx, DWORD PTR _lw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _lw$[ebp], eax
	jmp	SHORT $LN7@ScheduleAi
$LN6@ScheduleAi:

; 1902 : 		if (lw)

	cmp	DWORD PTR _lw$[ebp], 0
	je	$LN19@ScheduleAi

; 1903 : 		{
; 1904 : 			mins = (int)((w->GetWPArrivalTime() - scheduleTime)/CampaignMinutes);

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+204]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _mins$[ebp], eax

; 1905 : 			block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1906 : 			slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx
$LN3@ScheduleAi:

; 1907 : 			// Fill one slot for each landing aircraft - keep 
; 1908 : 			// looking until we find enough slots
; 1909 : 			while (aircraft && block < ATM_MAX_CYCLES)

	cmp	DWORD PTR _aircraft$[ebp], 0
	je	SHORT $LN19@ScheduleAi
	cmp	DWORD PTR _block$[ebp], 32		; 00000020H
	jge	SHORT $LN19@ScheduleAi

; 1910 : 			{
; 1911 : 				if (!(airbase->schedule[block] & (0x01 << slot)))

	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	and	eax, edx
	jne	SHORT $LN1@ScheduleAi

; 1912 : 				{
; 1913 : 					airbase->schedule[block] |= (0x01 << slot);

	mov	eax, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _airbase$[ebp]
	add	ecx, DWORD PTR _block$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	or	edx, eax
	mov	eax, DWORD PTR _airbase$[ebp]
	add	eax, DWORD PTR _block$[ebp]
	mov	BYTE PTR [eax+8], dl

; 1914 : 					aircraft--;

	mov	ecx, DWORD PTR _aircraft$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _aircraft$[ebp], ecx
$LN1@ScheduleAi:

; 1915 : 				}
; 1916 : 				mins++;

	mov	edx, DWORD PTR _mins$[ebp]
	add	edx, 1
	mov	DWORD PTR _mins$[ebp], edx

; 1917 : 				block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1918 : 				slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx

; 1919 : 			}

	jmp	SHORT $LN3@ScheduleAi
$LN19@ScheduleAi:

; 1920 : 		}
; 1921 : 	}
; 1922 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ScheduleAircraft@AirTaskingManagerClass@@QAEXVVU_ID@@PAVWayPointClass@@H@Z ENDP ; AirTaskingManagerClass::ScheduleAircraft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_count$ = -28						; size = 4
_requestedtakeoff$ = -24				; size = 4
_airbase$ = -20						; size = 4
_this$ = -16						; size = 4
_slot$ = -12						; size = 4
_block$ = -8						; size = 4
_mins$ = -4						; size = 4
_abid$ = 8						; size = 8
_w$ = 16						; size = 4
?FindTakeoffSlot@AirTaskingManagerClass@@QAEHVVU_ID@@PAVWayPointClass@@@Z PROC ; AirTaskingManagerClass::FindTakeoffSlot
; _this$ = ecx

; 1783 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1784 : 	int				block,slot,mins,count=0;

	mov	DWORD PTR _count$[ebp], 0

; 1785 : 	CampaignTime	requestedtakeoff;
; 1786 : 	ATMAirbaseClass	*airbase;
; 1787 : 
; 1788 : 	airbase = FindATMAirbase(abid);

	mov	eax, DWORD PTR _abid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _abid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z ; AirTaskingManagerClass::FindATMAirbase
	mov	DWORD PTR _airbase$[ebp], eax

; 1789 : 	if (!airbase)

	cmp	DWORD PTR _airbase$[ebp], 0
	jne	SHORT $LN9@FindTakeof

; 1790 : 		return 0xFFFFFFFF;

	or	eax, -1
	jmp	$LN10@FindTakeof
$LN9@FindTakeof:

; 1791 : 
; 1792 : 	// Find minutes to takeoff
; 1793 : 	requestedtakeoff = w->GetWPArrivalTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	DWORD PTR _requestedtakeoff$[ebp], eax

; 1794 : 	mins = (int)((requestedtakeoff - scheduleTime)/CampaignMinutes);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _requestedtakeoff$[ebp]
	sub	eax, DWORD PTR [edx+204]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _mins$[ebp], eax

; 1795 : 	// Find block and slot
; 1796 : 	block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1797 : 	slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx

; 1798 : 	if (block >= ATM_MAX_CYCLES || mins <= 0)

	cmp	DWORD PTR _block$[ebp], 32		; 00000020H
	jge	SHORT $LN7@FindTakeof
	cmp	DWORD PTR _mins$[ebp], 0
	jg	SHORT $LN8@FindTakeof
$LN7@FindTakeof:

; 1799 : 		return 0xFFFFFFFF;

	or	eax, -1
	jmp	$LN10@FindTakeof
$LN8@FindTakeof:

; 1800 : 
; 1801 : 	// Try to take off at this exact slot, on main runway
; 1802 : 	if (!(airbase->schedule[block] & (0x01 << slot)))

	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	and	eax, edx
	jne	SHORT $LN6@FindTakeof

; 1803 : 	{
; 1804 : 		// Runway is free, snap time to the minute and recalc speed
; 1805 : 		RecalculateWaypoint(w, scheduleTime + mins*CampaignMinutes);

	mov	eax, DWORD PTR _mins$[ebp]
	imul	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+204]
	push	eax
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z ; RecalculateWaypoint
	add	esp, 8

; 1806 : 		return -1 * (requestedtakeoff - w->GetWPArrivalTime());								

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	ecx, DWORD PTR _requestedtakeoff$[ebp]
	sub	ecx, eax
	imul	ecx, -1
	mov	eax, ecx
	jmp	$LN10@FindTakeof
$LN6@FindTakeof:

; 1807 : 	}
; 1808 : 	// Otherwise, try the next two slots (one and two minutes later)
; 1809 : 	mins++;

	mov	edx, DWORD PTR _mins$[ebp]
	add	edx, 1
	mov	DWORD PTR _mins$[ebp], edx

; 1810 : 	block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1811 : 	slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx

; 1812 : 	if (block < ATM_MAX_CYCLES && !(airbase->schedule[block] & (0x01 << slot)))

	cmp	DWORD PTR _block$[ebp], 32		; 00000020H
	jge	SHORT $LN5@FindTakeof
	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	and	eax, edx
	jne	SHORT $LN5@FindTakeof

; 1813 : 	{
; 1814 : 		// Runway is free, snap time to the minute and recalc speed
; 1815 : 		RecalculateWaypoint(w, scheduleTime + mins*CampaignMinutes);

	mov	eax, DWORD PTR _mins$[ebp]
	imul	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+204]
	push	eax
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z ; RecalculateWaypoint
	add	esp, 8

; 1816 : 		return w->GetWPArrivalTime() - requestedtakeoff;

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	sub	eax, DWORD PTR _requestedtakeoff$[ebp]
	jmp	$LN10@FindTakeof
$LN5@FindTakeof:

; 1817 : 	}
; 1818 : 	mins++;

	mov	eax, DWORD PTR _mins$[ebp]
	add	eax, 1
	mov	DWORD PTR _mins$[ebp], eax

; 1819 : 	block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1820 : 	slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx

; 1821 : 	if (block < ATM_MAX_CYCLES && !(airbase->schedule[block] & (0x01 << slot)))

	cmp	DWORD PTR _block$[ebp], 32		; 00000020H
	jge	SHORT $LN4@FindTakeof
	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	and	eax, edx
	jne	SHORT $LN4@FindTakeof

; 1822 : 	{
; 1823 : 		// Runway is free, snap time to the minute and recalc speed
; 1824 : 		RecalculateWaypoint(w, scheduleTime + mins*CampaignMinutes);

	mov	eax, DWORD PTR _mins$[ebp]
	imul	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+204]
	push	eax
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z ; RecalculateWaypoint
	add	esp, 8

; 1825 : 		return w->GetWPArrivalTime() - requestedtakeoff;

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	sub	eax, DWORD PTR _requestedtakeoff$[ebp]
	jmp	$LN10@FindTakeof
$LN4@FindTakeof:

; 1826 : 	}
; 1827 : 	// Otherwise, find the next earliest slot and add a timing leg (if necessary)
; 1828 : 	mins -= 3;

	mov	eax, DWORD PTR _mins$[ebp]
	sub	eax, 3
	mov	DWORD PTR _mins$[ebp], eax
$LN3@FindTakeof:

; 1829 : 	while (mins > 0 && count < 10)

	cmp	DWORD PTR _mins$[ebp], 0
	jle	$LN2@FindTakeof
	cmp	DWORD PTR _count$[ebp], 10		; 0000000aH
	jge	$LN2@FindTakeof

; 1830 : 	{
; 1831 : 		block = mins/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _block$[ebp], eax

; 1832 : 		slot = mins%MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, DWORD PTR _mins$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _slot$[ebp], edx

; 1833 : 		if (!(airbase->schedule[block] & (0x01 << slot)))

	mov	edx, DWORD PTR _airbase$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	and	eax, edx
	jne	SHORT $LN1@FindTakeof

; 1834 : 		{
; 1835 : 			// Runway is free, snap time to the minute and recalc speed
; 1836 : 			RecalculateWaypoint(w, scheduleTime + mins*CampaignMinutes);

	mov	eax, DWORD PTR _mins$[ebp]
	imul	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+204]
	push	eax
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	?RecalculateWaypoint@@YAXPAVWayPointClass@@K@Z ; RecalculateWaypoint
	add	esp, 8

; 1837 : 			return -1 * (requestedtakeoff - w->GetWPArrivalTime());								

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	ecx, DWORD PTR _requestedtakeoff$[ebp]
	sub	ecx, eax
	imul	ecx, -1
	mov	eax, ecx
	jmp	SHORT $LN10@FindTakeof
$LN1@FindTakeof:

; 1838 : 		}
; 1839 : 		count++;

	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 1840 : 		mins--;

	mov	eax, DWORD PTR _mins$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mins$[ebp], eax

; 1841 : 	}

	jmp	$LN3@FindTakeof
$LN2@FindTakeof:

; 1842 : 	return 0xFFFFFFFF;

	or	eax, -1
$LN10@FindTakeof:

; 1843 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindTakeoffSlot@AirTaskingManagerClass@@QAEHVVU_ID@@PAVWayPointClass@@@Z ENDP ; AirTaskingManagerClass::FindTakeoffSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 4
_target$ = -32						; size = 4
tv95 = -28						; size = 4
$T5 = -24						; size = 4
_this$ = -20						; size = 4
_message$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_from$ = 8						; size = 8
_to$ = 16						; size = 1
_msg$ = 20						; size = 2
_d1$ = 24						; size = 2
_d2$ = 28						; size = 2
_d3$ = 32						; size = 4
___formal$ = 36						; size = 4
?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z PROC ; AirTaskingManagerClass::SendATMMessage
; _this$ = ecx

; 1765 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1766 : 	FalconAirTaskingMessage		*message;
; 1767 : 	VuTargetEntity				*target = (VuTargetEntity*) vuDatabase->Find(OwnerId());

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$[ebp], eax

; 1768 : 
; 1769 : 	message = new FalconAirTaskingMessage(Id(), target);

	push	77					; 0000004dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN3@SendATMMes
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconAirTaskingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconAirTaskingMessage::FalconAirTaskingMessage
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN4@SendATMMes
$LN3@SendATMMes:
	mov	DWORD PTR tv95[ebp], 0
$LN4@SendATMMes:
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _message$[ebp], edx

; 1770 : 	message->dataBlock.from = from;

	mov	eax, DWORD PTR _message$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _from$[ebp+4]
	mov	DWORD PTR [eax+52], edx

; 1771 : 	message->dataBlock.team = to;

	mov	eax, DWORD PTR _message$[ebp]
	mov	cl, BYTE PTR _to$[ebp]
	mov	BYTE PTR [eax+64], cl

; 1772 : 	message->dataBlock.messageType = msg;

	movsx	edx, WORD PTR _msg$[ebp]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+65], edx

; 1773 : 	message->dataBlock.data1 = d1;

	mov	ecx, DWORD PTR _message$[ebp]
	mov	dx, WORD PTR _d1$[ebp]
	mov	WORD PTR [ecx+69], dx

; 1774 : 	message->dataBlock.data2 = d2;

	mov	eax, DWORD PTR _message$[ebp]
	mov	cx, WORD PTR _d2$[ebp]
	mov	WORD PTR [eax+71], cx

; 1775 : 	message->dataBlock.data3 = d3;

	mov	edx, DWORD PTR _message$[ebp]
	mov	eax, DWORD PTR _d3$[ebp]
	mov	DWORD PTR [edx+73], eax

; 1776 : 	FalconSendMessage(message,TRUE);

	push	1
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1777 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z ENDP ; AirTaskingManagerClass::SendATMMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -148						; size = 8
_myit$ = -140						; size = 12
$T3 = -128						; size = 4
_this$ = -124						; size = 4
$T4 = -120						; size = 4
_t$ = -116						; size = 4
_best$ = -112						; size = 4
tv476 = -108						; size = 4
tv489 = -104						; size = 4
_uc$ = -100						; size = 4
_nu$ = -96						; size = 4
_Y$ = -92						; size = 2
_speed$ = -88						; size = 4
_spot$5 = -84						; size = 4
_role$ = -80						; size = 4
_combat$6 = -76						; size = 4
_newreact$7 = -72					; size = 4
_tstr$8 = -68						; size = 4
_oldreact$9 = -64					; size = 4
_X$ = -60						; size = 2
_d$ = -56						; size = 4
_d$10 = -52						; size = 4
_bf$ = -48						; size = 4
_stats$ = -44						; size = 2
_caps$ = -40						; size = 2
_aa$ = -36						; size = 4
_newtarget$11 = -32					; size = 4
_oldtarget$12 = -28					; size = 4
_service$ = -24						; size = 2
_score$ = -20						; size = 4
_cf$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_mis$ = 8						; size = 4
?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z PROC ; AirTaskingManagerClass::FindBestAirFlight
; _this$ = ecx

; 1567 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1568 : 	Flight				bf=NULL;

	mov	DWORD PTR _bf$[ebp], 0

; 1569 : 	Unit				nu,cf;
; 1570 : 	int					score,best=-999,role,aa;

	mov	DWORD PTR _best$[ebp], -999		; fffffc19H

; 1571 : 	float				d,speed;
; 1572 : 	short				stats,caps,service;
; 1573 : 	GridIndex			X,Y;
; 1574 : 	CampaignTime		t;
; 1575 : 	UnitClassDataType*	uc;
; 1576 : 	if (!squadrons)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN50@FindBestAi

; 1577 : 		return NULL;

	xor	eax, eax
	jmp	$LN51@FindBestAi
$LN50@FindBestAi:

; 1578 : 
; 1579 : 	role = MissionData[mis->mission].skill;

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+2]
	mov	DWORD PTR _role$[ebp], ecx

; 1580 : 	caps = mis->caps & VEH_CAPIBILITY_MASK;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+48]
	and	eax, 240				; 000000f0H
	mov	WORD PTR _caps$[ebp], ax

; 1581 : 	service = mis->caps & VEH_SERVICE_MASK;

	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+48]
	and	edx, 15					; 0000000fH
	mov	WORD PTR _service$[ebp], dx

; 1582 : 	VuListIterator		myit(AllAirList);

	mov	eax, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1583 : 	nu = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _nu$[ebp], eax
$LN71@FindBestAi:

; 1584 : 	while (nu)

	cmp	DWORD PTR _nu$[ebp], 0
	je	$LN48@FindBestAi

; 1585 : 	{
; 1586 : 		cf = nu;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	DWORD PTR _cf$[ebp], ecx

; 1587 : 		nu = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nu$[ebp], eax

; 1588 : 		if (cf->GetType() != TYPE_FLIGHT || !cf->Final() || cf->IsDead())

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	jne	SHORT $LN46@FindBestAi
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?Final@UnitClass@@QBEHXZ		; UnitClass::Final
	test	eax, eax
	je	SHORT $LN46@FindBestAi
	mov	eax, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	je	SHORT $LN47@FindBestAi
$LN46@FindBestAi:

; 1589 : 			continue;

	jmp	SHORT $LN71@FindBestAi
$LN47@FindBestAi:

; 1590 : 
; 1591 : #ifdef REQHELP_DEBUG
; 1592 : 		if (!(mis->flags & AMIS_HELP_REQUEST))
; 1593 : 			continue;
; 1594 : #endif
; 1595 : 
; 1596 : 		// Check for valid role
; 1597 : 		if (MissionData[cf->GetUnitMission()].skill != role)

	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	shl	eax, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+2]
	cmp	ecx, DWORD PTR _role$[ebp]
	je	SHORT $LN45@FindBestAi

; 1598 : 			continue;

	jmp	SHORT $LN71@FindBestAi
$LN45@FindBestAi:

; 1599 : 
; 1600 : 		// Check for team
; 1601 : 		if (cf->GetTeam() != mis->who)

	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	cmp	eax, edx
	je	SHORT $LN44@FindBestAi

; 1602 : 			continue;

	jmp	$LN71@FindBestAi
$LN44@FindBestAi:

; 1603 : 
; 1604 : 		// Check if it's busy (Flights should reduce their priority to 0 when they're done with their current task)
; 1605 : 		if (mis->flags & AMIS_HELP_REQUEST)

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1073741824				; 40000000H
	je	SHORT $LN43@FindBestAi

; 1606 : 		{
; 1607 : 			if (cf->GetUnitPriority() > mis->priority + 50)

	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+676]
	call	edx
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+56]
	add	edx, 50					; 00000032H
	cmp	eax, edx
	jle	SHORT $LN42@FindBestAi

; 1608 : 				continue;

	jmp	$LN71@FindBestAi
$LN42@FindBestAi:

; 1609 : 		}
; 1610 : 		else

	jmp	SHORT $LN40@FindBestAi
$LN43@FindBestAi:

; 1611 : 		{
; 1612 : 			if (cf->GetUnitPriority() * 2 > mis->priority)

	mov	eax, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+676]
	call	eax
	shl	eax, 1
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+56]
	cmp	eax, edx
	jle	SHORT $LN40@FindBestAi

; 1613 : 				continue;

	jmp	$LN71@FindBestAi
$LN40@FindBestAi:

; 1614 : 		}
; 1615 : 
; 1616 : 		// Verify it's not aborting or diverted (if diverted, reevaluate if help request)
; 1617 : 		if (cf->Aborted() || cf->Diverted() && !(mis->flags & AMIS_HELP_REQUEST))

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	jne	SHORT $LN38@FindBestAi
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?Diverted@UnitClass@@QAEHXZ		; UnitClass::Diverted
	test	eax, eax
	je	SHORT $LN39@FindBestAi
	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1073741824				; 40000000H
	jne	SHORT $LN39@FindBestAi
$LN38@FindBestAi:

; 1618 : 			continue;

	jmp	$LN71@FindBestAi
$LN39@FindBestAi:

; 1619 : 
; 1620 : 		// Check to make sure it's taken off (unless it's an alert mission)
; 1621 : 		if (cf->GetUnitMission() != AMIS_ALERT && (!cf->GetCurrentUnitWP() || cf->GetCurrentUnitWP()->GetWPAction() == WP_TAKEOFF))

	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+664]
	call	edx
	cmp	eax, 8
	je	SHORT $LN37@FindBestAi
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	test	eax, eax
	je	SHORT $LN36@FindBestAi
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	ecx, eax
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	SHORT $LN37@FindBestAi
$LN36@FindBestAi:

; 1622 : 			continue;

	jmp	$LN71@FindBestAi
$LN37@FindBestAi:

; 1623 : 
; 1624 : 		// Check for required plane capibilities
; 1625 : 		uc = cf->GetUnitClassData();

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$[ebp], eax

; 1626 : 		stats = uc->Flags;

	mov	eax, DWORD PTR _uc$[ebp]
	mov	cx, WORD PTR [eax+228]
	mov	WORD PTR _stats$[ebp], cx

; 1627 : 		score = (uc->Scores[role]+4)/5;

	mov	edx, DWORD PTR _uc$[ebp]
	add	edx, DWORD PTR _role$[ebp]
	movzx	eax, BYTE PTR [edx+268]
	add	eax, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _score$[ebp], eax

; 1628 : 		if (score <= 0 || (caps & stats) != caps || (service && !(service & stats)))

	cmp	DWORD PTR _score$[ebp], 0
	jle	SHORT $LN34@FindBestAi
	movsx	edx, WORD PTR _caps$[ebp]
	movsx	eax, WORD PTR _stats$[ebp]
	and	edx, eax
	movsx	ecx, WORD PTR _caps$[ebp]
	cmp	edx, ecx
	jne	SHORT $LN34@FindBestAi
	movsx	edx, WORD PTR _service$[ebp]
	test	edx, edx
	je	SHORT $LN35@FindBestAi
	movsx	eax, WORD PTR _service$[ebp]
	movsx	ecx, WORD PTR _stats$[ebp]
	and	eax, ecx
	jne	SHORT $LN35@FindBestAi
$LN34@FindBestAi:

; 1629 : 			continue;

	jmp	$LN71@FindBestAi
$LN35@FindBestAi:

; 1630 : 
; 1631 : 		// Check for aircraft and priority
; 1632 : 		// 2001-10-27 MODIFIED BY S.G. Doesn't matter how many vehicle if it's a help request. Hopefully, the one requesting help will assist us
; 1633 : 		// 2001-12-18 M.N. give a help request mission priority some more points..
; 1634 : 		//		if (cf->GetTotalVehicles() < mis->aircraft || cf->GetUnitPriority() >= mis->priority)
; 1635 : 		if ((!(mis->flags & AMIS_HELP_REQUEST) && cf->GetTotalVehicles() < mis->aircraft) || (!(mis->flags & AMIS_HELP_REQUEST) && cf->GetUnitPriority() >= mis->priority) || (mis->flags & AMIS_HELP_REQUEST) && cf->GetUnitPriority() >= mis->priority + 20)

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+44]
	and	eax, 1073741824				; 40000000H
	jne	SHORT $LN31@FindBestAi
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	cmp	eax, edx
	jl	SHORT $LN32@FindBestAi
$LN31@FindBestAi:
	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1073741824				; 40000000H
	jne	SHORT $LN30@FindBestAi
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+676]
	call	edx
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+56]
	cmp	eax, edx
	jge	SHORT $LN32@FindBestAi
$LN30@FindBestAi:
	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1073741824				; 40000000H
	je	SHORT $LN33@FindBestAi
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+676]
	call	edx
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+56]
	add	edx, 20					; 00000014H
	cmp	eax, edx
	jl	SHORT $LN33@FindBestAi
$LN32@FindBestAi:

; 1636 : 			continue;

	jmp	$LN71@FindBestAi
$LN33@FindBestAi:

; 1637 : 
; 1638 : 		// Check speed vs required
; 1639 : 		speed = (float)cf->GetCombatSpeed();

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetCombatSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCombatSpeed
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _speed$[ebp], xmm0

; 1640 : 		if (mis->speed && (mis->flags & AMIS_MATCHSPEED || MissionData[mis->mission].flags & AMIS_MATCHSPEED))

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+52]
	test	ecx, ecx
	je	SHORT $LN29@FindBestAi
	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+44]
	and	eax, 131072				; 00020000H
	jne	SHORT $LN28@FindBestAi
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 131072				; 00020000H
	je	SHORT $LN29@FindBestAi
$LN28@FindBestAi:

; 1641 : 		{
; 1642 : 			if (cf->GetMaxSpeed() < mis->speed || speed > mis->speed * 1.2F)

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetMaxSpeed@UnitClass@@QBEHXZ		; UnitClass::GetMaxSpeed
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+52]
	cmp	eax, edx
	jl	SHORT $LN26@FindBestAi
	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+52]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR _speed$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@FindBestAi
$LN26@FindBestAi:

; 1643 : 				continue;

	jmp	$LN71@FindBestAi
$LN27@FindBestAi:

; 1644 : 			speed = (float)mis->speed;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+52]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _speed$[ebp], xmm0
$LN29@FindBestAi:

; 1645 : 		}
; 1646 : 
; 1647 : 		// M.N. commented out - since when is a heading interesting for finding a best air flight ? can't they turn around ?
; 1648 : 		// Check vs heading
; 1649 : 		cf->GetLocation(&X,&Y);

	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1650 : 		//		if (cf->Moving() && mis->min_to >= 0)
; 1651 : 		//			{
; 1652 : 		//			int	hd = abs(mis->min_to - DirectionTo(X,Y,mis->tx,mis->ty));
; 1653 : 		//			if (hd < 3 || hd > 5)
; 1654 : 		//				continue;
; 1655 : 		//			}
; 1656 : 
; 1657 : 		// Calculate it's score
; 1658 : 		if (cf->IsSetFalcFlag(FEC_HASPLAYERS))					// Give a player unit a bonus for important missions

	push	4
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN25@FindBestAi

; 1659 : 		{
; 1660 : 			// 2001-10-27 ADDED BY S.G. If it's a help request, don't count players' flight. Let the players deal with themself.
; 1661 : 			if (mis->flags & AMIS_HELP_REQUEST)

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1073741824				; 40000000H
	je	SHORT $LN24@FindBestAi

; 1662 : 				continue;

	jmp	$LN71@FindBestAi
$LN24@FindBestAi:

; 1663 : 			// END OF ADDED SECTION 2001-10-27
; 1664 : 			score += mis->priority/50;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+56]
	cdq
	mov	ecx, 50					; 00000032H
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN25@FindBestAi:

; 1665 : 		}		
; 1666 : 		d = Distance(X,Y,mis->tx,mis->ty);

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, WORD PTR [edx+42]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+40]
	push	edx
	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1667 : 		// 2002-04-14 MN when the target is more than this distance away, skip the tested interceptor flight
; 1668 : 		// when player calls for help - ignore distance
; 1669 : 		//Cobra TEST remove first part
; 1670 : 		//if (d > g_nMaxInterceptDistance && !(mis->flags & AMIS_HELP_REQUEST))
; 1671 : 		//continue;
; 1672 : 		if (cf->GetUnitMission() == AMIS_ALERT && d > 250.0f/*MAX_SCRAMBLE_DISTANCE*/)

	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+664]
	call	edx
	cmp	eax, 8
	jne	SHORT $LN23@FindBestAi
	movss	xmm0, DWORD PTR _d$[ebp]
	comiss	xmm0, DWORD PTR __real@437a0000
	jbe	SHORT $LN23@FindBestAi

; 1673 : 			continue;

	jmp	$LN71@FindBestAi
$LN23@FindBestAi:

; 1674 : 
; 1675 : 		if (d < cf->GetUnitRange()/4)							// Bonus if within 1/4 range

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetUnitRange@UnitClass@@QAEHXZ		; UnitClass::GetUnitRange
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN22@FindBestAi

; 1676 : 			score ++;

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, 1
	mov	DWORD PTR _score$[ebp], eax
$LN22@FindBestAi:

; 1677 : 		if (cf->GetUnitMission() == mis->mission)

	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	eax, edx
	jne	SHORT $LN21@FindBestAi

; 1678 : 			score += 2;											// Bonus for same mission

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, 2
	mov	DWORD PTR _score$[ebp], eax
$LN21@FindBestAi:

; 1679 : 
; 1680 : 
; 1681 : 
; 1682 : 		// KCK: Experimental - this is to keep from tasking flights which will simply ignore
; 1683 : 		// their orders because they have better things to do.
; 1684 : 		if (cf->Engaged() && cf->GetTargetID() != FalconNullId)

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	$LN11@FindBestAi
	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	$LN11@FindBestAi

; 1685 : 		{
; 1686 : 			FalconEntity	*oldtarget = cf->GetTarget();

	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _oldtarget$12[ebp], eax

; 1687 : 			FalconEntity	*newtarget = (FalconEntity*) vuDatabase->Find(mis->targetID);

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _newtarget$11[ebp], eax

; 1688 : 			int				oldreact=0,newreact=0,combat,spot,tstr;

	mov	DWORD PTR _oldreact$9[ebp], 0
	mov	DWORD PTR _newreact$7[ebp], 0

; 1689 : 			float			d;
; 1690 : 
; 1691 : 			if(oldtarget)

	cmp	DWORD PTR _oldtarget$12[ebp], 0
	je	SHORT $LN16@FindBestAi

; 1692 : 			{
; 1693 : 				if (oldtarget->IsAirplane())

	mov	eax, DWORD PTR _oldtarget$12[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _oldtarget$12[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN18@FindBestAi

; 1694 : 					oldreact = ((Flight)cf)->DetectVs((AircraftClass*)oldtarget, &d, &combat, &spot, &tstr);

	lea	ecx, DWORD PTR _tstr$8[ebp]
	push	ecx
	lea	edx, DWORD PTR _spot$5[ebp]
	push	edx
	lea	eax, DWORD PTR _combat$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _d$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldtarget$12[ebp]
	push	edx
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _oldreact$9[ebp], eax
	jmp	SHORT $LN16@FindBestAi
$LN18@FindBestAi:

; 1695 : 				else if (oldtarget->IsCampaign())

	mov	ecx, DWORD PTR _oldtarget$12[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN16@FindBestAi

; 1696 : 					oldreact = ((Flight)cf)->DetectVs((CampEntity)oldtarget, &d, &combat, &spot, &tstr);

	lea	eax, DWORD PTR _tstr$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _spot$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _combat$6[ebp]
	push	edx
	lea	eax, DWORD PTR _d$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldtarget$12[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _oldreact$9[ebp], eax
$LN16@FindBestAi:

; 1697 : 			}
; 1698 : 
; 1699 : 			if(newtarget)

	cmp	DWORD PTR _newtarget$11[ebp], 0
	je	SHORT $LN12@FindBestAi

; 1700 : 			{
; 1701 : 				if (newtarget->IsAirplane())

	mov	edx, DWORD PTR _newtarget$11[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _newtarget$11[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN14@FindBestAi

; 1702 : 					newreact = ((Flight)cf)->DetectVs((AircraftClass*)newtarget, &d, &combat, &spot, &tstr);

	lea	eax, DWORD PTR _tstr$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _spot$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _combat$6[ebp]
	push	edx
	lea	eax, DWORD PTR _d$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _newtarget$11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _newreact$7[ebp], eax
	jmp	SHORT $LN12@FindBestAi
$LN14@FindBestAi:

; 1703 : 				else if (newtarget->IsCampaign())

	mov	ecx, DWORD PTR _newtarget$11[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN12@FindBestAi

; 1704 : 					newreact = ((Flight)cf)->DetectVs((CampEntity)newtarget, &d, &combat, &spot, &tstr);

	lea	edx, DWORD PTR _tstr$8[ebp]
	push	edx
	lea	eax, DWORD PTR _spot$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _combat$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _d$10[ebp]
	push	edx
	mov	eax, DWORD PTR _newtarget$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _newreact$7[ebp], eax
$LN12@FindBestAi:

; 1705 : 			}
; 1706 : 
; 1707 : 			if (oldreact + 2 > newreact)

	mov	ecx, DWORD PTR _oldreact$9[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _newreact$7[ebp]
	jle	SHORT $LN11@FindBestAi

; 1708 : 				continue;

	jmp	$LN71@FindBestAi
$LN11@FindBestAi:

; 1709 : 		}
; 1710 : 
; 1711 : 		// Adjust for current priority
; 1712 : 		score -= cf->GetUnitPriority()/30;

	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+676]
	call	edx
	cdq
	mov	ecx, 30					; 0000001eH
	idiv	ecx
	mov	edx, DWORD PTR _score$[ebp]
	sub	edx, eax
	mov	DWORD PTR _score$[ebp], edx

; 1713 : 
; 1714 : 		// 2001-10-27 ADDED BY S.G. Adjust for the number of planes in both flights if it's a request for help
; 1715 : 		if ((mis->flags & AMIS_HELP_REQUEST) && cf->GetTotalVehicles() < mis->aircraft)

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1073741824				; 40000000H
	je	SHORT $LN10@FindBestAi
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [edx+61]
	cmp	eax, ecx
	jge	SHORT $LN10@FindBestAi

; 1716 : 			score -=  mis->aircraft - cf->GetTotalVehicles();

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	esi, BYTE PTR [edx+61]
	mov	ecx, DWORD PTR _cf$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	sub	esi, eax
	mov	eax, DWORD PTR _score$[ebp]
	sub	eax, esi
	mov	DWORD PTR _score$[ebp], eax
$LN10@FindBestAi:

; 1717 : 		// END OF ADDED SECTION 2001-10-27
; 1718 : 
; 1719 : 		// Modify by strength for counter-air missions
; 1720 : 		if (role == ARO_CA)

	cmp	DWORD PTR _role$[ebp], 1
	jne	$LN4@FindBestAi

; 1721 : 		{
; 1722 : 			if (!mis->match_strength)

	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+54]
	test	edx, edx
	jne	SHORT $LN8@FindBestAi

; 1723 : 				mis->match_strength = 1;						// Some strength - for ratioing

	mov	eax, 1
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	WORD PTR [ecx+54], ax
$LN8@FindBestAi:

; 1724 : 			aa = GetUnitScore(cf,Air);

	push	5
	mov	edx, DWORD PTR _cf$[ebp]
	push	edx
	call	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z ; GetUnitScore
	add	esp, 8
	mov	DWORD PTR _aa$[ebp], eax

; 1725 : 			if (aa > mis->match_strength * 2)

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+54]
	shl	ecx, 1
	cmp	DWORD PTR _aa$[ebp], ecx
	jle	SHORT $LN7@FindBestAi

; 1726 : 				score -= max(5,aa/mis->match_strength);			// We're overkill

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [edx+54]
	mov	eax, DWORD PTR _aa$[ebp]
	cdq
	idiv	ecx
	cmp	eax, 5
	jge	SHORT $LN53@FindBestAi
	mov	DWORD PTR tv476[ebp], 5
	jmp	SHORT $LN54@FindBestAi
$LN53@FindBestAi:
	mov	edx, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [edx+54]
	mov	eax, DWORD PTR _aa$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR tv476[ebp], eax
$LN54@FindBestAi:
	mov	edx, DWORD PTR _score$[ebp]
	sub	edx, DWORD PTR tv476[ebp]
	mov	DWORD PTR _score$[ebp], edx
	jmp	SHORT $LN5@FindBestAi
$LN7@FindBestAi:

; 1727 : 			else if (aa * 2 < mis->match_strength)

	mov	eax, DWORD PTR _aa$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+54]
	cmp	eax, edx
	jge	SHORT $LN5@FindBestAi

; 1728 : 				score -= max(5,mis->match_strength/aa);			// We're outmatched

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [eax+54]
	cdq
	idiv	DWORD PTR _aa$[ebp]
	cmp	eax, 5
	jge	SHORT $LN55@FindBestAi
	mov	DWORD PTR tv489[ebp], 5
	jmp	SHORT $LN56@FindBestAi
$LN55@FindBestAi:
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [ecx+54]
	cdq
	idiv	DWORD PTR _aa$[ebp]
	mov	DWORD PTR tv489[ebp], eax
$LN56@FindBestAi:
	mov	edx, DWORD PTR _score$[ebp]
	sub	edx, DWORD PTR tv489[ebp]
	mov	DWORD PTR _score$[ebp], edx
$LN5@FindBestAi:

; 1729 : 			if (cf->GetUnitMission() == AMIS_BARCAP2)

	mov	eax, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 2
	jne	SHORT $LN4@FindBestAi

; 1730 : 				score += 5;										// Bonus for BARCAP2 missions

	mov	ecx, DWORD PTR _score$[ebp]
	add	ecx, 5
	mov	DWORD PTR _score$[ebp], ecx
$LN4@FindBestAi:

; 1731 : 		}
; 1732 : 
; 1733 : 		// Estimate arrival time
; 1734 : 		t = TimeToArrive(d,speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?TimeToArrive@@YAKMM@Z			; TimeToArrive
	add	esp, 8
	mov	DWORD PTR _t$[ebp], eax

; 1735 : 		score -= t / (2*CampaignMinutes);

	mov	eax, DWORD PTR _t$[ebp]
	xor	edx, edx
	mov	ecx, 120000				; 0001d4c0H
	div	ecx
	mov	edx, DWORD PTR _score$[ebp]
	sub	edx, eax
	mov	DWORD PTR _score$[ebp], edx

; 1736 : 		/*
; 1737 : 		   if (t < quickest && score+3 > best-3)					// Bonus for being there soonest
; 1738 : 		   {
; 1739 : 		   score += 3;
; 1740 : 		   best -= 3;
; 1741 : 		   quickest = t;
; 1742 : 		   }
; 1743 : 		 */
; 1744 : 
; 1745 : 		if (score <= best)

	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR _best$[ebp]
	jg	SHORT $LN3@FindBestAi

; 1746 : 			continue;

	jmp	$LN71@FindBestAi
$LN3@FindBestAi:

; 1747 : 
; 1748 : 		best = score;

	mov	ecx, DWORD PTR _score$[ebp]
	mov	DWORD PTR _best$[ebp], ecx

; 1749 : 		bf = (Flight)cf;

	mov	edx, DWORD PTR _cf$[ebp]
	mov	DWORD PTR _bf$[ebp], edx

; 1750 : 
; 1751 : 		//		if (t == quickest)
; 1752 : 		//			bq = 1;
; 1753 : 	}

	jmp	$LN71@FindBestAi
$LN48@FindBestAi:

; 1754 : 	if (!bf)

	cmp	DWORD PTR _bf$[ebp], 0
	jne	SHORT $LN2@FindBestAi

; 1755 : 		return NULL;

	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN51@FindBestAi
$LN2@FindBestAi:

; 1756 : 
; 1757 : 	// Record service of the selected aircraft and other info
; 1758 : 	if (!service)

	movsx	eax, WORD PTR _service$[ebp]
	test	eax, eax
	jne	SHORT $LN1@FindBestAi

; 1759 : 		mis->caps |= (bf->class_data->Flags & VEH_SERVICE_MASK);

	mov	ecx, DWORD PTR _bf$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, WORD PTR [edx+228]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+48]
	or	edx, eax
	mov	eax, DWORD PTR _mis$[ebp]
	mov	WORD PTR [eax+48], dx
$LN1@FindBestAi:

; 1760 : 	return bf;

	mov	ecx, DWORD PTR _bf$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T4[ebp]
$LN51@FindBestAi:

; 1761 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z ENDP ; AirTaskingManagerClass::FindBestAirFlight
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -176						; size = 8
_po$ = -168						; size = 4
_squadit$3 = -164					; size = 12
tv997 = -152						; size = 4
_fb$ = -148						; size = 4
_sb$ = -144						; size = 4
_slots$ = -140						; size = 4
tv995 = -136						; size = 4
_na$ = -132						; size = 4
_lowestScore$ = -128					; size = 4
_uc$ = -124						; size = 4
_tf$ = -120						; size = 4
tv360 = -116						; size = 4
_cargo$ = -112						; size = 4
_land$ = -108						; size = 4
_airbase$ = -104					; size = 4
_bq$ = -100						; size = 4
_sc$ = -96						; size = 4
_quickest$ = -92					; size = 4
_ns$ = -88						; size = 4
_best$ = -84						; size = 4
_to$ = -80						; size = 4
_db$4 = -76						; size = 4
_d$ = -72						; size = 4
_X$ = -68						; size = 2
_Y$ = -64						; size = 2
_bs$ = -60						; size = 4
_caps$ = -56						; size = 2
_t$ = -52						; size = 4
_speed$ = -48						; size = 4
_av$ = -44						; size = 4
_bonus$5 = -40						; size = 4
_service$ = -36						; size = 2
_this$ = -32						; size = 4
_role$ = -28						; size = 4
_stats$ = -24						; size = 2
_sq$ = -20						; size = 4
_score$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_mis$ = 8						; size = 4
_bx$ = 12						; size = 2
_by$ = 16						; size = 2
?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z PROC ; AirTaskingManagerClass::FindBestAir
; _this$ = ecx

; 1316 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 164				; 000000a4H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1317 : 	Squadron		sq,ns,bs=NULL;

	mov	DWORD PTR _bs$[ebp], 0

; 1318 : 	int				score,best=0,bq=0,av,sb,fb,role,na,sc=0,lowestScore;

	mov	DWORD PTR _best$[ebp], 0
	mov	DWORD PTR _bq$[ebp], 0
	mov	DWORD PTR _sc$[ebp], 0

; 1319 : 	uchar			slots[4];
; 1320 : 	float			d,speed;
; 1321 : 	short			stats,caps,service;
; 1322 : 	GridIndex		X,Y;
; 1323 : 	Unit			cargo=NULL;

	mov	DWORD PTR _cargo$[ebp], 0

; 1324 : 	CampaignTime	t,to,tf,land,quickest = INFINITE_TIME;

	mov	DWORD PTR _quickest$[ebp], -1

; 1325 : 	UnitClassDataType*	uc;
; 1326 : 	ATMAirbaseClass	*airbase;
; 1327 : 	Objective		po;
; 1328 : 
; 1329 : 	if (!squadrons)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN70@FindBestAi

; 1330 : 		return NULL;

	xor	eax, eax
	jmp	$LN71@FindBestAi
$LN70@FindBestAi:

; 1331 : 
; 1332 : 	if (mis->flags & REQF_USE_REQ_SQUAD)

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+44]
	and	eax, 512				; 00000200H
	je	SHORT $LN67@FindBestAi

; 1333 : 	{
; 1334 : 		// We don't want to look for a squadron, we want to use this one.
; 1335 : 		sq = (Squadron) FindUnit(mis->requesterID);

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	DWORD PTR _sq$[ebp], eax

; 1336 : 		memset(mis->slots,255,4);

	push	4
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _mis$[ebp]
	add	ecx, 67					; 00000043H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1337 : 		mis->start_block = mis->final_block = ATM_MAX_CYCLES-1;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+66], 31			; 0000001fH
	mov	eax, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [eax+65], 31			; 0000001fH

; 1338 : 		av = sq->FindAvailableAircraft(mis);

	mov	ecx, DWORD PTR _mis$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?FindAvailableAircraft@SquadronClass@@QAEHPAVMissionRequestClass@@@Z ; SquadronClass::FindAvailableAircraft
	mov	DWORD PTR _av$[ebp], eax

; 1339 : 		if (av)

	cmp	DWORD PTR _av$[ebp], 0
	je	SHORT $LN68@FindBestAi

; 1340 : 			return sq;

	mov	eax, DWORD PTR _sq$[ebp]
	jmp	$LN71@FindBestAi

; 1341 : 		else

	jmp	SHORT $LN67@FindBestAi
$LN68@FindBestAi:

; 1342 : 			return NULL;

	xor	eax, eax
	jmp	$LN71@FindBestAi
$LN67@FindBestAi:

; 1343 : 	}
; 1344 : 
; 1345 : 	//	po = FindNearestObjective (POList, mis->tx, mis->ty, NULL);
; 1346 : 	po = (Objective) vuDatabase->Find(mis->pakID);

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _po$[ebp], eax

; 1347 : 	tf = CampaignMinutes*MIN_PLAN_AIR;

	movsx	edx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	imul	edx, 60000				; 0000ea60H
	mov	DWORD PTR _tf$[ebp], edx

; 1348 : 	role = MissionData[mis->mission].skill;

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	shl	ecx, 5
	movzx	edx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[ecx+2]
	mov	DWORD PTR _role$[ebp], edx

; 1349 : 	if (role == ARO_TACTRANS)

	cmp	DWORD PTR _role$[ebp], 2
	jne	SHORT $LN66@FindBestAi

; 1350 : 		cargo = (Unit) vuDatabase->Find(mis->requesterID);

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _cargo$[ebp], eax
	jmp	SHORT $LN62@FindBestAi
$LN66@FindBestAi:

; 1351 : 	else if (role == ARO_CA)

	cmp	DWORD PTR _role$[ebp], 1
	jne	SHORT $LN64@FindBestAi

; 1352 : 		sc = SQUADRON_SPECIALTY_AA;						// Air to Air role

	mov	DWORD PTR _sc$[ebp], 1
	jmp	SHORT $LN62@FindBestAi
$LN64@FindBestAi:

; 1353 : 	else if (role == ARO_GA || role == ARO_S || role == ARO_SB || role == ARO_REC)

	cmp	DWORD PTR _role$[ebp], 4
	je	SHORT $LN61@FindBestAi
	cmp	DWORD PTR _role$[ebp], 3
	je	SHORT $LN61@FindBestAi
	cmp	DWORD PTR _role$[ebp], 5
	je	SHORT $LN61@FindBestAi
	cmp	DWORD PTR _role$[ebp], 10		; 0000000aH
	jne	SHORT $LN62@FindBestAi
$LN61@FindBestAi:

; 1354 : 		sc = SQUADRON_SPECIALTY_AG;						// Air to Ground role

	mov	DWORD PTR _sc$[ebp], 2
$LN62@FindBestAi:

; 1355 : 	// Check for night missions
; 1356 : 	if (TimeOfDayGeneral(mis->tot) == TOD_NIGHT)

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?TimeOfDayGeneral@@YAHK@Z		; TimeOfDayGeneral
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN60@FindBestAi

; 1357 : 		mis->caps |= VEH_NIGHT;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+48]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	WORD PTR [ecx+48], ax
$LN60@FindBestAi:

; 1358 : 	caps = mis->caps & VEH_CAPIBILITY_MASK;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+48]
	and	eax, 240				; 000000f0H
	mov	WORD PTR _caps$[ebp], ax

; 1359 : 	service = mis->caps & VEH_SERVICE_MASK;

	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+48]
	and	edx, 15					; 0000000fH
	mov	WORD PTR _service$[ebp], dx

; 1360 : 	lowestScore = (255 - mis->priority) / 25;

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+56]
	mov	eax, 255				; 000000ffH
	sub	eax, ecx
	cdq
	mov	ecx, 25					; 00000019H
	idiv	ecx
	mov	DWORD PTR _lowestScore$[ebp], eax

; 1361 : 
; 1362 : 	{
; 1363 : 		VuListIterator	squadit(squadronList);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	push	eax
	lea	ecx, DWORD PTR _squadit$3[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1364 : 		ns = (Squadron) squadit.GetFirst();

	lea	ecx, DWORD PTR _squadit$3[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _ns$[ebp], eax
$LN87@FindBestAi:

; 1365 : 		while (ns)

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN58@FindBestAi

; 1366 : 		{
; 1367 : 			sq = ns;

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR _sq$[ebp], ecx

; 1368 : 			ns = (Squadron) squadit.GetNext();

	lea	ecx, DWORD PTR _squadit$3[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _ns$[ebp], eax

; 1369 : 
; 1370 : 			// 2001-07-05 ADDED BY S.G. DON'T USE IF THE RELOCATION TIMER HASN'T EXPIRED
; 1371 : 			if (sq->squadronRetaskAt > Camp_GetCurrentTime())

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	edx, DWORD PTR _sq$[ebp]
	cmp	DWORD PTR [edx+1472], eax
	jbe	SHORT $LN57@FindBestAi

; 1372 : 				continue;

	jmp	SHORT $LN87@FindBestAi
$LN57@FindBestAi:

; 1373 : 			// END OF ADDED SECTION
; 1374 : 
; 1375 : 			// Determine base score (strat bombers use strike missions)
; 1376 : 			score = (sq->GetRating(role)+4)/5;

	mov	eax, DWORD PTR _role$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetRating@SquadronClass@@QAEEH@Z	; SquadronClass::GetRating
	movzx	eax, al
	add	eax, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _score$[ebp], eax

; 1377 : 			if (role == ARO_S && sq->GetRating(ARO_SB) > sq->GetRating(role))

	cmp	DWORD PTR _role$[ebp], 3
	jne	SHORT $LN56@FindBestAi
	push	5
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetRating@SquadronClass@@QAEEH@Z	; SquadronClass::GetRating
	movzx	esi, al
	mov	edx, DWORD PTR _role$[ebp]
	push	edx
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetRating@SquadronClass@@QAEEH@Z	; SquadronClass::GetRating
	movzx	eax, al
	cmp	esi, eax
	jle	SHORT $LN56@FindBestAi

; 1378 : 				score = (sq->GetRating(ARO_SB)+4)/5;

	push	5
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetRating@SquadronClass@@QAEEH@Z	; SquadronClass::GetRating
	movzx	eax, al
	add	eax, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _score$[ebp], eax
$LN56@FindBestAi:

; 1379 : 			if (sq->GetUnitSpecialty())

	mov	edx, DWORD PTR _sq$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _sq$[ebp]
	mov	edx, DWORD PTR [eax+772]
	call	edx
	test	eax, eax
	je	SHORT $LN53@FindBestAi

; 1380 : 			{
; 1381 : 				if (sc == sq->GetUnitSpecialty())

	mov	eax, DWORD PTR _sq$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _sq$[ebp]
	mov	eax, DWORD PTR [edx+772]
	call	eax
	cmp	DWORD PTR _sc$[ebp], eax
	jne	SHORT $LN54@FindBestAi

; 1382 : 					score += 5;								// Bonus for speciality

	mov	ecx, DWORD PTR _score$[ebp]
	add	ecx, 5
	mov	DWORD PTR _score$[ebp], ecx

; 1383 : 				else

	jmp	SHORT $LN53@FindBestAi
$LN54@FindBestAi:

; 1384 : 					score -= 5;								// Penalty for non-specialty

	mov	edx, DWORD PTR _score$[ebp]
	sub	edx, 5
	mov	DWORD PTR _score$[ebp], edx
$LN53@FindBestAi:

; 1385 : 			}
; 1386 : 			// A.S. Assume a minimum score of 1, they should be able to do something at least...
; 1387 : 			// M.N. bring back to original state, this change gives us AWACS flying Sweep missions...:-)
; 1388 : 			//		if ( max(score,1) <= lowestScore)
; 1389 : 			if (score <= lowestScore)

	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR _lowestScore$[ebp]
	jg	SHORT $LN52@FindBestAi

; 1390 : 				continue;

	jmp	$LN87@FindBestAi
$LN52@FindBestAi:

; 1391 : 
; 1392 : 			// KCK HACK TO FORCE ONLY ALERT MISSIONS (TO TRACK DOWN THE SCRAMBLE STUFF)
; 1393 : 		#ifdef TEST_SCRAMBLE
; 1394 : 			if (mis->mission != AMIS_ALERT && sq->Id() == FalconLocalSession->GetPlayerSquadronID())
; 1395 : 				continue;
; 1396 : 		#endif
; 1397 : 
; 1398 : 			// Check for required plane capibilities
; 1399 : 			uc = sq->GetUnitClassData();

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$[ebp], eax

; 1400 : 			stats = uc->Flags;

	mov	ecx, DWORD PTR _uc$[ebp]
	mov	dx, WORD PTR [ecx+228]
	mov	WORD PTR _stats$[ebp], dx

; 1401 : 
; 1402 : 			// 2001-04-28 ADDED BY S.G. GOOD MORAL SQUADRON WILL TASK NON NIGHT PLANES AT NIGHT (THEY'LL USE GCI ANYWAY)...
; 1403 : 			if (!sq->Broken())

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	jne	SHORT $LN51@FindBestAi

; 1404 : 				stats |= VEH_NIGHT;

	movsx	eax, WORD PTR _stats$[ebp]
	or	eax, 64					; 00000040H
	mov	WORD PTR _stats$[ebp], ax
$LN51@FindBestAi:

; 1405 : 			// END OF ADDED SECTION
; 1406 : 
; 1407 : 			if ((caps & stats) != caps || (service && !(service & stats)))

	movsx	ecx, WORD PTR _caps$[ebp]
	movsx	edx, WORD PTR _stats$[ebp]
	and	ecx, edx
	movsx	eax, WORD PTR _caps$[ebp]
	cmp	ecx, eax
	jne	SHORT $LN49@FindBestAi
	movsx	ecx, WORD PTR _service$[ebp]
	test	ecx, ecx
	je	SHORT $LN50@FindBestAi
	movsx	edx, WORD PTR _service$[ebp]
	movsx	eax, WORD PTR _stats$[ebp]
	and	edx, eax
	jne	SHORT $LN50@FindBestAi
$LN49@FindBestAi:

; 1408 : 				continue;

	jmp	$LN87@FindBestAi
$LN50@FindBestAi:

; 1409 : 
; 1410 : 			// 2001-04-26 ADDED BY S.G. SO STEALTH AIRCRAFT ARE NOT TASKED DURING DAYTIME. ONLY AT NIGHT...
; 1411 : 			if (TimeOfDayGeneral(mis->tot) != TOD_NIGHT && (stats & VEH_STEALTH))

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	?TimeOfDayGeneral@@YAHK@Z		; TimeOfDayGeneral
	add	esp, 4
	cmp	eax, 1
	je	SHORT $LN48@FindBestAi
	movsx	eax, WORD PTR _stats$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN48@FindBestAi

; 1412 : 				continue;

	jmp	$LN87@FindBestAi
$LN48@FindBestAi:

; 1413 : 			// END OF ADDED SECTION
; 1414 : 
; 1415 : 
; 1416 : 			if ((MissionData[mis->mission].flags & AMIS_NPC_ONLY) && TheCampaign.IsValidAircraftType(sq))

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN47@FindBestAi
	mov	ecx, DWORD PTR _sq$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?IsValidAircraftType@CampaignClass@@QAEHPAVUnitClass@@@Z ; CampaignClass::IsValidAircraftType
	test	eax, eax
	je	SHORT $LN47@FindBestAi

; 1417 : 				continue;

	jmp	$LN87@FindBestAi
$LN47@FindBestAi:

; 1418 : 
; 1419 : 			// Check range
; 1420 : 			speed = (float)sq->GetCruiseSpeed();

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetCruiseSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCruiseSpeed
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _speed$[ebp], xmm0

; 1421 : 			sq->GetLocation(&X,&Y);

	lea	edx, DWORD PTR _Y$[ebp]
	push	edx
	lea	eax, DWORD PTR _X$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1422 : 			d = Distance(X,Y,mis->tx,mis->ty);

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+42]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, WORD PTR [eax+40]
	push	ecx
	movzx	edx, WORD PTR _Y$[ebp]
	push	edx
	movzx	eax, WORD PTR _X$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1423 : 			if (!(MissionData[mis->mission].flags & AMIS_FUDGE_RANGE))

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 16777216				; 01000000H
	jne	$LN42@FindBestAi

; 1424 : 			{
; 1425 : 				float		db = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _db$4[ebp], xmm0

; 1426 : 				// Add loiter time to the estimated distance.
; 1427 : 				if (MissionData[mis->mission].loitertime > 0)

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movsx	eax, WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+16]
	test	eax, eax
	jle	SHORT $LN45@FindBestAi

; 1428 : 					db = (MissionData[mis->mission].loitertime * speed) / 60.0F;

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movsx	eax, WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+16]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _speed$[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _db$4[ebp], xmm0
$LN45@FindBestAi:

; 1429 : 				
; 1430 : 				// RV - Biker - Reduce loiter time for short range AC
; 1431 : 				if (d+db > sq->GetUnitRange()) {

	movss	xmm0, DWORD PTR _d$[ebp]
	addss	xmm0, DWORD PTR _db$4[ebp]
	mov	ecx, DWORD PTR _sq$[ebp]
	movss	DWORD PTR tv995[ebp], xmm0
	call	?GetUnitRange@UnitClass@@QAEHXZ		; UnitClass::GetUnitRange
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv995[ebp]
	comiss	xmm1, xmm0
	jbe	$LN43@FindBestAi

; 1432 : 					MissionData[mis->mission].loitertime = min(45, MissionData[mis->mission].loitertime);

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movsx	eax, WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+16]
	cmp	eax, 45					; 0000002dH
	jle	SHORT $LN73@FindBestAi
	mov	DWORD PTR tv360[ebp], 45		; 0000002dH
	jmp	SHORT $LN74@FindBestAi
$LN73@FindBestAi:
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movsx	eax, WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+16]
	mov	DWORD PTR tv360[ebp], eax
$LN74@FindBestAi:
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	ax, WORD PTR tv360[ebp]
	mov	WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+16], ax

; 1433 : 					db = (MissionData[mis->mission].loitertime * speed) / 60.0F;

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movsx	eax, WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+16]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _speed$[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _db$4[ebp], xmm0

; 1434 : 					if (d+db > sq->GetUnitRange())

	movss	xmm0, DWORD PTR _d$[ebp]
	addss	xmm0, DWORD PTR _db$4[ebp]
	mov	ecx, DWORD PTR _sq$[ebp]
	movss	DWORD PTR tv997[ebp], xmm0
	call	?GetUnitRange@UnitClass@@QAEHXZ		; UnitClass::GetUnitRange
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv997[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN43@FindBestAi

; 1435 : 						continue;

	jmp	$LN87@FindBestAi
$LN43@FindBestAi:

; 1436 : 				}
; 1437 : 				// Airlift missions must come from another airbase
; 1438 : 				if (mis->mission == AMIS_AIRLIFT && d < 40)

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	edx, 33					; 00000021H
	jne	SHORT $LN42@FindBestAi
	movss	xmm0, DWORD PTR __real@42200000
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN42@FindBestAi

; 1439 : 					continue;

	jmp	$LN87@FindBestAi
$LN42@FindBestAi:

; 1440 : 			}
; 1441 : 
; 1442 : 			// Check speed vs required
; 1443 : 			if (mis->speed && (mis->flags & AMIS_MATCHSPEED || MissionData[mis->mission].flags & AMIS_MATCHSPEED))

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+52]
	test	ecx, ecx
	je	SHORT $LN41@FindBestAi
	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+44]
	and	eax, 131072				; 00020000H
	jne	SHORT $LN40@FindBestAi
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 131072				; 00020000H
	je	SHORT $LN41@FindBestAi
$LN40@FindBestAi:

; 1444 : 			{
; 1445 : 				if (sq->GetMaxSpeed() < mis->speed || speed > mis->speed * 1.2F)

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetMaxSpeed@UnitClass@@QBEHXZ		; UnitClass::GetMaxSpeed
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+52]
	cmp	eax, edx
	jl	SHORT $LN38@FindBestAi
	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+52]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR _speed$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN39@FindBestAi
$LN38@FindBestAi:

; 1446 : 					continue;

	jmp	$LN87@FindBestAi
$LN39@FindBestAi:

; 1447 : 				speed = (float)mis->speed;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+52]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _speed$[ebp], xmm0
$LN41@FindBestAi:

; 1448 : 			}
; 1449 : 
; 1450 : 			// Estimate takeoff time
; 1451 : 			t = TimeToArrive(d,speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?TimeToArrive@@YAKMM@Z			; TimeToArrive
	add	esp, 8
	mov	DWORD PTR _t$[ebp], eax

; 1452 : 			to = mis->tot - t;

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sub	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _to$[ebp], edx

; 1453 : 			land = mis->tot + t;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _land$[ebp], ecx

; 1454 : 			if (to < scheduleTime)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _to$[ebp]
	cmp	eax, DWORD PTR [edx+204]
	jae	SHORT $LN37@FindBestAi

; 1455 : 			{
; 1456 : 				if (mis->tot_type != TYPE_NE && mis->tot_type <= TYPE_EQ)		// Not going to be here in time

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+58]
	test	edx, edx
	je	SHORT $LN36@FindBestAi
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+58]
	cmp	ecx, 3
	jg	SHORT $LN36@FindBestAi

; 1457 : 					continue;

	jmp	$LN87@FindBestAi
$LN36@FindBestAi:

; 1458 : 				// Otherwise, shift our estimate
; 1459 : 				land += scheduleTime - to;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	sub	eax, DWORD PTR _to$[ebp]
	add	eax, DWORD PTR _land$[ebp]
	mov	DWORD PTR _land$[ebp], eax

; 1460 : 				to = scheduleTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR _to$[ebp], edx
$LN37@FindBestAi:

; 1461 : 			}
; 1462 : 			mis->start_block = (int)((to - scheduleTime)/tf);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	sub	ecx, DWORD PTR [eax+204]
	mov	eax, ecx
	xor	edx, edx
	div	DWORD PTR _tf$[ebp]
	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+65], al

; 1463 : 			mis->final_block = (int)((land - scheduleTime)/tf) + 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _land$[ebp]
	sub	ecx, DWORD PTR [eax+204]
	mov	eax, ecx
	xor	edx, edx
	div	DWORD PTR _tf$[ebp]
	add	eax, 1
	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+66], al

; 1464 : 			if (mis->start_block < 1)

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+65]
	cmp	ecx, 1
	jge	SHORT $LN35@FindBestAi

; 1465 : 				mis->start_block = 0;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+65], 0

; 1466 : 			else

	jmp	SHORT $LN34@FindBestAi
$LN35@FindBestAi:

; 1467 : 				mis->start_block--;									// Give us some breathing room

	mov	eax, DWORD PTR _mis$[ebp]
	mov	cl, BYTE PTR [eax+65]
	sub	cl, 1
	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+65], cl
$LN34@FindBestAi:

; 1468 : 			if (mis->final_block > ATM_MAX_CYCLES)

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+66]
	cmp	ecx, 32					; 00000020H
	jle	SHORT $LN33@FindBestAi

; 1469 : 				mis->final_block = ATM_MAX_CYCLES;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+66], 32			; 00000020H
$LN33@FindBestAi:

; 1470 : 
; 1471 : 			// Determine # of aircraft needed
; 1472 : 			if (mis->match_strength && role == ARO_CA)

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+54]
	test	ecx, ecx
	je	SHORT $LN31@FindBestAi
	cmp	DWORD PTR _role$[ebp], 1
	jne	SHORT $LN31@FindBestAi

; 1473 : 			{
; 1474 : 				mis->aircraft = 4;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+61], 4

; 1475 : 				//			if ((uc->Scores[role] * AirExperienceAdjustment(mis->who))/2 > mis->match_strength)
; 1476 : 				if ((uc->HitChance[Air] * 3) / 2 > mis->match_strength)

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _uc$[ebp]
	movzx	eax, BYTE PTR [ecx+eax+285]
	imul	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [edx+54]
	cmp	eax, ecx
	jle	SHORT $LN31@FindBestAi

; 1477 : 					mis->aircraft = 2;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+61], 2
$LN31@FindBestAi:

; 1478 : 			}
; 1479 : 
; 1480 : 			// Check for aircraft availability
; 1481 : 			memset(mis->slots,255,4);

	push	4
	push	255					; 000000ffH
	mov	eax, DWORD PTR _mis$[ebp]
	add	eax, 67					; 00000043H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1482 : 			if (MissionData[mis->mission].flags & AMIS_DONT_USE_AC)

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 4194304				; 00400000H
	je	SHORT $LN30@FindBestAi

; 1483 : 				av = mis->aircraft;

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	mov	DWORD PTR _av$[ebp], edx

; 1484 : 			else

	jmp	SHORT $LN29@FindBestAi
$LN30@FindBestAi:

; 1485 : 				av = sq->FindAvailableAircraft(mis);

	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?FindAvailableAircraft@SquadronClass@@QAEHPAVMissionRequestClass@@@Z ; SquadronClass::FindAvailableAircraft
	mov	DWORD PTR _av$[ebp], eax
$LN29@FindBestAi:

; 1486 : 			if ((av < mis->aircraft-1 && !(mis->flags & REQF_USERESERVES)) || av < 1)

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	sub	edx, 1
	cmp	DWORD PTR _av$[ebp], edx
	jge	SHORT $LN26@FindBestAi
	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1
	je	SHORT $LN27@FindBestAi
$LN26@FindBestAi:
	cmp	DWORD PTR _av$[ebp], 1
	jge	SHORT $LN28@FindBestAi
$LN27@FindBestAi:

; 1487 : 				continue;

	jmp	$LN87@FindBestAi
$LN28@FindBestAi:

; 1488 : 
; 1489 : 			// Check against airbase schedule for this block and previous block
; 1490 : 			airbase = FindATMAirbase(sq->GetUnitAirbaseID());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _sq$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _sq$[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z ; AirTaskingManagerClass::FindATMAirbase
	mov	DWORD PTR _airbase$[ebp], eax

; 1491 : 			if (!airbase || (airbase->schedule[mis->start_block] == ATM_CYCLE_FULL && (!mis->start_block || airbase->schedule[mis->start_block-1] == ATM_CYCLE_FULL)))

	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN23@FindBestAi
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+65]
	mov	edx, DWORD PTR _airbase$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN25@FindBestAi
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+65]
	test	edx, edx
	je	SHORT $LN23@FindBestAi
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+65]
	mov	edx, DWORD PTR _airbase$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+7]
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN25@FindBestAi
$LN23@FindBestAi:

; 1492 : 				continue;

	jmp	$LN87@FindBestAi
$LN25@FindBestAi:

; 1493 : 
; 1494 : 			// Calculate it's score
; 1495 : 			if (TheCampaign.IsValidAircraftType(sq))				// Task player squadrons with important missions

	mov	ecx, DWORD PTR _sq$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?IsValidAircraftType@CampaignClass@@QAEHPAVUnitClass@@@Z ; CampaignClass::IsValidAircraftType
	test	eax, eax
	je	$LN13@FindBestAi

; 1496 : 			{
; 1497 : 				int bonus = 1;

	mov	DWORD PTR _bonus$5[ebp], 1

; 1498 : 				if (sq->IsSetFalcFlag(FEC_HASPLAYERS))				// Give a player unit some bonuses

	push	4
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN21@FindBestAi

; 1499 : 					bonus = 2;

	mov	DWORD PTR _bonus$5[ebp], 2
$LN21@FindBestAi:

; 1500 : 				if (mis->priority > 200)							// For high priority missions

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+56]
	cmp	eax, 200				; 000000c8H
	jle	SHORT $LN20@FindBestAi

; 1501 : 					score += mis->priority*bonus/20;

	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [ecx+56]
	imul	eax, DWORD PTR _bonus$5[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
	jmp	SHORT $LN16@FindBestAi
$LN20@FindBestAi:

; 1502 : 				else if (mis->priority > 100)

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+56]
	cmp	eax, 100				; 00000064H
	jle	SHORT $LN18@FindBestAi

; 1503 : 					score += mis->priority*bonus/40;

	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [ecx+56]
	imul	eax, DWORD PTR _bonus$5[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
	jmp	SHORT $LN16@FindBestAi
$LN18@FindBestAi:

; 1504 : 				else if (mis->priority < 50)

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+56]
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN16@FindBestAi

; 1505 : 					score -= (50 - mis->priority)*bonus/10;

	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+56]
	mov	eax, 50					; 00000032H
	sub	eax, edx
	imul	eax, DWORD PTR _bonus$5[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _score$[ebp]
	sub	edx, eax
	mov	DWORD PTR _score$[ebp], edx
$LN16@FindBestAi:

; 1506 : 				if (mis->action_type || !(MissionData[mis->mission].flags & AMIS_FLYALWAYS))

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	test	ecx, ecx
	jne	SHORT $LN14@FindBestAi
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	mov	ecx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+28]
	and	ecx, 536870912				; 20000000H
	jne	SHORT $LN15@FindBestAi
$LN14@FindBestAi:

; 1507 : 					score += 5*bonus;								// Bonus for special or "hotspot" missions

	mov	edx, DWORD PTR _bonus$5[ebp]
	imul	edx, 5
	add	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], edx

; 1508 : 				else

	jmp	SHORT $LN13@FindBestAi
$LN15@FindBestAi:

; 1509 : 					score -= 5*bonus;

	mov	eax, DWORD PTR _bonus$5[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _score$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _score$[ebp], ecx
$LN13@FindBestAi:

; 1510 : 			}
; 1511 : 			if (sq->GetAssigned())									// Bonus for using the same squadron

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetAssigned@SquadronClass@@QAEEXZ	; SquadronClass::GetAssigned
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@FindBestAi

; 1512 : 				score += 3;

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, 3
	mov	DWORD PTR _score$[ebp], eax
$LN12@FindBestAi:

; 1513 : 			if (X == bx && Y == by)									// Bonus for same airbase

	movsx	ecx, WORD PTR _X$[ebp]
	movsx	edx, WORD PTR _bx$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN11@FindBestAi
	movsx	eax, WORD PTR _Y$[ebp]
	movsx	ecx, WORD PTR _by$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN11@FindBestAi

; 1514 : 				score += 2;												

	mov	edx, DWORD PTR _score$[ebp]
	add	edx, 2
	mov	DWORD PTR _score$[ebp], edx
$LN11@FindBestAi:

; 1515 : 			if (d < sq->GetUnitRange()/2)							// Bonus if within 1/2 range

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetUnitRange@UnitClass@@QAEHXZ		; UnitClass::GetUnitRange
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN10@FindBestAi

; 1516 : 				score += 2;

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, 2
	mov	DWORD PTR _score$[ebp], eax
$LN10@FindBestAi:

; 1517 : 			if (cargo && cargo->GetOwner() == sq->GetOwner())		// Bonus for carriers owned by same country

	cmp	DWORD PTR _cargo$[ebp], 0
	je	SHORT $LN9@FindBestAi
	mov	ecx, DWORD PTR _cargo$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	esi, al
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN9@FindBestAi

; 1518 : 				score += 5;										

	mov	edx, DWORD PTR _score$[ebp]
	add	edx, 5
	mov	DWORD PTR _score$[ebp], edx
$LN9@FindBestAi:

; 1519 : 			if (av < mis->aircraft)									// Penalty for not enough aircraft

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+61]
	cmp	DWORD PTR _av$[ebp], ecx
	jge	SHORT $LN8@FindBestAi

; 1520 : 				score -= 5;

	mov	edx, DWORD PTR _score$[ebp]
	sub	edx, 5
	mov	DWORD PTR _score$[ebp], edx
$LN8@FindBestAi:

; 1521 : 			if (t < quickest)										// Bonus for being there soonest

	mov	eax, DWORD PTR _t$[ebp]
	cmp	eax, DWORD PTR _quickest$[ebp]
	jae	SHORT $LN6@FindBestAi

; 1522 : 			{
; 1523 : 				score += 2;												

	mov	ecx, DWORD PTR _score$[ebp]
	add	ecx, 2
	mov	DWORD PTR _score$[ebp], ecx

; 1524 : 				quickest = t;

	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _quickest$[ebp], edx

; 1525 : 				if (bq)

	cmp	DWORD PTR _bq$[ebp], 0
	je	SHORT $LN6@FindBestAi

; 1526 : 				{
; 1527 : 					best--;

	mov	eax, DWORD PTR _best$[ebp]
	sub	eax, 1
	mov	DWORD PTR _best$[ebp], eax

; 1528 : 					bq = 0;

	mov	DWORD PTR _bq$[ebp], 0
$LN6@FindBestAi:

; 1529 : 				}
; 1530 : 			}
; 1531 : 			if (score <= best)

	mov	ecx, DWORD PTR _score$[ebp]
	cmp	ecx, DWORD PTR _best$[ebp]
	jg	SHORT $LN5@FindBestAi

; 1532 : 				continue;

	jmp	$LN87@FindBestAi
$LN5@FindBestAi:

; 1533 : 			best = score;

	mov	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR _best$[ebp], edx

; 1534 : 			bs = sq;

	mov	eax, DWORD PTR _sq$[ebp]
	mov	DWORD PTR _bs$[ebp], eax

; 1535 : 
; 1536 : 			// We can use this data later
; 1537 : 			sb = mis->start_block;

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+65]
	mov	DWORD PTR _sb$[ebp], edx

; 1538 : 			fb = mis->final_block;

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+66]
	mov	DWORD PTR _fb$[ebp], ecx

; 1539 : 			na = mis->aircraft;

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+61]
	mov	DWORD PTR _na$[ebp], eax

; 1540 : 			memcpy(slots,mis->slots,4);

	push	4
	mov	ecx, DWORD PTR _mis$[ebp]
	add	ecx, 67					; 00000043H
	push	ecx
	lea	edx, DWORD PTR _slots$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1541 : 
; 1542 : 			if (t == quickest)

	mov	eax, DWORD PTR _t$[ebp]
	cmp	eax, DWORD PTR _quickest$[ebp]
	jne	SHORT $LN4@FindBestAi

; 1543 : 				bq = 1;

	mov	DWORD PTR _bq$[ebp], 1
$LN4@FindBestAi:

; 1544 : 		}

	jmp	$LN87@FindBestAi
$LN58@FindBestAi:

; 1545 : 
; 1546 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _squadit$3[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 1547 : 	if (!bs)

	cmp	DWORD PTR _bs$[ebp], 0
	jne	SHORT $LN3@FindBestAi

; 1548 : 		return NULL;

	xor	eax, eax
	jmp	$LN71@FindBestAi
$LN3@FindBestAi:

; 1549 : 
; 1550 : 	// Record service of the selected aircraft and other info
; 1551 : 	if (!service)

	movsx	ecx, WORD PTR _service$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@FindBestAi

; 1552 : 		mis->caps |= (bs->class_data->Flags & VEH_SERVICE_MASK);

	mov	edx, DWORD PTR _bs$[ebp]
	mov	eax, DWORD PTR [edx+236]
	movzx	ecx, WORD PTR [eax+228]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+48]
	or	eax, ecx
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	WORD PTR [ecx+48], ax
$LN2@FindBestAi:

; 1553 : 	// Set stealth mission, if applicable
; 1554 : 	if (bs->class_data->Flags & VEH_STEALTH)

	mov	edx, DWORD PTR _bs$[ebp]
	mov	eax, DWORD PTR [edx+236]
	movzx	ecx, WORD PTR [eax+228]
	and	ecx, 32					; 00000020H
	je	SHORT $LN1@FindBestAi

; 1555 : 		mis->caps |= VEH_STEALTH;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+48]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	WORD PTR [ecx+48], ax
$LN1@FindBestAi:

; 1556 : 
; 1557 : 	mis->start_block = sb;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	al, BYTE PTR _sb$[ebp]
	mov	BYTE PTR [edx+65], al

; 1558 : 	mis->final_block = fb;

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	dl, BYTE PTR _fb$[ebp]
	mov	BYTE PTR [ecx+66], dl

; 1559 : 	mis->aircraft = na;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	cl, BYTE PTR _na$[ebp]
	mov	BYTE PTR [eax+61], cl

; 1560 : 	memcpy(mis->slots,slots,4);

	push	4
	lea	edx, DWORD PTR _slots$[ebp]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	add	eax, 67					; 00000043H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1561 : 
; 1562 : 	return bs;

	mov	eax, DWORD PTR _bs$[ebp]
$LN71@FindBestAi:

; 1563 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z$0:
	lea	ecx, DWORD PTR _squadit$3[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindBestAir@AirTaskingManagerClass@@QAEPAVSquadronClass@@PAVMissionRequestClass@@FF@Z ENDP ; AirTaskingManagerClass::FindBestAir
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_packit$2 = -104					; size = 12
$T3 = -92						; size = 8
$T4 = -84						; size = 4
tv859 = -80						; size = 4
_timeleft$ = -76					; size = 4
tv775 = -72						; size = 4
tv543 = -68						; size = 4
$T5 = -64						; size = 4
_u$6 = -60						; size = 4
_u$7 = -56						; size = 4
_o$8 = -52						; size = 4
_lp$ = -48						; size = 4
_pp$ = -44						; size = 4
_mis$ = -40						; size = 4
_pack$ = -36						; size = 4
_this$ = -32						; size = 4
_pmis$ = -28						; size = 4
_e$ = -24						; size = 4
_px$ = -20						; size = 2
_py$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_request$ = 8						; size = 4
?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z PROC ; AirTaskingManagerClass::ProcessRequest
; _this$ = ecx

; 1088 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1089 : 	ListNode		lp,pp;
; 1090 : 	MissionRequest	mis,pmis;
; 1091 : 	int				timeleft;
; 1092 : 	CampEntity		e;
; 1093 : 	Package			pack=NULL;

	mov	DWORD PTR _pack$[ebp], 0

; 1094 : 	GridIndex		px,py;
; 1095 : 
; 1096 : 	if (request->flags & AMIS_IMMEDIATE)

	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN56@ProcessReq

; 1097 : 	{
; 1098 : 		// Immediately try to task this, or continue if we can't
; 1099 : 		if (BuildDivert(request) == PRET_SUCCESS)

	mov	edx, DWORD PTR _request$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z ; AirTaskingManagerClass::BuildDivert
	cmp	eax, 3
	jne	SHORT $LN56@ProcessReq

; 1100 : 			return;

	jmp	$LN58@ProcessReq
$LN56@ProcessReq:

; 1101 : 	}
; 1102 : 
; 1103 : 	// Adjust target depending on mission type
; 1104 : 	if (request->mission == AMIS_AWACS)

	mov	eax, DWORD PTR _request$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	cmp	ecx, 26					; 0000001aH
	jne	SHORT $LN55@ProcessReq

; 1105 : 		FindBestLocation(request,awacsList);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	push	eax
	mov	ecx, DWORD PTR _request$[ebp]
	push	ecx
	call	?FindBestLocation@@YAXPAVMissionRequestClass@@PAVListClass@@@Z ; FindBestLocation
	add	esp, 8
	jmp	SHORT $LN49@ProcessReq
$LN55@ProcessReq:

; 1106 : 	else if (request->mission == AMIS_JSTAR)

	mov	edx, DWORD PTR _request$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	cmp	eax, 27					; 0000001bH
	jne	SHORT $LN53@ProcessReq

; 1107 : 		FindBestLocation(request,awacsList);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _request$[ebp]
	push	eax
	call	?FindBestLocation@@YAXPAVMissionRequestClass@@PAVListClass@@@Z ; FindBestLocation
	add	esp, 8
	jmp	SHORT $LN49@ProcessReq
$LN53@ProcessReq:

; 1108 : 	else if (request->mission == AMIS_ECM)

	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	edx, 31					; 0000001fH
	jne	SHORT $LN51@ProcessReq

; 1109 : 		FindBestLocation(request,ecmList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	edx, DWORD PTR _request$[ebp]
	push	edx
	call	?FindBestLocation@@YAXPAVMissionRequestClass@@PAVListClass@@@Z ; FindBestLocation
	add	esp, 8
	jmp	SHORT $LN49@ProcessReq
$LN51@ProcessReq:

; 1110 : 	else if (request->mission == AMIS_TANKER)

	mov	eax, DWORD PTR _request$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	cmp	ecx, 28					; 0000001cH
	jne	SHORT $LN49@ProcessReq

; 1111 : 		FindBestLocation(request,tankerList);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _request$[ebp]
	push	ecx
	call	?FindBestLocation@@YAXPAVMissionRequestClass@@PAVListClass@@@Z ; FindBestLocation
	add	esp, 8
$LN49@ProcessReq:

; 1112 : 
; 1113 : 	if (!request->tx || !request->ty)

	mov	edx, DWORD PTR _request$[ebp]
	movsx	eax, WORD PTR [edx+40]
	test	eax, eax
	je	SHORT $LN47@ProcessReq
	mov	ecx, DWORD PTR _request$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	test	edx, edx
	jne	SHORT $LN48@ProcessReq
$LN47@ProcessReq:

; 1114 : 		return;

	jmp	$LN58@ProcessReq
$LN48@ProcessReq:

; 1115 : 
; 1116 : 	// Adjust priority and times depending on it's inclusion in an action
; 1117 : 	if (request->flags & REQF_PART_OF_ACTION)

	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN46@ProcessReq

; 1118 : 	{
; 1119 : 		// Add to our priority
; 1120 : 		request->priority += 100;

	mov	edx, DWORD PTR _request$[ebp]
	movsx	eax, WORD PTR [edx+56]
	add	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _request$[ebp]
	mov	WORD PTR [ecx+56], ax

; 1121 : 		if (request->priority > 255)

	mov	edx, DWORD PTR _request$[ebp]
	movsx	eax, WORD PTR [edx+56]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN45@ProcessReq

; 1122 : 			request->priority = 255;

	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _request$[ebp]
	mov	WORD PTR [edx+56], cx
$LN45@ProcessReq:

; 1123 : 	}
; 1124 : 	else

	jmp	SHORT $LN43@ProcessReq
$LN46@ProcessReq:

; 1125 : 	{
; 1126 : 		// Reduce our priority
; 1127 : 		request->priority -= 25;

	mov	eax, DWORD PTR _request$[ebp]
	movsx	ecx, WORD PTR [eax+56]
	sub	ecx, 25					; 00000019H
	mov	edx, DWORD PTR _request$[ebp]
	mov	WORD PTR [edx+56], cx

; 1128 : 		if (request->priority < 0)

	mov	eax, DWORD PTR _request$[ebp]
	movsx	ecx, WORD PTR [eax+56]
	test	ecx, ecx
	jge	SHORT $LN43@ProcessReq

; 1129 : 			request->priority = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _request$[ebp]
	mov	WORD PTR [eax+56], dx
$LN43@ProcessReq:

; 1130 : 	}
; 1131 : 
; 1132 : 	// Convert mission type for unspotted objectives/units
; 1133 : 	e = (CampEntity) vuDatabase->Find(request->targetID);

	mov	ecx, DWORD PTR _request$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 1134 : 	if (!e)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN42@ProcessReq
	jmp	$LN28@ProcessReq
$LN42@ProcessReq:

; 1135 : 	{
; 1136 : 		// No target.. Just a location
; 1137 : 	}
; 1138 : 	else if (e->IsObjective())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	$LN40@ProcessReq

; 1139 : 	{
; 1140 : 		Objective	o=(Objective)e;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _o$8[ebp], ecx

; 1141 : 		if (o && !o->GetSpotted(request->who)) // && o->GetObjectiveStatus() < 100)

	cmp	DWORD PTR _o$8[ebp], 0
	je	SHORT $LN37@ProcessReq
	mov	edx, DWORD PTR _request$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _o$8[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN37@ProcessReq

; 1142 : 		{
; 1143 : 			// 20% chance of recon mission instead
; 1144 : 			if (!(rand()%5) && o->HasDelta())	// Only recon if something's happened to it.

	call	_rand
	cdq
	mov	ecx, 5
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN38@ProcessReq
	mov	ecx, DWORD PTR _o$8[ebp]
	call	?HasDelta@CampBaseClass@@QAEHXZ		; CampBaseClass::HasDelta
	test	eax, eax
	je	SHORT $LN38@ProcessReq

; 1145 : 			{
; 1146 : 				request->mission = AMIS_RECON;

	mov	edx, DWORD PTR _request$[ebp]
	mov	BYTE PTR [edx+60], 29			; 0000001dH

; 1147 : 				request->context = targetReconNeeded;

	mov	eax, DWORD PTR _request$[ebp]
	mov	BYTE PTR [eax+62], 49			; 00000031H

; 1148 : 				request->tot_type = TYPE_NE;

	mov	ecx, DWORD PTR _request$[ebp]
	mov	BYTE PTR [ecx+58], 0

; 1149 : 				request->priority /= 4;

	mov	edx, DWORD PTR _request$[ebp]
	movsx	eax, WORD PTR [edx+56]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _request$[ebp]
	mov	WORD PTR [ecx+56], ax
$LN38@ProcessReq:

; 1150 : 			}
; 1151 : 			// 20% chance of ignoring it
; 1152 : 			if (!(rand()%5))

	call	_rand
	cdq
	mov	ecx, 5
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN37@ProcessReq

; 1153 : 				return;

	jmp	$LN58@ProcessReq
$LN37@ProcessReq:

; 1154 : 		}
; 1155 : 	}

	jmp	$LN28@ProcessReq
$LN40@ProcessReq:

; 1156 : 	else if (e->IsUnit() && (e->IsBattalion() || e->IsBrigade()))

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	$LN35@ProcessReq
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	jne	SHORT $LN34@ProcessReq
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+244]
	call	eax
	test	eax, eax
	je	$LN35@ProcessReq
$LN34@ProcessReq:

; 1157 : 	{
; 1158 : 		Unit		u=(Unit)e;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _u$7[ebp], ecx

; 1159 : 		if (u && !u->GetSpotted(request->who) && !FriendlyTerritory (request->tx, request->ty, request->who))

	cmp	DWORD PTR _u$7[ebp], 0
	je	SHORT $LN32@ProcessReq
	mov	edx, DWORD PTR _request$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _u$7[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN32@ProcessReq
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _request$[ebp]
	movzx	ecx, WORD PTR [eax+42]
	push	ecx
	mov	edx, DWORD PTR _request$[ebp]
	movzx	eax, WORD PTR [edx+40]
	push	eax
	call	?FriendlyTerritory@@YAHFFH@Z		; FriendlyTerritory
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN32@ProcessReq

; 1160 : 		{
; 1161 : 			// 33% chance of SAD mission instead (Except for SEAD Strike missions)
; 1162 : 			if (request->mission != AMIS_SEADSTRIKE && !(rand()%3))

	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	edx, 11					; 0000000bH
	je	SHORT $LN32@ProcessReq
	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN32@ProcessReq

; 1163 : 			{
; 1164 : 				request->mission = AMIS_SAD;

	mov	edx, DWORD PTR _request$[ebp]
	mov	BYTE PTR [edx+60], 23			; 00000017H

; 1165 : 				request->targetID = FalconNullId;

	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+12], edx

; 1166 : 				request->context = enemyForcesPresent;

	mov	eax, DWORD PTR _request$[ebp]
	mov	BYTE PTR [eax+62], 7
$LN32@ProcessReq:

; 1167 : 				//request->priority /= 4;		Cobra removed		// Very low priority mission
; 1168 : 			}
; 1169 : 			// 33% chance of ignoring it //Cobra removed this
; 1170 : 			//if (!(rand()%3))
; 1171 : 			//return;
; 1172 : 		}
; 1173 : 	}

	jmp	$LN28@ProcessReq
$LN35@ProcessReq:

; 1174 : 	else if (e->IsUnit() && e->IsTaskForce())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN28@ProcessReq
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+264]
	call	eax
	test	eax, eax
	je	SHORT $LN28@ProcessReq

; 1175 : 	{
; 1176 : 		Unit		u=(Unit)e;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _u$6[ebp], ecx

; 1177 : 		if (u && !u->GetSpotted(request->who))

	cmp	DWORD PTR _u$6[ebp], 0
	je	SHORT $LN28@ProcessReq
	mov	edx, DWORD PTR _request$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _u$6[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN28@ProcessReq

; 1178 : 		{
; 1179 : 			// 66% chance of PATROL mission instead
; 1180 : 			if ((rand()%3))

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	test	edx, edx
	je	SHORT $LN28@ProcessReq

; 1181 : 			{
; 1182 : 				request->mission = AMIS_PATROL;

	mov	edx, DWORD PTR _request$[ebp]
	mov	BYTE PTR [edx+60], 37			; 00000025H

; 1183 : 				request->targetID = FalconNullId;

	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+12], edx

; 1184 : 				// KCK WARNING: We'll need a new context here
; 1185 : 				request->context = enemyForcesPresent;

	mov	eax, DWORD PTR _request$[ebp]
	mov	BYTE PTR [eax+62], 7

; 1186 : 				request->priority /= 4;	// Very low priority mission

	mov	ecx, DWORD PTR _request$[ebp]
	movsx	eax, WORD PTR [ecx+56]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	edx, DWORD PTR _request$[ebp]
	mov	WORD PTR [edx+56], ax
$LN28@ProcessReq:

; 1187 : 			}
; 1188 : 		}
; 1189 : 	}
; 1190 : 
; 1191 : 	// Check to see if a similar mission is already in progress, and cancel if so.
; 1192 : 	if (packageList) // && !request->action_type)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	$LN27@ProcessReq

; 1193 : 	{
; 1194 : 		VuListIterator	packit(packageList);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	push	edx
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1195 : 		pack = (Package) GetFirstUnit(&packit);

	lea	eax, DWORD PTR _packit$2[ebp]
	push	eax
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _pack$[ebp], eax
$LN26@ProcessReq:

; 1196 : 		while (pack)

	cmp	DWORD PTR _pack$[ebp], 0
	je	$LN25@ProcessReq

; 1197 : 		{
; 1198 : 			pmis = pack->GetMissionRequest();

	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	DWORD PTR _pmis$[ebp], eax

; 1199 : 			if (request->action_type == pmis->action_type &&
; 1200 : 							pmis->mission == request->mission && !pack->Aborted()) // KCK: Probably want '&& !mission finished' too

	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, BYTE PTR [ecx+59]
	mov	eax, DWORD PTR _pmis$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	cmp	edx, ecx
	jne	$LN20@ProcessReq
	mov	edx, DWORD PTR _pmis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	eax, edx
	jne	$LN20@ProcessReq
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	jne	$LN20@ProcessReq

; 1201 : 			{
; 1202 : 				// We want to compare to in-progress missions differently for IMMEDIATE and non IMMEDIATE requests
; 1203 : 				if (request->flags & AMIS_IMMEDIATE)

	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN23@ProcessReq

; 1204 : 				{
; 1205 : 					// Check if it's our initial request (requested at the same time && same target)
; 1206 : 					// Dump only additional requests - the only time our initial request would still
; 1207 : 					// be here is if we need additional interceptors.
; 1208 : 					if (request->targetID == pmis->targetID && pmis->tot != request->tot)

	mov	edx, DWORD PTR _pmis$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _request$[ebp]
	add	ecx, 8
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN22@ProcessReq
	mov	ecx, DWORD PTR _pmis$[ebp]
	mov	edx, DWORD PTR _request$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	cmp	eax, DWORD PTR [edx+36]
	je	SHORT $LN22@ProcessReq

; 1209 : 						return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	$LN58@ProcessReq
$LN22@ProcessReq:

; 1210 : 				}
; 1211 : 				else

	jmp	$LN20@ProcessReq
$LN23@ProcessReq:

; 1212 : 				{
; 1213 : 					// Check if this planned/in-progress mission is similar to the one requested
; 1214 : 					pack->GetUnitDestination(&px,&py);

	lea	ecx, DWORD PTR _py$[ebp]
	push	ecx
	lea	edx, DWORD PTR _px$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetUnitDestination@UnitClass@@QAEXPAF0@Z ; UnitClass::GetUnitDestination

; 1215 : 					if (abs((int)pmis->tot - (int)request->tot) < MissionData[request->mission].mintime * CampaignMinutes
; 1216 : 									&& Distance(request->tx,request->ty,px,py) < MissionData[request->mission].mindistance)

	mov	eax, DWORD PTR _pmis$[ebp]
	mov	ecx, DWORD PTR _request$[ebp]
	mov	edx, DWORD PTR [eax+36]
	sub	edx, DWORD PTR [ecx+36]
	push	edx
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[edx+23]
	imul	ecx, 60000				; 0000ea60H
	cmp	eax, ecx
	jge	$LN20@ProcessReq
	movzx	edx, WORD PTR _py$[ebp]
	push	edx
	movzx	eax, WORD PTR _px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, WORD PTR [ecx+42]
	push	edx
	mov	eax, DWORD PTR _request$[ebp]
	movzx	ecx, WORD PTR [eax+40]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv775[ebp]
	mov	edx, DWORD PTR _request$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+22]
	cvtsi2ss xmm0, ecx
	comiss	xmm0, DWORD PTR tv775[ebp]
	jbe	$LN20@ProcessReq

; 1217 : 					{
; 1218 : 						// We're going to cancel - but send a positive response if one's needed
; 1219 : 						// KCK NOTE: this may cause one BARCAP mission to be forced to fend off several attacking packages -
; 1220 : 						// all with escorts. Sending a negative response would cause no warning to appear in the briefing.
; 1221 : 						if (request->flags & REQF_NEEDRESPONSE)

	mov	edx, DWORD PTR _request$[ebp]
	mov	eax, DWORD PTR [edx+44]
	and	eax, 4
	je	SHORT $LN18@ProcessReq

; 1222 : 						{
; 1223 : 							e = (CampEntity) vuDatabase->Find(request->requesterID);

	mov	ecx, DWORD PTR _request$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 1224 : 							if (e->IsUnit())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN18@ProcessReq

; 1225 : 								((Unit)e)->SendUnitMessage(pack->GetMainFlightID(),FalconUnitMessage::unitRequestMet,request->mission,request->who,0);	

	push	0
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	dx, BYTE PTR [ecx+32]
	movzx	eax, dx
	push	eax
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	dx, BYTE PTR [ecx+60]
	movzx	eax, dx
	push	eax
	push	3
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetMainFlightID@PackageClass@@QAE?AVVU_ID@@XZ ; PackageClass::GetMainFlightID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SendUnitMessage@UnitClass@@QAEXVVU_ID@@FFFF@Z ; UnitClass::SendUnitMessage
$LN18@ProcessReq:

; 1226 : 						}
; 1227 : 						return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	$LN58@ProcessReq
$LN20@ProcessReq:

; 1228 : 					}
; 1229 : 				}
; 1230 : 			}
; 1231 : 			pack = (Package) GetNextUnit(&packit);

	lea	ecx, DWORD PTR _packit$2[ebp]
	push	ecx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _pack$[ebp], eax

; 1232 : 		}

	jmp	$LN26@ProcessReq
$LN25@ProcessReq:

; 1233 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN27@ProcessReq:

; 1234 : 
; 1235 : 	// Now check to see if a similar mission request is already on the queue
; 1236 : 	lp = requestList->GetFirstElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+180]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN67@ProcessReq:

; 1237 : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	$LN16@ProcessReq

; 1238 : 	{
; 1239 : 		pmis = (MissionRequest) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _pmis$[ebp], eax

; 1240 : 		pp = lp;

	mov	eax, DWORD PTR _lp$[ebp]
	mov	DWORD PTR _pp$[ebp], eax

; 1241 : 		lp = pp->GetNext();

	mov	ecx, DWORD PTR _pp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 1242 : 		if (!pmis)

	cmp	DWORD PTR _pmis$[ebp], 0
	jne	SHORT $LN15@ProcessReq

; 1243 : 			continue;

	jmp	SHORT $LN67@ProcessReq
$LN15@ProcessReq:

; 1244 : 		// Check for timeout
; 1245 : 		timeleft = (int) ((pmis->tot - Camp_GetCurrentTime())/CampaignMinutes);

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	ecx, DWORD PTR _pmis$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sub	edx, eax
	mov	eax, edx
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _timeleft$[ebp], eax

; 1246 : 		if (pmis->mission != request->mission)

	mov	edx, DWORD PTR _pmis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	eax, edx
	je	SHORT $LN14@ProcessReq

; 1247 : 			continue;

	jmp	SHORT $LN67@ProcessReq
$LN14@ProcessReq:

; 1248 : 		// Check for action vs non-action missions
; 1249 : 		if (request->action_type && !pmis->action_type)

	mov	eax, DWORD PTR _request$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	test	ecx, ecx
	je	SHORT $LN13@ProcessReq
	mov	edx, DWORD PTR _pmis$[ebp]
	movzx	eax, BYTE PTR [edx+59]
	test	eax, eax
	jne	SHORT $LN13@ProcessReq

; 1250 : 		{
; 1251 : 			CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 1252 : 			requestList->Remove(pp);

	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 1253 : 			CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 1254 : 			continue;

	jmp	$LN67@ProcessReq
$LN13@ProcessReq:

; 1255 : 		}
; 1256 : 		if (!request->action_type && pmis->action_type)

	mov	eax, DWORD PTR _request$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	test	ecx, ecx
	jne	SHORT $LN12@ProcessReq
	mov	edx, DWORD PTR _pmis$[ebp]
	movzx	eax, BYTE PTR [edx+59]
	test	eax, eax
	je	SHORT $LN12@ProcessReq

; 1257 : 			return;

	jmp	$LN58@ProcessReq
$LN12@ProcessReq:

; 1258 : 		if ((pmis->tot_type == TYPE_LT || pmis->tot_type == TYPE_EQ) && timeleft < LONGRANGE_MIN_TIME)

	mov	ecx, DWORD PTR _pmis$[ebp]
	movzx	edx, BYTE PTR [ecx+58]
	cmp	edx, 1
	je	SHORT $LN10@ProcessReq
	mov	eax, DWORD PTR _pmis$[ebp]
	movzx	ecx, BYTE PTR [eax+58]
	cmp	ecx, 3
	jne	SHORT $LN11@ProcessReq
$LN10@ProcessReq:
	movsx	edx, WORD PTR ?LONGRANGE_MIN_TIME@@3FA	; LONGRANGE_MIN_TIME
	cmp	DWORD PTR _timeleft$[ebp], edx
	jge	SHORT $LN11@ProcessReq

; 1259 : 		{
; 1260 : 			CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 1261 : 			requestList->Remove(pp);

	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 1262 : 			CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 1263 : 			continue;

	jmp	$LN67@ProcessReq
$LN11@ProcessReq:

; 1264 : 		}
; 1265 : 		// We want to compare to in-progress missions differently for IMMEDIATE and non IMMEDIATE requests
; 1266 : 		if (request->flags & AMIS_IMMEDIATE)

	mov	edx, DWORD PTR _request$[ebp]
	mov	eax, DWORD PTR [edx+44]
	and	eax, 65536				; 00010000H
	je	SHORT $LN9@ProcessReq

; 1267 : 		{
; 1268 : 			// Dump earlier requests
; 1269 : 			if (request->targetID == pmis->targetID && pmis->tot > request->tot)

	mov	ecx, DWORD PTR _pmis$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _request$[ebp]
	add	ecx, 8
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@ProcessReq
	mov	eax, DWORD PTR _pmis$[ebp]
	mov	ecx, DWORD PTR _request$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+36]
	jbe	SHORT $LN6@ProcessReq

; 1270 : 			{
; 1271 : 				if (pmis->tot > request->tot)

	mov	eax, DWORD PTR _pmis$[ebp]
	mov	ecx, DWORD PTR _request$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+36]
	jbe	SHORT $LN7@ProcessReq

; 1272 : 					return;

	jmp	$LN58@ProcessReq

; 1273 : 				else

	jmp	SHORT $LN6@ProcessReq
$LN7@ProcessReq:

; 1274 : 				{
; 1275 : 					CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 1276 : 					requestList->Remove(pp);

	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 1277 : 					CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection
$LN6@ProcessReq:

; 1278 : 				}
; 1279 : 			}
; 1280 : 		}
; 1281 : 		else

	jmp	$LN4@ProcessReq
$LN9@ProcessReq:

; 1282 : 		{
; 1283 : 			// Check if this planned/in-progress mission is similar to the one requested
; 1284 : 			if (abs((int)pmis->tot - (int)request->tot) < MissionData[request->mission].mintime * CampaignMinutes
; 1285 : 							&& Distance(request->tx,request->ty,pmis->tx,pmis->ty) < MissionData[request->mission].mindistance)

	mov	edx, DWORD PTR _pmis$[ebp]
	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	sub	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_abs
	add	esp, 4
	mov	edx, DWORD PTR _request$[ebp]
	movzx	ecx, BYTE PTR [edx+60]
	shl	ecx, 5
	movzx	edx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[ecx+23]
	imul	edx, 60000				; 0000ea60H
	cmp	eax, edx
	jge	SHORT $LN4@ProcessReq
	mov	eax, DWORD PTR _pmis$[ebp]
	movzx	ecx, WORD PTR [eax+42]
	push	ecx
	mov	edx, DWORD PTR _pmis$[ebp]
	movzx	eax, WORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _request$[ebp]
	movzx	edx, WORD PTR [ecx+42]
	push	edx
	mov	eax, DWORD PTR _request$[ebp]
	movzx	ecx, WORD PTR [eax+40]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv859[ebp]
	mov	edx, DWORD PTR _request$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+22]
	cvtsi2ss xmm0, ecx
	comiss	xmm0, DWORD PTR tv859[ebp]
	jbe	SHORT $LN4@ProcessReq

; 1286 : 			{
; 1287 : 				// Take the earlier request
; 1288 : 				if (pmis->tot <= request->tot)

	mov	edx, DWORD PTR _pmis$[ebp]
	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	cmp	ecx, DWORD PTR [eax+36]
	ja	SHORT $LN3@ProcessReq

; 1289 : 					return;

	jmp	$LN58@ProcessReq
$LN3@ProcessReq:

; 1290 : 				CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 1291 : 				requestList->Remove(pp);

	mov	edx, DWORD PTR _pp$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 1292 : 				CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection
$LN4@ProcessReq:

; 1293 : 			}
; 1294 : 		}
; 1295 : 	}

	jmp	$LN67@ProcessReq
$LN16@ProcessReq:

; 1296 : 
; 1297 : 	// Add the request to the request list
; 1298 : 	mis = new MissionRequestClass();

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN60@ProcessReq
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR tv543[ebp], eax
	jmp	SHORT $LN61@ProcessReq
$LN60@ProcessReq:
	mov	DWORD PTR tv543[ebp], 0
$LN61@ProcessReq:
	mov	ecx, DWORD PTR tv543[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _mis$[ebp], edx

; 1299 : 	*mis = *request;

	mov	ecx, 19					; 00000013H
	mov	esi, DWORD PTR _request$[ebp]
	mov	edi, DWORD PTR _mis$[ebp]
	rep movsd

; 1300 : 	if (!mis)

	cmp	DWORD PTR _mis$[ebp], 0
	jne	SHORT $LN2@ProcessReq

; 1301 : 		return;

	jmp	$LN58@ProcessReq
$LN2@ProcessReq:

; 1302 : 	requestList->InsertNewElement(mis->priority, mis, LADT_FREE_USER_DATA);

	push	2
	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	call	?InsertNewElement@ListClass@@QAEXFPAXE@Z ; ListClass::InsertNewElement

; 1303 : 
; 1304 : 	// KCK: Increase the number of missions we're allowed to plan if this is a valid type
; 1305 : 	if (!mis->action_type && !(MissionData[mis->mission].flags & AMIS_FLYALWAYS) && rand()%100 < TeamInfo[mis->who]->GetGroundAction()->actionTempo)

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+59]
	test	edx, edx
	jne	SHORT $LN1@ProcessReq
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	shl	ecx, 5
	mov	edx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[ecx+28]
	and	edx, 536870912				; 20000000H
	jne	SHORT $LN1@ProcessReq
	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	esi, edx
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	ecx, BYTE PTR [eax+17]
	cmp	esi, ecx
	jge	SHORT $LN1@ProcessReq

; 1306 : 		missionsToFill++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], eax
$LN1@ProcessReq:

; 1307 : 
; 1308 : #ifdef KEV_ADEBUG
; 1309 : 	MonoPrint("* Accepted %s request for team %d at %d,%d - tot %f - pri %d\n", MissStr[mis->mission], mis->who, mis->tx,mis->ty,mis->tot,mis->priority);
; 1310 : #endif
; 1311 : 	flags |= ATM_NEW_REQUESTS;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+148]
	or	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+148], ax
$LN58@ProcessReq:

; 1312 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z$0:
	lea	ecx, DWORD PTR _packit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessRequest@AirTaskingManagerClass@@QAEXPAVMissionRequestClass@@@Z ENDP ; AirTaskingManagerClass::ProcessRequest
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -124						; size = 8
$T3 = -116						; size = 8
$T4 = -108						; size = 4
_t$ = -104						; size = 4
_speed$ = -100						; size = 4
_bp$ = -96						; size = 4
_pack$5 = -92						; size = 4
tv301 = -88						; size = 4
$T6 = -84						; size = 4
_vuTarget$ = -80					; size = 4
tv268 = -76						; size = 4
_pp$ = -72						; size = 4
_bs$ = -68						; size = 4
_score$ = -64						; size = 4
_minutes_past_tot$ = -60				; size = 4
_d$ = -56						; size = 4
_ls$ = -52						; size = 4
_tr$ = -48						; size = 4
_hs$ = -44						; size = 4
_this$ = -40						; size = 4
_lp$ = -36						; size = 4
_divert$ = -32						; size = 4
_bm$ = -28						; size = 4
_mis$ = -24						; size = 4
_x$ = -20						; size = 2
_y$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z PROC ; AirTaskingManagerClass::BuildSpecificDivert
; _this$ = ecx

; 990  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 	ListNode			lp,pp,bp=NULL;

	mov	DWORD PTR _bp$[ebp], 0

; 992  : 	MissionRequest		mis,bm=NULL;

	mov	DWORD PTR _bm$[ebp], 0

; 993  : 	int					minutes_past_tot,score,bs=99999,ls,hs,tr;

	mov	DWORD PTR _bs$[ebp], 99999		; 0001869fH

; 994  : 	float				d,speed;
; 995  : 	CampaignTime		t;
; 996  : 	GridIndex			x,y;
; 997  : 	FalconDivertMessage	*divert;
; 998  : 	VuTargetEntity		*vuTarget;
; 999  : 
; 1000 : 	// Don't do this if we're not active, or not owned by this machine
; 1001 : 	if (!(TeamInfo[owner]->flags & TEAM_ACTIVE) || !IsLocal())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	movsx	eax, WORD PTR [edx+350]
	and	eax, 1
	je	SHORT $LN19@BuildSpeci
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN20@BuildSpeci
$LN19@BuildSpeci:

; 1002 : 		return 0;

	xor	eax, eax
	jmp	$LN21@BuildSpeci
$LN20@BuildSpeci:

; 1003 : 
; 1004 : 	flight->GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1005 : 	speed = (float)flight->GetCombatSpeed();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetCombatSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCombatSpeed
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _speed$[ebp], xmm0

; 1006 : 
; 1007 : 	// Now traverse my request list
; 1008 : 	lp = requestList->GetLastElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+180]
	call	?GetLastElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetLastElement
	mov	DWORD PTR _lp$[ebp], eax
$LN31@BuildSpeci:

; 1009 : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	$LN17@BuildSpeci

; 1010 : 	{
; 1011 : 		mis = (MissionRequest) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _mis$[ebp], eax

; 1012 : 		pp = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR _pp$[ebp], edx

; 1013 : 		lp = pp->GetPrev();

	mov	ecx, DWORD PTR _pp$[ebp]
	call	?GetPrev@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetPrev
	mov	DWORD PTR _lp$[ebp], eax

; 1014 : 
; 1015 : 		if (!mis)

	cmp	DWORD PTR _mis$[ebp], 0
	jne	SHORT $LN16@BuildSpeci

; 1016 : 			continue;

	jmp	SHORT $LN31@BuildSpeci
$LN16@BuildSpeci:

; 1017 : 
; 1018 : 		// Check vs roll
; 1019 : 		if (flight->GetUnitCurrentRole() != MissionData[mis->mission].skill)

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[edx+2]
	cmp	eax, ecx
	je	SHORT $LN15@BuildSpeci

; 1020 : 			continue;

	jmp	SHORT $LN31@BuildSpeci
$LN15@BuildSpeci:

; 1021 : 
; 1022 : 		// Check viability of this target
; 1023 : 		d = Distance(x,y,mis->tx,mis->ty);

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, WORD PTR [edx+42]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+40]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1024 : 		t = TimeToArrive(d,speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?TimeToArrive@@YAKMM@Z			; TimeToArrive
	add	esp, 8
	mov	DWORD PTR _t$[ebp], eax

; 1025 : 		minutes_past_tot = (int)(((Camp_GetCurrentTime() + t) - mis->tot)/CampaignMinutes);

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	add	eax, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _mis$[ebp]
	sub	eax, DWORD PTR [edx+36]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _minutes_past_tot$[ebp], eax

; 1026 : 		if (minutes_past_tot > 0 && (mis->tot_type == TYPE_EQ || mis->tot_type == TYPE_LT))

	cmp	DWORD PTR _minutes_past_tot$[ebp], 0
	jle	SHORT $LN14@BuildSpeci
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	cmp	eax, 3
	je	SHORT $LN13@BuildSpeci
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+58]
	cmp	edx, 1
	jne	SHORT $LN14@BuildSpeci
$LN13@BuildSpeci:

; 1027 : 			continue;

	jmp	$LN31@BuildSpeci
$LN14@BuildSpeci:

; 1028 : 
; 1029 : 		ls = ScoreThreatFast (mis->tx, mis->ty, GetAltitudeLevel(MissionData[mis->mission].minalt*100), mis->who);

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movsx	ecx, WORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+8]
	imul	ecx, 100				; 00000064H
	push	ecx
	call	?GetAltitudeLevel@@YAHH@Z		; GetAltitudeLevel
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, WORD PTR [edx+42]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+40]
	push	edx
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ls$[ebp], eax

; 1030 : 		hs = ScoreThreatFast (mis->tx, mis->ty, GetAltitudeLevel(MissionData[mis->mission].maxalt*100), mis->who);

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movsx	ecx, WORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+10]
	imul	ecx, 100				; 00000064H
	push	ecx
	call	?GetAltitudeLevel@@YAHH@Z		; GetAltitudeLevel
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, WORD PTR [edx+42]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+40]
	push	edx
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hs$[ebp], eax

; 1031 : 		if (hs > ls)

	mov	eax, DWORD PTR _hs$[ebp]
	cmp	eax, DWORD PTR _ls$[ebp]
	jle	SHORT $LN12@BuildSpeci

; 1032 : 			hs = ls;

	mov	ecx, DWORD PTR _ls$[ebp]
	mov	DWORD PTR _hs$[ebp], ecx
$LN12@BuildSpeci:

; 1033 : 		if (MissionData[mis->mission].flags & AMIS_HIGHTHREAT)

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	mov	ecx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+28]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN11@BuildSpeci

; 1034 : 			tr = MAX_FLYMISSION_HIGHTHREAT;

	movsx	edx, WORD PTR ?MAX_FLYMISSION_HIGHTHREAT@@3FA ; MAX_FLYMISSION_HIGHTHREAT
	mov	DWORD PTR _tr$[ebp], edx
	jmp	SHORT $LN8@BuildSpeci
$LN11@BuildSpeci:

; 1035 : 		else if (MissionData[mis->mission].flags & AMIS_NOTHREAT)

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	shl	ecx, 5
	mov	edx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[ecx+28]
	and	edx, 8192				; 00002000H
	je	SHORT $LN9@BuildSpeci

; 1036 : 			tr = MAX_FLYMISSION_NOTHREAT;

	movsx	eax, WORD PTR ?MAX_FLYMISSION_NOTHREAT@@3FA ; MAX_FLYMISSION_NOTHREAT
	mov	DWORD PTR _tr$[ebp], eax

; 1037 : 		else

	jmp	SHORT $LN8@BuildSpeci
$LN9@BuildSpeci:

; 1038 : 			tr = MAX_FLYMISSION_THREAT;

	movsx	ecx, WORD PTR ?MAX_FLYMISSION_THREAT@@3FA ; MAX_FLYMISSION_THREAT
	mov	DWORD PTR _tr$[ebp], ecx
$LN8@BuildSpeci:

; 1039 : 		if (hs > tr)

	mov	edx, DWORD PTR _hs$[ebp]
	cmp	edx, DWORD PTR _tr$[ebp]
	jle	SHORT $LN7@BuildSpeci

; 1040 : 			continue;

	jmp	$LN31@BuildSpeci
$LN7@BuildSpeci:

; 1041 : 
; 1042 : 		score = FloatToInt32(d) + abs(minutes_past_tot);

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _minutes_past_tot$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _score$[ebp], esi

; 1043 : 		if (score < bs)

	mov	ecx, DWORD PTR _score$[ebp]
	cmp	ecx, DWORD PTR _bs$[ebp]
	jge	SHORT $LN6@BuildSpeci

; 1044 : 		{
; 1045 : 			bs = score;

	mov	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR _bs$[ebp], edx

; 1046 : 			bm = mis;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	DWORD PTR _bm$[ebp], eax

; 1047 : 			bp = pp;

	mov	ecx, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _bp$[ebp], ecx
$LN6@BuildSpeci:

; 1048 : 		}
; 1049 : 	}

	jmp	$LN31@BuildSpeci
$LN17@BuildSpeci:

; 1050 : 
; 1051 : 	if (bm || flight->IsSetFalcFlag(FEC_HASPLAYERS))

	cmp	DWORD PTR _bm$[ebp], 0
	jne	SHORT $LN4@BuildSpeci
	push	4
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	$LN5@BuildSpeci
$LN4@BuildSpeci:

; 1052 : 	{
; 1053 : 		// Send the divert message (or divert denied if !bm && flight-Player())
; 1054 : 		if (flight->IsSetFalcFlag(FEC_HASPLAYERS))

	push	4
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN3@BuildSpeci

; 1055 : 			vuTarget = FalconLocalGame;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN23@BuildSpeci
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv268[ebp], eax
	jmp	SHORT $LN24@BuildSpeci
$LN23@BuildSpeci:
	mov	DWORD PTR tv268[ebp], 0
$LN24@BuildSpeci:
	mov	eax, DWORD PTR tv268[ebp]
	mov	DWORD PTR _vuTarget$[ebp], eax

; 1056 : 		else

	jmp	SHORT $LN2@BuildSpeci
$LN3@BuildSpeci:

; 1057 : 			vuTarget = (VuTargetEntity*) vuDatabase->Find(flight->OwnerId());

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _vuTarget$[ebp], eax
$LN2@BuildSpeci:

; 1058 : 		divert = new FalconDivertMessage(flight->Id(), vuTarget);

	push	78					; 0000004eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN25@BuildSpeci
	push	1
	mov	ecx, DWORD PTR _vuTarget$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0FalconDivertMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDivertMessage::FalconDivertMessage
	mov	DWORD PTR tv301[ebp], eax
	jmp	SHORT $LN26@BuildSpeci
$LN25@BuildSpeci:
	mov	DWORD PTR tv301[ebp], 0
$LN26@BuildSpeci:
	mov	eax, DWORD PTR tv301[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _divert$[ebp], ecx

; 1059 : 		if (bm)

	cmp	DWORD PTR _bm$[ebp], 0
	je	$LN1@BuildSpeci

; 1060 : 		{
; 1061 : 			// Update the package statistics
; 1062 : 			Package		pack = (Package)flight->GetUnitParent();

	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax+1008]
	call	edx
	mov	DWORD PTR _pack$5[ebp], eax

; 1063 : 			pack->GetMissionRequest()->tot = bm->tot;

	mov	ecx, DWORD PTR _pack$5[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	ecx, DWORD PTR _bm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 1064 : 			pack->SetUnitDestination(bm->tx,bm->ty);

	mov	eax, DWORD PTR _bm$[ebp]
	movzx	ecx, WORD PTR [eax+42]
	push	ecx
	mov	edx, DWORD PTR _bm$[ebp]
	movzx	eax, WORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _pack$5[ebp]
	call	?SetUnitDestination@UnitClass@@QAEXFF@Z	; UnitClass::SetUnitDestination

; 1065 : 
; 1066 : 			divert->dataBlock.tot = bm->tot;

	mov	ecx, DWORD PTR _divert$[ebp]
	mov	edx, DWORD PTR _bm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+48], eax

; 1067 : 			divert->dataBlock.flags = bm->flags;

	mov	ecx, DWORD PTR _divert$[ebp]
	mov	edx, DWORD PTR _bm$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+52], eax

; 1068 : 			divert->dataBlock.targetID = bm->targetID;

	mov	ecx, DWORD PTR _bm$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _divert$[ebp]
	mov	DWORD PTR [ecx+56], edx
	mov	DWORD PTR [ecx+60], eax

; 1069 : 			divert->dataBlock.requesterID = bm->requesterID;

	mov	edx, DWORD PTR _bm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _divert$[ebp]
	mov	DWORD PTR [edx+64], eax
	mov	DWORD PTR [edx+68], ecx

; 1070 : 			divert->dataBlock.tx = bm->tx;

	mov	eax, DWORD PTR _divert$[ebp]
	mov	ecx, DWORD PTR _bm$[ebp]
	mov	dx, WORD PTR [ecx+40]
	mov	WORD PTR [eax+72], dx

; 1071 : 			divert->dataBlock.ty = bm->ty;

	mov	eax, DWORD PTR _divert$[ebp]
	mov	ecx, DWORD PTR _bm$[ebp]
	mov	dx, WORD PTR [ecx+42]
	mov	WORD PTR [eax+74], dx

; 1072 : 			divert->dataBlock.mission = bm->mission;

	mov	eax, DWORD PTR _divert$[ebp]
	mov	ecx, DWORD PTR _bm$[ebp]
	mov	dl, BYTE PTR [ecx+60]
	mov	BYTE PTR [eax+76], dl

; 1073 : 			divert->dataBlock.priority = (uchar)bm->priority;

	mov	eax, DWORD PTR _divert$[ebp]
	mov	ecx, DWORD PTR _bm$[ebp]
	mov	dl, BYTE PTR [ecx+56]
	mov	BYTE PTR [eax+77], dl
$LN1@BuildSpeci:

; 1074 : 		}
; 1075 : 		FalconSendMessage(divert,TRUE);

	push	1
	mov	eax, DWORD PTR _divert$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1076 : 
; 1077 : 		// Get rid of this request
; 1078 : 		CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 1079 : 		requestList->Remove(bp);

	mov	ecx, DWORD PTR _bp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 1080 : 		CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 1081 : 		return PRET_SUCCESS;

	mov	eax, 3
	jmp	SHORT $LN21@BuildSpeci
$LN5@BuildSpeci:

; 1082 : 	}
; 1083 : 
; 1084 : 	return PRET_CANCELED;

	mov	eax, 5
$LN21@BuildSpeci:

; 1085 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z$0:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildSpecificDivert@AirTaskingManagerClass@@QAEHPAVFlightClass@@@Z ENDP ; AirTaskingManagerClass::BuildSpecificDivert
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -76						; size = 8
_this$ = -68						; size = 4
$T3 = -64						; size = 4
_time$ = -60						; size = 4
_aa$4 = -56						; size = 4
tv281 = -52						; size = 4
$T5 = -48						; size = 4
tv270 = -44						; size = 4
_misflags$ = -40					; size = 4
_ls$ = -36						; size = 4
_tr$ = -32						; size = 4
_hs$ = -28						; size = 4
_flight$ = -24						; size = 4
_divert$ = -20						; size = 4
_target$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_mis$ = 8						; size = 4
?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z PROC ; AirTaskingManagerClass::BuildDivert
; _this$ = ecx

; 911  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 912  : 	int				time,ls,hs,tr;
; 913  : 	long			misflags = MissionData[mis->mission].flags;

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	shl	ecx, 5
	mov	edx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[ecx+28]
	mov	DWORD PTR _misflags$[ebp], edx

; 914  : 	Flight			flight;
; 915  : 	//	Package			pack;
; 916  : 	FalconDivertMessage	*divert;
; 917  : 
; 918  : 	// Check time frame (NOTE: tot is request time for immediate missions, so we just want to check vs timeout)
; 919  : 	time = (Camp_GetCurrentTime() - mis->tot)/CampaignMinutes;

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	ecx, DWORD PTR _mis$[ebp]
	sub	eax, DWORD PTR [ecx+36]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _time$[ebp], eax

; 920  : 	if (time > MissionData[mis->mission].max_time)

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+20]
	cmp	DWORD PTR _time$[ebp], ecx
	jle	SHORT $LN15@BuildDiver

; 921  : 		return PRET_TIMEOUT;

	mov	eax, 9
	jmp	$LN16@BuildDiver
$LN15@BuildDiver:

; 922  : 
; 923  : 	// Check target viability (SAM coverage at target)
; 924  : 	ls = ScoreThreatFast (mis->tx, mis->ty, GetAltitudeLevel(MissionData[mis->mission].minalt*100), mis->who);

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movsx	eax, WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+8]
	imul	eax, 100				; 00000064H
	push	eax
	call	?GetAltitudeLevel@@YAHH@Z		; GetAltitudeLevel
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+42]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, WORD PTR [eax+40]
	push	ecx
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ls$[ebp], eax

; 925  : 	hs = ScoreThreatFast (mis->tx, mis->ty, GetAltitudeLevel(MissionData[mis->mission].maxalt*100), mis->who);

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movsx	eax, WORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+10]
	imul	eax, 100				; 00000064H
	push	eax
	call	?GetAltitudeLevel@@YAHH@Z		; GetAltitudeLevel
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+42]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, WORD PTR [eax+40]
	push	ecx
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hs$[ebp], eax

; 926  : 	if (hs > ls)

	mov	edx, DWORD PTR _hs$[ebp]
	cmp	edx, DWORD PTR _ls$[ebp]
	jle	SHORT $LN14@BuildDiver

; 927  : 		hs = ls;

	mov	eax, DWORD PTR _ls$[ebp]
	mov	DWORD PTR _hs$[ebp], eax
$LN14@BuildDiver:

; 928  : 	if (misflags & AMIS_HIGHTHREAT)

	mov	ecx, DWORD PTR _misflags$[ebp]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN13@BuildDiver

; 929  : 		tr = MAX_FLYMISSION_HIGHTHREAT;

	movsx	edx, WORD PTR ?MAX_FLYMISSION_HIGHTHREAT@@3FA ; MAX_FLYMISSION_HIGHTHREAT
	mov	DWORD PTR _tr$[ebp], edx
	jmp	SHORT $LN12@BuildDiver
$LN13@BuildDiver:

; 930  : 	else if (misflags & AMIS_NOTHREAT)

	mov	eax, DWORD PTR _misflags$[ebp]
	and	eax, 8192				; 00002000H
	je	SHORT $LN11@BuildDiver

; 931  : 		tr = MAX_FLYMISSION_NOTHREAT;

	movsx	ecx, WORD PTR ?MAX_FLYMISSION_NOTHREAT@@3FA ; MAX_FLYMISSION_NOTHREAT
	mov	DWORD PTR _tr$[ebp], ecx

; 932  : 	else

	jmp	SHORT $LN12@BuildDiver
$LN11@BuildDiver:

; 933  : 		tr = MAX_FLYMISSION_THREAT;

	movsx	edx, WORD PTR ?MAX_FLYMISSION_THREAT@@3FA ; MAX_FLYMISSION_THREAT
	mov	DWORD PTR _tr$[ebp], edx
$LN12@BuildDiver:

; 934  : 	if (hs > tr)

	mov	eax, DWORD PTR _hs$[ebp]
	cmp	eax, DWORD PTR _tr$[ebp]
	jle	SHORT $LN9@BuildDiver

; 935  : 		return PRET_CANCELED;

	mov	eax, 5
	jmp	$LN16@BuildDiver
$LN9@BuildDiver:

; 936  : 
; 937  : 	// Attempt to find an available flight
; 938  : 	mis->caps |= MissionData[mis->mission].caps;

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	movzx	eax, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[edx+24]
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+48]
	or	edx, eax
	mov	eax, DWORD PTR _mis$[ebp]
	mov	WORD PTR [eax+48], dx

; 939  : 	mis->target_num = 255;

	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _mis$[ebp]
	mov	WORD PTR [edx+50], cx

; 940  : 	if (!mis->aircraft)

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+61]
	test	ecx, ecx
	jne	SHORT $LN8@BuildDiver

; 941  : 		mis->aircraft = MissionData[mis->mission].str;

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	dl, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+18]
	mov	BYTE PTR [ecx+61], dl
$LN8@BuildDiver:

; 942  : 	flight = TeamInfo[mis->who]->atm->FindBestAirFlight(mis);		// We divert a current flight

	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+876]
	call	?FindBestAirFlight@AirTaskingManagerClass@@QAEPAVFlightClass@@PAVMissionRequestClass@@@Z ; AirTaskingManagerClass::FindBestAirFlight
	mov	DWORD PTR _flight$[ebp], eax

; 943  : 	if (!flight)

	cmp	DWORD PTR _flight$[ebp], 0
	jne	$LN7@BuildDiver

; 944  : 	{
; 945  : 		CampEntity	target = (CampEntity)vuDatabase->Find(mis->targetID);

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$6[ebp], eax

; 946  : 		if (target && (target->IsPackage() || target->IsBrigade()))

	cmp	DWORD PTR _target$6[ebp], 0
	je	SHORT $LN6@BuildDiver
	mov	ecx, DWORD PTR _target$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$6[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	test	eax, eax
	jne	SHORT $LN5@BuildDiver
	mov	ecx, DWORD PTR _target$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$6[ebp]
	mov	eax, DWORD PTR [edx+244]
	call	eax
	test	eax, eax
	je	SHORT $LN6@BuildDiver
$LN5@BuildDiver:

; 947  : 			target = ((Unit)target)->GetFirstUnitElement();

	mov	ecx, DWORD PTR _target$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$6[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _target$6[ebp], eax
$LN6@BuildDiver:

; 948  : 		if (!target || (target->IsUnit() && ((Unit)target)->Broken()))

	cmp	DWORD PTR _target$6[ebp], 0
	je	SHORT $LN3@BuildDiver
	mov	ecx, DWORD PTR _target$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$6[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN4@BuildDiver
	mov	ecx, DWORD PTR _target$6[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	je	SHORT $LN4@BuildDiver
$LN3@BuildDiver:

; 949  : 			return PRET_CANCELED;

	mov	eax, 5
	jmp	$LN16@BuildDiver
$LN4@BuildDiver:

; 950  : 		return PRET_DELAYED;										// Check again later

	mov	eax, 2
	jmp	$LN16@BuildDiver
$LN7@BuildDiver:

; 951  : 	}
; 952  : 	flight->SetDiverted(1);										// Keep us from getting picked again

	push	1
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?SetDiverted@UnitClass@@QAEXH@Z		; UnitClass::SetDiverted

; 953  : 
; 954  : 	// Update the package statistics
; 955  : 	//	pack = (Package)flight->GetUnitParent();
; 956  : 	//	pack->GetMissionRequest()->tot = mis->tot;
; 957  : 	//	pack->GetMissionRequest()->mission = mis->mission;
; 958  : 	//	pack->GetMissionRequest()->targetID = mis->targetID;
; 959  : 	//	pack->SetUnitDestination(mis->tx,mis->ty);
; 960  : 
; 961  : 	// Send the divert message to everyone (for radio messages and scramble warning)
; 962  : 	divert = new FalconDivertMessage(flight->Id(), FalconLocalGame);

	push	78					; 0000004eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN20@BuildDiver
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@BuildDiver
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv270[ebp], eax
	jmp	SHORT $LN19@BuildDiver
$LN18@BuildDiver:
	mov	DWORD PTR tv270[ebp], 0
$LN19@BuildDiver:
	push	1
	mov	edx, DWORD PTR tv270[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconDivertMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDivertMessage::FalconDivertMessage
	mov	DWORD PTR tv281[ebp], eax
	jmp	SHORT $LN21@BuildDiver
$LN20@BuildDiver:
	mov	DWORD PTR tv281[ebp], 0
$LN21@BuildDiver:
	mov	eax, DWORD PTR tv281[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _divert$[ebp], ecx

; 963  : 	divert->dataBlock.tot = mis->tot;

	mov	edx, DWORD PTR _divert$[ebp]
	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+48], ecx

; 964  : 	divert->dataBlock.flags = mis->flags;

	mov	edx, DWORD PTR _divert$[ebp]
	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+52], ecx

; 965  : 	divert->dataBlock.targetID = mis->targetID;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _divert$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	DWORD PTR [edx+60], ecx

; 966  : 	divert->dataBlock.requesterID = mis->requesterID;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _divert$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	DWORD PTR [eax+68], edx

; 967  : 	divert->dataBlock.tx = mis->tx;

	mov	ecx, DWORD PTR _divert$[ebp]
	mov	edx, DWORD PTR _mis$[ebp]
	mov	ax, WORD PTR [edx+40]
	mov	WORD PTR [ecx+72], ax

; 968  : 	divert->dataBlock.ty = mis->ty;

	mov	ecx, DWORD PTR _divert$[ebp]
	mov	edx, DWORD PTR _mis$[ebp]
	mov	ax, WORD PTR [edx+42]
	mov	WORD PTR [ecx+74], ax

; 969  : 	divert->dataBlock.mission = mis->mission;

	mov	ecx, DWORD PTR _divert$[ebp]
	mov	edx, DWORD PTR _mis$[ebp]
	mov	al, BYTE PTR [edx+60]
	mov	BYTE PTR [ecx+76], al

; 970  : 	divert->dataBlock.priority = (uchar)mis->priority;

	mov	ecx, DWORD PTR _divert$[ebp]
	mov	edx, DWORD PTR _mis$[ebp]
	mov	al, BYTE PTR [edx+56]
	mov	BYTE PTR [ecx+77], al

; 971  : 	FalconSendMessage(divert,TRUE);

	push	1
	mov	ecx, DWORD PTR _divert$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 972  : 
; 973  : 	if (mis->mission == AMIS_INTERCEPT)

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	cmp	eax, 9
	jne	SHORT $LN2@BuildDiver

; 974  : 	{
; 975  : 		// If we've not got enough strength for this intercept, we'll allow it to stay on
; 976  : 		// our request queue and task more aircraft versus it.
; 977  : 		int aa = GetUnitScore(flight,Air);

	push	5
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z ; GetUnitScore
	add	esp, 8
	mov	DWORD PTR _aa$4[ebp], eax

; 978  : 		if (aa*2 < mis->match_strength)

	mov	edx, DWORD PTR _aa$4[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+54]
	cmp	edx, ecx
	jge	SHORT $LN2@BuildDiver

; 979  : 		{
; 980  : 			mis->match_strength -= aa;

	mov	edx, DWORD PTR _mis$[ebp]
	movsx	eax, WORD PTR [edx+54]
	sub	eax, DWORD PTR _aa$4[ebp]
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	WORD PTR [ecx+54], ax

; 981  : 			return PRET_NO_ASSETS;		// we're faking failure so it'll stay on the queue.

	mov	eax, 1
	jmp	SHORT $LN16@BuildDiver
$LN2@BuildDiver:

; 982  : 		}
; 983  : 	}
; 984  : 
; 985  : 	return PRET_SUCCESS;

	mov	eax, 3
$LN16@BuildDiver:

; 986  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z ENDP ; AirTaskingManagerClass::BuildDivert
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_squadit$2 = -72					; size = 12
$T3 = -60						; size = 8
$T4 = -52						; size = 4
_event$5 = -48						; size = 4
tv275 = -44						; size = 4
$T6 = -40						; size = 4
tv267 = -36						; size = 4
_this$ = -32						; size = 4
_sq$ = -28						; size = 4
_timeleft$ = -24					; size = 4
_e$7 = -20						; size = 4
_j$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pc$ = 8						; size = 4
_mis$ = 12						; size = 4
?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z PROC ; AirTaskingManagerClass::BuildPackage
; _this$ = ecx

; 812  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 813  : 	int				timeleft,j;
; 814  : 	Squadron		sq;	
; 815  : 
; 816  : 	// Check time frame
; 817  : 	if (mis->tot < TheCampaign.CurrentTime)

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	jae	SHORT $LN26@BuildPacka

; 818  : 		timeleft = (-1 * (TheCampaign.CurrentTime - mis->tot)) / CampaignMinutes;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	eax, DWORD PTR [edx+36]
	imul	eax, -1
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _timeleft$[ebp], eax

; 819  : 	else

	jmp	SHORT $LN25@BuildPacka
$LN26@BuildPacka:

; 820  : 		timeleft = (mis->tot - TheCampaign.CurrentTime) / CampaignMinutes;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+36]
	sub	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _timeleft$[ebp], eax
$LN25@BuildPacka:

; 821  : 
; 822  : 	if (timeleft < MissionData[mis->mission].min_time)

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+19]
	cmp	DWORD PTR _timeleft$[ebp], ecx
	jge	SHORT $LN24@BuildPacka

; 823  : 	{
; 824  : 		if (timeleft < 0 || mis->tot_type == TYPE_EQ || mis->tot_type == TYPE_LT  || (mis->delayed > 8))

	cmp	DWORD PTR _timeleft$[ebp], 0
	jl	SHORT $LN22@BuildPacka
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	cmp	eax, 3
	je	SHORT $LN22@BuildPacka
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+58]
	cmp	edx, 1
	je	SHORT $LN22@BuildPacka
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	cmp	ecx, 8
	jle	SHORT $LN23@BuildPacka
$LN22@BuildPacka:

; 825  : 			return PRET_TIMEOUT;				// timed out, get rid of it

	mov	eax, 9
	jmp	$LN27@BuildPacka
$LN23@BuildPacka:

; 826  : 		// delay it's tot by a half hour
; 827  : 		mis->tot += 30 * CampaignMinutes;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+36]
	add	eax, 1800000				; 001b7740H
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 828  : 		mis->delayed++;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	al, BYTE PTR [edx+64]
	add	al, 1
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [ecx+64], al

; 829  : 		return PRET_DELAYED;

	mov	eax, 2
	jmp	$LN27@BuildPacka
$LN24@BuildPacka:

; 830  : 	}
; 831  : 	//	if (mis->tot_type == TYPE_EQ)
; 832  : 	//		mis->flags |= REQF_USERESERVES;
; 833  : 
; 834  : 	// Reset assigned stats for this package (KCK NOTE: this is a minor gain, can probably axe this if need be)
; 835  : 	{
; 836  : 		VuListIterator	squadit(squadronList);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	push	eax
	lea	ecx, DWORD PTR _squadit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 837  : 		sq = (Squadron) squadit.GetFirst();

	lea	ecx, DWORD PTR _squadit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _sq$[ebp], eax
$LN21@BuildPacka:

; 838  : 		while (sq)

	cmp	DWORD PTR _sq$[ebp], 0
	je	SHORT $LN20@BuildPacka

; 839  : 		{
; 840  : 			sq->SetAssigned (0);

	push	0
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?SetAssigned@SquadronClass@@QAEXE@Z	; SquadronClass::SetAssigned

; 841  : 			sq = (Squadron) squadit.GetNext();

	lea	ecx, DWORD PTR _squadit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _sq$[ebp], eax

; 842  : 		}

	jmp	SHORT $LN21@BuildPacka
$LN20@BuildPacka:

; 843  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _squadit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 844  : 
; 845  : 	// Get rid of unwanted mission requests
; 846  : 	if (!*pc)

	mov	ecx, DWORD PTR _pc$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN19@BuildPacka

; 847  : 	{
; 848  : 		// Special case of new unit - We don't want to insert it.
; 849  : 		j = GetClassID(DOMAIN_AIR,CLASS_UNIT,TYPE_PACKAGE,0,0,0,0,0) + VU_LAST_ENTITY_TYPE;

	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	push	6
	push	2
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	add	eax, 100				; 00000064H
	mov	DWORD PTR _j$[ebp], eax

; 850  : 		*pc = NewPackage(j);

	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	call	?NewPackage@@YAPAVPackageClass@@H@Z	; NewPackage
	add	esp, 4
	mov	ecx, DWORD PTR _pc$[ebp]
	mov	DWORD PTR [ecx], eax

; 851  : 		(*pc)->BuildElements();

	mov	edx, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?BuildElements@UnitClass@@QAEXXZ	; UnitClass::BuildElements

; 852  : 		(*pc)->SetOwner(owner);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	push	ecx
	mov	edx, DWORD PTR _pc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pc$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+320]
	call	eax

; 853  : 		PackInserted = 0;

	mov	DWORD PTR ?PackInserted@@3HA, 0		; PackInserted
$LN19@BuildPacka:

; 854  : 	}
; 855  : 	if (!*pc)

	mov	ecx, DWORD PTR _pc$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN18@BuildPacka

; 856  : 		return PRET_NO_ASSETS;					// This would be a VERY bad thing. Probably out of memory

	mov	eax, 1
	jmp	$LN27@BuildPacka
$LN18@BuildPacka:

; 857  : 	//	MonoPrint("Building Mission Group %d (%d) at %d, %d\n",*pc->GetUnitID(),mis->mission,mis->tx,mis->ty);
; 858  : 	j = (*pc)->BuildPackage(mis,NULL);

	push	0
	mov	edx, DWORD PTR _mis$[ebp]
	push	edx
	mov	eax, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pc$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+800]
	call	edx
	mov	DWORD PTR _j$[ebp], eax

; 859  : 	if (j == PRET_SUCCESS)

	cmp	DWORD PTR _j$[ebp], 3
	jne	$LN17@BuildPacka

; 860  : 	{
; 861  : 		CampEntity		e;
; 862  : 		mis->flags |= REQF_MET;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	or	ecx, 8
	mov	edx, DWORD PTR _mis$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 863  : 		// Return receipt
; 864  : 		if (mis->flags & REQF_NEEDRESPONSE)

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 4
	je	SHORT $LN16@BuildPacka

; 865  : 		{
; 866  : 			e = (CampEntity) vuDatabase->Find(mis->requesterID);

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$7[ebp], eax

; 867  : #ifdef KEV_ADEBUG
; 868  : 			if (!e)
; 869  : 				MonoPrint("Unknown Requester\n");
; 870  : #endif
; 871  : 			if (e && e->IsUnit())

	cmp	DWORD PTR _e$7[ebp], 0
	je	SHORT $LN16@BuildPacka
	mov	edx, DWORD PTR _e$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$7[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	SHORT $LN16@BuildPacka

; 872  : 				((Unit)e)->SendUnitMessage((*pc)->GetMainFlightID(),FalconUnitMessage::unitRequestMet,mis->mission,mis->who,PRET_SUCCESS);	

	push	3
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	cx, BYTE PTR [eax+32]
	movzx	edx, cx
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	cx, BYTE PTR [eax+60]
	movzx	edx, cx
	push	edx
	push	3
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMainFlightID@PackageClass@@QAE?AVVU_ID@@XZ ; PackageClass::GetMainFlightID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _e$7[ebp]
	call	?SendUnitMessage@UnitClass@@QAEXVVU_ID@@FFFF@Z ; UnitClass::SendUnitMessage
$LN16@BuildPacka:

; 873  : 		}
; 874  : 		// Now send a full update on the package
; 875  : 		VuEvent *event = new VuFullUpdateEvent(*pc, FalconLocalGame);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN31@BuildPacka
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN29@BuildPacka
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv267[ebp], eax
	jmp	SHORT $LN30@BuildPacka
$LN29@BuildPacka:
	mov	DWORD PTR tv267[ebp], 0
$LN30@BuildPacka:
	push	0
	mov	edx, DWORD PTR tv267[ebp]
	push	edx
	mov	eax, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0VuFullUpdateEvent@@QAE@PAVVuEntity@@PAVVuTargetEntity@@E@Z ; VuFullUpdateEvent::VuFullUpdateEvent
	mov	DWORD PTR tv275[ebp], eax
	jmp	SHORT $LN32@BuildPacka
$LN31@BuildPacka:
	mov	DWORD PTR tv275[ebp], 0
$LN32@BuildPacka:
	mov	edx, DWORD PTR tv275[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _event$5[ebp], eax

; 876  : 		event->RequestReliableTransmit();

	mov	ecx, DWORD PTR _event$5[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 877  : 		VuMessageQueue::PostVuMessage(event);

	mov	ecx, DWORD PTR _event$5[ebp]
	push	ecx
	call	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z ; VuMessageQueue::PostVuMessage
	add	esp, 4

; 878  : 		return PRET_SUCCESS;

	mov	eax, 3
	jmp	$LN27@BuildPacka

; 879  : 	}
; 880  : 	else		// Failed to meet request

	jmp	$LN14@BuildPacka
$LN17@BuildPacka:

; 881  : 	{
; 882  : 		if (j == PRET_ABORTED)

	cmp	DWORD PTR _j$[ebp], 4
	jne	SHORT $LN13@BuildPacka

; 883  : 			return PRET_ABORTED;

	mov	eax, 4
	jmp	$LN27@BuildPacka
	jmp	$LN14@BuildPacka
$LN13@BuildPacka:

; 884  : 		else if (mis->flags & REQF_ONETRY)

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+44]
	and	eax, 256				; 00000100H
	je	SHORT $LN11@BuildPacka

; 885  : 			return PRET_CANCELED;

	mov	eax, 5
	jmp	$LN27@BuildPacka
	jmp	$LN14@BuildPacka
$LN11@BuildPacka:

; 886  : 		else if (j == PRET_DELAYED || j == PRET_NO_ASSETS)

	cmp	DWORD PTR _j$[ebp], 2
	je	SHORT $LN8@BuildPacka
	cmp	DWORD PTR _j$[ebp], 1
	jne	SHORT $LN9@BuildPacka
$LN8@BuildPacka:

; 887  : 		{
; 888  : 			// We've either got no aircraft capible of flying this, or the block is out of takeoff range
; 889  : 			if (mis->max_to < 0)				// Nothing can make it here in time

	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, BYTE PTR [ecx+72]
	test	edx, edx
	jge	SHORT $LN7@BuildPacka

; 890  : 			{
; 891  : 				if (mis->tot_type == TYPE_EQ || mis->tot_type == TYPE_LT  || (mis->delayed > 8))

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+58]
	cmp	ecx, 3
	je	SHORT $LN5@BuildPacka
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	cmp	eax, 1
	je	SHORT $LN5@BuildPacka
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	cmp	edx, 8
	jle	SHORT $LN6@BuildPacka
$LN5@BuildPacka:

; 892  : 					return PRET_TIMEOUT;		// timed out, get rid of it

	mov	eax, 9
	jmp	SHORT $LN27@BuildPacka

; 893  : 				else

	jmp	SHORT $LN4@BuildPacka
$LN6@BuildPacka:

; 894  : 				{
; 895  : 					// delay it's tot by a half hour
; 896  : 					mis->tot += 30 * CampaignMinutes;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1800000				; 001b7740H
	mov	edx, DWORD PTR _mis$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 897  : 					mis->delayed++;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	cl, BYTE PTR [eax+64]
	add	cl, 1
	mov	edx, DWORD PTR _mis$[ebp]
	mov	BYTE PTR [edx+64], cl

; 898  : 					return PRET_DELAYED;

	mov	eax, 2
	jmp	SHORT $LN27@BuildPacka
$LN4@BuildPacka:

; 899  : 				}

	jmp	SHORT $LN3@BuildPacka
$LN7@BuildPacka:

; 900  : 			}
; 901  : 			else if (mis->min_to > 5)		// To early for this mission, wait a while

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, BYTE PTR [eax+71]
	cmp	ecx, 5
	jle	SHORT $LN3@BuildPacka

; 902  : 				return PRET_DELAYED;

	mov	eax, 2
	jmp	SHORT $LN27@BuildPacka
$LN3@BuildPacka:

; 903  : 		}
; 904  : 		else

	jmp	SHORT $LN14@BuildPacka
$LN9@BuildPacka:

; 905  : 			return PRET_CANCELED;

	mov	eax, 5
	jmp	SHORT $LN27@BuildPacka
$LN14@BuildPacka:

; 906  : 	}
; 907  : 	return PRET_CANCELED;

	mov	eax, 5
$LN27@BuildPacka:

; 908  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z$0:
	lea	ecx, DWORD PTR _squadit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z ENDP ; AirTaskingManagerClass::BuildPackage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
_last$ = -40						; size = 4
tv90 = -36						; size = 4
$T3 = -32						; size = 4
_tmpATM$ = -28						; size = 4
_cur$ = -24						; size = 4
_next$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_event$ = 8						; size = 4
?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC ; AirTaskingManagerClass::Handle
; _this$ = ecx

; 2092 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2093 : 	AirTaskingManagerClass	*tmpATM = (AirTaskingManagerClass*)(event->expandedData_.get());

	mov	ecx, DWORD PTR _event$[ebp]
	add	ecx, 48					; 00000030H
	call	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::get
	mov	DWORD PTR _tmpATM$[ebp], eax

; 2094 : 	ATMAirbaseClass			*cur,*next,*last=NULL;

	mov	DWORD PTR _last$[ebp], 0

; 2095 : 
; 2096 : 	// Copy in new data
; 2097 : 	memcpy(&flags, &tmpATM->flags, sizeof(short));

	push	2
	mov	eax, DWORD PTR _tmpATM$[ebp]
	add	eax, 148				; 00000094H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2098 : 
; 2099 : 	CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 2100 : 
; 2101 : 	// Really the only data we care about is the scheduling data.
; 2102 : 	cur = tmpATM->airbaseList;

	mov	edx, DWORD PTR _tmpATM$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _cur$[ebp], eax

; 2103 : 	airbaseList = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0
$LN4@Handle:

; 2104 : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@Handle

; 2105 : 	{
; 2106 : 		next = new ATMAirbaseClass();

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@Handle
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0ATMAirbaseClass@@QAE@XZ		; ATMAirbaseClass::ATMAirbaseClass
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN8@Handle
$LN7@Handle:
	mov	DWORD PTR tv90[ebp], 0
$LN8@Handle:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 2107 : 		next->id = cur->id;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 2108 : 		memcpy(next->schedule,cur->schedule,sizeof(uchar)*ATM_MAX_CYCLES);

	push	32					; 00000020H
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 8
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2109 : 		if (!airbaseList)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+196], 0
	jne	SHORT $LN2@Handle

; 2110 : 			airbaseList = next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+196], eax

; 2111 : 		else

	jmp	SHORT $LN1@Handle
$LN2@Handle:

; 2112 : 			last->next = next;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx+44], edx
$LN1@Handle:

; 2113 : 		last = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _last$[ebp], eax

; 2114 : 		cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _cur$[ebp], edx

; 2115 : 	}

	jmp	$LN4@Handle
$LN3@Handle:

; 2116 : 	cycle = tmpATM->cycle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tmpATM$[ebp]
	mov	dl, BYTE PTR [ecx+201]
	mov	BYTE PTR [eax+201], dl

; 2117 : 
; 2118 : 	// Zap old list
; 2119 : 	requestList->Purge();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	call	?Purge@ListClass@@QAEXXZ		; ListClass::Purge

; 2120 : 
; 2121 : 	CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 2122 : 	return (VuEntity::Handle(event));

	mov	ecx, DWORD PTR _event$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@VuEntity@@UAEHPAVVuFullUpdateEvent@@@Z ; VuEntity::Handle

; 2123 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Handle@AirTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP ; AirTaskingManagerClass::Handle
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -204						; size = 8
$T3 = -196						; size = 8
_oid$ = -188						; size = 8
$T4 = -180						; size = 8
$T5 = -172						; size = 8
_squadit$6 = -164					; size = 12
$T7 = -152						; size = 4
_uc$ = -148						; size = 4
tv314 = -144						; size = 4
$T8 = -140						; size = 4
_sortie_rate$ = -136					; size = 4
_avg_rate$ = -132					; size = 4
_total_airbases$ = -128					; size = 4
_last$ = -124						; size = 4
_x$ = -120						; size = 2
_y$ = -116						; size = 2
_sq$ = -112						; size = 4
_j$ = -108						; size = 4
_cur$ = -104						; size = 4
_this$ = -100						; size = 4
_airbase$ = -96						; size = 4
_mis$ = -92						; size = 76
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?DoCalculations@AirTaskingManagerClass@@UAEXXZ PROC	; AirTaskingManagerClass::DoCalculations
; _this$ = ecx

; 613  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoCalculations@AirTaskingManagerClass@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 614  : 	Squadron			sq;
; 615  : 	int					j,total_airbases=0,avg_rate,sortie_rate;

	mov	DWORD PTR _total_airbases$[ebp], 0

; 616  : 	VU_ID				oid;

	lea	ecx, DWORD PTR _oid$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 617  : 	UnitClassDataType*	uc;
; 618  : 	CampEntity			airbase;
; 619  : 	GridIndex			x=0,y=0;

	xor	eax, eax
	mov	WORD PTR _x$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _y$[ebp], cx

; 620  : 	MissionRequestClass	mis;

	lea	ecx, DWORD PTR _mis$[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 621  : 	ATMAirbaseClass		*cur,*last;
; 622  : 
; 623  : 	// Don't do this if we're not active, or not owned by this machine
; 624  : 	if (!(TeamInfo[owner]->flags & TEAM_ACTIVE) || !IsLocal())

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	movsx	edx, WORD PTR [ecx+350]
	and	edx, 1
	je	SHORT $LN40@DoCalculat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN41@DoCalculat
$LN40@DoCalculat:

; 625  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	jmp	$LN42@DoCalculat
$LN41@DoCalculat:

; 626  : 
; 627  : 	if (!squadrons)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+150]
	test	edx, edx
	jne	SHORT $LN39@DoCalculat

; 628  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	jmp	$LN42@DoCalculat
$LN39@DoCalculat:

; 629  : 
; 630  : 	// Zero usage
; 631  : 	cur = airbaseList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _cur$[ebp], ecx
$LN38@DoCalculat:

; 632  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN37@DoCalculat

; 633  : 	{
; 634  : 		cur->usage = 0;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	BYTE PTR [edx+40], 0

; 635  : 		cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _cur$[ebp], ecx

; 636  : 	}

	jmp	SHORT $LN38@DoCalculat
$LN37@DoCalculat:

; 637  : 
; 638  : 	// Statistics manipulation
; 639  : 	avg_rate = 60/MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	mov	eax, 60					; 0000003cH
	cdq
	idiv	ecx
	mov	DWORD PTR _avg_rate$[ebp], eax

; 640  : 	averageCAMissions = ((averageCAMissions * sampleCycles) + currentCAMissions*10*(avg_rate/2)) / (sampleCycles+avg_rate/2);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [edx+154]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+157]
	imul	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [edx+156]
	imul	esi, 10					; 0000000aH
	mov	eax, DWORD PTR _avg_rate$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	esi, eax
	add	ecx, esi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+157]
	mov	eax, DWORD PTR _avg_rate$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, ecx
	cdq
	idiv	esi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+154], ax

; 641  : 	sampleCycles++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+157]
	add	al, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+157], al

; 642  : 	if (sampleCycles >= avg_rate)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+157]
	cmp	eax, DWORD PTR _avg_rate$[ebp]
	jl	SHORT $LN36@DoCalculat

; 643  : 		sampleCycles = avg_rate;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _avg_rate$[ebp]
	mov	BYTE PTR [ecx+157], dl
$LN36@DoCalculat:

; 644  : 	currentCAMissions = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0

; 645  : 
; 646  : 	// Update table statistics, and add new entries	
; 647  : 	{
; 648  : 		VuListIterator		squadit(squadronList);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	lea	ecx, DWORD PTR _squadit$6[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 649  : 		sq = (Squadron) squadit.GetFirst();

	lea	ecx, DWORD PTR _squadit$6[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _sq$[ebp], eax
$LN35@DoCalculat:

; 650  : 		while (sq)

	cmp	DWORD PTR _sq$[ebp], 0
	je	$LN34@DoCalculat

; 651  : 		{
; 652  : 			// Check out the airbase, add to our table.
; 653  : 			if (!(airbase = sq->GetUnitAirbase()))

	mov	eax, DWORD PTR _sq$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _sq$[ebp]
	mov	eax, DWORD PTR [edx+704]
	call	eax
	mov	DWORD PTR _airbase$[ebp], eax
	cmp	DWORD PTR _airbase$[ebp], 0
	jne	$LN33@DoCalculat

; 654  : 			{
; 655  : 				// Check for objective:
; 656  : 				sq->GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 657  : 				airbase = GetObjectiveByXY(x,y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z ; GetObjectiveByXY
	add	esp, 8
	mov	DWORD PTR _airbase$[ebp], eax

; 658  : 				if (!airbase || (airbase->GetType() != TYPE_AIRBASE && airbase->GetType() != TYPE_ARMYBASE)){

	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN31@DoCalculat
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN33@DoCalculat
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 3
	je	SHORT $LN33@DoCalculat
$LN31@DoCalculat:

; 659  : 					// Check for carrier unit
; 660  : 					airbase = FindUnitByXY(AllRealList, x, y, DOMAIN_SEA);

	push	4
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR ?AllRealList@@3PAVVuLinkedList@@A ; AllRealList
	push	eax
	call	?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z ; FindUnitByXY
	add	esp, 16					; 00000010H
	mov	DWORD PTR _airbase$[ebp], eax

; 661  : 					if (!airbase || airbase->GetSType() != STYPE_UNIT_CARRIER){

	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN29@DoCalculat
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 3
	je	SHORT $LN33@DoCalculat
$LN29@DoCalculat:

; 662  : 						// Check for a fixed flag (we're our own airbase)
; 663  : 						if (sq->DontPlan()){

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?DontPlan@UnitClass@@QBEHXZ		; UnitClass::DontPlan
	test	eax, eax
	je	SHORT $LN33@DoCalculat

; 664  : 							airbase = sq;

	mov	edx, DWORD PTR _sq$[ebp]
	mov	DWORD PTR _airbase$[ebp], edx
$LN33@DoCalculat:

; 665  : 						}
; 666  : 					}
; 667  : 				}
; 668  : 			}
; 669  : 	#ifdef DEBUG
; 670  : 			if (airbase == sq && !sq->DontPlan())
; 671  : 			{
; 672  : 				GridIndex		x,y;
; 673  : 				sq->GetLocation(&x,&y);
; 674  : 				MonoPrint("Error: Squadron @ %d,%d not on airbase. Contact Dave Power.\n",x,y);
; 675  : 				airbase = NULL;
; 676  : 			}
; 677  : 	#endif
; 678  : 			if (airbase)

	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN27@DoCalculat

; 679  : 			{
; 680  : 				AddToAirbaseList(airbase);

	mov	eax, DWORD PTR _airbase$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToAirbaseList@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@PAVCampBaseClass@@@Z ; AirTaskingManagerClass::AddToAirbaseList

; 681  : 				sq->SetUnitAirbase(airbase->Id());

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _sq$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _sq$[ebp]
	mov	eax, DWORD PTR [edx+632]
	call	eax

; 682  : 			}
; 683  : 			else

	jmp	SHORT $LN26@DoCalculat
$LN27@DoCalculat:

; 684  : 			{
; 685  : 	#ifdef DEBUG
; 686  : 				MonoPrint("Couldn't find airbase for unit %d at %d,%d- Contact Kevin.\n",sq->GetCampID(),x,y);
; 687  : 	#endif
; 688  : 				sq->SetUnitAirbase(FalconNullId);

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	eax, DWORD PTR _sq$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _sq$[ebp]
	mov	eax, DWORD PTR [edx+632]
	call	eax
$LN26@DoCalculat:

; 689  : 			}
; 690  : 			// Shift usage schedule over by one
; 691  : 			sq->ShiftSchedule();

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?ShiftSchedule@SquadronClass@@QAEXXZ	; SquadronClass::ShiftSchedule

; 692  : 			// Modify ratings
; 693  : 			uc = sq->GetUnitClassData();

	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$[ebp], eax

; 694  : 			for (j=0; j<ARO_OTHER; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN25@DoCalculat
$LN24@DoCalculat:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN25@DoCalculat:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	SHORT $LN23@DoCalculat

; 695  : 			{
; 696  : 				sq->SetRating(j, (sq->GetRating(j)*2 + uc->Scores[j]) / 3);

	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?GetRating@SquadronClass@@QAEEH@Z	; SquadronClass::GetRating
	movzx	eax, al
	mov	ecx, DWORD PTR _uc$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR [ecx+268]
	lea	eax, DWORD PTR [edx+eax*2]
	cdq
	mov	ecx, 3
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?SetRating@SquadronClass@@QAEXHE@Z	; SquadronClass::SetRating

; 697  : 				ShiAssert ( sq->GetRating(j) == 0 || uc->Scores[j] > 0 );
; 698  : 			}

	jmp	SHORT $LN24@DoCalculat
$LN23@DoCalculat:

; 699  : 
; 700  : 			sq = (Squadron) squadit.GetNext();

	lea	ecx, DWORD PTR _squadit$6[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _sq$[ebp], eax

; 701  : 		}

	jmp	$LN35@DoCalculat
$LN34@DoCalculat:

; 702  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _squadit$6[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 703  : 	flags |= ATM_NEW_PLANES;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+148]
	or	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+148], cx

; 704  : 
; 705  : 	// Clean up airbase list and set new sortie rates
; 706  : 	cur = airbaseList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _cur$[ebp], ecx

; 707  : 	last = NULL;

	mov	DWORD PTR _last$[ebp], 0
$LN22@DoCalculat:

; 708  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN21@DoCalculat

; 709  : 	{
; 710  : 		airbase = (CampEntity) vuDatabase->Find(cur->id);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _airbase$[ebp], eax

; 711  : 		if (!cur->usage || !airbase)

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	SHORT $LN19@DoCalculat
	cmp	DWORD PTR _airbase$[ebp], 0
	jne	SHORT $LN20@DoCalculat
$LN19@DoCalculat:

; 712  : 		{
; 713  : 			if (!last)

	cmp	DWORD PTR _last$[ebp], 0
	jne	SHORT $LN18@DoCalculat

; 714  : 				airbaseList = cur->next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+196], eax

; 715  : 			else

	jmp	SHORT $LN17@DoCalculat
$LN18@DoCalculat:

; 716  : 				last->next = cur->next;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
$LN17@DoCalculat:

; 717  : 			delete cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T8[ebp], edx
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN44@DoCalculat
	push	1
	mov	ecx, DWORD PTR $T8[ebp]
	call	??_GATMAirbaseClass@@QAEPAXI@Z
	mov	DWORD PTR tv314[ebp], eax
	jmp	SHORT $LN45@DoCalculat
$LN44@DoCalculat:
	mov	DWORD PTR tv314[ebp], 0
$LN45@DoCalculat:

; 718  : 		}
; 719  : 		else

	jmp	$LN16@DoCalculat
$LN20@DoCalculat:

; 720  : 		{
; 721  : 			total_airbases++;

	mov	eax, DWORD PTR _total_airbases$[ebp]
	add	eax, 1
	mov	DWORD PTR _total_airbases$[ebp], eax

; 722  : 			last = cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _last$[ebp], ecx

; 723  : 			// Shift current sortie values
; 724  : 			for (j=0; j<ATM_MAX_CYCLES-1; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN15@DoCalculat
$LN14@DoCalculat:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN15@DoCalculat:
	cmp	DWORD PTR _j$[ebp], 31			; 0000001fH
	jge	SHORT $LN13@DoCalculat

; 725  : 				cur->schedule[j] = cur->schedule[j+1];

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	dl, BYTE PTR [ecx+9]
	mov	BYTE PTR [eax+8], dl
	jmp	SHORT $LN14@DoCalculat
$LN13@DoCalculat:

; 726  : 			if (airbase->IsObjective())

	mov	eax, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN12@DoCalculat

; 727  : 				sortie_rate = ((Objective)airbase)->GetAdjustedDataRate() * MIN_PLAN_AIR;

	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetAdjustedDataRate@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetAdjustedDataRate
	movsx	ecx, ax
	movsx	edx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	imul	ecx, edx
	mov	DWORD PTR _sortie_rate$[ebp], ecx
	jmp	SHORT $LN11@DoCalculat
$LN12@DoCalculat:

; 728  : 			else if (airbase->IsUnit())

	mov	eax, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN10@DoCalculat

; 729  : 				sortie_rate = 2 * MIN_PLAN_AIR;

	movsx	ecx, WORD PTR ?MIN_PLAN_AIR@@3FA	; MIN_PLAN_AIR
	shl	ecx, 1
	mov	DWORD PTR _sortie_rate$[ebp], ecx

; 730  : 			else

	jmp	SHORT $LN11@DoCalculat
$LN10@DoCalculat:

; 731  : 				sortie_rate = 0;

	mov	DWORD PTR _sortie_rate$[ebp], 0
$LN11@DoCalculat:

; 732  : 			if (sortie_rate)

	cmp	DWORD PTR _sortie_rate$[ebp], 0
	je	$LN8@DoCalculat

; 733  : 			{
; 734  : 				if (airbase->IsObjective())

	mov	edx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	$LN7@DoCalculat

; 735  : 				{
; 736  : 					// Request enemy strike vs this airbase
; 737  : 					mis.requesterID = FalconNullId;

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _mis$[ebp], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _mis$[ebp+4], ecx

; 738  : 					airbase->GetLocation(&mis.tx,&mis.ty);

	lea	edx, DWORD PTR _mis$[ebp+42]
	push	edx
	lea	eax, DWORD PTR _mis$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 739  : 					mis.vs = airbase->GetTeam();

	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _mis$[ebp+33], al

; 740  : 					mis.who = GetEnemyTeam(mis.vs);

	movzx	ecx, BYTE PTR _mis$[ebp+33]
	push	ecx
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	mov	BYTE PTR _mis$[ebp+32], al

; 741  : 					j = 30 + (rand()+airbase->GetCampID())%60;

	call	_rand
	mov	esi, eax
	mov	edx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	add	eax, esi
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	add	edx, 30					; 0000001eH
	mov	DWORD PTR _j$[ebp], edx

; 742  : 					mis.tot = Camp_GetCurrentTime() + j*CampaignMinutes;

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 60000				; 0000ea60H
	add	eax, edx
	mov	DWORD PTR _mis$[ebp+36], eax

; 743  : 					mis.tot_type = TYPE_NE;

	mov	BYTE PTR _mis$[ebp+58], 0

; 744  : 					mis.targetID = airbase->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp+8], ecx
	mov	DWORD PTR _mis$[ebp+12], edx

; 745  : 					mis.target_num = 255;

	mov	eax, 255				; 000000ffH
	mov	WORD PTR _mis$[ebp+50], ax

; 746  : 					mis.mission = AMIS_OCASTRIKE;

	mov	BYTE PTR _mis$[ebp+60], 13		; 0000000dH

; 747  : 					mis.roe_check = ROE_AIR_ATTACK;

	mov	BYTE PTR _mis$[ebp+63], 8

; 748  : 					mis.context = enemyAirPowerAirbase;

	mov	BYTE PTR _mis$[ebp+62], 40		; 00000028H

; 749  : 					mis.priority = cur->usage*30;

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+40]
	imul	edx, 30					; 0000001eH
	mov	WORD PTR _mis$[ebp+56], dx

; 750  : 					mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission
	jmp	$LN8@DoCalculat
$LN7@DoCalculat:

; 751  : 				}
; 752  : 				else if (airbase->GetDomain() == DOMAIN_SEA)

	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 4
	jne	$LN8@DoCalculat

; 753  : 				{
; 754  : 					// Request enemy strike vs this carrier task force
; 755  : 					mis.requesterID = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _mis$[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _mis$[ebp+4], edx

; 756  : 					airbase->GetLocation(&mis.tx,&mis.ty);

	lea	eax, DWORD PTR _mis$[ebp+42]
	push	eax
	lea	ecx, DWORD PTR _mis$[ebp+40]
	push	ecx
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 757  : 					mis.vs = airbase->GetTeam();

	mov	edx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	mov	BYTE PTR _mis$[ebp+33], al

; 758  : 					mis.who = GetEnemyTeam(mis.vs);

	movzx	eax, BYTE PTR _mis$[ebp+33]
	push	eax
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	mov	BYTE PTR _mis$[ebp+32], al

; 759  : 					j = 30 + (rand()+airbase->GetCampID())%60;

	call	_rand
	mov	esi, eax
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	add	esi, ecx
	mov	eax, esi
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	add	edx, 30					; 0000001eH
	mov	DWORD PTR _j$[ebp], edx

; 760  : 					mis.tot = Camp_GetCurrentTime() + j*CampaignMinutes;

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 60000				; 0000ea60H
	add	eax, edx
	mov	DWORD PTR _mis$[ebp+36], eax

; 761  : 					mis.tot_type = TYPE_NE;

	mov	BYTE PTR _mis$[ebp+58], 0

; 762  : 					mis.targetID = airbase->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp+8], ecx
	mov	DWORD PTR _mis$[ebp+12], edx

; 763  : 					mis.target_num = 255;

	mov	eax, 255				; 000000ffH
	mov	WORD PTR _mis$[ebp+50], ax

; 764  : 					mis.mission = AMIS_ASHIP;

	mov	BYTE PTR _mis$[ebp+60], 36		; 00000024H

; 765  : 					mis.roe_check = ROE_NAVAL_FIRE;

	mov	BYTE PTR _mis$[ebp+63], 10		; 0000000aH

; 766  : 					mis.context = enemyAirPowerAirbase;

	mov	BYTE PTR _mis$[ebp+62], 40		; 00000028H

; 767  : 					mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission
$LN8@DoCalculat:

; 768  : 				}
; 769  : 			}
; 770  : 			if (supplyBase == total_airbases && airbase->IsObjective() && airbase->GetType() == TYPE_AIRBASE)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+200]
	cmp	edx, DWORD PTR _total_airbases$[ebp]
	jne	$LN4@DoCalculat
	mov	eax, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	$LN4@DoCalculat
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN4@DoCalculat

; 771  : 			{
; 772  : 				// Request an airlift mission into this airbase
; 773  : 				mis.requesterID = FalconNullId;

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _mis$[ebp], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _mis$[ebp+4], eax

; 774  : 				airbase->GetLocation(&mis.tx,&mis.ty);

	lea	ecx, DWORD PTR _mis$[ebp+42]
	push	ecx
	lea	edx, DWORD PTR _mis$[ebp+40]
	push	edx
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 775  : 				mis.who = owner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+146]
	mov	BYTE PTR _mis$[ebp+32], cl

; 776  : 				mis.vs = 0;

	mov	BYTE PTR _mis$[ebp+33], 0

; 777  : 				mis.roe_check = ROE_AIR_OVERFLY;

	mov	BYTE PTR _mis$[ebp+63], 7

; 778  : 				mis.tot = Camp_GetCurrentTime() + 90*CampaignMinutes;

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	add	eax, 5400000				; 005265c0H
	mov	DWORD PTR _mis$[ebp+36], eax

; 779  : 				mis.tot_type = TYPE_NE;

	mov	BYTE PTR _mis$[ebp+58], 0

; 780  : 				mis.targetID = airbase->Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$[ebp+8], ecx
	mov	DWORD PTR _mis$[ebp+12], edx

; 781  : 				mis.target_num = 0;

	xor	eax, eax
	mov	WORD PTR _mis$[ebp+50], ax

; 782  : 				mis.mission = AMIS_AIRLIFT;

	mov	BYTE PTR _mis$[ebp+60], 33		; 00000021H

; 783  : 				mis.context = friendlySuppliesIncomingAir;

	mov	BYTE PTR _mis$[ebp+62], 45		; 0000002dH

; 784  : 
; 785  : 				mis.RequestMission();

	lea	ecx, DWORD PTR _mis$[ebp]
	call	?RequestMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestMission
$LN4@DoCalculat:

; 786  : 			}
; 787  : 			// Clear the new block
; 788  : 			cur->schedule[ATM_MAX_CYCLES-1] = 0;

	mov	ecx, 1
	imul	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _cur$[ebp]
	mov	BYTE PTR [edx+ecx+8], 0
$LN16@DoCalculat:

; 789  : 		}
; 790  : 		if (last)

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN3@DoCalculat

; 791  : 			cur = last->next;

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _cur$[ebp], ecx

; 792  : 		else

	jmp	SHORT $LN2@DoCalculat
$LN3@DoCalculat:

; 793  : 			cur = airbaseList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@DoCalculat:

; 794  : 	}

	jmp	$LN22@DoCalculat
$LN21@DoCalculat:

; 795  : 	supplyBase++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+200]
	add	dl, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+200], dl

; 796  : 	if (supplyBase >= total_airbases)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+200]
	cmp	edx, DWORD PTR _total_airbases$[ebp]
	jl	SHORT $LN1@DoCalculat

; 797  : 		supplyBase = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+200], 0
$LN1@DoCalculat:

; 798  : 
; 799  : 	// KCK WARNING: This won't get sent over the net.
; 800  : 	TeamInfo[owner]->SetCurrentStats()->airbases = total_airbases;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?SetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::SetCurrentStats
	mov	cx, WORD PTR _total_airbases$[ebp]
	mov	WORD PTR [eax+12], cx

; 801  : 
; 802  : 	// Now update our AWACS, JSTAR, Tanker and ECM locations
; 803  : 	// AWACS/JSTAR ranges (from FLOT)
; 804  : 	FillDistanceList (awacsList, owner, MINIMUM_AWACS_DISTANCE, MAXIMUM_AWACS_DISTANCE);

	movsx	edx, WORD PTR ?MAXIMUM_AWACS_DISTANCE@@3FA ; MAXIMUM_AWACS_DISTANCE
	push	edx
	movsx	eax, WORD PTR ?MINIMUM_AWACS_DISTANCE@@3FA ; MINIMUM_AWACS_DISTANCE
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	call	?FillDistanceList@@YAXPAVListClass@@EHH@Z ; FillDistanceList
	add	esp, 16					; 00000010H

; 805  : 	// Tanker ranges (from FLOT)
; 806  : 	FillDistanceList (tankerList, owner, MINIMUM_TANKER_DISTANCE, MAXIMUM_TANKER_DISTANCE);	

	movsx	edx, WORD PTR ?MAXIMUM_TANKER_DISTANCE@@3FA ; MAXIMUM_TANKER_DISTANCE
	push	edx
	movsx	eax, WORD PTR ?MINIMUM_TANKER_DISTANCE@@3FA ; MINIMUM_TANKER_DISTANCE
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	call	?FillDistanceList@@YAXPAVListClass@@EHH@Z ; FillDistanceList
	add	esp, 16					; 00000010H

; 807  : 	// ECM ranges (from FLOT)
; 808  : 	FillDistanceList (ecmList, owner, MINIMUM_ECM_DISTANCE, MAXIMUM_ECM_DISTANCE);

	movsx	edx, WORD PTR ?MAXIMUM_ECM_DISTANCE@@3FA ; MAXIMUM_ECM_DISTANCE
	push	edx
	movsx	eax, WORD PTR ?MINIMUM_ECM_DISTANCE@@3FA ; MINIMUM_ECM_DISTANCE
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	call	?FillDistanceList@@YAXPAVListClass@@EHH@Z ; FillDistanceList
	add	esp, 16					; 00000010H

; 809  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
$LN42@DoCalculat:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DoCalculations@AirTaskingManagerClass@@UAEXXZ$0:
	lea	ecx, DWORD PTR _mis$[ebp]
	jmp	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
__unwindfunclet$?DoCalculations@AirTaskingManagerClass@@UAEXXZ$1:
	lea	ecx, DWORD PTR _squadit$6[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?DoCalculations@AirTaskingManagerClass@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-200]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoCalculations@AirTaskingManagerClass@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoCalculations@AirTaskingManagerClass@@UAEXXZ ENDP	; AirTaskingManagerClass::DoCalculations
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_packit$2 = -60						; size = 12
_task_time$ = -48					; size = 4
tv224 = -44						; size = 4
_res$ = -40						; size = 4
_lp$ = -36						; size = 4
_pp$ = -32						; size = 4
_mis$ = -28						; size = 4
_pc$ = -24						; size = 4
_this$ = -20						; size = 4
tv223 = -13						; size = 1
__$EHRec$ = -12						; size = 12
?Task@AirTaskingManagerClass@@UAEHXZ PROC		; AirTaskingManagerClass::Task
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Task@AirTaskingManagerClass@@UAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 	ListNode			lp,pp;
; 469  : 	MissionRequest		mis;
; 470  : 	Package				pc;
; 471  : 	int					res;
; 472  : 	DWORD				task_time = GetTickCount();

	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _task_time$[ebp], eax

; 473  : 
; 474  : 	// Don't do this if we're not active, or not owned by this machine
; 475  : 	if (!(TeamInfo[owner]->flags & TEAM_ACTIVE) || !IsLocal())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	movsx	eax, WORD PTR [edx+350]
	and	eax, 1
	je	SHORT $LN27@Task
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN28@Task
$LN27@Task:

; 476  : 		return 0;

	xor	eax, eax
	jmp	$LN29@Task
$LN28@Task:

; 477  : 
; 478  : 	// If we don't have any squadrons, don't bother
; 479  : 	if (!squadrons)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+150]
	test	eax, eax
	jne	SHORT $LN26@Task

; 480  : 		return 0;

	xor	eax, eax
	jmp	$LN29@Task
$LN26@Task:

; 481  : 
; 482  : 	// Check need requests on current non-final packages
; 483  : 	{
; 484  : 		VuListIterator		packit(packageList);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	push	edx
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 485  : 		pc = (Package) packit.GetFirst();

	lea	ecx, DWORD PTR _packit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _pc$[ebp], eax
$LN25@Task:

; 486  : 		while (pc){

	cmp	DWORD PTR _pc$[ebp], 0
	je	SHORT $LN24@Task

; 487  : 			if (!pc->Final())

	mov	ecx, DWORD PTR _pc$[ebp]
	call	?Final@UnitClass@@QBEHXZ		; UnitClass::Final
	test	eax, eax
	jne	SHORT $LN23@Task

; 488  : 				pc->CheckNeedRequests();

	mov	ecx, DWORD PTR _pc$[ebp]
	call	?CheckNeedRequests@PackageClass@@QAEHXZ	; PackageClass::CheckNeedRequests
$LN23@Task:

; 489  : 			pc = (Package) packit.GetNext();

	lea	ecx, DWORD PTR _packit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _pc$[ebp], eax

; 490  : 		}

	jmp	SHORT $LN25@Task
$LN24@Task:

; 491  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _packit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 492  : 	pc = NULL;

	mov	DWORD PTR _pc$[ebp], 0

; 493  : 
; 494  : 	// Don't bother looking unless we've gotten a new request or more airplanes
; 495  : 	if (!(flags & ATM_NEW_REQUESTS) && !(flags & ATM_NEW_PLANES))

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+148]
	and	ecx, 8
	jne	SHORT $LN22@Task
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+148]
	and	eax, 4
	jne	SHORT $LN22@Task

; 496  : 		return 0;

	xor	eax, eax
	jmp	$LN29@Task
$LN22@Task:

; 497  : 
; 498  : 	// Clear flags
; 499  : 	flags &= ~ATM_NEW_PLANES;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+148]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+148], dx

; 500  : 	flags |= ATM_NEW_REQUESTS;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+148]
	or	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+148], dx

; 501  : 
; 502  : 	// Now traverse my request list
; 503  : 	lp = requestList->GetLastElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+180]
	call	?GetLastElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetLastElement
	mov	DWORD PTR _lp$[ebp], eax
$LN21@Task:

; 504  : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	$LN20@Task

; 505  : 	{
; 506  : 		mis = (MissionRequest) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _mis$[ebp], eax

; 507  : 		pp = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR _pp$[ebp], edx

; 508  : 		lp = pp->GetPrev();

	mov	ecx, DWORD PTR _pp$[ebp]
	call	?GetPrev@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetPrev
	mov	DWORD PTR _lp$[ebp], eax

; 509  : 
; 510  : 		if (!mis)

	cmp	DWORD PTR _mis$[ebp], 0
	jne	SHORT $LN19@Task

; 511  : 		{
; 512  : 			// This request has been invalidated while we were looping
; 513  : 			CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 514  : 			requestList->Remove(pp);

	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 515  : 			CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 516  : 			continue;

	jmp	SHORT $LN21@Task
$LN19@Task:

; 517  : 		}
; 518  : 
; 519  : 		if (missionsFilled >= missionsToFill && !mis->action_type && !(MissionData[mis->mission].flags & AMIS_FLYALWAYS))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+164]
	cmp	ecx, DWORD PTR [eax+160]
	jl	SHORT $LN18@Task
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+59]
	test	eax, eax
	jne	SHORT $LN18@Task
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 536870912				; 20000000H
	jne	SHORT $LN18@Task

; 520  : 			continue;

	jmp	$LN21@Task
$LN18@Task:

; 521  : 		// REMOVE ASAP
; 522  : 		//Cobra someone didn't remove this and thus we had NO DCA missions!
; 523  : 		/*if (mis->mission == AMIS_BARCAP)
; 524  : 		  continue;*/
; 525  : 		// END REMOVE
; 526  : 
; 527  : 		if (GetTickCount() - task_time > 200)

	call	DWORD PTR __imp__GetTickCount@0
	sub	eax, DWORD PTR _task_time$[ebp]
	cmp	eax, 200				; 000000c8H
	jbe	SHORT $LN17@Task

; 528  : 			return 0;

	xor	eax, eax
	jmp	$LN29@Task
$LN17@Task:

; 529  : 
; 530  : #ifdef DEBUG_TIMING
; 531  : 		DWORD		time = GetTickCount();
; 532  : #endif
; 533  : 		if (mis->flags & AMIS_IMMEDIATE)

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	and	edx, 65536				; 00010000H
	je	SHORT $LN16@Task

; 534  : 			res = BuildDivert(mis);

	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildDivert@AirTaskingManagerClass@@QAEHPAVMissionRequestClass@@@Z ; AirTaskingManagerClass::BuildDivert
	mov	DWORD PTR _res$[ebp], eax

; 535  : 		else

	jmp	SHORT $LN15@Task
$LN16@Task:

; 536  : 			res = BuildPackage(&pc, mis);

	mov	ecx, DWORD PTR _mis$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pc$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildPackage@AirTaskingManagerClass@@QAEHPAPAVPackageClass@@PAVMissionRequestClass@@@Z ; AirTaskingManagerClass::BuildPackage
	mov	DWORD PTR _res$[ebp], eax
$LN15@Task:

; 537  : 
; 538  : 		// RV - Biker - Limit strenght for give mission
; 539  : 		mis->aircraft = min(mis->aircraft, MissionData[mis->mission].str);

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+61]
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movzx	edx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+18]
	cmp	ecx, edx
	jge	SHORT $LN31@Task
	mov	eax, DWORD PTR _mis$[ebp]
	mov	cl, BYTE PTR [eax+61]
	mov	BYTE PTR tv223[ebp], cl
	jmp	SHORT $LN32@Task
$LN31@Task:
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	mov	cl, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+18]
	mov	BYTE PTR tv223[ebp], cl
$LN32@Task:
	mov	edx, DWORD PTR _mis$[ebp]
	mov	al, BYTE PTR tv223[ebp]
	mov	BYTE PTR [edx+61], al

; 540  : 		
; 541  : #ifdef DEBUG_TIMING
; 542  : 		MonoPrint("Team %d %s Pack @ %d,%d: %d ticks (%s)\n",owner,MissStr[mis->mission],mis->tx,mis->ty,GetTickCount() - time,(res==PRET_SUCCESS)? "Success":"Failure");
; 543  : #endif
; 544  : 		CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 545  : 		switch (res)

	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv224[ebp], ecx
	cmp	DWORD PTR tv224[ebp], 2
	je	$LN7@Task
	cmp	DWORD PTR tv224[ebp], 3
	je	SHORT $LN12@Task
	jmp	$LN6@Task
$LN12@Task:

; 546  : 		{
; 547  : 				case PRET_SUCCESS:
; 548  : 						// Tally any new Counter Air missions
; 549  : 						if (MissionData[mis->mission].skill == ARO_CA)

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	movzx	ecx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[eax+2]
	cmp	ecx, 1
	jne	SHORT $LN11@Task

; 550  : 						{
; 551  : 							if (pc)

	cmp	DWORD PTR _pc$[ebp], 0
	je	SHORT $LN10@Task

; 552  : 								averageCAStrength = (averageCAStrength * 4 + pc->GetAAStrength())/5;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	esi, WORD PTR [edx+152]
	mov	ecx, DWORD PTR _pc$[ebp]
	call	?GetAAStrength@PackageClass@@QAEFXZ	; PackageClass::GetAAStrength
	cwde
	lea	eax, DWORD PTR [eax+esi*4]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+152], ax
$LN10@Task:

; 553  : 							currentCAMissions++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+156]
	add	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+156], cl
$LN11@Task:

; 554  : 						}
; 555  : 						// Insert this package into our active package list
; 556  : 						if (pc && !(mis->flags & AMIS_IMMEDIATE))

	cmp	DWORD PTR _pc$[ebp], 0
	je	SHORT $LN9@Task
	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 65536				; 00010000H
	jne	SHORT $LN9@Task

; 557  : 						{
; 558  : 							packageList->ForcedInsert(pc);

	mov	edx, DWORD PTR _pc$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert

; 559  : 							pc = NULL;

	mov	DWORD PTR _pc$[ebp], 0
$LN9@Task:

; 560  : 						}
; 561  : 						// JB 000811 - Move the Remove and NULL around since references to mis could otherwise cause a crash (occured once)
; 562  : 						//requestList->Remove(pp);//-
; 563  : 						//pp = NULL;//-
; 564  : 						if (!mis->action_type && !(MissionData[mis->mission].flags & AMIS_FLYALWAYS))

	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+59]
	test	edx, edx
	jne	SHORT $LN8@Task
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	shl	ecx, 5
	mov	edx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[ecx+28]
	and	edx, 536870912				; 20000000H
	jne	SHORT $LN8@Task

; 565  : 							missionsFilled++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+164], ecx
$LN8@Task:

; 566  : 						requestList->Remove(pp);//+

	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 567  : 						pp = NULL;//+

	mov	DWORD PTR _pp$[ebp], 0

; 568  : 						// JB 000811
; 569  : 						break;

	jmp	SHORT $LN13@Task
$LN7@Task:

; 570  : 				case PRET_DELAYED:
; 571  : 						// Put this element on the delayed list
; 572  : 						requestList->Detach(pp);

	mov	edx, DWORD PTR _pp$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	call	?Detach@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Detach

; 573  : 						delayedList->Insert(pp);

	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+184]
	call	?Insert@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Insert

; 574  : 						pp = NULL;

	mov	DWORD PTR _pp$[ebp], 0

; 575  : 						break;

	jmp	SHORT $LN13@Task
$LN6@Task:

; 576  : 				default:
; 577  : 						// Delete this request
; 578  : 						requestList->Remove(pp);

	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+180]
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove

; 579  : 						pp = NULL;

	mov	DWORD PTR _pp$[ebp], 0
$LN13@Task:

; 580  : 						break;
; 581  : 		}
; 582  : 		CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 583  : 		// Clean up aborted packages (otherwise we can reuse the non-inserted entity)
; 584  : 		if (pc) {

	cmp	DWORD PTR _pc$[ebp], 0
	je	SHORT $LN5@Task

; 585  : 			if (PackInserted){

	cmp	DWORD PTR ?PackInserted@@3HA, 0		; PackInserted
	je	SHORT $LN4@Task

; 586  : 				ChillPackage(&pc);

	lea	edx, DWORD PTR _pc$[ebp]
	push	edx
	call	?ChillPackage@@YAXPAPAVPackageClass@@@Z	; ChillPackage
	add	esp, 4

; 587  : 			}
; 588  : 			else // JPO - brought into the loop - so it frees it here.

	jmp	SHORT $LN5@Task
$LN4@Task:

; 589  : 			{
; 590  : 				// Let vu clean up any packages which havn't been inserted
; 591  : 				VuReferenceEntity(pc);

	mov	eax, DWORD PTR _pc$[ebp]
	push	eax
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 592  : 				VuDeReferenceEntity(pc);

	mov	ecx, DWORD PTR _pc$[ebp]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 593  : 				pc = NULL;

	mov	DWORD PTR _pc$[ebp], 0
$LN5@Task:

; 594  : 			}
; 595  : 		}
; 596  : 	}

	jmp	$LN21@Task
$LN20@Task:

; 597  : 	// we actually finished traversing the whole list. 
; 598  : 	// Mark us as not having new requests and move the delayed list to the request list
; 599  : 	flags &= ~ATM_NEW_REQUESTS;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+148]
	and	eax, -9					; fffffff7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+148], ax

; 600  : 	lp = delayedList->GetFirstElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+184]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN2@Task:

; 601  : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN1@Task

; 602  : 	{
; 603  : 		delayedList->Detach(lp);

	mov	eax, DWORD PTR _lp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+184]
	call	?Detach@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Detach

; 604  : 		requestList->Insert(lp);

	mov	edx, DWORD PTR _lp$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	call	?Insert@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Insert

; 605  : 		lp = delayedList->GetFirstElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+184]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax

; 606  : 	}

	jmp	SHORT $LN2@Task
$LN1@Task:

; 607  : 	return 1;

	mov	eax, 1
$LN29@Task:

; 608  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Task@AirTaskingManagerClass@@UAEHXZ$0:
	lea	ecx, DWORD PTR _packit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?Task@AirTaskingManagerClass@@UAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Task@AirTaskingManagerClass@@UAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Task@AirTaskingManagerClass@@UAEHXZ ENDP		; AirTaskingManagerClass::Task
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_mis$ = -28						; size = 4
_cur$ = -24						; size = 4
_this$ = -20						; size = 4
_lp$ = -16						; size = 4
_nreq$ = -12						; size = 2
_retval$ = -8						; size = 2
_num$ = -1						; size = 1
_file$ = 8						; size = 4
?Save@AirTaskingManagerClass@@UAEHPAU_iobuf@@@Z PROC	; AirTaskingManagerClass::Save
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 393  : 	short			nreq=0,retval=0;

	xor	eax, eax
	mov	WORD PTR _nreq$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _retval$[ebp], cx

; 394  : 	MissionRequest	mis;
; 395  : 	ListNode		lp;
; 396  : 	uchar			num=0;

	mov	BYTE PTR _num$[ebp], 0

; 397  : 	ATMAirbaseClass	*cur;
; 398  : 
; 399  : 	if (!file)

	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN17@Save

; 400  : 		return 0;

	xor	eax, eax
	jmp	$LN18@Save
$LN17@Save:

; 401  : 	retval += CampManagerClass::Save(file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@CampManagerClass@@UAEHPAU_iobuf@@@Z ; CampManagerClass::Save
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 402  : 	retval += fwrite(&flags, sizeof(short), 1, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 403  : 	retval += fwrite(&averageCAStrength, sizeof(short), 1, file);		

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 404  : 	retval += fwrite(&averageCAMissions, sizeof(short), 1, file);		

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 154				; 0000009aH
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 405  : 	retval += fwrite(&sampleCycles, sizeof(uchar), 1, file);		

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 157				; 0000009dH
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 406  : 
; 407  : 	// Count airbase elements
; 408  : 	cur = airbaseList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _cur$[ebp], eax
$LN16@Save:

; 409  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN15@Save

; 410  : 	{
; 411  : 		num++;

	mov	cl, BYTE PTR _num$[ebp]
	add	cl, 1
	mov	BYTE PTR _num$[ebp], cl

; 412  : 		cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _cur$[ebp], eax

; 413  : 	}

	jmp	SHORT $LN16@Save
$LN15@Save:

; 414  : 	retval += fwrite(&num, sizeof(uchar), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	1
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 415  : 	cur = airbaseList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _cur$[ebp], eax
$LN14@Save:

; 416  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN13@Save

; 417  : 	{
; 418  : 		cur->Save(file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Save@ATMAirbaseClass@@QAEHPAU_iobuf@@@Z ; ATMAirbaseClass::Save

; 419  : 		cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _cur$[ebp], eax

; 420  : 	}

	jmp	SHORT $LN14@Save
$LN13@Save:

; 421  : 	retval += fwrite(&cycle, sizeof(uchar), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 201				; 000000c9H
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 422  : 
; 423  : 	// Count list elements
; 424  : 	lp = requestList->GetFirstElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+180]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN12@Save:

; 425  : 	while(lp && nreq < REQUESTS_TO_SAVE)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN11@Save
	movsx	eax, WORD PTR _nreq$[ebp]
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN11@Save

; 426  : 	{
; 427  : 		if (lp->GetUserData())

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	test	eax, eax
	je	SHORT $LN10@Save

; 428  : 			nreq++;

	mov	cx, WORD PTR _nreq$[ebp]
	add	cx, 1
	mov	WORD PTR _nreq$[ebp], cx
$LN10@Save:

; 429  : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 430  : 	}

	jmp	SHORT $LN12@Save
$LN11@Save:

; 431  : 	lp = delayedList->GetFirstElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+184]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN9@Save:

; 432  : 	while(lp && nreq < REQUESTS_TO_SAVE)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN8@Save
	movsx	eax, WORD PTR _nreq$[ebp]
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN8@Save

; 433  : 	{
; 434  : 		if (lp->GetUserData())

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	test	eax, eax
	je	SHORT $LN7@Save

; 435  : 			nreq++;

	mov	cx, WORD PTR _nreq$[ebp]
	add	cx, 1
	mov	WORD PTR _nreq$[ebp], cx
$LN7@Save:

; 436  : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 437  : 	}

	jmp	SHORT $LN9@Save
$LN8@Save:

; 438  : 	retval += fwrite(&nreq, sizeof(short), 1, file);	

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	lea	eax, DWORD PTR _nreq$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 439  : 
; 440  : 	// Write list entries
; 441  : 	lp = requestList->GetFirstElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+180]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN6@Save:

; 442  : 	while(lp && nreq)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN5@Save
	movsx	eax, WORD PTR _nreq$[ebp]
	test	eax, eax
	je	SHORT $LN5@Save

; 443  : 	{
; 444  : 		mis = (MissionRequest) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _mis$[ebp], eax

; 445  : 		if (mis)

	cmp	DWORD PTR _mis$[ebp], 0
	je	SHORT $LN4@Save

; 446  : 		{
; 447  : 			retval += fwrite(mis, sizeof(MissionRequestClass), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	76					; 0000004cH
	mov	edx, DWORD PTR _mis$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 448  : 			nreq--;

	mov	dx, WORD PTR _nreq$[ebp]
	sub	dx, 1
	mov	WORD PTR _nreq$[ebp], dx
$LN4@Save:

; 449  : 		}
; 450  : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 451  : 	}

	jmp	SHORT $LN6@Save
$LN5@Save:

; 452  : 	lp = delayedList->GetFirstElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN3@Save:

; 453  : 	while(lp && nreq)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN2@Save
	movsx	ecx, WORD PTR _nreq$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@Save

; 454  : 	{
; 455  : 		mis = (MissionRequest) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _mis$[ebp], eax

; 456  : 		if (mis)

	cmp	DWORD PTR _mis$[ebp], 0
	je	SHORT $LN1@Save

; 457  : 		{
; 458  : 			retval += fwrite(mis, sizeof(MissionRequestClass), 1, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	76					; 0000004cH
	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	movsx	ecx, WORD PTR _retval$[ebp]
	add	ecx, eax
	mov	WORD PTR _retval$[ebp], cx

; 459  : 			nreq--;

	mov	dx, WORD PTR _nreq$[ebp]
	sub	dx, 1
	mov	WORD PTR _nreq$[ebp], dx
$LN1@Save:

; 460  : 		}
; 461  : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 462  : 	}

	jmp	SHORT $LN3@Save
$LN2@Save:

; 463  : 	return retval;

	movsx	eax, WORD PTR _retval$[ebp]
$LN18@Save:

; 464  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@AirTaskingManagerClass@@UAEHPAU_iobuf@@@Z ENDP	; AirTaskingManagerClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_cur$ = -12						; size = 4
_this$ = -8						; size = 4
_num$ = -1						; size = 1
_stream$ = 8						; size = 4
?Save@AirTaskingManagerClass@@UAEHPAPAE@Z PROC		; AirTaskingManagerClass::Save
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 357  : 	uchar			num=0;

	mov	BYTE PTR _num$[ebp], 0

; 358  : 	ATMAirbaseClass	*cur;
; 359  : 
; 360  : 	CampManagerClass::Save(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@CampManagerClass@@UAEHPAPAE@Z	; CampManagerClass::Save

; 361  : 	memcpy(*stream, &flags, sizeof(short));							*stream += sizeof(short);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 362  : 	memcpy(*stream, &averageCAStrength, sizeof(short));				*stream += sizeof(short);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 363  : 	memcpy(*stream, &averageCAMissions, sizeof(short));				*stream += sizeof(short);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 154				; 0000009aH
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 364  : 	memcpy(*stream, &sampleCycles, sizeof(uchar));					*stream += sizeof(uchar);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 157				; 0000009dH
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 365  : 
; 366  : 	// Count airbase elements
; 367  : 	cur = airbaseList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR _cur$[ebp], edx
$LN4@Save:

; 368  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@Save

; 369  : 	{
; 370  : 		num++;

	mov	al, BYTE PTR _num$[ebp]
	add	al, 1
	mov	BYTE PTR _num$[ebp], al

; 371  : 		cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _cur$[ebp], edx

; 372  : 	}

	jmp	SHORT $LN4@Save
$LN3@Save:

; 373  : 	memcpy(*stream, &num, sizeof(uchar));							*stream += sizeof(uchar);

	push	1
	lea	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 374  : 
; 375  : 	cur = airbaseList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@Save:

; 376  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@Save

; 377  : 	{
; 378  : 		cur->Save(stream);

	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Save@ATMAirbaseClass@@QAEHPAPAE@Z	; ATMAirbaseClass::Save

; 379  : 		cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _cur$[ebp], ecx

; 380  : 	}

	jmp	SHORT $LN2@Save
$LN1@Save:

; 381  : 
; 382  : 	memcpy(*stream, &cycle, sizeof(uchar));							*stream += sizeof(uchar);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 201				; 000000c9H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 383  : 
; 384  : #ifdef KEV_DEBUG
; 385  : 	MonoPrint("Sending team %d air tasking manager.\n",owner);
; 386  : #endif
; 387  : 
; 388  : 	return AirTaskingManagerClass::SaveSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@AirTaskingManagerClass@@UAEHXZ ; AirTaskingManagerClass::SaveSize

; 389  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@AirTaskingManagerClass@@UAEHPAPAE@Z ENDP		; AirTaskingManagerClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_cur$ = -8						; size = 4
_size$ = -4						; size = 4
?SaveSize@AirTaskingManagerClass@@UAEHXZ PROC		; AirTaskingManagerClass::SaveSize
; _this$ = ecx

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 333  : 	int				size=0;

	mov	DWORD PTR _size$[ebp], 0

; 334  : 	ATMAirbaseClass	*cur;
; 335  : 
; 336  : 	// Count airbase elements
; 337  : 	cur = airbaseList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@SaveSize:

; 338  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@SaveSize

; 339  : 	{
; 340  : 		size += cur->Size();

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Size@ATMAirbaseClass@@QAEHXZ		; ATMAirbaseClass::Size
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 341  : 		cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _cur$[ebp], eax

; 342  : 	}

	jmp	SHORT $LN2@SaveSize
$LN1@SaveSize:

; 343  : 
; 344  : 	size += CampManagerClass::SaveSize()
; 345  : 			+ sizeof(short)
; 346  : 			+ sizeof(short)
; 347  : 			+ sizeof(short)
; 348  : 			+ sizeof(uchar)
; 349  : 			+ sizeof(uchar)
; 350  : 			+ sizeof(uchar);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@CampManagerClass@@UAEHXZ	; CampManagerClass::SaveSize
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [ecx+eax+9]
	mov	DWORD PTR _size$[ebp], edx

; 351  : 
; 352  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 353  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@AirTaskingManagerClass@@UAEHXZ ENDP		; AirTaskingManagerClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
tv187 = -116						; size = 4
$T2 = -112						; size = 4
tv166 = -108						; size = 4
$T3 = -104						; size = 4
_next$ = -100						; size = 4
tv145 = -96						; size = 4
$T4 = -92						; size = 4
tv135 = -88						; size = 4
$T5 = -84						; size = 4
tv129 = -80						; size = 4
$T6 = -76						; size = 4
tv91 = -72						; size = 4
$T7 = -68						; size = 4
tv85 = -64						; size = 4
$T8 = -60						; size = 4
tv79 = -56						; size = 4
$T9 = -52						; size = 4
$T10 = -48						; size = 4
$T11 = -44						; size = 4
$T12 = -40						; size = 4
$T13 = -36						; size = 4
$T14 = -32						; size = 4
$T15 = -28						; size = 4
$T16 = -24						; size = 4
$T17 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AirTaskingManagerClass@@UAE@XZ PROC			; AirTaskingManagerClass::~AirTaskingManagerClass
; _this$ = ecx

; 305  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AirTaskingManagerClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AirTaskingManagerClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 306  : 	ATMAirbaseClass	*next;
; 307  : 
; 308  : 	delete requestList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	mov	DWORD PTR $T9[ebp], edx
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR $T15[ebp], eax
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN7@AirTasking
	push	1
	mov	ecx, DWORD PTR $T15[ebp]
	call	??_GListClass@@QAEPAXI@Z
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN8@AirTasking
$LN7@AirTasking:
	mov	DWORD PTR tv79[ebp], 0
$LN8@AirTasking:

; 309  : 	delete delayedList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	DWORD PTR $T8[ebp], edx
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T14[ebp], eax
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN9@AirTasking
	push	1
	mov	ecx, DWORD PTR $T14[ebp]
	call	??_GListClass@@QAEPAXI@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN10@AirTasking
$LN9@AirTasking:
	mov	DWORD PTR tv85[ebp], 0
$LN10@AirTasking:

; 310  : 	delete tankerList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T13[ebp], eax
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN11@AirTasking
	push	1
	mov	ecx, DWORD PTR $T13[ebp]
	call	??_GListClass@@QAEPAXI@Z
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN12@AirTasking
$LN11@AirTasking:
	mov	DWORD PTR tv91[ebp], 0
$LN12@AirTasking:

; 311  : 	delete ecmList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	DWORD PTR $T6[ebp], edx
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T12[ebp], eax
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN13@AirTasking
	push	1
	mov	ecx, DWORD PTR $T12[ebp]
	call	??_GListClass@@QAEPAXI@Z
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN14@AirTasking
$LN13@AirTasking:
	mov	DWORD PTR tv129[ebp], 0
$LN14@AirTasking:

; 312  : 	delete awacsList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T11[ebp], eax
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN15@AirTasking
	push	1
	mov	ecx, DWORD PTR $T11[ebp]
	call	??_GListClass@@QAEPAXI@Z
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN4@AirTasking
$LN15@AirTasking:
	mov	DWORD PTR tv135[ebp], 0
$LN4@AirTasking:

; 313  : 	while (airbaseList){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+196], 0
	je	SHORT $LN3@AirTasking

; 314  : 		next = airbaseList->next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _next$[ebp], ecx

; 315  : 		delete airbaseList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN17@AirTasking
	push	1
	mov	ecx, DWORD PTR $T10[ebp]
	call	??_GATMAirbaseClass@@QAEPAXI@Z
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN18@AirTasking
$LN17@AirTasking:
	mov	DWORD PTR tv145[ebp], 0
$LN18@AirTasking:

; 316  : 		airbaseList = next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+196], eax

; 317  : 	}

	jmp	SHORT $LN4@AirTasking
$LN3@AirTasking:

; 318  : 	if (squadronList){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	je	SHORT $LN2@AirTasking

; 319  : 		squadronList->Unregister();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+188]
	call	?Unregister@VuCollection@@QAEXXZ	; VuCollection::Unregister

; 320  : 		delete squadronList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T17[ebp], edx
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN19@AirTasking
	push	1
	mov	eax, DWORD PTR $T17[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T17[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv166[ebp], eax
	jmp	SHORT $LN20@AirTasking
$LN19@AirTasking:
	mov	DWORD PTR tv166[ebp], 0
$LN20@AirTasking:

; 321  : 		squadronList = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 0
$LN2@AirTasking:

; 322  : 	}
; 323  : 	if (packageList){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+192], 0
	je	SHORT $LN1@AirTasking

; 324  : 		packageList->Unregister();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	call	?Unregister@VuCollection@@QAEXXZ	; VuCollection::Unregister

; 325  : 		delete packageList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T16[ebp], eax
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN21@AirTasking
	push	1
	mov	ecx, DWORD PTR $T16[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T16[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv187[ebp], eax
	jmp	SHORT $LN22@AirTasking
$LN21@AirTasking:
	mov	DWORD PTR tv187[ebp], 0
$LN22@AirTasking:

; 326  : 		packageList = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], 0
$LN1@AirTasking:

; 327  : 	}
; 328  : 	squadrons = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+150], dx

; 329  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CampManagerClass@@UAE@XZ		; CampManagerClass::~CampManagerClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1AirTaskingManagerClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampManagerClass@@UAE@XZ		; CampManagerClass::~CampManagerClass
__ehhandler$??1AirTaskingManagerClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AirTaskingManagerClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AirTaskingManagerClass@@UAE@XZ ENDP			; AirTaskingManagerClass::~AirTaskingManagerClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
tv263 = -160						; size = 4
$T2 = -156						; size = 4
$T3 = -152						; size = 4
$T4 = -148						; size = 4
$T5 = -144						; size = 4
$T6 = -140						; size = 4
tv238 = -136						; size = 4
$T7 = -132						; size = 4
$T8 = -128						; size = 4
$T9 = -124						; size = 4
_size$10 = -120						; size = 4
$T11 = -116						; size = 4
$T12 = -112						; size = 4
$T13 = -108						; size = 4
tv159 = -104						; size = 4
$T14 = -100						; size = 4
tv205 = -96						; size = 4
$T15 = -92						; size = 4
tv150 = -88						; size = 4
$T16 = -84						; size = 4
$T17 = -80						; size = 4
tv227 = -76						; size = 4
$T18 = -72						; size = 4
$T19 = -68						; size = 4
_last$ = -64						; size = 4
tv141 = -60						; size = 4
$T20 = -56						; size = 4
tv132 = -52						; size = 4
tv248 = -48						; size = 4
tv91 = -44						; size = 4
$T21 = -40						; size = 4
$T22 = -36						; size = 4
_cur$ = -32						; size = 4
_mis$ = -28						; size = 4
_nreq$ = -24						; size = 2
_num$ = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_file$ = 8						; size = 4
??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z PROC	; AirTaskingManagerClass::AirTaskingManagerClass
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampManagerClass@@QAE@PAU_iobuf@@@Z	; CampManagerClass::CampManagerClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7AirTaskingManagerClass@@6B@

; 228  : 	short			nreq;
; 229  : 	MissionRequest	mis;
; 230  : 	uchar			num;
; 231  : 	ATMAirbaseClass	*cur,*last=NULL;

	mov	DWORD PTR _last$[ebp], 0

; 232  : 
; 233  : 	// Zero other data (will be rebuilt)
; 234  : 	squadrons = 0;			

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+150], dx

; 235  : 	awacsList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T19[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN18@AirTasking
	push	0
	mov	ecx, DWORD PTR $T19[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN19@AirTasking
$LN18@AirTasking:
	mov	DWORD PTR tv91[ebp], 0
$LN19@AirTasking:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T12[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T12[ebp]
	mov	DWORD PTR [edx+168], eax

; 236  : 	tankerList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN20@AirTasking
	push	0
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN21@AirTasking
$LN20@AirTasking:
	mov	DWORD PTR tv132[ebp], 0
$LN21@AirTasking:
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR [edx+172], eax

; 237  : 	ecmList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN22@AirTasking
	push	0
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN23@AirTasking
$LN22@AirTasking:
	mov	DWORD PTR tv141[ebp], 0
$LN23@AirTasking:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx+176], eax

; 238  : 	requestList = new ListClass (LADT_FREE_USER_DATA | LADT_SORTED_LIST);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN24@AirTasking
	push	3
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN25@AirTasking
$LN24@AirTasking:
	mov	DWORD PTR tv150[ebp], 0
$LN25@AirTasking:
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+180], eax

; 239  : 	delayedList = new ListClass (LADT_FREE_USER_DATA | LADT_SORTED_LIST);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN26@AirTasking
	push	3
	mov	ecx, DWORD PTR $T18[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN27@AirTasking
$LN26@AirTasking:
	mov	DWORD PTR tv159[ebp], 0
$LN27@AirTasking:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR [edx+184], eax

; 240  : 	squadronList = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 0

; 241  : 	packageList = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], 0

; 242  : 	supplyBase = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+200], 0

; 243  : 
; 244  : 	fread(&flags, sizeof(short), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 245  : 	if (gCampDataVersion >= 28)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 28	; gCampDataVersion, 0000001cH
	jl	SHORT $LN15@AirTasking

; 246  : 	{
; 247  : 		if (gCampDataVersion >= 63)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 63	; gCampDataVersion, 0000003fH
	jl	SHORT $LN14@AirTasking

; 248  : 			fread(&averageCAStrength, sizeof(short), 1, file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H
$LN14@AirTasking:

; 249  : 		fread(&averageCAMissions, sizeof(short), 1, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 154				; 0000009aH
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 250  : 		fread(&sampleCycles, sizeof(uchar), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 157				; 0000009dH
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 251  : 		currentCAMissions = 0;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0
$LN15@AirTasking:

; 252  : 	}
; 253  : 	if (gCampDataVersion < 63)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 63	; gCampDataVersion, 0000003fH
	jge	SHORT $LN13@AirTasking

; 254  : 	{
; 255  : 		averageCAMissions = 500;

	mov	ecx, 500				; 000001f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+154], cx

; 256  : 		averageCAStrength = 50;

	mov	eax, 50					; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+152], ax

; 257  : 		sampleCycles = 10;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+157], 10			; 0000000aH

; 258  : 		currentCAMissions = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0
$LN13@AirTasking:

; 259  : 	}
; 260  : 	fread(&num, sizeof(uchar), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	1
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 261  : 	airbaseList = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0
$LN12@AirTasking:

; 262  : 	while (num)

	movzx	ecx, BYTE PTR _num$[ebp]
	test	ecx, ecx
	je	SHORT $LN11@AirTasking

; 263  : 	{
; 264  : 		cur = new ATMAirbaseClass(file);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN28@AirTasking
	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0ATMAirbaseClass@@QAE@PAU_iobuf@@@Z	; ATMAirbaseClass::ATMAirbaseClass
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN29@AirTasking
$LN28@AirTasking:
	mov	DWORD PTR tv205[ebp], 0
$LN29@AirTasking:
	mov	eax, DWORD PTR tv205[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _cur$[ebp], ecx

; 265  : 		if (!airbaseList)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+196], 0
	jne	SHORT $LN10@AirTasking

; 266  : 			airbaseList = cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+196], ecx

; 267  : 		else

	jmp	SHORT $LN9@AirTasking
$LN10@AirTasking:

; 268  : 			last->next = cur;

	mov	edx, DWORD PTR _last$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+44], eax
$LN9@AirTasking:

; 269  : 		num--;

	mov	cl, BYTE PTR _num$[ebp]
	sub	cl, 1
	mov	BYTE PTR _num$[ebp], cl

; 270  : 		last = cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 271  : 	}

	jmp	$LN12@AirTasking
$LN11@AirTasking:

; 272  : 	fread(&cycle, sizeof(uchar), 1, file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 201				; 000000c9H
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 273  : 
; 274  : 	// Read list size
; 275  : 	fread(&nreq, sizeof(short), 1, file);	

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	lea	eax, DWORD PTR _nreq$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 276  : 	// Read list entries
; 277  : 	if (gCampDataVersion < 35)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 35	; gCampDataVersion, 00000023H
	jge	$LN4@AirTasking

; 278  : 	{
; 279  : 		// Zero these - they're invalid
; 280  : 		int		size = 64;

	mov	DWORD PTR _size$10[ebp], 64		; 00000040H

; 281  : 		mis = new MissionRequestClass();

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T22[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN30@AirTasking
	mov	ecx, DWORD PTR $T22[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR tv227[ebp], eax
	jmp	SHORT $LN31@AirTasking
$LN30@AirTasking:
	mov	DWORD PTR tv227[ebp], 0
$LN31@AirTasking:
	mov	ecx, DWORD PTR tv227[ebp]
	mov	DWORD PTR $T11[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _mis$[ebp], edx
$LN7@AirTasking:

; 282  : 		while (nreq > 0)

	movsx	eax, WORD PTR _nreq$[ebp]
	test	eax, eax
	jle	SHORT $LN6@AirTasking

; 283  : 		{
; 284  : 			fread(mis, size, 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _size$10[ebp]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 285  : 			nreq--;

	mov	cx, WORD PTR _nreq$[ebp]
	sub	cx, 1
	mov	WORD PTR _nreq$[ebp], cx

; 286  : 		}

	jmp	SHORT $LN7@AirTasking
$LN6@AirTasking:

; 287  : 		delete mis;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	DWORD PTR $T8[ebp], edx
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T16[ebp], eax
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN32@AirTasking
	push	1
	mov	ecx, DWORD PTR $T16[ebp]
	call	??_GMissionRequestClass@@QAEPAXI@Z
	mov	DWORD PTR tv238[ebp], eax
	jmp	SHORT $LN33@AirTasking
$LN32@AirTasking:
	mov	DWORD PTR tv238[ebp], 0
$LN33@AirTasking:

; 288  : 	}
; 289  : 	else

	jmp	$LN16@AirTasking
$LN4@AirTasking:

; 290  : 	{
; 291  : 		while (nreq > 0)

	movsx	ecx, WORD PTR _nreq$[ebp]
	test	ecx, ecx
	jle	$LN16@AirTasking

; 292  : 		{
; 293  : 			mis = new MissionRequestClass();

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN34@AirTasking
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR tv248[ebp], eax
	jmp	SHORT $LN35@AirTasking
$LN34@AirTasking:
	mov	DWORD PTR tv248[ebp], 0
$LN35@AirTasking:
	mov	edx, DWORD PTR tv248[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR _mis$[ebp], eax

; 294  : 			fread(mis, sizeof(MissionRequestClass), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	76					; 0000004cH
	mov	edx, DWORD PTR _mis$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 295  : 			if (gCampDataVersion >= 22)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 22	; gCampDataVersion, 00000016H
	jl	SHORT $LN2@AirTasking

; 296  : 				requestList->InsertNewElement(mis->priority, mis, LADT_FREE_USER_DATA);

	push	2
	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, WORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	call	?InsertNewElement@ListClass@@QAEXFPAXE@Z ; ListClass::InsertNewElement

; 297  : 			else

	jmp	SHORT $LN1@AirTasking
$LN2@AirTasking:

; 298  : 				delete mis;

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T20[ebp], edx
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN36@AirTasking
	push	1
	mov	ecx, DWORD PTR $T20[ebp]
	call	??_GMissionRequestClass@@QAEPAXI@Z
	mov	DWORD PTR tv263[ebp], eax
	jmp	SHORT $LN1@AirTasking
$LN36@AirTasking:
	mov	DWORD PTR tv263[ebp], 0
$LN1@AirTasking:

; 299  : 			nreq--;

	mov	ax, WORD PTR _nreq$[ebp]
	sub	ax, 1
	mov	WORD PTR _nreq$[ebp], ax

; 300  : 		}

	jmp	$LN4@AirTasking
$LN16@AirTasking:

; 301  : 	}
; 302  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampManagerClass@@UAE@XZ		; CampManagerClass::~CampManagerClass
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$1:
	mov	eax, DWORD PTR $T19[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$2:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$3:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$4:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$5:
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$6:
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$7:
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z$8:
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AirTaskingManagerClass@@QAE@PAU_iobuf@@@Z ENDP	; AirTaskingManagerClass::AirTaskingManagerClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
_last$ = -76						; size = 4
tv200 = -72						; size = 4
$T8 = -68						; size = 4
tv160 = -64						; size = 4
$T9 = -60						; size = 4
tv151 = -56						; size = 4
$T10 = -52						; size = 4
tv142 = -48						; size = 4
$T11 = -44						; size = 4
tv133 = -40						; size = 4
$T12 = -36						; size = 4
tv92 = -32						; size = 4
$T13 = -28						; size = 4
_cur$ = -24						; size = 4
_this$ = -20						; size = 4
_num$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z PROC		; AirTaskingManagerClass::AirTaskingManagerClass
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampManagerClass@@QAE@PAPAEPAJ@Z	; CampManagerClass::CampManagerClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7AirTaskingManagerClass@@6B@

; 192  : 	uchar			num;
; 193  : 	ATMAirbaseClass	*cur,*last=NULL;

	mov	DWORD PTR _last$[ebp], 0

; 194  : 
; 195  : 	// Zero other data (will be rebuilt)
; 196  : 	squadrons = 0;			

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+150], ax

; 197  : 	awacsList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN7@AirTasking
	push	0
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN8@AirTasking
$LN7@AirTasking:
	mov	DWORD PTR tv92[ebp], 0
$LN8@AirTasking:
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [eax+168], ecx

; 198  : 	tankerList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN9@AirTasking
	push	0
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN10@AirTasking
$LN9@AirTasking:
	mov	DWORD PTR tv133[ebp], 0
$LN10@AirTasking:
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+172], ecx

; 199  : 	ecmList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN11@AirTasking
	push	0
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN12@AirTasking
$LN11@AirTasking:
	mov	DWORD PTR tv142[ebp], 0
$LN12@AirTasking:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+176], ecx

; 200  : 	requestList = new ListClass (LADT_FREE_USER_DATA | LADT_SORTED_LIST);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN13@AirTasking
	push	3
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN14@AirTasking
$LN13@AirTasking:
	mov	DWORD PTR tv151[ebp], 0
$LN14@AirTasking:
	mov	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+180], ecx

; 201  : 	delayedList = new ListClass (LADT_FREE_USER_DATA | LADT_SORTED_LIST);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN15@AirTasking
	push	3
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN16@AirTasking
$LN15@AirTasking:
	mov	DWORD PTR tv160[ebp], 0
$LN16@AirTasking:
	mov	edx, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+184], ecx

; 202  : 	squadronList = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], 0

; 203  : 	packageList = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], 0

; 204  : 	supplyBase = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+200], 0

; 205  : 
; 206  : 	memcpychk(&flags, stream, sizeof(short), rem);				

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 207  : 	memcpychk(&averageCAStrength, stream, sizeof(short), rem);	

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 208  : 	memcpychk(&averageCAMissions, stream, sizeof(short), rem);	

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 154				; 0000009aH
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 209  : 	memcpychk(&sampleCycles, stream, sizeof(uchar), rem);		

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 157				; 0000009dH
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 210  : 	currentCAMissions = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+156], 0

; 211  : 	memcpychk(&num, stream, sizeof(uchar), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 212  : 	airbaseList = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0
$LN4@AirTasking:

; 213  : 	while (num)

	movzx	ecx, BYTE PTR _num$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@AirTasking

; 214  : 	{
; 215  : 		cur = new ATMAirbaseClass(stream, rem);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN17@AirTasking
	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0ATMAirbaseClass@@QAE@PAPAEPAJ@Z	; ATMAirbaseClass::ATMAirbaseClass
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN18@AirTasking
$LN17@AirTasking:
	mov	DWORD PTR tv200[ebp], 0
$LN18@AirTasking:
	mov	ecx, DWORD PTR tv200[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 216  : 		if (!airbaseList)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+196], 0
	jne	SHORT $LN2@AirTasking

; 217  : 			airbaseList = cur;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+196], edx

; 218  : 		else

	jmp	SHORT $LN1@AirTasking
$LN2@AirTasking:

; 219  : 			last->next = cur;

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN1@AirTasking:

; 220  : 		last = cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 221  : 		num --;

	mov	al, BYTE PTR _num$[ebp]
	sub	al, 1
	mov	BYTE PTR _num$[ebp], al

; 222  : 	}

	jmp	SHORT $LN4@AirTasking
$LN3@AirTasking:

; 223  : 	memcpychk(&cycle, stream, sizeof(uchar), rem);		

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 201				; 000000c9H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 224  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampManagerClass@@UAE@XZ		; CampManagerClass::~CampManagerClass
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$1:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$2:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$3:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$4:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$5:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z$6:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AirTaskingManagerClass@@QAE@PAPAEPAJ@Z ENDP		; AirTaskingManagerClass::AirTaskingManagerClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T2 = -76						; size = 4
$T3 = -72						; size = 4
$T4 = -68						; size = 4
$T5 = -64						; size = 4
$T6 = -60						; size = 4
tv161 = -56						; size = 4
$T7 = -52						; size = 4
tv152 = -48						; size = 4
$T8 = -44						; size = 4
tv143 = -40						; size = 4
$T9 = -36						; size = 4
tv134 = -32						; size = 4
$T10 = -28						; size = 4
tv93 = -24						; size = 4
$T11 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 2
_t$ = 12						; size = 1
??0AirTaskingManagerClass@@QAE@GE@Z PROC		; AirTaskingManagerClass::AirTaskingManagerClass
; _this$ = ecx

; 171  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AirTaskingManagerClass@@QAE@GE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _t$[ebp]
	push	eax
	movzx	ecx, WORD PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampManagerClass@@QAE@GE@Z		; CampManagerClass::CampManagerClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7AirTaskingManagerClass@@6B@

; 172  : 	flags = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+148], ax

; 173  : 	squadrons = 0;			

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+150], dx

; 174  : 	awacsList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN3@AirTasking
	push	0
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN4@AirTasking
$LN3@AirTasking:
	mov	DWORD PTR tv93[ebp], 0
$LN4@AirTasking:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR [edx+168], eax

; 175  : 	tankerList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN5@AirTasking
	push	0
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN6@AirTasking
$LN5@AirTasking:
	mov	DWORD PTR tv134[ebp], 0
$LN6@AirTasking:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR [edx+172], eax

; 176  : 	ecmList = new ListClass;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN7@AirTasking
	push	0
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN8@AirTasking
$LN7@AirTasking:
	mov	DWORD PTR tv143[ebp], 0
$LN8@AirTasking:
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx+176], eax

; 177  : 	requestList = new ListClass (LADT_FREE_USER_DATA | LADT_SORTED_LIST);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AirTasking
	push	3
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN10@AirTasking
$LN9@AirTasking:
	mov	DWORD PTR tv152[ebp], 0
$LN10@AirTasking:
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+180], eax

; 178  : 	delayedList = new ListClass (LADT_FREE_USER_DATA | LADT_SORTED_LIST);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN11@AirTasking
	push	3
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0ListClass@@QAE@E@Z			; ListClass::ListClass
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN12@AirTasking
$LN11@AirTasking:
	mov	DWORD PTR tv161[ebp], 0
$LN12@AirTasking:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+184], eax

; 179  : 	squadronList = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 0

; 180  : 	packageList = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], 0

; 181  : 	airbaseList = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0

; 182  : 	supplyBase = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+200], 0

; 183  : 	cycle = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+201], 0

; 184  : 	averageCAMissions = 500;

	mov	eax, 500				; 000001f4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+154], ax

; 185  : 	averageCAStrength = 50;

	mov	edx, 50					; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+152], dx

; 186  : 	currentCAMissions = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+156], 0

; 187  : 	sampleCycles = 0;	

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+157], 0

; 188  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampManagerClass@@UAE@XZ		; CampManagerClass::~CampManagerClass
__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$1:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$2:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$3:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$4:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0AirTaskingManagerClass@@QAE@GE@Z$5:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0AirTaskingManagerClass@@QAE@GE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AirTaskingManagerClass@@QAE@GE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AirTaskingManagerClass@@QAE@GE@Z ENDP		; AirTaskingManagerClass::AirTaskingManagerClass
; Function compile flags: /Odtp
;	COMDAT ??_GATMAirbaseClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GATMAirbaseClass@@QAEPAXI@Z PROC			; ATMAirbaseClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ATMAirbaseClass@@QAE@XZ		; ATMAirbaseClass::~ATMAirbaseClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GATMAirbaseClass@@QAEPAXI@Z ENDP			; ATMAirbaseClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\atm.h
;	COMDAT ?Size@ATMAirbaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@ATMAirbaseClass@@QAEHXZ PROC			; ATMAirbaseClass::Size, COMDAT
; _this$ = ecx

; 43   : 		int Size(void)					{ return sizeof(VU_ID) + ATM_MAX_CYCLES; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 40					; 00000028H
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@ATMAirbaseClass@@QAEHXZ ENDP			; ATMAirbaseClass::Size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
?Save@ATMAirbaseClass@@QAEHPAU_iobuf@@@Z PROC		; ATMAirbaseClass::Save
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : #ifdef CAMPTOOL
; 157  : 	if (gRenameIds)
; 158  : 		id.num_ = RenameTable[id.num_];
; 159  : #endif
; 160  : 	fwrite(&id, sizeof(VU_ID), 1, file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 161  : 	fwrite(schedule, sizeof(uchar), ATM_MAX_CYCLES, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	32					; 00000020H
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 162  : 	return Size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@ATMAirbaseClass@@QAEHXZ		; ATMAirbaseClass::Size

; 163  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@ATMAirbaseClass@@QAEHPAU_iobuf@@@Z ENDP		; ATMAirbaseClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@ATMAirbaseClass@@QAEHPAPAE@Z PROC			; ATMAirbaseClass::Save
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : #ifdef CAMPTOOL
; 146  : 	if (gRenameIds)
; 147  : 		id.num_ = RenameTable[id.num_];
; 148  : #endif
; 149  : 	memcpy(*stream, &id, sizeof(VU_ID));			*stream += sizeof(VU_ID);

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 150  : 	memcpy(*stream, schedule, ATM_MAX_CYCLES);		*stream += ATM_MAX_CYCLES;

	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 151  : 	return Size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@ATMAirbaseClass@@QAEHXZ		; ATMAirbaseClass::Size

; 152  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@ATMAirbaseClass@@QAEHPAPAE@Z ENDP			; ATMAirbaseClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ATMAirbaseClass@@QAE@XZ PROC				; ATMAirbaseClass::~ATMAirbaseClass
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1ATMAirbaseClass@@QAE@XZ ENDP				; ATMAirbaseClass::~ATMAirbaseClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
??0ATMAirbaseClass@@QAE@PAU_iobuf@@@Z PROC		; ATMAirbaseClass::ATMAirbaseClass
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 126  : 	fread(&id, sizeof(VU_ID), 1, file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 127  : #ifdef DEBUG
; 128  : 	id.num_ &= 0xffff;
; 129  : #endif
; 130  : 	fread(schedule, sizeof(uchar), ATM_MAX_CYCLES, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	32					; 00000020H
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 131  : 	usage = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0

; 132  : 	next = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 133  : 
; 134  : 	// Or in sortie masks - This is part of the hack for Dave
; 135  : 	//	for (int i=0; i<ATM_MAX_CYCLES; i++)
; 136  : 	//		schedule[i] |= SortieCycle[DEFAULT_SORTIE_RATE];
; 137  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0ATMAirbaseClass@@QAE@PAU_iobuf@@@Z ENDP		; ATMAirbaseClass::ATMAirbaseClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0ATMAirbaseClass@@QAE@PAPAEPAJ@Z PROC			; ATMAirbaseClass::ATMAirbaseClass
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 115  : 	memcpychk(&id, stream, sizeof(VU_ID), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 116  : #ifdef DEBUG
; 117  : 	id.num_ &= 0xffff;
; 118  : #endif
; 119  : 	memcpychk(schedule, stream, ATM_MAX_CYCLES, rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 120  : 	usage = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0

; 121  : 	next = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0

; 122  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0ATMAirbaseClass@@QAE@PAPAEPAJ@Z ENDP			; ATMAirbaseClass::ATMAirbaseClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_ent$ = 8						; size = 4
??0ATMAirbaseClass@@QAE@PAVCampBaseClass@@@Z PROC	; ATMAirbaseClass::ATMAirbaseClass
; _this$ = ecx

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 107  : 	id = ent->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 108  : 	memset(schedule, 0, sizeof(uchar)*ATM_MAX_CYCLES);

	push	32					; 00000020H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 109  : 	usage = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+40], 0

; 110  : 	next = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 111  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0ATMAirbaseClass@@QAE@PAVCampBaseClass@@@Z ENDP	; ATMAirbaseClass::ATMAirbaseClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\atm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ATMAirbaseClass@@QAE@XZ PROC				; ATMAirbaseClass::ATMAirbaseClass
; _this$ = ecx

; 98   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 99   : 	id = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx

; 100  : 	memset(schedule, 0, sizeof(uchar)*ATM_MAX_CYCLES);

	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 101  : 	usage = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0

; 102  : 	next = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 103  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ATMAirbaseClass@@QAE@XZ ENDP				; ATMAirbaseClass::ATMAirbaseClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\squadron.h
;	COMDAT ?GetAssigned@SquadronClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAssigned@SquadronClass@@QAEEXZ PROC			; SquadronClass::GetAssigned, COMDAT
; _this$ = ecx

; 80   : 	uchar GetAssigned (void) { return assigned; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+1458]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAssigned@SquadronClass@@QAEEXZ ENDP			; SquadronClass::GetAssigned
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\squadron.h
;	COMDAT ?GetRating@SquadronClass@@QAEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetRating@SquadronClass@@QAEEH@Z PROC			; SquadronClass::GetRating, COMDAT
; _this$ = ecx

; 71   : 	uchar GetRating(int i) { return rating[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [eax+1428]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRating@SquadronClass@@QAEEH@Z ENDP			; SquadronClass::GetRating
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ PROC ; PackageClass::GetMissionRequest, COMDAT
; _this$ = ecx

; 96   : 		MissionRequestClass *GetMissionRequest (void)	{ return &mis_request; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 392				; 00000188H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ENDP ; PackageClass::GetMissionRequest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetAAStrength@PackageClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAAStrength@PackageClass@@QAEFXZ PROC		; PackageClass::GetAAStrength, COMDAT
; _this$ = ecx

; 95   : 		short GetAAStrength (void)						{ return aa_strength; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+468]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAAStrength@PackageClass@@QAEFXZ ENDP		; PackageClass::GetAAStrength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetCountry@CampManagerClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@CampManagerClass@@UAEEXZ PROC		; CampManagerClass::GetCountry, COMDAT
; _this$ = ecx

; 63   : 	virtual uchar GetCountry(void){ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@CampManagerClass@@UAEEXZ ENDP		; CampManagerClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetTeam@CampManagerClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@CampManagerClass@@UAEEXZ PROC			; CampManagerClass::GetTeam, COMDAT
; _this$ = ecx

; 62   : 	virtual uchar GetTeam(void)   { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CampManagerClass@@UAEEXZ ENDP			; CampManagerClass::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetCampID@CampManagerClass@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampID@CampManagerClass@@UAEFXZ PROC		; CampManagerClass::GetCampID, COMDAT
; _this$ = ecx

; 61   : 	virtual short GetCampID(void) { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampID@CampManagerClass@@UAEFXZ ENDP		; CampManagerClass::GetCampID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?Sleep@CampManagerClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Sleep@CampManagerClass@@UAEHXZ PROC			; CampManagerClass::Sleep, COMDAT
; _this$ = ecx

; 56   : 	virtual int Sleep (void) {return 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep@CampManagerClass@@UAEHXZ ENDP			; CampManagerClass::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?Wake@CampManagerClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wake@CampManagerClass@@UAEHXZ PROC			; CampManagerClass::Wake, COMDAT
; _this$ = ecx

; 55   : 	virtual int Wake (void) {return 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Wake@CampManagerClass@@UAEHXZ ENDP			; CampManagerClass::Wake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetKias@CampManagerClass@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetKias@CampManagerClass@@UBEMXZ PROC			; CampManagerClass::GetKias, COMDAT
; _this$ = ecx

; 44   : 	virtual float GetKias() const { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKias@CampManagerClass@@UBEMXZ ENDP			; CampManagerClass::GetKias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetVt@CampManagerClass@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVt@CampManagerClass@@UBEMXZ PROC			; CampManagerClass::GetVt, COMDAT
; _this$ = ecx

; 43   : 	virtual float GetVt() const { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVt@CampManagerClass@@UBEMXZ ENDP			; CampManagerClass::GetVt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ PROC ; TeamClass::GetGroundAction, COMDAT
; _this$ = ecx

; 277  : 	TeamGndActionType *GetGroundAction (void) { return &groundAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 267				; 0000010bH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ENDP ; TeamClass::GetGroundAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ PROC	; UnitClass::GetFirstUnitWP, COMDAT
; _this$ = ecx

; 431  : 	WayPoint GetFirstUnitWP()				{ return wp_list; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ENDP	; UnitClass::GetFirstUnitWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ PROC		; UnitClass::GetTargetID, COMDAT
; _this$ = ecx

; 367  : 	VU_ID GetTargetID (void)						{ return target_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR [eax+216]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ ENDP		; UnitClass::GetTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ PROC	; UnitClass::GetTarget, COMDAT
; _this$ = ecx

; 366  : 	FalconEntity* GetTarget (void)					{ return (FalconEntity*) vuDatabase->Find(target_id); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	mov	edx, DWORD PTR [eax+212]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ENDP	; UnitClass::GetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitDestination@UnitClass@@QAEXFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?SetUnitDestination@UnitClass@@QAEXFF@Z PROC		; UnitClass::SetUnitDestination, COMDAT
; _this$ = ecx

; 356  : 	void SetUnitDestination (GridIndex x, GridIndex y)	{ 	dest_x = (GridIndex)(x+1); dest_y = (GridIndex)(y+1); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR _x$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+200], ax
	movsx	edx, WORD PTR _y$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+202], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitDestination@UnitClass@@QAEXFF@Z ENDP		; UnitClass::SetUnitDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Diverted@UnitClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Diverted@UnitClass@@QAEHXZ PROC			; UnitClass::Diverted, COMDAT
; _this$ = ecx

; 332  : 	int Diverted (void)								{ return (int)unit_flags & U_DIVERTED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 4194304				; 00400000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Diverted@UnitClass@@QAEHXZ ENDP			; UnitClass::Diverted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Final@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Final@UnitClass@@QBEHXZ PROC				; UnitClass::Final, COMDAT
; _this$ = ecx

; 330  : 	int Final () const								{ return (int)unit_flags & U_FINAL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1048576				; 00100000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Final@UnitClass@@QBEHXZ ENDP				; UnitClass::Final
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Aborted@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Aborted@UnitClass@@QBEHXZ PROC				; UnitClass::Aborted, COMDAT
; _this$ = ecx

; 321  : 	int Aborted () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Aborted@UnitClass@@QBEHXZ ENDP				; UnitClass::Aborted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Broken@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Broken@UnitClass@@QBEHXZ PROC				; UnitClass::Broken, COMDAT
; _this$ = ecx

; 320  : 	int Broken () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Broken@UnitClass@@QBEHXZ ENDP				; UnitClass::Broken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Scripted@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Scripted@UnitClass@@QBEHXZ PROC			; UnitClass::Scripted, COMDAT
; _this$ = ecx

; 314  : 	int Scripted ()	 const							{ return (int)unit_flags & U_SCRIPTED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 256				; 00000100H
	mov	esp, ebp
	pop	ebp
	ret	0
?Scripted@UnitClass@@QBEHXZ ENDP			; UnitClass::Scripted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Engaged@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Engaged@UnitClass@@QBEHXZ PROC				; UnitClass::Engaged, COMDAT
; _this$ = ecx

; 313  : 	int Engaged() const								{ return (int)unit_flags & U_ENGAGED; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 64					; 00000040H
	mov	esp, ebp
	pop	ebp
	ret	0
?Engaged@UnitClass@@QBEHXZ ENDP				; UnitClass::Engaged
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?DontPlan@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DontPlan@UnitClass@@QBEHXZ PROC			; UnitClass::DontPlan, COMDAT
; _this$ = ecx

; 311  : 	int DontPlan() const							{ return (int)unit_flags & U_NO_PLANNING; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?DontPlan@UnitClass@@QBEHXZ ENDP			; UnitClass::DontPlan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampLeaveCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampLeaveCriticalSection@@YAXXZ PROC			; CampLeaveCriticalSection, COMDAT

; 51   : inline void CampLeaveCriticalSection(){ F4LeaveCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampLeaveCriticalSection@@YAXXZ ENDP			; CampLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampEnterCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampEnterCriticalSection@@YAXXZ PROC			; CampEnterCriticalSection, COMDAT

; 50   : inline void CampEnterCriticalSection(){ F4EnterCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampEnterCriticalSection@@YAXXZ ENDP			; CampEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveStatus@ObjectiveClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetObjectiveStatus, COMDAT
; _this$ = ecx

; 270  : 	uchar GetObjectiveStatus (void)							{	return obj_data.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+199]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?HasDelta@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasDelta@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::HasDelta, COMDAT
; _this$ = ecx

; 284  : 	int HasDelta (void)							{	return local_flags & CBC_HAS_DELTA; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?HasDelta@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::HasDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GMissionRequestClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMissionRequestClass@@QAEPAXI@Z PROC			; MissionRequestClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMissionRequestClass@@QAEPAXI@Z ENDP			; MissionRequestClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPLocation@WayPointClass@@QBEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetWPLocation@WayPointClass@@QBEXPAF0@Z PROC		; WayPointClass::GetWPLocation, COMDAT
; _this$ = ecx

; 205  : 	void GetWPLocation (GridIndex* x, GridIndex* y) const { *x = GridX; *y = GridY; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetWPLocation@WayPointClass@@QBEXPAF0@Z ENDP		; WayPointClass::GetWPLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPDepartureTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPDepartureTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPDepartureTime, COMDAT
; _this$ = ecx

; 203  : 	CampaignTime GetWPDepartureTime()				{ return Depart; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPDepartureTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPDepartureTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPArrivalTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPArrivalTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPArrivalTime, COMDAT
; _this$ = ecx

; 202  : 	CampaignTime GetWPArrivalTime()					{ return Arrive; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPArrivalTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPArrivalTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAltitude@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAltitude@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPAltitude, COMDAT
; _this$ = ecx

; 199  : 	int GetWPAltitude()								{ return (int)(GridZ*GRIDZ_SCALE_FACTOR); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	imul	eax, 10					; 0000000aH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAltitude@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPSpeed@WayPointClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPSpeed@WayPointClass@@QAEMXZ PROC			; WayPointClass::GetWPSpeed, COMDAT
; _this$ = ecx

; 197  : 	float GetWPSpeed (void)							{ return Speed; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPSpeed@WayPointClass@@QAEMXZ ENDP			; WayPointClass::GetWPSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetPrevWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrevWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetPrevWP, COMDAT
; _this$ = ecx

; 176  : 	WayPoint GetPrevWP (void)						{ return PrevWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrevWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetPrevWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFlags@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFlags@WayPointClass@@QAEKXZ PROC			; WayPointClass::GetWPFlags, COMDAT
; _this$ = ecx

; 173  : 	ulong GetWPFlags (void)							{ return (ulong)Flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFlags@WayPointClass@@QAEKXZ ENDP			; WayPointClass::GetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPRouteAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPRouteAction@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPRouteAction, COMDAT
; _this$ = ecx

; 171  : 	int GetWPRouteAction(void)						{ return (int)RouteAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+25]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPRouteAction@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPRouteAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ PROC	; WayPointClass::GetWPTargetID, COMDAT
; _this$ = ecx

; 167  : 	VU_ID GetWPTargetID (void)						{ return TargetID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ENDP	; WayPointClass::GetWPTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?UnSetWPFlag@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?UnSetWPFlag@WayPointClass@@QAEXK@Z PROC		; WayPointClass::UnSetWPFlag, COMDAT
; _this$ = ecx

; 165  : 	void UnSetWPFlag (ulong f)						{ Flags &= ~((ulong)(f)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _f$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?UnSetWPFlag@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::UnSetWPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPRouteAction@WayPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetWPRouteAction@WayPointClass@@QAEXH@Z PROC		; WayPointClass::SetWPRouteAction, COMDAT
; _this$ = ecx

; 161  : 	void SetWPRouteAction (int a)					{ RouteAction = (uchar) a; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _a$[ebp]
	mov	BYTE PTR [eax+25], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPRouteAction@WayPointClass@@QAEXH@Z ENDP		; WayPointClass::SetWPRouteAction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GListClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GListClass@@QAEPAXI@Z PROC				; ListClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ListClass@@QAE@XZ			; ListClass::~ListClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GListClass@@QAEPAXI@Z ENDP				; ListClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetLastElement@ListClass@@QAEPAVListElementClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastElement@ListClass@@QAEPAVListElementClass@@XZ PROC ; ListClass::GetLastElement, COMDAT
; _this$ = ecx

; 83   : 		ListElementClass* GetLastElement(void)		{ return end; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastElement@ListClass@@QAEPAVListElementClass@@XZ ENDP ; ListClass::GetLastElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ PROC ; ListClass::GetFirstElement, COMDAT
; _this$ = ecx

; 82   : 		ListElementClass* GetFirstElement(void)		{ return front; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ENDP ; ListClass::GetFirstElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetPrev@ListElementClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrev@ListElementClass@@QAEPAV1@XZ PROC		; ListElementClass::GetPrev, COMDAT
; _this$ = ecx

; 46   : 		ListElementClass* GetPrev(void)				{ return prev; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrev@ListElementClass@@QAEPAV1@XZ ENDP		; ListElementClass::GetPrev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetNext@ListElementClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNext@ListElementClass@@QAEPAV1@XZ PROC		; ListElementClass::GetNext, COMDAT
; _this$ = ecx

; 45   : 		ListElementClass* GetNext(void)				{ return next; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@ListElementClass@@QAEPAV1@XZ ENDP		; ListElementClass::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetUserData@ListElementClass@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserData@ListElementClass@@QAEPAXXZ PROC		; ListElementClass::GetUserData, COMDAT
; _this$ = ecx

; 39   : 		void* GetUserData(void)						{ return user_data; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUserData@ListElementClass@@QAEPAXXZ ENDP		; ListElementClass::GetUserData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetIRFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIRFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetIRFactor, COMDAT
; _this$ = ecx

; 164  : 	virtual float GetIRFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRCSFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRCSFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetRCSFactor, COMDAT
; _this$ = ecx

; 163  : 	virtual float GetRCSFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::HasAreaJamming, COMDAT
; _this$ = ecx

; 162  : 	virtual int HasAreaJamming (void)			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::HasAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::HasSPJamming, COMDAT
; _this$ = ecx

; 161  : 	virtual int HasSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::HasSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsAreaJamming, COMDAT
; _this$ = ecx

; 160  : 	virtual int IsAreaJamming (void)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSPJamming, COMDAT
; _this$ = ecx

; 159  : 	virtual int IsSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ PROC	; FalconEntity::GetMovementType, COMDAT
; _this$ = ecx

; 149  : 	virtual MoveType GetMovementType (void)		{ return NoMove; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ENDP	; FalconEntity::GetMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEmitting@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEmitting, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsEmitting (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsExploding@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsExploding@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsExploding, COMDAT
; _this$ = ecx

; 143  : 	virtual int IsExploding (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMover@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMover, COMDAT
; _this$ = ecx

; 134  : 	virtual int IsMover (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z PROC	; FalconEntity::HasEntity, COMDAT
; _this$ = ecx

; 129  : 	virtual int HasEntity(VuEntity *e) const    { return this == e; } // sfr: added for new driver

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _e$[ebp]
	jne	SHORT $LN3@HasEntity
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HasEntity:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z ENDP	; FalconEntity::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?OnGround@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnGround@FalconEntity@@UAEHXZ PROC			; FalconEntity::OnGround, COMDAT
; _this$ = ecx

; 128  : 	virtual int OnGround (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@FalconEntity@@UAEHXZ ENDP			; FalconEntity::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampaign@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsCampaign@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsCampaign, COMDAT
; _this$ = ecx

; 101  : 		{return (falconType & FalconCampaignEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 1
	je	SHORT $LN3@IsCampaign
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsCampaign
$LN3@IsCampaign:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsCampaign:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampaign@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsCampBase, COMDAT
; _this$ = ecx

; 99   : 	virtual bool IsCampBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSimBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsSimBase, COMDAT
; _this$ = ecx

; 98   : 	virtual bool IsSimBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC	; VuBin<VuEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP	; VuBin<VuEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestReliableTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestReliableTransmit@VuMessage@@QAEXXZ PROC		; VuMessage::RequestReliableTransmit, COMDAT
; _this$ = ecx

; 180  : 	void RequestReliableTransmit() { flags_ |= VU_RELIABLE_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestReliableTransmit@VuMessage@@QAEXXZ ENDP		; VuMessage::RequestReliableTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ PROC		; VuEntity::VuState, COMDAT
; _this$ = ecx

; 153  : 	VU_MEM VuState() const    { return vuState_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ ENDP		; VuEntity::VuState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
END
