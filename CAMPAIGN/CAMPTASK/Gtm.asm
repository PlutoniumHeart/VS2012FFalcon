; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPTASK\Gtm.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?DM@@3MA					; DM
PUBLIC	?IM@@3MA					; IM
PUBLIC	?Assigned@@3HA					; Assigned
PUBLIC	?AssignmentDistance@@3HA			; AssignmentDistance
PUBLIC	?sOffensiveAssigned@@3HA			; sOffensiveAssigned
PUBLIC	?sOffensiveDesired@@3HA				; sOffensiveDesired
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?checks@@3HA					; checks
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?runs@@3HA					; runs
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?DM@@3MA DD	01H DUP (?)				; DM
?IM@@3MA DD	01H DUP (?)				; IM
?Assigned@@3HA DD 01H DUP (?)				; Assigned
?AssignmentDistance@@3HA DD 01H DUP (?)			; AssignmentDistance
?sOffensiveAssigned@@3HA DD 01H DUP (?)			; sOffensiveAssigned
?sOffensiveDesired@@3HA DD 01H DUP (?)			; sOffensiveDesired
?checks@@3HA DD	01H DUP (?)				; checks
?runs@@3HA DD	01H DUP (?)				; runs
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::get
PUBLIC	?IsSimBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsSimBase
PUBLIC	?IsCampBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsCampBase
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?OnGround@FalconEntity@@UAEHXZ			; FalconEntity::OnGround
PUBLIC	?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z	; FalconEntity::HasEntity
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsMover@FalconEntity@@UAEHXZ			; FalconEntity::IsMover
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsExploding@FalconEntity@@UAEHXZ		; FalconEntity::IsExploding
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsEmitting@FalconEntity@@UAEHXZ		; FalconEntity::IsEmitting
PUBLIC	?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ; FalconEntity::GetMovementType
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?IsSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsSPJamming
PUBLIC	?IsAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsAreaJamming
PUBLIC	?HasSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasSPJamming
PUBLIC	?HasAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasAreaJamming
PUBLIC	?GetRCSFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetRCSFactor
PUBLIC	?GetIRFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetIRFactor
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?GetUserData@ListElementClass@@QAEPAXXZ		; ListElementClass::GetUserData
PUBLIC	?GetNext@ListElementClass@@QAEPAV1@XZ		; ListElementClass::GetNext
PUBLIC	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?IsFrontline@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsFrontline
PUBLIC	?IsSecondline@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsSecondline
PUBLIC	?IsThirdline@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsThirdline
PUBLIC	?IsNearfront@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsNearfront
PUBLIC	?IsBeach@ObjectiveClass@@QAEHXZ			; ObjectiveClass::IsBeach
PUBLIC	?SamSite@ObjectiveClass@@QAEHXZ			; ObjectiveClass::SamSite
PUBLIC	?ArtillerySite@ObjectiveClass@@QAEHXZ		; ObjectiveClass::ArtillerySite
PUBLIC	?CommandoSite@ObjectiveClass@@QAEHXZ		; ObjectiveClass::CommandoSite
PUBLIC	?RadarSite@ObjectiveClass@@QAEHXZ		; ObjectiveClass::RadarSite
PUBLIC	?Abandoned@ObjectiveClass@@QAEHXZ		; ObjectiveClass::Abandoned
PUBLIC	?NeedRepair@ObjectiveClass@@QAEHXZ		; ObjectiveClass::NeedRepair
PUBLIC	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ	; ObjectiveClass::GetObjectiveParent
PUBLIC	?GetObjectivePriority@ObjectiveClass@@QAEFXZ	; ObjectiveClass::GetObjectivePriority
PUBLIC	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ	; ObjectiveClass::GetObjectiveStatus
PUBLIC	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
PUBLIC	?GetDefensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetDefensiveAirAction
PUBLIC	?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetOffensiveAirAction
PUBLIC	?GetGroundActionType@TeamClass@@QAEEXZ		; TeamClass::GetGroundActionType
PUBLIC	?Assigned@UnitClass@@QBEHXZ			; UnitClass::Assigned
PUBLIC	?Scripted@UnitClass@@QBEHXZ			; UnitClass::Scripted
PUBLIC	?Commando@UnitClass@@QBEHXZ			; UnitClass::Commando
PUBLIC	?Broken@UnitClass@@QBEHXZ			; UnitClass::Broken
PUBLIC	?GetVt@CampManagerClass@@UBEMXZ			; CampManagerClass::GetVt
PUBLIC	?GetKias@CampManagerClass@@UBEMXZ		; CampManagerClass::GetKias
PUBLIC	?Wake@CampManagerClass@@UAEHXZ			; CampManagerClass::Wake
PUBLIC	?Sleep@CampManagerClass@@UAEHXZ			; CampManagerClass::Sleep
PUBLIC	?GetCampID@CampManagerClass@@UAEFXZ		; CampManagerClass::GetCampID
PUBLIC	?GetTeam@CampManagerClass@@UAEEXZ		; CampManagerClass::GetTeam
PUBLIC	?GetCountry@CampManagerClass@@UAEEXZ		; CampManagerClass::GetCountry
PUBLIC	?GetLocation@DivisionClass@@QAEXPAF0@Z		; DivisionClass::GetLocation
PUBLIC	??0GroundTaskingManagerClass@@QAE@GE@Z		; GroundTaskingManagerClass::GroundTaskingManagerClass
PUBLIC	??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z	; GroundTaskingManagerClass::GroundTaskingManagerClass
PUBLIC	??0GroundTaskingManagerClass@@QAE@PAU_iobuf@@@Z	; GroundTaskingManagerClass::GroundTaskingManagerClass
PUBLIC	??1GroundTaskingManagerClass@@UAE@XZ		; GroundTaskingManagerClass::~GroundTaskingManagerClass
PUBLIC	?SaveSize@GroundTaskingManagerClass@@UAEHXZ	; GroundTaskingManagerClass::SaveSize
PUBLIC	?Save@GroundTaskingManagerClass@@UAEHPAPAE@Z	; GroundTaskingManagerClass::Save
PUBLIC	?Save@GroundTaskingManagerClass@@UAEHPAU_iobuf@@@Z ; GroundTaskingManagerClass::Save
PUBLIC	?Handle@GroundTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z ; GroundTaskingManagerClass::Handle
PUBLIC	?DoCalculations@GroundTaskingManagerClass@@UAEXXZ ; GroundTaskingManagerClass::DoCalculations
PUBLIC	?Task@GroundTaskingManagerClass@@UAEHXZ		; GroundTaskingManagerClass::Task
PUBLIC	?Setup@GroundTaskingManagerClass@@QAEXXZ	; GroundTaskingManagerClass::Setup
PUBLIC	?Cleanup@GroundTaskingManagerClass@@QAEXXZ	; GroundTaskingManagerClass::Cleanup
PUBLIC	?GetAddBits@GroundTaskingManagerClass@@QAEHPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::GetAddBits
PUBLIC	?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z ; GroundTaskingManagerClass::BuildObjectiveLists
PUBLIC	?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z ; GroundTaskingManagerClass::CollectGroundAssets
PUBLIC	?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToList
PUBLIC	?AddToLists@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToLists
PUBLIC	?IsValidObjective@GroundTaskingManagerClass@@QAEHHPAVObjectiveClass@@@Z ; GroundTaskingManagerClass::IsValidObjective
PUBLIC	?AssignUnit@GroundTaskingManagerClass@@QAEHPAVUnitClass@@HPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::AssignUnit
PUBLIC	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits
PUBLIC	?AssignObjective@GroundTaskingManagerClass@@QAEHPAVGndObjDataType@@HH@Z ; GroundTaskingManagerClass::AssignObjective
PUBLIC	?ScoreUnit@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z ; GroundTaskingManagerClass::ScoreUnit
PUBLIC	?ScoreUnitFast@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z ; GroundTaskingManagerClass::ScoreUnitFast
PUBLIC	?FinalizeOrders@GroundTaskingManagerClass@@QAEXXZ ; GroundTaskingManagerClass::FinalizeOrders
PUBLIC	?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z ; GroundTaskingManagerClass::SendGTMMessage
PUBLIC	?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::RequestEngineer
PUBLIC	?RequestAirDefense@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::RequestAirDefense
PUBLIC	??_GGroundTaskingManagerClass@@UAEPAXI@Z	; GroundTaskingManagerClass::`scalar deleting destructor'
PUBLIC	?EncodePrimaryObjectiveList@@YAFEPAPAE@Z	; EncodePrimaryObjectiveList
PUBLIC	?DecodePrimaryObjectiveList@@YAXPAEPAVFalconEntity@@@Z ; DecodePrimaryObjectiveList
PUBLIC	?SendPrimaryObjectiveList@@YAXE@Z		; SendPrimaryObjectiveList
PUBLIC	?SavePrimaryObjectiveList@@YAXPAD@Z		; SavePrimaryObjectiveList
PUBLIC	?LoadPrimaryObjectiveList@@YAHPAD@Z		; LoadPrimaryObjectiveList
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?GetTopPriorityObjectives@@YAHHQAPAD@Z		; GetTopPriorityObjectives
PUBLIC	?ScoreObj@@YAHHHHHHH@Z				; ScoreObj
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7GroundTaskingManagerClass@@6B@		; GroundTaskingManagerClass::`vftable'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_03DPEHCIMJ@pol?$AA@			; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4GroundTaskingManagerClass@@6B@		; GroundTaskingManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGroundTaskingManagerClass@@@8		; GroundTaskingManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3GroundTaskingManagerClass@@8		; GroundTaskingManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GroundTaskingManagerClass@@8		; GroundTaskingManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GroundTaskingManagerClass@@8	; GroundTaskingManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CampManagerClass@@8		; CampManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCampManagerClass@@@8			; CampManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3CampManagerClass@@8			; CampManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CampManagerClass@@8			; CampManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3e4ccccd
PUBLIC	__real@40000000
PUBLIC	__real@41700000
PUBLIC	__real@42480000
PUBLIC	__real@42c80000
PUBLIC	__real@43480000
PUBLIC	__real@44610000
PUBLIC	__real@7f7fffff
PUBLIC	__real@bf800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?CleanupData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::CleanupData
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetRadarType@FalconEntity@@UAEHXZ:PROC		; FalconEntity::GetRadarType
EXTRN	?GetDamageModifiers@FalconEntity@@UAEPAEXZ:PROC	; FalconEntity::GetDamageModifiers
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z:PROC	; OpenCampFile
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z:PROC ; FindObjective
EXTRN	?IsPrimary@ObjectiveClass@@QAEHXZ:PROC		; ObjectiveClass::IsPrimary
EXTRN	?IsSecondary@ObjectiveClass@@QAEHXZ:PROC	; ObjectiveClass::IsSecondary
EXTRN	?SetNeedRepair@ObjectiveClass@@QAEXH@Z:PROC	; ObjectiveClass::SetNeedRepair
EXTRN	?GetObjectivePrimary@ObjectiveClass@@QAEPAV1@XZ:PROC ; ObjectiveClass::GetObjectivePrimary
EXTRN	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetFirstObjective
EXTRN	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetNextObjective
EXTRN	?SelectGroundAction@TeamClass@@QAEXXZ:PROC	; TeamClass::SelectGroundAction
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?CloseCampFile@@YAXPAU_iobuf@@@Z:PROC		; CloseCampFile
EXTRN	?ReadCampFile@@YA?AUCampaignData@@PAD0@Z:PROC	; ReadCampFile
EXTRN	?SetAssigned@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetAssigned
EXTRN	?SetOrdered@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetOrdered
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?KillUnit@UnitClass@@QAEXXZ:PROC		; UnitClass::KillUnit
EXTRN	?GetUnitRoleScore@UnitClass@@QAEHHHH@Z:PROC	; UnitClass::GetUnitRoleScore
EXTRN	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetFirstUnit
EXTRN	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetNextUnit
EXTRN	?DistSqu@@YAHFFFF@Z:PROC			; DistSqu
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?DistanceToFront@@YAMFF@Z:PROC			; DistanceToFront
EXTRN	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z:PROC ; FindNearestObjective
EXTRN	??0CampManagerClass@@QAE@GE@Z:PROC		; CampManagerClass::CampManagerClass
EXTRN	??0CampManagerClass@@QAE@PAPAEPAJ@Z:PROC	; CampManagerClass::CampManagerClass
EXTRN	??0CampManagerClass@@QAE@PAU_iobuf@@@Z:PROC	; CampManagerClass::CampManagerClass
EXTRN	??1CampManagerClass@@UAE@XZ:PROC		; CampManagerClass::~CampManagerClass
EXTRN	?InitData@CampManagerClass@@UAEXXZ:PROC		; CampManagerClass::InitData
EXTRN	?SaveSize@CampManagerClass@@UAEHXZ:PROC		; CampManagerClass::SaveSize
EXTRN	?Save@CampManagerClass@@UAEHPAPAE@Z:PROC	; CampManagerClass::Save
EXTRN	?Save@CampManagerClass@@UAEHPAU_iobuf@@@Z:PROC	; CampManagerClass::Save
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?Handle@CampManagerClass@@UAEHPAVVuSessionEvent@@@Z:PROC ; CampManagerClass::Handle
EXTRN	?InsertionCallback@CampManagerClass@@UAEHXZ:PROC ; CampManagerClass::InsertionCallback
EXTRN	?RemovalCallback@CampManagerClass@@UAEHXZ:PROC	; CampManagerClass::RemovalCallback
EXTRN	?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z:PROC ; AirTaskingManagerClass::FindATMAirbase
EXTRN	?GetDivisionByUnit@@YAPAVDivisionClass@@PAVUnitClass@@@Z:PROC ; GetDivisionByUnit
EXTRN	??0UnitScoreNode@@QAE@XZ:PROC			; UnitScoreNode::UnitScoreNode
EXTRN	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z:PROC	; UnitScoreNode::Insert
EXTRN	?Remove@UnitScoreNode@@QAEPAV1@PAV1@@Z:PROC	; UnitScoreNode::Remove
EXTRN	?Purge@UnitScoreNode@@QAEPAV1@XZ:PROC		; UnitScoreNode::Purge
EXTRN	??0GndObjDataType@@QAE@XZ:PROC			; GndObjDataType::GndObjDataType
EXTRN	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z:PROC	; GndObjDataType::Insert
EXTRN	?Remove@GndObjDataType@@QAEPAV1@PAV1@@Z:PROC	; GndObjDataType::Remove
EXTRN	?Remove@GndObjDataType@@QAEPAV1@PAVObjectiveClass@@@Z:PROC ; GndObjDataType::Remove
EXTRN	?Purge@GndObjDataType@@QAEPAV1@XZ:PROC		; GndObjDataType::Purge
EXTRN	?Sort@GndObjDataType@@QAEPAV1@H@Z:PROC		; GndObjDataType::Sort
EXTRN	?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z:PROC ; GndObjDataType::InsertUnit
EXTRN	?RemoveUnitFromAll@GndObjDataType@@QAEXPAVUnitClass@@@Z:PROC ; GndObjDataType::RemoveUnitFromAll
EXTRN	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z:PROC ; GetPOData
EXTRN	?GetGroundRole@@YAHH@Z:PROC			; GetGroundRole
EXTRN	?GetGroundOrders@@YAHH@Z:PROC			; GetGroundOrders
EXTRN	??_EGroundTaskingManagerClass@@UAEPAXI@Z:PROC	; GroundTaskingManagerClass::`vector deleting destructor'
EXTRN	??0FalconGndTaskingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconGndTaskingMessage::FalconGndTaskingMessage
EXTRN	??0FalconCampDataMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconCampDataMessage::FalconCampDataMessage
EXTRN	?AddStringToBuffer@@YAXPAD0@Z:PROC		; AddStringToBuffer
EXTRN	?ReadIndexedString@@YAXHPADH@Z:PROC		; ReadIndexedString
EXTRN	?FindUnitSupportRole@@YAHPAVUnitClass@@@Z:PROC	; FindUnitSupportRole
EXTRN	?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z:PROC ; CostToArrive
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AllParentList@@3PAVVuLinkedList@@A:DWORD	; AllParentList
EXTRN	?AllObjList@@3PAVVuLinkedList@@A:DWORD		; AllObjList
EXTRN	?POList@@3PAVFalconPrivateOrderedList@@A:DWORD	; POList
EXTRN	?PODataList@@3PAVListClass@@A:DWORD		; PODataList
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?MIN_TASK_GROUND@@3FA:WORD			; MIN_TASK_GROUND
EXTRN	?OBJ_GROUND_PATH_MAX_COST@@3FA:WORD		; OBJ_GROUND_PATH_MAX_COST
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@44610000
CONST	SEGMENT
__real@44610000 DD 044610000r			; 900
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CampManagerClass@@8
rdata$r	SEGMENT
??_R2CampManagerClass@@8 DD FLAT:??_R1A@?0A@EA@CampManagerClass@@8 ; CampManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CampManagerClass@@8
rdata$r	SEGMENT
??_R3CampManagerClass@@8 DD 00H				; CampManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CampManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCampManagerClass@@@8
_DATA	SEGMENT
??_R0?AVCampManagerClass@@@8 DD FLAT:??_7type_info@@6B@	; CampManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCampManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CampManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CampManagerClass@@8 DD FLAT:??_R0?AVCampManagerClass@@@8 ; CampManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CampManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@GroundTaskingManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GroundTaskingManagerClass@@8 DD FLAT:??_R0?AVGroundTaskingManagerClass@@@8 ; GroundTaskingManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GroundTaskingManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2GroundTaskingManagerClass@@8
rdata$r	SEGMENT
??_R2GroundTaskingManagerClass@@8 DD FLAT:??_R1A@?0A@EA@GroundTaskingManagerClass@@8 ; GroundTaskingManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CampManagerClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3GroundTaskingManagerClass@@8
rdata$r	SEGMENT
??_R3GroundTaskingManagerClass@@8 DD 00H		; GroundTaskingManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2GroundTaskingManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGroundTaskingManagerClass@@@8
_DATA	SEGMENT
??_R0?AVGroundTaskingManagerClass@@@8 DD FLAT:??_7type_info@@6B@ ; GroundTaskingManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGroundTaskingManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4GroundTaskingManagerClass@@6B@
rdata$r	SEGMENT
??_R4GroundTaskingManagerClass@@6B@ DD 00H		; GroundTaskingManagerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGroundTaskingManagerClass@@@8
	DD	FLAT:??_R3GroundTaskingManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DPEHCIMJ@pol?$AA@
CONST	SEGMENT
??_C@_03DPEHCIMJ@pol?$AA@ DB 'pol', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7GroundTaskingManagerClass@@6B@
CONST	SEGMENT
??_7GroundTaskingManagerClass@@6B@ DD FLAT:??_R4GroundTaskingManagerClass@@6B@ ; GroundTaskingManagerClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@GroundTaskingManagerClass@@UAEHXZ
	DD	FLAT:?Save@GroundTaskingManagerClass@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@GroundTaskingManagerClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@GroundTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@CampManagerClass@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EGroundTaskingManagerClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@CampManagerClass@@UAEHXZ
	DD	FLAT:?RemovalCallback@CampManagerClass@@UAEHXZ
	DD	FLAT:?InitData@CampManagerClass@@UAEXXZ
	DD	FLAT:?CleanupData@FalconEntity@@UAEXXZ
	DD	FLAT:?IsSimBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?IsCampBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?Wake@CampManagerClass@@UAEHXZ
	DD	FLAT:?Sleep@CampManagerClass@@UAEHXZ
	DD	FLAT:?GetCampID@CampManagerClass@@UAEFXZ
	DD	FLAT:?GetTeam@CampManagerClass@@UAEEXZ
	DD	FLAT:?GetCountry@CampManagerClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@FalconEntity@@UAEHXZ
	DD	FLAT:?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@FalconEntity@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@FalconEntity@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@FalconEntity@@UAEHXZ
	DD	FLAT:?GetVt@CampManagerClass@@UBEMXZ
	DD	FLAT:?GetKias@CampManagerClass@@UBEMXZ
	DD	FLAT:?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?GetRCSFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetIRFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetRadarType@FalconEntity@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@FalconEntity@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?Task@GroundTaskingManagerClass@@UAEHXZ
	DD	FLAT:?DoCalculations@GroundTaskingManagerClass@@UAEXXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SendPrimaryObjectiveList@@YAXE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendPrimaryObjectiveList@@YAXE@Z$0
__unwindtable$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z$0
__unwindtable$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z$0
__unwindtable$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z$0
__unwindtable$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z$0
__unwindtable$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ$0
__unwindtable$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z$0
__unwindtable$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z$2
__ehfuncinfo$?SendPrimaryObjectiveList@@YAXE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendPrimaryObjectiveList@@YAXE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_orders$ = 8						; size = 4
_os$ = 12						; size = 4
_ss$ = 16						; size = 4
_ps$ = 20						; size = 4
_pps$ = 24						; size = 4
_fs$ = 28						; size = 4
?ScoreObj@@YAHHHHHHH@Z PROC				; ScoreObj

; 492  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 493  : 	switch (orders)

	mov	eax, DWORD PTR _orders$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	ja	SHORT $LN3@ScoreObj
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN13@ScoreObj[edx]
	jmp	DWORD PTR $LN14@ScoreObj[eax*4]
$LN8@ScoreObj:

; 494  : 	{
; 495  : 			case GORD_CAPTURE:
; 496  : 			case GORD_SECURE:
; 497  : 			case GORD_ASSAULT:
; 498  : 			case GORD_AIRBORNE:
; 499  : 			case GORD_DEFEND:
; 500  : 			case GORD_RECON:
; 501  : 					return os + ss + ps - fs;

	mov	eax, DWORD PTR _os$[ebp]
	add	eax, DWORD PTR _ss$[ebp]
	add	eax, DWORD PTR _ps$[ebp]
	sub	eax, DWORD PTR _fs$[ebp]
	jmp	SHORT $LN11@ScoreObj

; 502  : 					break;

	jmp	SHORT $LN9@ScoreObj
$LN7@ScoreObj:

; 503  : 			case GORD_SUPPORT:
; 504  : 					return os - fs;

	mov	eax, DWORD PTR _os$[ebp]
	sub	eax, DWORD PTR _fs$[ebp]
	jmp	SHORT $LN11@ScoreObj

; 505  : 					break;

	jmp	SHORT $LN9@ScoreObj
$LN6@ScoreObj:

; 506  : 			case GORD_COMMANDO:
; 507  : 			case GORD_RADAR:
; 508  : 					return os;

	mov	eax, DWORD PTR _os$[ebp]
	jmp	SHORT $LN11@ScoreObj

; 509  : 					break;

	jmp	SHORT $LN9@ScoreObj
$LN5@ScoreObj:

; 510  : 			case GORD_REPAIR:
; 511  : 					return os + ss + ps;

	mov	eax, DWORD PTR _os$[ebp]
	add	eax, DWORD PTR _ss$[ebp]
	add	eax, DWORD PTR _ps$[ebp]
	jmp	SHORT $LN11@ScoreObj

; 512  : 					break;

	jmp	SHORT $LN9@ScoreObj
$LN4@ScoreObj:

; 513  : 			case GORD_AIRDEFENSE:
; 514  : 					return os + ss + ps;

	mov	eax, DWORD PTR _os$[ebp]
	add	eax, DWORD PTR _ss$[ebp]
	add	eax, DWORD PTR _ps$[ebp]
	jmp	SHORT $LN11@ScoreObj

; 515  : 					break;

	jmp	SHORT $LN9@ScoreObj
$LN3@ScoreObj:

; 516  : 			case GORD_RESERVE:
; 517  : 			default:
; 518  : 					// KCK EXPERIMENTAL: Only assign reserve objectives which are near the front
; 519  : 					if (fs > 60 || fs < 20)

	cmp	DWORD PTR _fs$[ebp], 60			; 0000003cH
	jg	SHORT $LN1@ScoreObj
	cmp	DWORD PTR _fs$[ebp], 20			; 00000014H
	jge	SHORT $LN2@ScoreObj
$LN1@ScoreObj:

; 520  : 						return 0;

	xor	eax, eax
	jmp	SHORT $LN11@ScoreObj
$LN2@ScoreObj:

; 521  : 					// END EXPERIMENTAL
; 522  : 					return ss + ps*2 - fs*4;

	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR _ss$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _fs$[ebp]
	shl	ecx, 2
	sub	eax, ecx
	jmp	SHORT $LN11@ScoreObj
$LN9@ScoreObj:

; 523  : 					break;
; 524  : 	}
; 525  : 	return 0;

	xor	eax, eax
$LN11@ScoreObj:

; 526  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@ScoreObj:
	DD	$LN8@ScoreObj
	DD	$LN6@ScoreObj
	DD	$LN7@ScoreObj
	DD	$LN5@ScoreObj
	DD	$LN4@ScoreObj
$LN13@ScoreObj:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	0
	DB	2
	DB	3
	DB	4
	DB	0
	DB	1
?ScoreObj@@YAHHHHHHH@Z ENDP				; ScoreObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_i$ = -92						; size = 4
_o$ = -88						; size = 4
_tmp$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_team$ = 8						; size = 4
_buffers$ = 12						; size = 4
?GetTopPriorityObjectives@@YAHHQAPAD@Z PROC		; GetTopPriorityObjectives

; 1113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1114 : 	Objective		o;
; 1115 : 	_TCHAR			tmp[80];
; 1116 : 	int				i;
; 1117 : 
; 1118 : 	for (i=0; i<COLLECTABLE_HP_OBJECTIVES; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@GetTopPrio
$LN11@GetTopPrio:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@GetTopPrio:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN10@GetTopPrio

; 1119 : 		buffers[i][0] = 0;

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _buffers$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [ecx+edx], 0
	jmp	SHORT $LN11@GetTopPrio
$LN10@GetTopPrio:

; 1120 : 
; 1121 : 	// JB 010121
; 1122 : 	if (!TeamInfo[team])

	mov	eax, DWORD PTR _team$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	jne	SHORT $LN9@GetTopPrio

; 1123 : 		return 0;

	xor	eax, eax
	jmp	$LN13@GetTopPrio
$LN9@GetTopPrio:

; 1124 : 
; 1125 : 	o = (Objective) vuDatabase->Find(TeamInfo[team]->GetDefensiveAirAction()->actionObjective);

	mov	ecx, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetDefensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetDefensiveAirAction
	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _o$[ebp], eax

; 1126 : 	if (o && TeamInfo[team]->GetDefensiveAirAction()->actionType == AACTION_DCA)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN8@GetTopPrio
	mov	ecx, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetDefensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetDefensiveAirAction
	movzx	edx, BYTE PTR [eax+24]
	cmp	edx, 1
	jne	SHORT $LN8@GetTopPrio

; 1127 : 		o->GetFullName(tmp,79,FALSE);

	push	0
	push	79					; 0000004fH
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+384]
	call	eax

; 1128 : 	else

	jmp	SHORT $LN7@GetTopPrio
$LN8@GetTopPrio:

; 1129 : 		ReadIndexedString(300, tmp, 10);

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	push	300					; 0000012cH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN7@GetTopPrio:

; 1130 : 	AddStringToBuffer(tmp,buffers[0]);

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _buffers$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 1131 : 
; 1132 : 	o = (Objective) vuDatabase->Find(TeamInfo[team]->GetOffensiveAirAction()->actionObjective);

	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetOffensiveAirAction
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _o$[ebp], eax

; 1133 : 	if (o && TeamInfo[team]->GetOffensiveAirAction()->actionType)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN6@GetTopPrio
	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetOffensiveAirAction
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN6@GetTopPrio

; 1134 : 		o->GetFullName(tmp,79,FALSE);

	push	0
	push	79					; 0000004fH
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+384]
	call	eax

; 1135 : 	else

	jmp	SHORT $LN5@GetTopPrio
$LN6@GetTopPrio:

; 1136 : 		ReadIndexedString(300, tmp, 10);

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	push	300					; 0000012cH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN5@GetTopPrio:

; 1137 : 	AddStringToBuffer(tmp,buffers[1]);

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _buffers$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 1138 : 
; 1139 : 	o = (Objective) vuDatabase->Find(TeamInfo[team]->GetGroundAction()->actionObjective);

	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _o$[ebp], eax

; 1140 : 	if (o && TeamInfo[team]->GetGroundAction()->actionType < GACTION_MINOROFFENSIVE)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN4@GetTopPrio
	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 3
	jge	SHORT $LN4@GetTopPrio

; 1141 : 		o->GetFullName(tmp,79,FALSE);

	push	0
	push	79					; 0000004fH
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+384]
	call	eax

; 1142 : 	else

	jmp	SHORT $LN3@GetTopPrio
$LN4@GetTopPrio:

; 1143 : 		ReadIndexedString(300, tmp, 10);

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	push	300					; 0000012cH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN3@GetTopPrio:

; 1144 : 	AddStringToBuffer(tmp,buffers[2]);

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _buffers$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 1145 : 
; 1146 : 	o = (Objective) vuDatabase->Find(TeamInfo[team]->GetGroundAction()->actionObjective);

	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _o$[ebp], eax

; 1147 : 	if (o && TeamInfo[team]->GetGroundAction()->actionType >= GACTION_MINOROFFENSIVE)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN2@GetTopPrio
	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 3
	jl	SHORT $LN2@GetTopPrio

; 1148 : 		o->GetFullName(tmp,79,FALSE);

	push	0
	push	79					; 0000004fH
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+384]
	call	eax

; 1149 : 	else

	jmp	SHORT $LN1@GetTopPrio
$LN2@GetTopPrio:

; 1150 : 		ReadIndexedString(300, tmp, 10);

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	push	300					; 0000012cH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN1@GetTopPrio:

; 1151 : 	AddStringToBuffer(tmp,buffers[3]);

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _buffers$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 1152 : 
; 1153 : 	return 4;

	mov	eax, 4
$LN13@GetTopPrio:

; 1154 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTopPriorityObjectives@@YAHHQAPAD@Z ENDP		; GetTopPriorityObjectives
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 8
_cd$ = -12						; size = 8
$T2 = -4						; size = 4
_scenario$ = 8						; size = 4
?LoadPrimaryObjectiveList@@YAHPAD@Z PROC		; LoadPrimaryObjectiveList

; 1301 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1302 : //	uchar		*data;
; 1303 : 
; 1304 : 	CampaignData  cd = ReadCampFile (scenario, "pol");

	push	OFFSET ??_C@_03DPEHCIMJ@pol?$AA@
	mov	eax, DWORD PTR _scenario$[ebp]
	push	eax
	call	?ReadCampFile@@YA?AUCampaignData@@PAD0@Z ; ReadCampFile
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _cd$[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR _cd$[ebp+4], edx

; 1305 : 	if (cd.dataSize == -1){

	cmp	DWORD PTR _cd$[ebp], -1
	jne	SHORT $LN1@LoadPrimar

; 1306 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@LoadPrimar
$LN1@LoadPrimar:

; 1307 : 	}
; 1308 : 	DecodePrimaryObjectiveList((uchar*)cd.data, NULL);

	push	0
	mov	eax, DWORD PTR _cd$[ebp+4]
	push	eax
	call	?DecodePrimaryObjectiveList@@YAXPAEPAVFalconEntity@@@Z ; DecodePrimaryObjectiveList
	add	esp, 8

; 1309 : 	delete cd.data;

	mov	ecx, DWORD PTR _cd$[ebp+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1310 : 	return 1;

	mov	eax, 1
$LN2@LoadPrimar:

; 1311 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LoadPrimaryObjectiveList@@YAHPAD@Z ENDP		; LoadPrimaryObjectiveList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
_data$ = -20						; size = 4
_fp$ = -16						; size = 4
_size$ = -12						; size = 2
_team$ = -8						; size = 2
_teammask$ = -1						; size = 1
_scenario$ = 8						; size = 4
?SavePrimaryObjectiveList@@YAXPAD@Z PROC		; SavePrimaryObjectiveList

; 1280 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1281 : 	short				size,team;
; 1282 : 	uchar				*data,teammask=0;

	mov	BYTE PTR _teammask$[ebp], 0

; 1283 : 	FILE				*fp;
; 1284 : 
; 1285 : 	if ((fp = OpenCampFile (scenario, "pol", "wb")) == NULL)

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	push	OFFSET ??_C@_03DPEHCIMJ@pol?$AA@
	mov	eax, DWORD PTR _scenario$[ebp]
	push	eax
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN5@SavePrimar

; 1286 : 		return;

	jmp	$LN6@SavePrimar
$LN5@SavePrimar:

; 1287 : 
; 1288 : 	for (team=0; team<NUM_TEAMS; team++)

	xor	ecx, ecx
	mov	WORD PTR _team$[ebp], cx
	jmp	SHORT $LN4@SavePrimar
$LN3@SavePrimar:
	mov	dx, WORD PTR _team$[ebp]
	add	dx, 1
	mov	WORD PTR _team$[ebp], dx
$LN4@SavePrimar:
	movsx	eax, WORD PTR _team$[ebp]
	cmp	eax, 8
	jge	SHORT $LN2@SavePrimar

; 1289 : 	{
; 1290 : 		if (TeamInfo[team])

	movsx	ecx, WORD PTR _team$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4], 0
	je	SHORT $LN1@SavePrimar

; 1291 : 			teammask |= (1 << team);

	movsx	ecx, WORD PTR _team$[ebp]
	mov	edx, 1
	shl	edx, cl
	movzx	eax, BYTE PTR _teammask$[ebp]
	or	eax, edx
	mov	BYTE PTR _teammask$[ebp], al
$LN1@SavePrimar:

; 1292 : 	}

	jmp	SHORT $LN3@SavePrimar
$LN2@SavePrimar:

; 1293 : 
; 1294 : 	size = EncodePrimaryObjectiveList(teammask, &data);

	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _teammask$[ebp]
	push	edx
	call	?EncodePrimaryObjectiveList@@YAFEPAPAE@Z ; EncodePrimaryObjectiveList
	add	esp, 8
	mov	WORD PTR _size$[ebp], ax

; 1295 : 	fwrite(data, size, 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	movsx	ecx, WORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 1296 : 	CloseCampFile(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 1297 : 	delete data;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@SavePrimar:

; 1298 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SavePrimaryObjectiveList@@YAXPAD@Z ENDP		; SavePrimaryObjectiveList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 4
tv134 = -32						; size = 4
$T3 = -28						; size = 4
tv130 = -24						; size = 4
_msg$ = -20						; size = 4
_team$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_teammask$ = 8						; size = 1
?SendPrimaryObjectiveList@@YAXE@Z PROC			; SendPrimaryObjectiveList

; 1248 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendPrimaryObjectiveList@@YAXE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1249 : 	FalconCampDataMessage	*msg;
; 1250 : 	int						team;
; 1251 : 
; 1252 : 	// If we're not specifying a team, send them all
; 1253 : 	if (!teammask)

	movzx	eax, BYTE PTR _teammask$[ebp]
	test	eax, eax
	jne	SHORT $LN5@SendPrimar

; 1254 : 	{
; 1255 : 		for (team=0; team<NUM_TEAMS; team++)

	mov	DWORD PTR _team$[ebp], 0
	jmp	SHORT $LN4@SendPrimar
$LN3@SendPrimar:
	mov	ecx, DWORD PTR _team$[ebp]
	add	ecx, 1
	mov	DWORD PTR _team$[ebp], ecx
$LN4@SendPrimar:
	cmp	DWORD PTR _team$[ebp], 8
	jge	SHORT $LN5@SendPrimar

; 1256 : 		{
; 1257 : 			if (TeamInfo[team])

	mov	edx, DWORD PTR _team$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4], 0
	je	SHORT $LN1@SendPrimar

; 1258 : 				teammask |= (1 << team);

	mov	eax, 1
	mov	ecx, DWORD PTR _team$[ebp]
	shl	eax, cl
	movzx	ecx, BYTE PTR _teammask$[ebp]
	or	ecx, eax
	mov	BYTE PTR _teammask$[ebp], cl
$LN1@SendPrimar:

; 1259 : 		}

	jmp	SHORT $LN3@SendPrimar
$LN5@SendPrimar:

; 1260 : 	}
; 1261 : 
; 1262 : #ifdef DEBUG
; 1263 : 	for (team=0; team<NUM_TEAMS; team++)
; 1264 : 	{
; 1265 : 		if (teammask & (1 << team))
; 1266 : 			ShiAssert (TeamInfo[team]);
; 1267 : 	}
; 1268 : #endif
; 1269 : 
; 1270 : 	msg = new FalconCampDataMessage(FalconNullId,FalconLocalGame,FALSE);

	push	58					; 0000003aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@SendPrimar
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@SendPrimar
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN9@SendPrimar
$LN8@SendPrimar:
	mov	DWORD PTR tv130[ebp], 0
$LN9@SendPrimar:
	push	0
	mov	eax, DWORD PTR tv130[ebp]
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0FalconCampDataMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconCampDataMessage::FalconCampDataMessage
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN11@SendPrimar
$LN10@SendPrimar:
	mov	DWORD PTR tv134[ebp], 0
$LN11@SendPrimar:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _msg$[ebp], ecx

; 1271 : 
; 1272 : 	msg->dataBlock.type = FalconCampDataMessage::campPriorityData;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [edx+48], 1

; 1273 : 	msg->dataBlock.size = EncodePrimaryObjectiveList(teammask, &msg->dataBlock.data);

	mov	eax, DWORD PTR _msg$[ebp]
	add	eax, 54					; 00000036H
	push	eax
	movzx	ecx, BYTE PTR _teammask$[ebp]
	push	ecx
	call	?EncodePrimaryObjectiveList@@YAFEPAPAE@Z ; EncodePrimaryObjectiveList
	add	esp, 8
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+52], ax

; 1274 : 
; 1275 : 	FalconSendMessage(msg,TRUE);

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1276 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendPrimaryObjectiveList@@YAXE@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SendPrimaryObjectiveList@@YAXE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendPrimaryObjectiveList@@YAXE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendPrimaryObjectiveList@@YAXE@Z ENDP			; SendPrimaryObjectiveList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_id$ = -32						; size = 8
_po$ = -24						; size = 4
_pod$ = -20						; size = 4
_data$ = -16						; size = 4
_priority$ = -12					; size = 2
_count$ = -8						; size = 2
_teammask$ = -2						; size = 1
_team$ = -1						; size = 1
_datahead$ = 8						; size = 4
_fe$ = 12						; size = 4
?DecodePrimaryObjectiveList@@YAXPAEPAVFalconEntity@@@Z PROC ; DecodePrimaryObjectiveList

; 1209 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 1210 : 	short				count,priority;
; 1211 : 	uchar				team,teammask,*data = datahead;

	mov	eax, DWORD PTR _datahead$[ebp]
	mov	DWORD PTR _data$[ebp], eax

; 1212 : 	POData				pod = NULL;

	mov	DWORD PTR _pod$[ebp], 0

; 1213 : 	Objective			po;
; 1214 : 	VU_ID				id;

	lea	ecx, DWORD PTR _id$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1215 : 
; 1216 : 	ShiAssert (PODataList && PODataList->GetFirstElement())
; 1217 : 
; 1218 : 			memcpy(&teammask, data, sizeof(uchar));								data += sizeof(uchar);

	push	1
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _teammask$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax

; 1219 : 	memcpy(&count, data, sizeof(short));								data += sizeof(short);

	push	2
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 2
	mov	DWORD PTR _data$[ebp], eax
$LN9@DecodePrim:

; 1220 : 	while (count)

	movsx	ecx, WORD PTR _count$[ebp]
	test	ecx, ecx
	je	$LN8@DecodePrim

; 1221 : 	{
; 1222 : 		memcpy(&id, data, sizeof(VU_ID));								data += sizeof(VU_ID);

	push	8
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 8
	mov	DWORD PTR _data$[ebp], ecx

; 1223 : 		po = (Objective) vuDatabase->Find(id);

	mov	edx, DWORD PTR _id$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _po$[ebp], eax

; 1224 : 		if (po)

	cmp	DWORD PTR _po$[ebp], 0
	je	SHORT $LN6@DecodePrim

; 1225 : 			pod = GetPOData(po);

	mov	ecx, DWORD PTR _po$[ebp]
	push	ecx
	call	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
	add	esp, 4
	mov	DWORD PTR _pod$[ebp], eax
$LN6@DecodePrim:

; 1226 : 		else 
; 1227 : 		{
; 1228 : 			// KCK: Remote machines should have built these thingys.
; 1229 : 			ShiAssert (0);
; 1230 : 		}
; 1231 : 		for (team=0; team<NUM_TEAMS; team++)

	mov	BYTE PTR _team$[ebp], 0
	jmp	SHORT $LN5@DecodePrim
$LN4@DecodePrim:
	mov	dl, BYTE PTR _team$[ebp]
	add	dl, 1
	mov	BYTE PTR _team$[ebp], dl
$LN5@DecodePrim:
	movzx	eax, BYTE PTR _team$[ebp]
	cmp	eax, 8
	jge	SHORT $LN3@DecodePrim

; 1232 : 		{
; 1233 : 			if (teammask & (1 << team))

	movzx	edx, BYTE PTR _teammask$[ebp]
	movzx	ecx, BYTE PTR _team$[ebp]
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	je	SHORT $LN2@DecodePrim

; 1234 : 			{
; 1235 : 				memcpy(&priority, data, sizeof(short));					data += sizeof(short);

	push	2
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _priority$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 2
	mov	DWORD PTR _data$[ebp], eax

; 1236 : 				if (pod)

	cmp	DWORD PTR _pod$[ebp], 0
	je	SHORT $LN2@DecodePrim

; 1237 : 					pod->player_priority[team] = priority;

	movzx	ecx, BYTE PTR _team$[ebp]
	mov	edx, DWORD PTR _pod$[ebp]
	mov	ax, WORD PTR _priority$[ebp]
	mov	WORD PTR [edx+ecx*2+56], ax
$LN2@DecodePrim:

; 1238 : 			}
; 1239 : 		}

	jmp	SHORT $LN4@DecodePrim
$LN3@DecodePrim:

; 1240 : 		count--;

	mov	cx, WORD PTR _count$[ebp]
	sub	cx, 1
	mov	WORD PTR _count$[ebp], cx

; 1241 : 	}

	jmp	$LN9@DecodePrim
$LN8@DecodePrim:

; 1242 : 
; 1243 : 	TheCampaign.Flags &= ~CAMP_NEED_PRIORITIES;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64
	and	edx, -268435457				; efffffffH
	mov	DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64, edx

; 1244 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecodePrimaryObjectiveList@@YAXPAEPAVFalconEntity@@@Z ENDP ; DecodePrimaryObjectiveList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 4
_datahead$ = -32					; size = 4
_pod$ = -28						; size = 4
_lp$ = -24						; size = 4
_data$ = -20						; size = 4
_teams$ = -16						; size = 2
_size$ = -12						; size = 2
_count$ = -8						; size = 2
_team$ = -4						; size = 2
_teammask$ = 8						; size = 1
_buffer$ = 12						; size = 4
?EncodePrimaryObjectiveList@@YAFEPAPAE@Z PROC		; EncodePrimaryObjectiveList

; 1158 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 1159 : 	uchar					*data,*datahead;
; 1160 : 	ListNode				lp;
; 1161 : 	POData					pod;
; 1162 : 	short					size,count=0,team,teams=0;

	xor	eax, eax
	mov	WORD PTR _count$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _teams$[ebp], cx

; 1163 : 
; 1164 : 	// 'teammask' determines which team data we're sending. If no such
; 1165 : 	// team exists, there's no reason to send the data. Check for this
; 1166 : 	for (team=0; team<NUM_TEAMS; team++)

	xor	edx, edx
	mov	WORD PTR _team$[ebp], dx
	jmp	SHORT $LN14@EncodePrim
$LN13@EncodePrim:
	mov	ax, WORD PTR _team$[ebp]
	add	ax, 1
	mov	WORD PTR _team$[ebp], ax
$LN14@EncodePrim:
	movsx	ecx, WORD PTR _team$[ebp]
	cmp	ecx, 8
	jge	SHORT $LN12@EncodePrim

; 1167 : 	{
; 1168 : 		if (!TeamInfo[team])

	movsx	edx, WORD PTR _team$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4], 0
	jne	SHORT $LN11@EncodePrim

; 1169 : 			teammask &= ~(1 << team);

	movsx	ecx, WORD PTR _team$[ebp]
	mov	eax, 1
	shl	eax, cl
	not	eax
	movzx	ecx, BYTE PTR _teammask$[ebp]
	and	ecx, eax
	mov	BYTE PTR _teammask$[ebp], cl
	jmp	SHORT $LN10@EncodePrim
$LN11@EncodePrim:

; 1170 : 		else if (teammask & (1 << team))

	movzx	edx, BYTE PTR _teammask$[ebp]
	movsx	ecx, WORD PTR _team$[ebp]
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	je	SHORT $LN10@EncodePrim

; 1171 : 			teams++;

	mov	cx, WORD PTR _teams$[ebp]
	add	cx, 1
	mov	WORD PTR _teams$[ebp], cx
$LN10@EncodePrim:

; 1172 : 	}

	jmp	SHORT $LN13@EncodePrim
$LN12@EncodePrim:

; 1173 : 
; 1174 : 	// Determine size
; 1175 : 	size = sizeof(uchar) + sizeof(short);

	mov	edx, 3
	mov	WORD PTR _size$[ebp], dx

; 1176 : 	lp = PODataList->GetFirstElement();

	mov	ecx, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN8@EncodePrim:

; 1177 : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN7@EncodePrim

; 1178 : 	{
; 1179 : 		count++;

	mov	ax, WORD PTR _count$[ebp]
	add	ax, 1
	mov	WORD PTR _count$[ebp], ax

; 1180 : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 1181 : 	}

	jmp	SHORT $LN8@EncodePrim
$LN7@EncodePrim:

; 1182 : 	size += count * (sizeof(VU_ID) + sizeof(short)*teams);

	movsx	ecx, WORD PTR _count$[ebp]
	movsx	edx, WORD PTR _teams$[ebp]
	lea	eax, DWORD PTR [edx+edx+8]
	imul	ecx, eax
	movsx	edx, WORD PTR _size$[ebp]
	add	edx, ecx
	mov	WORD PTR _size$[ebp], dx

; 1183 : 
; 1184 : 	// Write the data
; 1185 : 	data = datahead = new uchar[size];

	movsx	eax, WORD PTR _size$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _datahead$[ebp], ecx
	mov	edx, DWORD PTR _datahead$[ebp]
	mov	DWORD PTR _data$[ebp], edx

; 1186 : 	memcpy(data, &teammask, sizeof(uchar));								data += sizeof(uchar);

	push	1
	lea	eax, DWORD PTR _teammask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx

; 1187 : 	memcpy(data, &count, sizeof(short));								data += sizeof(short);

	push	2
	lea	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 2
	mov	DWORD PTR _data$[ebp], edx

; 1188 : 	lp = PODataList->GetFirstElement();

	mov	ecx, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN6@EncodePrim:

; 1189 : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	$LN5@EncodePrim

; 1190 : 	{
; 1191 : 		pod = (POData) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _pod$[ebp], eax

; 1192 : 		memcpy(data, &pod->objective, sizeof(VU_ID));					data += sizeof(VU_ID);

	push	8
	mov	eax, DWORD PTR _pod$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 8
	mov	DWORD PTR _data$[ebp], edx

; 1193 : 		for (team=0; team<NUM_TEAMS; team++)

	xor	eax, eax
	mov	WORD PTR _team$[ebp], ax
	jmp	SHORT $LN4@EncodePrim
$LN3@EncodePrim:
	mov	cx, WORD PTR _team$[ebp]
	add	cx, 1
	mov	WORD PTR _team$[ebp], cx
$LN4@EncodePrim:
	movsx	edx, WORD PTR _team$[ebp]
	cmp	edx, 8
	jge	SHORT $LN2@EncodePrim

; 1194 : 		{
; 1195 : 			if (teammask & (1 << team))

	movzx	eax, BYTE PTR _teammask$[ebp]
	movsx	ecx, WORD PTR _team$[ebp]
	mov	edx, 1
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN1@EncodePrim

; 1196 : 			{
; 1197 : 				memcpy(data, &pod->player_priority[team], sizeof(short));	

	push	2
	movsx	eax, WORD PTR _team$[ebp]
	mov	ecx, DWORD PTR _pod$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+56]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1198 : 				data += sizeof(short);

	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 2
	mov	DWORD PTR _data$[ebp], ecx
$LN1@EncodePrim:

; 1199 : 			}
; 1200 : 		}

	jmp	SHORT $LN3@EncodePrim
$LN2@EncodePrim:

; 1201 : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 1202 : 	}

	jmp	$LN6@EncodePrim
$LN5@EncodePrim:

; 1203 : 	*buffer = datahead;

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR _datahead$[ebp]
	mov	DWORD PTR [edx], eax

; 1204 : 
; 1205 : 	return size;

	mov	ax, WORD PTR _size$[ebp]

; 1206 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EncodePrimaryObjectiveList@@YAFEPAPAE@Z ENDP		; EncodePrimaryObjectiveList
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GGroundTaskingManagerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGroundTaskingManagerClass@@UAEPAXI@Z PROC		; GroundTaskingManagerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GroundTaskingManagerClass@@UAE@XZ	; GroundTaskingManagerClass::~GroundTaskingManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGroundTaskingManagerClass@@UAEPAXI@Z ENDP		; GroundTaskingManagerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_o$ = 8							; size = 4
_division$ = 12						; size = 4
?RequestAirDefense@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z PROC ; GroundTaskingManagerClass::RequestAirDefense
; _this$ = ecx

; 1096 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1097 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?RequestAirDefense@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z ENDP ; GroundTaskingManagerClass::RequestAirDefense
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_myit$ = -40						; size = 12
$T2 = -28						; size = 8
_this$ = -20						; size = 4
_u$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_o$ = 8							; size = 4
_division$ = 12						; size = 4
?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z PROC ; GroundTaskingManagerClass::RequestEngineer
; _this$ = ecx

; 1076 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1077 : 	Unit				u;
; 1078 : 	o->SetNeedRepair(1);

	push	1
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetNeedRepair@ObjectiveClass@@QAEXH@Z	; ObjectiveClass::SetNeedRepair

; 1079 : 
; 1080 : 	VuListIterator	myit(AllParentList);

	mov	eax, DWORD PTR ?AllParentList@@3PAVVuLinkedList@@A ; AllParentList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1081 : 	u = GetFirstUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN3@RequestEng:

; 1082 : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN2@RequestEng

; 1083 : 	{
; 1084 : 		if (u->GetTeam() == owner && u->GetDomain() == DOMAIN_LAND && 
; 1085 : 						u->GetUnitNormalRole() == GRO_ENGINEER && u->GetUnitDivision() == division && u->GetUnitOrders() != GORD_REPAIR)

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	cmp	eax, edx
	jne	$LN1@RequestEng
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 3
	jne	SHORT $LN1@RequestEng
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	cmp	eax, 7
	jne	SHORT $LN1@RequestEng
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+904]
	call	eax
	cmp	eax, DWORD PTR _division$[ebp]
	jne	SHORT $LN1@RequestEng
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+880]
	call	eax
	cmp	eax, 8
	je	SHORT $LN1@RequestEng

; 1086 : 		{
; 1087 : 			u->SetUnitOrders(GORD_REPAIR,o->Id());

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	push	8
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax

; 1088 : 			return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	SHORT $LN4@RequestEng
$LN1@RequestEng:

; 1089 : 		}
; 1090 : 		u = GetNextUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 1091 : 	}

	jmp	$LN3@RequestEng
$LN2@RequestEng:

; 1092 : 	// Find the best _free_ engineer to send to this location
; 1093 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN4@RequestEng:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestEngineer@GroundTaskingManagerClass@@QAEXPAVObjectiveClass@@H@Z ENDP ; GroundTaskingManagerClass::RequestEngineer
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 4
_target$ = -32						; size = 4
tv95 = -28						; size = 4
$T5 = -24						; size = 4
_this$ = -20						; size = 4
_togtm$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_from$ = 8						; size = 8
_message$ = 16						; size = 2
_data1$ = 20						; size = 2
_data2$ = 24						; size = 2
_data3$ = 28						; size = 8
?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z PROC ; GroundTaskingManagerClass::SendGTMMessage
; _this$ = ecx

; 1059 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 	VuTargetEntity	*target = (VuTargetEntity*) vuDatabase->Find(OwnerId());

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$[ebp], eax

; 1061 : 	FalconGndTaskingMessage*	togtm = new FalconGndTaskingMessage(Id(), target);

	push	81					; 00000051H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN4@SendGTMMes
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconGndTaskingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconGndTaskingMessage::FalconGndTaskingMessage
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN5@SendGTMMes
$LN4@SendGTMMes:
	mov	DWORD PTR tv95[ebp], 0
$LN5@SendGTMMes:
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _togtm$[ebp], edx

; 1062 : 
; 1063 : 	if (this)

	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN2@SendGTMMes

; 1064 : 	{
; 1065 : 		togtm->dataBlock.from = from;

	mov	eax, DWORD PTR _togtm$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _from$[ebp+4]
	mov	DWORD PTR [eax+52], edx

; 1066 : 		togtm->dataBlock.team = owner;

	mov	eax, DWORD PTR _togtm$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+146]
	mov	BYTE PTR [eax+64], dl

; 1067 : 		togtm->dataBlock.messageType = message;

	movsx	eax, WORD PTR _message$[ebp]
	mov	ecx, DWORD PTR _togtm$[ebp]
	mov	DWORD PTR [ecx+65], eax

; 1068 : 		togtm->dataBlock.data1 = data1;

	mov	edx, DWORD PTR _togtm$[ebp]
	mov	ax, WORD PTR _data1$[ebp]
	mov	WORD PTR [edx+69], ax

; 1069 : 		togtm->dataBlock.data2 = data2;

	mov	ecx, DWORD PTR _togtm$[ebp]
	mov	dx, WORD PTR _data2$[ebp]
	mov	WORD PTR [ecx+71], dx

; 1070 : 		togtm->dataBlock.enemy = data3;

	mov	eax, DWORD PTR _togtm$[ebp]
	mov	ecx, DWORD PTR _data3$[ebp]
	mov	DWORD PTR [eax+73], ecx
	mov	edx, DWORD PTR _data3$[ebp+4]
	mov	DWORD PTR [eax+77], edx

; 1071 : 		FalconSendMessage(togtm,TRUE);

	push	1
	mov	eax, DWORD PTR _togtm$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN2@SendGTMMes:

; 1072 : 	}
; 1073 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z ENDP ; GroundTaskingManagerClass::SendGTMMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FinalizeOrders@GroundTaskingManagerClass@@QAEXXZ PROC	; GroundTaskingManagerClass::FinalizeOrders
; _this$ = ecx

; 1054 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1055 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FinalizeOrders@GroundTaskingManagerClass@@QAEXXZ ENDP	; GroundTaskingManagerClass::FinalizeOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_score$ = -20						; size = 4
_ox$ = -16						; size = 2
_oy$ = -12						; size = 2
_ux$ = -8						; size = 2
_uy$ = -4						; size = 2
_curu$ = 8						; size = 4
_curo$ = 12						; size = 4
_orders$ = 16						; size = 4
_mode$ = 20						; size = 4
?ScoreUnitFast@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z PROC ; GroundTaskingManagerClass::ScoreUnitFast
; _this$ = ecx

; 1035 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1036 : 	int			score = -32000;

	mov	DWORD PTR _score$[ebp], -32000		; ffff8300H

; 1037 : 	GridIndex	ox,oy,ux,uy;
; 1038 : 
; 1039 : 	curo->obj->GetLocation(&ox,&oy);

	lea	eax, DWORD PTR _oy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ox$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1040 : 	curu->unit->GetLocation(&ux,&uy);

	lea	eax, DWORD PTR _uy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ux$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curu$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1041 : 	if (mode == GTM_MODE_BEST)

	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN3@ScoreUnitF

; 1042 : 	{
; 1043 : 		score = curu->score + 100 - FloatToInt32(Distance(ox,oy,ux,uy))/5;

	mov	eax, DWORD PTR _curu$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, 100				; 00000064H
	movzx	ecx, WORD PTR _uy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ux$[ebp]
	push	edx
	movzx	eax, WORD PTR _oy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ox$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	sub	esi, eax
	mov	DWORD PTR _score$[ebp], esi
	jmp	SHORT $LN1@ScoreUnitF
$LN3@ScoreUnitF:

; 1044 : 	}
; 1045 : 	else if (mode == GTM_MODE_FASTEST)

	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN1@ScoreUnitF

; 1046 : 	{
; 1047 : 		score = 50 + curu->score/2 - FloatToInt32(Distance(ox,oy,ux,uy))/2;

	mov	edx, DWORD PTR _curu$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	add	esi, 50					; 00000032H
	movzx	eax, WORD PTR _uy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ux$[ebp]
	push	ecx
	movzx	edx, WORD PTR _oy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ox$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	mov	DWORD PTR _score$[ebp], esi
$LN1@ScoreUnitF:

; 1048 : 	}
; 1049 : 
; 1050 : 	return score;

	mov	eax, DWORD PTR _score$[ebp]

; 1051 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ScoreUnitFast@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z ENDP ; GroundTaskingManagerClass::ScoreUnitFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -36						; size = 4
_cost$ = -32						; size = 4
_d$1 = -28						; size = 4
_div$2 = -24						; size = 4
_score$ = -20						; size = 4
_ox$ = -16						; size = 2
_oy$ = -12						; size = 2
_ux$ = -8						; size = 2
_uy$ = -4						; size = 2
_curu$ = 8						; size = 4
_curo$ = 12						; size = 4
_orders$ = 16						; size = 4
_mode$ = 20						; size = 4
?ScoreUnit@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z PROC ; GroundTaskingManagerClass::ScoreUnit
; _this$ = ecx

; 984  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 985  : 	int			score = -32000;

	mov	DWORD PTR _score$[ebp], -32000		; ffff8300H

; 986  : 	GridIndex	ux,uy,ox,oy;
; 987  : 	costtype	cost;
; 988  : 
; 989  : #ifdef KEV_GDEBUG
; 990  : 	ulong	time;
; 991  : 	time = GetTickCount();
; 992  : #endif
; 993  : 
; 994  : 	curu->unit->GetLocation(&ux,&uy);

	lea	eax, DWORD PTR _uy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ux$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curu$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 995  : 	cost = CostToArrive (curu->unit, orders, ux, uy, curo->obj);

	mov	eax, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	movzx	edx, WORD PTR _uy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ux$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orders$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curu$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z ; CostToArrive
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _cost$[ebp]

; 996  : 
; 997  : 	if (cost >= OBJ_GROUND_PATH_MAX_COST)

	movsx	ecx, WORD PTR ?OBJ_GROUND_PATH_MAX_COST@@3FA ; OBJ_GROUND_PATH_MAX_COST
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR _cost$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN6@ScoreUnit

; 998  : 	{
; 999  : #ifdef KEV_GDEBUG
; 1000 : 		ScoreTime += GetTickCount() - time;
; 1001 : #endif
; 1002 : 		return score;

	mov	eax, DWORD PTR _score$[ebp]
	jmp	$LN7@ScoreUnit
$LN6@ScoreUnit:

; 1003 : 	}
; 1004 : 
; 1005 : 	if (mode == GTM_MODE_BEST)

	cmp	DWORD PTR _mode$[ebp], 0
	jne	$LN5@ScoreUnit

; 1006 : 	{
; 1007 : 		// Adjust by distance to objective
; 1008 : 		curo->obj->GetLocation(&ox,&oy);

	lea	edx, DWORD PTR _oy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1009 : 		score = curu->score + 100 - FloatToInt32(Distance(ox,oy,ux,uy))/5;

	mov	edx, DWORD PTR _curu$[ebp]
	mov	esi, DWORD PTR [edx+4]
	add	esi, 100				; 00000064H
	movzx	eax, WORD PTR _uy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ux$[ebp]
	push	ecx
	movzx	edx, WORD PTR _oy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ox$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	sub	esi, eax
	mov	DWORD PTR _score$[ebp], esi

; 1010 : 		// Adjust by distance from division
; 1011 : 		Division	div;
; 1012 : 		float		d;
; 1013 : 		curo->obj->GetLocation(&ox,&oy);

	lea	edx, DWORD PTR _oy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1014 : 		if (div = GetDivisionByUnit(curu->unit))

	mov	edx, DWORD PTR _curu$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?GetDivisionByUnit@@YAPAVDivisionClass@@PAVUnitClass@@@Z ; GetDivisionByUnit
	add	esp, 4
	mov	DWORD PTR _div$2[ebp], eax
	cmp	DWORD PTR _div$2[ebp], 0
	je	SHORT $LN3@ScoreUnit

; 1015 : 		{
; 1016 : 			div->GetLocation(&ux,&uy);

	lea	ecx, DWORD PTR _uy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ux$[ebp]
	push	edx
	mov	ecx, DWORD PTR _div$2[ebp]
	call	?GetLocation@DivisionClass@@QAEXPAF0@Z	; DivisionClass::GetLocation

; 1017 : 			d = (float) DistSqu(ux,uy,ox,oy);

	movzx	eax, WORD PTR _oy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ox$[ebp]
	push	ecx
	movzx	edx, WORD PTR _uy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ux$[ebp]
	push	eax
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _d$1[ebp], xmm0

; 1018 : 			if (d > 900.0F)

	movss	xmm0, DWORD PTR _d$1[ebp]
	comiss	xmm0, DWORD PTR __real@44610000
	jbe	SHORT $LN3@ScoreUnit

; 1019 : 				score -= FloatToInt32((d - 900.0F) / 50.0F);

	movss	xmm0, DWORD PTR _d$1[ebp]
	subss	xmm0, DWORD PTR __real@44610000
	divss	xmm0, DWORD PTR __real@42480000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _score$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _score$[ebp], ecx
$LN3@ScoreUnit:

; 1020 : 		}
; 1021 : 	}

	jmp	SHORT $LN1@ScoreUnit
$LN5@ScoreUnit:

; 1022 : 	else if (mode == GTM_MODE_FASTEST)

	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN1@ScoreUnit

; 1023 : 	{
; 1024 : 		// Adjust by cost to objective
; 1025 : 		score = FloatToInt32(50 + curu->score/2.0F - cost);

	mov	edx, DWORD PTR _curu$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+4]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@42480000
	subss	xmm0, DWORD PTR _cost$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _score$[ebp], eax
$LN1@ScoreUnit:

; 1026 : 	}
; 1027 : 
; 1028 : #ifdef KEV_GDEBUG
; 1029 : 	ScoreTime += GetTickCount() - time;
; 1030 : #endif
; 1031 : 	return score;

	mov	eax, DWORD PTR _score$[ebp]
$LN7@ScoreUnit:

; 1032 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ScoreUnit@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z ENDP ; GroundTaskingManagerClass::ScoreUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_retval$ = -24						; size = 4
_bests$ = -20						; size = 4
_score$ = -16						; size = 4
_this$ = -12						; size = 4
_bestu$ = -8						; size = 4
_curu$ = -4						; size = 4
_curo$ = 8						; size = 4
_orders$ = 12						; size = 4
_mode$ = 16						; size = 4
?AssignObjective@GroundTaskingManagerClass@@QAEHPAVGndObjDataType@@HH@Z PROC ; GroundTaskingManagerClass::AssignObjective
; _this$ = ecx

; 940  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 941  : 	USNode			curu,bestu;
; 942  : 	int				bests,score,retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 943  : 
; 944  : #ifdef KEV_GDEBUG
; 945  : 	ulong	time;
; 946  : 	time = GetTickCount();
; 947  : 	runs++;
; 948  : #endif
; 949  : 
; 950  : 	curu = curo->unit_list;

	mov	eax, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _curu$[ebp], ecx

; 951  : 	bests = -30000;

	mov	DWORD PTR _bests$[ebp], -30000		; ffff8ad0H

; 952  : 	score = 0;

	mov	DWORD PTR _score$[ebp], 0

; 953  : 	bestu = NULL;

	mov	DWORD PTR _bestu$[ebp], 0
$LN4@AssignObje:

; 954  : 	while (curu && curu->distance > bests)

	cmp	DWORD PTR _curu$[ebp], 0
	je	SHORT $LN3@AssignObje
	mov	edx, DWORD PTR _curu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _bests$[ebp]
	jle	SHORT $LN3@AssignObje

; 955  : 	{
; 956  : #ifdef KEV_GDEBUG
; 957  : 		checks++;
; 958  : #endif
; 959  : 		score = ScoreUnit(curu,curo,orders,mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orders$[ebp]
	push	edx
	mov	eax, DWORD PTR _curo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curu$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScoreUnit@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z ; GroundTaskingManagerClass::ScoreUnit
	mov	DWORD PTR _score$[ebp], eax

; 960  : 		if (score > bests)

	mov	edx, DWORD PTR _score$[ebp]
	cmp	edx, DWORD PTR _bests$[ebp]
	jle	SHORT $LN2@AssignObje

; 961  : 		{
; 962  : 			bestu = curu;

	mov	eax, DWORD PTR _curu$[ebp]
	mov	DWORD PTR _bestu$[ebp], eax

; 963  : 			bests = score;

	mov	ecx, DWORD PTR _score$[ebp]
	mov	DWORD PTR _bests$[ebp], ecx
$LN2@AssignObje:

; 964  : 		}
; 965  : 		curu = curu->next;

	mov	edx, DWORD PTR _curu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _curu$[ebp], eax

; 966  : 	}

	jmp	SHORT $LN4@AssignObje
$LN3@AssignObje:

; 967  : 	if (bestu)

	cmp	DWORD PTR _bestu$[ebp], 0
	je	SHORT $LN1@AssignObje

; 968  : 	{
; 969  : 		// Assign this unit this this objective
; 970  : 		retval = AssignUnit(bestu->unit,orders,curo->obj,bestu->score);

	mov	ecx, DWORD PTR _bestu$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _orders$[ebp]
	push	edx
	mov	eax, DWORD PTR _bestu$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnit@GroundTaskingManagerClass@@QAEHPAVUnitClass@@HPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::AssignUnit
	mov	DWORD PTR _retval$[ebp], eax

; 971  : 		// Remove unit from the lists
; 972  : 		objList[orders]->RemoveUnitFromAll(bestu->unit);

	mov	edx, DWORD PTR _bestu$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+152]
	call	?RemoveUnitFromAll@GndObjDataType@@QAEXPAVUnitClass@@@Z ; GndObjDataType::RemoveUnitFromAll
$LN1@AssignObje:

; 973  : 		//		canidateList[orders] = canidateList[orders]->Remove(bestu);
; 974  : 	}
; 975  : 
; 976  : 	objList[orders] = objList[orders]->Remove(curo);

	mov	eax, DWORD PTR _curo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+152]
	call	?Remove@GndObjDataType@@QAEPAV1@PAV1@@Z	; GndObjDataType::Remove
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+152], eax

; 977  : #ifdef KEV_GDEBUG
; 978  : 	PickTime += GetTickCount() - time;
; 979  : #endif
; 980  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 981  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AssignObjective@GroundTaskingManagerClass@@QAEHPAVGndObjDataType@@HH@Z ENDP ; GroundTaskingManagerClass::AssignObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T1 = -92						; size = 8
_sortBy$ = -84						; size = 4
_dist$2 = -80						; size = 4
tv328 = -76						; size = 4
_atmbase$3 = -72					; size = 4
_bestn$4 = -68						; size = 4
_bestds$5 = -64						; size = 4
_ds$6 = -60						; size = 4
_po$7 = -56						; size = 4
_ocnt$ = -52						; size = 4
_ucnt$ = -48						; size = 4
_nexto$ = -44						; size = 4
_nextu$ = -40						; size = 4
_curu$ = -36						; size = 4
_curo$ = -32						; size = 4
_this$ = -28						; size = 4
_x$8 = -24						; size = 2
_y$9 = -20						; size = 2
_ox$10 = -16						; size = 2
_oy$11 = -12						; size = 2
_px$12 = -8						; size = 2
_py$13 = -4						; size = 2
_orders$ = 8						; size = 4
_mode$ = 12						; size = 4
?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z PROC	; GroundTaskingManagerClass::AssignUnits
; _this$ = ecx

; 817  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 818  : 	GODNode			curo,nexto;
; 819  : 	USNode			curu,nextu;
; 820  : 	int				ucnt=0,ocnt=0,sortBy = GODN_SORT_BY_PRIORITY;

	mov	DWORD PTR _ucnt$[ebp], 0
	mov	DWORD PTR _ocnt$[ebp], 0
	mov	DWORD PTR _sortBy$[ebp], 1

; 821  : 
; 822  : #ifdef KEV_GDEBUG
; 823  : 	ulong	time,newtime;
; 824  : 	time = GetTickCount();
; 825  : #endif
; 826  : 
; 827  : 	if (!objList[orders] || !canidateList[orders])

	mov	eax, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+152], 0
	je	SHORT $LN30@AssignUnit
	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+200], 0
	jne	SHORT $LN31@AssignUnit
$LN30@AssignUnit:

; 828  : 		return 0;

	xor	eax, eax
	jmp	$LN32@AssignUnit
$LN31@AssignUnit:

; 829  : 
; 830  : 	// Special case for reserve orders - 
; 831  : 	// We're only going to reorder the unit farthest from our primary objective
; 832  : 	if (orders == GORD_RESERVE)		

	cmp	DWORD PTR _orders$[ebp], 0
	jne	$LN26@AssignUnit

; 833  : 	{
; 834  : 		GridIndex		x,y,px=512,py=512;

	mov	ecx, 512				; 00000200H
	mov	WORD PTR _px$12[ebp], cx
	mov	edx, 512				; 00000200H
	mov	WORD PTR _py$13[ebp], dx

; 835  : 		float			ds,bestds=FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _bestds$5[ebp], xmm0

; 836  : 		USNode			bestn=NULL;

	mov	DWORD PTR _bestn$4[ebp], 0

; 837  : 		Objective		po = (Objective) vuDatabase->Find(TeamInfo[owner]->GetGroundAction()->actionObjective);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _po$7[ebp], eax

; 838  : 
; 839  : 		if (po)

	cmp	DWORD PTR _po$7[ebp], 0
	je	SHORT $LN28@AssignUnit

; 840  : 			po->GetLocation(&px,&py);

	lea	ecx, DWORD PTR _py$13[ebp]
	push	ecx
	lea	edx, DWORD PTR _px$12[ebp]
	push	edx
	mov	ecx, DWORD PTR _po$7[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN28@AssignUnit:

; 841  : 		nextu = canidateList[orders];

	mov	eax, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+200]
	mov	DWORD PTR _nextu$[ebp], edx
$LN27@AssignUnit:

; 842  : 		while (nextu)

	cmp	DWORD PTR _nextu$[ebp], 0
	je	$LN26@AssignUnit

; 843  : 		{
; 844  : 			curu = nextu;

	mov	eax, DWORD PTR _nextu$[ebp]
	mov	DWORD PTR _curu$[ebp], eax

; 845  : 			nextu = curu->next;

	mov	ecx, DWORD PTR _curu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _nextu$[ebp], edx

; 846  : 			curu->unit->GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _curu$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 847  : 			ds = (float) DistSqu(x,y,px,py);

	movzx	eax, WORD PTR _py$13[ebp]
	push	eax
	movzx	ecx, WORD PTR _px$12[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$9[ebp]
	push	edx
	movzx	eax, WORD PTR _x$8[ebp]
	push	eax
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _ds$6[ebp], xmm0

; 848  : 			if (ds < bestds)

	movss	xmm0, DWORD PTR _bestds$5[ebp]
	comiss	xmm0, DWORD PTR _ds$6[ebp]
	jbe	SHORT $LN25@AssignUnit

; 849  : 			{
; 850  : 				bestds = ds;

	movss	xmm0, DWORD PTR _ds$6[ebp]
	movss	DWORD PTR _bestds$5[ebp], xmm0

; 851  : 				if (bestn)

	cmp	DWORD PTR _bestn$4[ebp], 0
	je	SHORT $LN24@AssignUnit

; 852  : 					canidateList[orders] = canidateList[orders]->Remove(curu);

	mov	ecx, DWORD PTR _curu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200]
	call	?Remove@UnitScoreNode@@QAEPAV1@PAV1@@Z	; UnitScoreNode::Remove
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+200], eax
$LN24@AssignUnit:

; 853  : 				bestn = curu;

	mov	eax, DWORD PTR _curu$[ebp]
	mov	DWORD PTR _bestn$4[ebp], eax

; 854  : 			}
; 855  : 			else

	jmp	SHORT $LN23@AssignUnit
$LN25@AssignUnit:

; 856  : 				canidateList[orders] = canidateList[orders]->Remove(curu);

	mov	ecx, DWORD PTR _curu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200]
	call	?Remove@UnitScoreNode@@QAEPAV1@PAV1@@Z	; UnitScoreNode::Remove
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+200], eax
$LN23@AssignUnit:

; 857  : 		}

	jmp	$LN27@AssignUnit
$LN26@AssignUnit:

; 858  : 	}
; 859  : 
; 860  : 	// Maintain canidate list
; 861  : 	nextu = canidateList[orders];

	mov	eax, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+200]
	mov	DWORD PTR _nextu$[ebp], edx
$LN22@AssignUnit:

; 862  : 	while (nextu)

	cmp	DWORD PTR _nextu$[ebp], 0
	je	SHORT $LN21@AssignUnit

; 863  : 	{
; 864  : 		curu = nextu;

	mov	eax, DWORD PTR _nextu$[ebp]
	mov	DWORD PTR _curu$[ebp], eax

; 865  : 		nextu = curu->next;

	mov	ecx, DWORD PTR _curu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _nextu$[ebp], edx

; 866  : 		if (curu->unit->Assigned())

	mov	eax, DWORD PTR _curu$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Assigned@UnitClass@@QBEHXZ		; UnitClass::Assigned
	test	eax, eax
	je	SHORT $LN20@AssignUnit

; 867  : 			canidateList[orders] = canidateList[orders]->Remove(curu);

	mov	ecx, DWORD PTR _curu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200]
	call	?Remove@UnitScoreNode@@QAEPAV1@PAV1@@Z	; UnitScoreNode::Remove
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+200], eax

; 868  : 		else

	jmp	SHORT $LN19@AssignUnit
$LN20@AssignUnit:

; 869  : 			ucnt++;

	mov	eax, DWORD PTR _ucnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _ucnt$[ebp], eax
$LN19@AssignUnit:

; 870  : 	}

	jmp	SHORT $LN22@AssignUnit
$LN21@AssignUnit:

; 871  : 
; 872  : 	// Set up our lists
; 873  : 	nexto = objList[orders];

	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+152]
	mov	DWORD PTR _nexto$[ebp], eax
$LN35@AssignUnit:

; 874  : 	while (nexto)

	cmp	DWORD PTR _nexto$[ebp], 0
	je	$LN17@AssignUnit

; 875  : 	{
; 876  : 		curo = nexto;

	mov	ecx, DWORD PTR _nexto$[ebp]
	mov	DWORD PTR _curo$[ebp], ecx

; 877  : 		nexto = curo->next;

	mov	edx, DWORD PTR _curo$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _nexto$[ebp], eax

; 878  : 
; 879  : 		if (orders == GORD_REPAIR) {

	cmp	DWORD PTR _orders$[ebp], 8
	jne	$LN12@AssignUnit

; 880  : 			// RV - Biker - Only repair ABs if they are used by some squadron
; 881  : 			if (curo->obj->GetType() == TYPE_AIRBASE || curo->obj->GetType() == TYPE_AIRSTRIP) {

	mov	ecx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN14@AssignUnit
	mov	eax, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN13@AssignUnit
$LN14@AssignUnit:

; 882  : 				ATMAirbaseClass* atmbase = TeamInfo[curo->obj->GetTeam()]->atm->FindATMAirbase (curo->obj->Id());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _curo$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	ecx, DWORD PTR [ecx+876]
	call	?FindATMAirbase@AirTaskingManagerClass@@QAEPAVATMAirbaseClass@@VVU_ID@@@Z ; AirTaskingManagerClass::FindATMAirbase
	mov	DWORD PTR _atmbase$3[ebp], eax

; 883  : 				
; 884  : 				//Biker - That does not work???
; 885  : 				if (atmbase && atmbase->usage < 1) {

	cmp	DWORD PTR _atmbase$3[ebp], 0
	je	SHORT $LN13@AssignUnit
	mov	edx, DWORD PTR _atmbase$3[ebp]
	movzx	eax, BYTE PTR [edx+40]
	cmp	eax, 1
	jge	SHORT $LN13@AssignUnit

; 886  : 					continue;

	jmp	$LN35@AssignUnit
$LN13@AssignUnit:

; 887  : 				}
; 888  : 			}
; 889  : 
; 890  : 			GridIndex ox = 0, oy = 0;

	xor	ecx, ecx
	mov	WORD PTR _ox$10[ebp], cx
	xor	edx, edx
	mov	WORD PTR _oy$11[ebp], dx

; 891  : 			curo->obj->GetLocation(&ox, &oy);

	lea	eax, DWORD PTR _oy$11[ebp]
	push	eax
	lea	ecx, DWORD PTR _ox$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 892  : 			float dist = DistanceToFront(ox,oy);

	movzx	eax, WORD PTR _oy$11[ebp]
	push	eax
	movzx	ecx, WORD PTR _ox$10[ebp]
	push	ecx
	call	?DistanceToFront@@YAMFF@Z		; DistanceToFront
	add	esp, 8
	fstp	DWORD PTR _dist$2[ebp]

; 893  : 
; 894  : 			// RV - Biker - Do not repair object near front only if it's a bridge
; 895  : 			if (curo->obj->Type() !=  TYPE_BRIDGE && (curo->obj->IsFrontline() || curo->obj->IsSecondline() || curo->obj->IsThirdline() || dist < 15.0f)) {

	mov	edx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	cmp	eax, 6
	je	SHORT $LN12@AssignUnit
	mov	ecx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	jne	SHORT $LN11@AssignUnit
	mov	edx, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?IsSecondline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondline
	test	eax, eax
	jne	SHORT $LN11@AssignUnit
	mov	eax, DWORD PTR _curo$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsThirdline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsThirdline
	test	eax, eax
	jne	SHORT $LN11@AssignUnit
	movss	xmm0, DWORD PTR __real@41700000
	comiss	xmm0, DWORD PTR _dist$2[ebp]
	jbe	SHORT $LN12@AssignUnit
$LN11@AssignUnit:

; 896  : 				continue;

	jmp	$LN35@AssignUnit
$LN12@AssignUnit:

; 897  : 			}
; 898  : 		}
; 899  : 
; 900  : 		if (ocnt <= ucnt)

	mov	ecx, DWORD PTR _ocnt$[ebp]
	cmp	ecx, DWORD PTR _ucnt$[ebp]
	jg	$LN10@AssignUnit

; 901  : 		{
; 902  : 			// Only take one objective per available unit (highest priority first)
; 903  : 			curu = canidateList[orders];

	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200]
	mov	DWORD PTR _curu$[ebp], ecx
$LN9@AssignUnit:

; 904  : 			while (curu)

	cmp	DWORD PTR _curu$[ebp], 0
	je	SHORT $LN8@AssignUnit

; 905  : 			{
; 906  : 				curo->InsertUnit(curu->unit, curu->score, ScoreUnitFast(curu,curo,orders,mode));

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _orders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curu$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScoreUnitFast@GroundTaskingManagerClass@@QAEHPAVUnitScoreNode@@PAVGndObjDataType@@HH@Z ; GroundTaskingManagerClass::ScoreUnitFast
	push	eax
	mov	eax, DWORD PTR _curu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _curu$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _curo$[ebp]
	call	?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z ; GndObjDataType::InsertUnit

; 907  : 				curu = curu->next;

	mov	ecx, DWORD PTR _curu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _curu$[ebp], edx

; 908  : 			}

	jmp	SHORT $LN9@AssignUnit
$LN8@AssignUnit:

; 909  : 			if (curo->unit_options > 0)

	mov	eax, DWORD PTR _curo$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN7@AssignUnit

; 910  : 				ocnt++;

	mov	ecx, DWORD PTR _ocnt$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ocnt$[ebp], ecx

; 911  : 			else

	jmp	SHORT $LN6@AssignUnit
$LN7@AssignUnit:

; 912  : 				objList[orders] = objList[orders]->Remove(curo);

	mov	edx, DWORD PTR _curo$[ebp]
	push	edx
	mov	eax, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+152]
	call	?Remove@GndObjDataType@@QAEPAV1@PAV1@@Z	; GndObjDataType::Remove
	mov	edx, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+152], eax
$LN6@AssignUnit:

; 913  : 		}
; 914  : 		else

	jmp	SHORT $LN5@AssignUnit
$LN10@AssignUnit:

; 915  : 			objList[orders] = objList[orders]->Remove(curo);

	mov	edx, DWORD PTR _curo$[ebp]
	push	edx
	mov	eax, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+152]
	call	?Remove@GndObjDataType@@QAEPAV1@PAV1@@Z	; GndObjDataType::Remove
	mov	edx, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+152], eax
$LN5@AssignUnit:

; 916  : 	}

	jmp	$LN35@AssignUnit
$LN17@AssignUnit:

; 917  : 
; 918  : 	// Assign each objective
; 919  : 	while (objList[orders]) // && canidateList[orders])

	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+152], 0
	je	SHORT $LN3@AssignUnit

; 920  : 	{
; 921  : 		curo = objList[orders] = objList[orders]->Sort(GODN_SORT_BY_OPTIONS);

	push	2
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+152]
	call	?Sort@GndObjDataType@@QAEPAV1@H@Z	; GndObjDataType::Sort
	mov	DWORD PTR tv328[ebp], eax
	mov	eax, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv328[ebp]
	mov	DWORD PTR [ecx+eax*4+152], edx
	mov	eax, DWORD PTR tv328[ebp]
	mov	DWORD PTR _curo$[ebp], eax

; 922  : 		if (curo)

	cmp	DWORD PTR _curo$[ebp], 0
	je	SHORT $LN2@AssignUnit

; 923  : 			AssignObjective(curo, orders, mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orders$[ebp]
	push	edx
	mov	eax, DWORD PTR _curo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignObjective@GroundTaskingManagerClass@@QAEHPAVGndObjDataType@@HH@Z ; GroundTaskingManagerClass::AssignObjective
$LN2@AssignUnit:

; 924  : 	}

	jmp	SHORT $LN17@AssignUnit
$LN3@AssignUnit:

; 925  : 
; 926  : 	if (canidateList[orders])

	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+200], 0
	je	SHORT $LN1@AssignUnit

; 927  : 		canidateList[orders] = canidateList[orders]->Purge();

	mov	eax, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+200]
	call	?Purge@UnitScoreNode@@QAEPAV1@XZ	; UnitScoreNode::Purge
	mov	edx, DWORD PTR _orders$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+200], eax
$LN1@AssignUnit:

; 928  : 
; 929  : #ifdef KEV_GDEBUG
; 930  : 	newtime = GetTickCount();
; 931  : 	Time[orders] = newtime - time;
; 932  : #endif
; 933  : 
; 934  : 	return 1;

	mov	eax, 1
$LN32@AssignUnit:

; 935  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ENDP	; GroundTaskingManagerClass::AssignUnits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 8
$T2 = -40						; size = 8
$T3 = -32						; size = 8
$T4 = -24						; size = 8
_this$ = -16						; size = 4
_pod$ = -12						; size = 4
_po$ = -8						; size = 4
_so$ = -4						; size = 4
_u$ = 8							; size = 4
_orders$ = 12						; size = 4
_o$ = 16						; size = 4
_score$ = 20						; size = 4
?AssignUnit@GroundTaskingManagerClass@@QAEHPAVUnitClass@@HPAVObjectiveClass@@H@Z PROC ; GroundTaskingManagerClass::AssignUnit
; _this$ = ecx

; 763  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 764  : 	Objective	so,po;
; 765  : 	POData		pod;
; 766  : 	//	SOData		sod;
; 767  : 
; 768  : 	if (!u || !o)

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN4@AssignUnit
	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN5@AssignUnit
$LN4@AssignUnit:

; 769  : 		return 0;

	xor	eax, eax
	jmp	$LN6@AssignUnit
$LN5@AssignUnit:

; 770  : 
; 771  : #ifdef KEV_GDEBUG
; 772  : 	AssignedCount[orders]++;
; 773  : #endif
; 774  : 
; 775  : 	Assigned++;

	mov	eax, DWORD PTR ?Assigned@@3HA		; Assigned
	add	eax, 1
	mov	DWORD PTR ?Assigned@@3HA, eax		; Assigned

; 776  : 
; 777  : 	// Set local data right now...
; 778  : 	u->SetAssigned(1);

	push	1
	mov	ecx, DWORD PTR _u$[ebp]
	call	?SetAssigned@UnitClass@@QAEXH@Z		; UnitClass::SetAssigned

; 779  : 	u->SetOrdered(1);

	push	1
	mov	ecx, DWORD PTR _u$[ebp]
	call	?SetOrdered@UnitClass@@QAEXH@Z		; UnitClass::SetOrdered

; 780  : 	u->SetUnitOrders(orders, o->Id());

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _orders$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx

; 781  : 
; 782  : 	// Now collect the SO and PO from this objective, if we don't already have them
; 783  : 	po = so = o;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR _so$[ebp], eax
	mov	ecx, DWORD PTR _so$[ebp]
	mov	DWORD PTR _po$[ebp], ecx

; 784  : 	if (!so->IsSecondary() && o->GetObjectiveParent())

	mov	ecx, DWORD PTR _so$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	jne	SHORT $LN3@AssignUnit
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	test	eax, eax
	je	SHORT $LN3@AssignUnit

; 785  : 		po = so = o->GetObjectiveParent();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _so$[ebp], eax
	mov	edx, DWORD PTR _so$[ebp]
	mov	DWORD PTR _po$[ebp], edx
$LN3@AssignUnit:

; 786  : 	if (!po->IsPrimary() && so->GetObjectiveParent())

	mov	ecx, DWORD PTR _po$[ebp]
	call	?IsPrimary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsPrimary
	test	eax, eax
	jne	SHORT $LN2@AssignUnit
	mov	ecx, DWORD PTR _so$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	test	eax, eax
	je	SHORT $LN2@AssignUnit

; 787  : 		po = so->GetObjectiveParent();

	mov	ecx, DWORD PTR _so$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _po$[ebp], eax
$LN2@AssignUnit:

; 788  : 	u->SetUnitObjective(o->Id());

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+824]
	call	eax

; 789  : 	u->SetUnitSecondaryObj(so->Id());

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _so$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+820]
	call	eax

; 790  : 	u->SetUnitPrimaryObj(po->Id());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _po$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+816]
	call	eax

; 791  : 
; 792  : 	// Increment unit count for this primary
; 793  : 	pod = GetPOData(po);

	mov	ecx, DWORD PTR _po$[ebp]
	push	ecx
	call	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
	add	esp, 4
	mov	DWORD PTR _pod$[ebp], eax

; 794  : 	if (pod)

	cmp	DWORD PTR _pod$[ebp], 0
	je	SHORT $LN1@AssignUnit

; 795  : 		pod->ground_assigned[owner] += u->GetTotalVehicles();

	mov	edx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	ecx, DWORD PTR _pod$[ebp]
	movsx	edx, WORD PTR [ecx+esi*2+24]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	eax, DWORD PTR _pod$[ebp]
	mov	WORD PTR [eax+ecx*2+24], dx
$LN1@AssignUnit:

; 796  : 	/*	if (so != po)
; 797  : 		{
; 798  : 		sod = GetSOData(so);
; 799  : 		if (sod)
; 800  : 		sod->assigned[owner] += u->GetTotalVehicles();
; 801  : 		}
; 802  : 	 */
; 803  : 
; 804  : #ifdef KEV_GDEBUG
; 805  : 	//	char		name1[128],name2[128];
; 806  : 	//	GridIndex	x,y,ux,uy;
; 807  : 	//	u->GetName(name1,127);
; 808  : 	//	o->GetName(name2,127);
; 809  : 	//	u->GetLocation(&ux,&uy);
; 810  : 	//	o->GetLocation(&x,&y);
; 811  : 	//	MonoPrint("%s (%d) %s -> %s (%d) @ %d,%d - d:%d, s:%d\n",name1,u->GetCampID(),OrderStr[orders],name2,o->GetCampID(),x,y,(int)Distance(ux,uy,x,y),score);
; 812  : #endif
; 813  : 	return 1;

	mov	eax, 1
$LN6@AssignUnit:

; 814  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AssignUnit@GroundTaskingManagerClass@@QAEHPAVUnitClass@@HPAVObjectiveClass@@H@Z ENDP ; GroundTaskingManagerClass::AssignUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
_orders$ = 8						; size = 4
_o$ = 12						; size = 4
?IsValidObjective@GroundTaskingManagerClass@@QAEHHPAVObjectiveClass@@@Z PROC ; GroundTaskingManagerClass::IsValidObjective
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 393  : 	if (!o)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN27@IsValidObj

; 394  : 		return 0;

	xor	eax, eax
	jmp	$LN28@IsValidObj
$LN27@IsValidObj:

; 395  : 
; 396  : 	switch (orders)

	mov	eax, DWORD PTR _orders$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 10			; 0000000aH
	ja	$LN2@IsValidObj
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN30@IsValidObj[edx*4]
$LN24@IsValidObj:

; 397  : 	{
; 398  : 			case GORD_CAPTURE:
; 399  : 					if (o->IsSecondary() && o->IsNearfront() && GetRoE(owner,o->GetTeam(),ROE_GROUND_CAPTURE) == ROE_ALLOWED)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN23@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	je	SHORT $LN23@IsValidObj
	push	3
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN23@IsValidObj

; 400  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN23@IsValidObj:

; 401  : 					break;

	jmp	$LN25@IsValidObj
$LN22@IsValidObj:

; 402  : 			case GORD_SECURE:
; 403  : 					if (o->IsSecondary() && owner == o->GetTeam() && (o->IsFrontline() || o->IsSecondline()))

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN21@IsValidObj
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [ecx+146]
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN21@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	jne	SHORT $LN20@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondline
	test	eax, eax
	je	SHORT $LN21@IsValidObj
$LN20@IsValidObj:

; 404  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN21@IsValidObj:

; 405  : 					break;

	jmp	$LN25@IsValidObj
$LN19@IsValidObj:

; 406  : 			case GORD_ASSAULT:
; 407  : 					if (o->IsSecondary() && !o->IsNearfront() && o->IsBeach() && GetRoE(owner,o->GetTeam(),ROE_GROUND_CAPTURE) == ROE_ALLOWED)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN18@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	jne	SHORT $LN18@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsBeach@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsBeach
	test	eax, eax
	je	SHORT $LN18@IsValidObj
	push	3
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN18@IsValidObj

; 408  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN18@IsValidObj:

; 409  : 					break;

	jmp	$LN25@IsValidObj
$LN17@IsValidObj:

; 410  : 			case GORD_AIRBORNE:
; 411  : 					if (o->IsSecondary() && !o->IsNearfront()  && GetRoE(owner,o->GetTeam(),ROE_GROUND_CAPTURE) == ROE_ALLOWED) //  && !defended)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN16@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	jne	SHORT $LN16@IsValidObj
	push	3
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN16@IsValidObj

; 412  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN16@IsValidObj:

; 413  : 					break;

	jmp	$LN25@IsValidObj
$LN15@IsValidObj:

; 414  : 			case GORD_COMMANDO:
; 415  : 					if (o->CommandoSite() && GetRoE(owner,o->GetTeam(),ROE_GROUND_CAPTURE) == ROE_ALLOWED)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?CommandoSite@ObjectiveClass@@QAEHXZ	; ObjectiveClass::CommandoSite
	test	eax, eax
	je	SHORT $LN14@IsValidObj
	push	3
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN14@IsValidObj

; 416  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN14@IsValidObj:

; 417  : 					break;

	jmp	$LN25@IsValidObj
$LN13@IsValidObj:

; 418  : 			case GORD_DEFEND:
; 419  : 					if (o->IsSecondary() && o->IsNearfront() && owner == o->GetTeam() && !o->Abandoned())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN12@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	je	SHORT $LN12@IsValidObj
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [ecx+146]
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN12@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Abandoned@ObjectiveClass@@QAEHXZ	; ObjectiveClass::Abandoned
	test	eax, eax
	jne	SHORT $LN12@IsValidObj

; 420  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN12@IsValidObj:

; 421  : 					break;

	jmp	$LN25@IsValidObj
$LN11@IsValidObj:

; 422  : 			case GORD_SUPPORT:
; 423  : 					if (owner == o->GetTeam() && o->ArtillerySite())

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [ecx+146]
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN10@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?ArtillerySite@ObjectiveClass@@QAEHXZ	; ObjectiveClass::ArtillerySite
	test	eax, eax
	je	SHORT $LN10@IsValidObj

; 424  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN10@IsValidObj:

; 425  : 					break;

	jmp	$LN25@IsValidObj
$LN9@IsValidObj:

; 426  : 			case GORD_REPAIR:
; 427  : 					if (owner == o->GetTeam() && o->NeedRepair() && o->GetObjectiveStatus() < 51)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [ecx+146]
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN8@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?NeedRepair@ObjectiveClass@@QAEHXZ	; ObjectiveClass::NeedRepair
	test	eax, eax
	je	SHORT $LN8@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	ecx, al
	cmp	ecx, 51					; 00000033H
	jge	SHORT $LN8@IsValidObj

; 428  : 						return 1;

	mov	eax, 1
	jmp	$LN28@IsValidObj
$LN8@IsValidObj:

; 429  : 					break;

	jmp	$LN25@IsValidObj
$LN7@IsValidObj:

; 430  : 			case GORD_AIRDEFENSE:
; 431  : 					if (owner == o->GetTeam() && o->SamSite())

	mov	edx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [edx+146]
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN6@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SamSite@ObjectiveClass@@QAEHXZ		; ObjectiveClass::SamSite
	test	eax, eax
	je	SHORT $LN6@IsValidObj

; 432  : 						return 1;

	mov	eax, 1
	jmp	SHORT $LN28@IsValidObj
$LN6@IsValidObj:

; 433  : 					break;

	jmp	SHORT $LN25@IsValidObj
$LN5@IsValidObj:

; 434  : 			case GORD_RECON:
; 435  : 					return 0;

	xor	eax, eax
	jmp	SHORT $LN28@IsValidObj

; 436  : 					break;

	jmp	SHORT $LN25@IsValidObj
$LN4@IsValidObj:

; 437  : 			case GORD_RADAR:
; 438  : 					if (owner == o->GetTeam() && o->RadarSite())

	mov	edx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [edx+146]
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN3@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?RadarSite@ObjectiveClass@@QAEHXZ	; ObjectiveClass::RadarSite
	test	eax, eax
	je	SHORT $LN3@IsValidObj

; 439  : 						return 1;

	mov	eax, 1
	jmp	SHORT $LN28@IsValidObj
$LN3@IsValidObj:

; 440  : 					break;

	jmp	SHORT $LN25@IsValidObj
$LN2@IsValidObj:

; 441  : 			case GORD_RESERVE:
; 442  : 			default:
; 443  : 					if (o->IsSecondary() && owner == o->GetTeam() && !o->IsNearfront())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN25@IsValidObj
	mov	edx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [edx+146]
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN25@IsValidObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	jne	SHORT $LN25@IsValidObj

; 444  : 						return 1;

	mov	eax, 1
	jmp	SHORT $LN28@IsValidObj
$LN25@IsValidObj:

; 445  : 					break;
; 446  : 	}
; 447  : 	return 0;

	xor	eax, eax
$LN28@IsValidObj:

; 448  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
$LN30@IsValidObj:
	DD	$LN24@IsValidObj
	DD	$LN22@IsValidObj
	DD	$LN19@IsValidObj
	DD	$LN17@IsValidObj
	DD	$LN15@IsValidObj
	DD	$LN13@IsValidObj
	DD	$LN11@IsValidObj
	DD	$LN9@IsValidObj
	DD	$LN7@IsValidObj
	DD	$LN5@IsValidObj
	DD	$LN4@IsValidObj
?IsValidObjective@GroundTaskingManagerClass@@QAEHHPAVObjectiveClass@@@Z ENDP ; GroundTaskingManagerClass::IsValidObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_d$1 = -40						; size = 4
_o$2 = -36						; size = 4
_role$ = -32						; size = 4
_curo$3 = -28						; size = 4
_o$4 = -24						; size = 4
_orders$5 = -20						; size = 4
_this$ = -16						; size = 4
_i$ = -12						; size = 4
_x$6 = -8						; size = 2
_y$7 = -4						; size = 2
_u$ = 8							; size = 4
_to_collect$ = 12					; size = 4
?AddToLists@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z PROC ; GroundTaskingManagerClass::AddToLists
; _this$ = ecx

; 620  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 621  : 	int i,role;
; 622  : 
; 623  : 	// Units with valid orders are not reassigned
; 624  : 	if (u->GetUnitOrders() != GRO_RESERVE)

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+880]
	call	eax
	test	eax, eax
	je	$LN24@AddToLists

; 625  : 	{
; 626  : 		int orders = u->GetUnitOrders();

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+880]
	call	eax
	mov	DWORD PTR _orders$5[ebp], eax

; 627  : 		if ((to_collect & (0x01 << orders)) && IsValidObjective(orders,u->GetUnitObjective()))

	mov	edx, 1
	mov	ecx, DWORD PTR _orders$5[ebp]
	shl	edx, cl
	and	edx, DWORD PTR _to_collect$[ebp]
	je	$LN24@AddToLists
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+864]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _orders$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsValidObjective@GroundTaskingManagerClass@@QAEHHPAVObjectiveClass@@@Z ; GroundTaskingManagerClass::IsValidObjective
	test	eax, eax
	je	$LN24@AddToLists

; 628  : 		{
; 629  : 			Objective	o = u->GetUnitObjective();

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+864]
	call	edx
	mov	DWORD PTR _o$2[ebp], eax

; 630  : 			GODNode		curo = objList[orders];

	mov	eax, DWORD PTR _orders$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+152]
	mov	DWORD PTR _curo$3[ebp], edx
$LN25@AddToLists:

; 631  : 			while (curo)

	cmp	DWORD PTR _curo$3[ebp], 0
	je	SHORT $LN24@AddToLists

; 632  : 			{
; 633  : 				if (curo->obj == o)

	mov	eax, DWORD PTR _curo$3[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _o$2[ebp]
	jne	SHORT $LN23@AddToLists

; 634  : 				{
; 635  : 					if (orders == GORD_CAPTURE)

	cmp	DWORD PTR _orders$5[ebp], 1
	jne	SHORT $LN22@AddToLists

; 636  : 						sOffensiveAssigned++;

	mov	edx, DWORD PTR ?sOffensiveAssigned@@3HA	; sOffensiveAssigned
	add	edx, 1
	mov	DWORD PTR ?sOffensiveAssigned@@3HA, edx	; sOffensiveAssigned
$LN22@AddToLists:

; 637  : #ifdef KEV_GDEBUG
; 638  : 					UnitCount[orders]++;
; 639  : #endif
; 640  : 					AssignUnit(u,orders,o,999);

	push	999					; 000003e7H
	mov	eax, DWORD PTR _o$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _orders$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnit@GroundTaskingManagerClass@@QAEHPAVUnitClass@@HPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::AssignUnit

; 641  : 					// Their objective is removed from the satisfy list
; 642  : 					if (objList[orders])

	mov	eax, DWORD PTR _orders$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+152], 0
	je	SHORT $LN21@AddToLists

; 643  : 						objList[orders] = objList[orders]->Remove(o);

	mov	edx, DWORD PTR _o$2[ebp]
	push	edx
	mov	eax, DWORD PTR _orders$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+152]
	call	?Remove@GndObjDataType@@QAEPAV1@PAVObjectiveClass@@@Z ; GndObjDataType::Remove
	mov	edx, DWORD PTR _orders$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+152], eax
$LN21@AddToLists:

; 644  : 					return;

	jmp	$LN28@AddToLists
$LN23@AddToLists:

; 645  : 				}
; 646  : 				curo = curo->next;

	mov	edx, DWORD PTR _curo$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _curo$3[ebp], eax

; 647  : 			}

	jmp	$LN25@AddToLists
$LN24@AddToLists:

; 648  : 		}
; 649  : 	}
; 650  : 
; 651  : 	// Immobile units just do what they do best..
; 652  : 	if (u->GetMovementType() == NoMove)

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	test	eax, eax
	jne	$LN20@AddToLists

; 653  : 	{
; 654  : 		GridIndex	x,y;
; 655  : 		Objective	o;
; 656  : 		float		d=-1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _d$1[ebp], xmm0

; 657  : 		u->GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 658  : 		o = FindNearestObjective(x,y,&d);

	lea	eax, DWORD PTR _d$1[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$7[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$6[ebp]
	push	edx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$4[ebp], eax

; 659  : 		if (!o || d > 2.0F || GetRoE(o->GetTeam(),owner,ROE_GROUND_FIRE) == ROE_ALLOWED)

	cmp	DWORD PTR _o$4[ebp], 0
	je	SHORT $LN18@AddToLists
	movss	xmm0, DWORD PTR _d$1[ebp]
	comiss	xmm0, DWORD PTR __real@40000000
	ja	SHORT $LN18@AddToLists
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	push	ecx
	mov	edx, DWORD PTR _o$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$4[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN19@AddToLists
$LN18@AddToLists:

; 660  : 		{
; 661  : 			// Overrun!
; 662  : 			u->KillUnit();

	mov	ecx, DWORD PTR _u$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 663  : 			return;

	jmp	$LN28@AddToLists
$LN19@AddToLists:

; 664  : 		}
; 665  : 		i = GetGroundOrders(u->GetUnitNormalRole());

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	push	eax
	call	?GetGroundOrders@@YAHH@Z		; GetGroundOrders
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 666  : #ifdef KEV_GDEBUG
; 667  : 		UnitCount[i]++;
; 668  : #endif
; 669  : 		AssignUnit(u,i,o,999);

	push	999					; 000003e7H
	mov	ecx, DWORD PTR _o$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnit@GroundTaskingManagerClass@@QAEHPAVUnitClass@@HPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::AssignUnit

; 670  : 		if (objList[i])

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+152], 0
	je	SHORT $LN17@AddToLists

; 671  : 			objList[i] = objList[i]->Remove(o);

	mov	eax, DWORD PTR _o$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+152]
	call	?Remove@GndObjDataType@@QAEPAV1@PAVObjectiveClass@@@Z ; GndObjDataType::Remove
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+152], eax
$LN17@AddToLists:

; 672  : 		return;

	jmp	$LN28@AddToLists
$LN20@AddToLists:

; 673  : 	}
; 674  : 
; 675  : 	// Broken/unsupplied units get tasked as reserve only
; 676  : 	if (u->Broken() || u->GetUnitSupply() < 50)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	jne	SHORT $LN15@AddToLists
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+776]
	call	eax
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN16@AddToLists
$LN15@AddToLists:

; 677  : 	{
; 678  : 		AddToList(u, GORD_RESERVE);

	push	0
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToList

; 679  : 		return;

	jmp	$LN28@AddToLists
$LN16@AddToLists:

; 680  : 	}
; 681  : 
; 682  : 	u->SetUnitOrders(GORD_RESERVE);

	push	0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+832]
	call	edx

; 683  : 	u->SetAssigned(0);

	push	0
	mov	ecx, DWORD PTR _u$[ebp]
	call	?SetAssigned@UnitClass@@QAEXH@Z		; UnitClass::SetAssigned

; 684  : 
; 685  : 	// Check for one role units
; 686  : 	role = u->GetUnitNormalRole();

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	mov	DWORD PTR _role$[ebp], eax

; 687  : 	if (role == GRO_FIRESUPPORT || role == GRO_AIRDEFENSE || role == GRO_ENGINEER) // KCK: Radar units here?

	cmp	DWORD PTR _role$[ebp], 6
	je	SHORT $LN13@AddToLists
	cmp	DWORD PTR _role$[ebp], 5
	je	SHORT $LN13@AddToLists
	cmp	DWORD PTR _role$[ebp], 7
	jne	SHORT $LN14@AddToLists
$LN13@AddToLists:

; 688  : 	{
; 689  : 		AddToList(u, GetGroundOrders(role));

	mov	ecx, DWORD PTR _role$[ebp]
	push	ecx
	call	?GetGroundOrders@@YAHH@Z		; GetGroundOrders
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToList

; 690  : 		AddToList(u, GORD_RESERVE);

	push	0
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToList

; 691  : 		return;

	jmp	$LN28@AddToLists
$LN14@AddToLists:

; 692  : 	}
; 693  : 
; 694  : 	// Add it to a list for each type of orders it's capible of performing
; 695  : 	for (i=0; i<GORD_LAST; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@AddToLists
$LN11@AddToLists:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@AddToLists:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jge	$LN10@AddToLists

; 696  : 	{
; 697  : 		if (!(to_collect & (0x01 << i)))

	mov	edx, 1
	mov	ecx, DWORD PTR _i$[ebp]
	shl	edx, cl
	and	edx, DWORD PTR _to_collect$[ebp]
	jne	SHORT $LN9@AddToLists

; 698  : 			continue;

	jmp	SHORT $LN11@AddToLists
$LN9@AddToLists:

; 699  : 		if (i == GORD_ASSAULT && u->GetUnitNormalRole() != GRO_ASSAULT)

	cmp	DWORD PTR _i$[ebp], 3
	jne	SHORT $LN8@AddToLists
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	cmp	eax, 2
	je	SHORT $LN8@AddToLists

; 700  : 			continue;

	jmp	SHORT $LN11@AddToLists
$LN8@AddToLists:

; 701  : 		if (i == GORD_COMMANDO && !u->Commando())

	cmp	DWORD PTR _i$[ebp], 5
	jne	SHORT $LN7@AddToLists
	mov	ecx, DWORD PTR _u$[ebp]
	call	?Commando@UnitClass@@QBEHXZ		; UnitClass::Commando
	test	eax, eax
	jne	SHORT $LN7@AddToLists

; 702  : 			continue;

	jmp	SHORT $LN11@AddToLists
$LN7@AddToLists:

; 703  : 		if (i == GORD_AIRBORNE && u->GetUnitNormalRole() != GRO_AIRBORNE)

	cmp	DWORD PTR _i$[ebp], 4
	jne	SHORT $LN6@AddToLists
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	cmp	eax, 3
	je	SHORT $LN6@AddToLists

; 704  : 			continue;

	jmp	SHORT $LN11@AddToLists
$LN6@AddToLists:

; 705  : 		if (i == GORD_SUPPORT || i == GORD_REPAIR || i == GORD_AIRDEFENSE)

	cmp	DWORD PTR _i$[ebp], 7
	je	SHORT $LN4@AddToLists
	cmp	DWORD PTR _i$[ebp], 8
	je	SHORT $LN4@AddToLists
	cmp	DWORD PTR _i$[ebp], 9
	jne	SHORT $LN5@AddToLists
$LN4@AddToLists:

; 706  : 			continue;

	jmp	$LN11@AddToLists
$LN5@AddToLists:

; 707  : 		if (i == GORD_RADAR && u->GetUnitNormalRole() != GRO_RECON)

	cmp	DWORD PTR _i$[ebp], 11			; 0000000bH
	jne	SHORT $LN3@AddToLists
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	cmp	eax, 8
	je	SHORT $LN3@AddToLists

; 708  : 			continue;

	jmp	$LN11@AddToLists
$LN3@AddToLists:

; 709  : 		if (!i || u->GetUnitRoleScore(GetGroundRole(i), CALC_MAX, 0) > MIN_ALLOWABLE_ROLE_SCORE)

	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@AddToLists
	push	0
	push	3
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	?GetGroundRole@@YAHH@Z			; GetGroundRole
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetUnitRoleScore@UnitClass@@QAEHHHH@Z	; UnitClass::GetUnitRoleScore
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN2@AddToLists
$LN1@AddToLists:

; 710  : 		{
; 711  : 			// Add to canidate list
; 712  : 			AddToList(u, i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToList
$LN2@AddToLists:

; 713  : 		}
; 714  : 	}

	jmp	$LN11@AddToLists
$LN10@AddToLists:
$LN28@AddToLists:

; 715  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddToLists@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ENDP ; GroundTaskingManagerClass::AddToLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
tv73 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
_curu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_orders$ = 12						; size = 4
?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z PROC ; GroundTaskingManagerClass::AddToList
; _this$ = ecx

; 603  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 604  : 	USNode	curu;
; 605  : 
; 606  : 	if (orders == GORD_CAPTURE)

	cmp	DWORD PTR _orders$[ebp], 1
	jne	SHORT $LN2@AddToList

; 607  : 		sOffensiveAssigned++;

	mov	eax, DWORD PTR ?sOffensiveAssigned@@3HA	; sOffensiveAssigned
	add	eax, 1
	mov	DWORD PTR ?sOffensiveAssigned@@3HA, eax	; sOffensiveAssigned
$LN2@AddToList:

; 608  : #ifdef KEV_GDEBUG
; 609  : 	UnitCount[orders]++;
; 610  : #endif
; 611  : 	curu = new UnitScoreNode;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@AddToList
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0UnitScoreNode@@QAE@XZ		; UnitScoreNode::UnitScoreNode
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN6@AddToList
$LN5@AddToList:
	mov	DWORD PTR tv73[ebp], 0
$LN6@AddToList:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _curu$[ebp], edx

; 612  : 	curu->unit = u;

	mov	eax, DWORD PTR _curu$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], ecx

; 613  : 	curu->score = u->GetUnitRoleScore(GetGroundRole(orders), CALC_MAX, USE_VEH_COUNT | IGNORE_BROKEN);

	push	6
	push	3
	mov	edx, DWORD PTR _orders$[ebp]
	push	edx
	call	?GetGroundRole@@YAHH@Z			; GetGroundRole
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetUnitRoleScore@UnitClass@@QAEHHHH@Z	; UnitClass::GetUnitRoleScore
	mov	ecx, DWORD PTR _curu$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 614  : 	if (!canidateList[orders])

	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+200], 0
	jne	SHORT $LN1@AddToList

; 615  : 		canidateList[orders] = curu;

	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _curu$[ebp]
	mov	DWORD PTR [edx+ecx*4+200], eax
$LN1@AddToList:

; 616  : 	canidateList[orders] = canidateList[orders]->Insert(curu, USN_SORT_BY_SCORE);

	push	1
	mov	ecx, DWORD PTR _curu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orders$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200]
	call	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z	; UnitScoreNode::Insert
	mov	ecx, DWORD PTR _orders$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+200], eax

; 617  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddToList@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ENDP ; GroundTaskingManagerClass::AddToList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_myit$ = -48						; size = 12
$T2 = -36						; size = 4
_objListBuilt$ = -32					; size = 4
_pu$ = -28						; size = 4
_count$ = -24						; size = 4
_this$ = -20						; size = 4
_u$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_to_collect$ = 8					; size = 4
?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z PROC ; GroundTaskingManagerClass::CollectGroundAssets
; _this$ = ecx

; 719  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 720  : 	Unit			u,pu;
; 721  : 	int				count=0,objListBuilt=0;

	mov	DWORD PTR _count$[ebp], 0
	mov	DWORD PTR _objListBuilt$[ebp], 0

; 722  : 
; 723  : 	// Create the unit lists
; 724  : 	VuListIterator	myit(AllParentList);

	mov	eax, DWORD PTR ?AllParentList@@3PAVVuLinkedList@@A ; AllParentList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 725  : 	u = GetFirstUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN8@CollectGro:

; 726  : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN7@CollectGro

; 727  : 	{
; 728  : 		if (u->GetTeam() == owner && u->GetDomain() == DOMAIN_LAND && !u->Scripted())

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	cmp	eax, edx
	jne	$LN6@CollectGro
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 3
	jne	$LN6@CollectGro
	mov	ecx, DWORD PTR _u$[ebp]
	call	?Scripted@UnitClass@@QBEHXZ		; UnitClass::Scripted
	test	eax, eax
	jne	$LN6@CollectGro

; 729  : 		{
; 730  : 			// We've got at least one unit to assign - build our objective lists
; 731  : 			if (!objListBuilt)

	cmp	DWORD PTR _objListBuilt$[ebp], 0
	jne	SHORT $LN5@CollectGro

; 732  : 			{
; 733  : 				Setup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@GroundTaskingManagerClass@@QAEXXZ ; GroundTaskingManagerClass::Setup

; 734  : 				BuildObjectiveLists(to_collect);

	mov	ecx, DWORD PTR _to_collect$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z ; GroundTaskingManagerClass::BuildObjectiveLists

; 735  : 				objListBuilt = 1;

	mov	DWORD PTR _objListBuilt$[ebp], 1
$LN5@CollectGro:

; 736  : 			}
; 737  : 			u->RallyUnit(MIN_TASK_GROUND);

	movsx	edx, WORD PTR ?MIN_TASK_GROUND@@3FA	; MIN_TASK_GROUND
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+940]
	call	eax

; 738  : 			u->UpdateParentStatistics();

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+988]
	call	eax

; 739  : 			// We want to order support battalions individually.
; 740  : 			if (!u->Real() && FindUnitSupportRole(u))

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@CollectGro
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	?FindUnitSupportRole@@YAHPAVUnitClass@@@Z ; FindUnitSupportRole
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@CollectGro

; 741  : 			{
; 742  : 				pu = u;

	mov	edx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _pu$[ebp], edx

; 743  : 				u = pu->GetFirstUnitElement();

	mov	eax, DWORD PTR _pu$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pu$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _u$[ebp], eax
$LN3@CollectGro:

; 744  : 				while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN2@CollectGro

; 745  : 				{
; 746  : 					AddToLists(u, to_collect);

	mov	ecx, DWORD PTR _to_collect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToLists@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToLists

; 747  : 					count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 748  : 					u = pu->GetNextUnitElement();

	mov	ecx, DWORD PTR _pu$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pu$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _u$[ebp], eax

; 749  : 				}

	jmp	SHORT $LN3@CollectGro
$LN2@CollectGro:

; 750  : 			}
; 751  : 			else

	jmp	SHORT $LN6@CollectGro
$LN4@CollectGro:

; 752  : 			{
; 753  : 				AddToLists(u, to_collect);

	mov	ecx, DWORD PTR _to_collect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToLists@GroundTaskingManagerClass@@QAEXPAVUnitClass@@H@Z ; GroundTaskingManagerClass::AddToLists

; 754  : 				count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN6@CollectGro:

; 755  : 			}
; 756  : 		}
; 757  : 		u = GetNextUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 758  : 	}

	jmp	$LN8@CollectGro
$LN7@CollectGro:

; 759  : 	return count;

	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]

; 760  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z ENDP ; GroundTaskingManagerClass::CollectGroundAssets
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_objit$ = -120						; size = 12
$T2 = -108						; size = 8
$T3 = -100						; size = 4
$T4 = -96						; size = 4
$T5 = -92						; size = 4
_pd$6 = -88						; size = 4
tv244 = -84						; size = 4
$T7 = -80						; size = 4
tv171 = -76						; size = 4
$T8 = -72						; size = 4
_pps$ = -68						; size = 4
_fs$ = -64						; size = 4
_ps$ = -60						; size = 4
_add_now$ = -56						; size = 4
_os$ = -52						; size = 4
_ss$ = -48						; size = 4
_so$ = -44						; size = 4
_new_node$9 = -40					; size = 4
_po$ = -36						; size = 4
_this$ = -32						; size = 4
_o$ = -28						; size = 4
_i$10 = -24						; size = 4
_ox$11 = -20						; size = 2
_oy$12 = -16						; size = 2
__$EHRec$ = -12						; size = 12
_to_collect$ = 8					; size = 4
?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z PROC ; GroundTaskingManagerClass::BuildObjectiveLists
; _this$ = ecx

; 529  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 	Objective		o=NULL,so=NULL,po=NULL;

	mov	DWORD PTR _o$[ebp], 0
	mov	DWORD PTR _so$[ebp], 0
	mov	DWORD PTR _po$[ebp], 0

; 531  : 	int				add_now=0,os=0,ss=0,ps=0,pps=0,fs=0;

	mov	DWORD PTR _add_now$[ebp], 0
	mov	DWORD PTR _os$[ebp], 0
	mov	DWORD PTR _ss$[ebp], 0
	mov	DWORD PTR _ps$[ebp], 0
	mov	DWORD PTR _pps$[ebp], 0
	mov	DWORD PTR _fs$[ebp], 0

; 532  : 
; 533  : 	// Create the objective lists
; 534  : 	VuListIterator	objit(AllObjList);

	mov	eax, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	eax
	lea	ecx, DWORD PTR _objit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 535  : 	o = GetFirstObjective(&objit);

	lea	ecx, DWORD PTR _objit$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN17@BuildObjec:

; 536  : 	while (o)

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN16@BuildObjec

; 537  : 	{
; 538  : 		add_now = GetAddBits(o, to_collect);

	mov	edx, DWORD PTR _to_collect$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAddBits@GroundTaskingManagerClass@@QAEHPAVObjectiveClass@@H@Z ; GroundTaskingManagerClass::GetAddBits
	mov	DWORD PTR _add_now$[ebp], eax

; 539  : 
; 540  : 		if (add_now)

	cmp	DWORD PTR _add_now$[ebp], 0
	je	$LN5@BuildObjec

; 541  : 		{
; 542  : 			so = po = o;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _po$[ebp], ecx
	mov	edx, DWORD PTR _po$[ebp]
	mov	DWORD PTR _so$[ebp], edx

; 543  : 			if (!so->IsSecondary())

	mov	ecx, DWORD PTR _so$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	jne	SHORT $LN14@BuildObjec

; 544  : 				so = o->GetObjectiveParent();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _so$[ebp], eax
$LN14@BuildObjec:

; 545  : 			if (!so)

	cmp	DWORD PTR _so$[ebp], 0
	jne	SHORT $LN13@BuildObjec

; 546  : 			{
; 547  : 				po = NULL;

	mov	DWORD PTR _po$[ebp], 0

; 548  : 				ps = os = ss = 0;

	mov	DWORD PTR _ss$[ebp], 0
	mov	eax, DWORD PTR _ss$[ebp]
	mov	DWORD PTR _os$[ebp], eax
	mov	ecx, DWORD PTR _os$[ebp]
	mov	DWORD PTR _ps$[ebp], ecx
	jmp	SHORT $LN11@BuildObjec
$LN13@BuildObjec:

; 549  : 			}
; 550  : 			else if (!po->IsPrimary())

	mov	ecx, DWORD PTR _po$[ebp]
	call	?IsPrimary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsPrimary
	test	eax, eax
	jne	SHORT $LN11@BuildObjec

; 551  : 				po = so->GetObjectiveParent();

	mov	ecx, DWORD PTR _so$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _po$[ebp], eax
$LN11@BuildObjec:

; 552  : 			os = o->GetObjectivePriority();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	movsx	edx, ax
	mov	DWORD PTR _os$[ebp], edx

; 553  : 			if (so)

	cmp	DWORD PTR _so$[ebp], 0
	je	SHORT $LN10@BuildObjec

; 554  : 				ss = so->GetObjectivePriority();

	mov	ecx, DWORD PTR _so$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	cwde
	mov	DWORD PTR _ss$[ebp], eax
$LN10@BuildObjec:

; 555  : 			if (po)

	cmp	DWORD PTR _po$[ebp], 0
	je	SHORT $LN9@BuildObjec

; 556  : 			{
; 557  : 				POData pd = GetPOData(po);

	mov	ecx, DWORD PTR _po$[ebp]
	push	ecx
	call	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
	add	esp, 4
	mov	DWORD PTR _pd$6[ebp], eax

; 558  : 				pps = pd->ground_priority[owner];

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR _pd$6[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+8]
	mov	DWORD PTR _pps$[ebp], edx

; 559  : 				ps = po->GetObjectivePriority();

	mov	ecx, DWORD PTR _po$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	cwde
	mov	DWORD PTR _ps$[ebp], eax
$LN9@BuildObjec:

; 560  : 			}
; 561  : 			if (add_now & (COLLECT_RESERVE | COLLECT_CAPTURE | COLLECT_SECURE | COLLECT_ASSAULT | COLLECT_AIRBORNE | COLLECT_DEFEND | GORD_SUPPORT))

	mov	ecx, DWORD PTR _add_now$[ebp]
	and	ecx, 95					; 0000005fH
	je	SHORT $LN8@BuildObjec

; 562  : 			{
; 563  : 				GridIndex		ox,oy;
; 564  : 				o->GetLocation(&ox,&oy);

	lea	edx, DWORD PTR _oy$12[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 565  : 				fs = FloatToInt32(DistanceToFront(ox,oy));

	movzx	ecx, WORD PTR _oy$12[ebp]
	push	ecx
	movzx	edx, WORD PTR _ox$11[ebp]
	push	edx
	call	?DistanceToFront@@YAMFF@Z		; DistanceToFront
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _fs$[ebp], eax
$LN8@BuildObjec:

; 566  : 			}
; 567  : 
; 568  : 			// Now insert it in the proper lists
; 569  : 			for (int i=0; i<GORD_LAST; i++)

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN7@BuildObjec
$LN6@BuildObjec:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN7@BuildObjec:
	cmp	DWORD PTR _i$10[ebp], 12		; 0000000cH
	jge	$LN5@BuildObjec

; 570  : 			{
; 571  : 				if (!(add_now & (0x01 << i)))

	mov	edx, 1
	mov	ecx, DWORD PTR _i$10[ebp]
	shl	edx, cl
	and	edx, DWORD PTR _add_now$[ebp]
	jne	SHORT $LN4@BuildObjec

; 572  : 					continue;

	jmp	SHORT $LN6@BuildObjec
$LN4@BuildObjec:

; 573  : 				if (i == GORD_CAPTURE)

	cmp	DWORD PTR _i$10[ebp], 1
	jne	SHORT $LN3@BuildObjec

; 574  : 					sOffensiveDesired++;

	mov	eax, DWORD PTR ?sOffensiveDesired@@3HA	; sOffensiveDesired
	add	eax, 1
	mov	DWORD PTR ?sOffensiveDesired@@3HA, eax	; sOffensiveDesired
$LN3@BuildObjec:

; 575  : #ifdef KEV_GDEBUG
; 576  : 				ObjCount[i]++;
; 577  : #endif
; 578  : 				GODNode new_node = new GndObjDataType();

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN20@BuildObjec
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0GndObjDataType@@QAE@XZ		; GndObjDataType::GndObjDataType
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN21@BuildObjec
$LN20@BuildObjec:
	mov	DWORD PTR tv171[ebp], 0
$LN21@BuildObjec:
	mov	ecx, DWORD PTR tv171[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _new_node$9[ebp], edx

; 579  : 				new_node->obj = o;

	mov	eax, DWORD PTR _new_node$9[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], ecx

; 580  : 				new_node->priority_score = ScoreObj(i,os,ss,ps,pps,fs);

	mov	edx, DWORD PTR _fs$[ebp]
	push	edx
	mov	eax, DWORD PTR _pps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	push	edx
	mov	eax, DWORD PTR _os$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$10[ebp]
	push	ecx
	call	?ScoreObj@@YAHHHHHHH@Z			; ScoreObj
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _new_node$9[ebp]
	mov	DWORD PTR [edx+4], eax

; 581  : 				if (!objList[i])

	mov	eax, DWORD PTR _i$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+152], 0
	jne	SHORT $LN2@BuildObjec

; 582  : 					objList[i] = new_node;

	mov	edx, DWORD PTR _i$10[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_node$9[ebp]
	mov	DWORD PTR [eax+edx*4+152], ecx
$LN2@BuildObjec:

; 583  : 				objList[i] = objList[i]->Insert(new_node,GODN_SORT_BY_PRIORITY);

	push	1
	mov	edx, DWORD PTR _new_node$9[ebp]
	push	edx
	mov	eax, DWORD PTR _i$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+152]
	call	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z ; GndObjDataType::Insert
	mov	edx, DWORD PTR _i$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+152], eax

; 584  : 				// KCK EXPERIMENTAL: Try adding certain objectives twice!
; 585  : 				if (i == GORD_CAPTURE && TeamInfo[owner]->GetGroundActionType() == GACTION_OFFENSIVE && TeamInfo[owner]->GetGroundAction()->actionObjective == o->GetObjectivePrimary()->Id())

	cmp	DWORD PTR _i$10[ebp], 1
	jne	$LN1@BuildObjec
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundActionType@TeamClass@@QAEEXZ	; TeamClass::GetGroundActionType
	movzx	ecx, al
	cmp	ecx, 4
	jne	$LN1@BuildObjec
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectivePrimary@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectivePrimary
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	add	eax, 8
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN1@BuildObjec

; 586  : 				{
; 587  : 					new_node = new GndObjDataType();

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN22@BuildObjec
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0GndObjDataType@@QAE@XZ		; GndObjDataType::GndObjDataType
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN23@BuildObjec
$LN22@BuildObjec:
	mov	DWORD PTR tv244[ebp], 0
$LN23@BuildObjec:
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _new_node$9[ebp], ecx

; 588  : 					new_node->obj = o;

	mov	edx, DWORD PTR _new_node$9[ebp]
	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], eax

; 589  : 					new_node->priority_score = ScoreObj(i,os,ss,ps,pps,fs);

	mov	ecx, DWORD PTR _fs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pps$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	mov	edx, DWORD PTR _os$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$10[ebp]
	push	eax
	call	?ScoreObj@@YAHHHHHHH@Z			; ScoreObj
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _new_node$9[ebp]
	mov	DWORD PTR [ecx+4], eax

; 590  : 					objList[i] = objList[i]->Insert(new_node,GODN_SORT_BY_PRIORITY);

	push	1
	mov	edx, DWORD PTR _new_node$9[ebp]
	push	edx
	mov	eax, DWORD PTR _i$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+152]
	call	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z ; GndObjDataType::Insert
	mov	edx, DWORD PTR _i$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+152], eax
$LN1@BuildObjec:

; 591  : 				}
; 592  : 				// END EXPERIMENTAL
; 593  : 			}

	jmp	$LN6@BuildObjec
$LN5@BuildObjec:

; 594  : 		}
; 595  : 
; 596  : 		o = GetNextObjective(&objit);

	lea	edx, DWORD PTR _objit$[ebp]
	push	edx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 597  : 	}

	jmp	$LN17@BuildObjec
$LN16@BuildObjec:

; 598  : 
; 599  : 	return 1;

	mov	DWORD PTR $T3[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _objit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T3[ebp]

; 600  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z$0:
	lea	ecx, DWORD PTR _objit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z$2:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildObjectiveLists@GroundTaskingManagerClass@@QAEHH@Z ENDP ; GroundTaskingManagerClass::BuildObjectiveLists
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_add_now$ = -4						; size = 4
_o$ = 8							; size = 4
_to_collect$ = 12					; size = 4
?GetAddBits@GroundTaskingManagerClass@@QAEHPAVObjectiveClass@@H@Z PROC ; GroundTaskingManagerClass::GetAddBits
; _this$ = ecx

; 454  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 455  : 	int add_now = to_collect;

	mov	eax, DWORD PTR _to_collect$[ebp]
	mov	DWORD PTR _add_now$[ebp], eax

; 456  : 
; 457  : 	if (!o)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN16@GetAddBits

; 458  : 		return 0;

	xor	eax, eax
	jmp	$LN17@GetAddBits
$LN16@GetAddBits:

; 459  : 
; 460  : 	if (!o->IsSecondary())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	jne	SHORT $LN15@GetAddBits

; 461  : 		add_now &= ~(COLLECT_RESERVE | COLLECT_CAPTURE | COLLECT_SECURE | COLLECT_ASSAULT | COLLECT_AIRBORNE | COLLECT_DEFEND);

	mov	ecx, DWORD PTR _add_now$[ebp]
	and	ecx, -96				; ffffffa0H
	mov	DWORD PTR _add_now$[ebp], ecx
$LN15@GetAddBits:

; 462  : 	if (o->IsNearfront())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	je	SHORT $LN14@GetAddBits

; 463  : 		add_now &= ~(COLLECT_RESERVE | COLLECT_ASSAULT | COLLECT_AIRBORNE);

	mov	edx, DWORD PTR _add_now$[ebp]
	and	edx, -26				; ffffffe6H
	mov	DWORD PTR _add_now$[ebp], edx

; 464  : 	else

	jmp	SHORT $LN13@GetAddBits
$LN14@GetAddBits:

; 465  : 		add_now &= ~(COLLECT_CAPTURE | COLLECT_DEFEND);

	mov	eax, DWORD PTR _add_now$[ebp]
	and	eax, -67				; ffffffbdH
	mov	DWORD PTR _add_now$[ebp], eax
$LN13@GetAddBits:

; 466  : 	if (owner != o->GetTeam())

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [ecx+146]
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	je	SHORT $LN12@GetAddBits

; 467  : 		add_now &= ~(COLLECT_RESERVE | COLLECT_SECURE | COLLECT_DEFEND | COLLECT_SUPPORT | COLLECT_REPAIR | COLLECT_AIRDEFENSE | COLLECT_RADAR);

	mov	ecx, DWORD PTR _add_now$[ebp]
	and	ecx, -3014				; fffff43aH
	mov	DWORD PTR _add_now$[ebp], ecx
$LN12@GetAddBits:

; 468  : 	if (GetRoE(owner,o->GetTeam(),ROE_GROUND_CAPTURE) != ROE_ALLOWED)

	push	3
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	je	SHORT $LN11@GetAddBits

; 469  : 		add_now &= ~(COLLECT_CAPTURE | COLLECT_ASSAULT | COLLECT_AIRBORNE | COLLECT_COMMANDO);

	mov	eax, DWORD PTR _add_now$[ebp]
	and	eax, -59				; ffffffc5H
	mov	DWORD PTR _add_now$[ebp], eax
$LN11@GetAddBits:

; 470  : 	if (o->Abandoned())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?Abandoned@ObjectiveClass@@QAEHXZ	; ObjectiveClass::Abandoned
	test	eax, eax
	je	SHORT $LN10@GetAddBits

; 471  : 		add_now &= ~COLLECT_DEFEND;

	mov	ecx, DWORD PTR _add_now$[ebp]
	and	ecx, -65				; ffffffbfH
	mov	DWORD PTR _add_now$[ebp], ecx
$LN10@GetAddBits:

; 472  : 	if (!o->IsFrontline() && !o->IsSecondline())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	jne	SHORT $LN9@GetAddBits
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondline
	test	eax, eax
	jne	SHORT $LN9@GetAddBits

; 473  : 		add_now &= ~(COLLECT_SECURE);

	mov	edx, DWORD PTR _add_now$[ebp]
	and	edx, -5					; fffffffbH
	mov	DWORD PTR _add_now$[ebp], edx
$LN9@GetAddBits:

; 474  : 	if (!o->IsBeach())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsBeach@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsBeach
	test	eax, eax
	jne	SHORT $LN8@GetAddBits

; 475  : 		add_now &= ~(COLLECT_ASSAULT);

	mov	eax, DWORD PTR _add_now$[ebp]
	and	eax, -9					; fffffff7H
	mov	DWORD PTR _add_now$[ebp], eax
$LN8@GetAddBits:

; 476  : 	if (1) // defended

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@GetAddBits

; 477  : 		add_now &= ~(COLLECT_AIRBORNE);

	mov	edx, DWORD PTR _add_now$[ebp]
	and	edx, -17				; ffffffefH
	mov	DWORD PTR _add_now$[ebp], edx
$LN7@GetAddBits:

; 478  : 	if (!o->CommandoSite())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?CommandoSite@ObjectiveClass@@QAEHXZ	; ObjectiveClass::CommandoSite
	test	eax, eax
	jne	SHORT $LN6@GetAddBits

; 479  : 		add_now &= ~(COLLECT_COMMANDO);

	mov	eax, DWORD PTR _add_now$[ebp]
	and	eax, -33				; ffffffdfH
	mov	DWORD PTR _add_now$[ebp], eax
$LN6@GetAddBits:

; 480  : 	if (!o->ArtillerySite())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?ArtillerySite@ObjectiveClass@@QAEHXZ	; ObjectiveClass::ArtillerySite
	test	eax, eax
	jne	SHORT $LN5@GetAddBits

; 481  : 		add_now &= ~(COLLECT_SUPPORT);

	mov	ecx, DWORD PTR _add_now$[ebp]
	and	ecx, -129				; ffffff7fH
	mov	DWORD PTR _add_now$[ebp], ecx
$LN5@GetAddBits:

; 482  : 	if (!o->NeedRepair() || o->GetObjectiveStatus() > 50)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?NeedRepair@ObjectiveClass@@QAEHXZ	; ObjectiveClass::NeedRepair
	test	eax, eax
	je	SHORT $LN3@GetAddBits
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	cmp	edx, 50					; 00000032H
	jle	SHORT $LN4@GetAddBits
$LN3@GetAddBits:

; 483  : 		add_now &= ~(COLLECT_REPAIR);

	mov	eax, DWORD PTR _add_now$[ebp]
	and	eax, -257				; fffffeffH
	mov	DWORD PTR _add_now$[ebp], eax
$LN4@GetAddBits:

; 484  : 	if (!o->SamSite())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?SamSite@ObjectiveClass@@QAEHXZ		; ObjectiveClass::SamSite
	test	eax, eax
	jne	SHORT $LN2@GetAddBits

; 485  : 		add_now &= ~(COLLECT_AIRDEFENSE);

	mov	ecx, DWORD PTR _add_now$[ebp]
	and	ecx, -513				; fffffdffH
	mov	DWORD PTR _add_now$[ebp], ecx
$LN2@GetAddBits:

; 486  : 	if (!o->RadarSite())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?RadarSite@ObjectiveClass@@QAEHXZ	; ObjectiveClass::RadarSite
	test	eax, eax
	jne	SHORT $LN1@GetAddBits

; 487  : 		add_now &= ~(COLLECT_RADAR);

	mov	edx, DWORD PTR _add_now$[ebp]
	and	edx, -2049				; fffff7ffH
	mov	DWORD PTR _add_now$[ebp], edx
$LN1@GetAddBits:

; 488  : 	return add_now;

	mov	eax, DWORD PTR _add_now$[ebp]
$LN17@GetAddBits:

; 489  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetAddBits@GroundTaskingManagerClass@@QAEHPAVObjectiveClass@@H@Z ENDP ; GroundTaskingManagerClass::GetAddBits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?Cleanup@GroundTaskingManagerClass@@QAEXXZ PROC		; GroundTaskingManagerClass::Cleanup
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 	for (int i=0; i<GORD_LAST; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@Cleanup
$LN4@Cleanup:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Cleanup:
	cmp	DWORD PTR _i$1[ebp], 12			; 0000000cH
	jge	SHORT $LN3@Cleanup

; 374  : 	{
; 375  : 		if (canidateList[i])

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+200], 0
	je	SHORT $LN2@Cleanup

; 376  : 			canidateList[i] = canidateList[i]->Purge();

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+200]
	call	?Purge@UnitScoreNode@@QAEPAV1@XZ	; UnitScoreNode::Purge
	mov	edx, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+200], eax
$LN2@Cleanup:

; 377  : 		if (objList[i])

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+152], 0
	je	SHORT $LN1@Cleanup

; 378  : 			objList[i] = objList[i]->Purge();

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+152]
	call	?Purge@GndObjDataType@@QAEPAV1@XZ	; GndObjDataType::Purge
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+152], eax
$LN1@Cleanup:

; 379  : #ifdef KEV_GDEBUG
; 380  : 		ObjCount[i] = 0;
; 381  : 		UnitCount[i] = 0;
; 382  : 		AssignedCount[i] = 0;
; 383  : 		Time[i] = 0;
; 384  : #endif
; 385  : 	}

	jmp	SHORT $LN4@Cleanup
$LN3@Cleanup:

; 386  : 	sOffensiveAssigned = sOffensiveDesired = 0;

	mov	DWORD PTR ?sOffensiveDesired@@3HA, 0	; sOffensiveDesired
	mov	eax, DWORD PTR ?sOffensiveDesired@@3HA	; sOffensiveDesired
	mov	DWORD PTR ?sOffensiveAssigned@@3HA, eax	; sOffensiveAssigned

; 387  : 	Assigned = 0;

	mov	DWORD PTR ?Assigned@@3HA, 0		; Assigned

; 388  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@GroundTaskingManagerClass@@QAEXXZ ENDP		; GroundTaskingManagerClass::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?Setup@GroundTaskingManagerClass@@QAEXXZ PROC		; GroundTaskingManagerClass::Setup
; _this$ = ecx

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 360  : 	for (int i=0; i<GORD_LAST; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Setup
$LN2@Setup:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Setup:
	cmp	DWORD PTR _i$1[ebp], 12			; 0000000cH
	jge	SHORT $LN1@Setup

; 361  : 	{
; 362  : 		canidateList[i] = NULL;

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+200], 0

; 363  : 		objList[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+152], 0

; 364  : 	}

	jmp	SHORT $LN2@Setup
$LN1@Setup:

; 365  : #ifdef KEV_GDEBUG
; 366  : 	ScoreTime = PickTime = ListBuildTime;
; 367  : #endif
; 368  : 	Assigned = 0;

	mov	DWORD PTR ?Assigned@@3HA, 0		; Assigned

; 369  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Setup@GroundTaskingManagerClass@@QAEXXZ ENDP		; GroundTaskingManagerClass::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_count$ = -24						; size = 4
_done$ = -20						; size = 4
tv177 = -16						; size = 4
_action$ = -12						; size = 4
_collect$ = -8						; size = 4
_this$ = -4						; size = 4
?Task@GroundTaskingManagerClass@@UAEHXZ PROC		; GroundTaskingManagerClass::Task
; _this$ = ecx

; 248  : {               

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 	int			done = 0;

	mov	DWORD PTR _done$[ebp], 0

; 250  : 	int			count=0,collect;

	mov	DWORD PTR _count$[ebp], 0

; 251  : 	int			action;
; 252  : 
; 253  : 	// Don't do this if we're not active, or not owned by this machine
; 254  : 	if (!(TeamInfo[owner]->flags & TEAM_ACTIVE) || !IsLocal())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	movsx	eax, WORD PTR [edx+350]
	and	eax, 1
	je	SHORT $LN15@Task
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN16@Task
$LN15@Task:

; 255  : 		return 0;

	xor	eax, eax
	jmp	$LN17@Task
$LN16@Task:

; 256  : 
; 257  : 	action = TeamInfo[owner]->GetGroundActionType();

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundActionType@TeamClass@@QAEEXZ	; TeamClass::GetGroundActionType
	movzx	ecx, al
	mov	DWORD PTR _action$[ebp], ecx

; 258  : 
; 259  : 	// Check for offensive grinding to a halt
; 260  : 	if (action == GACTION_OFFENSIVE && TeamInfo[owner]->GetGroundAction()->actionPoints == 0)

	cmp	DWORD PTR _action$[ebp], 4
	jne	SHORT $LN14@Task
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	ecx, BYTE PTR [eax+18]
	test	ecx, ecx
	jne	SHORT $LN14@Task

; 261  : 	{
; 262  : 		TeamInfo[owner]->SelectGroundAction();

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?SelectGroundAction@TeamClass@@QAEXXZ	; TeamClass::SelectGroundAction

; 263  : 		action = TeamInfo[owner]->GetGroundActionType();

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetGroundActionType@TeamClass@@QAEEXZ	; TeamClass::GetGroundActionType
	movzx	eax, al
	mov	DWORD PTR _action$[ebp], eax
$LN14@Task:

; 264  : 	}
; 265  : 
; 266  : #ifdef DEBUG
; 267  : 	ulong	time;//,newtime;
; 268  : 	time = GetTickCount();
; 269  : #endif
; 270  : 
; 271  : 	Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@GroundTaskingManagerClass@@QAEXXZ ; GroundTaskingManagerClass::Cleanup

; 272  : 
; 273  : 	// Choose types of orders we can give
; 274  : 	collect = COLLECT_AIRDEFENSE | COLLECT_SUPPORT | COLLECT_REPAIR | COLLECT_RESERVE | COLLECT_DEFEND | COLLECT_RADAR;

	mov	DWORD PTR _collect$[ebp], 3009		; 00000bc1H

; 275  : 	if (action == GACTION_OFFENSIVE)

	cmp	DWORD PTR _action$[ebp], 4
	jne	SHORT $LN13@Task

; 276  : 		collect |= COLLECT_CAPTURE | COLLECT_ASSAULT | COLLECT_AIRBORNE | COLLECT_COMMANDO | COLLECT_SECURE;

	mov	ecx, DWORD PTR _collect$[ebp]
	or	ecx, 62					; 0000003eH
	mov	DWORD PTR _collect$[ebp], ecx
	jmp	SHORT $LN12@Task
$LN13@Task:

; 277  : 	else if (action == GACTION_MINOROFFENSIVE)

	cmp	DWORD PTR _action$[ebp], 3
	jne	SHORT $LN11@Task

; 278  : 		collect |= COLLECT_SECURE;

	mov	edx, DWORD PTR _collect$[ebp]
	or	edx, 4
	mov	DWORD PTR _collect$[ebp], edx
	jmp	SHORT $LN12@Task
$LN11@Task:

; 279  : 	else if (action == GACTION_CONSOLIDATE)

	cmp	DWORD PTR _action$[ebp], 2
	jne	SHORT $LN12@Task

; 280  : 		collect |= COLLECT_SECURE;

	mov	eax, DWORD PTR _collect$[ebp]
	or	eax, 4
	mov	DWORD PTR _collect$[ebp], eax
$LN12@Task:

; 281  : 
; 282  : #ifdef KEV_GDEBUG
; 283  : 	ulong	ltime;
; 284  : 	ltime = GetTickCount();
; 285  : #endif
; 286  : 
; 287  : 	if (CollectGroundAssets(collect))

	mov	ecx, DWORD PTR _collect$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CollectGroundAssets@GroundTaskingManagerClass@@QAEHH@Z ; GroundTaskingManagerClass::CollectGroundAssets
	test	eax, eax
	je	$LN8@Task

; 288  : 	{
; 289  : #ifdef KEV_GDEBUG
; 290  : 		ListBuildTime = GetTickCount() - ltime;
; 291  : #endif
; 292  : 		// Give orders based on action type
; 293  : 		switch (action)

	mov	edx, DWORD PTR _action$[ebp]
	mov	DWORD PTR tv177[ebp], edx
	cmp	DWORD PTR tv177[ebp], 2
	je	SHORT $LN3@Task
	cmp	DWORD PTR tv177[ebp], 3
	je	SHORT $LN4@Task
	cmp	DWORD PTR tv177[ebp], 4
	je	SHORT $LN5@Task
	jmp	SHORT $LN2@Task
$LN5@Task:

; 294  : 		{
; 295  : 				case GACTION_OFFENSIVE:
; 296  : 						// Full offensive - priorities are offensive, securing, then defense
; 297  : 						AssignUnits (GORD_CAPTURE, GTM_MODE_FASTEST);

	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 298  : 						//				if (NavalSuperiority(owner) >= STATE_CONTESTED)
; 299  : 						AssignUnits (GORD_ASSAULT, GTM_MODE_BEST);

	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 300  : 						//				if (AirSuperiority(owner) >= STATE_CONTESTED)
; 301  : 						{
; 302  : 							AssignUnits (GORD_AIRBORNE, GTM_MODE_BEST);

	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 303  : 							AssignUnits (GORD_COMMANDO, GTM_MODE_BEST);

	push	0
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 304  : 						}
; 305  : 						AssignUnits (GORD_SECURE, GTM_MODE_FASTEST);

	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 306  : 						AssignUnits (GORD_DEFEND, GTM_MODE_BEST);

	push	0
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 307  : 						break;

	jmp	SHORT $LN6@Task
$LN4@Task:

; 308  : 				case GACTION_MINOROFFENSIVE:
; 309  : 						// Consolidation/Counterattack phase - priorities are securing objectives then defense
; 310  : 						AssignUnits (GORD_SECURE, GTM_MODE_BEST);

	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 311  : 						AssignUnits (GORD_DEFEND, GTM_MODE_BEST);

	push	0
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits
$LN3@Task:

; 312  : 				case GACTION_CONSOLIDATE:	
; 313  : 						// Cautious consolidation phase - priorities are defense, then securing objectives
; 314  : 						AssignUnits (GORD_DEFEND, GTM_MODE_FASTEST);

	push	1
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 315  : 						AssignUnits (GORD_SECURE, GTM_MODE_BEST);

	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 316  : 						break;

	jmp	SHORT $LN6@Task
$LN2@Task:

; 317  : 				case GACTION_DEFENSIVE:
; 318  : 				default:
; 319  : 						// Defensive posture - priorities are defense only
; 320  : 						AssignUnits (GORD_DEFEND, GTM_MODE_FASTEST);

	push	1
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits
$LN6@Task:

; 321  : 						break;
; 322  : 		}
; 323  : 
; 324  : 		// Now do the things we do all the time:
; 325  : 		AssignUnits (GORD_AIRDEFENSE, GTM_MODE_FASTEST);

	push	1
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 326  : 		AssignUnits (GORD_SUPPORT, GTM_MODE_FASTEST);

	push	1
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 327  : 		AssignUnits (GORD_REPAIR, GTM_MODE_FASTEST);

	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 328  : 		AssignUnits (GORD_RADAR, GTM_MODE_FASTEST);

	push	1
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits

; 329  : 		AssignUnits (GORD_RESERVE, GTM_MODE_BEST);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignUnits@GroundTaskingManagerClass@@QAEHHH@Z ; GroundTaskingManagerClass::AssignUnits
$LN8@Task:

; 330  : 	}
; 331  : 
; 332  : 	// Check if our tasking failed to meet at least 50 of our offensive requests
; 333  : 	if (sOffensiveDesired && sOffensiveAssigned < sOffensiveDesired/2)

	cmp	DWORD PTR ?sOffensiveDesired@@3HA, 0	; sOffensiveDesired
	je	SHORT $LN1@Task
	mov	eax, DWORD PTR ?sOffensiveDesired@@3HA	; sOffensiveDesired
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR ?sOffensiveAssigned@@3HA, eax	; sOffensiveAssigned
	jge	SHORT $LN1@Task

; 334  : 		TeamInfo[owner]->GetGroundAction()->actionPoints = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	BYTE PTR [eax+18], 0
$LN1@Task:

; 335  : 
; 336  : #ifdef KEV_GDEBUG
; 337  : 	int i;
; 338  : 	MonoPrint("Assigned:     ");
; 339  : 	for (i=0; i<GORD_LAST; i++)
; 340  : 		MonoPrint("%3d  ",AssignedCount[i]);
; 341  : 	MonoPrint("%3d\n",Assigned);
; 342  : 	MonoPrint("Time (s):     ");
; 343  : 	for (i=0; i<GORD_LAST; i++)
; 344  : 		MonoPrint("%3.1f  ",(float)(Time[i]/1000.0F));
; 345  : 	MonoPrint("\n");
; 346  : #endif
; 347  : 
; 348  : 	Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@GroundTaskingManagerClass@@QAEXXZ ; GroundTaskingManagerClass::Cleanup

; 349  : 
; 350  : #ifdef KEV_GDEBUG
; 351  : 	newtime = GetTickCount();
; 352  : 	MonoPrint("Ground tasking for team %d: %d ms\n",owner,newtime-time);
; 353  : #endif
; 354  : 
; 355  : 	return Assigned;

	mov	eax, DWORD PTR ?Assigned@@3HA		; Assigned
$LN17@Task:

; 356  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Task@GroundTaskingManagerClass@@UAEHXZ ENDP		; GroundTaskingManagerClass::Task
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_poit$ = -68						; size = 12
_fs$ = -56						; size = 4
_d$ = -52						; size = 4
_i$ = -48						; size = 4
_pd$ = -44						; size = 4
_es$ = -40						; size = 4
_o$ = -36						; size = 4
_score$ = -32						; size = 4
_this$ = -28						; size = 4
_x$ = -24						; size = 2
_y$ = -20						; size = 2
_t$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
?DoCalculations@GroundTaskingManagerClass@@UAEXXZ PROC	; GroundTaskingManagerClass::DoCalculations
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 	Objective		o;
; 167  : 	int				score,fs,es,i;
; 168  : 	float			d;
; 169  : 	Team			t;
; 170  : 	GridIndex		x,y;
; 171  : 	POData			pd;
; 172  : 
; 173  : 	// Don't do this if we're not active, or not owned by this machine
; 174  : 	if (!(TeamInfo[owner]->flags & TEAM_ACTIVE) || !IsLocal())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	movsx	eax, WORD PTR [edx+350]
	and	eax, 1
	je	SHORT $LN20@DoCalculat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN21@DoCalculat
$LN20@DoCalculat:

; 175  : 		return;

	jmp	$LN22@DoCalculat
$LN21@DoCalculat:

; 176  : 
; 177  : 	topPriority = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+248], dx

; 178  : 	VuListIterator	poit(POList);

	mov	ecx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	ecx
	lea	ecx, DWORD PTR _poit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 179  : 	o = GetFirstObjective(&poit);

	lea	edx, DWORD PTR _poit$[ebp]
	push	edx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN19@DoCalculat:

; 180  : 	while (o != NULL)

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN18@DoCalculat

; 181  : 	{
; 182  : 		// Get score for proximity to front
; 183  : 		o->GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 184  : 		d = DistanceToFront(x,y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?DistanceToFront@@YAMFF@Z		; DistanceToFront
	add	esp, 8
	fstp	DWORD PTR _d$[ebp]

; 185  : 		fs = FloatToInt32((200.0F - d) * 0.2F);

	movss	xmm0, DWORD PTR __real@43480000
	subss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _fs$[ebp], eax

; 186  : 
; 187  : 		t = o->GetTeam();

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _t$[ebp], al

; 188  : 		pd = GetPOData(o);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
	add	esp, 4
	mov	DWORD PTR _pd$[ebp], eax

; 189  : 		es = 0;

	mov	DWORD PTR _es$[ebp], 0

; 190  : 		// Get score for enemy strength
; 191  : 		if (d < 100.0F)

	movss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	$LN11@DoCalculat

; 192  : 		{
; 193  : 			for (i=1; i<NUM_TEAMS; i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN16@DoCalculat
$LN15@DoCalculat:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN16@DoCalculat:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN14@DoCalculat

; 194  : 			{
; 195  : 				if (GetRoE(owner,i,ROE_GROUND_FIRE))

	push	1
	movzx	eax, BYTE PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN13@DoCalculat

; 196  : 					es += pd->ground_assigned[i]/50;	// 1 assignment pt = 1 vehicle, so 1 enemy strength pt per 50 vehs..

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pd$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+24]
	cdq
	mov	ecx, 50					; 00000032H
	idiv	ecx
	add	eax, DWORD PTR _es$[ebp]
	mov	DWORD PTR _es$[ebp], eax
$LN13@DoCalculat:

; 197  : 			}

	jmp	SHORT $LN15@DoCalculat
$LN14@DoCalculat:

; 198  : 			if (es > 30)

	cmp	DWORD PTR _es$[ebp], 30			; 0000001eH
	jle	SHORT $LN12@DoCalculat

; 199  : 				es = 30;								// Cap enemy strength after 1500 vehicles

	mov	DWORD PTR _es$[ebp], 30			; 0000001eH
$LN12@DoCalculat:

; 200  : 			if (owner != t)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	movzx	ecx, BYTE PTR _t$[ebp]
	cmp	eax, ecx
	je	SHORT $LN11@DoCalculat

; 201  : 				es = -es + (rand()%5) - 2;

	mov	esi, DWORD PTR _es$[ebp]
	neg	esi
	call	_rand
	cdq
	mov	ecx, 5
	idiv	ecx
	lea	edx, DWORD PTR [esi+edx-2]
	mov	DWORD PTR _es$[ebp], edx
$LN11@DoCalculat:

; 202  : 		}
; 203  : 
; 204  : 		score = fs + es + (rand()%5);

	mov	esi, DWORD PTR _fs$[ebp]
	add	esi, DWORD PTR _es$[ebp]
	call	_rand
	cdq
	mov	ecx, 5
	idiv	ecx
	add	esi, edx
	mov	DWORD PTR _score$[ebp], esi

; 205  : 		if (o->GetObjectivePriority() > 95)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	movsx	edx, ax
	cmp	edx, 95					; 0000005fH
	jle	SHORT $LN10@DoCalculat

; 206  : 			score += 50;

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, 50					; 00000032H
	mov	DWORD PTR _score$[ebp], eax
$LN10@DoCalculat:

; 207  : 		if (o->GetObjectivePriority() > 90)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	movsx	ecx, ax
	cmp	ecx, 90					; 0000005aH
	jle	SHORT $LN9@DoCalculat

; 208  : 			score += 20;

	mov	edx, DWORD PTR _score$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _score$[ebp], edx

; 209  : 		else

	jmp	SHORT $LN8@DoCalculat
$LN9@DoCalculat:

; 210  : 			score += o->GetObjectivePriority() - 80;

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	cwde
	mov	ecx, DWORD PTR _score$[ebp]
	lea	edx, DWORD PTR [ecx+eax-80]
	mov	DWORD PTR _score$[ebp], edx
$LN8@DoCalculat:

; 211  : 
; 212  : 		//		os = (o->GetObjectivePriority()-80)*3;
; 213  : 		//		score = os + fs + es + (rand()%5);
; 214  : 
; 215  : 		if (score < 0)

	cmp	DWORD PTR _score$[ebp], 0
	jge	SHORT $LN7@DoCalculat

; 216  : 			score = 0;

	mov	DWORD PTR _score$[ebp], 0
$LN7@DoCalculat:

; 217  : 		if (score > 100)

	cmp	DWORD PTR _score$[ebp], 100		; 00000064H
	jle	SHORT $LN6@DoCalculat

; 218  : 			score = 100;

	mov	DWORD PTR _score$[ebp], 100		; 00000064H
$LN6@DoCalculat:

; 219  : 		// Minimum of 1 priority if it's owned by us.
; 220  : 		if (!score && t == owner)

	cmp	DWORD PTR _score$[ebp], 0
	jne	SHORT $LN5@DoCalculat
	movzx	eax, BYTE PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	cmp	eax, edx
	jne	SHORT $LN5@DoCalculat

; 221  : 			score = 1;

	mov	DWORD PTR _score$[ebp], 1
$LN5@DoCalculat:

; 222  : 
; 223  : 		// KCK: AI's air and ground priorities are identical for now
; 224  : 		if (!(pd->flags & GTMOBJ_SCRIPTED_PRIORITY))

	mov	eax, DWORD PTR _pd$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	and	ecx, 2
	jne	SHORT $LN4@DoCalculat

; 225  : 		{
; 226  : 			pd->ground_priority[owner] = score;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	mov	ecx, DWORD PTR _pd$[ebp]
	mov	dx, WORD PTR _score$[ebp]
	mov	WORD PTR [ecx+eax*2+8], dx

; 227  : 			pd->air_priority[owner] = score;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	mov	edx, DWORD PTR _pd$[ebp]
	mov	ax, WORD PTR _score$[ebp]
	mov	WORD PTR [edx+ecx*2+40], ax
$LN4@DoCalculat:

; 228  : 			// KCK: player_priority only used now if it's >= 0
; 229  : 			//			if (!(pd->flags & GTMOBJ_PLAYER_SET_PRIORITY))
; 230  : 			//				pd->player_priority[owner] = pd->air_priority[owner];
; 231  : 		}
; 232  : 
; 233  : 		if (!GetRoE(owner,t,ROE_GROUND_CAPTURE) && owner != t)

	push	3
	movzx	ecx, BYTE PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@DoCalculat
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	movzx	eax, BYTE PTR _t$[ebp]
	cmp	edx, eax
	je	SHORT $LN3@DoCalculat

; 234  : 			pd->ground_priority[owner] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+146]
	xor	eax, eax
	mov	ecx, DWORD PTR _pd$[ebp]
	mov	WORD PTR [ecx+edx*2+8], ax
$LN3@DoCalculat:

; 235  : 		if (!GetRoE(owner,t,ROE_AIR_ATTACK) && owner != t)

	push	8
	movzx	edx, BYTE PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+146]
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@DoCalculat
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	movzx	ecx, BYTE PTR _t$[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@DoCalculat

; 236  : 			pd->air_priority[owner] = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	xor	ecx, ecx
	mov	edx, DWORD PTR _pd$[ebp]
	mov	WORD PTR [edx+eax*2+40], cx
$LN2@DoCalculat:

; 237  : 
; 238  : 		if (score > topPriority)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+248]
	cmp	DWORD PTR _score$[ebp], ecx
	jle	SHORT $LN1@DoCalculat

; 239  : 		{
; 240  : 			topPriority = score;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _score$[ebp]
	mov	WORD PTR [edx+248], ax

; 241  : 			priorityObj = o->GetCampID();

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+250], ax
$LN1@DoCalculat:

; 242  : 		}
; 243  : 		o = GetNextObjective(&poit);

	lea	edx, DWORD PTR _poit$[ebp]
	push	edx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 244  : 	}

	jmp	$LN19@DoCalculat
$LN18@DoCalculat:

; 245  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _poit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN22@DoCalculat:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ$0:
	lea	ecx, DWORD PTR _poit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoCalculations@GroundTaskingManagerClass@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoCalculations@GroundTaskingManagerClass@@UAEXXZ ENDP	; GroundTaskingManagerClass::DoCalculations
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_tmpGTM$ = -8						; size = 4
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@GroundTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC ; GroundTaskingManagerClass::Handle
; _this$ = ecx

; 1100 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1101 : 	GroundTaskingManagerClass* tmpGTM = (GroundTaskingManagerClass*)(event->expandedData_.get());

	mov	ecx, DWORD PTR _event$[ebp]
	add	ecx, 48					; 00000030H
	call	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::get
	mov	DWORD PTR _tmpGTM$[ebp], eax

; 1102 : 
; 1103 : 	// Copy in new data
; 1104 : 	memcpy(&flags, &tmpGTM->flags, sizeof(short));

	push	2
	mov	eax, DWORD PTR _tmpGTM$[ebp]
	add	eax, 148				; 00000094H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1105 : 	return (VuEntity::Handle(event));

	mov	edx, DWORD PTR _event$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@VuEntity@@UAEHPAVVuFullUpdateEvent@@@Z ; VuEntity::Handle

; 1106 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@GroundTaskingManagerClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP ; GroundTaskingManagerClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_retval$ = -4						; size = 4
_file$ = 8						; size = 4
?Save@GroundTaskingManagerClass@@UAEHPAU_iobuf@@@Z PROC	; GroundTaskingManagerClass::Save
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 	int	retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 156  : 
; 157  : 	if (!file)

	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN1@Save

; 158  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Save
$LN1@Save:

; 159  : 	retval += CampManagerClass::Save(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@CampManagerClass@@UAEHPAU_iobuf@@@Z ; CampManagerClass::Save
	add	eax, DWORD PTR _retval$[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 160  : 	retval += fwrite(&flags, sizeof(short), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _retval$[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 161  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN2@Save:

; 162  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@GroundTaskingManagerClass@@UAEHPAU_iobuf@@@Z ENDP	; GroundTaskingManagerClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@GroundTaskingManagerClass@@UAEHPAPAE@Z PROC	; GroundTaskingManagerClass::Save
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 	CampManagerClass::Save(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@CampManagerClass@@UAEHPAPAE@Z	; CampManagerClass::Save

; 149  : 	memcpy(*stream, &flags, sizeof(short));					*stream += sizeof(short);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 150  : 	return GroundTaskingManagerClass::SaveSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@GroundTaskingManagerClass@@UAEHXZ ; GroundTaskingManagerClass::SaveSize

; 151  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@GroundTaskingManagerClass@@UAEHPAPAE@Z ENDP	; GroundTaskingManagerClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveSize@GroundTaskingManagerClass@@UAEHXZ PROC	; GroundTaskingManagerClass::SaveSize
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 	return CampManagerClass::SaveSize()
; 143  : 			+ sizeof(short);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@CampManagerClass@@UAEHXZ	; CampManagerClass::SaveSize
	add	eax, 2

; 144  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@GroundTaskingManagerClass@@UAEHXZ ENDP	; GroundTaskingManagerClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GroundTaskingManagerClass@@UAE@XZ PROC		; GroundTaskingManagerClass::~GroundTaskingManagerClass
; _this$ = ecx

; 137  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GroundTaskingManagerClass@@6B@

; 138  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CampManagerClass@@UAE@XZ		; CampManagerClass::~CampManagerClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1GroundTaskingManagerClass@@UAE@XZ ENDP		; GroundTaskingManagerClass::~GroundTaskingManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
??0GroundTaskingManagerClass@@QAE@PAU_iobuf@@@Z PROC	; GroundTaskingManagerClass::GroundTaskingManagerClass
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampManagerClass@@QAE@PAU_iobuf@@@Z	; CampManagerClass::CampManagerClass
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7GroundTaskingManagerClass@@6B@

; 130  : 	fread(&flags, sizeof(short), 1, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 131  : 	topPriority = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+248], cx

; 132  : 	memset(canidateList,0,sizeof(void*)*GORD_LAST);

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 133  : 	memset(objList,0,sizeof(void*)*GORD_LAST);

	push	48					; 00000030H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 134  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0GroundTaskingManagerClass@@QAE@PAU_iobuf@@@Z ENDP	; GroundTaskingManagerClass::GroundTaskingManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z PROC	; GroundTaskingManagerClass::GroundTaskingManagerClass
; _this$ = ecx

; 121  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampManagerClass@@QAE@PAPAEPAJ@Z	; CampManagerClass::CampManagerClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7GroundTaskingManagerClass@@6B@

; 122  : 	memcpychk(&flags, stream, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 123  : 	topPriority = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+248], ax

; 124  : 	memset(canidateList,0,sizeof(void*)*GORD_LAST);

	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 200				; 000000c8H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 125  : 	memset(objList,0,sizeof(void*)*GORD_LAST);

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 126  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampManagerClass@@UAE@XZ		; CampManagerClass::~CampManagerClass
__ehhandler$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0GroundTaskingManagerClass@@QAE@PAPAEPAJ@Z ENDP	; GroundTaskingManagerClass::GroundTaskingManagerClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 2
_t$ = 12						; size = 1
??0GroundTaskingManagerClass@@QAE@GE@Z PROC		; GroundTaskingManagerClass::GroundTaskingManagerClass
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _t$[ebp]
	push	eax
	movzx	ecx, WORD PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampManagerClass@@QAE@GE@Z		; CampManagerClass::CampManagerClass
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7GroundTaskingManagerClass@@6B@

; 114  : 	flags = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+148], ax

; 115  : 	topPriority = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+248], dx

; 116  : 	memset(canidateList,0,sizeof(void*)*GORD_LAST);

	push	48					; 00000030H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 117  : 	memset(objList,0,sizeof(void*)*GORD_LAST);

	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 118  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0GroundTaskingManagerClass@@QAE@GE@Z ENDP		; GroundTaskingManagerClass::GroundTaskingManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\division.h
;	COMDAT ?GetLocation@DivisionClass@@QAEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
?GetLocation@DivisionClass@@QAEXPAF0@Z PROC		; DivisionClass::GetLocation, COMDAT
; _this$ = ecx

; 34   : 		void GetLocation (GridIndex *rx, GridIndex *ry)		{ *rx = x; *ry = y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _ry$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetLocation@DivisionClass@@QAEXPAF0@Z ENDP		; DivisionClass::GetLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetCountry@CampManagerClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@CampManagerClass@@UAEEXZ PROC		; CampManagerClass::GetCountry, COMDAT
; _this$ = ecx

; 63   : 	virtual uchar GetCountry(void){ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@CampManagerClass@@UAEEXZ ENDP		; CampManagerClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetTeam@CampManagerClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@CampManagerClass@@UAEEXZ PROC			; CampManagerClass::GetTeam, COMDAT
; _this$ = ecx

; 62   : 	virtual uchar GetTeam(void)   { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CampManagerClass@@UAEEXZ ENDP			; CampManagerClass::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetCampID@CampManagerClass@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampID@CampManagerClass@@UAEFXZ PROC		; CampManagerClass::GetCampID, COMDAT
; _this$ = ecx

; 61   : 	virtual short GetCampID(void) { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampID@CampManagerClass@@UAEFXZ ENDP		; CampManagerClass::GetCampID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?Sleep@CampManagerClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Sleep@CampManagerClass@@UAEHXZ PROC			; CampManagerClass::Sleep, COMDAT
; _this$ = ecx

; 56   : 	virtual int Sleep (void) {return 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep@CampManagerClass@@UAEHXZ ENDP			; CampManagerClass::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?Wake@CampManagerClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wake@CampManagerClass@@UAEHXZ PROC			; CampManagerClass::Wake, COMDAT
; _this$ = ecx

; 55   : 	virtual int Wake (void) {return 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Wake@CampManagerClass@@UAEHXZ ENDP			; CampManagerClass::Wake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetKias@CampManagerClass@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetKias@CampManagerClass@@UBEMXZ PROC			; CampManagerClass::GetKias, COMDAT
; _this$ = ecx

; 44   : 	virtual float GetKias() const { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKias@CampManagerClass@@UBEMXZ ENDP			; CampManagerClass::GetKias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\manager.h
;	COMDAT ?GetVt@CampManagerClass@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVt@CampManagerClass@@UBEMXZ PROC			; CampManagerClass::GetVt, COMDAT
; _this$ = ecx

; 43   : 	virtual float GetVt() const { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVt@CampManagerClass@@UBEMXZ ENDP			; CampManagerClass::GetVt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Broken@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Broken@UnitClass@@QBEHXZ PROC				; UnitClass::Broken, COMDAT
; _this$ = ecx

; 320  : 	int Broken () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Broken@UnitClass@@QBEHXZ ENDP				; UnitClass::Broken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Commando@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Commando@UnitClass@@QBEHXZ PROC			; UnitClass::Commando, COMDAT
; _this$ = ecx

; 315  : 	int Commando () const								{ return (int)unit_flags & U_COMMANDO; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 512				; 00000200H
	mov	esp, ebp
	pop	ebp
	ret	0
?Commando@UnitClass@@QBEHXZ ENDP			; UnitClass::Commando
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Scripted@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Scripted@UnitClass@@QBEHXZ PROC			; UnitClass::Scripted, COMDAT
; _this$ = ecx

; 314  : 	int Scripted ()	 const							{ return (int)unit_flags & U_SCRIPTED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 256				; 00000100H
	mov	esp, ebp
	pop	ebp
	ret	0
?Scripted@UnitClass@@QBEHXZ ENDP			; UnitClass::Scripted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Assigned@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Assigned@UnitClass@@QBEHXZ PROC			; UnitClass::Assigned, COMDAT
; _this$ = ecx

; 309  : 	int Assigned() const							{ return (int)unit_flags & U_ASSIGNED; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?Assigned@UnitClass@@QBEHXZ ENDP			; UnitClass::Assigned
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetGroundActionType@TeamClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroundActionType@TeamClass@@QAEEXZ PROC		; TeamClass::GetGroundActionType, COMDAT
; _this$ = ecx

; 335  : 	uchar GetGroundActionType (void)			{ return groundAction.actionType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+283]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroundActionType@TeamClass@@QAEEXZ ENDP		; TeamClass::GetGroundActionType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ PROC ; TeamClass::GetOffensiveAirAction, COMDAT
; _this$ = ecx

; 279  : 	TeamAirActionType *GetOffensiveAirAction (void) { return &offensiveAirAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 316				; 0000013cH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ENDP ; TeamClass::GetOffensiveAirAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetDefensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ PROC ; TeamClass::GetDefensiveAirAction, COMDAT
; _this$ = ecx

; 278  : 	TeamAirActionType *GetDefensiveAirAction (void) { return &defensiveAirAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ENDP ; TeamClass::GetDefensiveAirAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ PROC ; TeamClass::GetGroundAction, COMDAT
; _this$ = ecx

; 277  : 	TeamGndActionType *GetGroundAction (void) { return &groundAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 267				; 0000010bH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ENDP ; TeamClass::GetGroundAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveStatus@ObjectiveClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetObjectiveStatus, COMDAT
; _this$ = ecx

; 270  : 	uchar GetObjectiveStatus (void)							{	return obj_data.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+199]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectivePriority@ObjectiveClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectivePriority@ObjectiveClass@@QAEFXZ PROC	; ObjectiveClass::GetObjectivePriority, COMDAT
; _this$ = ecx

; 269  : 	short GetObjectivePriority (void)						{	return obj_data.priority; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ax, BYTE PTR [eax+200]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectivePriority@ObjectiveClass@@QAEFXZ ENDP	; ObjectiveClass::GetObjectivePriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ PROC	; ObjectiveClass::GetObjectiveParent, COMDAT
; _this$ = ecx

; 263  : 	Objective GetObjectiveParent(void)						{ 	return FindObjective(static_data.parent); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR [eax+216]
	push	edx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ENDP	; ObjectiveClass::GetObjectiveParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?NeedRepair@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NeedRepair@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::NeedRepair, COMDAT
; _this$ = ecx

; 226  : 	int NeedRepair (void)									{	return obj_data.obj_flags & O_NEED_REPAIR; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 131072				; 00020000H
	mov	esp, ebp
	pop	ebp
	ret	0
?NeedRepair@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::NeedRepair
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?Abandoned@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Abandoned@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::Abandoned, COMDAT
; _this$ = ecx

; 224  : 	int Abandoned (void)									{	return obj_data.obj_flags & O_ABANDONED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 1048576				; 00100000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Abandoned@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::Abandoned
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?RadarSite@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RadarSite@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::RadarSite, COMDAT
; _this$ = ecx

; 222  : 	int RadarSite (void)									{	return obj_data.obj_flags & O_RADAR_SITE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 65536				; 00010000H
	mov	esp, ebp
	pop	ebp
	ret	0
?RadarSite@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::RadarSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?CommandoSite@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CommandoSite@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::CommandoSite, COMDAT
; _this$ = ecx

; 218  : 	int CommandoSite (void)									{	return obj_data.obj_flags & O_COMMANDO_SITE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 16384				; 00004000H
	mov	esp, ebp
	pop	ebp
	ret	0
?CommandoSite@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::CommandoSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?ArtillerySite@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ArtillerySite@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::ArtillerySite, COMDAT
; _this$ = ecx

; 210  : 	int ArtillerySite (void)								{	return obj_data.obj_flags & O_ARTILLERY_SITE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 2048				; 00000800H
	mov	esp, ebp
	pop	ebp
	ret	0
?ArtillerySite@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::ArtillerySite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?SamSite@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SamSite@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::SamSite, COMDAT
; _this$ = ecx

; 208  : 	int SamSite (void)										{	return obj_data.obj_flags & O_SAM_SITE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 1024				; 00000400H
	mov	esp, ebp
	pop	ebp
	ret	0
?SamSite@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::SamSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsBeach@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBeach@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::IsBeach, COMDAT
; _this$ = ecx

; 190  : 	int IsBeach (void)										{ return (int)(O_BEACH & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 32					; 00000020H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBeach@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::IsBeach
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsNearfront@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNearfront@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsNearfront, COMDAT
; _this$ = ecx

; 189  : 	int IsNearfront (void)									{ return (int)((O_THIRDLINE | O_SECONDLINE | O_FRONTLINE) & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 7
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNearfront@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsNearfront
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsThirdline@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsThirdline@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsThirdline, COMDAT
; _this$ = ecx

; 188  : 	int IsThirdline (void)									{ return (int)(O_THIRDLINE & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?IsThirdline@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsThirdline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsSecondline@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSecondline@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsSecondline, COMDAT
; _this$ = ecx

; 187  : 	int IsSecondline (void)									{ return (int)(O_SECONDLINE & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSecondline@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsSecondline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsFrontline@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFrontline@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsFrontline, COMDAT
; _this$ = ecx

; 186  : 	int IsFrontline (void)									{ return (int)(O_FRONTLINE & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFrontline@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsFrontline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ PROC ; ListClass::GetFirstElement, COMDAT
; _this$ = ecx

; 82   : 		ListElementClass* GetFirstElement(void)		{ return front; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ENDP ; ListClass::GetFirstElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetNext@ListElementClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNext@ListElementClass@@QAEPAV1@XZ PROC		; ListElementClass::GetNext, COMDAT
; _this$ = ecx

; 45   : 		ListElementClass* GetNext(void)				{ return next; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@ListElementClass@@QAEPAV1@XZ ENDP		; ListElementClass::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetUserData@ListElementClass@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserData@ListElementClass@@QAEPAXXZ PROC		; ListElementClass::GetUserData, COMDAT
; _this$ = ecx

; 39   : 		void* GetUserData(void)						{ return user_data; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUserData@ListElementClass@@QAEPAXXZ ENDP		; ListElementClass::GetUserData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetIRFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIRFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetIRFactor, COMDAT
; _this$ = ecx

; 164  : 	virtual float GetIRFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRCSFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRCSFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetRCSFactor, COMDAT
; _this$ = ecx

; 163  : 	virtual float GetRCSFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::HasAreaJamming, COMDAT
; _this$ = ecx

; 162  : 	virtual int HasAreaJamming (void)			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::HasAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::HasSPJamming, COMDAT
; _this$ = ecx

; 161  : 	virtual int HasSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::HasSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsAreaJamming, COMDAT
; _this$ = ecx

; 160  : 	virtual int IsAreaJamming (void)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSPJamming, COMDAT
; _this$ = ecx

; 159  : 	virtual int IsSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ PROC	; FalconEntity::GetMovementType, COMDAT
; _this$ = ecx

; 149  : 	virtual MoveType GetMovementType (void)		{ return NoMove; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ENDP	; FalconEntity::GetMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEmitting@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEmitting, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsEmitting (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsExploding@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsExploding@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsExploding, COMDAT
; _this$ = ecx

; 143  : 	virtual int IsExploding (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMover@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMover, COMDAT
; _this$ = ecx

; 134  : 	virtual int IsMover (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z PROC	; FalconEntity::HasEntity, COMDAT
; _this$ = ecx

; 129  : 	virtual int HasEntity(VuEntity *e) const    { return this == e; } // sfr: added for new driver

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _e$[ebp]
	jne	SHORT $LN3@HasEntity
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HasEntity:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z ENDP	; FalconEntity::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?OnGround@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnGround@FalconEntity@@UAEHXZ PROC			; FalconEntity::OnGround, COMDAT
; _this$ = ecx

; 128  : 	virtual int OnGround (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@FalconEntity@@UAEHXZ ENDP			; FalconEntity::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsCampBase, COMDAT
; _this$ = ecx

; 99   : 	virtual bool IsCampBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSimBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsSimBase, COMDAT
; _this$ = ecx

; 98   : 	virtual bool IsSimBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC	; VuBin<VuEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP	; VuBin<VuEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
END
