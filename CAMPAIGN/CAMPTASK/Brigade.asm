; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPTASK\Brigade.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?ourObjDist@@3HA				; ourObjDist
PUBLIC	?ourObjOwner@@3HA				; ourObjOwner
PUBLIC	?ourFrontDist@@3HA				; ourFrontDist
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
_BSS	SEGMENT
?ourObjDist@@3HA DD 01H DUP (?)				; ourObjDist
?ourObjOwner@@3HA DD 01H DUP (?)			; ourObjOwner
?ourFrontDist@@3HA DD 01H DUP (?)			; ourFrontDist
_BSS	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	?IsSimBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsSimBase
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsMover@FalconEntity@@UAEHXZ			; FalconEntity::IsMover
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsExploding@FalconEntity@@UAEHXZ		; FalconEntity::IsExploding
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?IsSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsSPJamming
PUBLIC	?IsAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsAreaJamming
PUBLIC	?HasSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasSPJamming
PUBLIC	?HasAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasAreaJamming
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetCampID@CampBaseClass@@UAEFXZ		; CampBaseClass::GetCampID
PUBLIC	?GetTeam@CampBaseClass@@UAEEXZ			; CampBaseClass::GetTeam
PUBLIC	?GetCountry@CampBaseClass@@UAEEXZ		; CampBaseClass::GetCountry
PUBLIC	?StepRadar@CampBaseClass@@UAEHHHM@Z		; CampBaseClass::StepRadar
PUBLIC	?GetMissilesFlying@CampBaseClass@@UAEHXZ	; CampBaseClass::GetMissilesFlying
PUBLIC	?IsCampBase@CampBaseClass@@UAE_NXZ		; CampBaseClass::IsCampBase
PUBLIC	?IsEmitting@CampBaseClass@@UAEHXZ		; CampBaseClass::IsEmitting
PUBLIC	?IsAwake@CampBaseClass@@QAEHXZ			; CampBaseClass::IsAwake
PUBLIC	?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z	; CampBaseClass::HasEntity
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?IsNearfront@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsNearfront
PUBLIC	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ	; ObjectiveClass::GetObjectiveParent
PUBLIC	?CanShootWeapon@UnitClass@@UAEHH@Z		; UnitClass::CanShootWeapon
PUBLIC	?GetDeaggregationPoint@UnitClass@@UAEHHPAPAVCampBaseClass@@@Z ; UnitClass::GetDeaggregationPoint
PUBLIC	?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ ; UnitClass::GetUnitDeaggregationData
PUBLIC	?ShouldDeaggregate@UnitClass@@UAEHXZ		; UnitClass::ShouldDeaggregate
PUBLIC	?ClearDeaggregationData@UnitClass@@UAEXXZ	; UnitClass::ClearDeaggregationData
PUBLIC	?DoCombat@UnitClass@@UAEHXZ			; UnitClass::DoCombat
PUBLIC	?AdjustForSupply@UnitClass@@UAEMXZ		; UnitClass::AdjustForSupply
PUBLIC	?CombatTime@UnitClass@@UAEKXZ			; UnitClass::CombatTime
PUBLIC	?GetVehicleDeagData@UnitClass@@UAEHPAVSimInitDataClass@@H@Z ; UnitClass::GetVehicleDeagData
PUBLIC	?IsUnit@UnitClass@@UAEHXZ			; UnitClass::IsUnit
PUBLIC	?IsDead@UnitClass@@UBEHXZ			; UnitClass::IsDead
PUBLIC	?Assigned@UnitClass@@QBEHXZ			; UnitClass::Assigned
PUBLIC	?Ordered@UnitClass@@QBEHXZ			; UnitClass::Ordered
PUBLIC	?Engaged@UnitClass@@QBEHXZ			; UnitClass::Engaged
PUBLIC	?Moving@UnitClass@@QBEHXZ			; UnitClass::Moving
PUBLIC	?Combat@UnitClass@@QBEHXZ			; UnitClass::Combat
PUBLIC	?Broken@UnitClass@@QBEHXZ			; UnitClass::Broken
PUBLIC	?Losses@UnitClass@@QBEHXZ			; UnitClass::Losses
PUBLIC	?Retreating@UnitClass@@QBEHXZ			; UnitClass::Retreating
PUBLIC	?SimSetLocation@UnitClass@@UAEXMMM@Z		; UnitClass::SimSetLocation
PUBLIC	?SimSetOrientation@UnitClass@@UAEXMMM@Z		; UnitClass::SimSetOrientation
PUBLIC	?GetRealPosition@UnitClass@@UAEXPAM00@Z		; UnitClass::GetRealPosition
PUBLIC	?SetUnitDestination@UnitClass@@QAEXFF@Z		; UnitClass::SetUnitDestination
PUBLIC	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z	; UnitClass::SetTarget
PUBLIC	?SetUnitTactic@UnitClass@@QAEXE@Z		; UnitClass::SetUnitTactic
PUBLIC	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ	; UnitClass::GetTarget
PUBLIC	?GetUnitTactic@UnitClass@@QBEHXZ		; UnitClass::GetUnitTactic
PUBLIC	?SetUnitLastMove@UnitClass@@UAEXK@Z		; UnitClass::SetUnitLastMove
PUBLIC	?SetCombatTime@UnitClass@@UAEXK@Z		; UnitClass::SetCombatTime
PUBLIC	?SetBurntFuel@UnitClass@@UAEXJ@Z		; UnitClass::SetBurntFuel
PUBLIC	?SetUnitMission@UnitClass@@UAEXE@Z		; UnitClass::SetUnitMission
PUBLIC	?SetUnitRole@UnitClass@@UAEXE@Z			; UnitClass::SetUnitRole
PUBLIC	?SetUnitPriority@UnitClass@@UAEXH@Z		; UnitClass::SetUnitPriority
PUBLIC	?SetUnitMissionID@UnitClass@@UAEXH@Z		; UnitClass::SetUnitMissionID
PUBLIC	?SetUnitMissionTarget@UnitClass@@UAEXH@Z	; UnitClass::SetUnitMissionTarget
PUBLIC	?SetUnitTOT@UnitClass@@UAEXK@Z			; UnitClass::SetUnitTOT
PUBLIC	?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitSquadron
PUBLIC	?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitAirbase
PUBLIC	?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z ; UnitClass::SetLoadout
PUBLIC	?GetNumberOfLoadouts@UnitClass@@UAEHXZ		; UnitClass::GetNumberOfLoadouts
PUBLIC	?GetMoveTime@UnitClass@@UAEKXZ			; UnitClass::GetMoveTime
PUBLIC	?GetCombatTime@UnitClass@@UAEKXZ		; UnitClass::GetCombatTime
PUBLIC	?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetAirTargetID
PUBLIC	?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ	; UnitClass::GetAirTarget
PUBLIC	?GetBurntFuel@UnitClass@@UAEHXZ			; UnitClass::GetBurntFuel
PUBLIC	?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ ; UnitClass::GetUnitMission
PUBLIC	?GetUnitPriority@UnitClass@@UAEHXZ		; UnitClass::GetUnitPriority
PUBLIC	?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ ; UnitClass::GetUnitMissionTarget
PUBLIC	?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ ; UnitClass::GetUnitMissionTargetID
PUBLIC	?GetUnitMissionID@UnitClass@@UAEHXZ		; UnitClass::GetUnitMissionID
PUBLIC	?GetUnitTOT@UnitClass@@UAEKXZ			; UnitClass::GetUnitTOT
PUBLIC	?GetUnitSquadron@UnitClass@@UAEPAV1@XZ		; UnitClass::GetUnitSquadron
PUBLIC	?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitSquadronID
PUBLIC	?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ ; UnitClass::GetUnitAirbase
PUBLIC	?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitAirbaseID
PUBLIC	?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z ; UnitClass::LoadWeapons
PUBLIC	?DumpWeapons@UnitClass@@UAEHXZ			; UnitClass::DumpWeapons
PUBLIC	?ETA@UnitClass@@UAEKXZ				; UnitClass::ETA
PUBLIC	?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ ; UnitClass::GetKnownEmitters
PUBLIC	?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z ; UnitClass::BuildMission
PUBLIC	?IncrementTime@UnitClass@@UAEXK@Z		; UnitClass::IncrementTime
PUBLIC	?UseFuel@UnitClass@@UAEXJ@Z			; UnitClass::UseFuel
PUBLIC	?SetUnitSpecialty@UnitClass@@UAEXH@Z		; UnitClass::SetUnitSpecialty
PUBLIC	?SetUnitSupply@UnitClass@@UAEXH@Z		; UnitClass::SetUnitSupply
PUBLIC	?SetUnitMorale@UnitClass@@UAEXH@Z		; UnitClass::SetUnitMorale
PUBLIC	?SetSquadronFuel@UnitClass@@UAEXJ@Z		; UnitClass::SetSquadronFuel
PUBLIC	?SetUnitStores@UnitClass@@UAEXHE@Z		; UnitClass::SetUnitStores
PUBLIC	?SetLastResupply@UnitClass@@UAEXH@Z		; UnitClass::SetLastResupply
PUBLIC	?SetLastResupplyTime@UnitClass@@UAEXK@Z		; UnitClass::SetLastResupplyTime
PUBLIC	?GetUnitSpecialty@UnitClass@@UAEHXZ		; UnitClass::GetUnitSpecialty
PUBLIC	?GetSquadronFuel@UnitClass@@UAEJXZ		; UnitClass::GetSquadronFuel
PUBLIC	?GetUnitStores@UnitClass@@UAEEH@Z		; UnitClass::GetUnitStores
PUBLIC	?GetLastResupplyTime@UnitClass@@UAEKXZ		; UnitClass::GetLastResupplyTime
PUBLIC	?GetLastResupply@UnitClass@@UAEHXZ		; UnitClass::GetLastResupply
PUBLIC	?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z ; UnitClass::BuildPackage
PUBLIC	?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z ; UnitClass::HandleRequestReceipt
PUBLIC	?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z	; UnitClass::SetUnitAssemblyPoint
PUBLIC	?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z	; UnitClass::GetUnitAssemblyPoint
PUBLIC	?SetUnitOrders@UnitClass@@UAEXH@Z		; UnitClass::SetUnitOrders
PUBLIC	?SetUnitFatigue@UnitClass@@UAEXH@Z		; UnitClass::SetUnitFatigue
PUBLIC	?SetUnitMode@UnitClass@@UAEXH@Z			; UnitClass::SetUnitMode
PUBLIC	?SetUnitPosition@UnitClass@@UAEXH@Z		; UnitClass::SetUnitPosition
PUBLIC	?SetUnitHeading@UnitClass@@UAEXH@Z		; UnitClass::SetUnitHeading
PUBLIC	?GetUnitFatigue@UnitClass@@UAEHXZ		; UnitClass::GetUnitFatigue
PUBLIC	?GetUnitElement@UnitClass@@UAEHXZ		; UnitClass::GetUnitElement
PUBLIC	?GetUnitMode@UnitClass@@UAEHXZ			; UnitClass::GetUnitMode
PUBLIC	?GetUnitPosition@UnitClass@@UAEHXZ		; UnitClass::GetUnitPosition
PUBLIC	?GetUnitHeading@UnitClass@@UAEHXZ		; UnitClass::GetUnitHeading
PUBLIC	?SetUnitNextMove@UnitClass@@UAEXXZ		; UnitClass::SetUnitNextMove
PUBLIC	?ClearUnitPath@UnitClass@@UAEXXZ		; UnitClass::ClearUnitPath
PUBLIC	?GetNextMoveDirection@UnitClass@@UAEHXZ		; UnitClass::GetNextMoveDirection
PUBLIC	?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z	; UnitClass::SetUnitCurrentDestination
PUBLIC	?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z ; UnitClass::GetUnitCurrentDestination
PUBLIC	?GetUnitParent@UnitClass@@UBEPAV1@XZ		; UnitClass::GetUnitParent
PUBLIC	?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitParentID
PUBLIC	?SetUnitParent@UnitClass@@UAEXPAV1@@Z		; UnitClass::SetUnitParent
PUBLIC	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
PUBLIC	?MaxUpdateTime@GroundUnitClass@@UBEKXZ		; GroundUnitClass::MaxUpdateTime
PUBLIC	?OnGround@GroundUnitClass@@UAEHXZ		; GroundUnitClass::OnGround
PUBLIC	?GetVt@GroundUnitClass@@UBEMXZ			; GroundUnitClass::GetVt
PUBLIC	?GetKias@GroundUnitClass@@UBEMXZ		; GroundUnitClass::GetKias
PUBLIC	?GetOrders@GroundUnitClass@@QAEEXZ		; GroundUnitClass::GetOrders
PUBLIC	?SetUnitOrders@GroundUnitClass@@UAEXE@Z		; GroundUnitClass::SetUnitOrders
PUBLIC	?SetUnitDivision@GroundUnitClass@@UAEXF@Z	; GroundUnitClass::SetUnitDivision
PUBLIC	?SetUnitPrimaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z ; GroundUnitClass::SetUnitPrimaryObj
PUBLIC	?SetUnitSecondaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z ; GroundUnitClass::SetUnitSecondaryObj
PUBLIC	?SetUnitObjective@GroundUnitClass@@UAEXVVU_ID@@@Z ; GroundUnitClass::SetUnitObjective
PUBLIC	?GetUnitOrders@GroundUnitClass@@UAEHXZ		; GroundUnitClass::GetUnitOrders
PUBLIC	?GetUnitDivision@GroundUnitClass@@UAEHXZ	; GroundUnitClass::GetUnitDivision
PUBLIC	?GetUnitPrimaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ ; GroundUnitClass::GetUnitPrimaryObj
PUBLIC	?GetUnitSecondaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ ; GroundUnitClass::GetUnitSecondaryObj
PUBLIC	?GetUnitObjective@GroundUnitClass@@UAEPAVObjectiveClass@@XZ ; GroundUnitClass::GetUnitObjective
PUBLIC	?GetUnitPrimaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ ; GroundUnitClass::GetUnitPrimaryObjID
PUBLIC	?GetUnitSecondaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ ; GroundUnitClass::GetUnitSecondaryObjID
PUBLIC	?GetUnitObjectiveID@GroundUnitClass@@UAE?AVVU_ID@@XZ ; GroundUnitClass::GetUnitObjectiveID
PUBLIC	??0BrigadeClass@@QAE@G@Z			; BrigadeClass::BrigadeClass
PUBLIC	??0BrigadeClass@@QAE@PAPAEPAJ@Z			; BrigadeClass::BrigadeClass
PUBLIC	??1BrigadeClass@@UAE@XZ				; BrigadeClass::~BrigadeClass
PUBLIC	?SaveSize@BrigadeClass@@UAEHXZ			; BrigadeClass::SaveSize
PUBLIC	?Save@BrigadeClass@@UAEHPAPAE@Z			; BrigadeClass::Save
PUBLIC	?Handle@BrigadeClass@@UAEHPAVVuFullUpdateEvent@@@Z ; BrigadeClass::Handle
PUBLIC	?IsBrigade@BrigadeClass@@UAEHXZ			; BrigadeClass::IsBrigade
PUBLIC	?SetFullStrength@BrigadeClass@@QAEXF@Z		; BrigadeClass::SetFullStrength
PUBLIC	?MoveUnit@BrigadeClass@@UAEHK@Z			; BrigadeClass::MoveUnit
PUBLIC	?Reaction@BrigadeClass@@UAEHPAVCampBaseClass@@HM@Z ; BrigadeClass::Reaction
PUBLIC	?ChooseTactic@BrigadeClass@@UAEHXZ		; BrigadeClass::ChooseTactic
PUBLIC	?CheckTactic@BrigadeClass@@UAEHH@Z		; BrigadeClass::CheckTactic
PUBLIC	?Father@BrigadeClass@@UBEHXZ			; BrigadeClass::Father
PUBLIC	?Real@BrigadeClass@@UAEHXZ			; BrigadeClass::Real
PUBLIC	?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z	; BrigadeClass::SetUnitOrders
PUBLIC	?GetUnitSpeed@BrigadeClass@@UBEHXZ		; BrigadeClass::GetUnitSpeed
PUBLIC	?GetUnitSupply@BrigadeClass@@UAEHXZ		; BrigadeClass::GetUnitSupply
PUBLIC	?GetUnitMorale@BrigadeClass@@UAEHXZ		; BrigadeClass::GetUnitMorale
PUBLIC	?GetUnitSupplyNeed@BrigadeClass@@UAEHH@Z	; BrigadeClass::GetUnitSupplyNeed
PUBLIC	?GetUnitFuelNeed@BrigadeClass@@UAEHH@Z		; BrigadeClass::GetUnitFuelNeed
PUBLIC	?SupplyUnit@BrigadeClass@@UAEXHH@Z		; BrigadeClass::SupplyUnit
PUBLIC	?SetUnitDivision@BrigadeClass@@UAEXH@Z		; BrigadeClass::SetUnitDivision
PUBLIC	?OrderElement@BrigadeClass@@UAEHPAVUnitClass@@PAVFalconPrivateList@@@Z ; BrigadeClass::OrderElement
PUBLIC	?GetFirstUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ ; BrigadeClass::GetFirstUnitElement
PUBLIC	?GetNextUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ ; BrigadeClass::GetNextUnitElement
PUBLIC	?GetUnitElement@BrigadeClass@@UAEPAVUnitClass@@H@Z ; BrigadeClass::GetUnitElement
PUBLIC	?GetUnitElementByID@BrigadeClass@@UAEPAVUnitClass@@H@Z ; BrigadeClass::GetUnitElementByID
PUBLIC	?GetPrevUnitElement@BrigadeClass@@UAEPAVUnitClass@@PAV2@@Z ; BrigadeClass::GetPrevUnitElement
PUBLIC	?AddUnitChild@BrigadeClass@@UAEXPAVUnitClass@@@Z ; BrigadeClass::AddUnitChild
PUBLIC	?DisposeChildren@BrigadeClass@@UAEXXZ		; BrigadeClass::DisposeChildren
PUBLIC	?RemoveChild@BrigadeClass@@UAEXVVU_ID@@@Z	; BrigadeClass::RemoveChild
PUBLIC	?ReorganizeUnit@BrigadeClass@@UAEXXZ		; BrigadeClass::ReorganizeUnit
PUBLIC	?UpdateParentStatistics@BrigadeClass@@UAEHXZ	; BrigadeClass::UpdateParentStatistics
PUBLIC	?RallyUnit@BrigadeClass@@UAEHH@Z		; BrigadeClass::RallyUnit
PUBLIC	??_GBrigadeClass@@UAEPAXI@Z			; BrigadeClass::`scalar deleting destructor'
PUBLIC	?NewBrigade@@YAPAVBrigadeClass@@H@Z		; NewBrigade
PUBLIC	?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z ; OnValidObjective
PUBLIC	?GetNewRole@@YAHPAVUnitClass@@0@Z		; GetNewRole
PUBLIC	?GetPriority@@YAHPAVUnitClass@@@Z		; GetPriority
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7BrigadeClass@@6B@				; BrigadeClass::`vftable'
PUBLIC	??_C@_0BD@LALKOCKO@?$CF08x?5BrigadeClass?5?$AA@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BrigadeClass@@6B@				; BrigadeClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBrigadeClass@@@8			; BrigadeClass `RTTI Type Descriptor'
PUBLIC	??_R3BrigadeClass@@8				; BrigadeClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BrigadeClass@@8				; BrigadeClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BrigadeClass@@8			; BrigadeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@GroundUnitClass@@8		; GroundUnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGroundUnitClass@@@8			; GroundUnitClass `RTTI Type Descriptor'
PUBLIC	??_R3GroundUnitClass@@8				; GroundUnitClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GroundUnitClass@@8				; GroundUnitClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UnitClass@@8			; UnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVUnitClass@@@8				; UnitClass `RTTI Type Descriptor'
PUBLIC	??_R3UnitClass@@8				; UnitClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UnitClass@@8				; UnitClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CampBaseClass@@8			; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCampBaseClass@@@8			; CampBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3CampBaseClass@@8				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CampBaseClass@@8				; CampBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f800000
PUBLIC	__real@42200000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_fflush:PROC
EXTRN	_fprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?InsertionCallback@VuEntity@@MAEHXZ:PROC	; VuEntity::InsertionCallback
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Unregister@VuCollection@@QAEXXZ:PROC		; VuCollection::Unregister
EXTRN	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z:PROC	; VuCollection::Find
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?Save@FalconEntity@@UAEHPAU_iobuf@@@Z:PROC	; FalconEntity::Save
EXTRN	?CleanupData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::CleanupData
EXTRN	?RemovalCallback@FalconEntity@@UAEHXZ:PROC	; FalconEntity::RemovalCallback
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?Camp_GetCurrentTime@@YAKXZ:PROC		; Camp_GetCurrentTime
EXTRN	??0MissionRequestClass@@QAE@XZ:PROC		; MissionRequestClass::MissionRequestClass
EXTRN	??1MissionRequestClass@@QAE@XZ:PROC		; MissionRequestClass::~MissionRequestClass
EXTRN	?RequestEnemyMission@MissionRequestClass@@QAEHXZ:PROC ; MissionRequestClass::RequestEnemyMission
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z:PROC	; GetIdFromNamespace
EXTRN	?GetTeam@@YAEE@Z:PROC				; GetTeam
EXTRN	?SetOwner@CampBaseClass@@UAEXE@Z:PROC		; CampBaseClass::SetOwner
EXTRN	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z:PROC ; CampBaseClass::MakeCampBaseDirty
EXTRN	?InitData@CampBaseClass@@UAEXXZ:PROC		; CampBaseClass::InitData
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z:PROC	; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?SetLocation@CampBaseClass@@QAEXFF@Z:PROC	; CampBaseClass::SetLocation
EXTRN	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z:PROC ; FindObjective
EXTRN	?IsPrimary@ObjectiveClass@@QAEHXZ:PROC		; ObjectiveClass::IsPrimary
EXTRN	?IsSecondary@ObjectiveClass@@QAEHXZ:PROC	; ObjectiveClass::IsSecondary
EXTRN	?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z:PROC ; GetChildObjectives
EXTRN	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetFirstObjective
EXTRN	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetNextObjective
EXTRN	?CheckTeam@@YAHHH@Z:PROC			; CheckTeam
EXTRN	?CheckUnitType@@YAHHHH@Z:PROC			; CheckUnitType
EXTRN	?CheckRange@@YAHHH@Z:PROC			; CheckRange
EXTRN	?CheckAction@@YAHHH@Z:PROC			; CheckAction
EXTRN	?CheckStatus@@YAHHH@Z:PROC			; CheckStatus
EXTRN	?CheckLosses@@YAHHH@Z:PROC			; CheckLosses
EXTRN	?CheckEngaged@@YAHHH@Z:PROC			; CheckEngaged
EXTRN	?CheckCombat@@YAHHH@Z:PROC			; CheckCombat
EXTRN	?CheckRetreating@@YAHHH@Z:PROC			; CheckRetreating
EXTRN	?CheckOwned@@YAHHH@Z:PROC			; CheckOwned
EXTRN	?CheckRole@@YAHHH@Z:PROC			; CheckRole
EXTRN	?GetTacticPriority@@YAHH@Z:PROC			; GetTacticPriority
EXTRN	?SendDeaggregateData@UnitClass@@UAEXPAVVuTargetEntity@@@Z:PROC ; UnitClass::SendDeaggregateData
EXTRN	?RecordCurrentState@UnitClass@@UAEHPAVFalconSessionEntity@@H@Z:PROC ; UnitClass::RecordCurrentState
EXTRN	?Deaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::Deaggregate
EXTRN	?Reaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::Reaggregate
EXTRN	?TransferOwnership@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::TransferOwnership
EXTRN	?Wake@UnitClass@@UAEHXZ:PROC			; UnitClass::Wake
EXTRN	?Sleep@UnitClass@@UAEHXZ:PROC			; UnitClass::Sleep
EXTRN	?InsertInSimLists@UnitClass@@UAEXMM@Z:PROC	; UnitClass::InsertInSimLists
EXTRN	?RemoveFromSimLists@UnitClass@@UAEXXZ:PROC	; UnitClass::RemoveFromSimLists
EXTRN	?DeaggregateFromData@UnitClass@@UAEXPAEJ@Z:PROC	; UnitClass::DeaggregateFromData
EXTRN	?ReaggregateFromData@UnitClass@@UAEXPAEJ@Z:PROC	; UnitClass::ReaggregateFromData
EXTRN	?TransferOwnershipFromData@UnitClass@@UAEXPAEJ@Z:PROC ; UnitClass::TransferOwnershipFromData
EXTRN	?ResetPlayerStatus@UnitClass@@UAEHXZ:PROC	; UnitClass::ResetPlayerStatus
EXTRN	?ApplyDamage@UnitClass@@UAEHPAVFalconCampWeaponsFire@@E@Z:PROC ; UnitClass::ApplyDamage
EXTRN	?ApplyDamage@UnitClass@@UAEHW4DamageDataType@@PAHHF@Z:PROC ; UnitClass::ApplyDamage
EXTRN	?DecodeDamageData@UnitClass@@UAEHPAEPAV1@PAVFalconDeathMessage@@@Z:PROC ; UnitClass::DecodeDamageData
EXTRN	?CollectWeapons@UnitClass@@UAEHPAEW4MoveType@@QAFQAEH@Z:PROC ; UnitClass::CollectWeapons
EXTRN	?GetDamageModifiers@UnitClass@@UAEPAEXZ:PROC	; UnitClass::GetDamageModifiers
EXTRN	?GetName@UnitClass@@UAEPADPADHH@Z:PROC		; UnitClass::GetName
EXTRN	?GetFullName@UnitClass@@UAEPADPADHH@Z:PROC	; UnitClass::GetFullName
EXTRN	?GetDivisionName@UnitClass@@UAEPADPADHH@Z:PROC	; UnitClass::GetDivisionName
EXTRN	?GetHitChance@UnitClass@@UAEHHH@Z:PROC		; UnitClass::GetHitChance
EXTRN	?GetAproxHitChance@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetAproxHitChance
EXTRN	?GetCombatStrength@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetCombatStrength
EXTRN	?GetAproxCombatStrength@UnitClass@@UAEHHH@Z:PROC ; UnitClass::GetAproxCombatStrength
EXTRN	?GetWeaponRange@UnitClass@@UAEHHPAVFalconEntity@@@Z:PROC ; UnitClass::GetWeaponRange
EXTRN	?GetAproxWeaponRange@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetAproxWeaponRange
EXTRN	?GetDetectionRange@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetDetectionRange
EXTRN	?GetElectronicDetectionRange@UnitClass@@UAEHH@Z:PROC ; UnitClass::GetElectronicDetectionRange
EXTRN	?CanDetect@UnitClass@@UAEHPAVFalconEntity@@@Z:PROC ; UnitClass::CanDetect
EXTRN	?GetComponentLocation@UnitClass@@UAEXPAF0H@Z:PROC ; UnitClass::GetComponentLocation
EXTRN	?GetComponentAltitude@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetComponentAltitude
EXTRN	?GetRCSFactor@UnitClass@@UAEMXZ:PROC		; UnitClass::GetRCSFactor
EXTRN	?GetIRFactor@UnitClass@@UAEMXZ:PROC		; UnitClass::GetIRFactor
EXTRN	?GetNumberOfArcs@UnitClass@@UAEHXZ:PROC		; UnitClass::GetNumberOfArcs
EXTRN	?GetArcRatio@UnitClass@@UAEMH@Z:PROC		; UnitClass::GetArcRatio
EXTRN	?GetArcRange@UnitClass@@UAEMH@Z:PROC		; UnitClass::GetArcRange
EXTRN	?GetArcAngle@UnitClass@@UAEXHPAM0@Z:PROC	; UnitClass::GetArcAngle
EXTRN	?GetRadarType@UnitClass@@UAEHXZ:PROC		; UnitClass::GetRadarType
EXTRN	?SetAssigned@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetAssigned
EXTRN	?SetOrdered@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetOrdered
EXTRN	?SetParent@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetParent
EXTRN	?SetEngaged@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetEngaged
EXTRN	?SetMoving@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetMoving
EXTRN	?SetCombat@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetCombat
EXTRN	?SetBroken@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetBroken
EXTRN	?SetLosses@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetLosses
EXTRN	?SetTempDest@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetTempDest
EXTRN	?GetBestVehicleWeapon@UnitClass@@UAEHHPAEW4MoveType@@HPAH@Z:PROC ; UnitClass::GetBestVehicleWeapon
EXTRN	?GetVehicleHitChance@UnitClass@@UAEHHW4MoveType@@HH@Z:PROC ; UnitClass::GetVehicleHitChance
EXTRN	?GetVehicleCombatStrength@UnitClass@@UAEHHW4MoveType@@H@Z:PROC ; UnitClass::GetVehicleCombatStrength
EXTRN	?GetVehicleRange@UnitClass@@UAEHHHPAVFalconEntity@@@Z:PROC ; UnitClass::GetVehicleRange
EXTRN	?GetUnitWeaponId@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetUnitWeaponId
EXTRN	?GetUnitWeaponCount@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetUnitWeaponCount
EXTRN	?GetUnitDestination@UnitClass@@QAEXPAF0@Z:PROC	; UnitClass::GetUnitDestination
EXTRN	?SetUnitSType@UnitClass@@QAEHD@Z:PROC		; UnitClass::SetUnitSType
EXTRN	?GetCruiseSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetCruiseSpeed
EXTRN	?KillUnit@UnitClass@@QAEXXZ:PROC		; UnitClass::KillUnit
EXTRN	?DisposeWayPoints@UnitClass@@QAEXXZ:PROC	; UnitClass::DisposeWayPoints
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z:PROC	; FindUnit
EXTRN	??0GroundUnitClass@@QAE@GK@Z:PROC		; GroundUnitClass::GroundUnitClass
EXTRN	??0GroundUnitClass@@QAE@PAPAEPAJ@Z:PROC		; GroundUnitClass::GroundUnitClass
EXTRN	??1GroundUnitClass@@UAE@XZ:PROC			; GroundUnitClass::~GroundUnitClass
EXTRN	?SaveSize@GroundUnitClass@@UAEHXZ:PROC		; GroundUnitClass::SaveSize
EXTRN	?Save@GroundUnitClass@@UAEHPAPAE@Z:PROC		; GroundUnitClass::Save
EXTRN	?Handle@GroundUnitClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; GroundUnitClass::Handle
EXTRN	?GetMovementType@GroundUnitClass@@UAE?AW4MoveType@@XZ:PROC ; GroundUnitClass::GetMovementType
EXTRN	?GetObjMovementType@GroundUnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z:PROC ; GroundUnitClass::GetObjMovementType
EXTRN	?DetectOnMove@GroundUnitClass@@UAEHXZ:PROC	; GroundUnitClass::DetectOnMove
EXTRN	?ChooseTarget@GroundUnitClass@@UAEHXZ:PROC	; GroundUnitClass::ChooseTarget
EXTRN	?SetOrders@GroundUnitClass@@QAEXE@Z:PROC	; GroundUnitClass::SetOrders
EXTRN	?SetDivision@GroundUnitClass@@QAEXF@Z:PROC	; GroundUnitClass::SetDivision
EXTRN	?CheckForSurrender@GroundUnitClass@@UAEHXZ:PROC	; GroundUnitClass::CheckForSurrender
EXTRN	?GetUnitNormalRole@GroundUnitClass@@UAEHXZ:PROC	; GroundUnitClass::GetUnitNormalRole
EXTRN	?GetUnitCurrentRole@GroundUnitClass@@UBEHXZ:PROC ; GroundUnitClass::GetUnitCurrentRole
EXTRN	?BuildMission@GroundUnitClass@@UAEHXZ:PROC	; GroundUnitClass::BuildMission
EXTRN	??_EBrigadeClass@@UAEPAXI@Z:PROC		; BrigadeClass::`vector deleting destructor'
EXTRN	?FindRetreatPath@@YAPAVObjectiveClass@@PAVUnitClass@@HH@Z:PROC ; FindRetreatPath
EXTRN	?GetGroundOrders@@YAHH@Z:PROC			; GetGroundOrders
EXTRN	?IsValidObjective@GroundTaskingManagerClass@@QAEHHPAVObjectiveClass@@@Z:PROC ; GroundTaskingManagerClass::IsValidObjective
EXTRN	?ScorePosition@@YAHPAVUnitClass@@HHPAVObjectiveClass@@FFH@Z:PROC ; ScorePosition
EXTRN	?FindBestPosition@@YAPAVObjectiveClass@@PAVUnitClass@@PAVBrigadeClass@@HPAVFalconPrivateList@@@Z:PROC ; FindBestPosition
EXTRN	?FindUnitSupportRole@@YAHPAVUnitClass@@@Z:PROC	; FindUnitSupportRole
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?DDP@@3PAUDirtyDataClassType@@A:DWORD		; DDP
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?NonVolatileNS@@3VIdNamespace@@A:BYTE		; NonVolatileNS
EXTRN	?GroundTactics@@3FA:WORD			; GroundTactics
EXTRN	?FirstGroundTactic@@3FA:WORD			; FirstGroundTactic
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?MAXLINKS_FROM_SO_OFFENSIVE@@3FA:WORD		; MAXLINKS_FROM_SO_OFFENSIVE
EXTRN	?MAXLINKS_FROM_SO_DEFENSIVE@@3FA:WORD		; MAXLINKS_FROM_SO_DEFENSIVE
EXTRN	?MIN_TASK_GROUND@@3FA:WORD			; MIN_TASK_GROUND
EXTRN	?GROUND_UPDATE_CHECK_INTERVAL@@3FA:WORD		; GROUND_UPDATE_CHECK_INTERVAL
EXTRN	?OrderPriority@@3PAHA:BYTE			; OrderPriority
EXTRN	?save_log@@3PAU_iobuf@@A:DWORD			; save_log
EXTRN	?load_log@@3PAU_iobuf@@A:DWORD			; load_log
EXTRN	?start_save_stream@@3HA:DWORD			; start_save_stream
EXTRN	?start_load_stream@@3HA:DWORD			; start_load_stream
EXTRN	?haveWeaps@@3HA:DWORD				; haveWeaps
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CampBaseClass@@8
rdata$r	SEGMENT
??_R2CampBaseClass@@8 DD FLAT:??_R1A@?0A@EA@CampBaseClass@@8 ; CampBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CampBaseClass@@8
rdata$r	SEGMENT
??_R3CampBaseClass@@8 DD 00H				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCampBaseClass@@@8
_DATA	SEGMENT
??_R0?AVCampBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; CampBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCampBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CampBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CampBaseClass@@8 DD FLAT:??_R0?AVCampBaseClass@@@8 ; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2UnitClass@@8
rdata$r	SEGMENT
??_R2UnitClass@@8 DD FLAT:??_R1A@?0A@EA@UnitClass@@8	; UnitClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3UnitClass@@8
rdata$r	SEGMENT
??_R3UnitClass@@8 DD 00H				; UnitClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2UnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUnitClass@@@8
_DATA	SEGMENT
??_R0?AVUnitClass@@@8 DD FLAT:??_7type_info@@6B@	; UnitClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUnitClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@UnitClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UnitClass@@8 DD FLAT:??_R0?AVUnitClass@@@8 ; UnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R2GroundUnitClass@@8
rdata$r	SEGMENT
??_R2GroundUnitClass@@8 DD FLAT:??_R1A@?0A@EA@GroundUnitClass@@8 ; GroundUnitClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UnitClass@@8
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3GroundUnitClass@@8
rdata$r	SEGMENT
??_R3GroundUnitClass@@8 DD 00H				; GroundUnitClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2GroundUnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGroundUnitClass@@@8
_DATA	SEGMENT
??_R0?AVGroundUnitClass@@@8 DD FLAT:??_7type_info@@6B@	; GroundUnitClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGroundUnitClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@GroundUnitClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GroundUnitClass@@8 DD FLAT:??_R0?AVGroundUnitClass@@@8 ; GroundUnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GroundUnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BrigadeClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BrigadeClass@@8 DD FLAT:??_R0?AVBrigadeClass@@@8 ; BrigadeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BrigadeClass@@8
rdata$r	ENDS
;	COMDAT ??_R2BrigadeClass@@8
rdata$r	SEGMENT
??_R2BrigadeClass@@8 DD FLAT:??_R1A@?0A@EA@BrigadeClass@@8 ; BrigadeClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GroundUnitClass@@8
	DD	FLAT:??_R1A@?0A@EA@UnitClass@@8
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3BrigadeClass@@8
rdata$r	SEGMENT
??_R3BrigadeClass@@8 DD 00H				; BrigadeClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2BrigadeClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBrigadeClass@@@8
_DATA	SEGMENT
??_R0?AVBrigadeClass@@@8 DD FLAT:??_7type_info@@6B@	; BrigadeClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBrigadeClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BrigadeClass@@6B@
rdata$r	SEGMENT
??_R4BrigadeClass@@6B@ DD 00H				; BrigadeClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBrigadeClass@@@8
	DD	FLAT:??_R3BrigadeClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LALKOCKO@?$CF08x?5BrigadeClass?5?$AA@
CONST	SEGMENT
??_C@_0BD@LALKOCKO@?$CF08x?5BrigadeClass?5?$AA@ DB '%08x BrigadeClass ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7BrigadeClass@@6B@
CONST	SEGMENT
??_7BrigadeClass@@6B@ DD FLAT:??_R4BrigadeClass@@6B@	; BrigadeClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@BrigadeClass@@UAEHXZ
	DD	FLAT:?Save@FalconEntity@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@BrigadeClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@BrigadeClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EBrigadeClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@VuEntity@@MAEHXZ
	DD	FLAT:?RemovalCallback@FalconEntity@@UAEHXZ
	DD	FLAT:?InitData@CampBaseClass@@UAEXXZ
	DD	FLAT:?CleanupData@FalconEntity@@UAEXXZ
	DD	FLAT:?IsSimBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?IsCampBase@CampBaseClass@@UAE_NXZ
	DD	FLAT:?Wake@UnitClass@@UAEHXZ
	DD	FLAT:?Sleep@UnitClass@@UAEHXZ
	DD	FLAT:?GetCampID@CampBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@GroundUnitClass@@UAEHXZ
	DD	FLAT:?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@FalconEntity@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@FalconEntity@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@CampBaseClass@@UAEHXZ
	DD	FLAT:?GetVt@GroundUnitClass@@UBEMXZ
	DD	FLAT:?GetKias@GroundUnitClass@@UBEMXZ
	DD	FLAT:?GetMovementType@GroundUnitClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@UnitClass@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@BrigadeClass@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?GetRCSFactor@UnitClass@@UAEMXZ
	DD	FLAT:?GetIRFactor@UnitClass@@UAEMXZ
	DD	FLAT:?GetRadarType@UnitClass@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@UnitClass@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?SetOwner@CampBaseClass@@UAEXE@Z
	DD	FLAT:?SendDeaggregateData@UnitClass@@UAEXPAVVuTargetEntity@@@Z
	DD	FLAT:?RecordCurrentState@UnitClass@@UAEHPAVFalconSessionEntity@@H@Z
	DD	FLAT:?Deaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?Reaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?TransferOwnership@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?InsertInSimLists@UnitClass@@UAEXMM@Z
	DD	FLAT:?RemoveFromSimLists@UnitClass@@UAEXXZ
	DD	FLAT:?DeaggregateFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?ReaggregateFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?TransferOwnershipFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?ApplyDamage@UnitClass@@UAEHW4DamageDataType@@PAHHF@Z
	DD	FLAT:?ApplyDamage@UnitClass@@UAEHPAVFalconCampWeaponsFire@@E@Z
	DD	FLAT:?DecodeDamageData@UnitClass@@UAEHPAEPAV1@PAVFalconDeathMessage@@@Z
	DD	FLAT:?CollectWeapons@UnitClass@@UAEHPAEW4MoveType@@QAFQAEH@Z
	DD	FLAT:?GetName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetFullName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetDivisionName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetHitChance@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetAproxHitChance@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetCombatStrength@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetAproxCombatStrength@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetWeaponRange@UnitClass@@UAEHHPAVFalconEntity@@@Z
	DD	FLAT:?GetAproxWeaponRange@UnitClass@@UAEHH@Z
	DD	FLAT:?GetDetectionRange@UnitClass@@UAEHH@Z
	DD	FLAT:?GetElectronicDetectionRange@UnitClass@@UAEHH@Z
	DD	FLAT:?CanDetect@UnitClass@@UAEHPAVFalconEntity@@@Z
	DD	FLAT:?StepRadar@CampBaseClass@@UAEHHHM@Z
	DD	FLAT:?GetNumberOfArcs@UnitClass@@UAEHXZ
	DD	FLAT:?GetArcRatio@UnitClass@@UAEMH@Z
	DD	FLAT:?GetArcRange@UnitClass@@UAEMH@Z
	DD	FLAT:?GetArcAngle@UnitClass@@UAEXHPAM0@Z
	DD	FLAT:?GetMissilesFlying@CampBaseClass@@UAEHXZ
	DD	FLAT:?ResetPlayerStatus@UnitClass@@UAEHXZ
	DD	FLAT:?GetComponentLocation@UnitClass@@UAEXPAF0H@Z
	DD	FLAT:?GetComponentAltitude@UnitClass@@UAEHH@Z
	DD	FLAT:?CanShootWeapon@UnitClass@@UAEHH@Z
	DD	FLAT:?GetDeaggregationPoint@UnitClass@@UAEHHPAPAVCampBaseClass@@@Z
	DD	FLAT:?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ
	DD	FLAT:?ShouldDeaggregate@UnitClass@@UAEHXZ
	DD	FLAT:?ClearDeaggregationData@UnitClass@@UAEXXZ
	DD	FLAT:?Reaction@BrigadeClass@@UAEHPAVCampBaseClass@@HM@Z
	DD	FLAT:?MoveUnit@BrigadeClass@@UAEHK@Z
	DD	FLAT:?DoCombat@UnitClass@@UAEHXZ
	DD	FLAT:?ChooseTactic@BrigadeClass@@UAEHXZ
	DD	FLAT:?CheckTactic@BrigadeClass@@UAEHH@Z
	DD	FLAT:?Father@BrigadeClass@@UBEHXZ
	DD	FLAT:?Real@BrigadeClass@@UAEHXZ
	DD	FLAT:?AdjustForSupply@UnitClass@@UAEMXZ
	DD	FLAT:?GetUnitSpeed@BrigadeClass@@UBEHXZ
	DD	FLAT:?DetectOnMove@GroundUnitClass@@UAEHXZ
	DD	FLAT:?ChooseTarget@GroundUnitClass@@UAEHXZ
	DD	FLAT:?MaxUpdateTime@GroundUnitClass@@UBEKXZ
	DD	FLAT:?CombatTime@UnitClass@@UAEKXZ
	DD	FLAT:?GetUnitSupplyNeed@BrigadeClass@@UAEHH@Z
	DD	FLAT:?GetUnitFuelNeed@BrigadeClass@@UAEHH@Z
	DD	FLAT:?SupplyUnit@BrigadeClass@@UAEXHH@Z
	DD	FLAT:?GetVehicleDeagData@UnitClass@@UAEHPAVSimInitDataClass@@H@Z
	DD	FLAT:?IsDead@UnitClass@@UBEHXZ
	DD	FLAT:?SimSetLocation@UnitClass@@UAEXMMM@Z
	DD	FLAT:?SimSetOrientation@UnitClass@@UAEXMMM@Z
	DD	FLAT:?GetRealPosition@UnitClass@@UAEXPAM00@Z
	DD	FLAT:?GetBestVehicleWeapon@UnitClass@@UAEHHPAEW4MoveType@@HPAH@Z
	DD	FLAT:?GetVehicleHitChance@UnitClass@@UAEHHW4MoveType@@HH@Z
	DD	FLAT:?GetVehicleCombatStrength@UnitClass@@UAEHHW4MoveType@@H@Z
	DD	FLAT:?GetVehicleRange@UnitClass@@UAEHHHPAVFalconEntity@@@Z
	DD	FLAT:?GetUnitWeaponId@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetUnitWeaponCount@UnitClass@@UAEHHH@Z
	DD	FLAT:?SetUnitLastMove@UnitClass@@UAEXK@Z
	DD	FLAT:?SetCombatTime@UnitClass@@UAEXK@Z
	DD	FLAT:?SetBurntFuel@UnitClass@@UAEXJ@Z
	DD	FLAT:?SetUnitMission@UnitClass@@UAEXE@Z
	DD	FLAT:?SetUnitRole@UnitClass@@UAEXE@Z
	DD	FLAT:?SetUnitPriority@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMissionID@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMissionTarget@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitTOT@UnitClass@@UAEXK@Z
	DD	FLAT:?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z
	DD	FLAT:?GetNumberOfLoadouts@UnitClass@@UAEHXZ
	DD	FLAT:?GetMoveTime@UnitClass@@UAEKXZ
	DD	FLAT:?GetCombatTime@UnitClass@@UAEKXZ
	DD	FLAT:?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ
	DD	FLAT:?GetBurntFuel@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ
	DD	FLAT:?GetUnitNormalRole@GroundUnitClass@@UAEHXZ
	DD	FLAT:?GetUnitCurrentRole@GroundUnitClass@@UBEHXZ
	DD	FLAT:?GetUnitPriority@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ
	DD	FLAT:?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitMissionID@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitTOT@UnitClass@@UAEKXZ
	DD	FLAT:?GetUnitSquadron@UnitClass@@UAEPAV1@XZ
	DD	FLAT:?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ
	DD	FLAT:?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z
	DD	FLAT:?DumpWeapons@UnitClass@@UAEHXZ
	DD	FLAT:?ETA@UnitClass@@UAEKXZ
	DD	FLAT:?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ
	DD	FLAT:?BuildMission@GroundUnitClass@@UAEHXZ
	DD	FLAT:?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z
	DD	FLAT:?IncrementTime@UnitClass@@UAEXK@Z
	DD	FLAT:?UseFuel@UnitClass@@UAEXJ@Z
	DD	FLAT:?SetUnitSpecialty@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitSupply@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMorale@UnitClass@@UAEXH@Z
	DD	FLAT:?SetSquadronFuel@UnitClass@@UAEXJ@Z
	DD	FLAT:?SetUnitStores@UnitClass@@UAEXHE@Z
	DD	FLAT:?SetLastResupply@UnitClass@@UAEXH@Z
	DD	FLAT:?SetLastResupplyTime@UnitClass@@UAEXK@Z
	DD	FLAT:?GetUnitSpecialty@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitSupply@BrigadeClass@@UAEHXZ
	DD	FLAT:?GetUnitMorale@BrigadeClass@@UAEHXZ
	DD	FLAT:?GetSquadronFuel@UnitClass@@UAEJXZ
	DD	FLAT:?GetUnitStores@UnitClass@@UAEEH@Z
	DD	FLAT:?GetLastResupplyTime@UnitClass@@UAEKXZ
	DD	FLAT:?GetLastResupply@UnitClass@@UAEHXZ
	DD	FLAT:?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z
	DD	FLAT:?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z
	DD	FLAT:?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z
	DD	FLAT:?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z
	DD	FLAT:?SetUnitPrimaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitSecondaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitObjective@GroundUnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z
	DD	FLAT:?SetUnitOrders@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitFatigue@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMode@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitPosition@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitDivision@BrigadeClass@@UAEXH@Z
	DD	FLAT:?SetUnitHeading@UnitClass@@UAEXH@Z
	DD	FLAT:?GetUnitPrimaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitSecondaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitObjective@GroundUnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitPrimaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitSecondaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitObjectiveID@GroundUnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitOrders@GroundUnitClass@@UAEHXZ
	DD	FLAT:?GetUnitFatigue@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitElement@BrigadeClass@@UAEPAVUnitClass@@H@Z
	DD	FLAT:?GetUnitElement@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMode@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitPosition@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitDivision@GroundUnitClass@@UAEHXZ
	DD	FLAT:?GetUnitHeading@UnitClass@@UAEHXZ
	DD	FLAT:?SetUnitNextMove@UnitClass@@UAEXXZ
	DD	FLAT:?ClearUnitPath@UnitClass@@UAEXXZ
	DD	FLAT:?GetNextMoveDirection@UnitClass@@UAEHXZ
	DD	FLAT:?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z
	DD	FLAT:?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z
	DD	FLAT:?GetObjMovementType@GroundUnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z
	DD	FLAT:?CheckForSurrender@GroundUnitClass@@UAEHXZ
	DD	FLAT:?RallyUnit@BrigadeClass@@UAEHH@Z
	DD	FLAT:?GetUnitParent@UnitClass@@UBEPAV1@XZ
	DD	FLAT:?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetUnitParent@UnitClass@@UAEXPAV1@@Z
	DD	FLAT:?GetFirstUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ
	DD	FLAT:?GetNextUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ
	DD	FLAT:?GetUnitElementByID@BrigadeClass@@UAEPAVUnitClass@@H@Z
	DD	FLAT:?GetPrevUnitElement@BrigadeClass@@UAEPAVUnitClass@@PAV2@@Z
	DD	FLAT:?AddUnitChild@BrigadeClass@@UAEXPAVUnitClass@@@Z
	DD	FLAT:?DisposeChildren@BrigadeClass@@UAEXXZ
	DD	FLAT:?RemoveChild@BrigadeClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?ReorganizeUnit@BrigadeClass@@UAEXXZ
	DD	FLAT:?UpdateParentStatistics@BrigadeClass@@UAEHXZ
	DD	FLAT:?SetUnitOrders@GroundUnitClass@@UAEXE@Z
	DD	FLAT:?SetUnitDivision@GroundUnitClass@@UAEXF@Z
	DD	FLAT:?OrderElement@BrigadeClass@@UAEHPAVUnitClass@@PAVFalconPrivateList@@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z$0
__unwindtable$?NewBrigade@@YAPAVBrigadeClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewBrigade@@YAPAVBrigadeClass@@H@Z$0
__unwindtable$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z$0
__unwindtable$??1BrigadeClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BrigadeClass@@UAE@XZ$0
__unwindtable$??0BrigadeClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BrigadeClass@@QAE@PAPAEPAJ@Z$0
__unwindtable$??0BrigadeClass@@QAE@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BrigadeClass@@QAE@G@Z$0
__ehfuncinfo$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?NewBrigade@@YAPAVBrigadeClass@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewBrigade@@YAPAVBrigadeClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1BrigadeClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BrigadeClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BrigadeClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BrigadeClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BrigadeClass@@QAE@G@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BrigadeClass@@QAE@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_ep$ = -4						; size = 4
_e$ = 8							; size = 4
?GetPriority@@YAHPAVUnitClass@@@Z PROC			; GetPriority

; 841  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 842  : 	int		ep;
; 843  : 
; 844  : 	if (!e)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN2@GetPriorit

; 845  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@GetPriorit
$LN2@GetPriorit:

; 846  : 
; 847  : 	ep = OrderPriority[e->GetUnitOrders()] + OrderPriority[GetGroundOrders(e->GetUnitNormalRole())];

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+880]
	call	eax
	mov	esi, eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	push	eax
	call	?GetGroundOrders@@YAHH@Z		; GetGroundOrders
	add	esp, 4
	mov	ecx, DWORD PTR ?OrderPriority@@3PAHA[esi*4]
	add	ecx, DWORD PTR ?OrderPriority@@3PAHA[eax*4]
	mov	DWORD PTR _ep$[ebp], ecx

; 848  : 	if (e->Broken())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	je	SHORT $LN1@GetPriorit

; 849  : 		ep /= 2;

	mov	eax, DWORD PTR _ep$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _ep$[ebp], eax
$LN1@GetPriorit:

; 850  : 	return ep;

	mov	eax, DWORD PTR _ep$[ebp]
$LN3@GetPriorit:

; 851  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPriority@@YAHPAVUnitClass@@@Z ENDP			; GetPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_brole$ = -8						; size = 4
_role$ = -4						; size = 4
_e$ = 8							; size = 4
_brig$ = 12						; size = 4
?GetNewRole@@YAHPAVUnitClass@@0@Z PROC			; GetNewRole

; 664  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 665  : 	int		brole = brig->GetUnitCurrentRole();

	mov	eax, DWORD PTR _brig$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _brig$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	mov	DWORD PTR _brole$[ebp], eax

; 666  : 	int		role = e->GetUnitNormalRole();

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	mov	DWORD PTR _role$[ebp], eax

; 667  : 	if (e->Broken())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	je	SHORT $LN6@GetNewRole

; 668  : 		role = GRO_RESERVE;

	mov	DWORD PTR _role$[ebp], 0
$LN6@GetNewRole:

; 669  : 	// Swap special roles
; 670  : 	if (role == GRO_AIRBORNE || role == GRO_ASSAULT)

	cmp	DWORD PTR _role$[ebp], 3
	je	SHORT $LN4@GetNewRole
	cmp	DWORD PTR _role$[ebp], 2
	jne	SHORT $LN5@GetNewRole
$LN4@GetNewRole:

; 671  : 		role = brole;

	mov	ecx, DWORD PTR _brole$[ebp]
	mov	DWORD PTR _role$[ebp], ecx
$LN5@GetNewRole:

; 672  : 	// Modify assignment role by normal role
; 673  : 	if (role == GRO_ATTACK && brole != GRO_ATTACK)

	cmp	DWORD PTR _role$[ebp], 1
	jne	SHORT $LN3@GetNewRole
	cmp	DWORD PTR _brole$[ebp], 1
	je	SHORT $LN3@GetNewRole

; 674  : 		role = brole;

	mov	edx, DWORD PTR _brole$[ebp]
	mov	DWORD PTR _role$[ebp], edx
	jmp	SHORT $LN2@GetNewRole
$LN3@GetNewRole:

; 675  : 	else if (role == GRO_DEFENSE && brole == GRO_ATTACK)

	cmp	DWORD PTR _role$[ebp], 4
	jne	SHORT $LN2@GetNewRole
	cmp	DWORD PTR _brole$[ebp], 1
	jne	SHORT $LN2@GetNewRole

; 676  : 		role = GRO_ATTACK;

	mov	DWORD PTR _role$[ebp], 1
$LN2@GetNewRole:

; 677  : 	return role;

	mov	eax, DWORD PTR _role$[ebp]

; 678  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNewRole@@YAHPAVUnitClass@@0@Z ENDP			; GetNewRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_vuit$ = -64						; size = 12
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 4
$T5 = -32						; size = 4
tv154 = -28						; size = 4
_bo$ = -24						; size = 4
_x$6 = -20						; size = 2
_y$7 = -16						; size = 2
__$EHRec$ = -12						; size = 12
_e$ = 8							; size = 4
_role$ = 12						; size = 4
_nearlist$ = 16						; size = 4
?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z PROC ; OnValidObjective

; 645  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 646  : 	VuListIterator	vuit(nearlist);

	mov	eax, DWORD PTR _nearlist$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vuit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 647  : 	Objective		bo = GetFirstObjective(&vuit);

	lea	ecx, DWORD PTR _vuit$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _bo$[ebp], eax
$LN5@OnValidObj:

; 648  : 
; 649  : 	while (bo && bo->Id() != e->GetUnitObjectiveID())

	cmp	DWORD PTR _bo$[ebp], 0
	je	SHORT $LN4@OnValidObj
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+876]
	call	eax
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bo$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@OnValidObj

; 650  : 		bo = GetNextObjective(&vuit);

	lea	eax, DWORD PTR _vuit$[ebp]
	push	eax
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _bo$[ebp], eax
	jmp	SHORT $LN5@OnValidObj
$LN4@OnValidObj:

; 651  : 	if (bo){

	cmp	DWORD PTR _bo$[ebp], 0
	je	SHORT $LN3@OnValidObj

; 652  : 		GridIndex	x,y;
; 653  : 		e->GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 654  : 		if (ScorePosition (e, role, 100, bo, x, y, (bo->GetTeam() == e->GetTeam())? 1:0) < -30000)

	mov	eax, DWORD PTR _bo$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bo$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN8@OnValidObj
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN9@OnValidObj
$LN8@OnValidObj:
	mov	DWORD PTR tv154[ebp], 0
$LN9@OnValidObj:
	mov	edx, DWORD PTR tv154[ebp]
	push	edx
	movzx	eax, WORD PTR _y$7[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _bo$[ebp]
	push	edx
	push	100					; 00000064H
	mov	eax, DWORD PTR _role$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?ScorePosition@@YAHPAVUnitClass@@HHPAVObjectiveClass@@FFH@Z ; ScorePosition
	add	esp, 28					; 0000001cH
	cmp	eax, -30000				; ffff8ad0H
	jge	SHORT $LN3@OnValidObj

; 655  : 			bo = NULL;

	mov	DWORD PTR _bo$[ebp], 0
$LN3@OnValidObj:

; 656  : 	}
; 657  : 	if (bo){

	cmp	DWORD PTR _bo$[ebp], 0
	je	SHORT $LN1@OnValidObj

; 658  : 		return 1;

	mov	DWORD PTR $T5[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _vuit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T5[ebp]
	jmp	SHORT $LN6@OnValidObj
$LN1@OnValidObj:

; 659  : 	}
; 660  : 	return 0;

	mov	DWORD PTR $T4[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _vuit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T4[ebp]
$LN6@OnValidObj:

; 661  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z$0:
	lea	ecx, DWORD PTR _vuit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z ENDP ; OnValidObjective
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_new_brigade$ = -28					; size = 4
$T2 = -24						; size = 4
tv72 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
?NewBrigade@@YAPAVBrigadeClass@@H@Z PROC		; NewBrigade

; 109  : BrigadeClass* NewBrigade (int type){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewBrigade@@YAPAVBrigadeClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 110  : 	BrigadeClass	*new_brigade;
; 111  : 	/*VuEnterCriticalSection();
; 112  : 	lastVolatileId = vuAssignmentId;
; 113  : 	vuAssignmentId = lastNonVolatileId;
; 114  : 	vuLowWrapNumber = FIRST_NON_VOLATILE_VU_ID_NUMBER;
; 115  : 	vuHighWrapNumber = LAST_NON_VOLATILE_VU_ID_NUMBER;*/
; 116  : 	new_brigade = new BrigadeClass (type);

	push	340					; 00000154H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewBrigade
	movzx	eax, WORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0BrigadeClass@@QAE@G@Z		; BrigadeClass::BrigadeClass
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@NewBrigade
$LN3@NewBrigade:
	mov	DWORD PTR tv72[ebp], 0
$LN4@NewBrigade:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _new_brigade$[ebp], edx

; 117  : 	/*lastNonVolatileId = vuAssignmentId;
; 118  : 	vuAssignmentId = lastVolatileId;
; 119  : 	vuLowWrapNumber = FIRST_VOLATILE_VU_ID_NUMBER;
; 120  : 	vuHighWrapNumber = LAST_VOLATILE_VU_ID_NUMBER;
; 121  : 	VuExitCriticalSection();*/
; 122  : 	return new_brigade;

	mov	eax, DWORD PTR _new_brigade$[ebp]

; 123  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewBrigade@@YAPAVBrigadeClass@@H@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewBrigade@@YAPAVBrigadeClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewBrigade@@YAPAVBrigadeClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewBrigade@@YAPAVBrigadeClass@@H@Z ENDP		; NewBrigade
; Function compile flags: /Odtp
;	COMDAT ??_GBrigadeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBrigadeClass@@UAEPAXI@Z PROC			; BrigadeClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BrigadeClass@@UAE@XZ			; BrigadeClass::~BrigadeClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBrigadeClass@@UAEPAXI@Z ENDP			; BrigadeClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_rallied$ = -20						; size = 4
_role$ = -16						; size = 4
_gotnon$ = -12						; size = 4
_e$ = -8						; size = 4
_this$ = -4						; size = 4
_minutes$ = 8						; size = 4
?RallyUnit@BrigadeClass@@UAEHH@Z PROC			; BrigadeClass::RallyUnit
; _this$ = ecx

; 1189 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1190 : 	Unit	e;
; 1191 : 	int		rallied = 1;

	mov	DWORD PTR _rallied$[ebp], 1

; 1192 : 	int		role, gotnon = 0;

	mov	DWORD PTR _gotnon$[ebp], 0

; 1193 : 
; 1194 : 	role = GetUnitNormalRole();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	mov	DWORD PTR _role$[ebp], eax

; 1195 : 	e = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN7@RallyUnit:

; 1196 : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN6@RallyUnit

; 1197 : 		{
; 1198 : 		if (e->RallyUnit(minutes))

	mov	ecx, DWORD PTR _minutes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+940]
	call	edx
	test	eax, eax
	je	SHORT $LN5@RallyUnit

; 1199 : 			rallied = 0;

	mov	DWORD PTR _rallied$[ebp], 0
$LN5@RallyUnit:

; 1200 : 		if (role != GRO_FIRESUPPORT && e->GetUnitNormalRole() != GRO_FIRESUPPORT)

	cmp	DWORD PTR _role$[ebp], 6
	je	SHORT $LN4@RallyUnit
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	cmp	eax, 6
	je	SHORT $LN4@RallyUnit

; 1201 : 			gotnon = 1;

	mov	DWORD PTR _gotnon$[ebp], 1
$LN4@RallyUnit:

; 1202 : 		e = GetNextUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 1203 : 		}

	jmp	SHORT $LN7@RallyUnit
$LN6@RallyUnit:

; 1204 : 
; 1205 : 	// KCK: We're going to convert Infantry/Armored/Etc Brigades which have lost all combat
; 1206 : 	// battalions into another brigade type (ie: Artillery, if that's all that's left). This
; 1207 : 	// Will allow the artillery to then do something usefull rather than sitting on reserve
; 1208 : 	// missions
; 1209 : 	if (!gotnon && role != GRO_FIRESUPPORT)

	cmp	DWORD PTR _gotnon$[ebp], 0
	jne	SHORT $LN3@RallyUnit
	cmp	DWORD PTR _role$[ebp], 6
	je	SHORT $LN3@RallyUnit

; 1210 : 		{
; 1211 : 		e = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 1212 : 		if (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN3@RallyUnit

; 1213 : 			SetUnitSType(e->GetSType());

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitSType@UnitClass@@QAEHD@Z	; UnitClass::SetUnitSType
$LN3@RallyUnit:

; 1214 : 		}
; 1215 : 
; 1216 : 	if (rallied)

	cmp	DWORD PTR _rallied$[ebp], 0
	je	SHORT $LN1@RallyUnit

; 1217 : 		SetBroken(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBroken@UnitClass@@QAEXH@Z		; UnitClass::SetBroken
$LN1@RallyUnit:

; 1218 : 
; 1219 : 	return Broken();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken

; 1220 : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?RallyUnit@BrigadeClass@@UAEHH@Z ENDP			; BrigadeClass::RallyUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_loss$ = -40						; size = 4
_combat$ = -36						; size = 4
_engaged$ = -32						; size = 4
_te$ = -28						; size = 4
_e$ = -24						; size = 4
_this$ = -20						; size = 4
_x$ = -16						; size = 2
_y$ = -12						; size = 2
_nx$ = -8						; size = 2
_ny$ = -4						; size = 2
?UpdateParentStatistics@BrigadeClass@@UAEHXZ PROC	; BrigadeClass::UpdateParentStatistics
; _this$ = ecx

; 1092 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 1093 : 	GridIndex	nx,ny,x,y;
; 1094 : 	int			engaged=0,combat=0,loss=0,te=0;

	mov	DWORD PTR _engaged$[ebp], 0
	mov	DWORD PTR _combat$[ebp], 0
	mov	DWORD PTR _loss$[ebp], 0
	mov	DWORD PTR _te$[ebp], 0

; 1095 : 	Unit		e;
; 1096 : 
; 1097 : 	// Update unit wide statistics. NOTE: some delay here- since elements are unmoved.
; 1098 : 	nx = ny = te = 0;

	mov	DWORD PTR _te$[ebp], 0
	mov	ax, WORD PTR _te$[ebp]
	mov	WORD PTR _ny$[ebp], ax
	mov	cx, WORD PTR _ny$[ebp]
	mov	WORD PTR _nx$[ebp], cx

; 1099 : 	e = GetFirstUnitElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+956]
	call	edx
	mov	DWORD PTR _e$[ebp], eax
$LN8@UpdatePare:

; 1100 : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN7@UpdatePare

; 1101 : 		{
; 1102 : 		if (e->Engaged())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN6@UpdatePare

; 1103 : 			engaged = 1;

	mov	DWORD PTR _engaged$[ebp], 1
$LN6@UpdatePare:

; 1104 : 		if (e->Combat())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Combat@UnitClass@@QBEHXZ		; UnitClass::Combat
	test	eax, eax
	je	SHORT $LN5@UpdatePare

; 1105 : 			combat = 1;

	mov	DWORD PTR _combat$[ebp], 1
$LN5@UpdatePare:

; 1106 : 		if (e->Losses())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Losses@UnitClass@@QBEHXZ		; UnitClass::Losses
	test	eax, eax
	je	SHORT $LN4@UpdatePare

; 1107 : 			loss = 1;

	mov	DWORD PTR _loss$[ebp], 1
$LN4@UpdatePare:

; 1108 : 		e->GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1109 : //		nx += x;
; 1110 : //		ny += y;
; 1111 : 		if (!nx && !ny)

	movsx	edx, WORD PTR _nx$[ebp]
	test	edx, edx
	jne	SHORT $LN3@UpdatePare
	movsx	eax, WORD PTR _ny$[ebp]
	test	eax, eax
	jne	SHORT $LN3@UpdatePare

; 1112 : 			e->GetLocation(&nx,&ny);

	lea	ecx, DWORD PTR _ny$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN3@UpdatePare:

; 1113 : 		te++;

	mov	eax, DWORD PTR _te$[ebp]
	add	eax, 1
	mov	DWORD PTR _te$[ebp], eax

; 1114 : 		e = GetNextUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 1115 : 		}

	jmp	$LN8@UpdatePare
$LN7@UpdatePare:

; 1116 : 	if (!te)

	cmp	DWORD PTR _te$[ebp], 0
	jne	SHORT $LN2@UpdatePare

; 1117 : 		{
; 1118 : 		KillUnit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 1119 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN9@UpdatePare
$LN2@UpdatePare:

; 1120 : 		}
; 1121 : 	if (!engaged)

	cmp	DWORD PTR _engaged$[ebp], 0
	jne	SHORT $LN1@UpdatePare

; 1122 : 		{
; 1123 : 		SetEngaged(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1124 : 		SetTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget
$LN1@UpdatePare:

; 1125 : 		}
; 1126 : 	SetEngaged(engaged);

	mov	ecx, DWORD PTR _engaged$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1127 : 	SetCombat(combat);

	mov	edx, DWORD PTR _combat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat

; 1128 : 	SetLosses(loss);

	mov	eax, DWORD PTR _loss$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLosses@UnitClass@@QAEXH@Z		; UnitClass::SetLosses

; 1129 : 	// Set our new averaged position
; 1130 : //	x = nx / te;
; 1131 : //	y = ny / te;
; 1132 : //	SetLocation(x,y);
; 1133 : 	ShiAssert (nx && ny);
; 1134 : 	// Set our position to our first element
; 1135 : 	SetLocation(nx,ny);

	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocation@CampBaseClass@@QAEXFF@Z	; CampBaseClass::SetLocation

; 1136 : 	return te;

	mov	eax, DWORD PTR _te$[ebp]
$LN9@UpdatePare:

; 1137 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateParentStatistics@BrigadeClass@@UAEHXZ ENDP	; BrigadeClass::UpdateParentStatistics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 8
$T2 = -28						; size = 8
_e$ = -20						; size = 4
_ne$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?ReorganizeUnit@BrigadeClass@@UAEXXZ PROC		; BrigadeClass::ReorganizeUnit
; _this$ = ecx

; 855  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 856  : 	Unit		e,ne;
; 857  : 	int			i,j;
; 858  : 
; 859  : 	for (i=0; i<elements; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Reorganize
$LN6@Reorganize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Reorganize:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	cmp	DWORD PTR _i$[ebp], edx
	jge	$LN8@Reorganize

; 860  : 		{
; 861  : 		e = GetUnitElement(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+888]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 862  : 		for (j=i; j<elements; j++)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN4@Reorganize
$LN3@Reorganize:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN4@Reorganize:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	$LN2@Reorganize

; 863  : 			{
; 864  : 			ne = GetUnitElement(j);

	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+888]
	call	eax
	mov	DWORD PTR _ne$[ebp], eax

; 865  : 			if (ne && e && GetPriority(ne) > GetPriority(e))

	cmp	DWORD PTR _ne$[ebp], 0
	je	SHORT $LN1@Reorganize
	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN1@Reorganize
	mov	ecx, DWORD PTR _ne$[ebp]
	push	ecx
	call	?GetPriority@@YAHPAVUnitClass@@@Z	; GetPriority
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?GetPriority@@YAHPAVUnitClass@@@Z	; GetPriority
	add	esp, 4
	cmp	esi, eax
	jle	SHORT $LN1@Reorganize

; 866  : 				{
; 867  : 				element[i] = ne->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _ne$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	DWORD PTR [esi+eax*8+296], ecx
	mov	DWORD PTR [esi+eax*8+300], edx

; 868  : 				element[j] = e->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	DWORD PTR [esi+ecx*8+296], edx
	mov	DWORD PTR [esi+ecx*8+300], eax

; 869  : 				e = ne;

	mov	edx, DWORD PTR _ne$[ebp]
	mov	DWORD PTR _e$[ebp], edx
$LN1@Reorganize:

; 870  : 				}
; 871  : 			}

	jmp	$LN3@Reorganize
$LN2@Reorganize:

; 872  : 		}

	jmp	$LN6@Reorganize
$LN8@Reorganize:

; 873  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ReorganizeUnit@BrigadeClass@@UAEXXZ ENDP		; BrigadeClass::ReorganizeUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_e$ = -16						; size = 4
_i$ = -12						; size = 4
_j$ = -8						; size = 4
_this$ = -4						; size = 4
_eid$ = 8						; size = 8
?RemoveChild@BrigadeClass@@UAEXVVU_ID@@@Z PROC		; BrigadeClass::RemoveChild
; _this$ = ecx

; 817  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 818  : 	int		i=0,j;

	mov	DWORD PTR _i$[ebp], 0
$LN7@RemoveChil:

; 819  : 	Unit	e;
; 820  : 
; 821  : 	while (i < elements)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN8@RemoveChil

; 822  : 		{
; 823  : 		if (element[i] == eid)

	lea	edx, DWORD PTR _eid$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8+296]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN5@RemoveChil

; 824  : 			{
; 825  : 			for (j=i; j < MAX_UNIT_CHILDREN-1; j++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN4@RemoveChil
$LN3@RemoveChil:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN4@RemoveChil:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN2@RemoveChil

; 826  : 				{
; 827  : 				element[j] = element[j+1];

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+304]
	mov	edx, DWORD PTR [eax+edx*8+308]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	DWORD PTR [esi+eax*8+296], ecx
	mov	DWORD PTR [esi+eax*8+300], edx

; 828  : 				e = FindUnit(element[j]);

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+300]
	push	eax
	mov	ecx, DWORD PTR [edx+ecx*8+296]
	push	ecx
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	DWORD PTR _e$[ebp], eax

; 829  : //				if (e)
; 830  : //					((Battalion)e)->SetUnitElement(j);
; 831  : 				}

	jmp	SHORT $LN3@RemoveChil
$LN2@RemoveChil:

; 832  : 			element[j] = FalconNullId;

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+edx*8+296], ecx
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+edx*8+300], ecx

; 833  : 			elements--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+292]
	sub	al, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+292], al

; 834  : 			}
; 835  : 		else

	jmp	SHORT $LN1@RemoveChil
$LN5@RemoveChil:

; 836  : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN1@RemoveChil:

; 837  : 		}

	jmp	$LN7@RemoveChil
$LN8@RemoveChil:

; 838  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveChild@BrigadeClass@@UAEXVVU_ID@@@Z ENDP		; BrigadeClass::RemoveChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_e$ = -8						; size = 4
_this$ = -4						; size = 4
?DisposeChildren@BrigadeClass@@UAEXXZ PROC		; BrigadeClass::DisposeChildren
; _this$ = ecx

; 803  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN4@DisposeChi:

; 804  : 	Unit		e;
; 805  : 
; 806  : 	while (element[0])

	mov	eax, 8
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+296]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN5@DisposeChi

; 807  : 		{
; 808  : 		e = (Unit)vuDatabase->Find(element[0]);

	mov	edx, 8
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+300]
	push	ecx
	mov	edx, DWORD PTR [eax+edx+296]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 809  : 		if (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@DisposeChi

; 810  : 			e->KillUnit();

	mov	ecx, DWORD PTR _e$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 811  : 		else

	jmp	SHORT $LN1@DisposeChi
$LN2@DisposeChi:

; 812  : 			RemoveChild(element[0]);

	mov	eax, 8
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+300]
	push	edx
	mov	eax, DWORD PTR [ecx+eax+296]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+980]
	call	eax
$LN1@DisposeChi:

; 813  : 		}

	jmp	$LN4@DisposeChi
$LN5@DisposeChi:

; 814  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DisposeChildren@BrigadeClass@@UAEXXZ ENDP		; BrigadeClass::DisposeChildren
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_e$ = 8							; size = 4
?AddUnitChild@BrigadeClass@@UAEXPAVUnitClass@@@Z PROC	; BrigadeClass::AddUnitChild
; _this$ = ecx

; 788  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 789  : 	int		i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN4@AddUnitChi:

; 790  : 	
; 791  : 	while (element[i] && i < MAX_UNIT_CHILDREN)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8+296]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN3@AddUnitChi
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN3@AddUnitChi

; 792  : 		i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN4@AddUnitChi
$LN3@AddUnitChi:

; 793  : 	if (i < MAX_UNIT_CHILDREN)

	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN2@AddUnitChi

; 794  : 		{
; 795  : 		element[i] = e->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	DWORD PTR [esi+eax*8+296], ecx
	mov	DWORD PTR [esi+eax*8+300], edx
$LN2@AddUnitChi:

; 796  : //		((Battalion)e)->SetUnitElement(i);
; 797  : 		}
; 798  : 	if (i >= elements)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	cmp	DWORD PTR _i$[ebp], edx
	jl	SHORT $LN5@AddUnitChi

; 799  : 		elements = i+1;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+292], al
$LN5@AddUnitChi:

; 800  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?AddUnitChild@BrigadeClass@@UAEXPAVUnitClass@@@Z ENDP	; BrigadeClass::AddUnitChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_e$ = 8							; size = 4
?GetPrevUnitElement@BrigadeClass@@UAEPAVUnitClass@@PAV2@@Z PROC ; BrigadeClass::GetPrevUnitElement
; _this$ = ecx

; 763  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 764  : 	for (int i=1; i<elements; i++)

	mov	DWORD PTR _i$2[ebp], 1
	jmp	SHORT $LN4@GetPrevUni
$LN3@GetPrevUni:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@GetPrevUni:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	cmp	DWORD PTR _i$2[ebp], edx
	jge	SHORT $LN2@GetPrevUni

; 765  : 		{
; 766  : 		if (element[i] == e->Id())

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*8+296]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@GetPrevUni

; 767  : 			return (Unit)vuDatabase->Find(element[i-1]);

	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+292]
	push	eax
	mov	ecx, DWORD PTR [edx+ecx*8+288]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	jmp	SHORT $LN5@GetPrevUni
$LN1@GetPrevUni:

; 768  : 		}

	jmp	SHORT $LN3@GetPrevUni
$LN2@GetPrevUni:

; 769  : 	return NULL;

	xor	eax, eax
$LN5@GetPrevUni:

; 770  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPrevUnitElement@BrigadeClass@@UAEPAVUnitClass@@PAV2@@Z ENDP ; BrigadeClass::GetPrevUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eid$ = 8						; size = 4
?GetUnitElementByID@BrigadeClass@@UAEPAVUnitClass@@H@Z PROC ; BrigadeClass::GetUnitElementByID
; _this$ = ecx

; 780  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  : 	if (eid < elements)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	cmp	DWORD PTR _eid$[ebp], ecx
	jge	SHORT $LN1@GetUnitEle

; 782  : 		return (Unit)vuDatabase->Find(element[eid]);

	mov	edx, DWORD PTR _eid$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+300]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+296]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	jmp	SHORT $LN2@GetUnitEle
$LN1@GetUnitEle:

; 783  : 
; 784  : 	return NULL;

	xor	eax, eax
$LN2@GetUnitEle:

; 785  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElementByID@BrigadeClass@@UAEPAVUnitClass@@H@Z ENDP ; BrigadeClass::GetUnitElementByID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_en$ = 8						; size = 4
?GetUnitElement@BrigadeClass@@UAEPAVUnitClass@@H@Z PROC	; BrigadeClass::GetUnitElement
; _this$ = ecx

; 773  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 774  : 	if (en < elements && element[c_element])

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	cmp	DWORD PTR _en$[ebp], ecx
	jge	SHORT $LN1@GetUnitEle
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+293]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8+296]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN1@GetUnitEle

; 775  : 		return (Unit)vuDatabase->Find(element[en]);

	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+300]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+296]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	jmp	SHORT $LN2@GetUnitEle
$LN1@GetUnitEle:

; 776  : 	return NULL;

	xor	eax, eax
$LN2@GetUnitEle:

; 777  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElement@BrigadeClass@@UAEPAVUnitClass@@H@Z ENDP	; BrigadeClass::GetUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ PROC ; BrigadeClass::GetNextUnitElement
; _this$ = ecx

; 751  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 752  : 	c_element++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+293]
	add	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+293], cl
$LN3@GetNextUni:

; 753  : 	while (c_element < elements){

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+293]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	cmp	ecx, eax
	jge	SHORT $LN2@GetNextUni

; 754  : 		if (element[c_element])

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+293]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+296]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN1@GetNextUni

; 755  : 			return FindUnit(element[c_element]);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+293]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+300]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+296]
	push	edx
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	jmp	SHORT $LN4@GetNextUni
$LN1@GetNextUni:

; 756  : 		c_element++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+293]
	add	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+293], cl

; 757  : 	}

	jmp	SHORT $LN3@GetNextUni
$LN2@GetNextUni:

; 758  : 	c_element=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+293], 0

; 759  : 	return NULL;

	xor	eax, eax
$LN4@GetNextUni:

; 760  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ ENDP ; BrigadeClass::GetNextUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ PROC ; BrigadeClass::GetFirstUnitElement
; _this$ = ecx

; 745  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 746  : 	c_element = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+293], 0

; 747  : 	return FindUnit(element[c_element]);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+293]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+300]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+296]
	push	edx
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8

; 748  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitElement@BrigadeClass@@UBEPAVUnitClass@@XZ ENDP ; BrigadeClass::GetFirstUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
$T1 = -32						; size = 8
_o$ = -24						; size = 4
tv89 = -20						; size = 4
_neworders$ = -16					; size = 4
_role$ = -12						; size = 4
_bo$ = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
_nearlist$ = 12						; size = 4
?OrderElement@BrigadeClass@@UAEHPAVUnitClass@@PAVFalconPrivateList@@@Z PROC ; BrigadeClass::OrderElement
; _this$ = ecx

; 683  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 684  : 	Objective		o,bo;
; 685  : 	int				neworders = GetUnitOrders();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+880]
	call	eax
	mov	DWORD PTR _neworders$[ebp], eax

; 686  : 	int				role;
; 687  : 
; 688  : 	// Check to see if there's something more important to do
; 689  : 	o = GetUnitObjective();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	call	eax
	mov	DWORD PTR _o$[ebp], eax

; 690  : 	role = GetNewRole(e,this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?GetNewRole@@YAHPAVUnitClass@@0@Z	; GetNewRole
	add	esp, 8
	mov	DWORD PTR _role$[ebp], eax

; 691  : 	// Determine orders by role
; 692  : 	neworders = GetGroundOrders(role);

	mov	eax, DWORD PTR _role$[ebp]
	push	eax
	call	?GetGroundOrders@@YAHH@Z		; GetGroundOrders
	add	esp, 4
	mov	DWORD PTR _neworders$[ebp], eax

; 693  : 
; 694  : 	switch (role)

	mov	ecx, DWORD PTR _role$[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 8
	ja	SHORT $LN3@OrderEleme
	mov	edx, DWORD PTR tv89[ebp]
	movzx	eax, BYTE PTR $LN10@OrderEleme[edx]
	jmp	DWORD PTR $LN11@OrderEleme[eax*4]
$LN5@OrderEleme:

; 695  : 		{
; 696  : 		case GRO_ATTACK:
; 697  : 		case GRO_ASSAULT:
; 698  : 		case GRO_AIRBORNE:
; 699  : 		case GRO_RECON:
; 700  : 			// Assign to best offensive objective
; 701  : 			bo = FindBestPosition(e, this, GRO_ATTACK, nearlist);

	mov	ecx, DWORD PTR _nearlist$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?FindBestPosition@@YAPAVObjectiveClass@@PAVUnitClass@@PAVBrigadeClass@@HPAVFalconPrivateList@@@Z ; FindBestPosition
	add	esp, 16					; 00000010H
	mov	DWORD PTR _bo$[ebp], eax

; 702  : 			break;

	jmp	SHORT $LN6@OrderEleme
$LN4@OrderEleme:

; 703  : 		case GRO_DEFENSE:
; 704  : 		case GRO_ENGINEER:
; 705  : 		case GRO_AIRDEFENSE:
; 706  : 		case GRO_FIRESUPPORT:
; 707  : 		case GRO_RESERVE:
; 708  : 			bo = FindBestPosition(e, this, role, nearlist);

	mov	ecx, DWORD PTR _nearlist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _role$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?FindBestPosition@@YAPAVObjectiveClass@@PAVUnitClass@@PAVBrigadeClass@@HPAVFalconPrivateList@@@Z ; FindBestPosition
	add	esp, 16					; 00000010H
	mov	DWORD PTR _bo$[ebp], eax

; 709  : 			break;

	jmp	SHORT $LN6@OrderEleme
$LN3@OrderEleme:

; 710  : 		default:
; 711  : 			// Assign to an objective out of the way
; 712  : 			bo = FindBestPosition(e, this, GRO_RESERVE, nearlist);

	mov	edx, DWORD PTR _nearlist$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?FindBestPosition@@YAPAVObjectiveClass@@PAVUnitClass@@PAVBrigadeClass@@HPAVFalconPrivateList@@@Z ; FindBestPosition
	add	esp, 16					; 00000010H
	mov	DWORD PTR _bo$[ebp], eax
$LN6@OrderEleme:

; 713  : 			break;
; 714  : 		}
; 715  : 
; 716  : 	// If we didn't find a location, then look for a reserve location
; 717  : 	if (!bo)

	cmp	DWORD PTR _bo$[ebp], 0
	jne	SHORT $LN2@OrderEleme

; 718  : 		{
; 719  : 		neworders = GORD_RESERVE;

	mov	DWORD PTR _neworders$[ebp], 0

; 720  : 		bo = FindBestPosition(e, this, GRO_RESERVE, nearlist);

	mov	edx, DWORD PTR _nearlist$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?FindBestPosition@@YAPAVObjectiveClass@@PAVUnitClass@@PAVBrigadeClass@@HPAVFalconPrivateList@@@Z ; FindBestPosition
	add	esp, 16					; 00000010H
	mov	DWORD PTR _bo$[ebp], eax
$LN2@OrderEleme:

; 721  : 		}
; 722  : 	if (bo)

	cmp	DWORD PTR _bo$[ebp], 0
	je	SHORT $LN1@OrderEleme

; 723  : 		o = bo;

	mov	edx, DWORD PTR _bo$[ebp]
	mov	DWORD PTR _o$[ebp], edx
$LN1@OrderEleme:

; 724  : 
; 725  : 	ShiAssert (o);
; 726  : 
; 727  : 	e->SetUnitOrders(neworders,o->Id());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _neworders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax

; 728  : 	e->SetAssigned(1);

	push	1
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SetAssigned@UnitClass@@QAEXH@Z		; UnitClass::SetAssigned

; 729  : 
; 730  : //	ReorganizeUnit(e);		// This needs to only reposition element e
; 731  : 	ReorganizeUnit();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+984]
	call	eax

; 732  : 
; 733  : #ifdef ROBIN_GDEBUG
; 734  : 	if (TrackingOn[GetCampID()])
; 735  : 		{
; 736  : 		GridIndex x,y;
; 737  : 		o->GetLocation(&x,&y);
; 738  : 		MonoPrint("Battalion %d ordered to %s obj %d at %d,%d.\n",e->GetCampID(),OrderStr[neworders],o->GetCampID(),x,y);
; 739  : 		}
; 740  : #endif
; 741  : 	return 1;

	mov	eax, 1

; 742  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN11@OrderEleme:
	DD	$LN4@OrderEleme
	DD	$LN5@OrderEleme
$LN10@OrderEleme:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
?OrderElement@BrigadeClass@@UAEHPAVUnitClass@@PAVFalconPrivateList@@@Z ENDP ; BrigadeClass::OrderElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_e$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
?SetUnitDivision@BrigadeClass@@UAEXH@Z PROC		; BrigadeClass::SetUnitDivision
; _this$ = ecx

; 579  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 	Unit			e;
; 581  : 
; 582  : 	SetDivision (d);

	movzx	eax, WORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDivision@GroundUnitClass@@QAEXF@Z	; GroundUnitClass::SetDivision

; 583  : 	e = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN2@SetUnitDiv:

; 584  : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN3@SetUnitDiv

; 585  : 		{
; 586  : 		e->SetUnitDivision(d);

	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+848]
	call	edx

; 587  : 		e = GetNextUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 588  : 		}

	jmp	SHORT $LN2@SetUnitDiv
$LN3@SetUnitDiv:

; 589  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitDivision@BrigadeClass@@UAEXH@Z ENDP		; BrigadeClass::SetUnitDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_stu$ = -32						; size = 4
_ftu$ = -28						; size = 4
_fr$ = -24						; size = 4
_sr$ = -20						; size = 4
tv200 = -16						; size = 4
tv198 = -12						; size = 4
_u$ = -8						; size = 4
_this$ = -4						; size = 4
_supply$ = 8						; size = 4
_fuel$ = 12						; size = 4
?SupplyUnit@BrigadeClass@@UAEXHH@Z PROC			; BrigadeClass::SupplyUnit
; _this$ = ecx

; 1168 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1169 : 	Unit		u;
; 1170 : 	float		sr,fr;
; 1171 : 	int			stu,ftu;
; 1172 : 
; 1173 : 	// KCK: Actually - This function is probably never called
; 1174 : 	// The problem is handled from within Supply.cpp -> SupplyUnit()
; 1175 : 	sr = ((float)supply / (float)GetUnitSupplyNeed(FALSE));

	cvtsi2ss xmm0, DWORD PTR _supply$[ebp]
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+536]
	movss	DWORD PTR tv198[ebp], xmm0
	call	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv198[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _sr$[ebp], xmm1

; 1176 : 	fr = ((float)fuel / (float)GetUnitFuelNeed(FALSE));

	cvtsi2ss xmm0, DWORD PTR _fuel$[ebp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+540]
	movss	DWORD PTR tv200[ebp], xmm0
	call	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv200[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _fr$[ebp], xmm1

; 1177 : 
; 1178 : 	u = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _u$[ebp], eax
$LN2@SupplyUnit:

; 1179 : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN1@SupplyUnit

; 1180 : 		{
; 1181 : 		stu = FloatToInt32(sr * u->GetUnitSupplyNeed(FALSE));

	push	0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+536]
	call	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _sr$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _stu$[ebp], eax

; 1182 : 		ftu = FloatToInt32(fr * u->GetUnitFuelNeed(FALSE));

	push	0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+540]
	call	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _fr$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _ftu$[ebp], eax

; 1183 : 		u->SupplyUnit(stu,ftu);

	mov	ecx, DWORD PTR _ftu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stu$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+544]
	call	eax

; 1184 : 		u = GetNextUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _u$[ebp], eax

; 1185 : 		}

	jmp	$LN2@SupplyUnit
$LN1@SupplyUnit:

; 1186 : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?SupplyUnit@BrigadeClass@@UAEXHH@Z ENDP			; BrigadeClass::SupplyUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_fuel$ = -12						; size = 4
_u$ = -8						; size = 4
_this$ = -4						; size = 4
_have$ = 8						; size = 4
?GetUnitFuelNeed@BrigadeClass@@UAEHH@Z PROC		; BrigadeClass::GetUnitFuelNeed
; _this$ = ecx

; 1154 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1155 : 	int			fuel = 0;

	mov	DWORD PTR _fuel$[ebp], 0

; 1156 : 	Unit		u;
; 1157 : 
; 1158 : 	u = GetFirstUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _u$[ebp], eax
$LN2@GetUnitFue:

; 1159 : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN1@GetUnitFue

; 1160 : 		{
; 1161 : 		fuel += u->GetUnitFuelNeed(have);

	mov	ecx, DWORD PTR _have$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+540]
	call	edx
	add	eax, DWORD PTR _fuel$[ebp]
	mov	DWORD PTR _fuel$[ebp], eax

; 1162 : 		u = GetNextUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _u$[ebp], eax

; 1163 : 		}

	jmp	SHORT $LN2@GetUnitFue
$LN1@GetUnitFue:

; 1164 : 	return fuel;

	mov	eax, DWORD PTR _fuel$[ebp]

; 1165 : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitFuelNeed@BrigadeClass@@UAEHH@Z ENDP		; BrigadeClass::GetUnitFuelNeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_supply$ = -12						; size = 4
_u$ = -8						; size = 4
_this$ = -4						; size = 4
_have$ = 8						; size = 4
?GetUnitSupplyNeed@BrigadeClass@@UAEHH@Z PROC		; BrigadeClass::GetUnitSupplyNeed
; _this$ = ecx

; 1140 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1141 : 	int			supply=0;

	mov	DWORD PTR _supply$[ebp], 0

; 1142 : 	Unit		u;
; 1143 : 
; 1144 : 	u = GetFirstUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _u$[ebp], eax
$LN2@GetUnitSup:

; 1145 : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN1@GetUnitSup

; 1146 : 		{
; 1147 : 		supply += u->GetUnitSupplyNeed(have);

	mov	ecx, DWORD PTR _have$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+536]
	call	edx
	add	eax, DWORD PTR _supply$[ebp]
	mov	DWORD PTR _supply$[ebp], eax

; 1148 : 		u = GetNextUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _u$[ebp], eax

; 1149 : 		}

	jmp	SHORT $LN2@GetUnitSup
$LN1@GetUnitSup:

; 1150 : 	return supply;

	mov	eax, DWORD PTR _supply$[ebp]

; 1151 : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSupplyNeed@BrigadeClass@@UAEHH@Z ENDP		; BrigadeClass::GetUnitSupplyNeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_e$ = -16						; size = 4
_this$ = -12						; size = 4
_morale$ = -8						; size = 4
_els$ = -4						; size = 4
?GetUnitMorale@BrigadeClass@@UAEHXZ PROC		; BrigadeClass::GetUnitMorale
; _this$ = ecx

; 627  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 	int			morale,els;
; 629  : 	Unit		e;
; 630  : 
; 631  : 	morale = els = 0;

	mov	DWORD PTR _els$[ebp], 0
	mov	eax, DWORD PTR _els$[ebp]
	mov	DWORD PTR _morale$[ebp], eax

; 632  : 	e = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN3@GetUnitMor:

; 633  : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetUnitMor

; 634  : 		{
; 635  : 		els++;

	mov	ecx, DWORD PTR _els$[ebp]
	add	ecx, 1
	mov	DWORD PTR _els$[ebp], ecx

; 636  : 		morale += e->GetUnitMorale();

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+780]
	call	edx
	add	eax, DWORD PTR _morale$[ebp]
	mov	DWORD PTR _morale$[ebp], eax

; 637  : 		e = GetNextUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 638  : 		}

	jmp	SHORT $LN3@GetUnitMor
$LN2@GetUnitMor:

; 639  : 	if (els)

	cmp	DWORD PTR _els$[ebp], 0
	je	SHORT $LN1@GetUnitMor

; 640  : 		morale /= els;

	mov	eax, DWORD PTR _morale$[ebp]
	cdq
	idiv	DWORD PTR _els$[ebp]
	mov	DWORD PTR _morale$[ebp], eax
$LN1@GetUnitMor:

; 641  : 	return morale;

	mov	eax, DWORD PTR _morale$[ebp]

; 642  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMorale@BrigadeClass@@UAEHXZ ENDP		; BrigadeClass::GetUnitMorale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_e$ = -16						; size = 4
_this$ = -12						; size = 4
_sup$ = -8						; size = 4
_els$ = -4						; size = 4
?GetUnitSupply@BrigadeClass@@UAEHXZ PROC		; BrigadeClass::GetUnitSupply
; _this$ = ecx

; 609  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 610  : 	int			sup,els;
; 611  : 	Unit		e;
; 612  : 
; 613  : 	sup = els = 0;

	mov	DWORD PTR _els$[ebp], 0
	mov	eax, DWORD PTR _els$[ebp]
	mov	DWORD PTR _sup$[ebp], eax

; 614  : 	e = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN3@GetUnitSup:

; 615  : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetUnitSup

; 616  : 		{
; 617  : 		els++;

	mov	ecx, DWORD PTR _els$[ebp]
	add	ecx, 1
	mov	DWORD PTR _els$[ebp], ecx

; 618  : 		sup += e->GetUnitSupply();

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+776]
	call	edx
	add	eax, DWORD PTR _sup$[ebp]
	mov	DWORD PTR _sup$[ebp], eax

; 619  : 		e = GetNextUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 620  : 		}

	jmp	SHORT $LN3@GetUnitSup
$LN2@GetUnitSup:

; 621  : 	if (els)

	cmp	DWORD PTR _els$[ebp], 0
	je	SHORT $LN1@GetUnitSup

; 622  : 		sup /= els;

	mov	eax, DWORD PTR _sup$[ebp]
	cdq
	idiv	DWORD PTR _els$[ebp]
	mov	DWORD PTR _sup$[ebp], eax
$LN1@GetUnitSup:

; 623  : 	return sup;

	mov	eax, DWORD PTR _sup$[ebp]

; 624  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSupply@BrigadeClass@@UAEHXZ ENDP		; BrigadeClass::GetUnitSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_speed$ = -12						; size = 4
_this$ = -8						; size = 4
_e$ = -4						; size = 4
?GetUnitSpeed@BrigadeClass@@UBEHXZ PROC			; BrigadeClass::GetUnitSpeed
; _this$ = ecx

; 593  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 594  : 	int			speed = 9999;

	mov	DWORD PTR _speed$[ebp], 9999		; 0000270fH

; 595  : 	Battalion   e;
; 596  : 
; 597  : 	e = (Battalion)GetFirstUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 598  : 	if (!e)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN3@GetUnitSpe

; 599  : 		return GetCruiseSpeed();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCruiseSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCruiseSpeed
	jmp	SHORT $LN5@GetUnitSpe
$LN3@GetUnitSpe:

; 600  : 	while (e){

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetUnitSpe

; 601  : 		if (speed > e->GetCruiseSpeed())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+1000]
	call	eax
	cmp	DWORD PTR _speed$[ebp], eax
	jle	SHORT $LN1@GetUnitSpe

; 602  : 			speed = e->GetCruiseSpeed();

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+1000]
	call	eax
	mov	DWORD PTR _speed$[ebp], eax
$LN1@GetUnitSpe:

; 603  : 		e = (Battalion)GetNextUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 604  : 	}

	jmp	SHORT $LN3@GetUnitSpe
$LN2@GetUnitSpe:

; 605  : 	return speed;

	mov	eax, DWORD PTR _speed$[ebp]
$LN5@GetUnitSpe:

; 606  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSpeed@BrigadeClass@@UBEHXZ ENDP			; BrigadeClass::GetUnitSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
$T2 = -188						; size = 8
$T3 = -180						; size = 8
$T4 = -172						; size = 8
$T5 = -164						; size = 8
$T6 = -156						; size = 8
$T7 = -148						; size = 8
$T8 = -140						; size = 8
$T9 = -132						; size = 8
_y$ = -124						; size = 2
_e$ = -120						; size = 4
_x$ = -116						; size = 2
_dy$ = -112						; size = 2
_dx$ = -108						; size = 2
_so$ = -104						; size = 4
_o$ = -100						; size = 4
_this$ = -96						; size = 4
_mis$10 = -92						; size = 76
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_neworders$ = 8						; size = 4
_oid$ = 12						; size = 8
?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z PROC	; BrigadeClass::SetUnitOrders
; _this$ = ecx

; 466  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 467  : 	Objective	o,so;
; 468  : 	GridIndex	x,y,dx,dy;
; 469  : 	Unit		e;
; 470  : 
; 471  : 	SetOrdered(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOrdered@UnitClass@@QAEXH@Z		; UnitClass::SetOrdered

; 472  : 	SetUnitTactic(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitTactic@UnitClass@@QAEXE@Z	; UnitClass::SetUnitTactic

; 473  : 
; 474  : 	o = FindObjective(oid);

	mov	eax, DWORD PTR _oid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _oid$[ebp]
	push	ecx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	DWORD PTR _o$[ebp], eax

; 475  : 
; 476  : #ifdef DEBUG
; 477  : 	if (gDumping)
; 478  : 		{
; 479  : 		FILE	*fp;
; 480  : 		int		id1;
; 481  : 		char	buffer[256];
; 482  : 		char	name1[80],name2[80],timestr[80];
; 483  : 
; 484  : 		sprintf(buffer,"campaign\\save\\dump\\%d.BRI",GetCampID());
; 485  : 
; 486  : 		fp = fopen(buffer,"a");
; 487  : 		if (fp)
; 488  : 			{
; 489  : 			if (o)
; 490  : 				{
; 491  : 				o->GetName(name1,79,FALSE);
; 492  : 				id1 = o->GetCampID();
; 493  : 				}
; 494  : 			else
; 495  : 				{
; 496  : 				sprintf(name1,"NONE");
; 497  : 				id1 = 0;
; 498  : 				}
; 499  : 			GetName(name2,79,FALSE);
; 500  : 			GetTimeString(TheCampaign.CurrentTime,timestr);
; 501  : 			sprintf(buffer,"%s (%d) ordered to %s %s (%d) @ %s.\n",name2,GetCampID(),OrderStr[neworders],name1,id1,timestr);
; 502  : 			fprintf(fp,buffer);
; 503  : 			fclose(fp);
; 504  : 			}
; 505  : 		else
; 506  : 			gDumping = 0;
; 507  : 		}
; 508  : #endif
; 509  : 	
; 510  : 	if (!o)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN14@SetUnitOrd

; 511  : 		return;

	jmp	$LN15@SetUnitOrd
$LN14@SetUnitOrd:

; 512  : 
; 513  : 	o->GetLocation(&dx,&dy);

	lea	edx, DWORD PTR _dy$[ebp]
	push	edx
	lea	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 514  : 	GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 515  : 	if ((x != dx || y != dy) && GetMovementType() != NoMove)

	movsx	eax, WORD PTR _x$[ebp]
	movsx	ecx, WORD PTR _dx$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN12@SetUnitOrd
	movsx	edx, WORD PTR _y$[ebp]
	movsx	eax, WORD PTR _dy$[ebp]
	cmp	edx, eax
	je	SHORT $LN13@SetUnitOrd
$LN12@SetUnitOrd:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	test	eax, eax
	je	SHORT $LN13@SetUnitOrd

; 516  : 		{
; 517  : 		SetMoving(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoving@UnitClass@@QAEXH@Z		; UnitClass::SetMoving

; 518  : 		SetUnitDestination(dx,dy);

	movzx	ecx, WORD PTR _dy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _dx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitDestination@UnitClass@@QAEXFF@Z	; UnitClass::SetUnitDestination
$LN13@SetUnitOrd:

; 519  : 		}
; 520  : 	SetTempDest(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTempDest@UnitClass@@QAEXH@Z		; UnitClass::SetTempDest

; 521  : 
; 522  : 	if (neworders == GetOrders() && oid == GetUnitObjectiveID())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOrders@GroundUnitClass@@QAEEXZ	; GroundUnitClass::GetOrders
	movzx	eax, al
	cmp	DWORD PTR _neworders$[ebp], eax
	jne	SHORT $LN11@SetUnitOrd
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+876]
	call	edx
	push	eax
	lea	ecx, DWORD PTR _oid$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@SetUnitOrd

; 523  : 		return;

	jmp	$LN15@SetUnitOrd
$LN11@SetUnitOrd:

; 524  : 	
; 525  : 	DisposeWayPoints();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisposeWayPoints@UnitClass@@QAEXXZ	; UnitClass::DisposeWayPoints

; 526  : 	SetUnitObjective(oid);

	mov	ecx, DWORD PTR _oid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _oid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+824]
	call	eax

; 527  : 	GroundUnitClass::SetUnitOrders(neworders);

	movzx	ecx, BYTE PTR _neworders$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitOrders@GroundUnitClass@@UAEXE@Z	; GroundUnitClass::SetUnitOrders

; 528  : 
; 529  : 	// Reset component ordered state
; 530  : 	e = GetFirstUnitElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+956]
	call	edx
	mov	DWORD PTR _e$[ebp], eax
$LN10@SetUnitOrd:

; 531  : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN9@SetUnitOrd

; 532  : 		{
; 533  : 		e->SetAssigned(0);

	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SetAssigned@UnitClass@@QAEXH@Z		; UnitClass::SetAssigned

; 534  : 		e = GetNextUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 535  : 		}

	jmp	SHORT $LN10@SetUnitOrd
$LN9@SetUnitOrd:

; 536  : 
; 537  : 	// If this is near the front, send a low priority request for an enemy recon patrol
; 538  : 	if (o->IsNearfront())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	je	$LN8@SetUnitOrd

; 539  : 		{
; 540  : 		MissionRequestClass		mis;

	lea	ecx, DWORD PTR _mis$10[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 541  : 		mis.tot = Camp_GetCurrentTime() + (rand()%MIN_TASK_GROUND + 30) * CampaignMinutes;

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	call	_rand
	movsx	ecx, WORD PTR ?MIN_TASK_GROUND@@3FA	; MIN_TASK_GROUND
	cdq
	idiv	ecx
	add	edx, 30					; 0000001eH
	imul	edx, 60000				; 0000ea60H
	add	esi, edx
	mov	DWORD PTR _mis$10[ebp+36], esi

; 542  : 		mis.vs = GetTeam();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	mov	BYTE PTR _mis$10[ebp+33], al

; 543  : 		mis.tot_type = TYPE_NE;

	mov	BYTE PTR _mis$10[ebp+58], 0

; 544  : 		o->GetLocation(&mis.tx,&mis.ty);

	lea	eax, DWORD PTR _mis$10[ebp+42]
	push	eax
	lea	ecx, DWORD PTR _mis$10[ebp+40]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 545  : 		mis.targetID = Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mis$10[ebp+8], ecx
	mov	DWORD PTR _mis$10[ebp+12], edx

; 546  : 		mis.mission = AMIS_RECONPATROL;

	mov	BYTE PTR _mis$10[ebp+60], 38		; 00000026H

; 547  : 		mis.roe_check = ROE_AIR_OVERFLY;

	mov	BYTE PTR _mis$10[ebp+63], 7

; 548  : 		mis.RequestEnemyMission();

	lea	ecx, DWORD PTR _mis$10[ebp]
	call	?RequestEnemyMission@MissionRequestClass@@QAEHXZ ; MissionRequestClass::RequestEnemyMission

; 549  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mis$10[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
$LN8@SetUnitOrd:

; 550  : 
; 551  : 	// Let's make sure our objective tree jives with our assignment
; 552  : 	if (o->IsSecondary())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN7@SetUnitOrd

; 553  : 		{
; 554  : 		so = o->GetObjectiveParent();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _so$[ebp], eax

; 555  : 		if (so)

	cmp	DWORD PTR _so$[ebp], 0
	je	SHORT $LN6@SetUnitOrd

; 556  : 			SetUnitPrimaryObj(so->Id());

	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+816]
	call	eax
$LN6@SetUnitOrd:

; 557  : 		SetUnitSecondaryObj(o->Id());

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+820]
	call	eax
	jmp	$LN15@SetUnitOrd
$LN7@SetUnitOrd:

; 558  : 		}
; 559  : 	else if (o->IsPrimary())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsPrimary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsPrimary
	test	eax, eax
	je	SHORT $LN4@SetUnitOrd

; 560  : 		{
; 561  : 		SetUnitPrimaryObj(o->Id());

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+816]
	call	eax

; 562  : 		SetUnitSecondaryObj(o->Id());

	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+820]
	call	eax

; 563  : 		}
; 564  : 	else

	jmp	SHORT $LN15@SetUnitOrd
$LN4@SetUnitOrd:

; 565  : 		{
; 566  : 		so = o->GetObjectiveParent();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _so$[ebp], eax

; 567  : 		if (so)

	cmp	DWORD PTR _so$[ebp], 0
	je	SHORT $LN15@SetUnitOrd

; 568  : 			{
; 569  : 			SetUnitSecondaryObj(so->Id());

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _so$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+820]
	call	eax

; 570  : 			o = so->GetObjectiveParent();

	mov	ecx, DWORD PTR _so$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _o$[ebp], eax

; 571  : 			if (o)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN15@SetUnitOrd

; 572  : 				SetUnitPrimaryObj(o->Id());

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+816]
	call	eax
$LN15@SetUnitOrd:

; 573  : 			}
; 574  : 		}
; 575  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z$0:
	lea	ecx, DWORD PTR _mis$10[ebp]
	jmp	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
__ehhandler$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-184]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetUnitOrders@BrigadeClass@@UAEXHVVU_ID@@@Z ENDP	; BrigadeClass::SetUnitOrders
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\brigade.h
;	COMDAT ?Real@BrigadeClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Real@BrigadeClass@@UAEHXZ PROC				; BrigadeClass::Real, COMDAT
; _this$ = ecx

; 56   : 	virtual int Real (void)										{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Real@BrigadeClass@@UAEHXZ ENDP				; BrigadeClass::Real
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\brigade.h
;	COMDAT ?Father@BrigadeClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Father@BrigadeClass@@UBEHXZ PROC			; BrigadeClass::Father, COMDAT
; _this$ = ecx

; 55   : 	virtual int Father() const									{ return 1; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?Father@BrigadeClass@@UBEHXZ ENDP			; BrigadeClass::Father
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_e$1 = -28						; size = 4
_o$ = -24						; size = 4
_this$ = -20						; size = 4
_x$2 = -16						; size = 2
_y$3 = -12						; size = 2
_dx$4 = -8						; size = 2
_dy$5 = -4						; size = 2
_tid$ = 8						; size = 4
?CheckTactic@BrigadeClass@@UAEHH@Z PROC			; BrigadeClass::CheckTactic
; _this$ = ecx

; 408  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	Objective	o;
; 410  : 
; 411  : 	if (tid < 1)

	cmp	DWORD PTR _tid$[ebp], 1
	jge	SHORT $LN19@CheckTacti

; 412  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN19@CheckTacti:

; 413  : 	if (haveWeaps < 0)

	cmp	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
	jge	$LN18@CheckTacti

; 414  : 		{
; 415  : 		FalconEntity	*e;
; 416  : 		GridIndex		x,y,dx,dy;
; 417  : 
; 418  : 		e = GetTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _e$1[ebp], eax

; 419  : 		if (Engaged() && !e)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN17@CheckTacti
	cmp	DWORD PTR _e$1[ebp], 0
	jne	SHORT $LN17@CheckTacti

; 420  : 			SetEngaged(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged
$LN17@CheckTacti:

; 421  : 		if (GetUnitSupply() > 20)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+776]
	call	eax
	cmp	eax, 20					; 00000014H
	jle	SHORT $LN16@CheckTacti

; 422  : 			haveWeaps = 1;

	mov	DWORD PTR ?haveWeaps@@3HA, 1		; haveWeaps

; 423  : 		else

	jmp	SHORT $LN15@CheckTacti
$LN16@CheckTacti:

; 424  : 			haveWeaps = 0;

	mov	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
$LN15@CheckTacti:

; 425  : 		GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 426  : 		o = GetUnitObjective();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	call	eax
	mov	DWORD PTR _o$[ebp], eax

; 427  : 		ourObjOwner = 0;

	mov	DWORD PTR ?ourObjOwner@@3HA, 0		; ourObjOwner

; 428  : 		if (o && o->GetTeam() == GetTeam())

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN14@CheckTacti
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN14@CheckTacti

; 429  : 			ourObjOwner = 1;

	mov	DWORD PTR ?ourObjOwner@@3HA, 1		; ourObjOwner
$LN14@CheckTacti:

; 430  : 		if (o)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN13@CheckTacti

; 431  : 			o->GetLocation(&dx,&dy);

	lea	edx, DWORD PTR _dy$5[ebp]
	push	edx
	lea	eax, DWORD PTR _dx$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 432  : 		else

	jmp	SHORT $LN12@CheckTacti
$LN13@CheckTacti:

; 433  : 			GetUnitDestination(&dx,&dy);

	lea	ecx, DWORD PTR _dy$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _dx$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitDestination@UnitClass@@QAEXPAF0@Z ; UnitClass::GetUnitDestination
$LN12@CheckTacti:

; 434  : 		ourObjDist = FloatToInt32(Distance(x,y,dx,dy));

	movzx	eax, WORD PTR _dy$5[ebp]
	push	eax
	movzx	ecx, WORD PTR _dx$4[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$3[ebp]
	push	edx
	movzx	eax, WORD PTR _x$2[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR ?ourObjDist@@3HA, eax		; ourObjDist
$LN18@CheckTacti:

; 435  : 		}
; 436  : 	if (!CheckUnitType(tid, GetDomain(), GetType()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	push	edx
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckUnitType@@YAHHHH@Z		; CheckUnitType
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN11@CheckTacti

; 437  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN11@CheckTacti:

; 438  : 	if (!CheckTeam(tid,GetTeam()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckTeam@@YAHHH@Z			; CheckTeam
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@CheckTacti

; 439  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN10@CheckTacti:

; 440  : 	if (!CheckEngaged(tid,Engaged()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	push	eax
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckEngaged@@YAHHH@Z			; CheckEngaged
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@CheckTacti

; 441  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN9@CheckTacti:

; 442  : 	if (!CheckCombat(tid,Combat()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Combat@UnitClass@@QBEHXZ		; UnitClass::Combat
	push	eax
	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?CheckCombat@@YAHHH@Z			; CheckCombat
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CheckTacti

; 443  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN8@CheckTacti:

; 444  : 	if (!CheckLosses(tid,Losses()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Losses@UnitClass@@QBEHXZ		; UnitClass::Losses
	push	eax
	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckLosses@@YAHHH@Z			; CheckLosses
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CheckTacti

; 445  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN7@CheckTacti:

; 446  : 	if (!CheckRetreating(tid,Retreating()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Retreating@UnitClass@@QBEHXZ		; UnitClass::Retreating
	push	eax
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckRetreating@@YAHHH@Z		; CheckRetreating
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@CheckTacti

; 447  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN6@CheckTacti:

; 448  : 	if (!CheckAction(tid,GetUnitOrders()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+880]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?CheckAction@@YAHHH@Z			; CheckAction
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CheckTacti

; 449  : 		return 0;

	xor	eax, eax
	jmp	$LN20@CheckTacti
$LN5@CheckTacti:

; 450  : 	if (!CheckOwned(tid,ourObjOwner))

	mov	edx, DWORD PTR ?ourObjOwner@@3HA	; ourObjOwner
	push	edx
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckOwned@@YAHHH@Z			; CheckOwned
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@CheckTacti

; 451  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN20@CheckTacti
$LN4@CheckTacti:

; 452  : 	if (TeamInfo[GetTeam()]->GetGroundAction()->actionType != GACTION_OFFENSIVE && !CheckRole(tid,0))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	edx, BYTE PTR [eax+16]
	cmp	edx, 4
	je	SHORT $LN3@CheckTacti
	push	0
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckRole@@YAHHH@Z			; CheckRole
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@CheckTacti

; 453  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN20@CheckTacti
$LN3@CheckTacti:

; 454  : 	if (!CheckRange(tid,ourObjDist))

	mov	ecx, DWORD PTR ?ourObjDist@@3HA		; ourObjDist
	push	ecx
	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckRange@@YAHHH@Z			; CheckRange
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@CheckTacti

; 455  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN20@CheckTacti
$LN2@CheckTacti:

; 456  : //	if (!CheckDistToFront(tid,ourFrontDist))
; 457  : //		return 0;
; 458  : 	if (!CheckStatus(tid,Broken()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	push	eax
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckStatus@@YAHHH@Z			; CheckStatus
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@CheckTacti

; 459  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN20@CheckTacti
$LN1@CheckTacti:

; 460  : //	if (!CheckOdds(tid,odds))
; 461  : //		return 0;
; 462  : 	return GetTacticPriority(tid);

	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?GetTacticPriority@@YAHH@Z		; GetTacticPriority
	add	esp, 4
$LN20@CheckTacti:

; 463  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckTactic@BrigadeClass@@UAEHH@Z ENDP			; BrigadeClass::CheckTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 8
_priority$ = -16					; size = 4
_o$2 = -12						; size = 4
_tid$ = -8						; size = 4
_this$ = -4						; size = 4
?ChooseTactic@BrigadeClass@@UAEHXZ PROC			; BrigadeClass::ChooseTactic
; _this$ = ecx

; 366  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	int			priority=0,tid;

	mov	DWORD PTR _priority$[ebp], 0

; 368  : 
; 369  : 	haveWeaps = -1;

	mov	DWORD PTR ?haveWeaps@@3HA, -1		; haveWeaps

; 370  : 	tid = GTACTIC_BRIG_SECURE;

	mov	DWORD PTR _tid$[ebp], 31		; 0000001fH
$LN8@ChooseTact:

; 371  : 	while (tid < FirstGroundTactic + GroundTactics && !priority)

	movsx	eax, WORD PTR ?FirstGroundTactic@@3FA	; FirstGroundTactic
	movsx	ecx, WORD PTR ?GroundTactics@@3FA	; GroundTactics
	add	eax, ecx
	cmp	DWORD PTR _tid$[ebp], eax
	jge	SHORT $LN7@ChooseTact
	cmp	DWORD PTR _priority$[ebp], 0
	jne	SHORT $LN7@ChooseTact

; 372  : 		{
; 373  : 		priority = CheckTactic(tid);

	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+500]
	call	eax
	mov	DWORD PTR _priority$[ebp], eax

; 374  : 		if (!priority)

	cmp	DWORD PTR _priority$[ebp], 0
	jne	SHORT $LN6@ChooseTact

; 375  : 			tid++;

	mov	ecx, DWORD PTR _tid$[ebp]
	add	ecx, 1
	mov	DWORD PTR _tid$[ebp], ecx
$LN6@ChooseTact:

; 376  : 		}

	jmp	SHORT $LN8@ChooseTact
$LN7@ChooseTact:

; 377  : 
; 378  : 	// Make Adjustments due to tactic
; 379  : 	if (tid == GTACTIC_BRIG_WITHDRAW)

	cmp	DWORD PTR _tid$[ebp], 34		; 00000022H
	jne	SHORT $LN5@ChooseTact

; 380  : 		{
; 381  : 		Objective	o;
; 382  : 		o = GetUnitObjective();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+864]
	call	edx
	mov	DWORD PTR _o$2[ebp], eax

; 383  : 		if (!o || !o->IsSecondary())

	cmp	DWORD PTR _o$2[ebp], 0
	je	SHORT $LN3@ChooseTact
	mov	ecx, DWORD PTR _o$2[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	jne	SHORT $LN5@ChooseTact
$LN3@ChooseTact:

; 384  : 			{
; 385  : 			// Find a retreat path
; 386  : 			o = FindRetreatPath(this,3,FIND_SECONDARYONLY);

	push	512					; 00000200H
	push	3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?FindRetreatPath@@YAPAVObjectiveClass@@PAVUnitClass@@HH@Z ; FindRetreatPath
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$2[ebp], eax

; 387  : 			if (o)

	cmp	DWORD PTR _o$2[ebp], 0
	je	SHORT $LN2@ChooseTact

; 388  : 				SetUnitOrders(GORD_RESERVE,o->Id());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$2[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN2@ChooseTact:

; 389  : 			// KCK: This will cause the whole brigade to surrender if the first element get's 
; 390  : 			// cutoff and we're withdrawing. So I'm axing it. Instead, we'll just wait until
; 391  : 			// the element surrenders.
; 392  : //			else
; 393  : //				CheckForSurrender();
; 394  : 			SetOrdered(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOrdered@UnitClass@@QAEXH@Z		; UnitClass::SetOrdered
$LN5@ChooseTact:

; 395  : 			}
; 396  : 		}
; 397  : 	if (GetUnitTactic() != tid)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitTactic@UnitClass@@QBEHXZ	; UnitClass::GetUnitTactic
	cmp	eax, DWORD PTR _tid$[ebp]
	je	SHORT $LN1@ChooseTact

; 398  : 		SetOrdered(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOrdered@UnitClass@@QAEXH@Z		; UnitClass::SetOrdered
$LN1@ChooseTact:

; 399  : 	SetUnitTactic(tid);

	movzx	ecx, BYTE PTR _tid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitTactic@UnitClass@@QAEXE@Z	; UnitClass::SetUnitTactic

; 400  : #ifdef ROBIN_GDEBUG
; 401  : 	if (TrackingOn[GetCampID()])
; 402  : 		MonoPrint("Brigade %d (%s) chose tactic %s.\n",GetCampID(),OrderStr[GetUnitOrders()],TacticsTable[tid].name);
; 403  : #endif
; 404  : 	return tid;

	mov	eax, DWORD PTR _tid$[ebp]

; 405  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ChooseTactic@BrigadeClass@@UAEHXZ ENDP			; BrigadeClass::ChooseTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
_zone$ = 12						; size = 4
_range$ = 16						; size = 4
?Reaction@BrigadeClass@@UAEHPAVCampBaseClass@@HM@Z PROC	; BrigadeClass::Reaction
; _this$ = ecx

; 361  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	return 0;

	xor	eax, eax

; 363  : 	} 

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Reaction@BrigadeClass@@UAEHPAVCampBaseClass@@HM@Z ENDP	; BrigadeClass::Reaction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 8
$T2 = -64						; size = 8
tv395 = -56						; size = 4
$T3 = -52						; size = 4
_o$4 = -48						; size = 4
_role$ = -44						; size = 4
$T5 = -40						; size = 4
_me$ = -36						; size = 4
_be$ = -32						; size = 4
_te$ = -28						; size = 4
_o$ = -24						; size = 4
_nearlist$ = -20					; size = 4
_en$ = -16						; size = 4
_toorder$ = -12						; size = 4
_e$ = -8						; size = 4
_this$ = -4						; size = 4
_time$ = 8						; size = 4
?MoveUnit@BrigadeClass@@UAEHK@Z PROC			; BrigadeClass::MoveUnit
; _this$ = ecx

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 	Unit			e;
; 216  : 	int				en,me,be,te,toorder,role;
; 217  : 	F4PFList		nearlist = NULL;

	mov	DWORD PTR _nearlist$[ebp], 0

; 218  : 	Objective		o;
; 219  : 	
; 220  : 	// Check if we have a valid objective
; 221  : 	o = GetUnitObjective();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	call	eax
	mov	DWORD PTR _o$[ebp], eax

; 222  : 	if (!o || !TeamInfo[GetTeam()]->gtm->IsValidObjective(GetOrders(),o))

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN41@MoveUnit
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOrders@GroundUnitClass@@QAEEXZ	; GroundUnitClass::GetOrders
	movzx	edx, al
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+880]
	call	?IsValidObjective@GroundTaskingManagerClass@@QAEHHPAVObjectiveClass@@@Z ; GroundTaskingManagerClass::IsValidObjective
	test	eax, eax
	jne	$LN42@MoveUnit
$LN41@MoveUnit:

; 223  : 		{
; 224  : 		if (o && (GetOrders() == GORD_CAPTURE || GetOrders() == GORD_ASSAULT || GetOrders() == GORD_AIRBORNE))

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN40@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOrders@GroundUnitClass@@QAEEXZ	; GroundUnitClass::GetOrders
	movzx	eax, al
	cmp	eax, 1
	je	SHORT $LN39@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOrders@GroundUnitClass@@QAEEXZ	; GroundUnitClass::GetOrders
	movzx	ecx, al
	cmp	ecx, 3
	je	SHORT $LN39@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOrders@GroundUnitClass@@QAEEXZ	; GroundUnitClass::GetOrders
	movzx	edx, al
	cmp	edx, 4
	jne	SHORT $LN40@MoveUnit
$LN39@MoveUnit:

; 225  : 			SetUnitOrders(GORD_SECURE,o->Id());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax

; 226  : 		else

	jmp	SHORT $LN42@MoveUnit
$LN40@MoveUnit:

; 227  : 			{
; 228  : 			o = FindRetreatPath(this,3,FIND_SECONDARYONLY);

	push	512					; 00000200H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?FindRetreatPath@@YAPAVObjectiveClass@@PAVUnitClass@@HH@Z ; FindRetreatPath
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$[ebp], eax

; 229  : 			if (!o)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN37@MoveUnit

; 230  : 				{
; 231  : 				// We've been cut off - surrender?
; 232  : 				CheckForSurrender();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+936]
	call	edx

; 233  : 				return -1;

	or	eax, -1
	jmp	$LN43@MoveUnit
$LN37@MoveUnit:

; 234  : 				}
; 235  : 			SetUnitOrders(GORD_RESERVE,o->Id());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN42@MoveUnit:

; 236  : 			}
; 237  : 		}
; 238  : 
; 239  : 	// Check if we have elements requesting orders
; 240  : 	role = GetUnitCurrentRole();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	mov	DWORD PTR _role$[ebp], eax

; 241  : 	toorder = te = 0;

	mov	DWORD PTR _te$[ebp], 0
	mov	ecx, DWORD PTR _te$[ebp]
	mov	DWORD PTR _toorder$[ebp], ecx

; 242  : 	e = GetFirstUnitElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+956]
	call	edx
	mov	DWORD PTR _e$[ebp], eax
$LN36@MoveUnit:

; 243  : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN35@MoveUnit

; 244  : 		{
; 245  : 		te++;

	mov	eax, DWORD PTR _te$[ebp]
	add	eax, 1
	mov	DWORD PTR _te$[ebp], eax

; 246  : 		if (!e->Assigned())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Assigned@UnitClass@@QBEHXZ		; UnitClass::Assigned
	test	eax, eax
	jne	SHORT $LN34@MoveUnit

; 247  : 			toorder++;

	mov	ecx, DWORD PTR _toorder$[ebp]
	add	ecx, 1
	mov	DWORD PTR _toorder$[ebp], ecx
$LN34@MoveUnit:

; 248  : 		e = GetNextUnitElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+960]
	call	edx
	mov	DWORD PTR _e$[ebp], eax

; 249  : 		}

	jmp	SHORT $LN36@MoveUnit
$LN35@MoveUnit:

; 250  : 	if (!te)

	cmp	DWORD PTR _te$[ebp], 0
	jne	SHORT $LN33@MoveUnit

; 251  : 		{
; 252  : 		KillUnit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 253  : 		return 0;

	xor	eax, eax
	jmp	$LN43@MoveUnit
$LN33@MoveUnit:

; 254  : 		}
; 255  : 
; 256  : 	// Support brigades just update their position and return
; 257  : 	if (FindUnitSupportRole(this))

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?FindUnitSupportRole@@YAHPAVUnitClass@@@Z ; FindUnitSupportRole
	add	esp, 4
	test	eax, eax
	je	SHORT $LN32@MoveUnit

; 258  : 		{
; 259  : 		UpdateParentStatistics();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+988]
	call	eax

; 260  : 		return 0;

	xor	eax, eax
	jmp	$LN43@MoveUnit
$LN32@MoveUnit:

; 261  : 		}
; 262  : 
; 263  : 	// Check to make sure our orders are still valid.
; 264  : //	if (!CheckTactic(GetUnitTactic()))
; 265  : 	ChooseTactic();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+496]
	call	eax

; 266  : 
; 267  : 	// Upon new orders, reset our element's ordered flags && collect list of possible positions
; 268  : 	if (Ordered() || toorder)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ordered@UnitClass@@QBEHXZ		; UnitClass::Ordered
	test	eax, eax
	jne	SHORT $LN30@MoveUnit
	cmp	DWORD PTR _toorder$[ebp], 0
	je	$LN31@MoveUnit
$LN30@MoveUnit:

; 269  : 		{
; 270  : 		Objective	o;
; 271  : 
; 272  : 		o = GetUnitObjective();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	call	eax
	mov	DWORD PTR _o$4[ebp], eax

; 273  : 		if (role == GRO_ATTACK)

	cmp	DWORD PTR _role$[ebp], 1
	jne	SHORT $LN29@MoveUnit

; 274  : 			nearlist = GetChildObjectives(o, MAXLINKS_FROM_SO_OFFENSIVE, FIND_STANDARDONLY);

	push	1024					; 00000400H
	movsx	ecx, WORD PTR ?MAXLINKS_FROM_SO_OFFENSIVE@@3FA ; MAXLINKS_FROM_SO_OFFENSIVE
	push	ecx
	mov	edx, DWORD PTR _o$4[ebp]
	push	edx
	call	?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z ; GetChildObjectives
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nearlist$[ebp], eax

; 275  : 		else

	jmp	SHORT $LN28@MoveUnit
$LN29@MoveUnit:

; 276  : 			nearlist = GetChildObjectives(o, MAXLINKS_FROM_SO_DEFENSIVE, FIND_STANDARDONLY);

	push	1024					; 00000400H
	movsx	eax, WORD PTR ?MAXLINKS_FROM_SO_DEFENSIVE@@3FA ; MAXLINKS_FROM_SO_DEFENSIVE
	push	eax
	mov	ecx, DWORD PTR _o$4[ebp]
	push	ecx
	call	?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z ; GetChildObjectives
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nearlist$[ebp], eax
$LN28@MoveUnit:

; 277  : 
; 278  : 		// Eliminate any objectives we've previously been unable to find a path to
; 279  : 
; 280  : 		// Clear all but attack orders (once we attack, we only stop when we break)
; 281  : 		e = GetFirstUnitElement();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+956]
	call	edx
	mov	DWORD PTR _e$[ebp], eax
$LN27@MoveUnit:

; 282  : 		while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN22@MoveUnit

; 283  : 			{
; 284  : 			if (!e->Broken() && !e->Engaged() && e->Assigned() && e->GetUnitCurrentRole() != GRO_ATTACK)

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	jne	SHORT $LN25@MoveUnit
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	jne	SHORT $LN25@MoveUnit
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Assigned@UnitClass@@QBEHXZ		; UnitClass::Assigned
	test	eax, eax
	je	SHORT $LN25@MoveUnit
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 1
	je	SHORT $LN25@MoveUnit

; 285  : 				{
; 286  : 				e->SetAssigned(0);

	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SetAssigned@UnitClass@@QAEXH@Z		; UnitClass::SetAssigned

; 287  : 				toorder++;

	mov	ecx, DWORD PTR _toorder$[ebp]
	add	ecx, 1
	mov	DWORD PTR _toorder$[ebp], ecx
	jmp	SHORT $LN24@MoveUnit
$LN25@MoveUnit:

; 288  : 				}
; 289  : 			else if (e->Assigned() && !OnValidObjective(e, e->GetUnitCurrentRole(), nearlist))

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Assigned@UnitClass@@QBEHXZ		; UnitClass::Assigned
	test	eax, eax
	je	SHORT $LN24@MoveUnit
	mov	edx, DWORD PTR _nearlist$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?OnValidObjective@@YAHPAVUnitClass@@HPAVFalconPrivateList@@@Z ; OnValidObjective
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN24@MoveUnit

; 290  : 				{
; 291  : 				e->SetAssigned(0);

	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SetAssigned@UnitClass@@QAEXH@Z		; UnitClass::SetAssigned

; 292  : 				toorder++;

	mov	edx, DWORD PTR _toorder$[ebp]
	add	edx, 1
	mov	DWORD PTR _toorder$[ebp], edx
$LN24@MoveUnit:

; 293  : 				}
; 294  : 			e = GetNextUnitElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 295  : 			}

	jmp	$LN27@MoveUnit
$LN22@MoveUnit:

; 296  : 
; 297  : 		// Loop in here until all our elements are assigned
; 298  : 		while (toorder)

	cmp	DWORD PTR _toorder$[ebp], 0
	je	$LN21@MoveUnit

; 299  : 			{
; 300  : 			// Order elements
; 301  : 			e = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN20@MoveUnit:

; 302  : 			while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN19@MoveUnit

; 303  : 				{
; 304  : 				if (!e->Assigned())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Assigned@UnitClass@@QBEHXZ		; UnitClass::Assigned
	test	eax, eax
	jne	SHORT $LN18@MoveUnit

; 305  : 					OrderElement(e, nearlist);

	mov	ecx, DWORD PTR _nearlist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1000]
	call	eax
$LN18@MoveUnit:

; 306  : 				e = GetNextUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+960]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 307  : 				}

	jmp	SHORT $LN20@MoveUnit
$LN19@MoveUnit:

; 308  : 			// Check for pre-empted elements
; 309  : 			for (en=toorder=0; en<te; en++)

	mov	DWORD PTR _toorder$[ebp], 0
	mov	ecx, DWORD PTR _toorder$[ebp]
	mov	DWORD PTR _en$[ebp], ecx
	jmp	SHORT $LN17@MoveUnit
$LN16@MoveUnit:
	mov	edx, DWORD PTR _en$[ebp]
	add	edx, 1
	mov	DWORD PTR _en$[ebp], edx
$LN17@MoveUnit:
	mov	eax, DWORD PTR _en$[ebp]
	cmp	eax, DWORD PTR _te$[ebp]
	jge	SHORT $LN15@MoveUnit

; 310  : 				{
; 311  : 				e = GetUnitElement(en);

	mov	ecx, DWORD PTR _en$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+888]
	call	edx
	mov	DWORD PTR _e$[ebp], eax

; 312  : 				if (e && !e->Assigned())

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN14@MoveUnit
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Assigned@UnitClass@@QBEHXZ		; UnitClass::Assigned
	test	eax, eax
	jne	SHORT $LN14@MoveUnit

; 313  : 					toorder++;

	mov	eax, DWORD PTR _toorder$[ebp]
	add	eax, 1
	mov	DWORD PTR _toorder$[ebp], eax
$LN14@MoveUnit:

; 314  : 				}

	jmp	SHORT $LN16@MoveUnit
$LN15@MoveUnit:

; 315  : 			}

	jmp	$LN22@MoveUnit
$LN21@MoveUnit:

; 316  : 
; 317  : 		if (nearlist)

	cmp	DWORD PTR _nearlist$[ebp], 0
	je	SHORT $LN31@MoveUnit

; 318  : 			{
; 319  : 			nearlist->Unregister();

	mov	ecx, DWORD PTR _nearlist$[ebp]
	call	?Unregister@VuCollection@@QAEXXZ	; VuCollection::Unregister

; 320  : 			delete nearlist;

	mov	ecx, DWORD PTR _nearlist$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN45@MoveUnit
	push	1
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv395[ebp], eax
	jmp	SHORT $LN46@MoveUnit
$LN45@MoveUnit:
	mov	DWORD PTR tv395[ebp], 0
$LN46@MoveUnit:

; 321  : 			nearlist = NULL;

	mov	DWORD PTR _nearlist$[ebp], 0
$LN31@MoveUnit:

; 322  : 			}
; 323  : 		}
; 324  : 
; 325  : 	// Make sure at least somebody is doing our job
; 326  : 	for (me=be=en=0; en<te; en++)

	mov	DWORD PTR _en$[ebp], 0
	mov	ecx, DWORD PTR _en$[ebp]
	mov	DWORD PTR _be$[ebp], ecx
	mov	edx, DWORD PTR _be$[ebp]
	mov	DWORD PTR _me$[ebp], edx
	jmp	SHORT $LN12@MoveUnit
$LN11@MoveUnit:
	mov	eax, DWORD PTR _en$[ebp]
	add	eax, 1
	mov	DWORD PTR _en$[ebp], eax
$LN12@MoveUnit:
	mov	ecx, DWORD PTR _en$[ebp]
	cmp	ecx, DWORD PTR _te$[ebp]
	jge	SHORT $LN10@MoveUnit

; 327  : 	{
; 328  : 		e = GetUnitElement(en);

	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+888]
	call	eax
	mov	DWORD PTR _e$[ebp], eax

; 329  : 		if (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN9@MoveUnit

; 330  : 		{
; 331  : 			if (e->Broken())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	je	SHORT $LN8@MoveUnit

; 332  : 			{
; 333  : 				be++;

	mov	ecx, DWORD PTR _be$[ebp]
	add	ecx, 1
	mov	DWORD PTR _be$[ebp], ecx
	jmp	SHORT $LN9@MoveUnit
$LN8@MoveUnit:

; 334  : 			}
; 335  : 			else if (e->GetUnitCurrentRole() == role)

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+672]
	call	edx
	cmp	eax, DWORD PTR _role$[ebp]
	jne	SHORT $LN9@MoveUnit

; 336  : 			{
; 337  : 				me++;

	mov	eax, DWORD PTR _me$[ebp]
	add	eax, 1
	mov	DWORD PTR _me$[ebp], eax
$LN9@MoveUnit:

; 338  : 			}
; 339  : 		}
; 340  : 	}

	jmp	SHORT $LN11@MoveUnit
$LN10@MoveUnit:

; 341  : 
; 342  : 	// Check for broken status
; 343  : 	if (be > me)

	mov	ecx, DWORD PTR _be$[ebp]
	cmp	ecx, DWORD PTR _me$[ebp]
	jle	SHORT $LN5@MoveUnit

; 344  : 		SetBroken(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBroken@UnitClass@@QAEXH@Z		; UnitClass::SetBroken
$LN5@MoveUnit:

; 345  : 
; 346  : 	// Check if we're still valid to perform our orders
; 347  : 	if (!me)

	cmp	DWORD PTR _me$[ebp], 0
	jne	SHORT $LN4@MoveUnit

; 348  : 		{
; 349  : 		if (role == GRO_ATTACK)

	cmp	DWORD PTR _role$[ebp], 1
	jne	SHORT $LN3@MoveUnit

; 350  : 			SetOrders (GORD_DEFEND);				// Switch to defense orders

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOrders@GroundUnitClass@@QAEXE@Z	; GroundUnitClass::SetOrders
	jmp	SHORT $LN4@MoveUnit
$LN3@MoveUnit:

; 351  : 		else if (GetOrders() != GORD_RESERVE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOrders@GroundUnitClass@@QAEEXZ	; GroundUnitClass::GetOrders
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@MoveUnit

; 352  : 			SetUnitObjective(FalconNullId);		// We'll pick a reserve location next time through

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+824]
	call	edx
$LN4@MoveUnit:

; 353  : 		}
; 354  : 
; 355  : 	UpdateParentStatistics();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+988]
	call	eax

; 356  : 
; 357  : 	return 0;

	xor	eax, eax
$LN43@MoveUnit:

; 358  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?MoveUnit@BrigadeClass@@UAEHK@Z ENDP			; BrigadeClass::MoveUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 2
?SetFullStrength@BrigadeClass@@QAEXF@Z PROC		; BrigadeClass::SetFullStrength
; _this$ = ecx

; 1227 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1228 : 	fullstrength = s;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _s$[ebp]
	mov	WORD PTR [eax+336], cx

; 1229 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFullStrength@BrigadeClass@@QAEXF@Z ENDP		; BrigadeClass::SetFullStrength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\brigade.h
;	COMDAT ?IsBrigade@BrigadeClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@BrigadeClass@@UAEHXZ PROC			; BrigadeClass::IsBrigade, COMDAT
; _this$ = ecx

; 37   : 	virtual int IsBrigade (void)								{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@BrigadeClass@@UAEHXZ ENDP			; BrigadeClass::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@BrigadeClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC	; BrigadeClass::Handle
; _this$ = ecx

; 209  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 	return (GroundUnitClass::Handle(event));

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@GroundUnitClass@@UAEHPAVVuFullUpdateEvent@@@Z ; GroundUnitClass::Handle

; 211  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@BrigadeClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP	; BrigadeClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@BrigadeClass@@UAEHPAPAE@Z PROC			; BrigadeClass::Save
; _this$ = ecx

; 187  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 	GroundUnitClass::Save(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@GroundUnitClass@@UAEHPAPAE@Z	; GroundUnitClass::Save

; 189  : 	if (save_log)

	cmp	DWORD PTR ?save_log@@3PAU_iobuf@@A, 0	; save_log
	je	SHORT $LN1@Save

; 190  : 	{
; 191  : 		fprintf (save_log, "%08x BrigadeClass ", *stream - start_save_stream);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR ?start_save_stream@@3HA	; start_save_stream
	push	edx
	push	OFFSET ??_C@_0BD@LALKOCKO@?$CF08x?5BrigadeClass?5?$AA@
	mov	eax, DWORD PTR ?save_log@@3PAU_iobuf@@A	; save_log
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 192  : 		fflush (save_log);

	mov	ecx, DWORD PTR ?save_log@@3PAU_iobuf@@A	; save_log
	push	ecx
	call	_fflush
	add	esp, 4
$LN1@Save:

; 193  : 	}
; 194  : 
; 195  : #ifdef CAMPTOOL
; 196  : 	if (gRenameIds)
; 197  : 		{
; 198  : 		for (int i=0; i<elements; i++)
; 199  : 			element[i].num_ = RenameTable[element[i].num_];
; 200  : 		}
; 201  : #endif
; 202  : 	memcpy(*stream, &elements, sizeof(uchar));						*stream += sizeof(uchar);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 292				; 00000124H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 203  : 	memcpy(*stream, element, sizeof(VU_ID)*elements);				*stream += sizeof(VU_ID)*elements;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 204  : 	return GroundUnitClass::SaveSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@GroundUnitClass@@UAEHXZ	; GroundUnitClass::SaveSize

; 205  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@BrigadeClass@@UAEHPAPAE@Z ENDP			; BrigadeClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveSize@BrigadeClass@@UAEHXZ PROC			; BrigadeClass::SaveSize
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : #if 0
; 170  : #ifdef DEBUG
; 171  : 	int			i;
; 172  : 	Unit		e;
; 173  : 	for (i=0; i<elements; i++)
; 174  : 		{
; 175  : 		e = GetUnitElement(i);
; 176  : 		if (!e)
; 177  : 			RemoveChild(element[i]);
; 178  : 		}
; 179  : #endif
; 180  : #endif
; 181  : 	return GroundUnitClass::SaveSize() 
; 182  : 		+ sizeof(uchar)
; 183  : 		+ sizeof(VU_ID) * elements;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@GroundUnitClass@@UAEHXZ	; GroundUnitClass::SaveSize
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	lea	eax, DWORD PTR [eax+edx*8+1]

; 184  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@BrigadeClass@@UAEHXZ ENDP			; BrigadeClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BrigadeClass@@UAE@XZ PROC				; BrigadeClass::~BrigadeClass
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BrigadeClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BrigadeClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 163  : 	if (IsAwake())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN2@BrigadeCla

; 164  : 		Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sleep@UnitClass@@UAEHXZ		; UnitClass::Sleep
$LN2@BrigadeCla:

; 165  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GroundUnitClass@@UAE@XZ		; GroundUnitClass::~GroundUnitClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1BrigadeClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1GroundUnitClass@@UAE@XZ		; GroundUnitClass::~GroundUnitClass
__ehhandler$??1BrigadeClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BrigadeClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BrigadeClass@@UAE@XZ ENDP				; BrigadeClass::~BrigadeClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0BrigadeClass@@QAE@PAPAEPAJ@Z PROC			; BrigadeClass::BrigadeClass
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BrigadeClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GroundUnitClass@@QAE@PAPAEPAJ@Z	; GroundUnitClass::GroundUnitClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BrigadeClass@@6B@
	push	OFFSET ??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	push	5
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 137  : 	if (load_log)

	cmp	DWORD PTR ?load_log@@3PAU_iobuf@@A, 0	; load_log
	je	SHORT $LN1@BrigadeCla

; 138  : 	{
; 139  : 		fprintf (load_log, "%08x BrigadeClass ", *stream - start_load_stream);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR ?start_load_stream@@3HA	; start_load_stream
	push	edx
	push	OFFSET ??_C@_0BD@LALKOCKO@?$CF08x?5BrigadeClass?5?$AA@
	mov	eax, DWORD PTR ?load_log@@3PAU_iobuf@@A	; load_log
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 140  : 		fflush (load_log);

	mov	ecx, DWORD PTR ?load_log@@3PAU_iobuf@@A	; load_log
	push	ecx
	call	_fflush
	add	esp, 4
$LN1@BrigadeCla:

; 141  : 	}
; 142  : 
; 143  : 	memset (element,0,sizeof(VU_ID)*MAX_UNIT_CHILDREN);

	push	40					; 00000028H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 296				; 00000128H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 144  : 	memcpychk(&elements, stream, sizeof(uchar), rem);			

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 292				; 00000124H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 145  : 	memcpychk(element, stream, sizeof(VU_ID)*elements, rem);	

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	shl	edx, 3
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 146  : #ifdef DEBUG
; 147  : 	for (int i=0; i<elements; i++)
; 148  : 		element[i].num_ &= 0x0000ffff;
; 149  : #endif
; 150  : 	c_element = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+293], 0

; 151  : 	fullstrength = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+336], ax

; 152  : 
; 153  : #ifdef DEBUG
; 154  : 	char	buffer[256];
; 155  : 
; 156  : 	sprintf(buffer,"campaign\\save\\dump\\%d.BRI",GetCampID());
; 157  : 	unlink(buffer);
; 158  : #endif
; 159  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BrigadeClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1GroundUnitClass@@UAE@XZ		; GroundUnitClass::~GroundUnitClass
__ehhandler$??0BrigadeClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BrigadeClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BrigadeClass@@QAE@PAPAEPAJ@Z ENDP			; BrigadeClass::BrigadeClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\brigade.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 2
??0BrigadeClass@@QAE@G@Z PROC				; BrigadeClass::BrigadeClass
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BrigadeClass@@QAE@G@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?NonVolatileNS@@3VIdNamespace@@A	; NonVolatileNS
	call	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z ; GetIdFromNamespace
	add	esp, 4
	push	eax
	movzx	eax, WORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GroundUnitClass@@QAE@GK@Z		; GroundUnitClass::GroundUnitClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BrigadeClass@@6B@
	push	OFFSET ??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	push	5
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 296				; 00000128H
	push	edx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 128  : 	elements = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+292], 0

; 129  : 	c_element = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+293], 0

; 130  : 	memset (element,0,sizeof(VU_ID)*MAX_UNIT_CHILDREN);

	push	40					; 00000028H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 296				; 00000128H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 131  : 	fullstrength = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+336], ax

; 132  : 	SetParent(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@UnitClass@@QAEXH@Z		; UnitClass::SetParent

; 133  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BrigadeClass@@QAE@G@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1GroundUnitClass@@UAE@XZ		; GroundUnitClass::~GroundUnitClass
__ehhandler$??0BrigadeClass@@QAE@G@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BrigadeClass@@QAE@G@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BrigadeClass@@QAE@G@Z ENDP				; BrigadeClass::BrigadeClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitObjectiveID@GroundUnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitObjectiveID@GroundUnitClass@@UAE?AVVU_ID@@XZ PROC ; GroundUnitClass::GetUnitObjectiveID, COMDAT
; _this$ = ecx

; 148  : 	VU_ID GetUnitObjectiveID (void)					{ return aobj; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	edx, DWORD PTR [eax+284]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitObjectiveID@GroundUnitClass@@UAE?AVVU_ID@@XZ ENDP ; GroundUnitClass::GetUnitObjectiveID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitSecondaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitSecondaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ PROC ; GroundUnitClass::GetUnitSecondaryObjID, COMDAT
; _this$ = ecx

; 147  : 	VU_ID GetUnitSecondaryObjID (void)				{ return sobj; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	edx, DWORD PTR [eax+276]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSecondaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ ENDP ; GroundUnitClass::GetUnitSecondaryObjID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitPrimaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitPrimaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ PROC ; GroundUnitClass::GetUnitPrimaryObjID, COMDAT
; _this$ = ecx

; 146  : 	VU_ID GetUnitPrimaryObjID (void)				{ return pobj; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	edx, DWORD PTR [eax+268]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitPrimaryObjID@GroundUnitClass@@UAE?AVVU_ID@@XZ ENDP ; GroundUnitClass::GetUnitPrimaryObjID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitObjective@GroundUnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitObjective@GroundUnitClass@@UAEPAVObjectiveClass@@XZ PROC ; GroundUnitClass::GetUnitObjective, COMDAT
; _this$ = ecx

; 145  : 	Objective GetUnitObjective (void)				{ return (Objective)vuDatabase->Find(aobj); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR [eax+280]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitObjective@GroundUnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; GroundUnitClass::GetUnitObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitSecondaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSecondaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ PROC ; GroundUnitClass::GetUnitSecondaryObj, COMDAT
; _this$ = ecx

; 144  : 	Objective GetUnitSecondaryObj (void)			{ return (Objective)vuDatabase->Find(sobj); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	mov	edx, DWORD PTR [eax+272]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSecondaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; GroundUnitClass::GetUnitSecondaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitPrimaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPrimaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ PROC ; GroundUnitClass::GetUnitPrimaryObj, COMDAT
; _this$ = ecx

; 143  : 	Objective GetUnitPrimaryObj (void)				{ return (Objective)vuDatabase->Find(pobj); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	mov	edx, DWORD PTR [eax+264]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPrimaryObj@GroundUnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; GroundUnitClass::GetUnitPrimaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitDivision@GroundUnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitDivision@GroundUnitClass@@UAEHXZ PROC		; GroundUnitClass::GetUnitDivision, COMDAT
; _this$ = ecx

; 142  : 	virtual int GetUnitDivision (void)				{ return (int)division; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+262]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitDivision@GroundUnitClass@@UAEHXZ ENDP		; GroundUnitClass::GetUnitDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetUnitOrders@GroundUnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitOrders@GroundUnitClass@@UAEHXZ PROC		; GroundUnitClass::GetUnitOrders, COMDAT
; _this$ = ecx

; 141  : 	virtual int GetUnitOrders (void)				{ return (int)orders; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+260]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitOrders@GroundUnitClass@@UAEHXZ ENDP		; GroundUnitClass::GetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?SetUnitObjective@GroundUnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?SetUnitObjective@GroundUnitClass@@UAEXVVU_ID@@@Z PROC	; GroundUnitClass::SetUnitObjective, COMDAT
; _this$ = ecx

; 140  : 	void SetUnitObjective (VU_ID id)				{ aobj = id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+280], ecx
	mov	edx, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR [eax+284], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitObjective@GroundUnitClass@@UAEXVVU_ID@@@Z ENDP	; GroundUnitClass::SetUnitObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?SetUnitSecondaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?SetUnitSecondaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z PROC ; GroundUnitClass::SetUnitSecondaryObj, COMDAT
; _this$ = ecx

; 139  : 	void SetUnitSecondaryObj (VU_ID id)				{ sobj = id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+272], ecx
	mov	edx, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR [eax+276], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitSecondaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z ENDP ; GroundUnitClass::SetUnitSecondaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?SetUnitPrimaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?SetUnitPrimaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z PROC	; GroundUnitClass::SetUnitPrimaryObj, COMDAT
; _this$ = ecx

; 138  : 	void SetUnitPrimaryObj (VU_ID id)				{ pobj = id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+264], ecx
	mov	edx, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR [eax+268], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitPrimaryObj@GroundUnitClass@@UAEXVVU_ID@@@Z ENDP	; GroundUnitClass::SetUnitPrimaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?SetUnitDivision@GroundUnitClass@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 2
?SetUnitDivision@GroundUnitClass@@UAEXF@Z PROC		; GroundUnitClass::SetUnitDivision, COMDAT
; _this$ = ecx

; 137  : 	virtual void SetUnitDivision (short d)			{ division = d; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _d$[ebp]
	mov	WORD PTR [eax+262], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitDivision@GroundUnitClass@@UAEXF@Z ENDP		; GroundUnitClass::SetUnitDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?SetUnitOrders@GroundUnitClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_o$ = 8							; size = 1
?SetUnitOrders@GroundUnitClass@@UAEXE@Z PROC		; GroundUnitClass::SetUnitOrders, COMDAT
; _this$ = ecx

; 136  : 	virtual void SetUnitOrders (uchar o)			{ orders = o; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _o$[ebp]
	mov	BYTE PTR [eax+260], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitOrders@GroundUnitClass@@UAEXE@Z ENDP		; GroundUnitClass::SetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetOrders@GroundUnitClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOrders@GroundUnitClass@@QAEEXZ PROC			; GroundUnitClass::GetOrders, COMDAT
; _this$ = ecx

; 124  : 	uchar GetOrders (void) { return orders; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+260]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOrders@GroundUnitClass@@QAEEXZ ENDP			; GroundUnitClass::GetOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetKias@GroundUnitClass@@UBEMXZ
_TEXT	SEGMENT
tv82 = -12						; size = 4
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetKias@GroundUnitClass@@UBEMXZ PROC			; GroundUnitClass::GetKias, COMDAT
; _this$ = ecx

; 121  :     virtual float GetKias() const					{ return GetVt()*FTPSEC_TO_KNOTS; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv80[ebp]
	movss	xmm0, DWORD PTR tv80[ebp]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv82[ebp], xmm0
	fld	DWORD PTR tv82[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKias@GroundUnitClass@@UBEMXZ ENDP			; GroundUnitClass::GetKias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?GetVt@GroundUnitClass@@UBEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv71 = -4						; size = 4
?GetVt@GroundUnitClass@@UBEMXZ PROC			; GroundUnitClass::GetVt, COMDAT
; _this$ = ecx

; 120  :     virtual float GetVt() const						{ return (Moving() ? 40.0F : 0.0F);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	je	SHORT $LN3@GetVt
	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR tv71[ebp], xmm0
	jmp	SHORT $LN4@GetVt
$LN3@GetVt:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv71[ebp], xmm0
$LN4@GetVt:
	fld	DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVt@GroundUnitClass@@UBEMXZ ENDP			; GroundUnitClass::GetVt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?OnGround@GroundUnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnGround@GroundUnitClass@@UAEHXZ PROC			; GroundUnitClass::OnGround, COMDAT
; _this$ = ecx

; 119  :     virtual int OnGround (void)						{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@GroundUnitClass@@UAEHXZ ENDP			; GroundUnitClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\gndunit.h
;	COMDAT ?MaxUpdateTime@GroundUnitClass@@UBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxUpdateTime@GroundUnitClass@@UBEKXZ PROC		; GroundUnitClass::MaxUpdateTime, COMDAT
; _this$ = ecx

; 115  : 	virtual CampaignTime MaxUpdateTime() const		{ return GROUND_UPDATE_CHECK_INTERVAL*CampaignSeconds; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR ?GROUND_UPDATE_CHECK_INTERVAL@@3FA ; GROUND_UPDATE_CHECK_INTERVAL
	imul	eax, 1000				; 000003e8H
	mov	esp, ebp
	pop	ebp
	ret	0
?MaxUpdateTime@GroundUnitClass@@UBEKXZ ENDP		; GroundUnitClass::MaxUpdateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ PROC ; TeamClass::GetGroundAction, COMDAT
; _this$ = ecx

; 277  : 	TeamGndActionType *GetGroundAction (void) { return &groundAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 267				; 0000010bH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ENDP ; TeamClass::GetGroundAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitParent@UnitClass@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitParent@UnitClass@@UAEXPAV1@@Z PROC		; UnitClass::SetUnitParent, COMDAT
; _this$ = ecx

; 543  : 	virtual void SetUnitParent (Unit)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitParent@UnitClass@@UAEXPAV1@@Z ENDP		; UnitClass::SetUnitParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitParentID, COMDAT
; _this$ = ecx

; 542  : 	virtual VU_ID GetUnitParentID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitParentID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitParent@UnitClass@@UBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitParent@UnitClass@@UBEPAV1@XZ PROC		; UnitClass::GetUnitParent, COMDAT
; _this$ = ecx

; 541  : 	virtual Unit GetUnitParent() const							{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitParent@UnitClass@@UBEPAV1@XZ ENDP		; UnitClass::GetUnitParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z PROC	; UnitClass::GetUnitCurrentDestination, COMDAT
; _this$ = ecx

; 534  : 	virtual void GetUnitCurrentDestination(GridIndex*, GridIndex*)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z ENDP	; UnitClass::GetUnitCurrentDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 2
___formal$ = 12						; size = 2
?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z PROC	; UnitClass::SetUnitCurrentDestination, COMDAT
; _this$ = ecx

; 533  : 	virtual void SetUnitCurrentDestination(GridIndex, GridIndex)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z ENDP	; UnitClass::SetUnitCurrentDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNextMoveDirection@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextMoveDirection@UnitClass@@UAEHXZ PROC		; UnitClass::GetNextMoveDirection, COMDAT
; _this$ = ecx

; 532  : 	virtual int GetNextMoveDirection (void)						{ return Here; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextMoveDirection@UnitClass@@UAEHXZ ENDP		; UnitClass::GetNextMoveDirection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ClearUnitPath@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearUnitPath@UnitClass@@UAEXXZ PROC			; UnitClass::ClearUnitPath, COMDAT
; _this$ = ecx

; 531  : 	virtual void ClearUnitPath (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearUnitPath@UnitClass@@UAEXXZ ENDP			; UnitClass::ClearUnitPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitNextMove@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetUnitNextMove@UnitClass@@UAEXXZ PROC			; UnitClass::SetUnitNextMove, COMDAT
; _this$ = ecx

; 530  : 	virtual void SetUnitNextMove (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetUnitNextMove@UnitClass@@UAEXXZ ENDP			; UnitClass::SetUnitNextMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitHeading@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitHeading@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitHeading, COMDAT
; _this$ = ecx

; 529  : 	virtual int GetUnitHeading (void)							{ return Here; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitHeading@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitHeading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPosition@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPosition@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitPosition, COMDAT
; _this$ = ecx

; 527  : 	virtual int GetUnitPosition (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPosition@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMode@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMode@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitMode, COMDAT
; _this$ = ecx

; 526  : 	virtual int GetUnitMode (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMode@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitElement@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitElement@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitElement, COMDAT
; _this$ = ecx

; 525  : 	virtual int GetUnitElement (void) 							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitElement@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitFatigue@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitFatigue@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitFatigue, COMDAT
; _this$ = ecx

; 524  : 	virtual int GetUnitFatigue (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitFatigue@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitFatigue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitHeading@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitHeading@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitHeading, COMDAT
; _this$ = ecx

; 516  : 	virtual void SetUnitHeading (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitHeading@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitHeading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitPosition@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitPosition@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitPosition, COMDAT
; _this$ = ecx

; 514  : 	virtual void SetUnitPosition (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitPosition@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMode@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMode@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitMode, COMDAT
; _this$ = ecx

; 513  : 	virtual void SetUnitMode (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMode@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitFatigue@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitFatigue@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitFatigue, COMDAT
; _this$ = ecx

; 511  : 	virtual void SetUnitFatigue (int) 						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitFatigue@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitFatigue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitOrders@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitOrders@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitOrders, COMDAT
; _this$ = ecx

; 509  : 	virtual void SetUnitOrders (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitOrders@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z PROC	; UnitClass::GetUnitAssemblyPoint, COMDAT
; _this$ = ecx

; 503  : 	virtual void GetUnitAssemblyPoint (int, GridIndex*, GridIndex*)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z ENDP	; UnitClass::GetUnitAssemblyPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 2
___formal$ = 16						; size = 2
?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z PROC		; UnitClass::SetUnitAssemblyPoint, COMDAT
; _this$ = ecx

; 502  : 	virtual void SetUnitAssemblyPoint (int, GridIndex, GridIndex)		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z ENDP		; UnitClass::SetUnitAssemblyPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 8
?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z PROC	; UnitClass::HandleRequestReceipt, COMDAT
; _this$ = ecx

; 501  : 	virtual void HandleRequestReceipt(int, int, VU_ID)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z ENDP	; UnitClass::HandleRequestReceipt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z PROC ; UnitClass::BuildPackage, COMDAT
; _this$ = ecx

; 500  : 	virtual int BuildPackage(MissionRequest, F4PFList)	{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z ENDP ; UnitClass::BuildPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetLastResupply@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastResupply@UnitClass@@UAEHXZ PROC			; UnitClass::GetLastResupply, COMDAT
; _this$ = ecx

; 497  : 	virtual int GetLastResupply (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastResupply@UnitClass@@UAEHXZ ENDP			; UnitClass::GetLastResupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetLastResupplyTime@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastResupplyTime@UnitClass@@UAEKXZ PROC		; UnitClass::GetLastResupplyTime, COMDAT
; _this$ = ecx

; 496  : 	virtual CampaignTime GetLastResupplyTime (void)				{ return TheCampaign.CurrentTime; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastResupplyTime@UnitClass@@UAEKXZ ENDP		; UnitClass::GetLastResupplyTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitStores@UnitClass@@UAEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitStores@UnitClass@@UAEEH@Z PROC			; UnitClass::GetUnitStores, COMDAT
; _this$ = ecx

; 495  : 	virtual uchar GetUnitStores (int)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitStores@UnitClass@@UAEEH@Z ENDP			; UnitClass::GetUnitStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetSquadronFuel@UnitClass@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSquadronFuel@UnitClass@@UAEJXZ PROC			; UnitClass::GetSquadronFuel, COMDAT
; _this$ = ecx

; 494  : 	virtual long GetSquadronFuel (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSquadronFuel@UnitClass@@UAEJXZ ENDP			; UnitClass::GetSquadronFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSpecialty@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSpecialty@UnitClass@@UAEHXZ PROC		; UnitClass::GetUnitSpecialty, COMDAT
; _this$ = ecx

; 491  : 	virtual int GetUnitSpecialty (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSpecialty@UnitClass@@UAEHXZ ENDP		; UnitClass::GetUnitSpecialty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLastResupplyTime@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLastResupplyTime@UnitClass@@UAEXK@Z PROC		; UnitClass::SetLastResupplyTime, COMDAT
; _this$ = ecx

; 490  : 	virtual void SetLastResupplyTime (CampaignTime)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastResupplyTime@UnitClass@@UAEXK@Z ENDP		; UnitClass::SetLastResupplyTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLastResupply@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLastResupply@UnitClass@@UAEXH@Z PROC		; UnitClass::SetLastResupply, COMDAT
; _this$ = ecx

; 489  : 	virtual void SetLastResupply (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastResupply@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetLastResupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitStores@UnitClass@@UAEXHE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
?SetUnitStores@UnitClass@@UAEXHE@Z PROC			; UnitClass::SetUnitStores, COMDAT
; _this$ = ecx

; 488  : 	virtual void SetUnitStores (int, uchar)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitStores@UnitClass@@UAEXHE@Z ENDP			; UnitClass::SetUnitStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetSquadronFuel@UnitClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetSquadronFuel@UnitClass@@UAEXJ@Z PROC		; UnitClass::SetSquadronFuel, COMDAT
; _this$ = ecx

; 487  : 	virtual void SetSquadronFuel (long)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSquadronFuel@UnitClass@@UAEXJ@Z ENDP		; UnitClass::SetSquadronFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMorale@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMorale@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitMorale, COMDAT
; _this$ = ecx

; 486  : 	virtual void SetUnitMorale (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMorale@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitMorale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSupply@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitSupply@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitSupply, COMDAT
; _this$ = ecx

; 485  : 	virtual void SetUnitSupply (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitSupply@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSpecialty@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitSpecialty@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitSpecialty, COMDAT
; _this$ = ecx

; 484  : 	virtual void SetUnitSpecialty (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitSpecialty@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitSpecialty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?UseFuel@UnitClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?UseFuel@UnitClass@@UAEXJ@Z PROC			; UnitClass::UseFuel, COMDAT
; _this$ = ecx

; 481  : 	virtual void UseFuel (long)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?UseFuel@UnitClass@@UAEXJ@Z ENDP			; UnitClass::UseFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IncrementTime@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?IncrementTime@UnitClass@@UAEXK@Z PROC			; UnitClass::IncrementTime, COMDAT
; _this$ = ecx

; 480  : 	virtual void IncrementTime (CampaignTime) 				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?IncrementTime@UnitClass@@UAEXK@Z ENDP			; UnitClass::IncrementTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z PROC ; UnitClass::BuildMission, COMDAT
; _this$ = ecx

; 479  : 	virtual int BuildMission(MissionRequestClass*)			{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z ENDP ; UnitClass::BuildMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ PROC ; UnitClass::GetKnownEmitters, COMDAT
; _this$ = ecx

; 478  : 	virtual F4PFList GetKnownEmitters (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ ENDP ; UnitClass::GetKnownEmitters
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ETA@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ETA@UnitClass@@UAEKXZ PROC				; UnitClass::ETA, COMDAT
; _this$ = ecx

; 477  : 	virtual CampaignTime ETA (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ETA@UnitClass@@UAEKXZ ENDP				; UnitClass::ETA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?DumpWeapons@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DumpWeapons@UnitClass@@UAEHXZ PROC			; UnitClass::DumpWeapons, COMDAT
; _this$ = ecx

; 476  : 	virtual int DumpWeapons (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?DumpWeapons@UnitClass@@UAEHXZ ENDP			; UnitClass::DumpWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 4
?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z PROC ; UnitClass::LoadWeapons, COMDAT
; _this$ = ecx

; 475  : 	virtual int LoadWeapons (void*, uchar*, MoveType, int, int, int)	{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z ENDP ; UnitClass::LoadWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitAirbaseID, COMDAT
; _this$ = ecx

; 474  : 	virtual VU_ID GetUnitAirbaseID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitAirbaseID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ PROC	; UnitClass::GetUnitAirbase, COMDAT
; _this$ = ecx

; 473  : 	virtual CampEntity GetUnitAirbase (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ ENDP	; UnitClass::GetUnitAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitSquadronID, COMDAT
; _this$ = ecx

; 472  : 	virtual VU_ID GetUnitSquadronID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitSquadronID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSquadron@UnitClass@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSquadron@UnitClass@@UAEPAV1@XZ PROC		; UnitClass::GetUnitSquadron, COMDAT
; _this$ = ecx

; 471  : 	virtual Unit GetUnitSquadron (void)							{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSquadron@UnitClass@@UAEPAV1@XZ ENDP		; UnitClass::GetUnitSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitTOT@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitTOT@UnitClass@@UAEKXZ PROC			; UnitClass::GetUnitTOT, COMDAT
; _this$ = ecx

; 470  : 	virtual CampaignTime GetUnitTOT (void)						{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitTOT@UnitClass@@UAEKXZ ENDP			; UnitClass::GetUnitTOT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMissionID@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMissionID@UnitClass@@UAEHXZ PROC		; UnitClass::GetUnitMissionID, COMDAT
; _this$ = ecx

; 469  : 	virtual int GetUnitMissionID (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMissionID@UnitClass@@UAEHXZ ENDP		; UnitClass::GetUnitMissionID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitMissionTargetID, COMDAT
; _this$ = ecx

; 468  : 	virtual VU_ID GetUnitMissionTargetID (void)					{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitMissionTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ PROC ; UnitClass::GetUnitMissionTarget, COMDAT
; _this$ = ecx

; 467  : 	virtual CampEntity GetUnitMissionTarget (void)				{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ ENDP ; UnitClass::GetUnitMissionTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPriority@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPriority@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitPriority, COMDAT
; _this$ = ecx

; 466  : 	virtual int GetUnitPriority (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPriority@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ PROC ; UnitClass::GetUnitMission, COMDAT
; _this$ = ecx

; 463  : 	virtual MissionTypeEnum GetUnitMission (void)							{ return (MissionTypeEnum)0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ ENDP ; UnitClass::GetUnitMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetBurntFuel@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBurntFuel@UnitClass@@UAEHXZ PROC			; UnitClass::GetBurntFuel, COMDAT
; _this$ = ecx

; 462  : 	virtual int GetBurntFuel (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBurntFuel@UnitClass@@UAEHXZ ENDP			; UnitClass::GetBurntFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ PROC	; UnitClass::GetAirTarget, COMDAT
; _this$ = ecx

; 461  : 	virtual FalconEntity* GetAirTarget (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ ENDP	; UnitClass::GetAirTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ PROC		; UnitClass::GetAirTargetID, COMDAT
; _this$ = ecx

; 460  : 	virtual VU_ID GetAirTargetID (void)							{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ ENDP		; UnitClass::GetAirTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetCombatTime@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCombatTime@UnitClass@@UAEKXZ PROC			; UnitClass::GetCombatTime, COMDAT
; _this$ = ecx

; 459  : 	virtual CampaignTime GetCombatTime (void)					{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCombatTime@UnitClass@@UAEKXZ ENDP			; UnitClass::GetCombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetMoveTime@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMoveTime@UnitClass@@UAEKXZ PROC			; UnitClass::GetMoveTime, COMDAT
; _this$ = ecx

; 458  : 	virtual CampaignTime GetMoveTime (void)						{ return TheCampaign.CurrentTime - last_check; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	ecx, DWORD PTR [eax+184]
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMoveTime@UnitClass@@UAEKXZ ENDP			; UnitClass::GetMoveTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNumberOfLoadouts@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumberOfLoadouts@UnitClass@@UAEHXZ PROC		; UnitClass::GetNumberOfLoadouts, COMDAT
; _this$ = ecx

; 457  : 	virtual int GetNumberOfLoadouts (void)						{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfLoadouts@UnitClass@@UAEHXZ ENDP		; UnitClass::GetNumberOfLoadouts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z PROC	; UnitClass::SetLoadout, COMDAT
; _this$ = ecx

; 456  : 	virtual void SetLoadout (LoadoutStruct*, int)	{ ShiWarning("Shouldn't be here"); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z ENDP	; UnitClass::SetLoadout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z PROC		; UnitClass::SetUnitAirbase, COMDAT
; _this$ = ecx

; 455  : 	virtual void SetUnitAirbase (VU_ID)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z ENDP		; UnitClass::SetUnitAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z PROC		; UnitClass::SetUnitSquadron, COMDAT
; _this$ = ecx

; 454  : 	virtual void SetUnitSquadron (VU_ID)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z ENDP		; UnitClass::SetUnitSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitTOT@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitTOT@UnitClass@@UAEXK@Z PROC			; UnitClass::SetUnitTOT, COMDAT
; _this$ = ecx

; 453  : 	virtual void SetUnitTOT (CampaignTime)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitTOT@UnitClass@@UAEXK@Z ENDP			; UnitClass::SetUnitTOT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMissionTarget@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMissionTarget@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitMissionTarget, COMDAT
; _this$ = ecx

; 452  : 	virtual void SetUnitMissionTarget (int)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMissionTarget@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitMissionTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMissionID@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMissionID@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitMissionID, COMDAT
; _this$ = ecx

; 451  : 	virtual void SetUnitMissionID (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMissionID@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitMissionID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitPriority@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitPriority@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitPriority, COMDAT
; _this$ = ecx

; 450  : 	virtual void SetUnitPriority (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitPriority@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitRole@UnitClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetUnitRole@UnitClass@@UAEXE@Z PROC			; UnitClass::SetUnitRole, COMDAT
; _this$ = ecx

; 449  : 	virtual void SetUnitRole (uchar)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitRole@UnitClass@@UAEXE@Z ENDP			; UnitClass::SetUnitRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMission@UnitClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetUnitMission@UnitClass@@UAEXE@Z PROC			; UnitClass::SetUnitMission, COMDAT
; _this$ = ecx

; 448  : 	virtual void SetUnitMission (uchar)						{}			

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMission@UnitClass@@UAEXE@Z ENDP			; UnitClass::SetUnitMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetBurntFuel@UnitClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetBurntFuel@UnitClass@@UAEXJ@Z PROC			; UnitClass::SetBurntFuel, COMDAT
; _this$ = ecx

; 447  : 	virtual void SetBurntFuel (long)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBurntFuel@UnitClass@@UAEXJ@Z ENDP			; UnitClass::SetBurntFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetCombatTime@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetCombatTime@UnitClass@@UAEXK@Z PROC			; UnitClass::SetCombatTime, COMDAT
; _this$ = ecx

; 446  : 	virtual void SetCombatTime (CampaignTime)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCombatTime@UnitClass@@UAEXK@Z ENDP			; UnitClass::SetCombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitLastMove@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitLastMove@UnitClass@@UAEXK@Z PROC		; UnitClass::SetUnitLastMove, COMDAT
; _this$ = ecx

; 445  : 	virtual void SetUnitLastMove (CampaignTime)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitLastMove@UnitClass@@UAEXK@Z ENDP		; UnitClass::SetUnitLastMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitTactic@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitTactic@UnitClass@@QBEHXZ PROC			; UnitClass::GetUnitTactic, COMDAT
; _this$ = ecx

; 375  : 	int GetUnitTactic() const						{ return tactic; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+222]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitTactic@UnitClass@@QBEHXZ ENDP			; UnitClass::GetUnitTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ PROC	; UnitClass::GetTarget, COMDAT
; _this$ = ecx

; 366  : 	FalconEntity* GetTarget (void)					{ return (FalconEntity*) vuDatabase->Find(target_id); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	mov	edx, DWORD PTR [eax+212]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ENDP	; UnitClass::GetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitTactic@UnitClass@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 1
?SetUnitTactic@UnitClass@@QAEXE@Z PROC			; UnitClass::SetUnitTactic, COMDAT
; _this$ = ecx

; 361  : 	void SetUnitTactic (uchar t)			 		{ tactic = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _t$[ebp]
	mov	BYTE PTR [eax+222], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitTactic@UnitClass@@QAEXE@Z ENDP			; UnitClass::SetUnitTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z
_TEXT	SEGMENT
$T1 = -28						; size = 8
$T2 = -20						; size = 8
_this$ = -12						; size = 4
$T3 = -8						; size = 4
tv73 = -4						; size = 4
_e$ = 8							; size = 4
?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z PROC	; UnitClass::SetTarget, COMDAT
; _this$ = ecx

; 359  : 	void SetTarget (FalconEntity *e)				{ target_id = (e)? e->Id() : FalconNullId; }

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN3@SetTarget
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@SetTarget
$LN3@SetTarget:
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR $T2[ebp+4], edx
	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv73[ebp], eax
$LN4@SetTarget:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+212], eax
	mov	DWORD PTR [edx+216], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ENDP	; UnitClass::SetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitDestination@UnitClass@@QAEXFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?SetUnitDestination@UnitClass@@QAEXFF@Z PROC		; UnitClass::SetUnitDestination, COMDAT
; _this$ = ecx

; 356  : 	void SetUnitDestination (GridIndex x, GridIndex y)	{ 	dest_x = (GridIndex)(x+1); dest_y = (GridIndex)(y+1); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR _x$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+200], ax
	movsx	edx, WORD PTR _y$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+202], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitDestination@UnitClass@@QAEXFF@Z ENDP		; UnitClass::SetUnitDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetRealPosition@UnitClass@@UAEXPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?GetRealPosition@UnitClass@@UAEXPAM00@Z PROC		; UnitClass::GetRealPosition, COMDAT
; _this$ = ecx

; 347  : 	virtual void GetRealPosition (float*, float*, float*) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetRealPosition@UnitClass@@UAEXPAM00@Z ENDP		; UnitClass::GetRealPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SimSetOrientation@UnitClass@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?SimSetOrientation@UnitClass@@UAEXMMM@Z PROC		; UnitClass::SimSetOrientation, COMDAT
; _this$ = ecx

; 346  : 	virtual void SimSetOrientation (float, float, float) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SimSetOrientation@UnitClass@@UAEXMMM@Z ENDP		; UnitClass::SimSetOrientation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SimSetLocation@UnitClass@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SimSetLocation@UnitClass@@UAEXMMM@Z PROC		; UnitClass::SimSetLocation, COMDAT
; _this$ = ecx

; 344  : 	virtual void SimSetLocation (float x, float y, float z)	{ SetPosition(x,y,z); MakeCampBaseDirty (DIRTY_POSITION, DDP[182].priority); MakeCampBaseDirty (DIRTY_ALTITUDE, DDP[183].priority); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition
	mov	eax, 4
	imul	eax, 182				; 000000b6H
	mov	ecx, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z ; CampBaseClass::MakeCampBaseDirty
	mov	eax, 4
	imul	eax, 183				; 000000b7H
	mov	ecx, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z ; CampBaseClass::MakeCampBaseDirty
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SimSetLocation@UnitClass@@UAEXMMM@Z ENDP		; UnitClass::SimSetLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Retreating@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Retreating@UnitClass@@QBEHXZ PROC			; UnitClass::Retreating, COMDAT
; _this$ = ecx

; 326  : 	int Retreating () const							{ return (int)unit_flags & U_RETREATING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 2097152				; 00200000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Retreating@UnitClass@@QBEHXZ ENDP			; UnitClass::Retreating
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Losses@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Losses@UnitClass@@QBEHXZ PROC				; UnitClass::Losses, COMDAT
; _this$ = ecx

; 322  : 	int Losses () const								{ return (int)unit_flags & U_LOSSES; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 65536				; 00010000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Losses@UnitClass@@QBEHXZ ENDP				; UnitClass::Losses
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Broken@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Broken@UnitClass@@QBEHXZ PROC				; UnitClass::Broken, COMDAT
; _this$ = ecx

; 320  : 	int Broken () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Broken@UnitClass@@QBEHXZ ENDP				; UnitClass::Broken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Combat@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Combat@UnitClass@@QBEHXZ PROC				; UnitClass::Combat, COMDAT
; _this$ = ecx

; 319  : 	int Combat () const								{ return (int)unit_flags & U_COMBAT; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 16384				; 00004000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Combat@UnitClass@@QBEHXZ ENDP				; UnitClass::Combat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Moving@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Moving@UnitClass@@QBEHXZ PROC				; UnitClass::Moving, COMDAT
; _this$ = ecx

; 316  : 	int Moving() const								{ return (int)unit_flags & U_MOVING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1024				; 00000400H
	mov	esp, ebp
	pop	ebp
	ret	0
?Moving@UnitClass@@QBEHXZ ENDP				; UnitClass::Moving
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Engaged@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Engaged@UnitClass@@QBEHXZ PROC				; UnitClass::Engaged, COMDAT
; _this$ = ecx

; 313  : 	int Engaged() const								{ return (int)unit_flags & U_ENGAGED; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 64					; 00000040H
	mov	esp, ebp
	pop	ebp
	ret	0
?Engaged@UnitClass@@QBEHXZ ENDP				; UnitClass::Engaged
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Ordered@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Ordered@UnitClass@@QBEHXZ PROC				; UnitClass::Ordered, COMDAT
; _this$ = ecx

; 310  : 	int Ordered() const								{ return (int)unit_flags & U_ORDERED; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?Ordered@UnitClass@@QBEHXZ ENDP				; UnitClass::Ordered
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Assigned@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Assigned@UnitClass@@QBEHXZ PROC			; UnitClass::Assigned, COMDAT
; _this$ = ecx

; 309  : 	int Assigned() const							{ return (int)unit_flags & U_ASSIGNED; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?Assigned@UnitClass@@QBEHXZ ENDP			; UnitClass::Assigned
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IsDead@UnitClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@UnitClass@@UBEHXZ PROC				; UnitClass::IsDead, COMDAT
; _this$ = ecx

; 307  : 	virtual int IsDead() const						{ return (int)unit_flags & U_DEAD; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@UnitClass@@UBEHXZ ENDP				; UnitClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IsUnit@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@UnitClass@@UAEHXZ PROC				; UnitClass::IsUnit, COMDAT
; _this$ = ecx

; 274  : 	virtual int IsUnit (void)										{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@UnitClass@@UAEHXZ ENDP				; UnitClass::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetVehicleDeagData@UnitClass@@UAEHPAVSimInitDataClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetVehicleDeagData@UnitClass@@UAEHPAVSimInitDataClass@@H@Z PROC ; UnitClass::GetVehicleDeagData, COMDAT
; _this$ = ecx

; 266  : 	virtual int GetVehicleDeagData(SimInitDataClass*, int)			{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?GetVehicleDeagData@UnitClass@@UAEHPAVSimInitDataClass@@H@Z ENDP ; UnitClass::GetVehicleDeagData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?CombatTime@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatTime@UnitClass@@UAEKXZ PROC			; UnitClass::CombatTime, COMDAT
; _this$ = ecx

; 262  : 	virtual CampaignTime CombatTime (void)							{ return CampaignDay; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 86400000				; 05265c00H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatTime@UnitClass@@UAEKXZ ENDP			; UnitClass::CombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?AdjustForSupply@UnitClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AdjustForSupply@UnitClass@@UAEMXZ PROC			; UnitClass::AdjustForSupply, COMDAT
; _this$ = ecx

; 250  : 	virtual float AdjustForSupply(void)								{ return 1.0F; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld1
	mov	esp, ebp
	pop	ebp
	ret	0
?AdjustForSupply@UnitClass@@UAEMXZ ENDP			; UnitClass::AdjustForSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?DoCombat@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoCombat@UnitClass@@UAEHXZ PROC			; UnitClass::DoCombat, COMDAT
; _this$ = ecx

; 245  : 	virtual int DoCombat (void)										{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?DoCombat@UnitClass@@UAEHXZ ENDP			; UnitClass::DoCombat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ClearDeaggregationData@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDeaggregationData@UnitClass@@UAEXXZ PROC		; UnitClass::ClearDeaggregationData, COMDAT
; _this$ = ecx

; 242  : 	virtual void ClearDeaggregationData (void)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDeaggregationData@UnitClass@@UAEXXZ ENDP		; UnitClass::ClearDeaggregationData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ShouldDeaggregate@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShouldDeaggregate@UnitClass@@UAEHXZ PROC		; UnitClass::ShouldDeaggregate, COMDAT
; _this$ = ecx

; 241  : 	virtual int	ShouldDeaggregate(void)								{return TRUE;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?ShouldDeaggregate@UnitClass@@UAEHXZ ENDP		; UnitClass::ShouldDeaggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ PROC ; UnitClass::GetUnitDeaggregationData, COMDAT
; _this$ = ecx

; 240  : 	virtual UnitDeaggregationData* GetUnitDeaggregationData (void)	{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ ENDP ; UnitClass::GetUnitDeaggregationData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetDeaggregationPoint@UnitClass@@UAEHHPAPAVCampBaseClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetDeaggregationPoint@UnitClass@@UAEHHPAPAVCampBaseClass@@@Z PROC ; UnitClass::GetDeaggregationPoint, COMDAT
; _this$ = ecx

; 239  : 	virtual int GetDeaggregationPoint (int, CampEntity*)			{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?GetDeaggregationPoint@UnitClass@@UAEHHPAPAVCampBaseClass@@@Z ENDP ; UnitClass::GetDeaggregationPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?CanShootWeapon@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?CanShootWeapon@UnitClass@@UAEHH@Z PROC			; UnitClass::CanShootWeapon, COMDAT
; _this$ = ecx

; 238  : 	virtual int CanShootWeapon (int)								{ return TRUE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	4
?CanShootWeapon@UnitClass@@UAEHH@Z ENDP			; UnitClass::CanShootWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ PROC	; ObjectiveClass::GetObjectiveParent, COMDAT
; _this$ = ecx

; 263  : 	Objective GetObjectiveParent(void)						{ 	return FindObjective(static_data.parent); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR [eax+216]
	push	edx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ENDP	; ObjectiveClass::GetObjectiveParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsNearfront@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNearfront@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsNearfront, COMDAT
; _this$ = ecx

; 189  : 	int IsNearfront (void)									{ return (int)((O_THIRDLINE | O_SECONDLINE | O_FRONTLINE) & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 7
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNearfront@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsNearfront
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z PROC	; CampBaseClass::HasEntity, COMDAT
; _this$ = ecx

; 281  : 	virtual int HasEntity(VuEntity *e) const    {   

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 		return ((components && (components->Find(e) != NULL)) || (this == e)); 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN3@HasEntity
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z ; VuCollection::Find
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	je	SHORT $LN4@HasEntity
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN5@HasEntity
$LN4@HasEntity:
	mov	DWORD PTR tv81[ebp], 1
$LN5@HasEntity:
	mov	eax, DWORD PTR tv81[ebp]

; 283  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z ENDP	; CampBaseClass::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAwake@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 273  : 	int IsAwake (void)							{	return local_flags & CBC_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsEmitting@CampBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@CampBaseClass@@UAEHXZ PROC			; CampBaseClass::IsEmitting, COMDAT
; _this$ = ecx

; 269  : 	virtual int IsEmitting (void)				{	return base_flags & CBC_EMITTING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+150]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@CampBaseClass@@UAEHXZ ENDP			; CampBaseClass::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsCampBase@CampBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@CampBaseClass@@UAE_NXZ PROC			; CampBaseClass::IsCampBase, COMDAT
; _this$ = ecx

; 268  : 	virtual bool IsCampBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@CampBaseClass@@UAE_NXZ ENDP			; CampBaseClass::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetMissilesFlying@CampBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMissilesFlying@CampBaseClass@@UAEHXZ PROC		; CampBaseClass::GetMissilesFlying, COMDAT
; _this$ = ecx

; 249  : 	virtual int GetMissilesFlying (void)				{ return 0; } // MLR 10/3/2004 - finishing what //me123 started

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMissilesFlying@CampBaseClass@@UAEHXZ ENDP		; CampBaseClass::GetMissilesFlying
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?StepRadar@CampBaseClass@@UAEHHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_d$ = 12						; size = 4
_range$ = 16						; size = 4
?StepRadar@CampBaseClass@@UAEHHHM@Z PROC		; CampBaseClass::StepRadar, COMDAT
; _this$ = ecx

; 240  : 	virtual int StepRadar (int t,int d, float range)								{	return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StepRadar@CampBaseClass@@UAEHHHM@Z ENDP		; CampBaseClass::StepRadar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCountry@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 239  : 	virtual uchar GetCountry (void)								{	return owner; }		// New FalcEnt friendly form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetTeam@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetTeam, COMDAT
; _this$ = ecx

; 238  : 	virtual uchar GetTeam (void)								{	return ::GetTeam(owner); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+154]
	push	ecx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCampID@CampBaseClass@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampID@CampBaseClass@@UAEFXZ PROC			; CampBaseClass::GetCampID, COMDAT
; _this$ = ecx

; 237  : 	virtual short GetCampID (void)								{	return camp_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+152]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampID@CampBaseClass@@UAEFXZ ENDP			; CampBaseClass::GetCampID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::HasAreaJamming, COMDAT
; _this$ = ecx

; 162  : 	virtual int HasAreaJamming (void)			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::HasAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::HasSPJamming, COMDAT
; _this$ = ecx

; 161  : 	virtual int HasSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::HasSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsAreaJamming, COMDAT
; _this$ = ecx

; 160  : 	virtual int IsAreaJamming (void)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSPJamming, COMDAT
; _this$ = ecx

; 159  : 	virtual int IsSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsExploding@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsExploding@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsExploding, COMDAT
; _this$ = ecx

; 143  : 	virtual int IsExploding (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMover@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMover, COMDAT
; _this$ = ecx

; 134  : 	virtual int IsMover (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSimBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsSimBase, COMDAT
; _this$ = ecx

; 98   : 	virtual bool IsSimBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
