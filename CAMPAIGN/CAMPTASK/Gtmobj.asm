; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPTASK\Gtmobj.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?GetUserData@ListElementClass@@QAEPAXXZ		; ListElementClass::GetUserData
PUBLIC	?GetNext@ListElementClass@@QAEPAV1@XZ		; ListElementClass::GetNext
PUBLIC	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
PUBLIC	??_GListClass@@QAEPAXI@Z			; ListClass::`scalar deleting destructor'
PUBLIC	??0PrimaryObjectiveData@@QAE@XZ			; PrimaryObjectiveData::PrimaryObjectiveData
PUBLIC	??0UnitScoreNode@@QAE@XZ			; UnitScoreNode::UnitScoreNode
PUBLIC	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z		; UnitScoreNode::Insert
PUBLIC	?Remove@UnitScoreNode@@QAEPAV1@PAV1@@Z		; UnitScoreNode::Remove
PUBLIC	?Remove@UnitScoreNode@@QAEPAV1@PAVUnitClass@@@Z	; UnitScoreNode::Remove
PUBLIC	?Purge@UnitScoreNode@@QAEPAV1@XZ		; UnitScoreNode::Purge
PUBLIC	?Sort@UnitScoreNode@@QAEPAV1@H@Z		; UnitScoreNode::Sort
PUBLIC	??0GndObjDataType@@QAE@XZ			; GndObjDataType::GndObjDataType
PUBLIC	??1GndObjDataType@@QAE@XZ			; GndObjDataType::~GndObjDataType
PUBLIC	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z	; GndObjDataType::Insert
PUBLIC	?Remove@GndObjDataType@@QAEPAV1@PAV1@@Z		; GndObjDataType::Remove
PUBLIC	?Remove@GndObjDataType@@QAEPAV1@PAVObjectiveClass@@@Z ; GndObjDataType::Remove
PUBLIC	?Purge@GndObjDataType@@QAEPAV1@XZ		; GndObjDataType::Purge
PUBLIC	?Sort@GndObjDataType@@QAEPAV1@H@Z		; GndObjDataType::Sort
PUBLIC	?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z ; GndObjDataType::InsertUnit
PUBLIC	?RemoveUnit@GndObjDataType@@QAEPAVUnitScoreNode@@PAVUnitClass@@@Z ; GndObjDataType::RemoveUnit
PUBLIC	?RemoveUnitFromAll@GndObjDataType@@QAEXPAVUnitClass@@@Z ; GndObjDataType::RemoveUnitFromAll
PUBLIC	?PurgeUnits@GndObjDataType@@QAEXXZ		; GndObjDataType::PurgeUnits
PUBLIC	??_GGndObjDataType@@QAEPAXI@Z			; GndObjDataType::`scalar deleting destructor'
PUBLIC	?CleanupObjList@@YAXXZ				; CleanupObjList
PUBLIC	?DisposeObjList@@YAXXZ				; DisposeObjList
PUBLIC	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
PUBLIC	?AddPODataEntry@@YAXPAVObjectiveClass@@@Z	; AddPODataEntry
PUBLIC	?ResetObjectiveAssignmentScores@@YAXXZ		; ResetObjectiveAssignmentScores
PUBLIC	?GetOptions@@YAHH@Z				; GetOptions
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	??1ListClass@@QAE@XZ:PROC			; ListClass::~ListClass
EXTRN	?Remove@ListClass@@QAEXPAVListElementClass@@@Z:PROC ; ListClass::Remove
EXTRN	?InsertNewElement@ListClass@@QAEXFPAXE@Z:PROC	; ListClass::InsertNewElement
EXTRN	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z:PROC ; FindObjective
EXTRN	?IsPrimary@ObjectiveClass@@QAEHXZ:PROC		; ObjectiveClass::IsPrimary
EXTRN	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetFirstObjective
EXTRN	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetNextObjective
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?POList@@3PAVFalconPrivateOrderedList@@A:DWORD	; POList
EXTRN	?PODataList@@3PAVListClass@@A:DWORD		; PODataList
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
xdata$x	SEGMENT
__unwindtable$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z$0
__unwindtable$?CleanupObjList@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CleanupObjList@@YAXXZ$0
__unwindtable$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z$0
__ehfuncinfo$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CleanupObjList@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CleanupObjList@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_score$ = 8						; size = 4
?GetOptions@@YAHH@Z PROC				; GetOptions

; 534  : 	{

	push	ebp
	mov	ebp, esp

; 535  : 	if (score > 0)

	cmp	DWORD PTR _score$[ebp], 0
	jle	SHORT $LN1@GetOptions

; 536  : 		return (score/26)+1;

	mov	eax, DWORD PTR _score$[ebp]
	cdq
	mov	ecx, 26					; 0000001aH
	idiv	ecx
	add	eax, 1
	jmp	SHORT $LN2@GetOptions
$LN1@GetOptions:

; 537  : 	return 0;

	xor	eax, eax
$LN2@GetOptions:

; 538  : 	}

	pop	ebp
	ret	0
?GetOptions@@YAHH@Z ENDP				; GetOptions
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_pod$ = -12						; size = 4
_lp$ = -8						; size = 4
_i$ = -4						; size = 4
?ResetObjectiveAssignmentScores@@YAXXZ PROC		; ResetObjectiveAssignmentScores

; 105  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 106  : 	POData		pod;
; 107  : 	ListNode	lp;
; 108  : 	int			i;
; 109  : 
; 110  : 	lp = PODataList->GetFirstElement();

	mov	ecx, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN5@ResetObjec:

; 111  : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN6@ResetObjec

; 112  : 		{
; 113  : 		pod = (POData) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _pod$[ebp], eax

; 114  : 		for (i=0; i<NUM_TEAMS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ResetObjec
$LN2@ResetObjec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ResetObjec:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN1@ResetObjec

; 115  : 			pod->ground_assigned[i] = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pod$[ebp]
	mov	WORD PTR [eax+edx*2+24], cx
	jmp	SHORT $LN2@ResetObjec
$LN1@ResetObjec:

; 116  : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 117  : 		}

	jmp	SHORT $LN5@ResetObjec
$LN6@ResetObjec:

; 118  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetObjectiveAssignmentScores@@YAXXZ ENDP		; ResetObjectiveAssignmentScores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 8
$T3 = -32						; size = 4
tv71 = -28						; size = 4
$T4 = -24						; size = 4
_pd$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
?AddPODataEntry@@YAXPAVObjectiveClass@@@Z PROC		; AddPODataEntry

; 67   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 68   : 	POData			pd;
; 69   : 	int				i;
; 70   : 
; 71   : 	pd = new PrimaryObjectiveData();

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN6@AddPODataE
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0PrimaryObjectiveData@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN7@AddPODataE
$LN6@AddPODataE:
	mov	DWORD PTR tv71[ebp], 0
$LN7@AddPODataE:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pd$[ebp], ecx

; 72   : 	pd->objective = po->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _po$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pd$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 73   : 	for (i=0; i<NUM_TEAMS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@AddPODataE
$LN2@AddPODataE:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@AddPODataE:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN1@AddPODataE

; 74   : 		{
; 75   : 		pd->ground_priority[i] = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pd$[ebp]
	mov	WORD PTR [ecx+eax*2+8], dx

; 76   : 		pd->air_priority[i] = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pd$[ebp]
	mov	WORD PTR [ecx+eax*2+40], dx

; 77   : 		pd->player_priority[i] = -1;

	or	edx, -1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pd$[ebp]
	mov	WORD PTR [ecx+eax*2+56], dx

; 78   : 		pd->ground_assigned[i] = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pd$[ebp]
	mov	WORD PTR [ecx+eax*2+24], dx

; 79   : 		pd->flags = 0;

	mov	edx, DWORD PTR _pd$[ebp]
	mov	BYTE PTR [edx+72], 0

; 80   : 		}

	jmp	SHORT $LN2@AddPODataE
$LN1@AddPODataE:

; 81   : 	PODataList->InsertNewElement(po->GetCampID(), pd, 0);

	push	0
	mov	eax, DWORD PTR _pd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _po$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _po$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	call	?InsertNewElement@ListClass@@QAEXFPAXE@Z ; ListClass::InsertNewElement

; 82   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddPODataEntry@@YAXPAVObjectiveClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddPODataEntry@@YAXPAVObjectiveClass@@@Z ENDP		; AddPODataEntry
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_pd$ = -8						; size = 4
_lp$ = -4						; size = 4
_po$ = 8						; size = 4
?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z PROC ; GetPOData

; 89   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 90   : 	ListNode		lp;
; 91   : 	POData			pd;
; 92   : 
; 93   : 	lp = PODataList->GetFirstElement();

	mov	ecx, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN3@GetPOData:

; 94   : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN2@GetPOData

; 95   : 		{
; 96   : 		pd = (POData) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _pd$[ebp], eax

; 97   : 		if (pd->objective == po->Id())

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _po$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	ecx, DWORD PTR _pd$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetPOData

; 98   : 			return pd;

	mov	eax, DWORD PTR _pd$[ebp]
	jmp	SHORT $LN4@GetPOData
$LN1@GetPOData:

; 99   : 		lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 100  : 		}

	jmp	SHORT $LN3@GetPOData
$LN2@GetPOData:

; 101  : 	return NULL;

	xor	eax, eax
$LN4@GetPOData:

; 102  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ENDP ; GetPOData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
?DisposeObjList@@YAXXZ PROC				; DisposeObjList

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 62   : 	delete PODataList;

	mov	eax, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@DisposeObj
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GListClass@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@DisposeObj
$LN3@DisposeObj:
	mov	DWORD PTR tv68[ebp], 0
$LN4@DisposeObj:

; 63   : 	PODataList = NULL;

	mov	DWORD PTR ?PODataList@@3PAVListClass@@A, 0 ; PODataList

; 64   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisposeObjList@@YAXXZ ENDP				; DisposeObjList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_poit$ = -40						; size = 12
_np$ = -28						; size = 4
_pod$ = -24						; size = 4
_lp$ = -20						; size = 4
_o$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CleanupObjList@@YAXXZ PROC				; CleanupObjList

; 32   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CleanupObjList@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 33   : 	ListNode		lp,np;
; 34   : 	POData			pod;
; 35   : 	Objective		o;
; 36   : 
; 37   : 	// Eliminate objectives no longer in list
; 38   : 	lp = PODataList->GetFirstElement();;

	mov	ecx, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN7@CleanupObj:

; 39   : 	while (lp)

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN6@CleanupObj

; 40   : 	{
; 41   : 		np = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _np$[ebp], eax

; 42   : 		pod = (POData) lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _pod$[ebp], eax

; 43   : 		o = FindObjective(pod->objective);

	mov	eax, DWORD PTR _pod$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	DWORD PTR _o$[ebp], eax

; 44   : 		if (!o || !o->IsPrimary())

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN4@CleanupObj
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsPrimary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsPrimary
	test	eax, eax
	jne	SHORT $LN5@CleanupObj
$LN4@CleanupObj:

; 45   : 			PODataList->Remove(lp);

	mov	eax, DWORD PTR _lp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?PODataList@@3PAVListClass@@A ; PODataList
	call	?Remove@ListClass@@QAEXPAVListElementClass@@@Z ; ListClass::Remove
$LN5@CleanupObj:

; 46   : 		lp = np;

	mov	ecx, DWORD PTR _np$[ebp]
	mov	DWORD PTR _lp$[ebp], ecx

; 47   : 	}

	jmp	SHORT $LN7@CleanupObj
$LN6@CleanupObj:

; 48   : 	// Add newly promoted objectives
; 49   : 	VuListIterator	poit(POList);

	mov	edx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	edx
	lea	ecx, DWORD PTR _poit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 50   : 	o = GetFirstObjective(&poit);

	lea	eax, DWORD PTR _poit$[ebp]
	push	eax
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN3@CleanupObj:

; 51   : 	while (o)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN2@CleanupObj

; 52   : 	{
; 53   : 		pod = GetPOData(o);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
	add	esp, 4
	mov	DWORD PTR _pod$[ebp], eax

; 54   : 		if (!pod)

	cmp	DWORD PTR _pod$[ebp], 0
	jne	SHORT $LN1@CleanupObj

; 55   : 			AddPODataEntry(o);

	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	?AddPODataEntry@@YAXPAVObjectiveClass@@@Z ; AddPODataEntry
	add	esp, 4
$LN1@CleanupObj:

; 56   : 		o = GetNextObjective(&poit);

	lea	eax, DWORD PTR _poit$[ebp]
	push	eax
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 57   : 	}

	jmp	SHORT $LN3@CleanupObj
$LN2@CleanupObj:

; 58   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _poit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CleanupObjList@@YAXXZ$0:
	lea	ecx, DWORD PTR _poit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?CleanupObjList@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CleanupObjList@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CleanupObjList@@YAXXZ ENDP				; CleanupObjList
; Function compile flags: /Odtp
;	COMDAT ??_GGndObjDataType@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGndObjDataType@@QAEPAXI@Z PROC			; GndObjDataType::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GndObjDataType@@QAE@XZ		; GndObjDataType::~GndObjDataType
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGndObjDataType@@QAEPAXI@Z ENDP			; GndObjDataType::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PurgeUnits@GndObjDataType@@QAEXXZ PROC			; GndObjDataType::PurgeUnits
; _this$ = ecx

; 524  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 525  : 	if (unit_list)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@PurgeUnits

; 526  : 		unit_list->Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?Purge@UnitScoreNode@@QAEPAV1@XZ	; UnitScoreNode::Purge
$LN2@PurgeUnits:

; 527  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?PurgeUnits@GndObjDataType@@QAEXXZ ENDP			; GndObjDataType::PurgeUnits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_u$ = 8							; size = 4
?RemoveUnitFromAll@GndObjDataType@@QAEXPAVUnitClass@@@Z PROC ; GndObjDataType::RemoveUnitFromAll
; _this$ = ecx

; 513  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 514  : 	GODNode		cur = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@RemoveUnit:

; 515  : 
; 516  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@RemoveUnit

; 517  : 		{
; 518  : 		cur->RemoveUnit(u);

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?RemoveUnit@GndObjDataType@@QAEPAVUnitScoreNode@@PAVUnitClass@@@Z ; GndObjDataType::RemoveUnit

; 519  : 		cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _cur$[ebp], eax

; 520  : 		}

	jmp	SHORT $LN2@RemoveUnit
$LN3@RemoveUnit:

; 521  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveUnitFromAll@GndObjDataType@@QAEXPAVUnitClass@@@Z ENDP ; GndObjDataType::RemoveUnitFromAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_u$ = 8							; size = 4
?RemoveUnit@GndObjDataType@@QAEPAVUnitScoreNode@@PAVUnitClass@@@Z PROC ; GndObjDataType::RemoveUnit
; _this$ = ecx

; 496  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 	USNode		temp = unit_list;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _temp$[ebp], ecx
$LN3@RemoveUnit:

; 498  : 
; 499  : 	while (temp)

	cmp	DWORD PTR _temp$[ebp], 0
	je	SHORT $LN2@RemoveUnit

; 500  : 		{
; 501  : 		if (temp->unit == u)

	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _u$[ebp]
	jne	SHORT $LN1@RemoveUnit

; 502  : 			{
; 503  : 			unit_options -= GetOptions(temp->distance);

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?GetOptions@@YAHH@Z			; GetOptions
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 504  : 			unit_list = unit_list->Remove(u);

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?Remove@UnitScoreNode@@QAEPAV1@PAVUnitClass@@@Z ; UnitScoreNode::Remove
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 505  : 			return unit_list;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	jmp	SHORT $LN4@RemoveUnit
$LN1@RemoveUnit:

; 506  : 			}
; 507  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _temp$[ebp], ecx

; 508  : 		}

	jmp	SHORT $LN3@RemoveUnit
$LN2@RemoveUnit:

; 509  : 	return unit_list;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
$LN4@RemoveUnit:

; 510  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveUnit@GndObjDataType@@QAEPAVUnitScoreNode@@PAVUnitClass@@@Z ENDP ; GndObjDataType::RemoveUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
tv73 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
_new_node$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_s$ = 12						; size = 4
_d$ = 16						; size = 4
?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z PROC	; GndObjDataType::InsertUnit
; _this$ = ecx

; 478  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 479  : 	USNode		new_node;
; 480  : 		
; 481  : 	if (s <= 0 || d <= 0)

	cmp	DWORD PTR _s$[ebp], 0
	jle	SHORT $LN2@InsertUnit
	cmp	DWORD PTR _d$[ebp], 0
	jg	SHORT $LN3@InsertUnit
$LN2@InsertUnit:

; 482  : 		return;

	jmp	$LN4@InsertUnit
$LN3@InsertUnit:

; 483  : 
; 484  : 	new_node = new UnitScoreNode;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@InsertUnit
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0UnitScoreNode@@QAE@XZ		; UnitScoreNode::UnitScoreNode
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN7@InsertUnit
$LN6@InsertUnit:
	mov	DWORD PTR tv73[ebp], 0
$LN7@InsertUnit:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _new_node$[ebp], ecx

; 485  : 	new_node->unit = u;

	mov	edx, DWORD PTR _new_node$[ebp]
	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR [edx], eax

; 486  : 	new_node->score = s;

	mov	ecx, DWORD PTR _new_node$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 487  : 	new_node->distance = d;

	mov	eax, DWORD PTR _new_node$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 488  : 	new_node->next = NULL;

	mov	edx, DWORD PTR _new_node$[ebp]
	mov	DWORD PTR [edx+12], 0

; 489  : 	unit_options += GetOptions(new_node->distance);

	mov	eax, DWORD PTR _new_node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GetOptions@@YAHH@Z			; GetOptions
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 490  : 	if (!unit_list)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN1@InsertUnit

; 491  : 		unit_list = new_node;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_node$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN1@InsertUnit:

; 492  : 	unit_list = unit_list->Insert(new_node, USN_SORT_BY_DISTANCE);

	push	2
	mov	edx, DWORD PTR _new_node$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z	; UnitScoreNode::Insert
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN4@InsertUnit:

; 493  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InsertUnit@GndObjDataType@@QAEXPAVUnitClass@@HH@Z ENDP	; GndObjDataType::InsertUnit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_temp$ = -12						; size = 4
_last$ = -8						; size = 4
_head$ = -4						; size = 4
_sort_by$ = 8						; size = 4
?Sort@GndObjDataType@@QAEPAV1@H@Z PROC			; GndObjDataType::Sort
; _this$ = ecx

; 454  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 455  : 	// Reorder by # of options
; 456  : 	GODNode		temp,last,head=NULL;

	mov	DWORD PTR _head$[ebp], 0

; 457  : 
; 458  : 	last = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last$[ebp], eax

; 459  : 	temp = next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _temp$[ebp], edx
$LN6@Sort:

; 460  : 	while (temp)

	cmp	DWORD PTR _temp$[ebp], 0
	je	SHORT $LN5@Sort

; 461  : 		{
; 462  : 		last->next = NULL;

	mov	eax, DWORD PTR _last$[ebp]
	mov	DWORD PTR [eax+16], 0

; 463  : 		if (head)

	cmp	DWORD PTR _head$[ebp], 0
	je	SHORT $LN4@Sort

; 464  : 			head = head->Insert(last, sort_by);

	mov	ecx, DWORD PTR _sort_by$[ebp]
	push	ecx
	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _head$[ebp]
	call	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z ; GndObjDataType::Insert
	mov	DWORD PTR _head$[ebp], eax

; 465  : 		else

	jmp	SHORT $LN3@Sort
$LN4@Sort:

; 466  : 			head = last->Insert(last, sort_by);

	mov	eax, DWORD PTR _sort_by$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _last$[ebp]
	call	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z ; GndObjDataType::Insert
	mov	DWORD PTR _head$[ebp], eax
$LN3@Sort:

; 467  : 		last = temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 468  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _temp$[ebp], ecx

; 469  : 		}

	jmp	SHORT $LN6@Sort
$LN5@Sort:

; 470  : 	if (head)

	cmp	DWORD PTR _head$[ebp], 0
	je	SHORT $LN2@Sort

; 471  : 		head = head->Insert(last, sort_by);

	mov	edx, DWORD PTR _sort_by$[ebp]
	push	edx
	mov	eax, DWORD PTR _last$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	call	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z ; GndObjDataType::Insert
	mov	DWORD PTR _head$[ebp], eax

; 472  : 	else

	jmp	SHORT $LN1@Sort
$LN2@Sort:

; 473  : 		head = last->Insert(last, sort_by);

	mov	ecx, DWORD PTR _sort_by$[ebp]
	push	ecx
	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _last$[ebp]
	call	?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z ; GndObjDataType::Insert
	mov	DWORD PTR _head$[ebp], eax
$LN1@Sort:

; 474  : 	return head;

	mov	eax, DWORD PTR _head$[ebp]

; 475  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Sort@GndObjDataType@@QAEPAV1@H@Z ENDP			; GndObjDataType::Sort
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
tv79 = -32						; size = 4
$T1 = -28						; size = 4
tv74 = -24						; size = 4
$T2 = -20						; size = 4
_temp$ = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?Purge@GndObjDataType@@QAEPAV1@XZ PROC			; GndObjDataType::Purge
; _this$ = ecx

; 440  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Purge:

; 441  : 	GODNode		temp;
; 442  : 
; 443  : 	while (next)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@Purge

; 444  : 		{
; 445  : 		temp = next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _temp$[ebp], edx

; 446  : 		next = next->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax

; 447  : 		delete temp;

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN5@Purge
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_GGndObjDataType@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@Purge
$LN5@Purge:
	mov	DWORD PTR tv74[ebp], 0
$LN6@Purge:

; 448  : 		}

	jmp	SHORT $LN2@Purge
$LN1@Purge:

; 449  : 	delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@Purge
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GGndObjDataType@@QAEPAXI@Z
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN8@Purge
$LN7@Purge:
	mov	DWORD PTR tv79[ebp], 0
$LN8@Purge:

; 450  : 	return NULL;

	xor	eax, eax

; 451  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@GndObjDataType@@QAEPAV1@XZ ENDP			; GndObjDataType::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
tv86 = -36						; size = 4
$T1 = -32						; size = 4
tv71 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_to_remove$ = -16					; size = 4
$T4 = -12						; size = 4
_this$ = -8						; size = 4
_temp$ = -4						; size = 4
_o$ = 8							; size = 4
?Remove@GndObjDataType@@QAEPAV1@PAVObjectiveClass@@@Z PROC ; GndObjDataType::Remove
; _this$ = ecx

; 413  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	GODNode temp,to_remove;
; 415  : 
; 416  : 	if (o == obj)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Remove

; 417  : 		{
; 418  : 		temp = next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _temp$[ebp], eax

; 419  : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@Remove
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_GGndObjDataType@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN9@Remove
$LN8@Remove:
	mov	DWORD PTR tv71[ebp], 0
$LN9@Remove:

; 420  : 		return temp;

	mov	eax, DWORD PTR _temp$[ebp]
	jmp	SHORT $LN6@Remove
$LN5@Remove:

; 421  : 		}
; 422  : 	if (!next)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@Remove

; 423  : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN6@Remove
$LN4@Remove:

; 424  : 	temp = this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx
$LN3@Remove:

; 425  : 	while (temp->next)

	mov	edx, DWORD PTR _temp$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@Remove

; 426  : 		{
; 427  : 		if (temp->next->obj == o)

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _o$[ebp]
	jne	SHORT $LN1@Remove

; 428  : 			{
; 429  : 			to_remove = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _to_remove$[ebp], ecx

; 430  : 			temp->next = to_remove->next;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR _to_remove$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx

; 431  : 			delete to_remove;

	mov	edx, DWORD PTR _to_remove$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@Remove
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GGndObjDataType@@QAEPAXI@Z
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN11@Remove
$LN10@Remove:
	mov	DWORD PTR tv86[ebp], 0
$LN11@Remove:

; 432  : 			return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN6@Remove
$LN1@Remove:

; 433  : 			}
; 434  : 		temp = temp->next;

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _temp$[ebp], edx

; 435  : 		}

	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 436  : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN6@Remove:

; 437  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@GndObjDataType@@QAEPAV1@PAVObjectiveClass@@@Z ENDP ; GndObjDataType::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
tv83 = -32						; size = 4
$T1 = -28						; size = 4
tv70 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_to_remove$ = 8						; size = 4
?Remove@GndObjDataType@@QAEPAV1@PAV1@@Z PROC		; GndObjDataType::Remove
; _this$ = ecx

; 387  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 388  : 	GODNode temp;
; 389  : 
; 390  : 	if (to_remove == this)

	mov	eax, DWORD PTR _to_remove$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN5@Remove

; 391  : 		{
; 392  : 		temp = next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _temp$[ebp], edx

; 393  : 		delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@Remove
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_GGndObjDataType@@QAEPAXI@Z
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@Remove
$LN8@Remove:
	mov	DWORD PTR tv70[ebp], 0
$LN9@Remove:

; 394  : 		return temp;

	mov	eax, DWORD PTR _temp$[ebp]
	jmp	SHORT $LN6@Remove
$LN5@Remove:

; 395  : 		}
; 396  : 	if (!next)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN4@Remove

; 397  : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN6@Remove
$LN4@Remove:

; 398  : 	temp = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _temp$[ebp], eax
$LN3@Remove:

; 399  : 	while (temp->next)

	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN2@Remove

; 400  : 		{
; 401  : 		if (temp->next == to_remove)

	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _to_remove$[ebp]
	jne	SHORT $LN1@Remove

; 402  : 			{
; 403  : 			temp->next = to_remove->next;

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR _to_remove$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax

; 404  : 			delete to_remove;

	mov	ecx, DWORD PTR _to_remove$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@Remove
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GGndObjDataType@@QAEPAXI@Z
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN11@Remove
$LN10@Remove:
	mov	DWORD PTR tv83[ebp], 0
$LN11@Remove:

; 405  : 			return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN6@Remove
$LN1@Remove:

; 406  : 			}
; 407  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _temp$[ebp], ecx

; 408  : 		}

	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 409  : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN6@Remove:

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@GndObjDataType@@QAEPAV1@PAV1@@Z ENDP		; GndObjDataType::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_to_insert$ = 8						; size = 4
_sort_by$ = 12						; size = 4
?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z PROC		; GndObjDataType::Insert
; _this$ = ecx

; 307  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 	GODNode temp;
; 309  : 
; 310  : 	if (sort_by == GODN_SORT_BY_PRIORITY)

	cmp	DWORD PTR _sort_by$[ebp], 1
	jne	$LN22@Insert

; 311  : 		{
; 312  : 		if (to_insert->priority_score > priority_score)

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN21@Insert

; 313  : 			{
; 314  : 			to_insert->next = this;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 315  : 			ShiAssert(this != to_insert);
; 316  : 			return to_insert;

	mov	eax, DWORD PTR _to_insert$[ebp]
	jmp	$LN23@Insert
$LN21@Insert:

; 317  : 			}
; 318  : 		if (!next || to_insert->priority_score > next->priority_score)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN19@Insert
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _to_insert$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+4]
	jle	SHORT $LN20@Insert
$LN19@Insert:

; 319  : 			{
; 320  : 			to_insert->next = next;

	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax

; 321  : 			ShiAssert(next != to_insert);
; 322  : 			if (to_insert != this)

	mov	ecx, DWORD PTR _to_insert$[ebp]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN18@Insert

; 323  : 				next = to_insert;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [edx+16], eax

; 324  : 			else

	jmp	SHORT $LN17@Insert
$LN18@Insert:

; 325  : 				next = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
$LN17@Insert:

; 326  : 			return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN23@Insert
$LN20@Insert:

; 327  : 			}
; 328  : 		temp = next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _temp$[ebp], eax
$LN16@Insert:

; 329  : 		while (temp->next)

	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN15@Insert

; 330  : 			{
; 331  : 			if (to_insert->priority_score > temp->next->priority_score)

	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+4]
	jle	SHORT $LN14@Insert

; 332  : 				{
; 333  : 				to_insert->next = temp->next;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 334  : 				ShiAssert(temp->next != to_insert);
; 335  : 				temp->next = to_insert;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 336  : 				return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN23@Insert
$LN14@Insert:

; 337  : 				}
; 338  : 			temp = temp->next;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _temp$[ebp], eax

; 339  : 			}

	jmp	SHORT $LN16@Insert
$LN15@Insert:

; 340  : 		temp->next = to_insert;

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [ecx+16], edx
	jmp	$LN13@Insert
$LN22@Insert:

; 341  : 		}
; 342  : 	else if (sort_by == GODN_SORT_BY_OPTIONS)

	cmp	DWORD PTR _sort_by$[ebp], 2
	jne	$LN12@Insert

; 343  : 		{
; 344  : 		// Sort by best option
; 345  : 		if (to_insert->unit_options < unit_options)

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN11@Insert

; 346  : 			{
; 347  : 			to_insert->next = this;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 348  : 			ShiAssert(this != to_insert);
; 349  : 			return to_insert;

	mov	eax, DWORD PTR _to_insert$[ebp]
	jmp	$LN23@Insert
$LN11@Insert:

; 350  : 			}
; 351  : 		if (!next || to_insert->unit_options < next->unit_options)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN9@Insert
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _to_insert$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN10@Insert
$LN9@Insert:

; 352  : 			{
; 353  : 			to_insert->next = next;

	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax

; 354  : 			ShiAssert(next != to_insert);
; 355  : 			if (to_insert != this)

	mov	ecx, DWORD PTR _to_insert$[ebp]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN8@Insert

; 356  : 				next = to_insert;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [edx+16], eax

; 357  : 			else

	jmp	SHORT $LN7@Insert
$LN8@Insert:

; 358  : 				next = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
$LN7@Insert:

; 359  : 			return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN23@Insert
$LN10@Insert:

; 360  : 			}
; 361  : 		temp = next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _temp$[ebp], eax
$LN6@Insert:

; 362  : 		while (temp->next)

	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@Insert

; 363  : 			{
; 364  : 			if (to_insert->unit_options < temp->next->unit_options)

	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+8]
	jge	SHORT $LN4@Insert

; 365  : 				{
; 366  : 				to_insert->next = temp->next;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 367  : 				ShiAssert(temp->next != to_insert);
; 368  : 				temp->next = to_insert;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 369  : 				return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN23@Insert
$LN4@Insert:

; 370  : 				}
; 371  : 			temp = temp->next;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _temp$[ebp], eax

; 372  : 			}

	jmp	SHORT $LN6@Insert
$LN5@Insert:

; 373  : 		temp->next = to_insert;

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 374  : 		}
; 375  : 	else

	jmp	SHORT $LN13@Insert
$LN12@Insert:

; 376  : 		{
; 377  : 		if (to_insert != this)

	mov	eax, DWORD PTR _to_insert$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Insert

; 378  : 			to_insert->next = this;

	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 379  : 		else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 380  : 			to_insert->next = NULL;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN1@Insert:

; 381  : 		return to_insert;

	mov	eax, DWORD PTR _to_insert$[ebp]
	jmp	SHORT $LN23@Insert
$LN13@Insert:

; 382  : 		}
; 383  : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN23@Insert:

; 384  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@GndObjDataType@@QAEPAV1@PAV1@H@Z ENDP		; GndObjDataType::Insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GndObjDataType@@QAE@XZ PROC				; GndObjDataType::~GndObjDataType
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 	if (unit_list)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@GndObjData

; 303  : 		unit_list->Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?Purge@UnitScoreNode@@QAEPAV1@XZ	; UnitScoreNode::Purge
$LN2@GndObjData:

; 304  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1GndObjDataType@@QAE@XZ ENDP				; GndObjDataType::~GndObjDataType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GndObjDataType@@QAE@XZ PROC				; GndObjDataType::GndObjDataType
; _this$ = ecx

; 292  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 293  : 	obj = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 294  : 	priority_score = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 295  : 	unit_options = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 296  : 	unit_list = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 297  : 	next = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 298  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0GndObjDataType@@QAE@XZ ENDP				; GndObjDataType::GndObjDataType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_temp$ = -12						; size = 4
_last$ = -8						; size = 4
_head$ = -4						; size = 4
_sort_by$ = 8						; size = 4
?Sort@UnitScoreNode@@QAEPAV1@H@Z PROC			; UnitScoreNode::Sort
; _this$ = ecx

; 262  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 	USNode		temp,last,head=NULL;

	mov	DWORD PTR _head$[ebp], 0

; 264  : 
; 265  : 	last = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last$[ebp], eax

; 266  : 	temp = next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _temp$[ebp], edx
$LN6@Sort:

; 267  : 	while (temp)

	cmp	DWORD PTR _temp$[ebp], 0
	je	SHORT $LN5@Sort

; 268  : 		{
; 269  : 		last->next = NULL;

	mov	eax, DWORD PTR _last$[ebp]
	mov	DWORD PTR [eax+12], 0

; 270  : 		if (head)

	cmp	DWORD PTR _head$[ebp], 0
	je	SHORT $LN4@Sort

; 271  : 			head = head->Insert(last, sort_by);

	mov	ecx, DWORD PTR _sort_by$[ebp]
	push	ecx
	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _head$[ebp]
	call	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z	; UnitScoreNode::Insert
	mov	DWORD PTR _head$[ebp], eax

; 272  : 		else

	jmp	SHORT $LN3@Sort
$LN4@Sort:

; 273  : 			head = last->Insert(last, sort_by);

	mov	eax, DWORD PTR _sort_by$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _last$[ebp]
	call	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z	; UnitScoreNode::Insert
	mov	DWORD PTR _head$[ebp], eax
$LN3@Sort:

; 274  : 		last = temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 275  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _temp$[ebp], ecx

; 276  : 		}

	jmp	SHORT $LN6@Sort
$LN5@Sort:

; 277  : 	if (head)

	cmp	DWORD PTR _head$[ebp], 0
	je	SHORT $LN2@Sort

; 278  : 		head = head->Insert(last, sort_by);

	mov	edx, DWORD PTR _sort_by$[ebp]
	push	edx
	mov	eax, DWORD PTR _last$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	call	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z	; UnitScoreNode::Insert
	mov	DWORD PTR _head$[ebp], eax

; 279  : 	else

	jmp	SHORT $LN1@Sort
$LN2@Sort:

; 280  : 		head = last->Insert(last, sort_by);

	mov	ecx, DWORD PTR _sort_by$[ebp]
	push	ecx
	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _last$[ebp]
	call	?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z	; UnitScoreNode::Insert
	mov	DWORD PTR _head$[ebp], eax
$LN1@Sort:

; 281  : 	return head;

	mov	eax, DWORD PTR _head$[ebp]

; 282  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Sort@UnitScoreNode@@QAEPAV1@H@Z ENDP			; UnitScoreNode::Sort
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_temp$ = -12						; size = 4
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
?Purge@UnitScoreNode@@QAEPAV1@XZ PROC			; UnitScoreNode::Purge
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 	USNode		temp,cur = next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@Purge:

; 250  : 
; 251  : 	while (cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@Purge

; 252  : 		{
; 253  : 		temp = cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 254  : 		cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 255  : 		delete temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 256  : 		}

	jmp	SHORT $LN2@Purge
$LN1@Purge:

; 257  : 	delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 258  : 	return NULL;

	xor	eax, eax

; 259  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@UnitScoreNode@@QAEPAV1@XZ ENDP			; UnitScoreNode::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_temp$ = -12						; size = 4
_this$ = -8						; size = 4
_last_node$ = -4					; size = 4
_u$ = 8							; size = 4
?Remove@UnitScoreNode@@QAEPAV1@PAVUnitClass@@@Z PROC	; UnitScoreNode::Remove
; _this$ = ecx

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 	USNode		last_node,temp;
; 224  : 
; 225  : 	if (u == unit)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Remove

; 226  : 		{
; 227  : 		temp = next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _temp$[ebp], eax

; 228  : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 229  : 		return temp;

	mov	eax, DWORD PTR _temp$[ebp]
	jmp	SHORT $LN5@Remove
$LN4@Remove:

; 230  : 		}
; 231  : 
; 232  : 	last_node = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last_node$[ebp], eax
$LN3@Remove:

; 233  : 	while (last_node)

	cmp	DWORD PTR _last_node$[ebp], 0
	je	SHORT $LN2@Remove

; 234  : 		{
; 235  : 		if (last_node->next->unit == u)

	mov	ecx, DWORD PTR _last_node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _u$[ebp]
	jne	SHORT $LN1@Remove

; 236  : 			{
; 237  : 			temp = last_node->next;

	mov	ecx, DWORD PTR _last_node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _temp$[ebp], edx

; 238  : 			last_node->next = temp->next;

	mov	eax, DWORD PTR _last_node$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 239  : 			delete temp;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 240  : 			return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN5@Remove
$LN1@Remove:

; 241  : 			}
; 242  : 		last_node = last_node->next;

	mov	edx, DWORD PTR _last_node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _last_node$[ebp], eax

; 243  : 		}

	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 244  : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Remove:

; 245  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@UnitScoreNode@@QAEPAV1@PAVUnitClass@@@Z ENDP	; UnitScoreNode::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_temp$ = -12						; size = 4
_this$ = -8						; size = 4
_last_node$ = -4					; size = 4
_to_remove$ = 8						; size = 4
?Remove@UnitScoreNode@@QAEPAV1@PAV1@@Z PROC		; UnitScoreNode::Remove
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 	USNode		last_node,temp;
; 198  : 
; 199  : 	if (to_remove == this)

	mov	eax, DWORD PTR _to_remove$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@Remove

; 200  : 		{
; 201  : 		temp = next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _temp$[ebp], edx

; 202  : 		delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 203  : 		return temp;

	mov	eax, DWORD PTR _temp$[ebp]
	jmp	SHORT $LN5@Remove
$LN4@Remove:

; 204  : 		}
; 205  : 
; 206  : 	last_node = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last_node$[ebp], edx
$LN3@Remove:

; 207  : 	while (last_node)

	cmp	DWORD PTR _last_node$[ebp], 0
	je	SHORT $LN2@Remove

; 208  : 		{
; 209  : 		if (last_node->next == to_remove)

	mov	eax, DWORD PTR _last_node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _to_remove$[ebp]
	jne	SHORT $LN1@Remove

; 210  : 			{
; 211  : 			temp = last_node->next;

	mov	edx, DWORD PTR _last_node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _temp$[ebp], eax

; 212  : 			last_node->next = temp->next;

	mov	ecx, DWORD PTR _last_node$[ebp]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 213  : 			delete temp;

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 214  : 			return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN5@Remove
$LN1@Remove:

; 215  : 			}
; 216  : 		last_node = last_node->next;

	mov	eax, DWORD PTR _last_node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _last_node$[ebp], ecx

; 217  : 		}

	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 218  : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Remove:

; 219  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@UnitScoreNode@@QAEPAV1@PAV1@@Z ENDP		; UnitScoreNode::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_last_node$ = -4					; size = 4
_to_insert$ = 8						; size = 4
_sort_by$ = 12						; size = 4
?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z PROC		; UnitScoreNode::Insert
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 	USNode		last_node;
; 138  : 
; 139  : 	if (to_insert == this)

	mov	eax, DWORD PTR _to_insert$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN15@Insert

; 140  : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN16@Insert
$LN15@Insert:

; 141  : 
; 142  : 	if (sort_by == USN_SORT_BY_DISTANCE)

	cmp	DWORD PTR _sort_by$[ebp], 2
	jne	SHORT $LN14@Insert

; 143  : 		{
; 144  : 		if (to_insert->distance > distance)

	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jle	SHORT $LN13@Insert

; 145  : 			{
; 146  : 			to_insert->next = this;

	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 147  : 			return to_insert;

	mov	eax, DWORD PTR _to_insert$[ebp]
	jmp	$LN16@Insert
$LN13@Insert:

; 148  : 			}
; 149  : 
; 150  : 		last_node = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last_node$[ebp], eax
$LN12@Insert:

; 151  : 		while (last_node->next)

	mov	ecx, DWORD PTR _last_node$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN11@Insert

; 152  : 			{
; 153  : 			if (to_insert->distance > last_node->next->distance)

	mov	edx, DWORD PTR _last_node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+8]
	jle	SHORT $LN10@Insert

; 154  : 				{
; 155  : 				to_insert->next = last_node->next;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _last_node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 156  : 				last_node->next = to_insert;

	mov	eax, DWORD PTR _last_node$[ebp]
	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 157  : 				return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN16@Insert
$LN10@Insert:

; 158  : 				}
; 159  : 			last_node = last_node->next;

	mov	edx, DWORD PTR _last_node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _last_node$[ebp], eax

; 160  : 			}

	jmp	SHORT $LN12@Insert
$LN11@Insert:

; 161  : 		last_node->next = to_insert;

	mov	ecx, DWORD PTR _last_node$[ebp]
	mov	edx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [ecx+12], edx
	jmp	$LN9@Insert
$LN14@Insert:

; 162  : 		}
; 163  : 	else if (sort_by == USN_SORT_BY_SCORE)

	cmp	DWORD PTR _sort_by$[ebp], 1
	jne	SHORT $LN8@Insert

; 164  : 		{
; 165  : 		if (to_insert->score > score)

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN7@Insert

; 166  : 			{
; 167  : 			to_insert->next = this;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 168  : 			return to_insert;

	mov	eax, DWORD PTR _to_insert$[ebp]
	jmp	SHORT $LN16@Insert
$LN7@Insert:

; 169  : 			}
; 170  : 
; 171  : 		last_node = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last_node$[ebp], edx
$LN6@Insert:

; 172  : 		while (last_node->next)

	mov	eax, DWORD PTR _last_node$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN5@Insert

; 173  : 			{
; 174  : 			if (to_insert->score > last_node->next->score)

	mov	ecx, DWORD PTR _last_node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR [edx+4]
	jle	SHORT $LN4@Insert

; 175  : 				{
; 176  : 				to_insert->next = last_node->next;

	mov	edx, DWORD PTR _to_insert$[ebp]
	mov	eax, DWORD PTR _last_node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx

; 177  : 				last_node->next = to_insert;

	mov	edx, DWORD PTR _last_node$[ebp]
	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [edx+12], eax

; 178  : 				return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN16@Insert
$LN4@Insert:

; 179  : 				}
; 180  : 			last_node = last_node->next;

	mov	ecx, DWORD PTR _last_node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _last_node$[ebp], edx

; 181  : 			}

	jmp	SHORT $LN6@Insert
$LN5@Insert:

; 182  : 		last_node->next = to_insert;

	mov	eax, DWORD PTR _last_node$[ebp]
	mov	ecx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 183  : 		}
; 184  : 	else

	jmp	SHORT $LN9@Insert
$LN8@Insert:

; 185  : 		{
; 186  : 		if (to_insert != this)

	mov	edx, DWORD PTR _to_insert$[ebp]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Insert

; 187  : 			to_insert->next = this;

	mov	eax, DWORD PTR _to_insert$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 188  : 		else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 189  : 			to_insert->next = NULL;

	mov	edx, DWORD PTR _to_insert$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN1@Insert:

; 190  : 		return to_insert;

	mov	eax, DWORD PTR _to_insert$[ebp]
	jmp	SHORT $LN16@Insert
$LN9@Insert:

; 191  : 		}
; 192  : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN16@Insert:

; 193  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@UnitScoreNode@@QAEPAV1@PAV1@H@Z ENDP		; UnitScoreNode::Insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\gtmobj.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0UnitScoreNode@@QAE@XZ PROC				; UnitScoreNode::UnitScoreNode
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	unit = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 127  : 	score = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 128  : 	distance = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 129  : 	next = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 130  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0UnitScoreNode@@QAE@XZ ENDP				; UnitScoreNode::UnitScoreNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0PrimaryObjectiveData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PrimaryObjectiveData@@QAE@XZ PROC			; PrimaryObjectiveData::PrimaryObjectiveData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0PrimaryObjectiveData@@QAE@XZ ENDP			; PrimaryObjectiveData::PrimaryObjectiveData
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GListClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GListClass@@QAEPAXI@Z PROC				; ListClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ListClass@@QAE@XZ			; ListClass::~ListClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GListClass@@QAEPAXI@Z ENDP				; ListClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ PROC ; ListClass::GetFirstElement, COMDAT
; _this$ = ecx

; 82   : 		ListElementClass* GetFirstElement(void)		{ return front; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ENDP ; ListClass::GetFirstElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetNext@ListElementClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNext@ListElementClass@@QAEPAV1@XZ PROC		; ListElementClass::GetNext, COMDAT
; _this$ = ecx

; 45   : 		ListElementClass* GetNext(void)				{ return next; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@ListElementClass@@QAEPAV1@XZ ENDP		; ListElementClass::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetUserData@ListElementClass@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserData@ListElementClass@@QAEPAXXZ PROC		; ListElementClass::GetUserData, COMDAT
; _this$ = ecx

; 39   : 		void* GetUserData(void)						{ return user_data; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUserData@ListElementClass@@QAEPAXXZ ENDP		; ListElementClass::GetUserData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
END
