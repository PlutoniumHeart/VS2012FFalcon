; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPTASK\Flight.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?haveWeaps@@3HA					; haveWeaps
PUBLIC	?haveFuel@@3HA					; haveFuel
PUBLIC	?ourRange@@3HA					; ourRange
PUBLIC	?theirDomain@@3HA				; theirDomain
PUBLIC	?ourMission@@3HA				; ourMission
PUBLIC	?VFormRight@@3PAMA				; VFormRight
PUBLIC	?VFormAhead@@3PAMA				; VFormAhead
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
_BSS	SEGMENT
?haveWeaps@@3HA DD 01H DUP (?)				; haveWeaps
?haveFuel@@3HA DD 01H DUP (?)				; haveFuel
?ourRange@@3HA DD 01H DUP (?)				; ourRange
?theirDomain@@3HA DD 01H DUP (?)			; theirDomain
?ourMission@@3HA DD 01H DUP (?)				; ourMission
_BSS	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
_DATA	SEGMENT
?VFormRight@@3PAMA DD 000000000r		; 0	; VFormRight
	DD	0c5b0b800r			; -5655
	DD	045c2d800r			; 6235
	DD	046407800r			; 12318
?VFormAhead@@3PAMA DD 000000000r		; 0	; VFormAhead
	DD	0c5b0b800r			; -5655
	DD	0c685d200r			; -17129
	DD	0c6ba7200r			; -23865
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?SetYPR@VuEntity@@QAEXMMM@Z			; VuEntity::SetYPR
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ; VuEntity::SetSendCreate
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ		; VuEntity::VuState
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::get
PUBLIC	?IsSimBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsSimBase
PUBLIC	?IsCampaign@FalconEntity@@QAEHXZ		; FalconEntity::IsCampaign
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?UnSetFalcFlag@FalconEntity@@QAEXH@Z		; FalconEntity::UnSetFalcFlag
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsMover@FalconEntity@@UAEHXZ			; FalconEntity::IsMover
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsExploding@FalconEntity@@UAEHXZ		; FalconEntity::IsExploding
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ; FalconEntity::GetMovementType
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?SetWPFlag@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPFlag
PUBLIC	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ	; WayPointClass::GetWPTargetID
PUBLIC	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?GetWPFlags@WayPointClass@@QAEKXZ		; WayPointClass::GetWPFlags
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetPrevWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetPrevWP
PUBLIC	?GetWPAltitude@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAltitude
PUBLIC	?GetWPAltitudeLevel@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitudeLevel
PUBLIC	?GetWPArrivalTime@WayPointClass@@QAEKXZ		; WayPointClass::GetWPArrivalTime
PUBLIC	?GetWPDepartureTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPDepartureTime
PUBLIC	?GetWPLocation@WayPointClass@@QBEXPAF0@Z	; WayPointClass::GetWPLocation
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?UseId@IdNamespace@@QAEXK@Z			; IdNamespace::UseId
PUBLIC	?GetSpotTime@CampBaseClass@@QBEKXZ		; CampBaseClass::GetSpotTime
PUBLIC	?GetSpotted@CampBaseClass@@QBEFXZ		; CampBaseClass::GetSpotted
PUBLIC	?GetCampID@CampBaseClass@@UAEFXZ		; CampBaseClass::GetCampID
PUBLIC	?GetTeam@CampBaseClass@@UAEEXZ			; CampBaseClass::GetTeam
PUBLIC	?GetCountry@CampBaseClass@@UAEEXZ		; CampBaseClass::GetCountry
PUBLIC	?StepRadar@CampBaseClass@@UAEHHHM@Z		; CampBaseClass::StepRadar
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?GetMissilesFlying@CampBaseClass@@UAEHXZ	; CampBaseClass::GetMissilesFlying
PUBLIC	?IsCampBase@CampBaseClass@@UAE_NXZ		; CampBaseClass::IsCampBase
PUBLIC	?IsEmitting@CampBaseClass@@UAEHXZ		; CampBaseClass::IsEmitting
PUBLIC	?IsChecked@CampBaseClass@@QAEHXZ		; CampBaseClass::IsChecked
PUBLIC	?IsAwake@CampBaseClass@@QAEHXZ			; CampBaseClass::IsAwake
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?IsTacan@CampBaseClass@@QAEHXZ			; CampBaseClass::IsTacan
PUBLIC	?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z	; CampBaseClass::HasEntity
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?SetSpottedTime@CampBaseClass@@QAEXK@Z		; CampBaseClass::SetSpottedTime
PUBLIC	?SetChecked@CampBaseClass@@QAEXXZ		; CampBaseClass::SetChecked
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?IsNearfront@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsNearfront
PUBLIC	?IsGCI@ObjectiveClass@@QAEHXZ			; ObjectiveClass::IsGCI
PUBLIC	?HasNCTR@ObjectiveClass@@QAEHXZ			; ObjectiveClass::HasNCTR
PUBLIC	??0LoadoutStruct@@QAE@XZ			; LoadoutStruct::LoadoutStruct
PUBLIC	??4LoadoutStruct@@QAEABU0@ABU0@@Z		; LoadoutStruct::operator=
PUBLIC	??0LoadoutArray@@QAE@XZ				; LoadoutArray::LoadoutArray
PUBLIC	?GetRoster@UnitClass@@QAEJXZ			; UnitClass::GetRoster
PUBLIC	?GetUnitFlags@UnitClass@@QAEJXZ			; UnitClass::GetUnitFlags
PUBLIC	?GetTactic@UnitClass@@QAEEXZ			; UnitClass::GetTactic
PUBLIC	?GetCurrentWaypoint@UnitClass@@QAEGXZ		; UnitClass::GetCurrentWaypoint
PUBLIC	?GetReinforcement@UnitClass@@QAEFXZ		; UnitClass::GetReinforcement
PUBLIC	?GetOdds@UnitClass@@QAEFXZ			; UnitClass::GetOdds
PUBLIC	?CanShootWeapon@UnitClass@@UAEHH@Z		; UnitClass::CanShootWeapon
PUBLIC	?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ ; UnitClass::GetUnitDeaggregationData
PUBLIC	?ClearDeaggregationData@UnitClass@@UAEXXZ	; UnitClass::ClearDeaggregationData
PUBLIC	?Father@UnitClass@@UBEHXZ			; UnitClass::Father
PUBLIC	?AdjustForSupply@UnitClass@@UAEMXZ		; UnitClass::AdjustForSupply
PUBLIC	?GetUnitSupplyNeed@UnitClass@@UAEHH@Z		; UnitClass::GetUnitSupplyNeed
PUBLIC	?GetUnitFuelNeed@UnitClass@@UAEHH@Z		; UnitClass::GetUnitFuelNeed
PUBLIC	?SupplyUnit@UnitClass@@UAEXHH@Z			; UnitClass::SupplyUnit
PUBLIC	?IsUnit@UnitClass@@UAEHXZ			; UnitClass::IsUnit
PUBLIC	?IsDead@UnitClass@@UBEHXZ			; UnitClass::IsDead
PUBLIC	?Engaged@UnitClass@@QBEHXZ			; UnitClass::Engaged
PUBLIC	?Moving@UnitClass@@QBEHXZ			; UnitClass::Moving
PUBLIC	?Cargo@UnitClass@@QBEHXZ			; UnitClass::Cargo
PUBLIC	?Combat@UnitClass@@QBEHXZ			; UnitClass::Combat
PUBLIC	?Broken@UnitClass@@QBEHXZ			; UnitClass::Broken
PUBLIC	?Aborted@UnitClass@@QBEHXZ			; UnitClass::Aborted
PUBLIC	?Losses@UnitClass@@QBEHXZ			; UnitClass::Losses
PUBLIC	?Final@UnitClass@@QBEHXZ			; UnitClass::Final
PUBLIC	?HasPilots@UnitClass@@QAEHXZ			; UnitClass::HasPilots
PUBLIC	?Diverted@UnitClass@@QAEHXZ			; UnitClass::Diverted
PUBLIC	?Fired@UnitClass@@QAEHXZ			; UnitClass::Fired
PUBLIC	?Locked@UnitClass@@QAEHXZ			; UnitClass::Locked
PUBLIC	?NoAbort@UnitClass@@QAEHXZ			; UnitClass::NoAbort
PUBLIC	?SetUnitAltitude@UnitClass@@QAEXH@Z		; UnitClass::SetUnitAltitude
PUBLIC	?GetUnitAltitude@UnitClass@@QAEHXZ		; UnitClass::GetUnitAltitude
PUBLIC	?SetUnitDestination@UnitClass@@QAEXFF@Z		; UnitClass::SetUnitDestination
PUBLIC	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z	; UnitClass::SetTarget
PUBLIC	?SetUnitTactic@UnitClass@@QAEXE@Z		; UnitClass::SetUnitTactic
PUBLIC	?GetNumVehicles@UnitClass@@QAEHH@Z		; UnitClass::GetNumVehicles
PUBLIC	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ	; UnitClass::GetTarget
PUBLIC	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ		; UnitClass::GetTargetID
PUBLIC	?GetUnitMoved@UnitClass@@QBEHXZ			; UnitClass::GetUnitMoved
PUBLIC	?GetUnitTactic@UnitClass@@QBEHXZ		; UnitClass::GetUnitTactic
PUBLIC	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
PUBLIC	?SetUnitRole@UnitClass@@UAEXE@Z			; UnitClass::SetUnitRole
PUBLIC	?SetUnitMissionTarget@UnitClass@@UAEXH@Z	; UnitClass::SetUnitMissionTarget
PUBLIC	?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitAirbase
PUBLIC	?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetAirTargetID
PUBLIC	?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ	; UnitClass::GetAirTarget
PUBLIC	?GetUnitNormalRole@UnitClass@@UAEHXZ		; UnitClass::GetUnitNormalRole
PUBLIC	?SetUnitSpecialty@UnitClass@@UAEXH@Z		; UnitClass::SetUnitSpecialty
PUBLIC	?SetUnitSupply@UnitClass@@UAEXH@Z		; UnitClass::SetUnitSupply
PUBLIC	?SetUnitMorale@UnitClass@@UAEXH@Z		; UnitClass::SetUnitMorale
PUBLIC	?SetSquadronFuel@UnitClass@@UAEXJ@Z		; UnitClass::SetSquadronFuel
PUBLIC	?SetUnitStores@UnitClass@@UAEXHE@Z		; UnitClass::SetUnitStores
PUBLIC	?SetLastResupply@UnitClass@@UAEXH@Z		; UnitClass::SetLastResupply
PUBLIC	?SetLastResupplyTime@UnitClass@@UAEXK@Z		; UnitClass::SetLastResupplyTime
PUBLIC	?GetUnitSpecialty@UnitClass@@UAEHXZ		; UnitClass::GetUnitSpecialty
PUBLIC	?GetUnitSupply@UnitClass@@UAEHXZ		; UnitClass::GetUnitSupply
PUBLIC	?GetUnitMorale@UnitClass@@UAEHXZ		; UnitClass::GetUnitMorale
PUBLIC	?GetSquadronFuel@UnitClass@@UAEJXZ		; UnitClass::GetSquadronFuel
PUBLIC	?GetUnitStores@UnitClass@@UAEEH@Z		; UnitClass::GetUnitStores
PUBLIC	?GetLastResupplyTime@UnitClass@@UAEKXZ		; UnitClass::GetLastResupplyTime
PUBLIC	?GetLastResupply@UnitClass@@UAEHXZ		; UnitClass::GetLastResupply
PUBLIC	?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z ; UnitClass::BuildPackage
PUBLIC	?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z ; UnitClass::HandleRequestReceipt
PUBLIC	?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z	; UnitClass::SetUnitAssemblyPoint
PUBLIC	?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitPrimaryObj
PUBLIC	?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitSecondaryObj
PUBLIC	?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitObjective
PUBLIC	?SetUnitOrders@UnitClass@@UAEXH@Z		; UnitClass::SetUnitOrders
PUBLIC	?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z	; UnitClass::SetUnitOrders
PUBLIC	?SetUnitFatigue@UnitClass@@UAEXH@Z		; UnitClass::SetUnitFatigue
PUBLIC	?SetUnitMode@UnitClass@@UAEXH@Z			; UnitClass::SetUnitMode
PUBLIC	?SetUnitPosition@UnitClass@@UAEXH@Z		; UnitClass::SetUnitPosition
PUBLIC	?SetUnitDivision@UnitClass@@UAEXH@Z		; UnitClass::SetUnitDivision
PUBLIC	?SetUnitHeading@UnitClass@@UAEXH@Z		; UnitClass::SetUnitHeading
PUBLIC	?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ; UnitClass::GetUnitPrimaryObj
PUBLIC	?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ; UnitClass::GetUnitSecondaryObj
PUBLIC	?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ ; UnitClass::GetUnitObjective
PUBLIC	?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitPrimaryObjID
PUBLIC	?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ ; UnitClass::GetUnitSecondaryObjID
PUBLIC	?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitObjectiveID
PUBLIC	?GetUnitOrders@UnitClass@@UAEHXZ		; UnitClass::GetUnitOrders
PUBLIC	?GetUnitFatigue@UnitClass@@UAEHXZ		; UnitClass::GetUnitFatigue
PUBLIC	?GetUnitElement@UnitClass@@UAEHXZ		; UnitClass::GetUnitElement
PUBLIC	?GetUnitMode@UnitClass@@UAEHXZ			; UnitClass::GetUnitMode
PUBLIC	?GetUnitPosition@UnitClass@@UAEHXZ		; UnitClass::GetUnitPosition
PUBLIC	?GetUnitDivision@UnitClass@@UAEHXZ		; UnitClass::GetUnitDivision
PUBLIC	?GetUnitHeading@UnitClass@@UAEHXZ		; UnitClass::GetUnitHeading
PUBLIC	?SetUnitNextMove@UnitClass@@UAEXXZ		; UnitClass::SetUnitNextMove
PUBLIC	?ClearUnitPath@UnitClass@@UAEXXZ		; UnitClass::ClearUnitPath
PUBLIC	?GetNextMoveDirection@UnitClass@@UAEHXZ		; UnitClass::GetNextMoveDirection
PUBLIC	?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z	; UnitClass::SetUnitCurrentDestination
PUBLIC	?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z ; UnitClass::GetUnitCurrentDestination
PUBLIC	?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z ; UnitClass::GetObjMovementType
PUBLIC	?CheckForSurrender@UnitClass@@UAEHXZ		; UnitClass::CheckForSurrender
PUBLIC	?BuildMission@UnitClass@@UAEHXZ			; UnitClass::BuildMission
PUBLIC	?RallyUnit@UnitClass@@UAEHH@Z			; UnitClass::RallyUnit
PUBLIC	?GetUnitParent@UnitClass@@UBEPAV1@XZ		; UnitClass::GetUnitParent
PUBLIC	?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ	; UnitClass::GetFirstUnitElement
PUBLIC	?GetNextUnitElement@UnitClass@@UBEPAV1@XZ	; UnitClass::GetNextUnitElement
PUBLIC	?GetUnitElement@UnitClass@@UAEPAV1@H@Z		; UnitClass::GetUnitElement
PUBLIC	?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z	; UnitClass::GetUnitElementByID
PUBLIC	?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z	; UnitClass::GetPrevUnitElement
PUBLIC	?AddUnitChild@UnitClass@@UAEXPAV1@@Z		; UnitClass::AddUnitChild
PUBLIC	?DisposeChildren@UnitClass@@UAEXXZ		; UnitClass::DisposeChildren
PUBLIC	?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z		; UnitClass::RemoveChild
PUBLIC	?ReorganizeUnit@UnitClass@@UAEXXZ		; UnitClass::ReorganizeUnit
PUBLIC	?UpdateParentStatistics@UnitClass@@UAEHXZ	; UnitClass::UpdateParentStatistics
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetVt@AirUnitClass@@UBEMXZ			; AirUnitClass::GetVt
PUBLIC	?GetKias@AirUnitClass@@UBEMXZ			; AirUnitClass::GetKias
PUBLIC	?GetAwacs@PackageClass@@QAE?AVVU_ID@@XZ		; PackageClass::GetAwacs
PUBLIC	?GetJStar@PackageClass@@QAE?AVVU_ID@@XZ		; PackageClass::GetJStar
PUBLIC	?GetECM@PackageClass@@QAE?AVVU_ID@@XZ		; PackageClass::GetECM
PUBLIC	?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ	; PackageClass::GetTanker
PUBLIC	?GetTakeoff@PackageClass@@QAEKXZ		; PackageClass::GetTakeoff
PUBLIC	?GetFlights@PackageClass@@QAEEXZ		; PackageClass::GetFlights
PUBLIC	?GetIngress@PackageClass@@QAEPAVWayPointClass@@XZ ; PackageClass::GetIngress
PUBLIC	?GetEgress@PackageClass@@QAEPAVWayPointClass@@XZ ; PackageClass::GetEgress
PUBLIC	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
PUBLIC	?GetPilotSkill@PilotClass@@QAEHXZ		; PilotClass::GetPilotSkill
PUBLIC	?GetPilotRating@PilotClass@@QAEHXZ		; PilotClass::GetPilotRating
PUBLIC	?SetPilotSR@PilotClass@@QAEXEE@Z		; PilotClass::SetPilotSR
PUBLIC	?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ ; FlightClass::GetOverrideWP
PUBLIC	?GetEvalFlags@FlightClass@@QAEEXZ		; FlightClass::GetEvalFlags
PUBLIC	?CombatClass@FlightClass@@UAEHXZ		; FlightClass::CombatClass
PUBLIC	?SetLastDirection@FlightClass@@QAEXE@Z		; FlightClass::SetLastDirection
PUBLIC	?SetPackage@FlightClass@@QAEXVVU_ID@@@Z		; FlightClass::SetPackage
PUBLIC	?SetEvalFlag@FlightClass@@QAEXEH@Z		; FlightClass::SetEvalFlag
PUBLIC	?ClearEvalFlag@FlightClass@@QAEXE@Z		; FlightClass::ClearEvalFlag
PUBLIC	?SetAssignedTarget@FlightClass@@QAEXVVU_ID@@@Z	; FlightClass::SetAssignedTarget
PUBLIC	?ClearAssignedTarget@FlightClass@@QAEXXZ	; FlightClass::ClearAssignedTarget
PUBLIC	?SetOverrideWP@FlightClass@@QAEXPAVWayPointClass@@_N@Z ; FlightClass::SetOverrideWP
PUBLIC	?MakeStoresDirty@FlightClass@@QAEXXZ		; FlightClass::MakeStoresDirty
PUBLIC	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
PUBLIC	?WriteDirty@FlightClass@@QAEXPAPAE@Z		; FlightClass::WriteDirty
PUBLIC	?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z		; FlightClass::ReadDirty
PUBLIC	??0FlightClass@@QAE@GPAVUnitClass@@0@Z		; FlightClass::FlightClass
PUBLIC	??0FlightClass@@QAE@PAPAEPAJ@Z			; FlightClass::FlightClass
PUBLIC	??1FlightClass@@UAE@XZ				; FlightClass::~FlightClass
PUBLIC	?SaveSize@FlightClass@@UAEHXZ			; FlightClass::SaveSize
PUBLIC	?Save@FlightClass@@UAEHPAPAE@Z			; FlightClass::Save
PUBLIC	?RemovalCallback@FlightClass@@UAEHXZ		; FlightClass::RemovalCallback
PUBLIC	?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z ; FlightClass::Handle
PUBLIC	?GetDeaggregationPoint@FlightClass@@UAEHHPAPAVCampBaseClass@@@Z ; FlightClass::GetDeaggregationPoint
PUBLIC	?ShouldDeaggregate@FlightClass@@UAEHXZ		; FlightClass::ShouldDeaggregate
PUBLIC	?Reaction@FlightClass@@UAEHPAVCampBaseClass@@HM@Z ; FlightClass::Reaction
PUBLIC	?MoveUnit@FlightClass@@UAEHK@Z			; FlightClass::MoveUnit
PUBLIC	?DoCombat@FlightClass@@UAEHXZ			; FlightClass::DoCombat
PUBLIC	?ChooseTactic@FlightClass@@UAEHXZ		; FlightClass::ChooseTactic
PUBLIC	?CheckTactic@FlightClass@@UAEHH@Z		; FlightClass::CheckTactic
PUBLIC	?DetectOnMove@FlightClass@@UAEHXZ		; FlightClass::DetectOnMove
PUBLIC	?ChooseTarget@FlightClass@@UAEHXZ		; FlightClass::ChooseTarget
PUBLIC	?Real@FlightClass@@UAEHXZ			; FlightClass::Real
PUBLIC	?CollectWeapons@FlightClass@@UAEHPAEW4MoveType@@QAFQAEH@Z ; FlightClass::CollectWeapons
PUBLIC	?MaxUpdateTime@FlightClass@@UBEKXZ		; FlightClass::MaxUpdateTime
PUBLIC	?CombatTime@FlightClass@@UAEKXZ			; FlightClass::CombatTime
PUBLIC	?IsFlight@FlightClass@@UBEHXZ			; FlightClass::IsFlight
PUBLIC	?GetDetectionRange@FlightClass@@UAEHH@Z		; FlightClass::GetDetectionRange
PUBLIC	?GetRadarMode@FlightClass@@UAEHXZ		; FlightClass::GetRadarMode
PUBLIC	?IsSPJamming@FlightClass@@UAEHXZ		; FlightClass::IsSPJamming
PUBLIC	?IsAreaJamming@FlightClass@@UAEHXZ		; FlightClass::IsAreaJamming
PUBLIC	?HasSPJamming@FlightClass@@UAEHXZ		; FlightClass::HasSPJamming
PUBLIC	?HasAreaJamming@FlightClass@@UAEHXZ		; FlightClass::HasAreaJamming
PUBLIC	?GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z ; FlightClass::GetVehicleDeagData
PUBLIC	?SetUnitLastMove@FlightClass@@UAEXK@Z		; FlightClass::SetUnitLastMove
PUBLIC	?SetCombatTime@FlightClass@@UAEXK@Z		; FlightClass::SetCombatTime
PUBLIC	?SetBurntFuel@FlightClass@@UAEXJ@Z		; FlightClass::SetBurntFuel
PUBLIC	?SetUnitMission@FlightClass@@UAEXE@Z		; FlightClass::SetUnitMission
PUBLIC	?SetUnitPriority@FlightClass@@UAEXH@Z		; FlightClass::SetUnitPriority
PUBLIC	?SetUnitMissionID@FlightClass@@UAEXH@Z		; FlightClass::SetUnitMissionID
PUBLIC	?SetUnitMissionTarget@FlightClass@@UAEXVVU_ID@@@Z ; FlightClass::SetUnitMissionTarget
PUBLIC	?SetUnitTOT@FlightClass@@UAEXK@Z		; FlightClass::SetUnitTOT
PUBLIC	?SetUnitSquadron@FlightClass@@UAEXVVU_ID@@@Z	; FlightClass::SetUnitSquadron
PUBLIC	?SimSetLocation@FlightClass@@UAEXMMM@Z		; FlightClass::SimSetLocation
PUBLIC	?GetRealPosition@FlightClass@@UAEXPAM00@Z	; FlightClass::GetRealPosition
PUBLIC	?SimSetOrientation@FlightClass@@UAEXMMM@Z	; FlightClass::SimSetOrientation
PUBLIC	?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z ; FlightClass::SetLoadout
PUBLIC	?RemoveLoadout@FlightClass@@UAEXXZ		; FlightClass::RemoveLoadout
PUBLIC	?GetLoadout@FlightClass@@UAEPAULoadoutStruct@@H@Z ; FlightClass::GetLoadout
PUBLIC	?GetNumberOfLoadouts@FlightClass@@UAEHXZ	; FlightClass::GetNumberOfLoadouts
PUBLIC	?GetMoveTime@FlightClass@@UAEKXZ		; FlightClass::GetMoveTime
PUBLIC	?GetCombatTime@FlightClass@@UAEKXZ		; FlightClass::GetCombatTime
PUBLIC	?GetBurntFuel@FlightClass@@UAEHXZ		; FlightClass::GetBurntFuel
PUBLIC	?GetUnitMission@FlightClass@@UAE?AW4MissionTypeEnum@@XZ ; FlightClass::GetUnitMission
PUBLIC	?GetUnitCurrentRole@FlightClass@@UBEHXZ		; FlightClass::GetUnitCurrentRole
PUBLIC	?GetUnitPriority@FlightClass@@UAEHXZ		; FlightClass::GetUnitPriority
PUBLIC	?GetUnitWeaponId@FlightClass@@UAEHHH@Z		; FlightClass::GetUnitWeaponId
PUBLIC	?GetUnitWeaponCount@FlightClass@@UAEHHH@Z	; FlightClass::GetUnitWeaponCount
PUBLIC	?GetUnitMissionID@FlightClass@@UAEHXZ		; FlightClass::GetUnitMissionID
PUBLIC	?GetUnitMissionTarget@FlightClass@@UAEPAVCampBaseClass@@XZ ; FlightClass::GetUnitMissionTarget
PUBLIC	?GetUnitMissionTargetID@FlightClass@@UAE?AVVU_ID@@XZ ; FlightClass::GetUnitMissionTargetID
PUBLIC	?GetUnitTOT@FlightClass@@UAEKXZ			; FlightClass::GetUnitTOT
PUBLIC	?GetUnitSquadron@FlightClass@@UAEPAVUnitClass@@XZ ; FlightClass::GetUnitSquadron
PUBLIC	?GetUnitSquadronID@FlightClass@@UAE?AVVU_ID@@XZ	; FlightClass::GetUnitSquadronID
PUBLIC	?GetUnitAirbase@FlightClass@@UAEPAVCampBaseClass@@XZ ; FlightClass::GetUnitAirbase
PUBLIC	?GetUnitAirbaseID@FlightClass@@UAE?AVVU_ID@@XZ	; FlightClass::GetUnitAirbaseID
PUBLIC	?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z ; FlightClass::LoadWeapons
PUBLIC	?DumpWeapons@FlightClass@@UAEHXZ		; FlightClass::DumpWeapons
PUBLIC	?ETA@FlightClass@@UAEKXZ			; FlightClass::ETA
PUBLIC	?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ ; FlightClass::GetKnownEmitters
PUBLIC	?BuildMission@FlightClass@@UAEHPAVMissionRequestClass@@@Z ; FlightClass::BuildMission
PUBLIC	?GetUnitAssemblyPoint@FlightClass@@UAEXHPAF0@Z	; FlightClass::GetUnitAssemblyPoint
PUBLIC	?GetUnitParent@FlightClass@@UAEPAVUnitClass@@XZ	; FlightClass::GetUnitParent
PUBLIC	?GetUnitParentID@FlightClass@@UAE?AVVU_ID@@XZ	; FlightClass::GetUnitParentID
PUBLIC	?SetUnitParent@FlightClass@@UAEXPAVUnitClass@@@Z ; FlightClass::SetUnitParent
PUBLIC	?IncrementTime@FlightClass@@UAEXK@Z		; FlightClass::IncrementTime
PUBLIC	?GetBestVehicleWeapon@FlightClass@@UAEHHPAEW4MoveType@@HPAH@Z ; FlightClass::GetBestVehicleWeapon
PUBLIC	?UseFuel@FlightClass@@UAEXJ@Z			; FlightClass::UseFuel
PUBLIC	?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z ; FlightClass::DetectVs
PUBLIC	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
PUBLIC	?PickRandomPilot@FlightClass@@QAEHH@Z		; FlightClass::PickRandomPilot
PUBLIC	?GetAdjustedPlayerSlot@FlightClass@@QAEHH@Z	; FlightClass::GetAdjustedPlayerSlot
PUBLIC	?GetPilotData@FlightClass@@QAEPAVPilotClass@@H@Z ; FlightClass::GetPilotData
PUBLIC	?GetPilotID@FlightClass@@QAEHH@Z		; FlightClass::GetPilotID
PUBLIC	?GetPilotCallNumber@FlightClass@@QAEHH@Z	; FlightClass::GetPilotCallNumber
PUBLIC	?GetPilotVoiceID@FlightClass@@QAEEH@Z		; FlightClass::GetPilotVoiceID
PUBLIC	?GetPilotCount@FlightClass@@QAEHXZ		; FlightClass::GetPilotCount
PUBLIC	?GetACCount@FlightClass@@QAEHXZ			; FlightClass::GetACCount
PUBLIC	?GetFlightLeadSlot@FlightClass@@QAEHXZ		; FlightClass::GetFlightLeadSlot
PUBLIC	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ	; FlightClass::GetFlightLeadCallNumber
PUBLIC	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ	; FlightClass::GetFlightLeadVoiceID
PUBLIC	?GetAdjustedAircraftSlot@FlightClass@@QAEHH@Z	; FlightClass::GetAdjustedAircraftSlot
PUBLIC	?CalculateFuelAvailable@FlightClass@@QAEJH@Z	; FlightClass::CalculateFuelAvailable
PUBLIC	?HasWeapons@FlightClass@@QAEHXZ			; FlightClass::HasWeapons
PUBLIC	?HasFuel@FlightClass@@QAEHH@Z			; FlightClass::HasFuel
PUBLIC	?CanAbort@FlightClass@@QAEHXZ			; FlightClass::CanAbort
PUBLIC	?GetECMFlight@FlightClass@@QAEPAV1@XZ		; FlightClass::GetECMFlight
PUBLIC	?GetAWACSFlight@FlightClass@@QAEPAV1@XZ		; FlightClass::GetAWACSFlight
PUBLIC	?GetJSTARFlight@FlightClass@@QAEPAV1@XZ		; FlightClass::GetJSTARFlight
PUBLIC	?GetFACFlight@FlightClass@@QAEPAV1@XZ		; FlightClass::GetFACFlight
PUBLIC	?GetTankerFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetTankerFlight
PUBLIC	?GetFlightController@FlightClass@@QAEPAV1@XZ	; FlightClass::GetFlightController
PUBLIC	?FindCollisionPoint@FlightClass@@QAEHPAVFalconEntity@@PAUvector@@H@Z ; FlightClass::FindCollisionPoint
PUBLIC	?RegisterLock@FlightClass@@QAEXPAVFalconEntity@@@Z ; FlightClass::RegisterLock
PUBLIC	?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z ; FlightClass::SendComponentMessage
PUBLIC	?AirbaseOperational@FlightClass@@QAEHPAVObjectiveClass@@@Z ; FlightClass::AirbaseOperational
PUBLIC	??_GFlightClass@@UAEPAXI@Z			; FlightClass::`scalar deleting destructor'
PUBLIC	?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z ; NewFlight
PUBLIC	?RegroupFlight@@YAHPAVFlightClass@@@Z		; RegroupFlight
PUBLIC	?RegroupAircraft@@YAXPAVAircraftClass@@@Z	; RegroupAircraft
PUBLIC	?CancelFlight@@YAXPAVFlightClass@@@Z		; CancelFlight
PUBLIC	?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z	; UpdateSquadronStatus
PUBLIC	?ResetCurrentWP@@YAPAVWayPointClass@@PAVUnitClass@@@Z ; ResetCurrentWP
PUBLIC	?AbortFlight@@YAXPAVFlightClass@@@Z		; AbortFlight
PUBLIC	?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z ; FindAlternateStrip
PUBLIC	?GetPilotID@SquadronClass@@QAEHH@Z		; SquadronClass::GetPilotID
PUBLIC	?GetPilotData@SquadronClass@@QAEPAVPilotClass@@H@Z ; SquadronClass::GetPilotData
PUBLIC	?SetPilotStatus@SquadronClass@@QAEXHH@Z		; SquadronClass::SetPilotStatus
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?RatePilot@@YAXPAVFlightClass@@HH@Z		; RatePilot
PUBLIC	?GoHome@@YAXPAVFlightClass@@@Z			; GoHome
PUBLIC	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z	; CanItIdentify
PUBLIC	?CheckValidType@@YAHPAVCampBaseClass@@0@Z	; CheckValidType
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7FlightClass@@6B@				; FlightClass::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastawackWarning@@3JA				; LastawackWarning
PUBLIC	??_C@_0BC@GNBNJBMB@?$CF08x?5FlightClass?5?$AA@	; `string'
PUBLIC	??_C@_0EM@NKMILAPK@Unit?5?$CFd?3?5Waypoint?5action?5?$CFd?5?$CImis@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FlightClass@@6B@				; FlightClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFlightClass@@@8				; FlightClass `RTTI Type Descriptor'
PUBLIC	??_R3FlightClass@@8				; FlightClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FlightClass@@8				; FlightClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FlightClass@@8			; FlightClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@AirUnitClass@@8			; AirUnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAirUnitClass@@@8			; AirUnitClass `RTTI Type Descriptor'
PUBLIC	??_R3AirUnitClass@@8				; AirUnitClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AirUnitClass@@8				; AirUnitClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UnitClass@@8			; UnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVUnitClass@@@8				; UnitClass `RTTI Type Descriptor'
PUBLIC	??_R3UnitClass@@8				; UnitClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UnitClass@@8				; UnitClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CampBaseClass@@8			; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCampBaseClass@@@8			; CampBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3CampBaseClass@@8				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CampBaseClass@@8				; CampBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f000000
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f693e32
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f99999a
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41900000
PUBLIC	__real@42340000
PUBLIC	__real@42393988
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@428c0000
PUBLIC	__real@42c80000
PUBLIC	__real@42de450a
PUBLIC	__real@43480000
PUBLIC	__real@437a0000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@454cffae
PUBLIC	__real@461c3c00
PUBLIC	__real@469c4000
PUBLIC	__real@4f5c0ff8
PUBLIC	__real@8000000000000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fflush:PROC
EXTRN	_fprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	_abs:PROC
EXTRN	_rand:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?InsertionCallback@VuEntity@@MAEHXZ:PROC	; VuEntity::InsertionCallback
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Register@VuCollection@@QAEXXZ:PROC		; VuCollection::Register
EXTRN	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z:PROC	; VuCollection::Find
EXTRN	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC	; VuDatabase::Insert
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	??1VuGridIterator@@UAE@XZ:PROC			; VuGridIterator::~VuGridIterator
EXTRN	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetFirst
EXTRN	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetNext
EXTRN	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z:PROC ; VuSessionsIterator::VuSessionsIterator
EXTRN	??1VuSessionsIterator@@UAE@XZ:PROC		; VuSessionsIterator::~VuSessionsIterator
EXTRN	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetFirst
EXTRN	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetNext
EXTRN	?Save@FalconEntity@@UAEHPAU_iobuf@@@Z:PROC	; FalconEntity::Save
EXTRN	?CleanupData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::CleanupData
EXTRN	?RemovalCallback@FalconEntity@@UAEHXZ:PROC	; FalconEntity::RemovalCallback
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?MakeDirty@FalconEntity@@QAEXW4Dirty_Class@@W4Dirtyness@@@Z:PROC ; FalconEntity::MakeDirty
EXTRN	?MakeFlagsDirty@FalconEntity@@QAEXXZ:PROC	; FalconEntity::MakeFlagsDirty
EXTRN	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z:PROC	; FalconPrivateList::FalconPrivateList
EXTRN	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z:PROC ; FalconPrivateList::ForcedInsert
EXTRN	?Camp_GetCurrentTime@@YAKXZ:PROC		; Camp_GetCurrentTime
EXTRN	?GetCover@@YA?AW4CoverType@@FF@Z:PROC		; GetCover
EXTRN	?GetWeaponFireRate@@YAHH@Z:PROC			; GetWeaponFireRate
EXTRN	?GetWeaponHitChance@@YAHHH@Z:PROC		; GetWeaponHitChance
EXTRN	?GetWeaponScore@@YAHHPAEHH@Z:PROC		; GetWeaponScore
EXTRN	?GetWeaponFlags@@YAHH@Z:PROC			; GetWeaponFlags
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??0WayPointClass@@QAE@XZ:PROC			; WayPointClass::WayPointClass
EXTRN	?CloneWP@WayPointClass@@QAEXPAV1@@Z:PROC	; WayPointClass::CloneWP
EXTRN	?SetWPAltitude@WayPointClass@@QAEXH@Z:PROC	; WayPointClass::SetWPAltitude
EXTRN	?SetWPAltitudeLevel@WayPointClass@@QAEXH@Z:PROC	; WayPointClass::SetWPAltitudeLevel
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?SetWPTimes@@YAKPAVWayPointClass@@JH@Z:PROC	; SetWPTimes
EXTRN	?SetWPTimes@@YAKPAVWayPointClass@@FFHH@Z:PROC	; SetWPTimes
EXTRN	?CloneWPToList@@YAPAVWayPointClass@@PAV1@0@Z:PROC ; CloneWPToList
EXTRN	?AdjustAltitudeForMSL_AGL@@YAMMMM@Z:PROC	; AdjustAltitudeForMSL_AGL
EXTRN	??0MissionRequestClass@@QAE@XZ:PROC		; MissionRequestClass::MissionRequestClass
EXTRN	??1MissionRequestClass@@QAE@XZ:PROC		; MissionRequestClass::~MissionRequestClass
EXTRN	?BuildPathToTarget@@YAHPAVFlightClass@@PAVMissionRequestClass@@VVU_ID@@@Z:PROC ; BuildPathToTarget
EXTRN	?BuildDivertPath@@YAXPAVFlightClass@@PAVMissionRequestClass@@@Z:PROC ; BuildDivertPath
EXTRN	?AddInformationWPs@@YAXPAVFlightClass@@PAVMissionRequestClass@@@Z:PROC ; AddInformationWPs
EXTRN	?ClearDivertWayPoints@@YAXPAVFlightClass@@@Z:PROC ; ClearDivertWayPoints
EXTRN	?SetWPTimes@@YAJPAVFlightClass@@PAVMissionRequestClass@@@Z:PROC ; SetWPTimes
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z:PROC	; GetIdFromNamespace
EXTRN	?GetTeam@@YAEE@Z:PROC				; GetTeam
EXTRN	?SetOwner@CampBaseClass@@UAEXE@Z:PROC		; CampBaseClass::SetOwner
EXTRN	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z:PROC ; CampBaseClass::MakeCampBaseDirty
EXTRN	?InitData@CampBaseClass@@UAEXXZ:PROC		; CampBaseClass::InitData
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z:PROC	; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?GetSpotted@CampBaseClass@@QAEHE@Z:PROC		; CampBaseClass::GetSpotted
EXTRN	?SetLocation@CampBaseClass@@QAEXFF@Z:PROC	; CampBaseClass::SetLocation
EXTRN	?SetSpotted@CampBaseClass@@QAEXEKH@Z:PROC	; CampBaseClass::SetSpotted
EXTRN	?SetEmitting@CampBaseClass@@QAEXH@Z:PROC	; CampBaseClass::SetEmitting
EXTRN	?SetTacan@CampBaseClass@@QAEXH@Z:PROC		; CampBaseClass::SetTacan
EXTRN	?GetVisualDetectionRange@@YAHH@Z:PROC		; GetVisualDetectionRange
EXTRN	?NumOperableRunways@ATCBrain@@QAEHXZ:PROC	; ATCBrain::NumOperableRunways
EXTRN	?InList@ATCBrain@@QAEPAUrunwayQueueStruct@@VVU_ID@@@Z:PROC ; ATCBrain::InList
EXTRN	?FindTakeoffPt@ATCBrain@@QAEHPAVFlightClass@@HHPAM1@Z:PROC ; ATCBrain::FindTakeoffPt
EXTRN	?FindRunwayPt@ATCBrain@@QAEHPAVFlightClass@@HHPAM1@Z:PROC ; ATCBrain::FindRunwayPt
EXTRN	?UseSectionTakeoff@ATCBrain@@QAEHPAVFlightClass@@H@Z:PROC ; ATCBrain::UseSectionTakeoff
EXTRN	?CheckPointGlobal@@YAPAVSimBaseClass@@PAVCampBaseClass@@MM@Z:PROC ; CheckPointGlobal
EXTRN	?GetFeatureID@ObjectiveClass@@QAEHH@Z:PROC	; ObjectiveClass::GetFeatureID
EXTRN	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z:PROC ; GetVehicleClassData
EXTRN	?LoadWeapons@@YAHPAXHPAEW4MoveType@@HHHQAFQAE@Z:PROC ; LoadWeapons
EXTRN	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ:PROC ; FalconGameEntity::GetGameType
EXTRN	?CheckRange@@YAHHH@Z:PROC			; CheckRange
EXTRN	?CheckAction@@YAHHH@Z:PROC			; CheckAction
EXTRN	?CheckStatus@@YAHHH@Z:PROC			; CheckStatus
EXTRN	?CheckEngaged@@YAHHH@Z:PROC			; CheckEngaged
EXTRN	?CheckOdds@@YAHHH@Z:PROC			; CheckOdds
EXTRN	?CheckSpecial@@YAHH@Z:PROC			; CheckSpecial
EXTRN	?CheckFuel@@YAHHH@Z:PROC			; CheckFuel
EXTRN	?CheckWeapons@@YAHH@Z:PROC			; CheckWeapons
EXTRN	?GetTacticPriority@@YAHH@Z:PROC			; GetTacticPriority
EXTRN	?SetLastCheck@UnitClass@@QAEXK@Z:PROC		; UnitClass::SetLastCheck
EXTRN	?SetCargoId@UnitClass@@QAEXVVU_ID@@@Z:PROC	; UnitClass::SetCargoId
EXTRN	?SetReinforcement@UnitClass@@QAEXF@Z:PROC	; UnitClass::SetReinforcement
EXTRN	?SetOdds@UnitClass@@QAEXF@Z:PROC		; UnitClass::SetOdds
EXTRN	?SendDeaggregateData@UnitClass@@UAEXPAVVuTargetEntity@@@Z:PROC ; UnitClass::SendDeaggregateData
EXTRN	?RecordCurrentState@UnitClass@@UAEHPAVFalconSessionEntity@@H@Z:PROC ; UnitClass::RecordCurrentState
EXTRN	?Deaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::Deaggregate
EXTRN	?Reaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::Reaggregate
EXTRN	?TransferOwnership@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::TransferOwnership
EXTRN	?Wake@UnitClass@@UAEHXZ:PROC			; UnitClass::Wake
EXTRN	?Sleep@UnitClass@@UAEHXZ:PROC			; UnitClass::Sleep
EXTRN	?InsertInSimLists@UnitClass@@UAEXMM@Z:PROC	; UnitClass::InsertInSimLists
EXTRN	?RemoveFromSimLists@UnitClass@@UAEXXZ:PROC	; UnitClass::RemoveFromSimLists
EXTRN	?DeaggregateFromData@UnitClass@@UAEXPAEJ@Z:PROC	; UnitClass::DeaggregateFromData
EXTRN	?ReaggregateFromData@UnitClass@@UAEXPAEJ@Z:PROC	; UnitClass::ReaggregateFromData
EXTRN	?TransferOwnershipFromData@UnitClass@@UAEXPAEJ@Z:PROC ; UnitClass::TransferOwnershipFromData
EXTRN	?ResetPlayerStatus@UnitClass@@UAEHXZ:PROC	; UnitClass::ResetPlayerStatus
EXTRN	?ApplyDamage@UnitClass@@UAEHPAVFalconCampWeaponsFire@@E@Z:PROC ; UnitClass::ApplyDamage
EXTRN	?ApplyDamage@UnitClass@@UAEHW4DamageDataType@@PAHHF@Z:PROC ; UnitClass::ApplyDamage
EXTRN	?DecodeDamageData@UnitClass@@UAEHPAEPAV1@PAVFalconDeathMessage@@@Z:PROC ; UnitClass::DecodeDamageData
EXTRN	?GetDamageModifiers@UnitClass@@UAEPAEXZ:PROC	; UnitClass::GetDamageModifiers
EXTRN	?GetName@UnitClass@@UAEPADPADHH@Z:PROC		; UnitClass::GetName
EXTRN	?GetFullName@UnitClass@@UAEPADPADHH@Z:PROC	; UnitClass::GetFullName
EXTRN	?GetDivisionName@UnitClass@@UAEPADPADHH@Z:PROC	; UnitClass::GetDivisionName
EXTRN	?GetHitChance@UnitClass@@UAEHHH@Z:PROC		; UnitClass::GetHitChance
EXTRN	?GetAproxHitChance@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetAproxHitChance
EXTRN	?GetCombatStrength@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetCombatStrength
EXTRN	?GetAproxCombatStrength@UnitClass@@UAEHHH@Z:PROC ; UnitClass::GetAproxCombatStrength
EXTRN	?GetWeaponRange@UnitClass@@UAEHHPAVFalconEntity@@@Z:PROC ; UnitClass::GetWeaponRange
EXTRN	?GetAproxWeaponRange@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetAproxWeaponRange
EXTRN	?GetElectronicDetectionRange@UnitClass@@UAEHH@Z:PROC ; UnitClass::GetElectronicDetectionRange
EXTRN	?CanDetect@UnitClass@@UAEHPAVFalconEntity@@@Z:PROC ; UnitClass::CanDetect
EXTRN	?GetComponentLocation@UnitClass@@UAEXPAF0H@Z:PROC ; UnitClass::GetComponentLocation
EXTRN	?GetComponentAltitude@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetComponentAltitude
EXTRN	?GetRCSFactor@UnitClass@@UAEMXZ:PROC		; UnitClass::GetRCSFactor
EXTRN	?GetIRFactor@UnitClass@@UAEMXZ:PROC		; UnitClass::GetIRFactor
EXTRN	?GetNumberOfArcs@UnitClass@@UAEHXZ:PROC		; UnitClass::GetNumberOfArcs
EXTRN	?GetArcRatio@UnitClass@@UAEMH@Z:PROC		; UnitClass::GetArcRatio
EXTRN	?GetArcRange@UnitClass@@UAEMH@Z:PROC		; UnitClass::GetArcRange
EXTRN	?GetArcAngle@UnitClass@@UAEXHPAM0@Z:PROC	; UnitClass::GetArcAngle
EXTRN	?GetRadarType@UnitClass@@UAEHXZ:PROC		; UnitClass::GetRadarType
EXTRN	?UpdateTime@UnitClass@@QBEKXZ:PROC		; UnitClass::UpdateTime
EXTRN	?BroadcastUnitMessage@UnitClass@@QAEXVVU_ID@@FFFF@Z:PROC ; UnitClass::BroadcastUnitMessage
EXTRN	?ChangeUnitLocation@UnitClass@@QAEHE@Z:PROC	; UnitClass::ChangeUnitLocation
EXTRN	?SetParent@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetParent
EXTRN	?SetEngaged@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetEngaged
EXTRN	?SetMoving@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetMoving
EXTRN	?SetHasECM@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetHasECM
EXTRN	?SetCombat@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetCombat
EXTRN	?SetAborted@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetAborted
EXTRN	?SetDiverted@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetDiverted
EXTRN	?SetLocked@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetLocked
EXTRN	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ:PROC ; UnitClass::GetUnitClassData
EXTRN	?GetVehicleHitChance@UnitClass@@UAEHHW4MoveType@@HH@Z:PROC ; UnitClass::GetVehicleHitChance
EXTRN	?GetVehicleCombatStrength@UnitClass@@UAEHHW4MoveType@@H@Z:PROC ; UnitClass::GetVehicleCombatStrength
EXTRN	?GetVehicleRange@UnitClass@@UAEHHHPAVFalconEntity@@@Z:PROC ; UnitClass::GetVehicleRange
EXTRN	?GetVehicleID@UnitClass@@QAEFH@Z:PROC		; UnitClass::GetVehicleID
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?GetCruiseSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetCruiseSpeed
EXTRN	?GetCombatSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetCombatSpeed
EXTRN	?KillUnit@UnitClass@@QAEXXZ:PROC		; UnitClass::KillUnit
EXTRN	?UnloadUnit@UnitClass@@QAEXXZ:PROC		; UnitClass::UnloadUnit
EXTRN	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ:PROC ; UnitClass::GetCurrentUnitWP
EXTRN	?DisposeWayPoints@UnitClass@@QAEXXZ:PROC	; UnitClass::DisposeWayPoints
EXTRN	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z:PROC ; UnitClass::SetCurrentUnitWP
EXTRN	?DistSqu@@YAHFFFF@Z:PROC			; DistSqu
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?Distance@@YAMMMMM@Z:PROC			; Distance
EXTRN	?DistSqu@@YAMMMMM@Z:PROC			; DistSqu
EXTRN	?DistanceToFront@@YAMFF@Z:PROC			; DistanceToFront
EXTRN	?TimeToArrive@@YAKMM@Z:PROC			; TimeToArrive
EXTRN	?AngleTo@@YAMFFFF@Z:PROC			; AngleTo
EXTRN	?DirectionTo@@YAEFFFF@Z:PROC			; DirectionTo
EXTRN	?DirectionTo@@YAEFFFFFF@Z:PROC			; DirectionTo
EXTRN	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z:PROC	; FindUnit
EXTRN	?GridToSim@@YAMF@Z:PROC				; GridToSim
EXTRN	?ConvertGridToSim@@YAXFFPAUvector@@@Z:PROC	; ConvertGridToSim
EXTRN	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z:PROC	; ConvertSimToGrid
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?GetEnemyTeam@@YAEE@Z:PROC			; GetEnemyTeam
EXTRN	??0AirUnitClass@@QAE@GK@Z:PROC			; AirUnitClass::AirUnitClass
EXTRN	??0AirUnitClass@@QAE@PAPAEPAJ@Z:PROC		; AirUnitClass::AirUnitClass
EXTRN	??1AirUnitClass@@UAE@XZ:PROC			; AirUnitClass::~AirUnitClass
EXTRN	?SaveSize@AirUnitClass@@UAEHXZ:PROC		; AirUnitClass::SaveSize
EXTRN	?Save@AirUnitClass@@UAEHPAPAE@Z:PROC		; AirUnitClass::Save
EXTRN	?Handle@AirUnitClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; AirUnitClass::Handle
EXTRN	?GetMovementType@AirUnitClass@@UAE?AW4MoveType@@XZ:PROC ; AirUnitClass::GetMovementType
EXTRN	?GetUnitSpeed@AirUnitClass@@UBEHXZ:PROC		; AirUnitClass::GetUnitSpeed
EXTRN	?IsHelicopter@AirUnitClass@@UBEHXZ:PROC		; AirUnitClass::IsHelicopter
EXTRN	?OnGround@AirUnitClass@@UAEHXZ:PROC		; AirUnitClass::OnGround
EXTRN	?GetFACFlight@PackageClass@@QAEPAVFlightClass@@XZ:PROC ; PackageClass::GetFACFlight
EXTRN	?SetTakeoff@PackageClass@@QAEXK@Z:PROC		; PackageClass::SetTakeoff
EXTRN	?SetPackageFlags@PackageClass@@QAEXK@Z:PROC	; PackageClass::SetPackageFlags
EXTRN	?GetMainFlight@PackageClass@@QAEPAVFlightClass@@XZ:PROC ; PackageClass::GetMainFlight
EXTRN	?AssignVoice@PilotInfoClass@@QAEXH@Z:PROC	; PilotInfoClass::AssignVoice
EXTRN	?UnsetCallsignID@@YAXHH@Z:PROC			; UnsetCallsignID
EXTRN	??_EFlightClass@@UAEPAXI@Z:PROC			; FlightClass::`vector deleting destructor'
EXTRN	?ScheduleAircraft@SquadronClass@@QAEXPAVFlightClass@@PAVMissionRequestClass@@@Z:PROC ; SquadronClass::ScheduleAircraft
EXTRN	?AssignPilots@SquadronClass@@QAEHPAVFlightClass@@@Z:PROC ; SquadronClass::AssignPilots
EXTRN	?UpdateSquadronStores@SquadronClass@@QAEXQAFQAEHH@Z:PROC ; SquadronClass::UpdateSquadronStores
EXTRN	?ResupplySquadronStores@SquadronClass@@QAEXQAFQAEHH@Z:PROC ; SquadronClass::ResupplySquadronStores
EXTRN	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z:PROC ; GetUnitScore
EXTRN	?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z:PROC ; AirTaskingManagerClass::SendATMMessage
EXTRN	?FindTakeoffSlot@AirTaskingManagerClass@@QAEHVVU_ID@@PAVWayPointClass@@@Z:PROC ; AirTaskingManagerClass::FindTakeoffSlot
EXTRN	?ScheduleAircraft@AirTaskingManagerClass@@QAEXVVU_ID@@PAVWayPointClass@@H@Z:PROC ; AirTaskingManagerClass::ScheduleAircraft
EXTRN	?RequestSARMission@@YAHPAVFlightClass@@@Z:PROC	; RequestSARMission
EXTRN	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z:PROC ; RequestIntercept
EXTRN	?DoWPAction@@YAHPAVFlightClass@@@Z:PROC		; DoWPAction
EXTRN	?Detected@@YAHPAVUnitClass@@PAVFalconEntity@@PAM@Z:PROC ; Detected
EXTRN	?DoCombat@@YAHPAVCampBaseClass@@PAVFalconEntity@@@Z:PROC ; DoCombat
EXTRN	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z:PROC ; GetFeatureClassData
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	?SetRemoveFlag@SimBaseClass@@QAEXXZ:PROC	; SimBaseClass::SetRemoveFlag
EXTRN	?GetDefaultAwacsVoice@@YAEXZ:PROC		; GetDefaultAwacsVoice
EXTRN	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
EXTRN	?SendCallToAWACS@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z:PROC ; SendCallToAWACS
EXTRN	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z:PROC ; CreateCallFromAwacs
EXTRN	?PlayDivertRadioCalls@@YAXPAVCampBaseClass@@HPAVFlightClass@@H@Z:PROC ; PlayDivertRadioCalls
EXTRN	??0FalconWingmanMsg@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconWingmanMsg::FalconWingmanMsg
EXTRN	??0FalconFlightPlanMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconFlightPlanMessage::FalconFlightPlanMessage
EXTRN	?RegisterMove@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z:PROC ; MissionEvaluationClass::RegisterMove
EXTRN	?RegisterAbort@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z:PROC ; MissionEvaluationClass::RegisterAbort
EXTRN	?RegisterDivert@MissionEvaluationClass@@QAEXPAVFlightClass@@PAVMissionRequestClass@@@Z:PROC ; MissionEvaluationClass::RegisterDivert
EXTRN	?SetFinalAircraft@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z:PROC ; MissionEvaluationClass::SetFinalAircraft
EXTRN	?GetNextPt@@YAHH@Z:PROC				; GetNextPt
EXTRN	?GetNextPtLoop@@YAHH@Z:PROC			; GetNextPtLoop
EXTRN	?TranslatePointData@@YAXPAVCampBaseClass@@HPAM1@Z:PROC ; TranslatePointData
EXTRN	?GetQueue@@YAHH@Z:PROC				; GetQueue
EXTRN	?GetOwner@@YAEPAEFF@Z:PROC			; GetOwner
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?PickVoice@VoiceMapper@@QAEHHH@Z:PROC		; VoiceMapper::PickVoice
EXTRN	?GetMEA@TMap@@QAEMMM@Z:PROC			; TMap::GetMEA
EXTRN	?FindTaxiPt@@YAHPAVFlightClass@@PAVObjectiveClass@@H@Z:PROC ; FindTaxiPt
EXTRN	?UI_Refresh@@YAXXZ:PROC				; UI_Refresh
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuLocalSession@@3VVU_ID@@A:QWORD		; vuLocalSession
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?ReconLossTime@@3PAKA:BYTE			; ReconLossTime
EXTRN	?Map_Max_X@@3FA:WORD				; Map_Max_X
EXTRN	?Map_Max_Y@@3FA:WORD				; Map_Max_Y
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?PtHeaderDataTable@@3PAUPtHeaderDataType@@A:DWORD ; PtHeaderDataTable
EXTRN	?PtDataTable@@3PAUPtDataType@@A:DWORD		; PtDataTable
EXTRN	?SimACDefTable@@3PAUSimACDefType@@A:DWORD	; SimACDefTable
EXTRN	?DDP@@3PAUDirtyDataClassType@@A:DWORD		; DDP
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	?MissionData@@3PAUMissionDataType@@A:BYTE	; MissionData
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?FlightNS@@3VIdNamespace@@A:BYTE		; FlightNS
EXTRN	?CampFilter@@3VCampBaseFilter@@A:DWORD		; CampFilter
EXTRN	?AllAirList@@3PAVVuLinkedList@@A:DWORD		; AllAirList
EXTRN	?AirDefenseList@@3PAVFalconPrivateList@@A:DWORD	; AirDefenseList
EXTRN	?EmitterList@@3PAVFalconPrivateList@@A:DWORD	; EmitterList
EXTRN	?ObjProxList@@3PAVVuGridTree@@A:DWORD		; ObjProxList
EXTRN	?RealUnitProxList@@3PAVVuGridTree@@A:DWORD	; RealUnitProxList
EXTRN	?dx@@3PAFA:BYTE					; dx
EXTRN	?dy@@3PAFA:BYTE					; dy
EXTRN	?VisualDetectionRange@@3PAHA:BYTE		; VisualDetectionRange
EXTRN	?DefaultDamageMods@@3PAEA:BYTE			; DefaultDamageMods
EXTRN	?AirTactics@@3FA:WORD				; AirTactics
EXTRN	?FirstAirTactic@@3FA:WORD			; FirstAirTactic
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?gCampDataVersion@@3HA:DWORD			; gCampDataVersion
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?FLIGHT_MOVE_CHECK_INTERVAL@@3FA:WORD		; FLIGHT_MOVE_CHECK_INTERVAL
EXTRN	?FLIGHT_COMBAT_CHECK_INTERVAL@@3FA:WORD		; FLIGHT_COMBAT_CHECK_INTERVAL
EXTRN	?MIN_IGNORE_RANGE@@3MA:DWORD			; MIN_IGNORE_RANGE
EXTRN	?PILOT_ASSIGN_TIME@@3JA:DWORD			; PILOT_ASSIGN_TIME
EXTRN	?MAX_GROUND_SEARCH@@3FA:WORD			; MAX_GROUND_SEARCH
EXTRN	?MAX_AIR_SEARCH@@3FA:WORD			; MAX_AIR_SEARCH
EXTRN	?PilotInfo@@3PAVPilotInfoClass@@A:DWORD		; PilotInfo
EXTRN	?gDefaultAWACSCallSign@@3FA:WORD		; gDefaultAWACSCallSign
EXTRN	?MRX@@3HA:DWORD					; MRX
EXTRN	?MissStr@@3PAY0BE@DA:BYTE			; MissStr
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?g_voicemap@@3VVoiceMapper@@A:QWORD		; g_voicemap
EXTRN	?g_bRP5Comp@@3_NA:BYTE				; g_bRP5Comp
EXTRN	?TheMap@@3VTMap@@A:BYTE				; TheMap
EXTRN	?g_bAWACSRequired@@3_NA:BYTE			; g_bAWACSRequired
EXTRN	?g_bLoadoutSquadStoreResupply@@3_NA:BYTE	; g_bLoadoutSquadStoreResupply
EXTRN	?g_fIdentFactor@@3MA:DWORD			; g_fIdentFactor
EXTRN	?SquadFormations@@3PAY02UAIOffsetType@@A:BYTE	; SquadFormations
EXTRN	?PlatoonFormations@@3PAY03UAIOffsetType@@A:BYTE	; PlatoonFormations
EXTRN	?CompanyFormations@@3PAY03UAIOffsetType@@A:BYTE	; CompanyFormations
EXTRN	?save_log@@3PAU_iobuf@@A:DWORD			; save_log
EXTRN	?load_log@@3PAU_iobuf@@A:DWORD			; load_log
EXTRN	?start_save_stream@@3HA:DWORD			; start_save_stream
EXTRN	?start_load_stream@@3HA:DWORD			; start_load_stream
EXTRN	?g_nFlightVisualBonus@@3HA:DWORD		; g_nFlightVisualBonus
EXTRN	?g_bRealisticAttrition@@3_NA:BYTE		; g_bRealisticAttrition
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?LastawackWarning@@3JA DD 01H DUP (?)			; LastawackWarning
_BSS	ENDS
;	COMDAT ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
_BSS	SEGMENT
?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A DD 01H DUP (?) ; `FlightClass::GetVehicleDeagData'::`2'::ent
_BSS	ENDS
;	COMDAT ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
_BSS	SEGMENT
?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA DD 01H DUP (?) ; `FlightClass::GetVehicleDeagData'::`2'::pilotSlot
_BSS	ENDS
;	COMDAT ?queue@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
_BSS	SEGMENT
?queue@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA DD 01H DUP (?) ; `FlightClass::GetVehicleDeagData'::`2'::queue
_BSS	ENDS
;	COMDAT ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
_BSS	SEGMENT
?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA DD 01H DUP (?) ; `FlightClass::GetVehicleDeagData'::`2'::rwindex
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@4f5c0ff8
CONST	SEGMENT
__real@4f5c0ff8 DD 04f5c0ff8r			; 3.69203e+009
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@461c3c00
CONST	SEGMENT
__real@461c3c00 DD 0461c3c00r			; 9999
CONST	ENDS
;	COMDAT __real@454cffae
CONST	SEGMENT
__real@454cffae DD 0454cffaer			; 3279.98
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@42de450a
CONST	SEGMENT
__real@42de450a DD 042de450ar			; 111.135
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@428c0000
CONST	SEGMENT
__real@428c0000 DD 0428c0000r			; 70
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42393988
CONST	SEGMENT
__real@42393988 DD 042393988r			; 46.3062
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f693e32
CONST	SEGMENT
__real@3f693e32 DD 03f693e32r			; 0.911105
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CampBaseClass@@8
rdata$r	SEGMENT
??_R2CampBaseClass@@8 DD FLAT:??_R1A@?0A@EA@CampBaseClass@@8 ; CampBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CampBaseClass@@8
rdata$r	SEGMENT
??_R3CampBaseClass@@8 DD 00H				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCampBaseClass@@@8
_DATA	SEGMENT
??_R0?AVCampBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; CampBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCampBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CampBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CampBaseClass@@8 DD FLAT:??_R0?AVCampBaseClass@@@8 ; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2UnitClass@@8
rdata$r	SEGMENT
??_R2UnitClass@@8 DD FLAT:??_R1A@?0A@EA@UnitClass@@8	; UnitClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3UnitClass@@8
rdata$r	SEGMENT
??_R3UnitClass@@8 DD 00H				; UnitClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2UnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUnitClass@@@8
_DATA	SEGMENT
??_R0?AVUnitClass@@@8 DD FLAT:??_7type_info@@6B@	; UnitClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUnitClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@UnitClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UnitClass@@8 DD FLAT:??_R0?AVUnitClass@@@8 ; UnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R2AirUnitClass@@8
rdata$r	SEGMENT
??_R2AirUnitClass@@8 DD FLAT:??_R1A@?0A@EA@AirUnitClass@@8 ; AirUnitClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UnitClass@@8
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3AirUnitClass@@8
rdata$r	SEGMENT
??_R3AirUnitClass@@8 DD 00H				; AirUnitClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2AirUnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAirUnitClass@@@8
_DATA	SEGMENT
??_R0?AVAirUnitClass@@@8 DD FLAT:??_7type_info@@6B@	; AirUnitClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAirUnitClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@AirUnitClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AirUnitClass@@8 DD FLAT:??_R0?AVAirUnitClass@@@8 ; AirUnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AirUnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FlightClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FlightClass@@8 DD FLAT:??_R0?AVFlightClass@@@8 ; FlightClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FlightClass@@8
rdata$r	ENDS
;	COMDAT ??_R2FlightClass@@8
rdata$r	SEGMENT
??_R2FlightClass@@8 DD FLAT:??_R1A@?0A@EA@FlightClass@@8 ; FlightClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AirUnitClass@@8
	DD	FLAT:??_R1A@?0A@EA@UnitClass@@8
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FlightClass@@8
rdata$r	SEGMENT
??_R3FlightClass@@8 DD 00H				; FlightClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2FlightClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFlightClass@@@8
_DATA	SEGMENT
??_R0?AVFlightClass@@@8 DD FLAT:??_7type_info@@6B@	; FlightClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFlightClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FlightClass@@6B@
rdata$r	SEGMENT
??_R4FlightClass@@6B@ DD 00H				; FlightClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFlightClass@@@8
	DD	FLAT:??_R3FlightClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@NKMILAPK@Unit?5?$CFd?3?5Waypoint?5action?5?$CFd?5?$CImis@
CONST	SEGMENT
??_C@_0EM@NKMILAPK@Unit?5?$CFd?3?5Waypoint?5action?5?$CFd?5?$CImis@ DB 'U'
	DB	'nit %d: Waypoint action %d (mission: %s) didn''t have time. S'
	DB	'etting times.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GNBNJBMB@?$CF08x?5FlightClass?5?$AA@
CONST	SEGMENT
??_C@_0BC@GNBNJBMB@?$CF08x?5FlightClass?5?$AA@ DB '%08x FlightClass ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7FlightClass@@6B@
CONST	SEGMENT
??_7FlightClass@@6B@ DD FLAT:??_R4FlightClass@@6B@	; FlightClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@FlightClass@@UAEHXZ
	DD	FLAT:?Save@FalconEntity@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@FlightClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EFlightClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@VuEntity@@MAEHXZ
	DD	FLAT:?RemovalCallback@FlightClass@@UAEHXZ
	DD	FLAT:?InitData@CampBaseClass@@UAEXXZ
	DD	FLAT:?CleanupData@FalconEntity@@UAEXXZ
	DD	FLAT:?IsSimBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?IsCampBase@CampBaseClass@@UAE_NXZ
	DD	FLAT:?Wake@UnitClass@@UAEHXZ
	DD	FLAT:?Sleep@UnitClass@@UAEHXZ
	DD	FLAT:?GetCampID@CampBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FlightClass@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FlightClass@@UAEHXZ
	DD	FLAT:?OnGround@AirUnitClass@@UAEHXZ
	DD	FLAT:?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@FalconEntity@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@FalconEntity@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@CampBaseClass@@UAEHXZ
	DD	FLAT:?GetVt@AirUnitClass@@UBEMXZ
	DD	FLAT:?GetKias@AirUnitClass@@UBEMXZ
	DD	FLAT:?GetMovementType@AirUnitClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@UnitClass@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FlightClass@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@FlightClass@@UAEHXZ
	DD	FLAT:?IsAreaJamming@FlightClass@@UAEHXZ
	DD	FLAT:?HasSPJamming@FlightClass@@UAEHXZ
	DD	FLAT:?HasAreaJamming@FlightClass@@UAEHXZ
	DD	FLAT:?GetRCSFactor@UnitClass@@UAEMXZ
	DD	FLAT:?GetIRFactor@UnitClass@@UAEMXZ
	DD	FLAT:?GetRadarType@UnitClass@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@UnitClass@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?SetOwner@CampBaseClass@@UAEXE@Z
	DD	FLAT:?SendDeaggregateData@UnitClass@@UAEXPAVVuTargetEntity@@@Z
	DD	FLAT:?RecordCurrentState@UnitClass@@UAEHPAVFalconSessionEntity@@H@Z
	DD	FLAT:?Deaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?Reaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?TransferOwnership@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?InsertInSimLists@UnitClass@@UAEXMM@Z
	DD	FLAT:?RemoveFromSimLists@UnitClass@@UAEXXZ
	DD	FLAT:?DeaggregateFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?ReaggregateFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?TransferOwnershipFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?ApplyDamage@UnitClass@@UAEHW4DamageDataType@@PAHHF@Z
	DD	FLAT:?ApplyDamage@UnitClass@@UAEHPAVFalconCampWeaponsFire@@E@Z
	DD	FLAT:?DecodeDamageData@UnitClass@@UAEHPAEPAV1@PAVFalconDeathMessage@@@Z
	DD	FLAT:?CollectWeapons@FlightClass@@UAEHPAEW4MoveType@@QAFQAEH@Z
	DD	FLAT:?GetName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetFullName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetDivisionName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetHitChance@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetAproxHitChance@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetCombatStrength@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetAproxCombatStrength@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetWeaponRange@UnitClass@@UAEHHPAVFalconEntity@@@Z
	DD	FLAT:?GetAproxWeaponRange@UnitClass@@UAEHH@Z
	DD	FLAT:?GetDetectionRange@FlightClass@@UAEHH@Z
	DD	FLAT:?GetElectronicDetectionRange@UnitClass@@UAEHH@Z
	DD	FLAT:?CanDetect@UnitClass@@UAEHPAVFalconEntity@@@Z
	DD	FLAT:?StepRadar@CampBaseClass@@UAEHHHM@Z
	DD	FLAT:?GetNumberOfArcs@UnitClass@@UAEHXZ
	DD	FLAT:?GetArcRatio@UnitClass@@UAEMH@Z
	DD	FLAT:?GetArcRange@UnitClass@@UAEMH@Z
	DD	FLAT:?GetArcAngle@UnitClass@@UAEXHPAM0@Z
	DD	FLAT:?GetMissilesFlying@CampBaseClass@@UAEHXZ
	DD	FLAT:?ResetPlayerStatus@UnitClass@@UAEHXZ
	DD	FLAT:?GetComponentLocation@UnitClass@@UAEXPAF0H@Z
	DD	FLAT:?GetComponentAltitude@UnitClass@@UAEHH@Z
	DD	FLAT:?CanShootWeapon@UnitClass@@UAEHH@Z
	DD	FLAT:?GetDeaggregationPoint@FlightClass@@UAEHHPAPAVCampBaseClass@@@Z
	DD	FLAT:?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ
	DD	FLAT:?ShouldDeaggregate@FlightClass@@UAEHXZ
	DD	FLAT:?ClearDeaggregationData@UnitClass@@UAEXXZ
	DD	FLAT:?Reaction@FlightClass@@UAEHPAVCampBaseClass@@HM@Z
	DD	FLAT:?MoveUnit@FlightClass@@UAEHK@Z
	DD	FLAT:?DoCombat@FlightClass@@UAEHXZ
	DD	FLAT:?ChooseTactic@FlightClass@@UAEHXZ
	DD	FLAT:?CheckTactic@FlightClass@@UAEHH@Z
	DD	FLAT:?Father@UnitClass@@UBEHXZ
	DD	FLAT:?Real@FlightClass@@UAEHXZ
	DD	FLAT:?AdjustForSupply@UnitClass@@UAEMXZ
	DD	FLAT:?GetUnitSpeed@AirUnitClass@@UBEHXZ
	DD	FLAT:?DetectOnMove@FlightClass@@UAEHXZ
	DD	FLAT:?ChooseTarget@FlightClass@@UAEHXZ
	DD	FLAT:?MaxUpdateTime@FlightClass@@UBEKXZ
	DD	FLAT:?CombatTime@FlightClass@@UAEKXZ
	DD	FLAT:?GetUnitSupplyNeed@UnitClass@@UAEHH@Z
	DD	FLAT:?GetUnitFuelNeed@UnitClass@@UAEHH@Z
	DD	FLAT:?SupplyUnit@UnitClass@@UAEXHH@Z
	DD	FLAT:?GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z
	DD	FLAT:?IsDead@UnitClass@@UBEHXZ
	DD	FLAT:?SimSetLocation@FlightClass@@UAEXMMM@Z
	DD	FLAT:?SimSetOrientation@FlightClass@@UAEXMMM@Z
	DD	FLAT:?GetRealPosition@FlightClass@@UAEXPAM00@Z
	DD	FLAT:?GetBestVehicleWeapon@FlightClass@@UAEHHPAEW4MoveType@@HPAH@Z
	DD	FLAT:?GetVehicleHitChance@UnitClass@@UAEHHW4MoveType@@HH@Z
	DD	FLAT:?GetVehicleCombatStrength@UnitClass@@UAEHHW4MoveType@@H@Z
	DD	FLAT:?GetVehicleRange@UnitClass@@UAEHHHPAVFalconEntity@@@Z
	DD	FLAT:?GetUnitWeaponId@FlightClass@@UAEHHH@Z
	DD	FLAT:?GetUnitWeaponCount@FlightClass@@UAEHHH@Z
	DD	FLAT:?SetUnitLastMove@FlightClass@@UAEXK@Z
	DD	FLAT:?SetCombatTime@FlightClass@@UAEXK@Z
	DD	FLAT:?SetBurntFuel@FlightClass@@UAEXJ@Z
	DD	FLAT:?SetUnitMission@FlightClass@@UAEXE@Z
	DD	FLAT:?SetUnitRole@UnitClass@@UAEXE@Z
	DD	FLAT:?SetUnitPriority@FlightClass@@UAEXH@Z
	DD	FLAT:?SetUnitMissionID@FlightClass@@UAEXH@Z
	DD	FLAT:?SetUnitMissionTarget@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitTOT@FlightClass@@UAEXK@Z
	DD	FLAT:?SetUnitSquadron@FlightClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z
	DD	FLAT:?GetNumberOfLoadouts@FlightClass@@UAEHXZ
	DD	FLAT:?GetMoveTime@FlightClass@@UAEKXZ
	DD	FLAT:?GetCombatTime@FlightClass@@UAEKXZ
	DD	FLAT:?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ
	DD	FLAT:?GetBurntFuel@FlightClass@@UAEHXZ
	DD	FLAT:?GetUnitMission@FlightClass@@UAE?AW4MissionTypeEnum@@XZ
	DD	FLAT:?GetUnitNormalRole@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitCurrentRole@FlightClass@@UBEHXZ
	DD	FLAT:?GetUnitPriority@FlightClass@@UAEHXZ
	DD	FLAT:?GetUnitMissionTarget@FlightClass@@UAEPAVCampBaseClass@@XZ
	DD	FLAT:?GetUnitMissionTargetID@FlightClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitMissionID@FlightClass@@UAEHXZ
	DD	FLAT:?GetUnitTOT@FlightClass@@UAEKXZ
	DD	FLAT:?GetUnitSquadron@FlightClass@@UAEPAVUnitClass@@XZ
	DD	FLAT:?GetUnitSquadronID@FlightClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitAirbase@FlightClass@@UAEPAVCampBaseClass@@XZ
	DD	FLAT:?GetUnitAirbaseID@FlightClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z
	DD	FLAT:?DumpWeapons@FlightClass@@UAEHXZ
	DD	FLAT:?ETA@FlightClass@@UAEKXZ
	DD	FLAT:?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ
	DD	FLAT:?BuildMission@UnitClass@@UAEHXZ
	DD	FLAT:?BuildMission@FlightClass@@UAEHPAVMissionRequestClass@@@Z
	DD	FLAT:?IncrementTime@FlightClass@@UAEXK@Z
	DD	FLAT:?UseFuel@FlightClass@@UAEXJ@Z
	DD	FLAT:?SetUnitSpecialty@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitSupply@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMorale@UnitClass@@UAEXH@Z
	DD	FLAT:?SetSquadronFuel@UnitClass@@UAEXJ@Z
	DD	FLAT:?SetUnitStores@UnitClass@@UAEXHE@Z
	DD	FLAT:?SetLastResupply@UnitClass@@UAEXH@Z
	DD	FLAT:?SetLastResupplyTime@UnitClass@@UAEXK@Z
	DD	FLAT:?GetUnitSpecialty@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitSupply@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMorale@UnitClass@@UAEHXZ
	DD	FLAT:?GetSquadronFuel@UnitClass@@UAEJXZ
	DD	FLAT:?GetUnitStores@UnitClass@@UAEEH@Z
	DD	FLAT:?GetLastResupplyTime@UnitClass@@UAEKXZ
	DD	FLAT:?GetLastResupply@UnitClass@@UAEHXZ
	DD	FLAT:?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z
	DD	FLAT:?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z
	DD	FLAT:?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z
	DD	FLAT:?GetUnitAssemblyPoint@FlightClass@@UAEXHPAF0@Z
	DD	FLAT:?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z
	DD	FLAT:?SetUnitOrders@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitFatigue@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMode@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitPosition@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitDivision@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitHeading@UnitClass@@UAEXH@Z
	DD	FLAT:?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitOrders@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitFatigue@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitElement@UnitClass@@UAEPAV1@H@Z
	DD	FLAT:?GetUnitElement@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMode@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitPosition@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitDivision@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitHeading@UnitClass@@UAEHXZ
	DD	FLAT:?SetUnitNextMove@UnitClass@@UAEXXZ
	DD	FLAT:?ClearUnitPath@UnitClass@@UAEXXZ
	DD	FLAT:?GetNextMoveDirection@UnitClass@@UAEHXZ
	DD	FLAT:?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z
	DD	FLAT:?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z
	DD	FLAT:?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z
	DD	FLAT:?CheckForSurrender@UnitClass@@UAEHXZ
	DD	FLAT:?RallyUnit@UnitClass@@UAEHH@Z
	DD	FLAT:?GetUnitParent@UnitClass@@UBEPAV1@XZ
	DD	FLAT:?GetUnitParentID@FlightClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetUnitParent@FlightClass@@UAEXPAVUnitClass@@@Z
	DD	FLAT:?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ
	DD	FLAT:?GetNextUnitElement@UnitClass@@UBEPAV1@XZ
	DD	FLAT:?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z
	DD	FLAT:?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z
	DD	FLAT:?AddUnitChild@UnitClass@@UAEXPAV1@@Z
	DD	FLAT:?DisposeChildren@UnitClass@@UAEXXZ
	DD	FLAT:?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?ReorganizeUnit@UnitClass@@UAEXXZ
	DD	FLAT:?UpdateParentStatistics@UnitClass@@UAEHXZ
	DD	FLAT:?IsHelicopter@AirUnitClass@@UBEHXZ
	DD	FLAT:?GetLoadout@FlightClass@@UAEPAULoadoutStruct@@H@Z
	DD	FLAT:?SetUnitMissionTarget@FlightClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?RemoveLoadout@FlightClass@@UAEXXZ
	DD	FLAT:?GetUnitParent@FlightClass@@UAEPAVUnitClass@@XZ
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z$0
__unwindtable$?AbortFlight@@YAXPAVFlightClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AbortFlight@@YAXPAVFlightClass@@@Z$0
__unwindtable$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z$0
__unwindtable$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z$0
__unwindtable$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z$0
__unwindtable$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z$0
__unwindtable$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z$0
__unwindtable$??1FlightClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FlightClass@@UAE@XZ$0
__unwindtable$??0FlightClass@@QAE@GPAVUnitClass@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FlightClass@@QAE@GPAVUnitClass@@0@Z$0
__unwindtable$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z$0
__unwindtable$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ$1
__unwindtable$??0FlightClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FlightClass@@QAE@PAPAEPAJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FlightClass@@QAE@PAPAEPAJ@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0FlightClass@@QAE@PAPAEPAJ@Z$2
__unwindtable$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$3
__ehfuncinfo$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AbortFlight@@YAXPAVFlightClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AbortFlight@@YAXPAVFlightClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ChooseTarget@FlightClass@@UAEHXZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?ChooseTarget@FlightClass@@UAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1FlightClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1FlightClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FlightClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0FlightClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FlightClass@@QAE@GPAVUnitClass@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FlightClass@@QAE@GPAVUnitClass@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ChooseTarget@FlightClass@@UAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$7
	DD	04H
	DD	FLAT:__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_LastawackWarning$initializer$ DD FLAT:??__ELastawackWarning@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_e$ = 12						; size = 4
?CheckValidType@@YAHPAVCampBaseClass@@0@Z PROC		; CheckValidType

; 3151 : {

	push	ebp
	mov	ebp, esp
	push	esi

; 3152 : 	// If enemy is not a flight, GCI is automatic
; 3153 : 	if (!e->IsFlight())

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN13@CheckValid

; 3154 : 		return TRUE;

	mov	eax, 1
	jmp	$LN14@CheckValid
$LN13@CheckValid:

; 3155 : 
; 3156 : 	// If we're not a unit, GCI is automatic
; 3157 : 	if (!u->IsUnit())

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	jne	SHORT $LN12@CheckValid

; 3158 : 		return TRUE;

	mov	eax, 1
	jmp	$LN14@CheckValid
$LN12@CheckValid:

; 3159 : 
; 3160 : 	// Special case if we're a flight
; 3161 : 	if (u->IsFlight()) {

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN11@CheckValid

; 3162 : 		// AWACS uses/sets GCI always
; 3163 : 		if (u->GetSType() == STYPE_UNIT_AWACS)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 5
	jne	SHORT $LN10@CheckValid

; 3164 : 			return TRUE;

	mov	eax, 1
	jmp	$LN14@CheckValid
$LN10@CheckValid:

; 3165 : 
; 3166 : 		// Against air enemy, only fighter and fighter.bomber can use GCI
; 3167 : 		if (u->GetSType() != STYPE_UNIT_FIGHTER && u->GetSType() != STYPE_UNIT_FIGHTER_BOMBER)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	edx, al
	cmp	edx, 8
	je	SHORT $LN9@CheckValid
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 9
	je	SHORT $LN9@CheckValid

; 3168 : 			return FALSE;

	xor	eax, eax
	jmp	$LN14@CheckValid
$LN9@CheckValid:

; 3169 : 
; 3170 : 	}

	jmp	SHORT $LN8@CheckValid
$LN11@CheckValid:

; 3171 : 	// Only air defense battalions uses/sets GCI
; 3172 : 	else if (u->IsBattalion()) {

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	je	SHORT $LN7@CheckValid

; 3173 : 		if (u->GetSType() != STYPE_UNIT_AIR_DEFENSE)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 1
	je	SHORT $LN6@CheckValid

; 3174 : 			return FALSE;

	xor	eax, eax
	jmp	$LN14@CheckValid
$LN6@CheckValid:

; 3175 : 	}

	jmp	SHORT $LN8@CheckValid
$LN7@CheckValid:

; 3176 : 	// 2002-02-11 ADDED BY S.G. Only carrier and battleships uses/sets GCI
; 3177 : 	else if (u->IsTaskForce()) {

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+264]
	call	edx
	test	eax, eax
	je	SHORT $LN8@CheckValid

; 3178 : 		if (u->GetSType() != STYPE_UNIT_BATTLESHIP && u->GetSType() != STYPE_UNIT_CARRIER)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 2
	je	SHORT $LN8@CheckValid
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 3
	je	SHORT $LN8@CheckValid

; 3179 : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN14@CheckValid
$LN8@CheckValid:

; 3180 : 	}
; 3181 : 	// If we get here, we're a battalion or a valid flight stype
; 3182 : 
; 3183 : 	// If our moral is broken, no GCI
; 3184 : 	if (((UnitClass *)u)->Broken())

	mov	ecx, DWORD PTR _u$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	je	SHORT $LN2@CheckValid

; 3185 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN14@CheckValid
$LN2@CheckValid:

; 3186 : 
; 3187 : 	// If skill is below the threshold, don't use/set GCI
; 3188 : 	// 80 is cadets, 90 is veteran and 100 is ace.
; 3189 : 	// Cadets have 25% chance, veteran 50% chance and ace 100% chance of using/setting GCI
; 3190 : 	if (TeamInfo[u->GetTeam()] && TeamInfo[u->GetTeam()]->airExperience < 75 + rand() % 20)

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	je	SHORT $LN1@CheckValid
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	movzx	esi, BYTE PTR [edx+612]
	call	_rand
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	add	edx, 75					; 0000004bH
	cmp	esi, edx
	jge	SHORT $LN1@CheckValid

; 3191 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN14@CheckValid
$LN1@CheckValid:

; 3192 : 
; 3193 : 	return TRUE;

	mov	eax, 1
$LN14@CheckValid:

; 3194 : }

	pop	esi
	pop	ebp
	ret	0
?CheckValidType@@YAHPAVCampBaseClass@@0@Z ENDP		; CheckValidType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_mrs$ = -8						; size = 4
_couldIdent$ = -4					; size = 4
_us$ = 8						; size = 4
_them$ = 12						; size = 4
_d$ = 16						; size = 4
_mt$ = 20						; size = 4
?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z PROC		; CanItIdentify

; 1566 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 1567 : 	float mrs;
; 1568 : 	int couldIdent = FALSE;

	mov	DWORD PTR _couldIdent$[ebp], 0

; 1569 : 
; 1570 : 	// Can you identify visually?
; 1571 : 	if (d < GetVisualDetectionRange(mt))

	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	call	?GetVisualDetectionRange@@YAHH@Z	; GetVisualDetectionRange
	add	esp, 4
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN10@CanItIdent

; 1572 : 		return TRUE;

	mov	eax, 1
	jmp	$LN11@CanItIdent
$LN10@CanItIdent:

; 1573 : 
; 1574 : 	// We can only identify ground thing visually
; 1575 : 	if (them->OnGround())

	mov	ecx, DWORD PTR _them$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _them$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN9@CanItIdent

; 1576 : 		return FALSE;

	xor	eax, eax
	jmp	$LN11@CanItIdent
$LN9@CanItIdent:

; 1577 : 
; 1578 : 	if (us->IsUnit()) {

	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN8@CanItIdent

; 1579 : 		if (GetVehicleClassData(((UnitClass *)us)->class_data->VehicleType[0])->Flags & (VEH_HAS_NCTR | VEH_HAS_EXACT_RWR))

	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	eax, 2
	imul	eax, 0
	movsx	ecx, WORD PTR [edx+eax+68]
	push	ecx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	edx, DWORD PTR [eax+4]
	and	edx, 786432				; 000c0000H
	je	SHORT $LN7@CanItIdent

; 1580 : 			couldIdent = TRUE;

	mov	DWORD PTR _couldIdent$[ebp], 1
$LN7@CanItIdent:

; 1581 : 	}

	jmp	SHORT $LN4@CanItIdent
$LN8@CanItIdent:

; 1582 : 	else if (us->IsObjective()) {

	mov	eax, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN4@CanItIdent

; 1583 : 		if (((ObjectiveClass *)us)->HasNCTR())

	mov	ecx, DWORD PTR _us$[ebp]
	call	?HasNCTR@ObjectiveClass@@QAEHXZ		; ObjectiveClass::HasNCTR
	test	eax, eax
	je	SHORT $LN4@CanItIdent

; 1584 : 			couldIdent = TRUE;

	mov	DWORD PTR _couldIdent$[ebp], 1
$LN4@CanItIdent:

; 1585 : 	}
; 1586 : 
; 1587 : 	// If we can ident, randomize a bit, and tend to say no against the edge of the envelope
; 1588 : 	if (couldIdent) {

	cmp	DWORD PTR _couldIdent$[ebp], 0
	je	SHORT $LN1@CanItIdent

; 1589 : 		mrs = (float)(us->GetDetectionRange(mt)) * g_fIdentFactor; // 2002-03-07 MODIFIED BY S.G. Don't id at full detection range but at a percentage of it

	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax+416]
	call	edx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?g_fIdentFactor@@3MA
	movss	DWORD PTR _mrs$[ebp], xmm0

; 1590 : 		// If too far, we can't id
; 1591 : 		if (d > mrs)

	movss	xmm0, DWORD PTR _d$[ebp]
	comiss	xmm0, DWORD PTR _mrs$[ebp]
	jbe	SHORT $LN2@CanItIdent

; 1592 : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN11@CanItIdent
$LN2@CanItIdent:

; 1593 : 
; 1594 : 		// In 'range', further you are, less chance you have of identifying the target
; 1595 : 		if ((int)((mrs - d) / mrs * 100.0f) > rand() % 100)

	movss	xmm0, DWORD PTR _mrs$[ebp]
	subss	xmm0, DWORD PTR _d$[ebp]
	divss	xmm0, DWORD PTR _mrs$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si esi, xmm0
	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	esi, edx
	jle	SHORT $LN1@CanItIdent

; 1596 : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN11@CanItIdent
$LN1@CanItIdent:

; 1597 : 	}
; 1598 : 
; 1599 : 	return FALSE;

	xor	eax, eax
$LN11@CanItIdent:

; 1600 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z ENDP		; CanItIdentify
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
;	COMDAT ??__ELastawackWarning@@YAXXZ
text$yc	SEGMENT
??__ELastawackWarning@@YAXXZ PROC			; `dynamic initializer for 'LastawackWarning'', COMDAT

; 145  : long LastawackWarning = SimLibElapsedTime;//me123

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR ?LastawackWarning@@3JA, eax	; LastawackWarning
	pop	ebp
	ret	0
??__ELastawackWarning@@YAXXZ ENDP			; `dynamic initializer for 'LastawackWarning''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_w$ = -4						; size = 4
_flight$ = 8						; size = 4
?GoHome@@YAXPAVFlightClass@@@Z PROC			; GoHome

; 4609 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 4610 : 	WayPoint	w;
; 4611 : 
; 4612 : 	w = flight->GetCurrentUnitWP();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 4613 : 
; 4614 : 	// RV - Biker - Check if we are already at way home
; 4615 : 	if(w && w->GetWPAction() == WP_LAND){

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN5@GoHome
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	jne	SHORT $LN5@GoHome

; 4616 : 		return;

	jmp	SHORT $LN6@GoHome
$LN5@GoHome:

; 4617 : 	}
; 4618 : 
; 4619 : 	//	w = flight->GetCurrentUnitWP();
; 4620 : 	w = flight->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN4@GoHome:

; 4621 : 	while (w && w->GetWPAction() != WP_LAND){

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN3@GoHome
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	je	SHORT $LN3@GoHome

; 4622 : 		w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 4623 : 	}

	jmp	SHORT $LN4@GoHome
$LN3@GoHome:

; 4624 : 	if (!w){

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN2@GoHome

; 4625 : 		w = flight->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 4626 : 	}
; 4627 : 	// RV - Biker - Go to last WP before home base
; 4628 : 	else{

	jmp	SHORT $LN1@GoHome
$LN2@GoHome:

; 4629 : 		w = w->GetPrevWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _w$[ebp], eax
$LN1@GoHome:

; 4630 : 	}
; 4631 : 
; 4632 : 	flight->SetCurrentUnitWP(w);

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z ; UnitClass::SetCurrentUnitWP
$LN6@GoHome:

; 4633 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GoHome@@YAXPAVFlightClass@@@Z ENDP			; GoHome
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_ktmr$ = -12						; size = 4
_rating$ = -8						; size = 4
_pc$ = -4						; size = 4
_flight$ = 8						; size = 4
_pilotSlot$ = 12					; size = 4
_newRating$ = 16					; size = 4
?RatePilot@@YAXPAVFlightClass@@HH@Z PROC		; RatePilot

; 4527 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4528 : 	PilotClass	*pc;
; 4529 : 	int			rating,ktmr;
; 4530 : 
; 4531 : 	// pc was uninitialized, so if flight was null... crash
; 4532 : 	if (flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN5@RatePilot

; 4533 : 	{
; 4534 : 		pc = flight->GetPilotData(pilotSlot);

	mov	eax, DWORD PTR _pilotSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotData@FlightClass@@QAEPAVPilotClass@@H@Z ; FlightClass::GetPilotData
	mov	DWORD PTR _pc$[ebp], eax

; 4535 : 		if (pc && pc->missions_flown)

	cmp	DWORD PTR _pc$[ebp], 0
	je	$LN5@RatePilot
	mov	ecx, DWORD PTR _pc$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	test	edx, edx
	je	$LN5@RatePilot

; 4536 : 		{
; 4537 : 			ktmr = (pc->aa_kills*2 + pc->ag_kills + pc->as_kills + pc->an_kills*2)/pc->missions_flown;

	mov	eax, DWORD PTR _pc$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _pc$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _pc$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	ecx, eax
	mov	edx, DWORD PTR _pc$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR _pc$[ebp]
	movsx	ecx, WORD PTR [ecx+8]
	cdq
	idiv	ecx
	mov	DWORD PTR _ktmr$[ebp], eax

; 4538 : 			if (ktmr > newRating)

	mov	edx, DWORD PTR _ktmr$[ebp]
	cmp	edx, DWORD PTR _newRating$[ebp]
	jle	SHORT $LN2@RatePilot

; 4539 : 				newRating++;

	mov	eax, DWORD PTR _newRating$[ebp]
	add	eax, 1
	mov	DWORD PTR _newRating$[ebp], eax
$LN2@RatePilot:

; 4540 : 			if (ktmr < newRating && newRating > 0)

	mov	ecx, DWORD PTR _ktmr$[ebp]
	cmp	ecx, DWORD PTR _newRating$[ebp]
	jge	SHORT $LN1@RatePilot
	cmp	DWORD PTR _newRating$[ebp], 0
	jle	SHORT $LN1@RatePilot

; 4541 : 				newRating--;

	mov	edx, DWORD PTR _newRating$[ebp]
	sub	edx, 1
	mov	DWORD PTR _newRating$[ebp], edx
$LN1@RatePilot:

; 4542 : 			rating = pc->GetPilotRating() * (pc->missions_flown - 1);

	mov	ecx, DWORD PTR _pc$[ebp]
	call	?GetPilotRating@PilotClass@@QAEHXZ	; PilotClass::GetPilotRating
	mov	ecx, DWORD PTR _pc$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	sub	edx, 1
	imul	eax, edx
	mov	DWORD PTR _rating$[ebp], eax

; 4543 : 			rating = (rating + newRating) / pc->missions_flown;

	mov	eax, DWORD PTR _rating$[ebp]
	add	eax, DWORD PTR _newRating$[ebp]
	mov	ecx, DWORD PTR _pc$[ebp]
	movsx	ecx, WORD PTR [ecx+8]
	cdq
	idiv	ecx
	mov	DWORD PTR _rating$[ebp], eax

; 4544 : 			pc->SetPilotSR(pc->GetPilotSkill(),rating);

	movzx	edx, BYTE PTR _rating$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pc$[ebp]
	call	?GetPilotSkill@PilotClass@@QAEHXZ	; PilotClass::GetPilotSkill
	push	eax
	mov	ecx, DWORD PTR _pc$[ebp]
	call	?SetPilotSR@PilotClass@@QAEXEE@Z	; PilotClass::SetPilotSR
$LN5@RatePilot:

; 4545 : 		}
; 4546 : 	}
; 4547 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RatePilot@@YAXPAVFlightClass@@HH@Z ENDP		; RatePilot
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\squadron.h
;	COMDAT ?SetPilotStatus@SquadronClass@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pilot$ = 8						; size = 4
_s$ = 12						; size = 4
?SetPilotStatus@SquadronClass@@QAEXHH@Z PROC		; SquadronClass::SetPilotStatus, COMDAT
; _this$ = ecx

; 151  : 	void SetPilotStatus (int pilot, int s)			{ pilot_data[pilot].pilot_status = (uchar)s; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pilot$[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _s$[ebp]
	mov	BYTE PTR [ecx+eax+869], dl
	mov	esp, ebp
	pop	ebp
	ret	8
?SetPilotStatus@SquadronClass@@QAEXHH@Z ENDP		; SquadronClass::SetPilotStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\squadron.h
;	COMDAT ?GetPilotData@SquadronClass@@QAEPAVPilotClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pilot$ = 8						; size = 4
?GetPilotData@SquadronClass@@QAEPAVPilotClass@@H@Z PROC	; SquadronClass::GetPilotData, COMDAT
; _this$ = ecx

; 146  : 	PilotClass* GetPilotData (int pilot)			{ return &pilot_data[pilot]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pilot$[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax+866]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPilotData@SquadronClass@@QAEPAVPilotClass@@H@Z ENDP	; SquadronClass::GetPilotData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\squadron.h
;	COMDAT ?GetPilotID@SquadronClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pilot$ = 8						; size = 4
?GetPilotID@SquadronClass@@QAEHH@Z PROC			; SquadronClass::GetPilotID, COMDAT
; _this$ = ecx

; 145  : 	int GetPilotID (int pilot)						{ return pilot_data[pilot].pilot_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pilot$[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [ecx+eax+866]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPilotID@SquadronClass@@QAEHH@Z ENDP			; SquadronClass::GetPilotID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -108						; size = 4
tv287 = -104						; size = 4
$T3 = -100						; size = 4
$T4 = -96						; size = 4
tv159 = -92						; size = 4
_bo$ = -88						; size = 4
_bd$ = -84						; size = 4
_d$ = -80						; size = 4
_pa_wp$ = -76						; size = 4
_oy$ = -72						; size = 2
$T5 = -68						; size = 4
_ox$ = -64						; size = 2
_target_wp$ = -60					; size = 4
_oit$ = -56						; size = 4
_homebase$ = -52					; size = 4
_target$ = -48						; size = 4
_y$ = -44						; size = 2
_x$ = -40						; size = 2
_w$ = -36						; size = 4
_o$ = -32						; size = 4
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z PROC ; FindAlternateStrip

; 4688 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4689 : 	Objective		o,bo=NULL;

	mov	DWORD PTR _bo$[ebp], 0

; 4690 : 	CampBaseClass   *homebase = NULL, *target = NULL;	// 2001-10-09 M.N.

	mov	DWORD PTR _homebase$[ebp], 0
	mov	DWORD PTR _target$[ebp], 0

; 4691 : 	GridIndex		x,y,ox,oy;
; 4692 : 	WayPoint		w,pa_wp=NULL,target_wp=NULL;

	mov	DWORD PTR _pa_wp$[ebp], 0
	mov	DWORD PTR _target_wp$[ebp], 0

; 4693 : 	float			d,bd=9999.0F;

	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR _bd$[ebp], xmm0

; 4694 : 	VuGridIterator	*oit;
; 4695 : 
; 4696 : 	w = flight->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN19@FindAltern:

; 4697 : 	while (w && w->GetWPAction() != WP_POSTASSEMBLE)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN18@FindAltern
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 3
	je	SHORT $LN18@FindAltern

; 4698 : 	{
; 4699 : 		if (w->GetWPAction() == WP_POSTASSEMBLE)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 3
	jne	SHORT $LN17@FindAltern

; 4700 : 			pa_wp = w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _pa_wp$[ebp], eax
$LN17@FindAltern:

; 4701 : 		if (w->GetWPFlags() & WPF_TARGET)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	je	SHORT $LN16@FindAltern

; 4702 : 		{
; 4703 : 			if (w->GetWPTarget())

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	test	eax, eax
	je	SHORT $LN15@FindAltern

; 4704 : 				target = w->GetWPTarget();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _target$[ebp], eax
$LN15@FindAltern:

; 4705 : 			target_wp = w;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _target_wp$[ebp], ecx
$LN16@FindAltern:

; 4706 : 		}
; 4707 : 		if (w->GetWPAction() == WP_TAKEOFF)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	SHORT $LN14@FindAltern

; 4708 : 			homebase = w->GetWPTarget();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _homebase$[ebp], eax
$LN14@FindAltern:

; 4709 : 		w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 4710 : 	}

	jmp	SHORT $LN19@FindAltern
$LN18@FindAltern:

; 4711 : 	if (pa_wp){

	cmp	DWORD PTR _pa_wp$[ebp], 0
	je	SHORT $LN13@FindAltern

; 4712 : 		pa_wp->GetWPLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pa_wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation
	jmp	SHORT $LN10@FindAltern
$LN13@FindAltern:

; 4713 : 	}
; 4714 : 	else if (target_wp){

	cmp	DWORD PTR _target_wp$[ebp], 0
	je	SHORT $LN11@FindAltern

; 4715 : 		target_wp->GetWPLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _target_wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 4716 : 	}
; 4717 : 	else{

	jmp	SHORT $LN10@FindAltern
$LN11@FindAltern:

; 4718 : 		flight->GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN10@FindAltern:

; 4719 : 	}
; 4720 : 
; 4721 : 	/*	if (homebaseID)
; 4722 : 	homebase = (Objective) vuDatabase->Find(homebaseID);
; 4723 : 	*/
; 4724 : 	// sfr: xy order
; 4725 : 	::vector pos;
; 4726 : 	ConvertGridToSim(x, y, &pos);

	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 4727 : #ifdef VU_GRID_TREE_Y_MAJOR
; 4728 : 	oit = new VuGridIterator(ObjProxList, pos.y, pos.x,(BIG_SCALAR)GridToSim(MAX_AIR_SEARCH*2));

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN22@FindAltern
	movsx	edx, WORD PTR ?MAX_AIR_SEARCH@@3FA	; MAX_AIR_SEARCH
	shl	edx, 1
	push	edx
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN23@FindAltern
$LN22@FindAltern:
	mov	DWORD PTR tv159[ebp], 0
$LN23@FindAltern:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _oit$[ebp], edx

; 4729 : #else
; 4730 : 	oit = new VuGridIterator(ObjProxList, pos.x, pos.y,(BIG_SCALAR)GridToSim(MAX_AIR_SEARCH*2));
; 4731 : #endif
; 4732 : 
; 4733 : 	o = (Objective) oit->GetFirst();

	mov	ecx, DWORD PTR _oit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN27@FindAltern:

; 4734 : 	while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN8@FindAltern

; 4735 : 		if (
; 4736 : 			(o->GetType() == TYPE_AIRBASE || o->GetType() == TYPE_AIRSTRIP) && 
; 4737 : 			o->GetTeam() == flight->GetTeam() && !o->IsNearfront()
; 4738 : 		){

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 1
	je	SHORT $LN6@FindAltern
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 2
	jne	$LN1@FindAltern
$LN6@FindAltern:
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	$LN1@FindAltern
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsNearfront@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsNearfront
	test	eax, eax
	jne	$LN1@FindAltern

; 4739 : 			// 2002-04-17 MN modified - 
; 4740 : 			// be the alternate airstrip neither a target 
; 4741 : 			// airbase nor the home airbase (airlift have airbases as target)
; 4742 : 			if (
; 4743 : 				target && 
; 4744 : 				(target->GetType() == TYPE_AIRBASE || target->GetType() == TYPE_AIRSTRIP) && 
; 4745 : 				o->GetCampID() == target->GetCampID() || 
; 4746 : 				homebase && o->GetCampID() == homebase->GetCampID()
; 4747 : 			){

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN3@FindAltern
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN2@FindAltern
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 2
	jne	SHORT $LN3@FindAltern
$LN2@FindAltern:
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	esi, ax
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	esi, ecx
	je	SHORT $LN4@FindAltern
$LN3@FindAltern:
	cmp	DWORD PTR _homebase$[ebp], 0
	je	SHORT $LN5@FindAltern
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	movsx	esi, ax
	mov	eax, DWORD PTR _homebase$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _homebase$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	esi, ecx
	jne	SHORT $LN5@FindAltern
$LN4@FindAltern:

; 4748 : 				o = (Objective) oit->GetNext();

	mov	ecx, DWORD PTR _oit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 4749 : 				continue;

	jmp	$LN27@FindAltern
$LN5@FindAltern:

; 4750 : 			}
; 4751 : 
; 4752 : 			o->GetLocation(&ox, &oy);

	lea	edx, DWORD PTR _oy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 4753 : 			d = Distance(x, y, ox, oy);

	movzx	ecx, WORD PTR _oy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ox$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 4754 : 			if (d < bd){

	movss	xmm0, DWORD PTR _bd$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN1@FindAltern

; 4755 : 				bd = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _bd$[ebp], xmm0

; 4756 : 				bo = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _bo$[ebp], edx
$LN1@FindAltern:

; 4757 : 			}
; 4758 : 		}
; 4759 : 		o = (Objective) oit->GetNext();

	mov	ecx, DWORD PTR _oit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 4760 : 	}

	jmp	$LN27@FindAltern
$LN8@FindAltern:

; 4761 : 	delete oit;

	mov	eax, DWORD PTR _oit$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN24@FindAltern
	push	1
	mov	edx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR tv287[ebp], eax
	jmp	SHORT $LN25@FindAltern
$LN24@FindAltern:
	mov	DWORD PTR tv287[ebp], 0
$LN25@FindAltern:

; 4762 : 	return bo;

	mov	eax, DWORD PTR _bo$[ebp]

; 4763 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindAlternateStrip@@YAPAVObjectiveClass@@PAVFlightClass@@@Z ENDP ; FindAlternateStrip
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 8
$T3 = -56						; size = 8
$T4 = -48						; size = 4
tv153 = -44						; size = 4
$T5 = -40						; size = 4
tv142 = -36						; size = 4
_e$ = -32						; size = 4
_pack$ = -28						; size = 4
_msg$ = -24						; size = 4
_x$ = -20						; size = 2
_y$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
?AbortFlight@@YAXPAVFlightClass@@@Z PROC		; AbortFlight

; 4636 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AbortFlight@@YAXPAVFlightClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4637 : 	Unit pack, e;
; 4638 : 	GridIndex x = 0, y = 0;

	xor	eax, eax
	mov	WORD PTR _x$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _y$[ebp], cx

; 4639 : 
; 4640 : 	// MonoPrint ("Flight %d aborting. \n",flight->GetCampID());
; 4641 : 
; 4642 : 	flight->GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 4643 : 
; 4644 : 	// Drop any cargo we're carrying
; 4645 : 	// RV - Biker - Only drop if we are not over water
; 4646 : 	if (flight->Cargo() && GetCover(x, y) != Water){

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Cargo@UnitClass@@QBEHXZ		; UnitClass::Cargo
	test	eax, eax
	je	SHORT $LN6@AbortFligh
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@AbortFligh

; 4647 : 		flight->UnloadUnit();			

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?UnloadUnit@UnitClass@@QAEXXZ		; UnitClass::UnloadUnit
$LN6@AbortFligh:

; 4648 : 	}
; 4649 : 
; 4650 : 	/*
; 4651 : 	// If we've already gotten to our target, and it's past our TOT, don't abort
; 4652 : 	if (((Flight)flight)->eval_flags & FEVAL_GOT_TO_TARGET && flight->GetUnitTOT() < TheCampaign.CurrentTime)
; 4653 : 	return;
; 4654 : 	*/
; 4655 : 
; 4656 : 	// Radio Chatter message
; 4657 : 	FalconRadioChatterMessage *msg = new FalconRadioChatterMessage(flight->Id(), FalconLocalGame);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN11@AbortFligh
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@AbortFligh
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN10@AbortFligh
$LN9@AbortFligh:
	mov	DWORD PTR tv142[ebp], 0
$LN10@AbortFligh:
	push	1
	mov	ecx, DWORD PTR tv142[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN12@AbortFligh
$LN11@AbortFligh:
	mov	DWORD PTR tv153[ebp], 0
$LN12@AbortFligh:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _msg$[ebp], ecx

; 4658 : 	msg->dataBlock.from = flight->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 4659 : 	msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+60], 1

; 4660 : 	msg->dataBlock.voice_id = flight->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	edx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [edx+61], al

; 4661 : 	msg->dataBlock.message = rcFLIGHTRTB;

	mov	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [ecx+62], ax

; 4662 : 	msg->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 4663 : 	msg->dataBlock.edata[1] = flight->GetFlightLeadCallNumber();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ ; FlightClass::GetFlightLeadCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 4664 : 	FalconSendMessage(msg, FALSE);

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 4665 : 
; 4666 : 	if (!flight->Aborted())

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	jne	SHORT $LN5@AbortFligh

; 4667 : 		TheCampaign.MissionEvaluator->RegisterAbort(flight);

	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?RegisterAbort@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z ; MissionEvaluationClass::RegisterAbort
$LN5@AbortFligh:

; 4668 : 
; 4669 : 	flight->SetAborted(1);

	push	1
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?SetAborted@UnitClass@@QAEXH@Z		; UnitClass::SetAborted

; 4670 : 	// If it's a critical component, abort the rest of the Mission Group
; 4671 : 	if (!flight->GetUnitMissionID())

	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax+688]
	call	edx
	test	eax, eax
	jne	SHORT $LN7@AbortFligh

; 4672 : 	{
; 4673 : 		pack = flight->GetUnitParent();

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pack$[ebp], eax

; 4674 : 		if (pack)

	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $LN7@AbortFligh

; 4675 : 		{
; 4676 : 			pack->SetAborted(1);

	push	1
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?SetAborted@UnitClass@@QAEXH@Z		; UnitClass::SetAborted

; 4677 : 			e = pack->GetFirstUnitElement();

	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN2@AbortFligh:

; 4678 : 			while (e && e->GetUnitMissionID())

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN7@AbortFligh
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+688]
	call	eax
	test	eax, eax
	je	SHORT $LN7@AbortFligh

; 4679 : 			{
; 4680 : 				AbortFlight((Flight)e);

	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?AbortFlight@@YAXPAVFlightClass@@@Z	; AbortFlight
	add	esp, 4

; 4681 : 				e = pack->GetNextUnitElement();

	mov	edx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [eax+960]
	call	edx
	mov	DWORD PTR _e$[ebp], eax

; 4682 : 			}

	jmp	SHORT $LN2@AbortFligh
$LN7@AbortFligh:

; 4683 : 		}
; 4684 : 	}
; 4685 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AbortFlight@@YAXPAVFlightClass@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AbortFlight@@YAXPAVFlightClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AbortFlight@@YAXPAVFlightClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AbortFlight@@YAXPAVFlightClass@@@Z ENDP		; AbortFlight
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_w$ = -28						; size = 4
_x$1 = -24						; size = 2
_y$2 = -20						; size = 2
_ux$ = -16						; size = 2
_uy$ = -12						; size = 2
_x$ = -8						; size = 2
_y$ = -4						; size = 2
_u$ = 8							; size = 4
?ResetCurrentWP@@YAPAVWayPointClass@@PAVUnitClass@@@Z PROC ; ResetCurrentWP

; 4550 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi

; 4551 : 	WayPoint	w;
; 4552 : 	GridIndex	x,y,ux,uy;
; 4553 : #ifdef DEBUG
; 4554 : 	WayPoint	ow;
; 4555 : #endif
; 4556 : 
; 4557 : 	w = u->GetCurrentUnitWP();

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN13@ResetCurre:

; 4558 : #ifdef DEBUG
; 4559 : 	ow = w;
; 4560 : #endif
; 4561 : 	ShiAssert (w);
; 4562 : 	// JPO Logic is: if we are past our departure time at the WP, we got to do something
; 4563 : 	// But if we are past our arrival time, and its a repeating WP, we might need to go back.
; 4564 : 	// So do the loop anyway. last bit was already commented out.
; 4565 : 	while (w && 
; 4566 : 			(w->GetWPDepartureTime() < Camp_GetCurrentTime() || // JPO Original test
; 4567 : 			 ((w->GetWPFlags() & WPF_REPEAT) && w->GetWPArrivalTime() < Camp_GetCurrentTime()))
; 4568 : 	      ) //  && w->GetWPAction() != WP_LAND)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN12@ResetCurre
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	esi, eax
	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	cmp	esi, eax
	jb	SHORT $LN11@ResetCurre
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	je	$LN12@ResetCurre
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	esi, eax
	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	cmp	esi, eax
	jae	$LN12@ResetCurre
$LN11@ResetCurre:

; 4569 : 	      {
; 4570 : 		      if (w->GetWPFlags() & WPF_CRITICAL_MASK || // 2002-02-20 MODIFIED BY S.G. Needs to get here if it's a refuel waypoint under some condition as defined below. I could have added a WPF_REFUEL flag but that would have wasted a flag just to be used here anyway so we're hacking our way in
; 4571 : 				      (w->GetWPAction() == WP_REFUEL && u->IsFlight() &&														// Must be a flight over a WP_REFUEL waypoint
; 4572 : 				       ((!(((FlightClass *)u)->GetEvalFlags() & FEVAL_GOT_TO_TARGET) && !((FlightClass *)u)->HasFuel(3)) ||	// We haven't reached our target, refuel if we have less than 3/4 of our capacity left, otherwise skip it
; 4573 : 					((((FlightClass *)u)->GetEvalFlags() & FEVAL_GOT_TO_TARGET) && !((FlightClass *)u)->HasFuel(9)))))		// We haven't reached our target, refuel if we have less than 1/4 of our capacity left, otherwise skip it

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2047				; 000007ffH
	jne	SHORT $LN8@ResetCurre
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	jne	$LN2@ResetCurre
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN2@ResetCurre
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetEvalFlags@FlightClass@@QAEEXZ	; FlightClass::GetEvalFlags
	movzx	ecx, al
	and	ecx, 2
	jne	SHORT $LN7@ResetCurre
	push	3
	mov	ecx, DWORD PTR _u$[ebp]
	call	?HasFuel@FlightClass@@QAEHH@Z		; FlightClass::HasFuel
	test	eax, eax
	je	SHORT $LN8@ResetCurre
$LN7@ResetCurre:
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetEvalFlags@FlightClass@@QAEEXZ	; FlightClass::GetEvalFlags
	movzx	edx, al
	and	edx, 2
	je	$LN2@ResetCurre
	push	9
	mov	ecx, DWORD PTR _u$[ebp]
	call	?HasFuel@FlightClass@@QAEHH@Z		; FlightClass::HasFuel
	test	eax, eax
	jne	$LN2@ResetCurre
$LN8@ResetCurre:

; 4574 : 		      {
; 4575 : 			      // Either keep heading here, or do our action and increment
; 4576 : 			      w->GetWPLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 4577 : 			      u->GetLocation(&ux,&uy);

	lea	edx, DWORD PTR _uy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ux$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 4578 : 			      if (DistSqu(x,y,ux,uy) > 1.0F)

	movzx	ecx, WORD PTR _uy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ux$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN6@ResetCurre

; 4579 : 			      {
; 4580 : 				      if (w->GetWPAction() == WP_TAKEOFF && u->IsAggregate())

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	SHORT $LN5@ResetCurre
	mov	ecx, DWORD PTR _u$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN5@ResetCurre

; 4581 : 					      u->SetLocation(x,y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?SetLocation@CampBaseClass@@QAEXFF@Z	; CampBaseClass::SetLocation
$LN5@ResetCurre:

; 4582 : 				      return w;

	mov	eax, DWORD PTR _w$[ebp]
	jmp	$LN14@ResetCurre
$LN6@ResetCurre:

; 4583 : 			      }
; 4584 : 			      if (DoWPAction((Flight)u) < 0)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	?DoWPAction@@YAHPAVFlightClass@@@Z	; DoWPAction
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN4@ResetCurre

; 4585 : 				      return NULL;

	xor	eax, eax
	jmp	$LN14@ResetCurre
$LN4@ResetCurre:

; 4586 : 			      if (w->GetWPFlags() & WPF_REPEAT)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	je	SHORT $LN3@ResetCurre

; 4587 : 				      return u->GetCurrentUnitWP();		// We've already selected a waypoint in this case

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	jmp	$LN14@ResetCurre
$LN3@ResetCurre:

; 4588 : 			      w = u->GetCurrentUnitWP();				// Make sure we've still got a good WP

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 4589 : 			      if (!w)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN2@ResetCurre

; 4590 : 				      return NULL;

	xor	eax, eax
	jmp	$LN14@ResetCurre
$LN2@ResetCurre:

; 4591 : 		      }
; 4592 : 		      w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 4593 : 		      u->SetCurrentUnitWP(w);

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	ecx, DWORD PTR _u$[ebp]
	call	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z ; UnitClass::SetCurrentUnitWP

; 4594 : 	      }

	jmp	$LN13@ResetCurre
$LN12@ResetCurre:

; 4595 : 	// Check for zero time and update to best guess from current location
; 4596 : 	// These are usually abort fields which are only pointed to as a result of an abort
; 4597 : 	if (w && w->GetWPArrivalTime() == 0)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN1@ResetCurre
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	test	eax, eax
	jne	SHORT $LN1@ResetCurre

; 4598 : 	{
; 4599 : 		GridIndex	x,y;
; 4600 : 		MonoPrint("Unit %d: Waypoint action %d (mission: %s) didn't have time. Setting times.\n",u->GetCampID(), w->GetWPAction(),MissStr[u->GetUnitMission()]);

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	imul	eax, 20					; 00000014H
	add	eax, OFFSET ?MissStr@@3PAY0BE@DA	; MissStr
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	push	OFFSET ??_C@_0EM@NKMILAPK@Unit?5?$CFd?3?5Waypoint?5action?5?$CFd?5?$CImis@
	call	_MonoPrint
	add	esp, 16					; 00000010H

; 4601 : 		u->GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$2[ebp]
	push	edx
	lea	eax, DWORD PTR _x$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 4602 : 		SetWPTimes (w, x, y, u->GetCombatSpeed(), 0);

	push	0
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetCombatSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCombatSpeed
	push	eax
	movzx	ecx, WORD PTR _y$2[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$1[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	?SetWPTimes@@YAKPAVWayPointClass@@FFHH@Z ; SetWPTimes
	add	esp, 20					; 00000014H
$LN1@ResetCurre:

; 4603 : 	}
; 4604 : 	// ShiAssert(w); - RH
; 4605 : 	return w;

	mov	eax, DWORD PTR _w$[ebp]
$LN14@ResetCurre:

; 4606 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetCurrentWP@@YAPAVWayPointClass@@PAVUnitClass@@@Z ENDP ; ResetCurrentWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -192						; size = 8
$T3 = -184						; size = 8
$T4 = -176						; size = 8
$T5 = -168						; size = 8
$T6 = -160						; size = 8
$T7 = -152						; size = 8
$T8 = -144						; size = 8
$T9 = -136						; size = 8
$T10 = -128						; size = 8
tv581 = -120						; size = 4
$T11 = -116						; size = 4
$T12 = -112						; size = 4
$T13 = -108						; size = 4
$T14 = -104						; size = 4
$T15 = -100						; size = 4
_radioMessage$16 = -96					; size = 4
$T17 = -92						; size = 4
tv449 = -88						; size = 4
tv307 = -84						; size = 4
$T18 = -80						; size = 4
tv152 = -76						; size = 4
tv141 = -72						; size = 4
tv235 = -68						; size = 4
_radioMessage$19 = -64					; size = 4
tv224 = -60						; size = 4
tv318 = -56						; size = 4
$T20 = -52						; size = 4
$T21 = -48						; size = 4
tv438 = -44						; size = 4
$T22 = -40						; size = 4
tv170 = -36						; size = 4
_sendmessage$ = -32					; size = 4
_losses$ = -28						; size = 4
_squad$ = -24						; size = 4
_i$23 = -20						; size = 4
_msg$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
_landed$ = 12						; size = 4
_playchatter$ = 16					; size = 4
?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z PROC	; UpdateSquadronStatus

; 4380 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 180				; 000000b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4381 : 	Squadron	squad = (Squadron)flight->GetUnitSquadron();

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _squad$[ebp], eax

; 4382 : 	int			losses=0,sendmessage=0;

	mov	DWORD PTR _losses$[ebp], 0
	mov	DWORD PTR _sendmessage$[ebp], 0

; 4383 : 	FalconRadioChatterMessage *msg = NULL;

	mov	DWORD PTR _msg$[ebp], 0

; 4384 : 
; 4385 : 	if (!squad)

	cmp	DWORD PTR _squad$[ebp], 0
	jne	SHORT $LN27@UpdateSqua

; 4386 : 		return;

	jmp	$LN28@UpdateSqua
$LN27@UpdateSqua:

; 4387 : 
; 4388 : 	// Don't update the squadron if the flight is not local
; 4389 : 	if (!flight->IsLocal())

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN26@UpdateSqua

; 4390 : 		return;

	jmp	$LN28@UpdateSqua
$LN26@UpdateSqua:

; 4391 : 
; 4392 : 	if (playchatter)

	cmp	DWORD PTR _playchatter$[ebp], 0
	je	$LN25@UpdateSqua

; 4393 : 	{
; 4394 : 		// Send a radio chatter message
; 4395 : 		msg = new FalconRadioChatterMessage(flight->Id(), FalconLocalGame);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T20[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN32@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN30@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN31@UpdateSqua
$LN30@UpdateSqua:
	mov	DWORD PTR tv141[ebp], 0
$LN31@UpdateSqua:
	push	1
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T20[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN33@UpdateSqua
$LN32@UpdateSqua:
	mov	DWORD PTR tv152[ebp], 0
$LN33@UpdateSqua:
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR $T15[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T15[ebp]
	mov	DWORD PTR _msg$[ebp], edx

; 4396 : 		msg->dataBlock.from = flight->Id();

	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 4397 : 		msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+60], 1
$LN25@UpdateSqua:

; 4398 : 	}
; 4399 : 
; 4400 : 	// Update the stats
; 4401 : 	for (int i=0; i<PILOTS_PER_FLIGHT; i++)

	mov	DWORD PTR _i$23[ebp], 0
	jmp	SHORT $LN24@UpdateSqua
$LN23@UpdateSqua:
	mov	edx, DWORD PTR _i$23[ebp]
	add	edx, 1
	mov	DWORD PTR _i$23[ebp], edx
$LN24@UpdateSqua:
	cmp	DWORD PTR _i$23[ebp], 4
	jge	$LN22@UpdateSqua

; 4402 : 	{
; 4403 : 		switch (flight->plane_stats[i])

	mov	eax, DWORD PTR _flight$[ebp]
	add	eax, DWORD PTR _i$23[ebp]
	mov	cl, BYTE PTR [eax+416]
	mov	BYTE PTR tv170[ebp], cl
	cmp	BYTE PTR tv170[ebp], 1
	je	SHORT $LN19@UpdateSqua
	cmp	BYTE PTR tv170[ebp], 2
	je	$LN15@UpdateSqua
	cmp	BYTE PTR tv170[ebp], 3
	je	$LN11@UpdateSqua
	jmp	$LN8@UpdateSqua
$LN19@UpdateSqua:

; 4404 : 		{
; 4405 : 			case AIRCRAFT_MISSING:
; 4406 : 				if (flight->pilots[i] != NO_PILOT)

	mov	edx, DWORD PTR _flight$[ebp]
	add	edx, DWORD PTR _i$23[ebp]
	movzx	eax, BYTE PTR [edx+412]
	cmp	eax, 255				; 000000ffH
	je	$LN18@UpdateSqua

; 4407 : 				{
; 4408 : 					squad->SetPilotStatus(flight->pilots[i],PILOT_MIA);

	push	2
	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$23[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	push	edx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?SetPilotStatus@SquadronClass@@QAEXHH@Z	; SquadronClass::SetPilotStatus

; 4409 : 					flight->pilots[i] = NO_PILOT;

	mov	eax, DWORD PTR _flight$[ebp]
	add	eax, DWORD PTR _i$23[ebp]
	mov	BYTE PTR [eax+412], 255			; 000000ffH

; 4410 : 					losses++;

	mov	ecx, DWORD PTR _losses$[ebp]
	add	ecx, 1
	mov	DWORD PTR _losses$[ebp], ecx

; 4411 : 					if (playchatter)

	cmp	DWORD PTR _playchatter$[ebp], 0
	je	$LN18@UpdateSqua

; 4412 : 					{
; 4413 : 						msg->dataBlock.message = rcPILOTHITD;

	mov	edx, 147				; 00000093H
	mov	eax, DWORD PTR _msg$[ebp]
	mov	WORD PTR [eax+62], dx

; 4414 : 						msg->dataBlock.voice_id = flight->GetPilotVoiceID(i);

	mov	ecx, DWORD PTR _i$23[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	edx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [edx+61], al

; 4415 : 						FalconSendMessage(msg, FALSE);

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 4416 : 						// Now send another...
; 4417 : 						msg = new FalconRadioChatterMessage(flight->Id(), FalconLocalGame);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN36@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN34@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv224[ebp], eax
	jmp	SHORT $LN35@UpdateSqua
$LN34@UpdateSqua:
	mov	DWORD PTR tv224[ebp], 0
$LN35@UpdateSqua:
	push	1
	mov	edx, DWORD PTR tv224[ebp]
	push	edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv235[ebp], eax
	jmp	SHORT $LN37@UpdateSqua
$LN36@UpdateSqua:
	mov	DWORD PTR tv235[ebp], 0
$LN37@UpdateSqua:
	mov	eax, DWORD PTR tv235[ebp]
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T13[ebp]
	mov	DWORD PTR _msg$[ebp], ecx

; 4418 : 						msg->dataBlock.message = rcAIRMANDOWNA;

	mov	edx, 7
	mov	eax, DWORD PTR _msg$[ebp]
	mov	WORD PTR [eax+62], dx

; 4419 : 						msg->dataBlock.from = flight->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax

; 4420 : 						msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [edx+60], 1

; 4421 : 						msg->dataBlock.voice_id = g_voicemap.PickVoice(VoiceMapper::VOICE_PILOT, flight->GetOwner()); // rand()%NUM_PILOT_VOICES; // JPO VOICEFIX

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	eax, al
	push	eax
	push	1
	mov	ecx, OFFSET ?g_voicemap@@3VVoiceMapper@@A ; g_voicemap
	call	?PickVoice@VoiceMapper@@QAEHHH@Z	; VoiceMapper::PickVoice
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+61], al

; 4422 : 						msg->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 4423 : 						msg->dataBlock.edata[1] = flight->GetFlightLeadCallNumber();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ ; FlightClass::GetFlightLeadCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 4424 : 						msg->dataBlock.time_to_play = 2 * CampaignSeconds;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+56], 2000		; 000007d0H

; 4425 : 						FalconSendMessage(msg, FALSE);

	push	0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 4426 : 						// And yet another...
; 4427 : 						msg = new FalconRadioChatterMessage(flight->Id(), FalconLocalGame);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN40@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN38@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv307[ebp], eax
	jmp	SHORT $LN39@UpdateSqua
$LN38@UpdateSqua:
	mov	DWORD PTR tv307[ebp], 0
$LN39@UpdateSqua:
	push	1
	mov	eax, DWORD PTR tv307[ebp]
	push	eax
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv318[ebp], eax
	jmp	SHORT $LN41@UpdateSqua
$LN40@UpdateSqua:
	mov	DWORD PTR tv318[ebp], 0
$LN41@UpdateSqua:
	mov	ecx, DWORD PTR tv318[ebp]
	mov	DWORD PTR $T11[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _msg$[ebp], edx

; 4428 : 						msg->dataBlock.message = rcAIRMANDOWNF; // changed from rcARIMANDOWNE (so it says "Setup RESCAP" now)

	mov	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [ecx+62], ax

; 4429 : 						msg->dataBlock.from = flight->Id();

	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 4430 : 						msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+60], 1

; 4431 : 						msg->dataBlock.voice_id = g_voicemap.PickVoice(VoiceMapper::VOICE_PILOT, flight->GetOwner()); //rand()%NUM_PILOT_VOICES; // JPO VOICEFIX

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	push	edx
	push	1
	mov	ecx, OFFSET ?g_voicemap@@3VVoiceMapper@@A ; g_voicemap
	call	?PickVoice@VoiceMapper@@QAEHHH@Z	; VoiceMapper::PickVoice
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+61], al

; 4432 : 						msg->dataBlock.time_to_play = 4 * CampaignSeconds;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [edx+56], 4000		; 00000fa0H

; 4433 : 						msg->dataBlock.edata[0] = -1;

	mov	eax, 2
	imul	eax, 0
	or	ecx, -1
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 4434 : 						msg->dataBlock.edata[1] = -1;

	mov	eax, 2
	shl	eax, 0
	or	ecx, -1
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 4435 : 						//flight->GetLocation(&msg->dataBlock.edata[0],&msg->dataBlock.edata[1]);
; 4436 : 						sendmessage = 1;

	mov	DWORD PTR _sendmessage$[ebp], 1

; 4437 : 						// RV - Biker - No SAR missions at all with this 
; 4438 : 						// if (!(rand()%5) && RequestSARMission (flight))
; 4439 : 						if (RequestSARMission(flight)){

	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?RequestSARMission@@YAHPAVFlightClass@@@Z ; RequestSARMission
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@UpdateSqua

; 4440 : 							// Generate a SAR radio call from awacs
; 4441 : 							FalconRadioChatterMessage* radioMessage;
; 4442 : 							radioMessage = CreateCallFromAwacs(flight, rcSARENROUTE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	184					; 000000b8H
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$19[ebp], eax

; 4443 : 							radioMessage->dataBlock.time_to_play = CampaignSeconds;

	mov	edx, DWORD PTR _radioMessage$19[ebp]
	mov	DWORD PTR [edx+56], 1000		; 000003e8H

; 4444 : 							FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$19[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN18@UpdateSqua:

; 4445 : 						}
; 4446 : 					}
; 4447 : 				}
; 4448 : 				break;

	jmp	$LN20@UpdateSqua
$LN15@UpdateSqua:

; 4449 : 			case AIRCRAFT_DEAD:
; 4450 : 				if (flight->pilots[i] != NO_PILOT)

	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$23[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	cmp	edx, 255				; 000000ffH
	je	$LN14@UpdateSqua

; 4451 : 				{
; 4452 : 					squad->SetPilotStatus(flight->pilots[i],PILOT_KIA);

	push	1
	mov	eax, DWORD PTR _flight$[ebp]
	add	eax, DWORD PTR _i$23[ebp]
	movzx	ecx, BYTE PTR [eax+412]
	push	ecx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?SetPilotStatus@SquadronClass@@QAEXHH@Z	; SquadronClass::SetPilotStatus

; 4453 : 					flight->pilots[i] = NO_PILOT;

	mov	edx, DWORD PTR _flight$[ebp]
	add	edx, DWORD PTR _i$23[ebp]
	mov	BYTE PTR [edx+412], 255			; 000000ffH

; 4454 : 					losses++;

	mov	eax, DWORD PTR _losses$[ebp]
	add	eax, 1
	mov	DWORD PTR _losses$[ebp], eax

; 4455 : 					if (playchatter)

	cmp	DWORD PTR _playchatter$[ebp], 0
	je	$LN14@UpdateSqua

; 4456 : 					{
; 4457 : 						msg->dataBlock.message = rcLASTWORDS;

	mov	ecx, 250				; 000000faH
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+62], cx

; 4458 : 						msg->dataBlock.voice_id = flight->GetPilotVoiceID(i);

	mov	eax, DWORD PTR _i$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+61], al

; 4459 : 						msg->dataBlock.edata[0] = 32767;

	mov	edx, 2
	imul	edx, 0
	mov	eax, 32767				; 00007fffH
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 4460 : 						FalconSendMessage(msg, FALSE);

	push	0
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 4461 : 						// Now send another...
; 4462 : 						msg = new FalconRadioChatterMessage(flight->Id(), FalconLocalGame);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN44@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN42@UpdateSqua
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv438[ebp], eax
	jmp	SHORT $LN43@UpdateSqua
$LN42@UpdateSqua:
	mov	DWORD PTR tv438[ebp], 0
$LN43@UpdateSqua:
	push	1
	mov	ecx, DWORD PTR tv438[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T18[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv449[ebp], eax
	jmp	SHORT $LN45@UpdateSqua
$LN44@UpdateSqua:
	mov	DWORD PTR tv449[ebp], 0
$LN45@UpdateSqua:
	mov	eax, DWORD PTR tv449[ebp]
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T14[ebp]
	mov	DWORD PTR _msg$[ebp], ecx

; 4463 : 						msg->dataBlock.message = rcAIRMANDOWNB;

	mov	edx, 8
	mov	eax, DWORD PTR _msg$[ebp]
	mov	WORD PTR [eax+62], dx

; 4464 : 						msg->dataBlock.from = flight->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax

; 4465 : 						msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [edx+60], 1

; 4466 : 						msg->dataBlock.voice_id = g_voicemap.PickVoice(VoiceMapper::VOICE_PILOT, flight->GetOwner()); //rand()%NUM_PILOT_VOICES; // JPO VOICEFIX

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	eax, al
	push	eax
	push	1
	mov	ecx, OFFSET ?g_voicemap@@3VVoiceMapper@@A ; g_voicemap
	call	?PickVoice@VoiceMapper@@QAEHHH@Z	; VoiceMapper::PickVoice
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+61], al

; 4467 : 						//M.N. changed to 32767 -> flexibly use randomized values of max available eval indexes
; 4468 : 						msg->dataBlock.edata[0] = 32767;

	mov	edx, 2
	imul	edx, 0
	mov	eax, 32767				; 00007fffH
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 4469 : 						msg->dataBlock.time_to_play = 2 * CampaignSeconds;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [edx+56], 2000		; 000007d0H

; 4470 : 						sendmessage = 1;

	mov	DWORD PTR _sendmessage$[ebp], 1

; 4471 : 
; 4472 : 						// RV - Biker - No SAR missions at all with this 
; 4473 : 						// if (!(rand()%5) && RequestSARMission (flight))
; 4474 : 						if (RequestSARMission (flight)){

	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?RequestSARMission@@YAHPAVFlightClass@@@Z ; RequestSARMission
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@UpdateSqua

; 4475 : 							// Generate a SAR radio call from awacs
; 4476 : 							FalconRadioChatterMessage* radioMessage;
; 4477 : 							radioMessage = CreateCallFromAwacs(flight, rcSARENROUTE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	184					; 000000b8H
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$16[ebp], eax

; 4478 : 							radioMessage->dataBlock.time_to_play = CampaignSeconds;

	mov	edx, DWORD PTR _radioMessage$16[ebp]
	mov	DWORD PTR [edx+56], 1000		; 000003e8H

; 4479 : 							FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$16[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN14@UpdateSqua:

; 4480 : 						}
; 4481 : 					}
; 4482 : 				}
; 4483 : 				break;

	jmp	$LN20@UpdateSqua
$LN11@UpdateSqua:

; 4484 : 			case AIRCRAFT_RTB:
; 4485 : 				if (flight->pilots[i] != NO_PILOT)

	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$23[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	cmp	edx, 255				; 000000ffH
	je	SHORT $LN10@UpdateSqua

; 4486 : 				{
; 4487 : 					RatePilot(flight,i,rand()%5);

	call	_rand
	cdq
	mov	ecx, 5
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR _i$23[ebp]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?RatePilot@@YAXPAVFlightClass@@HH@Z	; RatePilot
	add	esp, 12					; 0000000cH

; 4488 : 					squad->SetPilotStatus(flight->pilots[i],PILOT_AVAILABLE);

	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$23[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	push	edx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?SetPilotStatus@SquadronClass@@QAEXHH@Z	; SquadronClass::SetPilotStatus

; 4489 : 					flight->pilots[i] = NO_PILOT;

	mov	eax, DWORD PTR _flight$[ebp]
	add	eax, DWORD PTR _i$23[ebp]
	mov	BYTE PTR [eax+412], 255			; 000000ffH

; 4490 : 					if (playchatter)

	cmp	DWORD PTR _playchatter$[ebp], 0
	je	SHORT $LN10@UpdateSqua

; 4491 : 					{
; 4492 : 						msg->dataBlock.message = rcPILOTHITA;

	mov	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _msg$[ebp]
	mov	WORD PTR [edx+62], cx

; 4493 : 						msg->dataBlock.voice_id = flight->GetPilotVoiceID(i);

	mov	eax, DWORD PTR _i$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+61], al

; 4494 : 						sendmessage = 1;

	mov	DWORD PTR _sendmessage$[ebp], 1
$LN10@UpdateSqua:

; 4495 : 					}
; 4496 : 				}
; 4497 : 				break;

	jmp	SHORT $LN20@UpdateSqua
$LN8@UpdateSqua:

; 4498 : 			case AIRCRAFT_AVAILABLE:
; 4499 : 			case AIRCRAFT_NOT_ASSIGNED:
; 4500 : 			default:
; 4501 : 				if (landed && flight->pilots[i] != NO_PILOT)

	cmp	DWORD PTR _landed$[ebp], 0
	je	SHORT $LN20@UpdateSqua
	mov	edx, DWORD PTR _flight$[ebp]
	add	edx, DWORD PTR _i$23[ebp]
	movzx	eax, BYTE PTR [edx+412]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN20@UpdateSqua

; 4502 : 				{
; 4503 : 					squad->SetPilotStatus(flight->pilots[i],PILOT_AVAILABLE);

	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$23[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	push	edx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?SetPilotStatus@SquadronClass@@QAEXHH@Z	; SquadronClass::SetPilotStatus

; 4504 : 					flight->pilots[i] = NO_PILOT;

	mov	eax, DWORD PTR _flight$[ebp]
	add	eax, DWORD PTR _i$23[ebp]
	mov	BYTE PTR [eax+412], 255			; 000000ffH

; 4505 : 					flight->plane_stats[i] = AIRCRAFT_NOT_ASSIGNED;

	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$23[ebp]
	mov	BYTE PTR [ecx+416], 0

; 4506 : 					//flight->MakeFlightDirty (DIRTY_PLANE_STATS, DDP[102].priority);
; 4507 : 					flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLE);

	push	1048576					; 00100000H
	push	8
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN20@UpdateSqua:

; 4508 : 				}
; 4509 : 				break;
; 4510 : 		}
; 4511 : 	}

	jmp	$LN23@UpdateSqua
$LN22@UpdateSqua:

; 4512 : 
; 4513 : 	// Decide wether to send the message or not
; 4514 : 	if (sendmessage)

	cmp	DWORD PTR _sendmessage$[ebp], 0
	je	SHORT $LN6@UpdateSqua

; 4515 : 		FalconSendMessage(msg, FALSE);

	push	0
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
	jmp	SHORT $LN5@UpdateSqua
$LN6@UpdateSqua:

; 4516 : 	else if (msg)

	cmp	DWORD PTR _msg$[ebp], 0
	je	SHORT $LN5@UpdateSqua

; 4517 : 		delete msg;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR $T12[ebp], eax
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR $T22[ebp], ecx
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN46@UpdateSqua
	push	1
	mov	edx, DWORD PTR $T22[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T22[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv581[ebp], eax
	jmp	SHORT $LN5@UpdateSqua
$LN46@UpdateSqua:
	mov	DWORD PTR tv581[ebp], 0
$LN5@UpdateSqua:

; 4518 : 
; 4519 : 	if (losses)

	cmp	DWORD PTR _losses$[ebp], 0
	je	SHORT $LN3@UpdateSqua

; 4520 : 		squad->BroadcastUnitMessage(flight->Id(),FalconUnitMessage::unitSetVehicles,UMSG_FROM_RESERVE,losses,0);

	push	0
	movzx	eax, WORD PTR _losses$[ebp]
	push	eax
	push	255					; 000000ffH
	push	6
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?BroadcastUnitMessage@UnitClass@@QAEXVVU_ID@@FFFF@Z ; UnitClass::BroadcastUnitMessage
$LN3@UpdateSqua:

; 4521 : 
; 4522 : 	if (landed || !flight->GetTotalVehicles())

	cmp	DWORD PTR _landed$[ebp], 0
	jne	SHORT $LN1@UpdateSqua
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	test	eax, eax
	jne	SHORT $LN28@UpdateSqua
$LN1@UpdateSqua:

; 4523 : 		RegroupFlight (flight);

	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?RegroupFlight@@YAHPAVFlightClass@@@Z	; RegroupFlight
	add	esp, 4
$LN28@UpdateSqua:

; 4524 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$0:
	mov	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$1:
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$2:
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z$3:
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-184]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z ENDP	; UpdateSquadronStatus
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_flight$ = 8						; size = 4
?CancelFlight@@YAXPAVFlightClass@@@Z PROC		; CancelFlight

; 4374 : {

	push	ebp
	mov	ebp, esp

; 4375 : 	ShiAssert (flight->VuState() == VU_MEM_ACTIVE);
; 4376 : 	UpdateSquadronStatus(flight, TRUE, FALSE);

	push	0
	push	1
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z ; UpdateSquadronStatus
	add	esp, 12					; 0000000cH

; 4377 : }

	pop	ebp
	ret	0
?CancelFlight@@YAXPAVFlightClass@@@Z ENDP		; CancelFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_fuelAvail$1 = -16					; size = 4
_pilotSlot$ = -12					; size = 4
_squad$ = -8						; size = 4
_flight$ = -4						; size = 4
_ac$ = 8						; size = 4
?RegroupAircraft@@YAXPAVAircraftClass@@@Z PROC		; RegroupAircraft

; 4334 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 4335 : 	int			pilotSlot;
; 4336 : 	Flight		flight;
; 4337 : 	Squadron	squad;	// M.N.
; 4338 : 
; 4339 : 	ShiAssert (ac != FalconLocalSession->GetPlayerEntity());
; 4340 : 
; 4341 : 	if (ac->IsDead()){

	mov	eax, DWORD PTR _ac$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ac$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	je	SHORT $LN3@RegroupAir

; 4342 : 		return;

	jmp	$LN4@RegroupAir
$LN3@RegroupAir:

; 4343 : 	}
; 4344 : 	flight = (Flight)ac->GetCampaignObject();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 4345 : 
; 4346 : 	// find last hardpoint
; 4347 : 
; 4348 : 	// Set this vehicle as "Return To Base" so that record current state will not chalk
; 4349 : 	// it up as a loss
; 4350 : 	if (ac->vehicleInUnit < PILOTS_PER_FLIGHT){

	mov	ecx, DWORD PTR _ac$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	cmp	edx, 4
	jge	$LN2@RegroupAir

; 4351 : 		pilotSlot = flight->GetAdjustedPlayerSlot(ac->pilotSlot);

	mov	eax, DWORD PTR _ac$[ebp]
	movzx	ecx, BYTE PTR [eax+665]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetAdjustedPlayerSlot@FlightClass@@QAEHH@Z ; FlightClass::GetAdjustedPlayerSlot
	mov	DWORD PTR _pilotSlot$[ebp], eax

; 4352 : 		ShiAssert(flight->pilots[pilotSlot] != NO_PILOT);
; 4353 : 		ShiAssert (pilotSlot == ac->vehicleInUnit);
; 4354 : 		flight->plane_stats[pilotSlot] = AIRCRAFT_RTB;

	mov	edx, DWORD PTR _flight$[ebp]
	add	edx, DWORD PTR _pilotSlot$[ebp]
	mov	BYTE PTR [edx+416], 3

; 4355 : 		flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLE);

	push	1048576					; 00100000H
	push	8
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 4356 : 
; 4357 : 		// 2001-12-16 MN Put ammo that we eventually still have back into the ammo dump
; 4358 : 		squad = (Squadron)flight->GetUnitSquadron();

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _squad$[ebp], eax

; 4359 : 		if (g_bLoadoutSquadStoreResupply && squad){

	movzx	ecx, BYTE PTR ?g_bLoadoutSquadStoreResupply@@3_NA ; g_bLoadoutSquadStoreResupply
	test	ecx, ecx
	je	SHORT $LN1@RegroupAir
	cmp	DWORD PTR _squad$[ebp], 0
	je	SHORT $LN1@RegroupAir

; 4360 : 			int fuelAvail;
; 4361 : 			fuelAvail = flight->CalculateFuelAvailable(255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	mov	DWORD PTR _fuelAvail$1[ebp], eax

; 4362 : 			// here only resupply 1 aircraft
; 4363 : 			squad->ResupplySquadronStores(
; 4364 : 				flight->GetLoadout(0)->WeaponID, flight->GetLoadout(0)->WeaponCount, fuelAvail, 1
; 4365 : 			);

	push	1
	mov	edx, DWORD PTR _fuelAvail$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	add	eax, 32					; 00000020H
	push	eax
	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?ResupplySquadronStores@SquadronClass@@QAEXQAFQAEHH@Z ; SquadronClass::ResupplySquadronStores
$LN1@RegroupAir:

; 4366 : 		}
; 4367 : 		ac->SetRemoveFlag();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?SetRemoveFlag@SimBaseClass@@QAEXXZ	; SimBaseClass::SetRemoveFlag
$LN2@RegroupAir:

; 4368 : 	}
; 4369 : 	// Now update the flight's status
; 4370 : 	flight->RecordCurrentState(NULL, FALSE);

	push	0
	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+328]
	call	eax
$LN4@RegroupAir:

; 4371 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RegroupAircraft@@YAXPAVAircraftClass@@@Z ENDP		; RegroupAircraft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
_fuelAvail$2 = -20					; size = 4
_squad$ = -16						; size = 4
_i$ = -12						; size = 4
_x$ = -8						; size = 2
_y$ = -4						; size = 2
_flight$ = 8						; size = 4
?RegroupFlight@@YAHPAVFlightClass@@@Z PROC		; RegroupFlight

; 4243 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 4244 : 	Squadron	squad = (Squadron)flight->GetUnitSquadron();

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _squad$[ebp], eax

; 4245 : 	int			i;
; 4246 : 	GridIndex x = 0, y = 0;

	xor	ecx, ecx
	mov	WORD PTR _x$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _y$[ebp], dx

; 4247 : 
; 4248 : 	flight->GetLocation(&x, &y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 4249 : 
; 4250 : 	// RV - Biker - Don't drop Air Mobile over water
; 4251 : 	if (flight->Cargo() && GetCover(x, y) != Water){

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Cargo@UnitClass@@QBEHXZ		; UnitClass::Cargo
	test	eax, eax
	je	SHORT $LN10@RegroupFli
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@RegroupFli

; 4252 : 		flight->UnloadUnit();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?UnloadUnit@UnitClass@@QAEXXZ		; UnitClass::UnloadUnit
$LN10@RegroupFli:

; 4253 : 	}
; 4254 : 	// Free our reference on this callsign
; 4255 : 	UnsetCallsignID (flight->callsign_id, flight->callsign_num);

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+425]
	push	ecx
	call	?UnsetCallsignID@@YAXHH@Z		; UnsetCallsignID
	add	esp, 8

; 4256 : 
; 4257 : 	flight->UnSetFalcFlag(FEC_REGENERATING);

	push	8
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?UnSetFalcFlag@FalconEntity@@QAEXH@Z	; FalconEntity::UnSetFalcFlag

; 4258 : 	// ADDED BY S.G. SO DEAD UNITS DON'T HAVE THEIR PILOTS BACK IN BUSINESS AND AIRPLANE  BACK IN THE HANGAG
; 4259 : 	// JB 010228 Commented out -- attrition rates way too high!
; 4260 : 	// JB 010710 Make configurable
; 4261 : 	if (g_bRealisticAttrition && flight->IsDead())

	movzx	edx, BYTE PTR ?g_bRealisticAttrition@@3_NA ; g_bRealisticAttrition
	test	edx, edx
	je	SHORT $LN9@RegroupFli
	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	je	SHORT $LN9@RegroupFli

; 4262 : 		return 1;

	mov	eax, 1
	jmp	$LN11@RegroupFli
$LN9@RegroupFli:

; 4263 : 	// END OF ADDED SECTION
; 4264 : 
; 4265 : 	//  M.N. Put ammo that we eventually still have back into the ammo dump
; 4266 : 	if (g_bLoadoutSquadStoreResupply && squad)

	movzx	ecx, BYTE PTR ?g_bLoadoutSquadStoreResupply@@3_NA ; g_bLoadoutSquadStoreResupply
	test	ecx, ecx
	je	SHORT $LN8@RegroupFli
	cmp	DWORD PTR _squad$[ebp], 0
	je	SHORT $LN8@RegroupFli

; 4267 : 	{
; 4268 : 		int fuelAvail;
; 4269 : 		fuelAvail = flight->CalculateFuelAvailable(255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	mov	DWORD PTR _fuelAvail$2[ebp], eax

; 4270 : 		squad->ResupplySquadronStores(flight->GetLoadout(0)->WeaponID, flight->GetLoadout(0)->WeaponCount, fuelAvail, flight->GetTotalVehicles());

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	push	eax
	mov	edx, DWORD PTR _fuelAvail$2[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	add	eax, 32					; 00000020H
	push	eax
	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?ResupplySquadronStores@SquadronClass@@QAEXQAFQAEHH@Z ; SquadronClass::ResupplySquadronStores
$LN8@RegroupFli:

; 4271 : 	}
; 4272 : 
; 4273 : 	// Free up any remaining pilots
; 4274 : 	for (i=0; i<PILOTS_PER_FLIGHT; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@RegroupFli
$LN6@RegroupFli:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@RegroupFli:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN5@RegroupFli

; 4275 : 	{
; 4276 : 		if (flight->pilots[i] != NO_PILOT)

	mov	edx, DWORD PTR _flight$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+412]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN4@RegroupFli

; 4277 : 		{
; 4278 : 			if (squad)

	cmp	DWORD PTR _squad$[ebp], 0
	je	SHORT $LN3@RegroupFli

; 4279 : 				squad->SetPilotStatus(flight->pilots[i],PILOT_AVAILABLE);

	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	push	edx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?SetPilotStatus@SquadronClass@@QAEXHH@Z	; SquadronClass::SetPilotStatus
$LN3@RegroupFli:

; 4280 : 			flight->pilots[i] = NO_PILOT;

	mov	eax, DWORD PTR _flight$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+412], 255			; 000000ffH

; 4281 : 			flight->plane_stats[i] = AIRCRAFT_NOT_ASSIGNED;

	mov	ecx, DWORD PTR _flight$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+416], 0

; 4282 : 			//flight->MakeFlightDirty (DIRTY_PLANE_STATS, DDP[100].priority);
; 4283 : 			flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLE);

	push	1048576					; 00100000H
	push	8
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN4@RegroupFli:

; 4284 : 		}
; 4285 : 	}

	jmp	SHORT $LN6@RegroupFli
$LN5@RegroupFli:

; 4286 : 
; 4287 : 	// S.G. NOT NEEDED ANYMORE. WAS DONE ABOVE
; 4288 : 	// JB 010228 Commented back in -- attrition rates way too high!
; 4289 : 	if (flight->IsDead()){

	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax+552]
	call	edx
	test	eax, eax
	je	SHORT $LN2@RegroupFli

; 4290 : 		return 1;

	mov	eax, 1
	jmp	$LN11@RegroupFli
$LN2@RegroupFli:

; 4291 : 	}
; 4292 : 	//
; 4293 : 	if (TeamInfo[flight->GetTeam()])

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4], 0
	je	SHORT $LN1@RegroupFli

; 4294 : 		TeamInfo[flight->GetTeam()]->atm->SendATMMessage(flight->Id(), flight->GetTeam(), FalconAirTaskingMessage::atmNewACAvail, 0, 0, NULL, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	call	?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z ; AirTaskingManagerClass::SendATMMessage
$LN1@RegroupFli:

; 4295 : 
; 4296 : 	// Set the final aircraft in the mission eval structure if this is one of the flights
; 4297 : 	// in the player's package
; 4298 : 	TheCampaign.MissionEvaluator->SetFinalAircraft(flight);

	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?SetFinalAircraft@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z ; MissionEvaluationClass::SetFinalAircraft

; 4299 : 
; 4300 : 	// Kill the unit (just to get it all removed and shee-at)
; 4301 : 	flight->KillUnit();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 4302 : 	return 1;

	mov	eax, 1
$LN11@RegroupFli:

; 4303 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RegroupFlight@@YAHPAVFlightClass@@@Z ENDP		; RegroupFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_new_flight$ = -28					; size = 4
$T2 = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_parent$ = 12						; size = 4
_squad$ = 16						; size = 4
?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z PROC	; NewFlight

; 170  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 171  : 	FlightClass	*new_flight;
; 172  : 	/*VuEnterCriticalSection();
; 173  : 	lastVolatileId = vuAssignmentId;
; 174  : 	vuAssignmentId = lastLowVolitileId;
; 175  : 	vuAssignmentId = lastFlightId;
; 176  : 	vuLowWrapNumber = (FIRST_LOW_VOLATILE_VU_ID_NUMBER + LAST_LOW_VOLATILE_VU_ID_NUMBER)/2;
; 177  : 	vuHighWrapNumber = LAST_LOW_VOLATILE_VU_ID_NUMBER;*/
; 178  : 	new_flight = new FlightClass (type, parent, squad);

	push	456					; 000001c8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewFlight
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	movzx	edx, WORD PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0FlightClass@@QAE@GPAVUnitClass@@0@Z	; FlightClass::FlightClass
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@NewFlight
$LN3@NewFlight:
	mov	DWORD PTR tv74[ebp], 0
$LN4@NewFlight:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _new_flight$[ebp], ecx

; 179  : 	//lastFlightId = vuAssignmentId;
; 180  : 	//	lastLowVolitileId = vuAssignmentId;
; 181  : 	/*vuAssignmentId = lastVolatileId;
; 182  : 	vuLowWrapNumber = FIRST_VOLATILE_VU_ID_NUMBER;
; 183  : 	vuHighWrapNumber = LAST_VOLATILE_VU_ID_NUMBER;
; 184  : 	VuExitCriticalSection();*/
; 185  : 	return new_flight;

	mov	eax, DWORD PTR _new_flight$[ebp]

; 186  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z ENDP	; NewFlight
; Function compile flags: /Odtp
;	COMDAT ??_GFlightClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFlightClass@@UAEPAXI@Z PROC				; FlightClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FlightClass@@UAE@XZ			; FlightClass::~FlightClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFlightClass@@UAEPAXI@Z ENDP				; FlightClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_airbase$ = 8						; size = 4
?AirbaseOperational@FlightClass@@QAEHPAVObjectiveClass@@@Z PROC ; FlightClass::AirbaseOperational
; _this$ = ecx

; 5278 : int FlightClass::AirbaseOperational(Objective airbase){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5279 : 	if (airbase == NULL){

	cmp	DWORD PTR _airbase$[ebp], 0
	jne	SHORT $LN8@AirbaseOpe

; 5280 : 		return FALSE;//me123

	xor	eax, eax
	jmp	$LN9@AirbaseOpe
$LN8@AirbaseOpe:

; 5281 : 	}
; 5282 : 
; 5283 : 	//JPO - to be operational, it must
; 5284 : 	// exist, be an objective, have serviceable runways 
; 5285 : 	// and be owned by the same team as us.
; 5286 : 	if (airbase->IsUnit()){

	mov	eax, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN7@AirbaseOpe

; 5287 : 		// JB carrier
; 5288 : 		return TRUE;

	mov	eax, 1
	jmp	$LN9@AirbaseOpe
$LN7@AirbaseOpe:

; 5289 : 	}
; 5290 : 
; 5291 : 	if (airbase == NULL || !airbase->IsObjective()){

	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN5@AirbaseOpe
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	jne	SHORT $LN6@AirbaseOpe
$LN5@AirbaseOpe:

; 5292 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN9@AirbaseOpe
$LN6@AirbaseOpe:

; 5293 : 	}
; 5294 : 
; 5295 : 	//if (!IsHelicopter() && (airbase->brain == NULL || airbase->brain->NumOperableRunways() <= 0))
; 5296 : 	//return FALSE;  Cobra test
; 5297 : 	if ((!IsHelicopter()) && (airbase->brain == NULL)){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+992]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@AirbaseOpe
	mov	ecx, DWORD PTR _airbase$[ebp]
	cmp	DWORD PTR [ecx+240], 0
	jne	SHORT $LN4@AirbaseOpe

; 5298 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN9@AirbaseOpe
$LN4@AirbaseOpe:

; 5299 : 	}
; 5300 : 	if (airbase->brain)

	mov	edx, DWORD PTR _airbase$[ebp]
	cmp	DWORD PTR [edx+240], 0
	je	SHORT $LN3@AirbaseOpe

; 5301 : 	{
; 5302 : 		if (airbase->brain->NumOperableRunways() == 0){

	mov	eax, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	?NumOperableRunways@ATCBrain@@QAEHXZ	; ATCBrain::NumOperableRunways
	test	eax, eax
	jne	SHORT $LN3@AirbaseOpe

; 5303 : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN9@AirbaseOpe
$LN3@AirbaseOpe:

; 5304 : 		}
; 5305 : 	}
; 5306 : 	//if (airbase->GetTeam() != GetTeam())
; 5307 : 	if (!GetRoE(airbase->GetTeam(),GetTeam(),ROE_AIR_USE_BASES)){

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@AirbaseOpe

; 5308 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN9@AirbaseOpe
$LN1@AirbaseOpe:

; 5309 : 	}
; 5310 : 
; 5311 : 	return TRUE;

	mov	eax, 1
$LN9@AirbaseOpe:

; 5312 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AirbaseOperational@FlightClass@@QAEHPAVObjectiveClass@@@Z ENDP ; FlightClass::AirbaseOperational
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 4
_this$ = -32						; size = 4
tv130 = -28						; size = 4
$T5 = -24						; size = 4
tv87 = -20						; size = 4
_wingCommand$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_command$ = 8						; size = 4
_sender$ = 12						; size = 4
?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z PROC ; FlightClass::SendComponentMessage
; _this$ = ecx

; 4224 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4225 : 	FalconWingmanMsg*	wingCommand;
; 4226 : 
; 4227 : 	wingCommand = new FalconWingmanMsg (Id(), FalconLocalGame);

	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN5@SendCompon
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@SendCompon
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN4@SendCompon
$LN3@SendCompon:
	mov	DWORD PTR tv87[ebp], 0
$LN4@SendCompon:
	push	1
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconWingmanMsg@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconWingmanMsg::FalconWingmanMsg
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN6@SendCompon
$LN5@SendCompon:
	mov	DWORD PTR tv130[ebp], 0
$LN6@SendCompon:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _wingCommand$[ebp], ecx

; 4228 : 
; 4229 : 	wingCommand->dataBlock.from		= Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _wingCommand$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 4230 : 	wingCommand->dataBlock.to		= AiAllButSender;

	mov	ecx, 5
	mov	edx, DWORD PTR _wingCommand$[ebp]
	mov	WORD PTR [edx+56], cx

; 4231 : 	wingCommand->dataBlock.command	= command;

	mov	eax, DWORD PTR _wingCommand$[ebp]
	mov	ecx, DWORD PTR _command$[ebp]
	mov	DWORD PTR [eax+58], ecx

; 4232 : 	wingCommand->dataBlock.newTarget= FalconNullId;

	mov	edx, DWORD PTR _wingCommand$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+62], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+66], ecx

; 4233 : 
; 4234 : 	FalconSendMessage (wingCommand,TRUE);

	push	1
	mov	edx, DWORD PTR _wingCommand$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 4235 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendComponentMessage@FlightClass@@QAEXHPAVVuEntity@@@Z ENDP ; FlightClass::SendComponentMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 8
_player_ac$ = -12					; size = 4
_this$ = -8						; size = 4
_camp_locker$ = -4					; size = 4
_locker$ = 8						; size = 4
?RegisterLock@FlightClass@@QAEXPAVFalconEntity@@@Z PROC	; FlightClass::RegisterLock
; _this$ = ecx

; 3815 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3816 : #ifdef GILMANS_BEAM_TACTIC
; 3817 : 	Unit		camp_locker;
; 3818 : 	int			player_ac = 0;

	mov	DWORD PTR _player_ac$[ebp], 0

; 3819 : 
; 3820 : 	// Keep beaming the first enemy locker until lock is broken
; 3821 : 	if (Locked())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Locked@UnitClass@@QAEHXZ		; UnitClass::Locked
	test	eax, eax
	je	SHORT $LN7@RegisterLo

; 3822 : 		return;

	jmp	$LN8@RegisterLo
$LN7@RegisterLo:

; 3823 : 	if (locker->IsSim())

	mov	ecx, DWORD PTR _locker$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN6@RegisterLo

; 3824 : 	{
; 3825 : 		camp_locker = (Unit)((SimBaseClass*)locker)->GetCampaignObject();

	mov	ecx, DWORD PTR _locker$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _camp_locker$[ebp], eax

; 3826 : 		player_ac = ((SimBaseClass*)locker)->IsSetFlag(MOTION_OWNSHIP);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _locker$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	mov	DWORD PTR _player_ac$[ebp], eax
	jmp	SHORT $LN5@RegisterLo
$LN6@RegisterLo:

; 3827 : 	}
; 3828 : 	else if (locker->IsUnit())

	mov	eax, DWORD PTR _locker$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _locker$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN4@RegisterLo

; 3829 : 		camp_locker = (Unit)locker;

	mov	ecx, DWORD PTR _locker$[ebp]
	mov	DWORD PTR _camp_locker$[ebp], ecx

; 3830 : 	else

	jmp	SHORT $LN5@RegisterLo
$LN4@RegisterLo:

; 3831 : 		return;

	jmp	SHORT $LN8@RegisterLo
$LN5@RegisterLo:

; 3832 : 	// Only register lock if it's a player or the enemy is engaging us specifically
; 3833 : 	if (!camp_locker || (!player_ac && camp_locker->GetUnitTactic() != ATACTIC_ENGAGE_AIR))

	cmp	DWORD PTR _camp_locker$[ebp], 0
	je	SHORT $LN1@RegisterLo
	cmp	DWORD PTR _player_ac$[ebp], 0
	jne	SHORT $LN2@RegisterLo
	mov	ecx, DWORD PTR _camp_locker$[ebp]
	call	?GetUnitTactic@UnitClass@@QBEHXZ	; UnitClass::GetUnitTactic
	cmp	eax, 1
	je	SHORT $LN2@RegisterLo
$LN1@RegisterLo:

; 3834 : 		return;

	jmp	SHORT $LN8@RegisterLo
$LN2@RegisterLo:

; 3835 : 	SetLocked(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocked@UnitClass@@QAEXH@Z		; UnitClass::SetLocked

; 3836 : 	last_enemy_lock_time = TheCampaign.CurrentTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR [edx+284], eax

; 3837 : 	enemy_locker = camp_locker->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _camp_locker$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+304], edx
	mov	DWORD PTR [ecx+308], eax
$LN8@RegisterLo:

; 3838 : #else
; 3839 : 	return;
; 3840 : #endif
; 3841 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RegisterLock@FlightClass@@QAEXPAVFalconEntity@@@Z ENDP	; FlightClass::RegisterLock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -164						; size = 8
_sincos$ = -156						; size = 8
tv460 = -148						; size = 4
tv554 = -144						; size = 4
tv412 = -140						; size = 4
tv400 = -136						; size = 4
tv540 = -132						; size = 4
tv416 = -128						; size = 4
tv509 = -124						; size = 4
tv556 = -120						; size = 4
tv503 = -116						; size = 4
tv466 = -112						; size = 4
tv497 = -108						; size = 4
_c$ = -104						; size = 4
tv489 = -100						; size = 4
tv558 = -96						; size = 4
tv562 = -92						; size = 4
tv396 = -88						; size = 4
tv481 = -84						; size = 4
tv404 = -80						; size = 4
tv560 = -76						; size = 4
tv472 = -72						; size = 4
tv408 = -68						; size = 4
_zdel$ = -64						; size = 4
_maxT$ = -60						; size = 4
_a$ = -56						; size = 4
_underRad$ = -52					; size = 4
_retval$ = -48						; size = 4
_ownSpeed$ = -44					; size = 4
_speed$ = -40						; size = 4
_xdel$ = -36						; size = 4
_ydel$ = -32						; size = 4
_b$ = -28						; size = 4
_minT$ = -24						; size = 4
_this$ = -20						; size = 4
_q$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 4
_collPoint$ = 12					; size = 4
_noAWACS$ = 16						; size = 4
?FindCollisionPoint@FlightClass@@QAEHPAVFalconEntity@@PAUvector@@H@Z PROC ; FlightClass::FindCollisionPoint
; _this$ = ecx

; 3705 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3706 : 	int retval;
; 3707 : 
; 3708 : 	// Put line seg equation into parametric form S = Q+tV,
; 3709 : 	// translated into sphere's coord system.
; 3710 : 	//
; 3711 : 	// Note (this is important) that the way we have defined it,
; 3712 : 	// the line segment includes all values of t where (0 <= t <= 1)
; 3713 : 	//
; 3714 : 	// solve for t on sphere's surface,  ie. where S.S = R*R, or
; 3715 : 	// t*t(objVel.objVel) + t(2objVel.Q) + (Q.Q - ownSpeed*t * ownSpeed*t ) = 0
; 3716 : 	// which is quadratic in t such that:
; 3717 : 	// a = V.V - ownSpeed*ownSpeed
; 3718 : 	// b = 2V.Q
; 3719 : 	// c = Q.Q
; 3720 : 	//
; 3721 : 
; 3722 : 	// Need to find unit's heading/speed/deltas in sim coordinates
; 3723 : 	// KCK NOTE: This is all kinda pointless if the target is manuevering. Is there a way to tell?
; 3724 : 	mlTrig		sincos;
; 3725 : 	float		speed = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _speed$[ebp], xmm0

; 3726 : 	vector		q;
; 3727 : 	float		a,b,c;
; 3728 : 	float		underRad;
; 3729 : 	float		minT,maxT;
; 3730 : 	float		ownSpeed;
; 3731 : 	float		xdel,ydel,zdel;
; 3732 : 
; 3733 : 	q.x = target->XPos() - XPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv396[ebp]
	movss	xmm0, DWORD PTR tv396[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv554[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv400[ebp]
	movss	xmm0, DWORD PTR tv554[ebp]
	subss	xmm0, DWORD PTR tv400[ebp]
	movss	DWORD PTR _q$[ebp], xmm0

; 3734 : 	q.y = target->YPos() - YPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv404[ebp]
	movss	xmm0, DWORD PTR tv404[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv556[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv408[ebp]
	movss	xmm0, DWORD PTR tv556[ebp]
	subss	xmm0, DWORD PTR tv408[ebp]
	movss	DWORD PTR _q$[ebp+4], xmm0

; 3735 : 	q.z = target->ZPos() - ZPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv412[ebp]
	movss	xmm0, DWORD PTR tv412[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv558[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv416[ebp]
	movss	xmm0, DWORD PTR tv558[ebp]
	subss	xmm0, DWORD PTR tv416[ebp]
	movss	DWORD PTR _q$[ebp+8], xmm0

; 3736 : 
; 3737 : 	// Calculate interceptor's speed
; 3738 : 	ownSpeed = GetUnitSpeed() * KPH_TO_FPS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	call	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f693e32
	movss	DWORD PTR _ownSpeed$[ebp], xmm0

; 3739 : 	ownSpeed = ownSpeed * ownSpeed;

	movss	xmm0, DWORD PTR _ownSpeed$[ebp]
	mulss	xmm0, DWORD PTR _ownSpeed$[ebp]
	movss	DWORD PTR _ownSpeed$[ebp], xmm0

; 3740 : 
; 3741 : 	if (target->IsUnit())

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN14@FindCollis

; 3742 : 		speed = (float)((Unit)target)->GetUnitSpeed() * KPH_TO_FPS;

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+516]
	call	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f693e32
	movss	DWORD PTR _speed$[ebp], xmm0
	jmp	SHORT $LN12@FindCollis
$LN14@FindCollis:

; 3743 : 	else if (target->IsSim())

	mov	ecx, DWORD PTR _target$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN12@FindCollis

; 3744 : 		speed = GetVt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR _speed$[ebp]
$LN12@FindCollis:

; 3745 : 	if (speed > 1.0F)

	movss	xmm0, DWORD PTR _speed$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN11@FindCollis

; 3746 : 	{
; 3747 : 		mlSinCos(&sincos, target->Yaw());

	mov	ecx, DWORD PTR _target$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _sincos$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 3748 : 		xdel = speed * sincos.cos;

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR _sincos$[ebp+4]
	movss	DWORD PTR _xdel$[ebp], xmm0

; 3749 : 		ydel = speed * sincos.sin;

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR _sincos$[ebp]
	movss	DWORD PTR _ydel$[ebp], xmm0

; 3750 : 		zdel = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _zdel$[ebp], xmm0

; 3751 : 		a = (xdel*xdel + ydel*ydel) - ownSpeed;

	movss	xmm0, DWORD PTR _xdel$[ebp]
	mulss	xmm0, DWORD PTR _xdel$[ebp]
	movss	xmm1, DWORD PTR _ydel$[ebp]
	mulss	xmm1, DWORD PTR _ydel$[ebp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR _ownSpeed$[ebp]
	movss	DWORD PTR _a$[ebp], xmm0

; 3752 : 		b = (xdel*q.x + ydel*q.y) * 2.0F;

	movss	xmm0, DWORD PTR _xdel$[ebp]
	mulss	xmm0, DWORD PTR _q$[ebp]
	movss	xmm1, DWORD PTR _ydel$[ebp]
	mulss	xmm1, DWORD PTR _q$[ebp+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _b$[ebp], xmm0

; 3753 : 		c = q.x*q.x + q.y*q.y + q.z*q.z;

	movss	xmm0, DWORD PTR _q$[ebp]
	mulss	xmm0, DWORD PTR _q$[ebp]
	movss	xmm1, DWORD PTR _q$[ebp+4]
	mulss	xmm1, DWORD PTR _q$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _q$[ebp+8]
	mulss	xmm1, DWORD PTR _q$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _c$[ebp], xmm0

; 3754 : 
; 3755 : 		// First, see if there is a real solution (ie.  (b*b - 4*a*c) >= 0 )
; 3756 : 		//
; 3757 : 		underRad = b*b - 4.0F*a*c;

	movss	xmm0, DWORD PTR _b$[ebp]
	mulss	xmm0, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR _a$[ebp]
	mulss	xmm1, DWORD PTR _c$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _underRad$[ebp], xmm0

; 3758 : 
; 3759 : 		if ( underRad < 0.0F )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _underRad$[ebp]
	jbe	SHORT $LN10@FindCollis

; 3760 : 		{
; 3761 : 			// line does not intersect sphere
; 3762 : 			retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 3763 : 		}
; 3764 : 		else

	jmp	$LN4@FindCollis
$LN10@FindCollis:

; 3765 : 		{
; 3766 : 			// find the points where the intersection(s) happen
; 3767 : 			retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 3768 : 			if ( underRad == 0.0F )

	movss	xmm0, DWORD PTR _underRad$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN8@FindCollis

; 3769 : 			{
; 3770 : 				minT = maxT = -b / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _maxT$[ebp], xmm0
	movss	xmm0, DWORD PTR _maxT$[ebp]
	movss	DWORD PTR _minT$[ebp], xmm0

; 3771 : 				collPoint->x = target->XPos() + xdel * minT;

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv460[ebp]
	movss	xmm0, DWORD PTR tv460[ebp]
	movss	xmm1, DWORD PTR _xdel$[ebp]
	mulss	xmm1, DWORD PTR _minT$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3772 : 				collPoint->y = target->YPos() + ydel * minT;

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv466[ebp]
	movss	xmm0, DWORD PTR tv466[ebp]
	movss	xmm1, DWORD PTR _ydel$[ebp]
	mulss	xmm1, DWORD PTR _minT$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 3773 : 				collPoint->z = target->ZPos() + zdel * minT;

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv472[ebp]
	movss	xmm0, DWORD PTR tv472[ebp]
	movss	xmm1, DWORD PTR _zdel$[ebp]
	mulss	xmm1, DWORD PTR _minT$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 3774 : 			}
; 3775 : 			else

	jmp	$LN4@FindCollis
$LN8@FindCollis:

; 3776 : 			{
; 3777 : 				minT = (-b - (float)sqrt(underRad)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	xmm1, DWORD PTR _underRad$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv560[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv481[ebp]
	movss	xmm0, DWORD PTR tv560[ebp]
	subss	xmm0, DWORD PTR tv481[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _minT$[ebp], xmm0

; 3778 : 				maxT = (-b + (float)sqrt(underRad)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	xmm1, DWORD PTR _underRad$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv562[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv489[ebp]
	movss	xmm0, DWORD PTR tv562[ebp]
	addss	xmm0, DWORD PTR tv489[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _maxT$[ebp], xmm0

; 3779 : 
; 3780 : 				if (minT < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _minT$[ebp]
	jbe	SHORT $LN6@FindCollis

; 3781 : 					minT = maxT;

	movss	xmm0, DWORD PTR _maxT$[ebp]
	movss	DWORD PTR _minT$[ebp], xmm0
$LN6@FindCollis:

; 3782 : 				if (minT < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _minT$[ebp]
	jbe	SHORT $LN5@FindCollis

; 3783 : 					retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 3784 : 				else

	jmp	SHORT $LN4@FindCollis
$LN5@FindCollis:

; 3785 : 				{
; 3786 : 					collPoint->x = target->XPos() + xdel * minT; // - XPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv497[ebp]
	movss	xmm0, DWORD PTR tv497[ebp]
	movss	xmm1, DWORD PTR _xdel$[ebp]
	mulss	xmm1, DWORD PTR _minT$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3787 : 					collPoint->y = target->YPos() + ydel * minT; // - YPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv503[ebp]
	movss	xmm0, DWORD PTR tv503[ebp]
	movss	xmm1, DWORD PTR _ydel$[ebp]
	mulss	xmm1, DWORD PTR _minT$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 3788 : 					collPoint->z = target->ZPos() + zdel * minT; // - ZPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv509[ebp]
	movss	xmm0, DWORD PTR tv509[ebp]
	movss	xmm1, DWORD PTR _zdel$[ebp]
	mulss	xmm1, DWORD PTR _minT$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN4@FindCollis:

; 3789 : 				}
; 3790 : 			}
; 3791 : 		}
; 3792 : 	}
; 3793 : 	else

	jmp	SHORT $LN3@FindCollis
$LN11@FindCollis:

; 3794 : 	{
; 3795 : 		// Just head towards this slow mover/static location
; 3796 : 		collPoint->x = target->XPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, DWORD PTR _collPoint$[ebp]
	fstp	DWORD PTR [edx]

; 3797 : 		collPoint->y = target->YPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, DWORD PTR _collPoint$[ebp]
	fstp	DWORD PTR [eax+4]

; 3798 : 		collPoint->z = target->ZPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _collPoint$[ebp]
	fstp	DWORD PTR [ecx+8]

; 3799 : 		retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN3@FindCollis:

; 3800 : 	}
; 3801 : 
; 3802 : 	// KCK hackish: If the points moved by greater than x feet, send another awacs message
; 3803 : 	if (assigned_target == target->Id() && DistSqu(collPoint->x,collPoint->y,last_collision_x,last_collision_y) > 10*NM_TO_FT*10*NM_TO_FT)

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	$LN1@FindCollis
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+432]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+428]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _collPoint$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _collPoint$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?DistSqu@@YAMMMMM@Z			; DistSqu
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv540[ebp]
	movss	xmm0, DWORD PTR tv540[ebp]
	comiss	xmm0, DWORD PTR __real@4f5c0ff8
	jbe	SHORT $LN1@FindCollis

; 3804 : 	{
; 3805 : 		last_collision_x = collPoint->x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _collPoint$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+428], ecx

; 3806 : 		last_collision_y = collPoint->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _collPoint$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+432], ecx

; 3807 : 		if (!noAWACS && target->IsCampaign())

	cmp	DWORD PTR _noAWACS$[ebp], 0
	jne	SHORT $LN1@FindCollis
	mov	ecx, DWORD PTR _target$[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN1@FindCollis

; 3808 : 			PlayDivertRadioCalls((CampEntity)target, mission, this, 1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+377]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	?PlayDivertRadioCalls@@YAXPAVCampBaseClass@@HPAVFlightClass@@H@Z ; PlayDivertRadioCalls
	add	esp, 16					; 00000010H
$LN1@FindCollis:

; 3809 : 	}
; 3810 : 
; 3811 : 	return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 3812 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindCollisionPoint@FlightClass@@QAEHPAVFalconEntity@@PAUvector@@H@Z ENDP ; FlightClass::FindCollisionPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_awacs$ = -4						; size = 4
?GetFlightController@FlightClass@@QAEPAV1@XZ PROC	; FlightClass::GetFlightController
; _this$ = ecx

; 3693 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3694 : 	Flight	awacs;
; 3695 : 	// Check FAC/JSTAR/AWACS callsign
; 3696 : 	awacs = GetFACFlight();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFACFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetFACFlight
	mov	DWORD PTR _awacs$[ebp], eax

; 3697 : 	if (!awacs)

	cmp	DWORD PTR _awacs$[ebp], 0
	jne	SHORT $LN2@GetFlightC

; 3698 : 		awacs = GetJSTARFlight();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetJSTARFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetJSTARFlight
	mov	DWORD PTR _awacs$[ebp], eax
$LN2@GetFlightC:

; 3699 : 	if (!awacs)

	cmp	DWORD PTR _awacs$[ebp], 0
	jne	SHORT $LN1@GetFlightC

; 3700 : 		awacs = GetAWACSFlight();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAWACSFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetAWACSFlight
	mov	DWORD PTR _awacs$[ebp], eax
$LN1@GetFlightC:

; 3701 : 	return awacs;

	mov	eax, DWORD PTR _awacs$[ebp]

; 3702 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlightController@FlightClass@@QAEPAV1@XZ ENDP	; FlightClass::GetFlightController
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_pack$ = -4						; size = 4
?GetTankerFlight@FlightClass@@QAEPAV1@XZ PROC		; FlightClass::GetTankerFlight
; _this$ = ecx

; 3665 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3666 : 	Package			pack = (Package) vuDatabase->Find(package);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pack$[ebp], eax

; 3667 : 
; 3668 : 	if (pack)

	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $LN1@GetTankerF

; 3669 : 		return (Flight) vuDatabase->Find(pack->GetTanker());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ ; PackageClass::GetTanker
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	jmp	SHORT $LN2@GetTankerF
$LN1@GetTankerF:

; 3670 : 	return NULL;

	xor	eax, eax
$LN2@GetTankerF:

; 3671 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTankerFlight@FlightClass@@QAEPAV1@XZ ENDP		; FlightClass::GetTankerFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pack$ = -4						; size = 4
?GetFACFlight@FlightClass@@QAEPAV1@XZ PROC		; FlightClass::GetFACFlight
; _this$ = ecx

; 3683 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3684 : 	Package			pack = (Package) vuDatabase->Find(package);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pack$[ebp], eax

; 3685 : 
; 3686 : 	if (pack)

	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $LN1@GetFACFlig

; 3687 : 		return pack->GetFACFlight();

	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetFACFlight@PackageClass@@QAEPAVFlightClass@@XZ ; PackageClass::GetFACFlight
	jmp	SHORT $LN2@GetFACFlig
$LN1@GetFACFlig:

; 3688 : 	return NULL;

	xor	eax, eax
$LN2@GetFACFlig:

; 3689 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFACFlight@FlightClass@@QAEPAV1@XZ ENDP		; FlightClass::GetFACFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_pack$ = -4						; size = 4
?GetJSTARFlight@FlightClass@@QAEPAV1@XZ PROC		; FlightClass::GetJSTARFlight
; _this$ = ecx

; 3674 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3675 : 	Package			pack = (Package) vuDatabase->Find(package);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pack$[ebp], eax

; 3676 : 
; 3677 : 	if (pack)

	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $LN1@GetJSTARFl

; 3678 : 		return (Flight) vuDatabase->Find(pack->GetJStar());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetJStar@PackageClass@@QAE?AVVU_ID@@XZ	; PackageClass::GetJStar
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	jmp	SHORT $LN2@GetJSTARFl
$LN1@GetJSTARFl:

; 3679 : 	return NULL;

	xor	eax, eax
$LN2@GetJSTARFl:

; 3680 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetJSTARFlight@FlightClass@@QAEPAV1@XZ ENDP		; FlightClass::GetJSTARFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_pack$ = -4						; size = 4
?GetAWACSFlight@FlightClass@@QAEPAV1@XZ PROC		; FlightClass::GetAWACSFlight
; _this$ = ecx

; 3656 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3657 : 	Package			pack = (Package) vuDatabase->Find(package);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pack$[ebp], eax

; 3658 : 
; 3659 : 	if (pack)

	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $LN1@GetAWACSFl

; 3660 : 		return (Flight) vuDatabase->Find(pack->GetAwacs());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetAwacs@PackageClass@@QAE?AVVU_ID@@XZ	; PackageClass::GetAwacs
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	jmp	SHORT $LN2@GetAWACSFl
$LN1@GetAWACSFl:

; 3661 : 	return NULL;

	xor	eax, eax
$LN2@GetAWACSFl:

; 3662 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAWACSFlight@FlightClass@@QAEPAV1@XZ ENDP		; FlightClass::GetAWACSFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_pack$2 = -8						; size = 4
_this$ = -4						; size = 4
?GetECMFlight@FlightClass@@QAEPAV1@XZ PROC		; FlightClass::GetECMFlight
; _this$ = ecx

; 3635 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3636 : 	// If -1, we haven't tried to read the ecmFlightPtr field yet...
; 3637 : 	if (ecmFlightPtr == (FlightClass *)(unsigned)-1) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+440], -1
	jne	SHORT $LN3@GetECMFlig

; 3638 : 		// Assign NULL by default on the first read
; 3639 : 		ecmFlightPtr = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+440], 0

; 3640 : 
; 3641 : 		// Get the ECM flight from our package (if any)
; 3642 : 		Package	pack = (Package) vuDatabase->Find(package);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	push	eax
	mov	ecx, DWORD PTR [edx+384]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pack$2[ebp], eax

; 3643 : 		if (pack)

	cmp	DWORD PTR _pack$2[ebp], 0
	je	SHORT $LN3@GetECMFlig

; 3644 : 			ecmFlightPtr = (Flight) vuDatabase->Find(pack->GetECM());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _pack$2[ebp]
	call	?GetECM@PackageClass@@QAE?AVVU_ID@@XZ	; PackageClass::GetECM
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+440], eax
$LN3@GetECMFlig:

; 3645 : 	}
; 3646 : 
; 3647 : 	// If the ECM flight is now dead, we can't use it anymore...
; 3648 : 	if (ecmFlightPtr && ecmFlightPtr->IsDead())

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+440], 0
	je	SHORT $LN1@GetECMFlig
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+440]
	mov	edx, DWORD PTR [eax+552]
	call	edx
	test	eax, eax
	je	SHORT $LN1@GetECMFlig

; 3649 : 		ecmFlightPtr = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+440], 0
$LN1@GetECMFlig:

; 3650 : 
; 3651 : 	return ecmFlightPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+440]

; 3652 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetECMFlight@FlightClass@@QAEPAV1@XZ ENDP		; FlightClass::GetECMFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanAbort@FlightClass@@QAEHXZ PROC			; FlightClass::CanAbort
; _this$ = ecx

; 3624 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3625 : 	if (!HasFuel() || !HasWeapons())

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasFuel@FlightClass@@QAEHH@Z		; FlightClass::HasFuel
	test	eax, eax
	je	SHORT $LN2@CanAbort
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasWeapons@FlightClass@@QAEHXZ		; FlightClass::HasWeapons
	test	eax, eax
	jne	SHORT $LN3@CanAbort
$LN2@CanAbort:

; 3626 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN4@CanAbort
$LN3@CanAbort:

; 3627 : 	// Check if off station time
; 3628 : 	if ((eval_flags & FEVAL_MISSION_STARTED) && (eval_flags & FEVAL_GOT_TO_TARGET) && !(eval_flags & FEVAL_GOT_TO_TARGET))

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+382]
	and	ecx, 1
	je	SHORT $LN1@CanAbort
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+382]
	and	eax, 2
	je	SHORT $LN1@CanAbort
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+382]
	and	edx, 2
	jne	SHORT $LN1@CanAbort

; 3629 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN4@CanAbort
$LN1@CanAbort:

; 3630 : 	return 0;

	xor	eax, eax
$LN4@CanAbort:

; 3631 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CanAbort@FlightClass@@QAEHXZ ENDP			; FlightClass::CanAbort
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
_limit$ = 8						; size = 4
?HasFuel@FlightClass@@QAEHH@Z PROC			; FlightClass::HasFuel
; _this$ = ecx

; 3608 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 3609 : 
; 3610 : 	limit = min(limit, 12); // Fox Mulder said to trust no one ;-)

	cmp	DWORD PTR _limit$[ebp], 12		; 0000000cH
	jge	SHORT $LN5@HasFuel
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN6@HasFuel
$LN5@HasFuel:
	mov	DWORD PTR tv65[ebp], 12			; 0000000cH
$LN6@HasFuel:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _limit$[ebp], ecx

; 3611 : 
; 3612 : 	// Check for fuel (we're considered out when we've used 3/4 of our available fuel)
; 3613 : 	//	if (fuel_burnt < (class_data->Fuel * 3) / 4)
; 3614 : 	if (fuel_burnt < class_data->Fuel * limit / 12)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	mov	eax, DWORD PTR [eax+260]
	imul	eax, DWORD PTR _limit$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+264], eax
	jge	SHORT $LN2@HasFuel

; 3615 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN3@HasFuel
$LN2@HasFuel:

; 3616 : 	// Now a more costly check in case we have external tanks
; 3617 : 	//	if (CalculateFuelAvailable(255) > class_data->Fuel/4)
; 3618 : 	if (CalculateFuelAvailable(255) > class_data->Fuel * (12 - limit) / 12)

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	mov	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	mov	edx, 12					; 0000000cH
	sub	edx, DWORD PTR _limit$[ebp]
	imul	edx, DWORD PTR [eax+260]
	mov	eax, edx
	cdq
	mov	esi, 12					; 0000000cH
	idiv	esi
	cmp	ecx, eax
	jle	SHORT $LN1@HasFuel

; 3619 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN3@HasFuel
$LN1@HasFuel:

; 3620 : 	return 0;

	xor	eax, eax
$LN3@HasFuel:

; 3621 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?HasFuel@FlightClass@@QAEHH@Z ENDP			; FlightClass::HasFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_oldmission$ = -52					; size = 4
_oldrole$ = -48						; size = 4
_nogun$ = -44						; size = 4
_e$ = -40						; size = 4
_i$ = -36						; size = 4
_ac$ = -32						; size = 4
_weaps$ = -28						; size = 4
_role$ = -24						; size = 4
_this$ = -20						; size = 4
_x$1 = -16						; size = 2
_y$2 = -12						; size = 2
_ex$3 = -8						; size = 2
_ey$4 = -4						; size = 2
?HasWeapons@FlightClass@@QAEHXZ PROC			; FlightClass::HasWeapons
; _this$ = ecx

; 3536 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 3537 : 	int				weaps=0,nogun=1,i,ac,role = GetUnitCurrentRole();

	mov	DWORD PTR _weaps$[ebp], 0
	mov	DWORD PTR _nogun$[ebp], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	mov	DWORD PTR _role$[ebp], eax

; 3538 : 	FalconEntity	*e;
; 3539 : 
; 3540 : 	// 2002-03-25 MN if we find out that we don't have the needed weapons later, revert back to our
; 3541 : 	// previous mission profile
; 3542 : 	int				oldmission = ourMission, oldrole = role;

	mov	ecx, DWORD PTR ?ourMission@@3HA		; ourMission
	mov	DWORD PTR _oldmission$[ebp], ecx
	mov	edx, DWORD PTR _role$[ebp]
	mov	DWORD PTR _oldrole$[ebp], edx

; 3543 : 
; 3544 : 
; 3545 : 	ourRange = 9999;

	mov	DWORD PTR ?ourRange@@3HA, 9999		; ourRange, 0000270fH

; 3546 : 	e = GetTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _e$[ebp], eax

; 3547 : 	if (Engaged() && !e)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN25@HasWeapons
	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN25@HasWeapons

; 3548 : 		SetEngaged(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged
$LN25@HasWeapons:

; 3549 : 	if (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN22@HasWeapons

; 3550 : 	{
; 3551 : 		GridIndex	x,y,ex,ey;
; 3552 : 		GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 3553 : 		e->GetLocation(&ex,&ey);

	lea	edx, DWORD PTR _ey$4[ebp]
	push	edx
	lea	eax, DWORD PTR _ex$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 3554 : 		ourRange = FloatToInt32(Distance(x,y,ex,ey));

	movzx	ecx, WORD PTR _ey$4[ebp]
	push	ecx
	movzx	edx, WORD PTR _ex$3[ebp]
	push	edx
	movzx	eax, WORD PTR _y$2[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$1[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR ?ourRange@@3HA, eax		; ourRange

; 3555 : 		theirDomain = e->GetDomain();

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+124]
	call	edx
	movzx	eax, al
	mov	DWORD PTR ?theirDomain@@3HA, eax	; theirDomain

; 3556 : 		if (role != ARO_CA && theirDomain == DOMAIN_AIR)

	cmp	DWORD PTR _role$[ebp], 1
	je	SHORT $LN22@HasWeapons
	cmp	DWORD PTR ?theirDomain@@3HA, 2		; theirDomain
	jne	SHORT $LN22@HasWeapons

; 3557 : 		{
; 3558 : 			if (ourRange < MIN_IGNORE_RANGE)

	cvtsi2ss xmm0, DWORD PTR ?ourRange@@3HA		; ourRange
	movss	xmm1, DWORD PTR ?MIN_IGNORE_RANGE@@3MA
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@HasWeapons

; 3559 : 			{
; 3560 : 				// KCK: If we're to close to ignore these aircraft, we've got to engage
; 3561 : 				// I'm forcing us to act like a sweep mission until we're out of range.
; 3562 : 				// NOTE: One problem may be that aircraft with no air kill capibility
; 3563 : 				// may abort even if they have escorts. I may have to special case this.
; 3564 : 				role = ARO_CA;

	mov	DWORD PTR _role$[ebp], 1

; 3565 : 				ourMission = AMIS_SWEEP;

	mov	DWORD PTR ?ourMission@@3HA, 7		; ourMission
$LN22@HasWeapons:

; 3566 : 			}
; 3567 : 		}
; 3568 : 	}
; 3569 : 
; 3570 : 	// If we have a target and are engaged, count guns for purposes of having weapons
; 3571 : 	if ((e && Engaged()) || NoAbort())

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN19@HasWeapons
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	jne	SHORT $LN20@HasWeapons
$LN19@HasWeapons:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NoAbort@UnitClass@@QAEHXZ		; UnitClass::NoAbort
	test	eax, eax
	je	SHORT $LN21@HasWeapons
$LN20@HasWeapons:

; 3572 : 		nogun = 0;

	mov	DWORD PTR _nogun$[ebp], 0
$LN21@HasWeapons:

; 3573 : 	for (ac=0; ac<loadouts; ac++)

	mov	DWORD PTR _ac$[ebp], 0
	jmp	SHORT $LN18@HasWeapons
$LN17@HasWeapons:
	mov	ecx, DWORD PTR _ac$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ac$[ebp], ecx
$LN18@HasWeapons:
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+376]
	cmp	DWORD PTR _ac$[ebp], eax
	jge	$LN16@HasWeapons

; 3574 : 	{
; 3575 : 		for (i=nogun; i<HARDPOINT_MAX && !weaps; i++)

	mov	ecx, DWORD PTR _nogun$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN15@HasWeapons
$LN14@HasWeapons:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@HasWeapons:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN13@HasWeapons
	cmp	DWORD PTR _weaps$[ebp], 0
	jne	$LN13@HasWeapons

; 3576 : 		{
; 3577 : 			if (role == ARO_CA)

	cmp	DWORD PTR _role$[ebp], 1
	jne	SHORT $LN12@HasWeapons

; 3578 : 			{
; 3579 : 				if (loadout[ac].WeaponCount[i] && GetWeaponHitChance(loadout[ac].WeaponID[i],Air))

	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+eax+32]
	test	ecx, ecx
	je	SHORT $LN11@HasWeapons
	push	5
	mov	edx, DWORD PTR _ac$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	push	eax
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@HasWeapons

; 3580 : 					weaps++;

	mov	ecx, DWORD PTR _weaps$[ebp]
	add	ecx, 1
	mov	DWORD PTR _weaps$[ebp], ecx
$LN11@HasWeapons:

; 3581 : 			}

	jmp	$LN2@HasWeapons
$LN12@HasWeapons:

; 3582 : 			else if (role == ARO_S || role == ARO_GA || role == ARO_SB || role == ARO_SEAD)

	cmp	DWORD PTR _role$[ebp], 3
	je	SHORT $LN8@HasWeapons
	cmp	DWORD PTR _role$[ebp], 4
	je	SHORT $LN8@HasWeapons
	cmp	DWORD PTR _role$[ebp], 5
	je	SHORT $LN8@HasWeapons
	cmp	DWORD PTR _role$[ebp], 7
	jne	SHORT $LN9@HasWeapons
$LN8@HasWeapons:

; 3583 : 			{
; 3584 : 				if (loadout[ac].WeaponCount[i] && GetWeaponHitChance(loadout[ac].WeaponID[i],NoMove))

	mov	edx, DWORD PTR _ac$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx+32]
	test	eax, eax
	je	SHORT $LN7@HasWeapons
	push	0
	mov	ecx, DWORD PTR _ac$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	push	edx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@HasWeapons

; 3585 : 					weaps++;

	mov	eax, DWORD PTR _weaps$[ebp]
	add	eax, 1
	mov	DWORD PTR _weaps$[ebp], eax
$LN7@HasWeapons:

; 3586 : 			}

	jmp	SHORT $LN2@HasWeapons
$LN9@HasWeapons:

; 3587 : 			else if (role == ARO_ASW || role == ARO_ASHIP)

	cmp	DWORD PTR _role$[ebp], 8
	je	SHORT $LN4@HasWeapons
	cmp	DWORD PTR _role$[ebp], 9
	jne	SHORT $LN5@HasWeapons
$LN4@HasWeapons:

; 3588 : 			{
; 3589 : 				if (loadout[ac].WeaponCount[i] && GetWeaponHitChance(loadout[ac].WeaponID[i],Naval))

	mov	ecx, DWORD PTR _ac$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx+32]
	test	edx, edx
	je	SHORT $LN3@HasWeapons
	push	6
	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	push	ecx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@HasWeapons

; 3590 : 					weaps++;

	mov	edx, DWORD PTR _weaps$[ebp]
	add	edx, 1
	mov	DWORD PTR _weaps$[ebp], edx
$LN3@HasWeapons:

; 3591 : 			}
; 3592 : 			else

	jmp	SHORT $LN2@HasWeapons
$LN5@HasWeapons:

; 3593 : 				weaps++;		// Non-combat roles always 'have weapons'

	mov	eax, DWORD PTR _weaps$[ebp]
	add	eax, 1
	mov	DWORD PTR _weaps$[ebp], eax
$LN2@HasWeapons:

; 3594 : 		}

	jmp	$LN14@HasWeapons
$LN13@HasWeapons:

; 3595 : 	}

	jmp	$LN17@HasWeapons
$LN16@HasWeapons:

; 3596 : 
; 3597 : 	// MN continue with our original mission profile if we don't have the needed weapons (like RECONPATROL engaging fighters..)
; 3598 : 	if (!weaps)

	cmp	DWORD PTR _weaps$[ebp], 0
	jne	SHORT $LN1@HasWeapons

; 3599 : 	{
; 3600 : 		role = oldrole;

	mov	ecx, DWORD PTR _oldrole$[ebp]
	mov	DWORD PTR _role$[ebp], ecx

; 3601 : 		ourMission = oldmission;

	mov	edx, DWORD PTR _oldmission$[ebp]
	mov	DWORD PTR ?ourMission@@3HA, edx		; ourMission
$LN1@HasWeapons:

; 3602 : 	}
; 3603 : 
; 3604 : 	return weaps;

	mov	eax, DWORD PTR _weaps$[ebp]

; 3605 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasWeapons@FlightClass@@QAEHXZ ENDP			; FlightClass::HasWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_uc$ = -20						; size = 4
_fuel$ = -16						; size = 4
_maxFuel$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_acNum$ = 8						; size = 4
?CalculateFuelAvailable@FlightClass@@QAEJH@Z PROC	; FlightClass::CalculateFuelAvailable
; _this$ = ecx

; 3506 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3507 : 	// Determine fuel load, given current/UI loadout
; 3508 : 	int					i;
; 3509 : 	UnitClassDataType	*uc = GetUnitClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$[ebp], eax

; 3510 : 	long				fuel,maxFuel = uc->Fuel;

	mov	eax, DWORD PTR _uc$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	DWORD PTR _maxFuel$[ebp], ecx

; 3511 : 
; 3512 : 	if (acNum >= loadouts)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+376]
	cmp	DWORD PTR _acNum$[ebp], eax
	jl	SHORT $LN7@CalculateF

; 3513 : 		acNum = 0;

	mov	DWORD PTR _acNum$[ebp], 0
$LN7@CalculateF:

; 3514 : 
; 3515 : 	// Find max amount of fuel this plane can carry
; 3516 : 	//if (loadout)
; 3517 : 	if (loadout && !F4IsBadReadPtr(loadout[0].WeaponID, sizeof(short))) // JB 010326 CTD

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+372], 0
	je	$LN6@CalculateF
	push	2
	mov	edx, 48					; 00000030H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	$LN6@CalculateF

; 3518 : 	{
; 3519 : 		for (i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@CalculateF
$LN4@CalculateF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@CalculateF:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN6@CalculateF

; 3520 : 		{
; 3521 : 			if (loadout[acNum].WeaponID[i] && WeaponDataTable[loadout[acNum].WeaponID[i]].Flags & WEAP_FUEL)

	mov	ecx, DWORD PTR _acNum$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	test	edx, edx
	je	SHORT $LN2@CalculateF
	mov	eax, DWORD PTR _acNum$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	eax, WORD PTR [edx+ecx+10]
	and	eax, 2
	je	SHORT $LN2@CalculateF

; 3522 : 				maxFuel += WeaponDataTable[loadout[acNum].WeaponID[i]].Strength;

	mov	ecx, DWORD PTR _acNum$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	ecx, WORD PTR [eax+edx+2]
	add	ecx, DWORD PTR _maxFuel$[ebp]
	mov	DWORD PTR _maxFuel$[ebp], ecx
$LN2@CalculateF:

; 3523 : 		}

	jmp	$LN4@CalculateF
$LN6@CalculateF:

; 3524 : 	}
; 3525 : 
; 3526 : 	fuel = maxFuel - fuel_burnt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _maxFuel$[ebp]
	sub	eax, DWORD PTR [edx+264]
	mov	DWORD PTR _fuel$[ebp], eax

; 3527 : 	if (fuel < 0)

	jns	SHORT $LN1@CalculateF

; 3528 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN8@CalculateF
$LN1@CalculateF:

; 3529 : 	return fuel;

	mov	eax, DWORD PTR _fuel$[ebp]
$LN8@CalculateF:

; 3530 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalculateFuelAvailable@FlightClass@@QAEJH@Z ENDP	; FlightClass::CalculateFuelAvailable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_aircraft_num$ = 8					; size = 4
?GetAdjustedAircraftSlot@FlightClass@@QAEHH@Z PROC	; FlightClass::GetAdjustedAircraftSlot
; _this$ = ecx

; 3489 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3490 : 	// Find the aircraft_num's aircraft in the flight.
; 3491 : 	int		i;
; 3492 : 
; 3493 : 	for (i=0; i<PILOTS_PER_FLIGHT; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetAdjuste
$LN4@GetAdjuste:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GetAdjuste:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN3@GetAdjuste

; 3494 : 	{
; 3495 : 		if (plane_stats[i] == AIRCRAFT_AVAILABLE)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+416]
	cmp	edx, 4
	jne	SHORT $LN2@GetAdjuste

; 3496 : 		{
; 3497 : 			if (!aircraft_num)

	cmp	DWORD PTR _aircraft_num$[ebp], 0
	jne	SHORT $LN1@GetAdjuste

; 3498 : 				return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN6@GetAdjuste
$LN1@GetAdjuste:

; 3499 : 			aircraft_num--;

	mov	eax, DWORD PTR _aircraft_num$[ebp]
	sub	eax, 1
	mov	DWORD PTR _aircraft_num$[ebp], eax
$LN2@GetAdjuste:

; 3500 : 		}
; 3501 : 	}

	jmp	SHORT $LN4@GetAdjuste
$LN3@GetAdjuste:

; 3502 : 	return 255;

	mov	eax, 255				; 000000ffH
$LN6@GetAdjuste:

; 3503 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAdjustedAircraftSlot@FlightClass@@QAEHH@Z ENDP	; FlightClass::GetAdjustedAircraftSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlightLeadVoiceID@FlightClass@@QAEEXZ PROC		; FlightClass::GetFlightLeadVoiceID
; _this$ = ecx

; 3484 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3485 : 	return GetPilotVoiceID(GetFlightLeadSlot());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightLeadSlot@FlightClass@@QAEHXZ	; FlightClass::GetFlightLeadSlot
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID

; 3486 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ENDP		; FlightClass::GetFlightLeadVoiceID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_callnum$ = -12						; size = 4
_lead$ = -8						; size = 4
_this$ = -4						; size = 4
?GetFlightLeadCallNumber@FlightClass@@QAEHXZ PROC	; FlightClass::GetFlightLeadCallNumber
; _this$ = ecx

; 3475 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3476 : 	int callnum,lead = GetFlightLeadSlot();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightLeadSlot@FlightClass@@QAEHXZ	; FlightClass::GetFlightLeadSlot
	mov	DWORD PTR _lead$[ebp], eax

; 3477 : 
; 3478 : 	callnum = (callsign_num-1)*4 + lead + 1;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	mov	edx, DWORD PTR _lead$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-3]
	mov	DWORD PTR _callnum$[ebp], eax

; 3479 : 	return callnum;

	mov	eax, DWORD PTR _callnum$[ebp]

; 3480 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlightLeadCallNumber@FlightClass@@QAEHXZ ENDP	; FlightClass::GetFlightLeadCallNumber
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pilot$ = -4						; size = 4
?GetFlightLeadSlot@FlightClass@@QAEHXZ PROC		; FlightClass::GetFlightLeadSlot
; _this$ = ecx

; 3461 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3462 : 	int		pilot=0;

	mov	DWORD PTR _pilot$[ebp], 0
$LN2@GetFlightL:

; 3463 : 
; 3464 : 	// KCK: This line was previously not recognizing a player as being a valid flight lead.
; 3465 : 	// This should fix the problem.
; 3466 : 	//	while ((plane_stats[pilot] != AIRCRAFT_AVAILABLE || player_slots[pilot] < 255) && pilot < PILOTS_PER_FLIGHT)
; 3467 : 	while (plane_stats[pilot] != AIRCRAFT_AVAILABLE && pilot < PILOTS_PER_FLIGHT)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _pilot$[ebp]
	movzx	ecx, BYTE PTR [eax+416]
	cmp	ecx, 4
	je	SHORT $LN1@GetFlightL
	cmp	DWORD PTR _pilot$[ebp], 4
	jge	SHORT $LN1@GetFlightL

; 3468 : 		pilot++;

	mov	edx, DWORD PTR _pilot$[ebp]
	add	edx, 1
	mov	DWORD PTR _pilot$[ebp], edx
	jmp	SHORT $LN2@GetFlightL
$LN1@GetFlightL:

; 3469 : 
; 3470 : 	return pilot;	

	mov	eax, DWORD PTR _pilot$[ebp]

; 3471 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlightLeadSlot@FlightClass@@QAEHXZ ENDP		; FlightClass::GetFlightLeadSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_count$ = -8						; size = 4
_i$ = -4						; size = 4
?GetACCount@FlightClass@@QAEHXZ PROC			; FlightClass::GetACCount
; _this$ = ecx

; 4320 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 4321 : 	int i,count=0;

	mov	DWORD PTR _count$[ebp], 0

; 4322 : 
; 4323 : 	for(i=0;i<PILOTS_PER_FLIGHT;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetACCount
$LN3@GetACCount:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetACCount:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN2@GetACCount

; 4324 : 	{
; 4325 : 		if(plane_stats[i] == AIRCRAFT_AVAILABLE)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+416]
	cmp	edx, 4
	jne	SHORT $LN1@GetACCount

; 4326 : 			count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN1@GetACCount:

; 4327 : 	}

	jmp	SHORT $LN3@GetACCount
$LN2@GetACCount:

; 4328 : 	return(count);

	mov	eax, DWORD PTR _count$[ebp]

; 4329 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetACCount@FlightClass@@QAEHXZ ENDP			; FlightClass::GetACCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_count$ = -8						; size = 4
_i$ = -4						; size = 4
?GetPilotCount@FlightClass@@QAEHXZ PROC			; FlightClass::GetPilotCount
; _this$ = ecx

; 4307 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 4308 : 	int i,count=0;

	mov	DWORD PTR _count$[ebp], 0

; 4309 : 
; 4310 : 	for(i=0;i<PILOTS_PER_FLIGHT;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetPilotCo
$LN4@GetPilotCo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GetPilotCo:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN3@GetPilotCo

; 4311 : 	{
; 4312 : 		if(pilots[i] != NO_PILOT || player_slots[i] < 255)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN1@GetPilotCo
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+420]
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $LN2@GetPilotCo
$LN1@GetPilotCo:

; 4313 : 			count++;

	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$LN2@GetPilotCo:

; 4314 : 	}

	jmp	SHORT $LN4@GetPilotCo
$LN3@GetPilotCo:

; 4315 : 	return(count);

	mov	eax, DWORD PTR _count$[ebp]

; 4316 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPilotCount@FlightClass@@QAEHXZ ENDP			; FlightClass::GetPilotCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_pilot_id$ = -8						; size = 4
_this$ = -4						; size = 4
_pilot_slot$ = 8					; size = 4
?GetPilotVoiceID@FlightClass@@QAEEH@Z PROC		; FlightClass::GetPilotVoiceID
; _this$ = ecx

; 3443 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN4@GetPilotVo:

; 3444 : 	while (pilot_slot < PILOTS_PER_FLIGHT && pilots[pilot_slot] == NO_PILOT)

	cmp	DWORD PTR _pilot_slot$[ebp], 4
	jge	SHORT $LN3@GetPilotVo
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _pilot_slot$[ebp]
	movzx	ecx, BYTE PTR [eax+412]
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $LN3@GetPilotVo

; 3445 : 		pilot_slot++;

	mov	edx, DWORD PTR _pilot_slot$[ebp]
	add	edx, 1
	mov	DWORD PTR _pilot_slot$[ebp], edx
	jmp	SHORT $LN4@GetPilotVo
$LN3@GetPilotVo:

; 3446 : 
; 3447 : 	if (pilot_slot >= PILOTS_PER_FLIGHT)

	cmp	DWORD PTR _pilot_slot$[ebp], 4
	jl	SHORT $LN2@GetPilotVo

; 3448 : 		return 1;

	mov	al, 1
	jmp	SHORT $LN5@GetPilotVo
$LN2@GetPilotVo:

; 3449 : 
; 3450 : 	int		pilot_id = GetPilotID(pilot_slot);

	mov	eax, DWORD PTR _pilot_slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPilotID@FlightClass@@QAEHH@Z	; FlightClass::GetPilotID
	mov	DWORD PTR _pilot_id$[ebp], eax

; 3451 : 
; 3452 :     //Pu239
; 3453 : 	//ShiAssert(PilotInfo[pilot_id].voice_id != 255); // JPO - should always be something else
; 3454 : 	if (PilotInfo[pilot_id].voice_id == 255)

	mov	ecx, DWORD PTR _pilot_id$[ebp]
	mov	edx, DWORD PTR ?PilotInfo@@3PAVPilotInfoClass@@A ; PilotInfo
	movzx	eax, BYTE PTR [edx+ecx*4+2]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN1@GetPilotVo

; 3455 : 		PilotInfo[pilot_id].AssignVoice(GetOwner());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _pilot_id$[ebp]
	mov	eax, DWORD PTR ?PilotInfo@@3PAVPilotInfoClass@@A ; PilotInfo
	lea	ecx, DWORD PTR [eax+edx*4]
	call	?AssignVoice@PilotInfoClass@@QAEXH@Z	; PilotInfoClass::AssignVoice
$LN1@GetPilotVo:

; 3456 : 	return (uchar)PilotInfo[pilot_id].voice_id;

	mov	ecx, DWORD PTR _pilot_id$[ebp]
	mov	edx, DWORD PTR ?PilotInfo@@3PAVPilotInfoClass@@A ; PilotInfo
	mov	al, BYTE PTR [edx+ecx*4+2]
$LN5@GetPilotVo:

; 3457 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPilotVoiceID@FlightClass@@QAEEH@Z ENDP		; FlightClass::GetPilotVoiceID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pilot_slot$ = 8					; size = 4
?GetPilotCallNumber@FlightClass@@QAEHH@Z PROC		; FlightClass::GetPilotCallNumber
; _this$ = ecx

; 3437 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3438 : 	pilot_slot = GetAdjustedPlayerSlot(pilot_slot);

	mov	eax, DWORD PTR _pilot_slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAdjustedPlayerSlot@FlightClass@@QAEHH@Z ; FlightClass::GetAdjustedPlayerSlot
	mov	DWORD PTR _pilot_slot$[ebp], eax

; 3439 : 	return (callsign_num-1)*4 + pilot_slot + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	mov	eax, DWORD PTR _pilot_slot$[ebp]
	lea	eax, DWORD PTR [eax+edx*4-3]

; 3440 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPilotCallNumber@FlightClass@@QAEHH@Z ENDP		; FlightClass::GetPilotCallNumber
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_squad$ = -8						; size = 4
_this$ = -4						; size = 4
_pilot_slot$ = 8					; size = 4
?GetPilotID@FlightClass@@QAEHH@Z PROC			; FlightClass::GetPilotID
; _this$ = ecx

; 3427 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3428 : 	Squadron	squad = (Squadron)GetUnitSquadron();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _squad$[ebp], eax

; 3429 : 
; 3430 : 	if (!squad || pilot_slot >= PILOTS_PER_FLIGHT || pilots[pilot_slot] > PILOTS_PER_SQUADRON)

	cmp	DWORD PTR _squad$[ebp], 0
	je	SHORT $LN2@GetPilotID
	cmp	DWORD PTR _pilot_slot$[ebp], 4
	jge	SHORT $LN2@GetPilotID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _pilot_slot$[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	cmp	edx, 48					; 00000030H
	jle	SHORT $LN3@GetPilotID
$LN2@GetPilotID:

; 3431 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetPilotID

; 3432 : 	else

	jmp	SHORT $LN4@GetPilotID
$LN3@GetPilotID:

; 3433 : 		return squad->GetPilotID(pilots[pilot_slot]);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _pilot_slot$[ebp]
	movzx	ecx, BYTE PTR [eax+412]
	push	ecx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?GetPilotID@SquadronClass@@QAEHH@Z	; SquadronClass::GetPilotID
$LN4@GetPilotID:

; 3434 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPilotID@FlightClass@@QAEHH@Z ENDP			; FlightClass::GetPilotID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_squad$ = -8						; size = 4
_this$ = -4						; size = 4
_pilot_slot$ = 8					; size = 4
?GetPilotData@FlightClass@@QAEPAVPilotClass@@H@Z PROC	; FlightClass::GetPilotData
; _this$ = ecx

; 3418 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3419 : 	Squadron	squad = (Squadron)GetUnitSquadron();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _squad$[ebp], eax

; 3420 : 
; 3421 : 	if (!squad || pilot_slot >= PILOTS_PER_FLIGHT || pilots[pilot_slot] > PILOTS_PER_SQUADRON)

	cmp	DWORD PTR _squad$[ebp], 0
	je	SHORT $LN1@GetPilotDa
	cmp	DWORD PTR _pilot_slot$[ebp], 4
	jge	SHORT $LN1@GetPilotDa
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _pilot_slot$[ebp]
	movzx	edx, BYTE PTR [ecx+412]
	cmp	edx, 48					; 00000030H
	jle	SHORT $LN2@GetPilotDa
$LN1@GetPilotDa:

; 3422 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetPilotDa
$LN2@GetPilotDa:

; 3423 : 	return squad->GetPilotData(pilots[pilot_slot]);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _pilot_slot$[ebp]
	movzx	ecx, BYTE PTR [eax+412]
	push	ecx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?GetPilotData@SquadronClass@@QAEPAVPilotClass@@H@Z ; SquadronClass::GetPilotData
$LN3@GetPilotDa:

; 3424 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPilotData@FlightClass@@QAEPAVPilotClass@@H@Z ENDP	; FlightClass::GetPilotData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_pslot$ = 8						; size = 4
?GetAdjustedPlayerSlot@FlightClass@@QAEHH@Z PROC	; FlightClass::GetAdjustedPlayerSlot
; _this$ = ecx

; 3401 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3402 : 	int		i;
; 3403 : 
; 3404 : 	if (pslot < PILOTS_PER_FLIGHT)

	cmp	DWORD PTR _pslot$[ebp], 4
	jge	SHORT $LN5@GetAdjuste

; 3405 : 		return pslot;

	mov	eax, DWORD PTR _pslot$[ebp]
	jmp	SHORT $LN6@GetAdjuste
$LN5@GetAdjuste:

; 3406 : 
; 3407 : 	for (i=0; i<PILOTS_PER_FLIGHT; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetAdjuste
$LN3@GetAdjuste:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetAdjuste:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN2@GetAdjuste

; 3408 : 	{
; 3409 : 		if (player_slots[i] == pslot)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+420]
	cmp	edx, DWORD PTR _pslot$[ebp]
	jne	SHORT $LN1@GetAdjuste

; 3410 : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN6@GetAdjuste
$LN1@GetAdjuste:

; 3411 : 	}

	jmp	SHORT $LN3@GetAdjuste
$LN2@GetAdjuste:

; 3412 : 
; 3413 : 	ShiAssert(!"We failed to adjust a player pilot slot");
; 3414 : 	return 0;

	xor	eax, eax
$LN6@GetAdjuste:

; 3415 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAdjustedPlayerSlot@FlightClass@@QAEHH@Z ENDP	; FlightClass::GetAdjustedPlayerSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_tries$ = -12						; size = 4
_this$ = -8						; size = 4
_pilot$ = -4						; size = 4
_seed$ = 8						; size = 4
?PickRandomPilot@FlightClass@@QAEHH@Z PROC		; FlightClass::PickRandomPilot
; _this$ = ecx

; 3375 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3376 : 	int		pilot,tries=0;

	mov	DWORD PTR _tries$[ebp], 0

; 3377 : 
; 3378 : 	// JPO - we need to have one less than the max array size!
; 3379 : 	if (!seed)

	cmp	DWORD PTR _seed$[ebp], 0
	jne	SHORT $LN9@PickRandom

; 3380 : 		pilot = rand()%(PILOTS_PER_FLIGHT-1);

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _pilot$[ebp], edx

; 3381 : 	else

	jmp	SHORT $LN8@PickRandom
$LN9@PickRandom:

; 3382 : 		pilot = seed%(PILOTS_PER_FLIGHT-1);

	mov	eax, DWORD PTR _seed$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _pilot$[ebp], edx
$LN8@PickRandom:

; 3383 : 
; 3384 : 	// JB 010121
; 3385 : 	if (!plane_stats || !player_slots)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 416				; 000001a0H
	je	SHORT $LN6@PickRandom
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 420				; 000001a4H
	jne	SHORT $LN7@PickRandom
$LN6@PickRandom:

; 3386 : 		return pilot;

	mov	eax, DWORD PTR _pilot$[ebp]
	jmp	$LN10@PickRandom
$LN7@PickRandom:

; 3387 : 
; 3388 : 	if (F4IsBadReadPtr(plane_stats, sizeof(uchar)) || F4IsBadReadPtr(player_slots, sizeof(uchar))) // JB 010317 CTD

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@PickRandom
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 420				; 000001a4H
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@PickRandom
$LN4@PickRandom:

; 3389 : 		return pilot;

	mov	eax, DWORD PTR _pilot$[ebp]
	jmp	SHORT $LN10@PickRandom
$LN3@PickRandom:

; 3390 : 
; 3391 : 	while ((plane_stats[pilot] != AIRCRAFT_AVAILABLE || player_slots[pilot] < 255) && tries < PILOTS_PER_FLIGHT)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _pilot$[ebp]
	movzx	eax, BYTE PTR [edx+416]
	cmp	eax, 4
	jne	SHORT $LN1@PickRandom
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _pilot$[ebp]
	movzx	edx, BYTE PTR [ecx+420]
	cmp	edx, 255				; 000000ffH
	jge	SHORT $LN2@PickRandom
$LN1@PickRandom:
	cmp	DWORD PTR _tries$[ebp], 4
	jge	SHORT $LN2@PickRandom

; 3392 : 	{
; 3393 : 		pilot = (pilot+1)%(PILOTS_PER_FLIGHT-1);

	mov	eax, DWORD PTR _pilot$[ebp]
	add	eax, 1
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _pilot$[ebp], edx

; 3394 : 		tries++;

	mov	edx, DWORD PTR _tries$[ebp]
	add	edx, 1
	mov	DWORD PTR _tries$[ebp], edx

; 3395 : 	}

	jmp	SHORT $LN3@PickRandom
$LN2@PickRandom:

; 3396 : 
; 3397 : 	return pilot;

	mov	eax, DWORD PTR _pilot$[ebp]
$LN10@PickRandom:

; 3398 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PickRandomPilot@FlightClass@@QAEHH@Z ENDP		; FlightClass::PickRandomPilot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -40						; size = 8
$T2 = -32						; size = 8
tv154 = -24						; size = 4
tv128 = -20						; size = 4
_react$ = -16						; size = 4
_det$ = -12						; size = 4
_detTmp$ = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
_d$ = 12						; size = 4
_combat$ = 16						; size = 4
_spot$ = 20						; size = 4
_estr$ = 24						; size = 4
?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z PROC ; FlightClass::DetectVs
; _this$ = ecx

; 3304 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 3305 : 	int		react,det;
; 3306 : 
; 3307 : 	*spot = 0;

	mov	eax, DWORD PTR _spot$[ebp]
	mov	DWORD PTR [eax], 0

; 3308 : 	det = Detected(this,e,d);

	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Detected@@YAHPAVUnitClass@@PAVFalconEntity@@PAM@Z ; Detected
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _det$[ebp], eax

; 3309 : 
; 3310 : 	int detTmp = det;

	mov	ecx, DWORD PTR _det$[ebp]
	mov	DWORD PTR _detTmp$[ebp], ecx

; 3311 : 
; 3312 : 	// Check type of entity before GCI is used
; 3313 : 	if (CheckValidType(this, e))

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@DetectVs

; 3314 : 		detTmp |= e->GetSpotted(GetTeam()) ? ENEMY_DETECTED : 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN21@DetectVs
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN22@DetectVs
$LN21@DetectVs:
	mov	DWORD PTR tv128[ebp], 0
$LN22@DetectVs:
	mov	edx, DWORD PTR _detTmp$[ebp]
	or	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _detTmp$[ebp], edx
$LN18@DetectVs:

; 3315 : 
; 3316 : 	// Check type of entity before GCI is used
; 3317 : 	if (CheckValidType(e, this))

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@DetectVs

; 3318 : 		detTmp |= GetSpotted(e->GetTeam()) ? FRIENDLY_DETECTED : 0;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN23@DetectVs
	mov	DWORD PTR tv154[ebp], 4
	jmp	SHORT $LN24@DetectVs
$LN23@DetectVs:
	mov	DWORD PTR tv154[ebp], 0
$LN24@DetectVs:
	mov	ecx, DWORD PTR _detTmp$[ebp]
	or	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR _detTmp$[ebp], ecx
$LN17@DetectVs:

; 3319 : 
; 3320 : 	// Use our temp detection mask which possibly includes GCI
; 3321 : 	if (!(detTmp & REACTION_MASK))

	mov	edx, DWORD PTR _detTmp$[ebp]
	and	edx, 17					; 00000011H
	jne	SHORT $LN16@DetectVs

; 3322 : 		return 0;

	xor	eax, eax
	jmp	$LN19@DetectVs
$LN16@DetectVs:

; 3323 : 
; 3324 : 	// Don't react if on a air to ground mission, even if within MinIngoreRange unless you're spotted.
; 3325 : 	if (
; 3326 : 		e->IsFlight() /* && !(eval_flags & FEVAL_GOT_TO_TARGET) */ && 
; 3327 : 		GetUnitMission() >= AMIS_SEADSTRIKE && 
; 3328 : 		GetUnitMission() <= AMIS_ECM && 
; 3329 : 		(*d > MIN_IGNORE_RANGE || !GetSpotted(e->GetTeam()))
; 3330 : 	){

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN15@DetectVs
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 11					; 0000000bH
	jl	SHORT $LN15@DetectVs
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 31					; 0000001fH
	jg	SHORT $LN15@DetectVs
	mov	ecx, DWORD PTR _d$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR ?MIN_IGNORE_RANGE@@3MA
	ja	SHORT $LN14@DetectVs
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN15@DetectVs
$LN14@DetectVs:

; 3331 : 		react = 0;

	mov	DWORD PTR _react$[ebp], 0

; 3332 : 	}
; 3333 : 	else {

	jmp	SHORT $LN13@DetectVs
$LN15@DetectVs:

; 3334 : 		// Reaction gets to use GCI as well
; 3335 : 		react = Reaction(e,detTmp,*d);

	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _detTmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	call	eax
	mov	DWORD PTR _react$[ebp], eax
$LN13@DetectVs:

; 3336 : 	}
; 3337 : 
; 3338 : 	// Spotting will be set only if we're aggregated or if we're an AWAC. 
; 3339 : 	// SensorFusion will handle spotting for deaggregated flights
; 3340 : 	// I can't let SensorFusion handle the spotting for AWAC because this will put a too big toll on the CPU
; 3341 : 	if (det & ENEMY_DETECTED) {

	mov	ecx, DWORD PTR _det$[ebp]
	and	ecx, 1
	je	$LN11@DetectVs

; 3342 : 		if ((IsAggregate() && CheckValidType(this, e)) || GetSType() == STYPE_UNIT_AWACS) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN9@DetectVs
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@DetectVs
$LN9@DetectVs:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 5
	jne	SHORT $LN11@DetectVs
$LN10@DetectVs:

; 3343 : 			if (!e->GetSpotted(GetTeam())){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN8@DetectVs

; 3344 : 				// Only mark as spotted if it's a new contact
; 3345 : 				*spot = 1;

	mov	ecx, DWORD PTR _spot$[ebp]
	mov	DWORD PTR [ecx], 1
$LN8@DetectVs:

; 3346 : 			}
; 3347 : 			// 2002-02-11 MODIFIED BY S.G. Added 'CanItIdentify' which query if the target can be identified
; 3348 : 			e->SetSpotted(GetTeam(),TheCampaign.CurrentTime, CanItIdentify(this, e, *d, e->GetMovementType()));

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+228]
	call	edx
	push	eax
	mov	eax, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z ; CanItIdentify
	add	esp, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted
$LN11@DetectVs:

; 3349 : 		}
; 3350 : 	}
; 3351 : 
; 3352 : 	if (det & ENEMY_IN_RANGE && react){

	mov	edx, DWORD PTR _det$[ebp]
	and	edx, 2
	je	SHORT $LN7@DetectVs
	cmp	DWORD PTR _react$[ebp], 0
	je	SHORT $LN7@DetectVs

; 3353 : 		*combat = 1;

	mov	eax, DWORD PTR _combat$[ebp]
	mov	DWORD PTR [eax], 1
$LN7@DetectVs:

; 3354 : 	}
; 3355 : 
; 3356 : 	if (det & FRIENDLY_DETECTED) {

	mov	ecx, DWORD PTR _det$[ebp]
	and	ecx, 4
	je	$LN1@DetectVs

; 3357 : 		// Spotting will be set only if our enemy is aggregated or if he's an AWAC.
; 3358 : 		// SensorFusion or GroundClass::Exec will hanlde deaggregated vehicles.
; 3359 : 		if ((e->IsAggregate() && CheckValidType(e, this)) || (e->IsFlight() && e->GetSType() == STYPE_UNIT_AWACS)){

	mov	ecx, DWORD PTR _e$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN3@DetectVs
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@DetectVs
$LN3@DetectVs:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN5@DetectVs
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 5
	jne	$LN5@DetectVs
$LN4@DetectVs:

; 3360 : 			if (!GetSpotted(e->GetTeam())){

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN2@DetectVs

; 3361 : 				RequestIntercept(this, e->GetTeam());

	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ; RequestIntercept
	add	esp, 12					; 0000000cH
$LN2@DetectVs:

; 3362 : 			}
; 3363 : 			 // 2002-02-11 MODIFIED BY S.G. Added 'CanItIdentify' which query if the target can be identified
; 3364 : 			SetSpotted(e->GetTeam(),TheCampaign.CurrentTime, CanItIdentify(e, this, *d, this->GetMovementType()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z ; CanItIdentify
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted
$LN5@DetectVs:

; 3365 : 		}
; 3366 : 		// Enemy's air strength added to enemy strength if they've got us 'locked'
; 3367 : 		if (e->IsUnit() && ((Unit)e)->GetTargetID() == Id()){

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN1@DetectVs
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@DetectVs

; 3368 : 			*estr += GetUnitScore ((Unit)e, Air);

	push	5
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z ; GetUnitScore
	add	esp, 8
	mov	edx, DWORD PTR _estr$[ebp]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _estr$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@DetectVs:

; 3369 : 		}
; 3370 : 	}
; 3371 : 	return react;

	mov	eax, DWORD PTR _react$[ebp]
$LN19@DetectVs:

; 3372 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ENDP ; FlightClass::DetectVs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_react$ = -28						; size = 4
tv160 = -24						; size = 4
tv134 = -20						; size = 4
_det$ = -16						; size = 4
_detTmp$ = -12						; size = 4
_this$ = -8						; size = 4
_e$ = -4						; size = 4
_ac$ = 8						; size = 4
_d$ = 12						; size = 4
_combat$ = 16						; size = 4
_spot$ = 20						; size = 4
_estr$ = 24						; size = 4
?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z PROC ; FlightClass::DetectVs
; _this$ = ecx

; 3220 : int FlightClass::DetectVs (AircraftClass *ac, float *d, int *combat, int *spot, int *estr){

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 3221 : 	int	react,det;
; 3222 : 	CampEntity e;
; 3223 : 
; 3224 : 	*spot = 0;

	mov	eax, DWORD PTR _spot$[ebp]
	mov	DWORD PTR [eax], 0

; 3225 : 
; 3226 : 	det = Detected(this,ac,d);

	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ac$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Detected@@YAHPAVUnitClass@@PAVFalconEntity@@PAM@Z ; Detected
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _det$[ebp], eax

; 3227 : 
; 3228 : 	e = ac->GetCampaignObject();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _e$[ebp], eax

; 3229 : 
; 3230 : 	// 2001-03-22 ADDED BY S.G. DETECTION DOESN'T INCLUDED SPOTTED,
; 3231 : 	// ONLY THAT THIS ENTITY DETECTED THE OTHER BY ITSELF.
; 3232 : 	int detTmp = det;

	mov	ecx, DWORD PTR _det$[ebp]
	mov	DWORD PTR _detTmp$[ebp], ecx

; 3233 : 
; 3234 : 	// Check type of entity before GCI is used
; 3235 : 	if (CheckValidType(this, e)){

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@DetectVs

; 3236 : 		detTmp |= e->GetSpotted(GetTeam()) ? ENEMY_DETECTED : 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN12@DetectVs
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN13@DetectVs
$LN12@DetectVs:
	mov	DWORD PTR tv134[ebp], 0
$LN13@DetectVs:
	mov	edx, DWORD PTR _detTmp$[ebp]
	or	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _detTmp$[ebp], edx
$LN9@DetectVs:

; 3237 : 	}
; 3238 : 	
; 3239 : 	// Check type of entity before GCI is used
; 3240 : 	if (CheckValidType(e, this)){

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@DetectVs

; 3241 : 		detTmp |= GetSpotted(e->GetTeam()) ? FRIENDLY_DETECTED : 0;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN14@DetectVs
	mov	DWORD PTR tv160[ebp], 4
	jmp	SHORT $LN15@DetectVs
$LN14@DetectVs:
	mov	DWORD PTR tv160[ebp], 0
$LN15@DetectVs:
	mov	ecx, DWORD PTR _detTmp$[ebp]
	or	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR _detTmp$[ebp], ecx
$LN8@DetectVs:

; 3242 : 	}
; 3243 : 
; 3244 : 	// Use our temp detection mask which possibly includes GCI
; 3245 : 	if (!(detTmp & REACTION_MASK)){

	mov	edx, DWORD PTR _detTmp$[ebp]
	and	edx, 17					; 00000011H
	jne	SHORT $LN7@DetectVs

; 3246 : 		return 0;

	xor	eax, eax
	jmp	$LN10@DetectVs
$LN7@DetectVs:

; 3247 : 	}
; 3248 : 
; 3249 : 	// Reaction gets to use GCI as well
; 3250 : 	react = Reaction(e,detTmp,*d);

	mov	eax, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _detTmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	call	eax
	mov	DWORD PTR _react$[ebp], eax

; 3251 : 
; 3252 : 	if (det & ENEMY_IN_RANGE && react){

	mov	ecx, DWORD PTR _det$[ebp]
	and	ecx, 2
	je	SHORT $LN6@DetectVs
	cmp	DWORD PTR _react$[ebp], 0
	je	SHORT $LN6@DetectVs

; 3253 : 		*combat = 1;

	mov	edx, DWORD PTR _combat$[ebp]
	mov	DWORD PTR [edx], 1
$LN6@DetectVs:

; 3254 : 	}
; 3255 : 
; 3256 : 	if (det & FRIENDLY_DETECTED) {

	mov	eax, DWORD PTR _det$[ebp]
	and	eax, 4
	je	$LN4@DetectVs

; 3257 : 		// Spotting will be set only if our enemy is aggregated or if he's an AWAC. 
; 3258 : 		// SensorFusion or GroundClass::Exec will hanlde deaggregated vehicles.
; 3259 : 		if ((e->IsAggregate() && CheckValidType(e, this)) || (e->IsFlight() && e->GetSType() == STYPE_UNIT_AWACS)) {

	mov	ecx, DWORD PTR _e$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN2@DetectVs
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@DetectVs
$LN2@DetectVs:
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN4@DetectVs
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 5
	jne	$LN4@DetectVs
$LN3@DetectVs:

; 3260 : 			if (!GetSpotted(e->GetTeam())){

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN1@DetectVs

; 3261 : 				RequestIntercept(this, e->GetTeam());

	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ; RequestIntercept
	add	esp, 12					; 0000000cH
$LN1@DetectVs:

; 3262 : 			}
; 3263 : 			// 2002-02-11 MODIFIED BY S.G. Added 'CanItIdentify' which query if the target can be identified
; 3264 : 			SetSpotted(e->GetTeam(),TheCampaign.CurrentTime, CanItIdentify(this, e, *d, ac->GetMovementType())); 

	mov	eax, DWORD PTR _ac$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ac$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z ; CanItIdentify
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted
$LN4@DetectVs:

; 3265 : 		}
; 3266 : 	}
; 3267 : 	return react;

	mov	eax, DWORD PTR _react$[ebp]
$LN10@DetectVs:

; 3268 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z ENDP ; FlightClass::DetectVs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?UseFuel@FlightClass@@UAEXJ@Z PROC			; FlightClass::UseFuel
; _this$ = ecx

; 3144 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3145 : 	fuel_burnt += f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	add	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], ecx

; 3146 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UseFuel@FlightClass@@UAEXJ@Z ENDP			; FlightClass::UseFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_vc$ = -32						; size = 4
_bw$ = -28						; size = 4
_bhp$ = -24						; size = 4
_str$ = -20						; size = 4
_bs$ = -16						; size = 4
_w$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_ac$ = 8						; size = 4
_dam$ = 12						; size = 4
_mt$ = 16						; size = 4
_range$ = 20						; size = 4
_hp$ = 24						; size = 4
?GetBestVehicleWeapon@FlightClass@@UAEHHPAEW4MoveType@@HPAH@Z PROC ; FlightClass::GetBestVehicleWeapon
; _this$ = ecx

; 3114 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 3115 : 	int			i,str,bs,w,bw,bhp=-1;

	mov	DWORD PTR _bhp$[ebp], -1

; 3116 : 	VehicleClassDataType*	vc;
; 3117 : 
; 3118 : 	if (ac > GetNumberOfLoadouts())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+640]
	call	eax
	cmp	DWORD PTR _ac$[ebp], eax
	jle	SHORT $LN6@GetBestVeh

; 3119 : 		ac = 0;

	mov	DWORD PTR _ac$[ebp], 0
$LN6@GetBestVeh:

; 3120 : 
; 3121 : 	vc = GetVehicleClassData(class_data->VehicleType[0]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	eax, 2
	imul	eax, 0
	movsx	ecx, WORD PTR [edx+eax+68]
	push	ecx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 3122 : 	ShiAssert(vc);
; 3123 : 
; 3124 : 	bw = bs = 0;

	mov	DWORD PTR _bs$[ebp], 0
	mov	edx, DWORD PTR _bs$[ebp]
	mov	DWORD PTR _bw$[ebp], edx

; 3125 : 	for (i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetBestVeh
$LN4@GetBestVeh:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GetBestVeh:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN3@GetBestVeh

; 3126 : 	{
; 3127 : 		w = GetUnitWeaponId(i,ac);

	mov	ecx, DWORD PTR _ac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+584]
	call	eax
	mov	DWORD PTR _w$[ebp], eax

; 3128 : 		if (w && GetUnitWeaponCount(i,ac))

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN2@GetBestVeh
	mov	ecx, DWORD PTR _ac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+588]
	call	eax
	test	eax, eax
	je	SHORT $LN2@GetBestVeh

; 3129 : 		{
; 3130 : 			str = GetWeaponScore (w, dam, mt, range);

	mov	ecx, DWORD PTR _range$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mt$[ebp]
	push	edx
	mov	eax, DWORD PTR _dam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	?GetWeaponScore@@YAHHPAEHH@Z		; GetWeaponScore
	add	esp, 16					; 00000010H
	mov	DWORD PTR _str$[ebp], eax

; 3131 : 			if (str > bs)

	mov	edx, DWORD PTR _str$[ebp]
	cmp	edx, DWORD PTR _bs$[ebp]
	jle	SHORT $LN2@GetBestVeh

; 3132 : 			{
; 3133 : 				bw = w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _bw$[ebp], eax

; 3134 : 				bs = str;

	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR _bs$[ebp], ecx

; 3135 : 				bhp = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _bhp$[ebp], edx
$LN2@GetBestVeh:

; 3136 : 			}
; 3137 : 		}
; 3138 : 	}

	jmp	$LN4@GetBestVeh
$LN3@GetBestVeh:

; 3139 : 	*hp = bhp;

	mov	eax, DWORD PTR _hp$[ebp]
	mov	ecx, DWORD PTR _bhp$[ebp]
	mov	DWORD PTR [eax], ecx

; 3140 : 	return bw;

	mov	eax, DWORD PTR _bw$[ebp]

; 3141 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?GetBestVehicleWeapon@FlightClass@@UAEHHPAEW4MoveType@@HPAH@Z ENDP ; FlightClass::GetBestVehicleWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?IncrementTime@FlightClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?IncrementTime@FlightClass@@UAEXK@Z PROC		; FlightClass::IncrementTime, COMDAT
; _this$ = ecx

; 209  : 		virtual void IncrementTime (CampaignTime dt) 			{ last_move += dt; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	add	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?IncrementTime@FlightClass@@UAEXK@Z ENDP		; FlightClass::IncrementTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetUnitParent@FlightClass@@UAEXPAVUnitClass@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?SetUnitParent@FlightClass@@UAEXPAVUnitClass@@@Z PROC	; FlightClass::SetUnitParent, COMDAT
; _this$ = ecx

; 208  : 		virtual void SetUnitParent (Unit p)						{ SetPackage(p->Id()); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPackage@FlightClass@@QAEXVVU_ID@@@Z	; FlightClass::SetPackage
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitParent@FlightClass@@UAEXPAVUnitClass@@@Z ENDP	; FlightClass::SetUnitParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitParentID@FlightClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitParentID@FlightClass@@UAE?AVVU_ID@@XZ PROC	; FlightClass::GetUnitParentID, COMDAT
; _this$ = ecx

; 207  : 		virtual VU_ID GetUnitParentID (void)					{ return package; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	mov	edx, DWORD PTR [eax+388]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitParentID@FlightClass@@UAE?AVVU_ID@@XZ ENDP	; FlightClass::GetUnitParentID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitParent@FlightClass@@UAEPAVUnitClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitParent@FlightClass@@UAEPAVUnitClass@@XZ PROC	; FlightClass::GetUnitParent, COMDAT
; _this$ = ecx

; 206  : 		virtual Unit GetUnitParent (void)						{ return (Unit)vuDatabase->Find(package); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitParent@FlightClass@@UAEPAVUnitClass@@XZ ENDP	; FlightClass::GetUnitParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p$ = -4						; size = 4
_type$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?GetUnitAssemblyPoint@FlightClass@@UAEXHPAF0@Z PROC	; FlightClass::GetUnitAssemblyPoint
; _this$ = ecx

; 3103 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3104 : 	Package			p;
; 3105 : 
; 3106 : 	p = (Package)GetUnitParent();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _p$[ebp], eax

; 3107 : 	if (p)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@GetUnitAss

; 3108 : 		p->GetUnitAssemblyPoint(type,x,y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+812]
	call	eax

; 3109 : 	else

	jmp	SHORT $LN3@GetUnitAss
$LN2@GetUnitAss:

; 3110 : 		*x = *y = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _y$[ebp]
	mov	WORD PTR [edx], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx], ax
$LN3@GetUnitAss:

; 3111 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetUnitAssemblyPoint@FlightClass@@UAEXHPAF0@Z ENDP	; FlightClass::GetUnitAssemblyPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -172						; size = 8
$T2 = -164						; size = 8
$T3 = -156						; size = 8
tv1952 = -148						; size = 4
_adjustedAlt$ = -144					; size = 4
_y$ = -140						; size = 4
_x$ = -136						; size = 4
tv297 = -132						; size = 4
_fc$4 = -128						; size = 4
_z$ = -124						; size = 4
_emptyHPs$ = -120					; size = 4
_timedelta$5 = -116					; size = 4
_vc$ = -112						; size = 4
_groundAlt$ = -108					; size = 4
_i$ = -104						; size = 4
_hp$6 = -100						; size = 4
_hp$7 = -96						; size = 4
tv668 = -92						; size = 4
_i$8 = -88						; size = 4
_fuelNeeded$ = -84					; size = 4
_hp$9 = -80						; size = 4
_i$10 = -76						; size = 4
_i$11 = -72						; size = 4
_fuelAvail$ = -68					; size = 4
_time$ = -64						; size = 4
_lastHP$ = -60						; size = 4
_indexHP$ = -56						; size = 4
_hp$12 = -52						; size = 4
_pack$ = -48						; size = 4
_i$13 = -44						; size = 4
_length$ = -40						; size = 4
_hasRadarVehicle$ = -33					; size = 1
_mt$ = -32						; size = 4
_AGweaps$ = -28						; size = 4
_needweaps$ = -24					; size = 4
_target$ = -20						; size = 4
_damageMods$ = -16					; size = 4
_w$ = -12						; size = 4
_squad$ = -8						; size = 4
_this$ = -4						; size = 4
_mis$ = 8						; size = 4
?BuildMission@FlightClass@@UAEHPAVMissionRequestClass@@@Z PROC ; FlightClass::BuildMission
; _this$ = ecx

; 2383 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2384 : 	Package				pack;
; 2385 : 	WayPoint			w = NULL;

	mov	DWORD PTR _w$[ebp], 0

; 2386 : 	CampaignTime		time;
; 2387 : 	uchar*				damageMods;
; 2388 : 	MoveType			mt=NoMove;

	mov	DWORD PTR _mt$[ebp], 0

; 2389 : 	CampEntity			target;
; 2390 : 	int					i,needweaps=0;

	mov	DWORD PTR _needweaps$[ebp], 0

; 2391 : 	long				length,fuelNeeded,fuelAvail;
; 2392 : 	Squadron			squad;
; 2393 : 
; 2394 : 	SetUnitTOT(mis->tot);				// Temporary time on target for timing.

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+624]
	call	edx

; 2395 : 	SetUnitPriority(mis->priority);

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+612]
	call	edx

; 2396 : 
; 2397 : 	pack = (Package)GetUnitParent();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pack$[ebp], eax

; 2398 : 	squad = (Squadron)GetUnitSquadron();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _squad$[ebp], eax

; 2399 : 	target = (CampEntity) vuDatabase->Find(mis->targetID);

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$[ebp], eax

; 2400 : 	mission_target = mis->targetID;

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+288], edx
	mov	DWORD PTR [ecx+292], eax

; 2401 : 	mission_context = mis->context;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mis$[ebp]
	mov	cl, BYTE PTR [eax+62]
	mov	BYTE PTR [edx+383], cl

; 2402 : 	requester = mis->requesterID;

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+400], eax
	mov	DWORD PTR [edx+404], ecx

; 2403 : 
; 2404 : 	if (mis->flags & AMIS_IMMEDIATE)

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN114@BuildMissi

; 2405 : 	{
; 2406 : 		//MakeFlightDirty (DIRTY_DIVERT_INFO, DDP[99].priority);
; 2407 : 		MakeFlightDirty (DIRTY_DIVERT_INFO, SEND_SOON);

	push	4096					; 00001000H
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 2408 : 		SetUnitMission(mis->mission);

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax

; 2409 : 		// Build the divert path
; 2410 : 		ClearDivertWayPoints(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?ClearDivertWayPoints@@YAXPAVFlightClass@@@Z ; ClearDivertWayPoints
	add	esp, 4

; 2411 : 		BuildDivertPath(this, mis);

	mov	edx, DWORD PTR _mis$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?BuildDivertPath@@YAXPAVFlightClass@@PAVMissionRequestClass@@@Z ; BuildDivertPath
	add	esp, 8

; 2412 : 		// Update the mission evaluator
; 2413 : 		TheCampaign.MissionEvaluator->RegisterDivert(this, mis);

	mov	ecx, DWORD PTR _mis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?RegisterDivert@MissionEvaluationClass@@QAEXPAVFlightClass@@PAVMissionRequestClass@@@Z ; MissionEvaluationClass::RegisterDivert

; 2414 : 		SetDiverted(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDiverted@UnitClass@@QAEXH@Z		; UnitClass::SetDiverted

; 2415 : 		return PRET_SUCCESS;

	mov	eax, 3
	jmp	$LN115@BuildMissi

; 2416 : 	}
; 2417 : 	else

	jmp	$LN113@BuildMissi
$LN114@BuildMissi:

; 2418 : 	{
; 2419 : 		// Full scheduled mission, we've got a bit to do..
; 2420 : 		SetUnitMission(mis->mission);

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+604]
	call	edx

; 2421 : 		old_mission = mis->mission;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mis$[ebp]
	mov	dl, BYTE PTR [ecx+60]
	mov	BYTE PTR [eax+378], dl

; 2422 : 		DisposeWayPoints();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisposeWayPoints@UnitClass@@QAEXXZ	; UnitClass::DisposeWayPoints

; 2423 : 		if (!BuildPathToTarget(this, mis, squad->GetUnitAirbaseID()))

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _squad$[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?BuildPathToTarget@@YAHPAVFlightClass@@PAVMissionRequestClass@@VVU_ID@@@Z ; BuildPathToTarget
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN112@BuildMissi

; 2424 : 			return PRET_ABORTED;

	mov	eax, 4
	jmp	$LN115@BuildMissi
$LN112@BuildMissi:

; 2425 : 		length = SetWPTimes(this, mis);

	mov	edx, DWORD PTR _mis$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?SetWPTimes@@YAJPAVFlightClass@@PAVMissionRequestClass@@@Z ; SetWPTimes
	add	esp, 8
	mov	DWORD PTR _length$[ebp], eax

; 2426 : 		if (!length && mis->mission != AMIS_ALERT)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN111@BuildMissi
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	edx, 8
	je	SHORT $LN111@BuildMissi

; 2427 : 			return PRET_ABORTED;

	mov	eax, 4
	jmp	$LN115@BuildMissi
$LN111@BuildMissi:

; 2428 : 		SetCurrentUnitWP (GetFirstUnitWP());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z ; UnitClass::SetCurrentUnitWP

; 2429 : 		AddInformationWPs (this, mis);

	mov	eax, DWORD PTR _mis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AddInformationWPs@@YAXPAVFlightClass@@PAVMissionRequestClass@@@Z ; AddInformationWPs
	add	esp, 8
$LN113@BuildMissi:

; 2430 : 	}
; 2431 : 
; 2432 : 	// For divertable missions, we set our priority to 0 if we're not currently
; 2433 : 	// being diverted, because we want to be available for anything which comes up
; 2434 : 	if ((MissionData[mis->mission].flags & AMIS_EXPECT_DIVERT) && !Diverted() && mis->mission != AMIS_ONCALLCAS){

	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	shl	eax, 5
	mov	ecx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+28]
	and	ecx, 33554432				; 02000000H
	je	SHORT $LN110@BuildMissi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Diverted@UnitClass@@QAEHXZ		; UnitClass::Diverted
	test	eax, eax
	jne	SHORT $LN110@BuildMissi
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	cmp	eax, 20					; 00000014H
	je	SHORT $LN110@BuildMissi

; 2435 : 		SetUnitPriority(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+612]
	call	eax
$LN110@BuildMissi:

; 2436 : 	}
; 2437 : 
; 2438 : 	// Check time tolerences and plan for a reserve
; 2439 : 	w = GetFirstUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 2440 : 	if ((mis->flags & REQF_ALLOW_ERRORS) && length < 0){

	mov	ecx, DWORD PTR _mis$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	and	edx, 2048				; 00000800H
	je	SHORT $LN109@BuildMissi
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN109@BuildMissi

; 2441 : 		length = CampaignHours;			// If it's an impossible mission and we're allowing errors, assume 1 hour

	mov	DWORD PTR _length$[ebp], 3600000	; 0036ee80H
$LN109@BuildMissi:

; 2442 : 	}
; 2443 : 
; 2444 : 	if (length < 0){

	cmp	DWORD PTR _length$[ebp], 0
	jge	$LN108@BuildMissi

; 2445 : 		// Impossible takeoff time, if we need TOT <= to that requested, abort
; 2446 : 		if (mis->tot_type <= TYPE_EQ && mis->tot_type > TYPE_NE){

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+58]
	cmp	ecx, 3
	jg	SHORT $LN107@BuildMissi
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	test	eax, eax
	jle	SHORT $LN107@BuildMissi

; 2447 : 			return PRET_CANCELED;		// This TOT is inflexible

	mov	eax, 5
	jmp	$LN115@BuildMissi
$LN107@BuildMissi:

; 2448 : 		}
; 2449 : 		if (pack->GetFlights() || mission_id){

	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetFlights@PackageClass@@QAEEXZ	; PackageClass::GetFlights
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN105@BuildMissi
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+381]
	test	eax, eax
	je	SHORT $LN106@BuildMissi
$LN105@BuildMissi:

; 2450 : 			return PRET_CANCELED;		// Additional flights already planned

	mov	eax, 5
	jmp	$LN115@BuildMissi
$LN106@BuildMissi:

; 2451 : 		}
; 2452 : 		// Otherwise, just adjust our TOT for takeoff in 5 minutes
; 2453 : 		time = -length + 5 * CampaignMinutes;

	mov	ecx, DWORD PTR _length$[ebp]
	neg	ecx
	add	ecx, 300000				; 000493e0H
	mov	DWORD PTR _time$[ebp], ecx

; 2454 : 		length = SetWPTimes(w,time,0);

	push	0
	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	?SetWPTimes@@YAKPAVWayPointClass@@JH@Z	; SetWPTimes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _length$[ebp], eax

; 2455 : 		// Adjust our Package's times as well, so additional flights are coordinated
; 2456 : 		SetWPTimes(pack->GetIngress(),time,0);

	push	0
	mov	ecx, DWORD PTR _time$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetIngress@PackageClass@@QAEPAVWayPointClass@@XZ ; PackageClass::GetIngress
	push	eax
	call	?SetWPTimes@@YAKPAVWayPointClass@@JH@Z	; SetWPTimes
	add	esp, 12					; 0000000cH

; 2457 : 		SetWPTimes(pack->GetEgress(),time,0);

	push	0
	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetEgress@PackageClass@@QAEPAVWayPointClass@@XZ ; PackageClass::GetEgress
	push	eax
	call	?SetWPTimes@@YAKPAVWayPointClass@@JH@Z	; SetWPTimes
	add	esp, 12					; 0000000cH

; 2458 : 		pack->GetMissionRequest()->tot += time;

	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv297[ebp], eax
	mov	eax, DWORD PTR tv297[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR tv297[ebp]
	mov	DWORD PTR [edx], ecx

; 2459 : 		mis->tot += time;

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _mis$[ebp]
	mov	DWORD PTR [edx+36], ecx
$LN108@BuildMissi:

; 2460 : 	}
; 2461 : 	length += 2*RESERVE_MINUTES*CampaignMinutes;

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1800000				; 001b7740H
	mov	DWORD PTR _length$[ebp], eax

; 2462 : 
; 2463 : 	// Schedule our takeoff time with the ATM, or adjust if necessary,
; 2464 : 	// and set package takeoff time if it's earlier than that listed.
; 2465 : 	if (mission != AMIS_ALERT)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+377]
	cmp	edx, 8
	je	$LN100@BuildMissi

; 2466 : 	{
; 2467 : 		int		timedelta;
; 2468 : 		timedelta = TeamInfo[GetTeam()]->atm->FindTakeoffSlot(squad->GetUnitAirbaseID(), w);

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _squad$[ebp]
	mov	edx, DWORD PTR [eax+708]
	call	edx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	call	?FindTakeoffSlot@AirTaskingManagerClass@@QAEHVVU_ID@@PAVWayPointClass@@@Z ; AirTaskingManagerClass::FindTakeoffSlot
	mov	DWORD PTR _timedelta$5[ebp], eax

; 2469 : 		if (timedelta == 0xFFFFFFFF)

	cmp	DWORD PTR _timedelta$5[ebp], -1
	jne	SHORT $LN103@BuildMissi

; 2470 : 		{
; 2471 : 			if (!(mis->flags & REQF_ALLOW_ERRORS))

	mov	eax, DWORD PTR _mis$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	and	ecx, 2048				; 00000800H
	jne	SHORT $LN102@BuildMissi

; 2472 : 				return PRET_CANCELED;

	mov	eax, 5
	jmp	$LN115@BuildMissi
$LN102@BuildMissi:

; 2473 : 		}
; 2474 : 		else

	jmp	SHORT $LN101@BuildMissi
$LN103@BuildMissi:

; 2475 : 			length += timedelta;

	mov	edx, DWORD PTR _length$[ebp]
	add	edx, DWORD PTR _timedelta$5[ebp]
	mov	DWORD PTR _length$[ebp], edx
$LN101@BuildMissi:

; 2476 : 		if (pack->GetTakeoff() > w->GetWPArrivalTime() || !pack->GetTakeoff())

	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetTakeoff@PackageClass@@QAEKXZ	; PackageClass::GetTakeoff
	mov	esi, eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	cmp	esi, eax
	ja	SHORT $LN99@BuildMissi
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetTakeoff@PackageClass@@QAEKXZ	; PackageClass::GetTakeoff
	test	eax, eax
	jne	SHORT $LN100@BuildMissi
$LN99@BuildMissi:

; 2477 : 			pack->SetTakeoff (w->GetWPArrivalTime());

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	push	eax
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?SetTakeoff@PackageClass@@QAEXK@Z	; PackageClass::SetTakeoff
$LN100@BuildMissi:

; 2478 : 	}
; 2479 : 
; 2480 : 	// Set our time_on_target and mission_over_time from our waypoints
; 2481 : 	i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN98@BuildMissi:

; 2482 : 	while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN97@BuildMissi

; 2483 : 	{
; 2484 : 		if (w->GetWPFlags() & WPF_TARGET || w->GetWPFlags() & WPF_CP)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	jne	SHORT $LN95@BuildMissi
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32					; 00000020H
	je	SHORT $LN96@BuildMissi
$LN95@BuildMissi:

; 2485 : 		{
; 2486 : 			if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN94@BuildMissi

; 2487 : 				time_on_target = w->GetWPArrivalTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax
$LN94@BuildMissi:

; 2488 : 			mission_over_time = w->GetWPArrivalTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 2489 : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN96@BuildMissi:

; 2490 : 		}
; 2491 : 		if (w->GetWPFlags() & WPF_REPEAT && w->GetWPDepartureTime() > mission_over_time)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	je	SHORT $LN93@BuildMissi
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+280]
	jbe	SHORT $LN93@BuildMissi

; 2492 : 			mission_over_time = w->GetWPDepartureTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax
$LN93@BuildMissi:

; 2493 : 		w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 2494 : 	}

	jmp	$LN98@BuildMissi
$LN97@BuildMissi:

; 2495 : 
; 2496 : 	// RV - Biker - Check if we've set some bullshit WP altitude
; 2497 : 	float x, y, z;
; 2498 : 	float groundAlt;
; 2499 : 	int adjustedAlt;
; 2500 : 	
; 2501 : 	// Loop through all WPs
; 2502 : 	w = GetFirstUnitWP(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN92@BuildMissi:

; 2503 : 	while (w) {

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN91@BuildMissi

; 2504 : 		w->GetLocation(&x, &y, &z);

	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 2505 : 		// Altitude from this is with pos. sign
; 2506 : 		groundAlt = TheMap.GetMEA(x, y);

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	fstp	DWORD PTR _groundAlt$[ebp]

; 2507 : 		// Check if we're below ground level (don't adjust for landing and takeoff WPs?)
; 2508 : 		if (-z <= groundAlt && w->GetWPAction() != WP_LAND && w->GetWPAction() != WP_TAKEOFF) {

	movss	xmm0, DWORD PTR _z$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _groundAlt$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN90@BuildMissi
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	je	SHORT $LN90@BuildMissi
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	je	SHORT $LN90@BuildMissi

; 2509 : 			// Maybe do something diff for choppers or AC?
; 2510 : 			adjustedAlt = int((groundAlt+250)/500)*500+500;

	movss	xmm0, DWORD PTR _groundAlt$[ebp]
	addss	xmm0, DWORD PTR __real@437a0000
	divss	xmm0, DWORD PTR __real@43fa0000
	cvttss2si eax, xmm0
	imul	eax, 500				; 000001f4H
	add	eax, 500				; 000001f4H
	mov	DWORD PTR _adjustedAlt$[ebp], eax

; 2511 : 			w->SetWPAltitude(adjustedAlt);

	mov	ecx, DWORD PTR _adjustedAlt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPAltitude@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAltitude

; 2512 : 			w->GetLocation(&x, &y, &z);

	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation
$LN90@BuildMissi:

; 2513 : 		}
; 2514 : 		w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 2515 : 	}

	jmp	$LN92@BuildMissi
$LN91@BuildMissi:

; 2516 : 
; 2517 : 	// Arm and fuel flight
; 2518 : 	// KCK TODO: Calculate altitude adjusted burn rate..
; 2519 : 	fuelNeeded = ((int)(length/CampaignMinutes) * class_data->Rate);			// lbs of fuel needed

	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	ecx, 60000				; 0000ea60H
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+236]
	movsx	edx, WORD PTR [ecx+264]
	imul	eax, edx
	mov	DWORD PTR _fuelNeeded$[ebp], eax

; 2520 : 	fuelAvail = CalculateFuelAvailable(255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	mov	DWORD PTR _fuelAvail$[ebp], eax

; 2521 : 	if (fuelNeeded > class_data->Fuel)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	mov	edx, DWORD PTR _fuelNeeded$[ebp]
	cmp	edx, DWORD PTR [ecx+260]
	jle	SHORT $LN86@BuildMissi
$LN88@BuildMissi:

; 2522 : 	{
; 2523 : 		// Not enough fuel to complete mission - load fuel tanks until we have enough or
; 2524 : 		// can't load anymore.
; 2525 : 		while (fuelNeeded > fuelAvail && LoadWeapons(squad, DefaultDamageMods, NoMove, 2, WEAP_FUEL, 0))

	mov	eax, DWORD PTR _fuelNeeded$[ebp]
	cmp	eax, DWORD PTR _fuelAvail$[ebp]
	jle	SHORT $LN87@BuildMissi
	push	0
	push	2
	push	2
	push	0
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	mov	ecx, DWORD PTR _squad$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+712]
	call	edx
	test	eax, eax
	je	SHORT $LN87@BuildMissi

; 2526 : 			fuelAvail = CalculateFuelAvailable(255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	mov	DWORD PTR _fuelAvail$[ebp], eax
	jmp	SHORT $LN88@BuildMissi
$LN87@BuildMissi:

; 2527 : 		// 2001-10-16 REMOVED by M.N. Not needed here -> The AddTankerWaypoints function will decide
; 2528 : 		// Check if we're still way out of range 
; 2529 : 		//		if (!(mis->flags & REQF_ALLOW_ERRORS) && fuelNeeded > fuelAvail + fuelAvail/2)
; 2530 : 		//			return PRET_CANCELED;
; 2531 : 		// Otherwise require tankers
; 2532 : 		if (fuelNeeded > fuelAvail && !(MissionData[mis->mission].flags & AMIS_FUDGE_RANGE))

	mov	eax, DWORD PTR _fuelNeeded$[ebp]
	cmp	eax, DWORD PTR _fuelAvail$[ebp]
	jle	SHORT $LN86@BuildMissi
	mov	ecx, DWORD PTR _mis$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 16777216				; 01000000H
	jne	SHORT $LN86@BuildMissi

; 2533 : 		{
; 2534 : 			pack->SetPackageFlags (AMIS_ADDTANKER | AMIS_NEEDTANKER);

	push	1536					; 00000600H
	mov	ecx, DWORD PTR _pack$[ebp]
	call	?SetPackageFlags@PackageClass@@QAEXK@Z	; PackageClass::SetPackageFlags

; 2535 : 			refuel = fuelNeeded-fuelAvail;	// We use this for AddTankerWayPoints

	mov	ecx, DWORD PTR _fuelNeeded$[ebp]
	sub	ecx, DWORD PTR _fuelAvail$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+452], ecx
$LN86@BuildMissi:

; 2536 : 		}
; 2537 : 	}
; 2538 : 
; 2539 : 	if (mis->mission == AMIS_AIRCAV){

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN85@BuildMissi

; 2540 : 		SetCargoId (mis->requesterID);

	mov	edx, DWORD PTR _mis$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCargoId@UnitClass@@QAEXVVU_ID@@@Z	; UnitClass::SetCargoId

; 2541 : 	}
; 2542 : 	else {

	jmp	SHORT $LN84@BuildMissi
$LN85@BuildMissi:

; 2543 : 		SetCargoId (FalconNullId);

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCargoId@UnitClass@@QAEXVVU_ID@@@Z	; UnitClass::SetCargoId
$LN84@BuildMissi:

; 2544 : 	}
; 2545 : 
; 2546 : 	if (mission != AMIS_ALERT){

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+377]
	cmp	edx, 8
	je	SHORT $LN83@BuildMissi

; 2547 : 		// Mark our takeoff and landing times as being used
; 2548 : 		// KCK WARNING: if this flight later get's the axe, this slot will still be marked full
; 2549 : 		TeamInfo[GetTeam()]->atm->ScheduleAircraft(squad->GetUnitAirbaseID(), wp_list, mis->aircraft);

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+61]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+244]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _squad$[ebp]
	mov	edx, DWORD PTR [eax+708]
	call	edx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	call	?ScheduleAircraft@AirTaskingManagerClass@@QAEXVVU_ID@@PAVWayPointClass@@H@Z ; AirTaskingManagerClass::ScheduleAircraft
$LN83@BuildMissi:

; 2550 : 	}
; 2551 : 
; 2552 : 	// KCK Hack to allow re-plans: Finish here if we've already been inserted
; 2553 : 	if (VuState() == VU_MEM_ACTIVE){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	jne	SHORT $LN82@BuildMissi

; 2554 : 		return PRET_SUCCESS;

	mov	eax, 3
	jmp	$LN115@BuildMissi
$LN82@BuildMissi:

; 2555 : 	}
; 2556 : 
; 2557 : 	// Find information about our expected target
; 2558 : 	mt = NoMove;

	mov	DWORD PTR _mt$[ebp], 0

; 2559 : 	damageMods = DefaultDamageMods;

	mov	DWORD PTR _damageMods$[ebp], OFFSET ?DefaultDamageMods@@3PAEA ; DefaultDamageMods

; 2560 : 
; 2561 : 	// 2001-07-10 MODIFIED BY S.G. SEAD ESCORT USES THE DEFAULT MT/DAMAGEMOD INSTEAD OF THE ONE BASED ON ITS TARGET
; 2562 : 	//	if (target)
; 2563 : 	if (target && mission != AMIS_SEADESCORT)

	cmp	DWORD PTR _target$[ebp], 0
	je	$LN77@BuildMissi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+377]
	cmp	ecx, 12					; 0000000cH
	je	$LN77@BuildMissi

; 2564 : 	{
; 2565 : 		if (target->IsUnit() && !((Unit)target)->Real())

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	SHORT $LN80@BuildMissi
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	test	eax, eax
	jne	SHORT $LN80@BuildMissi

; 2566 : 			target = ((Unit)target)->GetFirstUnitElement();

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _target$[ebp], eax
$LN80@BuildMissi:

; 2567 : 		if (target)

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN77@BuildMissi

; 2568 : 		{
; 2569 : 			damageMods = target->GetDamageModifiers();

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+296]
	call	eax
	mov	DWORD PTR _damageMods$[ebp], eax

; 2570 : 			mt = target->GetMovementType();

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	DWORD PTR _mt$[ebp], eax

; 2571 : 			if (target->IsObjective() && mis->target_num < 255)

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN77@BuildMissi
	mov	ecx, DWORD PTR _mis$[ebp]
	movsx	edx, WORD PTR [ecx+50]
	cmp	edx, 255				; 000000ffH
	jge	SHORT $LN77@BuildMissi

; 2572 : 			{
; 2573 : 				FeatureClassDataType*	fc;
; 2574 : 				fc = GetFeatureClassData(((Objective)target)->GetFeatureID(mis->target_num));

	mov	eax, DWORD PTR _mis$[ebp]
	movsx	ecx, WORD PTR [eax+50]
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$4[ebp], eax

; 2575 : 				if (fc)

	cmp	DWORD PTR _fc$4[ebp], 0
	je	SHORT $LN77@BuildMissi

; 2576 : 					damageMods = fc->DamageMod;

	mov	edx, DWORD PTR _fc$4[ebp]
	add	edx, 46					; 0000002eH
	mov	DWORD PTR _damageMods$[ebp], edx
$LN77@BuildMissi:

; 2577 : 			}
; 2578 : 		}
; 2579 : 	}
; 2580 : 
; 2581 : 
; 2582 : 	// ADDED BY MN - SEAD strikes against SAM's shouldn't get AGM-88 loaded 
; 2583 : 	// when there is no radar target anymore - worthless weapons if we have fuel tanks loaded
; 2584 : 	// sfr: added IsBattalion check. How can you be so sure its a batallion??
; 2585 : 	bool hasRadarVehicle = false;

	mov	BYTE PTR _hasRadarVehicle$[ebp], 0

; 2586 : 	if (
; 2587 : 		target && target->IsBattalion() &&
; 2588 : 		((BattalionClass *)target)->class_data->RadarVehicle < 255 /*&& e->IsEmitting()*/
; 2589 : 	){ // current emitting status is not interesting here..

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN74@BuildMissi
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	je	SHORT $LN74@BuildMissi
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN74@BuildMissi

; 2590 : 		// If the radar vehicle index is less than 16, it's a SAM. Check if it still has a radar vehicle
; 2591 : 		if (((BattalionClass *)target)->class_data->RadarVehicle < 16) {

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN74@BuildMissi

; 2592 : 			if (((BattalionClass *)target)->GetNumVehicles(((BattalionClass *)target)->class_data->RadarVehicle)) {

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetNumVehicles@UnitClass@@QAEHH@Z	; UnitClass::GetNumVehicles
	test	eax, eax
	je	SHORT $LN74@BuildMissi

; 2593 : 				hasRadarVehicle = true;

	mov	BYTE PTR _hasRadarVehicle$[ebp], 1
$LN74@BuildMissi:

; 2594 : 			}
; 2595 : 		}
; 2596 : 	}	// this makes it so that AAA targets are only engaged with CBU's.
; 2597 : 
; 2598 : 	// Load mission specific stuff here
; 2599 : 	switch (GetUnitMission())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	DWORD PTR tv668[ebp], eax
	mov	ecx, DWORD PTR tv668[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv668[ebp], ecx
	cmp	DWORD PTR tv668[ebp], 37		; 00000025H
	ja	$LN49@BuildMissi
	mov	edx, DWORD PTR tv668[ebp]
	movzx	eax, BYTE PTR $LN117@BuildMissi[edx]
	jmp	DWORD PTR $LN118@BuildMissi[eax*4]
$LN71@BuildMissi:

; 2600 : 	{
; 2601 : 		case AMIS_SEADSTRIKE:	
; 2602 : 			ShiAssert(mission_target != FalconNullId);
; 2603 : 			if (!hasRadarVehicle) {

	movzx	ecx, BYTE PTR _hasRadarVehicle$[ebp]
	test	ecx, ecx
	jne	$LN70@BuildMissi

; 2604 : 				if (rand() & 1)

	call	_rand
	and	eax, 1
	je	SHORT $LN69@BuildMissi

; 2605 : 					LoadWeapons(squad, damageMods, NoMove, 98, WEAP_DEAD_LOADOUT, 0);

	push	0
	push	131072					; 00020000H
	push	98					; 00000062H
	push	0
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2606 : 				else

	jmp	SHORT $LN68@BuildMissi
$LN69@BuildMissi:

; 2607 : 					LoadWeapons(squad, damageMods, Tracked, 98, WEAP_DEAD_LOADOUT, 0);

	push	0
	push	131072					; 00020000H
	push	98					; 00000062H
	push	3
	mov	ecx, DWORD PTR _damageMods$[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
$LN68@BuildMissi:

; 2608 : 				LoadWeapons(squad, damageMods, mt, 98, WEAP_CLUSTER, 0);

	push	0
	push	16					; 00000010H
	push	98					; 00000062H
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2609 : 				needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2610 : 				break;

	jmp	$LN72@BuildMissi
	jmp	$LN65@BuildMissi
$LN70@BuildMissi:

; 2611 : 			}
; 2612 : 			// RV - Biker - Check if we are main flight then do SEAD else DEAD
; 2613 : 			else if (pack->GetMainFlight() == NULL) {

	mov	ecx, DWORD PTR _pack$[ebp]
	call	?GetMainFlight@PackageClass@@QAEPAVFlightClass@@XZ ; PackageClass::GetMainFlight
	test	eax, eax
	jne	SHORT $LN66@BuildMissi

; 2614 : 				LoadWeapons(squad, damageMods, mt, 6, 0, WEAP_ANTIRADATION);

	push	1
	push	0
	push	6
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2615 : 				// RV - Biker - Remove this so we can make other ACs for DEAD
; 2616 : 				//LoadWeapons(squad, damageMods, mt, 98, WEAP_CLUSTER, 0);
; 2617 : 				needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2618 : 				break;

	jmp	$LN72@BuildMissi

; 2619 : 			}
; 2620 : 			else {

	jmp	$LN65@BuildMissi
$LN66@BuildMissi:

; 2621 : 				if (rand() & 1)

	call	_rand
	and	eax, 1
	je	SHORT $LN64@BuildMissi

; 2622 : 					LoadWeapons(squad, damageMods, NoMove, 98, WEAP_DEAD_LOADOUT, 0);

	push	0
	push	131072					; 00020000H
	push	98					; 00000062H
	push	0
	mov	ecx, DWORD PTR _damageMods$[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2623 : 				else

	jmp	SHORT $LN63@BuildMissi
$LN64@BuildMissi:

; 2624 : 					LoadWeapons(squad, damageMods, Tracked, 98, WEAP_DEAD_LOADOUT, 0);

	push	0
	push	131072					; 00020000H
	push	98					; 00000062H
	push	3
	mov	ecx, DWORD PTR _damageMods$[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
$LN63@BuildMissi:

; 2625 : 				LoadWeapons(squad, damageMods, mt, 98, WEAP_CLUSTER, 0);

	push	0
	push	16					; 00000010H
	push	98					; 00000062H
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2626 : 				LoadWeapons(squad, damageMods, mt, 2, 0, WEAP_ANTIRADATION);

	push	1
	push	0
	push	2
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2627 : 				needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2628 : 				break;

	jmp	$LN72@BuildMissi
$LN65@BuildMissi:

; 2629 : 			}
; 2630 : 		case AMIS_SEADESCORT:
; 2631 : 			LoadWeapons(squad, damageMods, mt, 6, 0, WEAP_ANTIRADATION);

	push	1
	push	0
	push	6
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2632 : 			// RV - Biker - Remove this so we can make other ACs for DEAD
; 2633 : 			//LoadWeapons(squad, damageMods, mt, 98, WEAP_CLUSTER, 0); 
; 2634 : 			needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2635 : 			break;

	jmp	$LN72@BuildMissi
$LN61@BuildMissi:

; 2636 : 		case AMIS_OCASTRIKE:
; 2637 : 			LoadWeapons(squad, damageMods, mt, 6, 0, 0);//Cobra

	push	0
	push	0
	push	6
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2638 : 			ShiAssert(mission_target != FalconNullId);
; 2639 : 			needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2640 : 			break;

	jmp	$LN72@BuildMissi
$LN60@BuildMissi:

; 2641 : 		case AMIS_INTSTRIKE:	
; 2642 : 		case AMIS_STRIKE:		
; 2643 : 		case AMIS_DEEPSTRIKE:	
; 2644 : 		case AMIS_STSTRIKE:
; 2645 : 			//LoadWeapons(squad, damageMods, mt, 2, 0, 0); Cobra TJL 11/23 allows larger loadouts
; 2646 : 			LoadWeapons(squad, damageMods, mt, 4, 0, 0);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2647 : 			ShiAssert(mission_target != FalconNullId);
; 2648 : 			needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2649 : 			break;

	jmp	$LN72@BuildMissi
$LN59@BuildMissi:

; 2650 : 		case AMIS_STRATBOMB:	
; 2651 : 			LoadWeapons(squad, damageMods, mt, 98, 0, WEAP_DUMB_ONLY); 

	push	4096					; 00001000H
	push	0
	push	98					; 00000062H
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2652 : 			ShiAssert(mission_target != FalconNullId);
; 2653 : 			needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2654 : 			break;

	jmp	$LN72@BuildMissi
$LN58@BuildMissi:

; 2655 : 		// RV - Biker - Give FAC some weapons too
; 2656 : 		case AMIS_FAC:
; 2657 : 			LoadWeapons(squad, damageMods, mt, 2, WEAP_FAC_LOADOUT, 0);

	push	0
	push	524288					; 00080000H
	push	2
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2658 : 			LoadWeapons(squad, damageMods, Tracked, 98, WEAP_BAI_LOADOUT, 0);

	push	0
	push	65536					; 00010000H
	push	98					; 00000062H
	push	3
	mov	ecx, DWORD PTR _damageMods$[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2659 : 			needweaps = 0;

	mov	DWORD PTR _needweaps$[ebp], 0

; 2660 : 			break;

	jmp	$LN72@BuildMissi
$LN57@BuildMissi:

; 2661 : 		case AMIS_ONCALLCAS: 	
; 2662 : 		case AMIS_PRPLANCAS: 	
; 2663 : 		case AMIS_SAD:			
; 2664 : 		case AMIS_INT:
; 2665 : 		case AMIS_BAI:	
; 2666 : 			LoadWeapons(squad, damageMods, mt, 98, WEAP_BAI_LOADOUT, 0); 

	push	0
	push	65536					; 00010000H
	push	98					; 00000062H
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2667 : 			needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2668 : 			break;

	jmp	$LN72@BuildMissi
$LN56@BuildMissi:

; 2669 : 		case AMIS_ASW:
; 2670 : 			// RV - Biker - Now this is DEAD mission
; 2671 : 			if (rand() & 1){

	call	_rand
	and	eax, 1
	je	SHORT $LN55@BuildMissi

; 2672 : 				LoadWeapons(squad, DefaultDamageMods, NoMove, 98, WEAP_DEAD_LOADOUT, 0);

	push	0
	push	131072					; 00020000H
	push	98					; 00000062H
	push	0
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	mov	ecx, DWORD PTR _squad$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+712]
	call	edx

; 2673 : 			}
; 2674 : 			else{

	jmp	SHORT $LN54@BuildMissi
$LN55@BuildMissi:

; 2675 : 				LoadWeapons(squad, DefaultDamageMods, Tracked, 98, WEAP_DEAD_LOADOUT, 0);

	push	0
	push	131072					; 00020000H
	push	98					; 00000062H
	push	3
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
$LN54@BuildMissi:

; 2676 : 			}
; 2677 : 			//LoadWeapons(squad, DefaultDamageMods, mt, 98, WEAP_CLUSTER, 0);
; 2678 : 			needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2679 : 			SetUnitMission(AMIS_SEADSTRIKE);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax

; 2680 : 			break;

	jmp	$LN72@BuildMissi
$LN53@BuildMissi:

; 2681 : 		case AMIS_ASHIP:
; 2682 : 			LoadWeapons(squad, damageMods, mt, 98, 0, 0); 

	push	0
	push	0
	push	98					; 00000062H
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _damageMods$[ebp]
	push	edx
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2683 : 			needweaps = 1;

	mov	DWORD PTR _needweaps$[ebp], 1

; 2684 : 			break;

	jmp	SHORT $LN72@BuildMissi
$LN52@BuildMissi:

; 2685 : 		case AMIS_RECON:
; 2686 : 		case AMIS_BDA:
; 2687 : 		case AMIS_PATROL:
; 2688 : 		case AMIS_RECONPATROL:
; 2689 : 			LoadWeapons(squad, damageMods, NoMove, 1, WEAP_RECON, 0);

	push	0
	push	1
	push	1
	push	0
	mov	ecx, DWORD PTR _damageMods$[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2690 : 			needweaps = 0;

	mov	DWORD PTR _needweaps$[ebp], 0

; 2691 : 			break;

	jmp	SHORT $LN72@BuildMissi
$LN51@BuildMissi:

; 2692 : 		case AMIS_BARCAP:
; 2693 : 		case AMIS_BARCAP2:
; 2694 : 		case AMIS_HAVCAP:    
; 2695 : 		case AMIS_TARCAP:    
; 2696 : 		case AMIS_RESCAP:    
; 2697 : 		case AMIS_AMBUSHCAP:
; 2698 : 		case AMIS_SWEEP:     
; 2699 : 		case AMIS_ALERT:	
; 2700 : 		case AMIS_INTERCEPT: 
; 2701 : 		case AMIS_ESCORT:
; 2702 : 			needweaps = 0;

	mov	DWORD PTR _needweaps$[ebp], 0

; 2703 : 			break;

	jmp	SHORT $LN72@BuildMissi
$LN50@BuildMissi:

; 2704 : 		case AMIS_ECM:
; 2705 : 			// RV - Biker - This should work for EA-6B
; 2706 : 			LoadWeapons(squad, damageMods, NoMove, 6, WEAP_ECM, 0);

	push	0
	push	4
	push	6
	push	0
	mov	ecx, DWORD PTR _damageMods$[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2707 : 			needweaps = 0;

	mov	DWORD PTR _needweaps$[ebp], 0

; 2708 : 			break;

	jmp	SHORT $LN72@BuildMissi
$LN49@BuildMissi:

; 2709 : 		default:
; 2710 : 			needweaps = 0;

	mov	DWORD PTR _needweaps$[ebp], 0
$LN72@BuildMissi:

; 2711 : 			break;
; 2712 : 	}
; 2713 : 
; 2714 : 	// RV - Biker - Find last HP
; 2715 : 	VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$[ebp], eax

; 2716 : 	
; 2717 : 	int lastHP = 0;

	mov	DWORD PTR _lastHP$[ebp], 0

; 2718 : 	int indexHP = 0;

	mov	DWORD PTR _indexHP$[ebp], 0

; 2719 : 	if (vc) {

	cmp	DWORD PTR _vc$[ebp], 0
	je	SHORT $LN48@BuildMissi

; 2720 : 		for (indexHP = 0; indexHP < HARDPOINT_MAX; indexHP++) {

	mov	DWORD PTR _indexHP$[ebp], 0
	jmp	SHORT $LN47@BuildMissi
$LN46@BuildMissi:
	mov	ecx, DWORD PTR _indexHP$[ebp]
	add	ecx, 1
	mov	DWORD PTR _indexHP$[ebp], ecx
$LN47@BuildMissi:
	cmp	DWORD PTR _indexHP$[ebp], 16		; 00000010H
	jge	SHORT $LN45@BuildMissi

; 2721 : 			if (vc->Weapon[indexHP])

	mov	edx, DWORD PTR _indexHP$[ebp]
	mov	eax, DWORD PTR _vc$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+98]
	test	ecx, ecx
	je	SHORT $LN44@BuildMissi

; 2722 : 				lastHP = indexHP;

	mov	edx, DWORD PTR _indexHP$[ebp]
	mov	DWORD PTR _lastHP$[ebp], edx
$LN44@BuildMissi:

; 2723 : 		}

	jmp	SHORT $LN46@BuildMissi
$LN45@BuildMissi:

; 2724 : 	}
; 2725 : 	else {

	jmp	SHORT $LN43@BuildMissi
$LN48@BuildMissi:

; 2726 : 		lastHP = HARDPOINT_MAX;

	mov	DWORD PTR _lastHP$[ebp], 16		; 00000010H
$LN43@BuildMissi:

; 2727 : 	}
; 2728 : 
; 2729 : 	int emptyHPs = 0;

	mov	DWORD PTR _emptyHPs$[ebp], 0

; 2730 : 
; 2731 : 	for (int i = 0; i < loadouts; i++) {

	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN42@BuildMissi
$LN41@BuildMissi:
	mov	eax, DWORD PTR _i$11[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11[ebp], eax
$LN42@BuildMissi:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$11[ebp], edx
	jge	SHORT $LN40@BuildMissi

; 2732 : 		// Don't count gun (HP 0)
; 2733 : 		for (int hp = 1; hp <= lastHP; hp++) {

	mov	DWORD PTR _hp$6[ebp], 1
	jmp	SHORT $LN39@BuildMissi
$LN38@BuildMissi:
	mov	eax, DWORD PTR _hp$6[ebp]
	add	eax, 1
	mov	DWORD PTR _hp$6[ebp], eax
$LN39@BuildMissi:
	mov	ecx, DWORD PTR _hp$6[ebp]
	cmp	ecx, DWORD PTR _lastHP$[ebp]
	jg	SHORT $LN37@BuildMissi

; 2734 : 			if (loadout[i].WeaponID[hp] == 0)

	mov	edx, DWORD PTR _i$11[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _hp$6[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	test	eax, eax
	jne	SHORT $LN36@BuildMissi

; 2735 : 				emptyHPs++;

	mov	ecx, DWORD PTR _emptyHPs$[ebp]
	add	ecx, 1
	mov	DWORD PTR _emptyHPs$[ebp], ecx
$LN36@BuildMissi:

; 2736 : 		}

	jmp	SHORT $LN38@BuildMissi
$LN37@BuildMissi:

; 2737 : 	}

	jmp	SHORT $LN41@BuildMissi
$LN40@BuildMissi:

; 2738 : 
; 2739 : 	// RV - Biker - Jammers do overwrite all other weapons except fuel tanks and recon cams
; 2740 : 	// don't load AA missiles for SAR choppers
; 2741 : 	if (GetUnitMission() != AMIS_SAR) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+664]
	call	edx
	cmp	eax, 34					; 00000022H
	je	SHORT $LN35@BuildMissi

; 2742 : 		// RV - Biker - Load heat seekers more often
; 2743 : 		if (needweaps == 1 || rand() & 1) {

	cmp	DWORD PTR _needweaps$[ebp], 1
	je	SHORT $LN33@BuildMissi
	call	_rand
	and	eax, 1
	je	SHORT $LN34@BuildMissi
$LN33@BuildMissi:

; 2744 : 			LoadWeapons(squad, DefaultDamageMods, Air, 2, 0, WEAP_RADAR);

	push	4
	push	0
	push	2
	push	5
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2745 : 			LoadWeapons(squad, DefaultDamageMods, Air, 4, 0, WEAP_HEATSEEKER);

	push	2
	push	0
	push	4
	push	5
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	mov	ecx, DWORD PTR _squad$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+712]
	call	edx
$LN34@BuildMissi:

; 2746 : 		}
; 2747 : 		LoadWeapons(squad, DefaultDamageMods, Air, 98, 0, 0);

	push	0
	push	0
	push	98					; 00000062H
	push	5
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	mov	eax, DWORD PTR _squad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
$LN35@BuildMissi:

; 2748 : 	}
; 2749 : 
; 2750 : 	// Check for internal jamming
; 2751 : 	if (GetVehicleClassData(class_data->VehicleType[0])->Flags & VEH_HAS_JAMMER){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	eax, 2
	imul	eax, 0
	movsx	ecx, WORD PTR [edx+eax+68]
	push	ecx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	edx, DWORD PTR [eax+4]
	and	edx, 65536				; 00010000H
	je	SHORT $LN32@BuildMissi

; 2752 : 		SetHasECM(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHasECM@UnitClass@@QAEXH@Z		; UnitClass::SetHasECM
	jmp	SHORT $LN30@BuildMissi
$LN32@BuildMissi:

; 2753 : 	}
; 2754 : 	// Load jamming pod, if possible
; 2755 : 	else if (LoadWeapons(squad, damageMods, NoMove, 1, WEAP_ECM, 0)){

	push	0
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _damageMods$[ebp]
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+712]
	call	edx
	test	eax, eax
	je	SHORT $LN30@BuildMissi

; 2756 : 		SetHasECM(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHasECM@UnitClass@@QAEXH@Z		; UnitClass::SetHasECM
$LN30@BuildMissi:

; 2757 : 	}
; 2758 : 
; 2759 : 	// RV - Biker - Load Chaff Flare pods
; 2760 : 	LoadWeapons(squad, damageMods, NoMove, 1, WEAP_CHAFF_POD, 0); 

	push	0
	push	1048576					; 00100000H
	push	1
	push	0
	mov	eax, DWORD PTR _damageMods$[ebp]
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+712]
	call	edx

; 2761 : 
; 2762 : 	// RV - Biker - Check if we have some laser guided bombs loaded
; 2763 : 	for (int i=0; i<loadouts; i++) {

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN29@BuildMissi
$LN28@BuildMissi:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN29@BuildMissi:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$10[ebp], edx
	jge	SHORT $LN27@BuildMissi

; 2764 : 		// Don't count gun (HP 0)
; 2765 : 		for (int hp = 1; hp <= lastHP; hp++) {

	mov	DWORD PTR _hp$9[ebp], 1
	jmp	SHORT $LN26@BuildMissi
$LN25@BuildMissi:
	mov	eax, DWORD PTR _hp$9[ebp]
	add	eax, 1
	mov	DWORD PTR _hp$9[ebp], eax
$LN26@BuildMissi:
	mov	ecx, DWORD PTR _hp$9[ebp]
	cmp	ecx, DWORD PTR _lastHP$[ebp]
	jg	SHORT $LN24@BuildMissi

; 2766 : 			if (WeaponDataTable[loadout[i].WeaponID[hp]].GuidanceFlags == WEAP_LASER) {

	mov	edx, DWORD PTR _i$10[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _hp$9[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	edx, WORD PTR [ecx+eax+42]
	cmp	edx, 8
	jne	SHORT $LN23@BuildMissi

; 2767 : 				// Here load laser pod...
; 2768 : 				LoadWeapons(squad, damageMods, NoMove, 1, WEAP_LASER_POD, 0);

	push	0
	push	262144					; 00040000H
	push	1
	push	0
	mov	eax, DWORD PTR _damageMods$[ebp]
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+712]
	call	edx

; 2769 : 				break;

	jmp	SHORT $LN24@BuildMissi
$LN23@BuildMissi:

; 2770 : 			}
; 2771 : 		}

	jmp	SHORT $LN25@BuildMissi
$LN24@BuildMissi:

; 2772 : 	}

	jmp	$LN28@BuildMissi
$LN27@BuildMissi:

; 2773 : 
; 2774 : 	// RV - Biker - Check if we have some GPS guided bombs loaded
; 2775 : 	if (GetUnitMission() == AMIS_ONCALLCAS ||
; 2776 : 		GetUnitMission() == AMIS_PRPLANCAS ||
; 2777 : 		GetUnitMission() == AMIS_SAD ||
; 2778 : 		GetUnitMission() == AMIS_INT ||
; 2779 : 		GetUnitMission() == AMIS_BAI ||
; 2780 : 		GetUnitMission() == AMIS_ASW)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 20					; 00000014H
	je	SHORT $LN21@BuildMissi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 21					; 00000015H
	je	SHORT $LN21@BuildMissi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 23					; 00000017H
	je	SHORT $LN21@BuildMissi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 24					; 00000018H
	je	SHORT $LN21@BuildMissi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 25					; 00000019H
	je	SHORT $LN21@BuildMissi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 35					; 00000023H
	jne	$LN18@BuildMissi
$LN21@BuildMissi:

; 2781 : 	{
; 2782 : 		for (int i = 0; i < loadouts; i++) {

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN20@BuildMissi
$LN19@BuildMissi:
	mov	ecx, DWORD PTR _i$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$8[ebp], ecx
$LN20@BuildMissi:
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+376]
	cmp	DWORD PTR _i$8[ebp], eax
	jge	SHORT $LN18@BuildMissi

; 2783 : 			// Don't count gun (HP 0)
; 2784 : 			for (int hp = 1; hp <= lastHP; hp++) {

	mov	DWORD PTR _hp$7[ebp], 1
	jmp	SHORT $LN17@BuildMissi
$LN16@BuildMissi:
	mov	ecx, DWORD PTR _hp$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _hp$7[ebp], ecx
$LN17@BuildMissi:
	mov	edx, DWORD PTR _hp$7[ebp]
	cmp	edx, DWORD PTR _lastHP$[ebp]
	jg	SHORT $LN15@BuildMissi

; 2785 : 				if (WeaponDataTable[loadout[i].WeaponID[hp]].Flags & WEAP_BOMBGPS) {

	mov	eax, DWORD PTR _i$8[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _hp$7[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	eax, WORD PTR [edx+ecx+10]
	and	eax, 2048				; 00000800H
	je	SHORT $LN14@BuildMissi

; 2786 : 					// Here load laser pod...
; 2787 : 					LoadWeapons(squad, damageMods, NoMove, 1, WEAP_LASER_POD, 0);

	push	0
	push	262144					; 00040000H
	push	1
	push	0
	mov	ecx, DWORD PTR _damageMods$[ebp]
	push	ecx
	mov	edx, DWORD PTR _squad$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 2788 : 					break;

	jmp	SHORT $LN15@BuildMissi
$LN14@BuildMissi:

; 2789 : 				}
; 2790 : 			}

	jmp	SHORT $LN16@BuildMissi
$LN15@BuildMissi:

; 2791 : 		}

	jmp	$LN19@BuildMissi
$LN18@BuildMissi:

; 2792 : 	}
; 2793 : 
; 2794 : 	// RV - Biker - Check if we have some ground weapons when on AG mission
; 2795 : 	int AGweaps = 0;

	mov	DWORD PTR _AGweaps$[ebp], 0

; 2796 : 
; 2797 : 	if (needweaps == 1) {

	cmp	DWORD PTR _needweaps$[ebp], 1
	jne	$LN10@BuildMissi

; 2798 : 		for (int i=0; i<loadouts; i++) {

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN12@BuildMissi
$LN11@BuildMissi:
	mov	ecx, DWORD PTR _i$13[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$13[ebp], ecx
$LN12@BuildMissi:
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+376]
	cmp	DWORD PTR _i$13[ebp], eax
	jge	$LN10@BuildMissi

; 2799 : 			// Don't count gun (HP 0)
; 2800 : 			for (int hp = 1; hp <= lastHP; hp++) {

	mov	DWORD PTR _hp$12[ebp], 1
	jmp	SHORT $LN9@BuildMissi
$LN8@BuildMissi:
	mov	ecx, DWORD PTR _hp$12[ebp]
	add	ecx, 1
	mov	DWORD PTR _hp$12[ebp], ecx
$LN9@BuildMissi:
	mov	edx, DWORD PTR _hp$12[ebp]
	cmp	edx, DWORD PTR _lastHP$[ebp]
	jg	$LN7@BuildMissi

; 2801 : 				AGweaps += GetWeaponHitChance(loadout[i].WeaponID[hp], NoMove);

	push	0
	mov	eax, DWORD PTR _i$13[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _hp$12[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	push	ecx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	add	eax, DWORD PTR _AGweaps$[ebp]
	mov	DWORD PTR _AGweaps$[ebp], eax

; 2802 : 				AGweaps += GetWeaponHitChance(loadout[i].WeaponID[hp], Foot);

	push	1
	mov	edx, DWORD PTR _i$13[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _hp$12[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	push	eax
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	add	eax, DWORD PTR _AGweaps$[ebp]
	mov	DWORD PTR _AGweaps$[ebp], eax

; 2803 : 				AGweaps += GetWeaponHitChance(loadout[i].WeaponID[hp], Wheeled);

	push	2
	mov	ecx, DWORD PTR _i$13[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _hp$12[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	push	edx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	add	eax, DWORD PTR _AGweaps$[ebp]
	mov	DWORD PTR _AGweaps$[ebp], eax

; 2804 : 				AGweaps += GetWeaponHitChance(loadout[i].WeaponID[hp], Tracked);

	push	3
	mov	eax, DWORD PTR _i$13[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _hp$12[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	push	ecx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	add	eax, DWORD PTR _AGweaps$[ebp]
	mov	DWORD PTR _AGweaps$[ebp], eax

; 2805 : 				AGweaps += GetWeaponHitChance(loadout[i].WeaponID[hp], Naval);

	push	6
	mov	edx, DWORD PTR _i$13[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _hp$12[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	push	eax
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	add	eax, DWORD PTR _AGweaps$[ebp]
	mov	DWORD PTR _AGweaps$[ebp], eax

; 2806 : 				AGweaps += GetWeaponHitChance(loadout[i].WeaponID[hp], Rail);

	push	7
	mov	ecx, DWORD PTR _i$13[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _hp$12[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	push	edx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	add	eax, DWORD PTR _AGweaps$[ebp]
	mov	DWORD PTR _AGweaps$[ebp], eax

; 2807 : 			}

	jmp	$LN8@BuildMissi
$LN7@BuildMissi:

; 2808 : 		}

	jmp	$LN11@BuildMissi
$LN10@BuildMissi:

; 2809 : 	}
; 2810 : 	
; 2811 : 	if (needweaps == 1 && AGweaps == 0) {

	cmp	DWORD PTR _needweaps$[ebp], 1
	jne	SHORT $LN6@BuildMissi
	cmp	DWORD PTR _AGweaps$[ebp], 0
	jne	SHORT $LN6@BuildMissi

; 2812 : 		return PRET_CANCELED;

	mov	eax, 5
	jmp	$LN115@BuildMissi
$LN6@BuildMissi:

; 2813 : 	}
; 2814 : 
; 2815 : 	// Last minute fixup for mission types for variety
; 2816 : 	if (MissionData[mis->mission].skill == ARO_S && !mis->action_type)

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	shl	ecx, 5
	movzx	edx, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[ecx+2]
	cmp	edx, 3
	jne	SHORT $LN2@BuildMissi
	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	test	ecx, ecx
	jne	SHORT $LN2@BuildMissi

; 2817 : 	{
; 2818 : 		if (squad->class_data->Flags & VEH_STEALTH)

	mov	edx, DWORD PTR _squad$[ebp]
	mov	eax, DWORD PTR [edx+236]
	movzx	ecx, WORD PTR [eax+228]
	and	ecx, 32					; 00000020H
	je	SHORT $LN4@BuildMissi

; 2819 : 			SetUnitMission(AMIS_STSTRIKE);

	push	17					; 00000011H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+604]
	call	edx
	jmp	SHORT $LN2@BuildMissi
$LN4@BuildMissi:

; 2820 : 		else if (DistanceToFront(mis->tx,mis->ty) > 100.0F)

	mov	eax, DWORD PTR _mis$[ebp]
	movzx	ecx, WORD PTR [eax+42]
	push	ecx
	mov	edx, DWORD PTR _mis$[ebp]
	movzx	eax, WORD PTR [edx+40]
	push	eax
	call	?DistanceToFront@@YAMFF@Z		; DistanceToFront
	add	esp, 8
	fstp	DWORD PTR tv1952[ebp]
	movss	xmm0, DWORD PTR tv1952[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN2@BuildMissi

; 2821 : 			SetUnitMission(AMIS_DEEPSTRIKE);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax
$LN2@BuildMissi:

; 2822 : 	}
; 2823 : 
; 2824 : 	// Transfer aircraft, update scheduling and insert flight
; 2825 : 	squad->ScheduleAircraft(this,mis);

	mov	ecx, DWORD PTR _mis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?ScheduleAircraft@SquadronClass@@QAEXPAVFlightClass@@PAVMissionRequestClass@@@Z ; SquadronClass::ScheduleAircraft

; 2826 : 	if (!GetRoster()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetRoster@UnitClass@@QAEJXZ		; UnitClass::GetRoster
	test	eax, eax
	jne	SHORT $LN1@BuildMissi

; 2827 : 		return PRET_NO_ASSETS;

	mov	eax, 1
	jmp	SHORT $LN115@BuildMissi
$LN1@BuildMissi:

; 2828 : 	}
; 2829 : 	last_move = TheCampaign.CurrentTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR [eax+268], ecx

; 2830 : 	SetSendCreate(VuEntity::VU_SC_SEND_OOB);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ; VuEntity::SetSendCreate

; 2831 : 	vuDatabase->/*Quick*/Insert(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 2832 : 
; 2833 : 	// Steal our weapons/fuel from the squadron
; 2834 : 	squad->UpdateSquadronStores (loadout[0].WeaponID, loadout[0].WeaponCount, fuelAvail, GetTotalVehicles());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	push	eax
	mov	eax, DWORD PTR _fuelAvail$[ebp]
	push	eax
	mov	ecx, 48					; 00000030H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	lea	ecx, DWORD PTR [eax+ecx+32]
	push	ecx
	mov	edx, 48					; 00000030H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	push	ecx
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?UpdateSquadronStores@SquadronClass@@QAEXQAFQAEHH@Z ; SquadronClass::UpdateSquadronStores

; 2835 : 
; 2836 : 	return PRET_SUCCESS;

	mov	eax, 3
$LN115@BuildMissi:

; 2837 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN118@BuildMissi:
	DD	$LN51@BuildMissi
	DD	$LN71@BuildMissi
	DD	$LN65@BuildMissi
	DD	$LN61@BuildMissi
	DD	$LN60@BuildMissi
	DD	$LN59@BuildMissi
	DD	$LN58@BuildMissi
	DD	$LN57@BuildMissi
	DD	$LN52@BuildMissi
	DD	$LN50@BuildMissi
	DD	$LN56@BuildMissi
	DD	$LN53@BuildMissi
	DD	$LN49@BuildMissi
$LN117@BuildMissi:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	5
	DB	6
	DB	7
	DB	7
	DB	12					; 0000000cH
	DB	7
	DB	7
	DB	7
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	8
	DB	8
	DB	9
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	8
	DB	8
?BuildMission@FlightClass@@UAEHPAVMissionRequestClass@@@Z ENDP ; FlightClass::BuildMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_myit$2 = -28124					; size = 12
_yd$ = -28112						; size = 4
_dist$ = -28108						; size = 4
$T3 = -28104						; size = 4
tv361 = -28100						; size = 4
_xd$ = -28096						; size = 4
tv272 = -28092						; size = 4
$T4 = -28088						; size = 4
tv76 = -28084						; size = 4
_x$ = -28080						; size = 2
_ey$ = -28076						; size = 2
_emit$ = -28072						; size = 4
_ex$ = -28068						; size = 2
_d$ = -28064						; size = 4
_y$ = -28060						; size = 2
_this$ = -28056						; size = 4
_nw$ = -28052						; size = 4
_nx$ = -28048						; size = 2
_step$ = -28044						; size = 4
_w$ = -28040						; size = 4
_ny$ = -28036						; size = 2
_fx$ = -28032						; size = 2
_fy$ = -28028						; size = 2
_us$ = -28021						; size = 1
_e$ = -28020						; size = 4
_added$ = -28016					; size = 28000
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ PROC ; FlightClass::GetKnownEmitters
; _this$ = ecx

; 2919 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 28112				; 00006dd0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2920 : 	GridIndex	x,y,fx,fy,nx,ny,ex,ey;
; 2921 : 	float		d,xd,yd;
; 2922 : 	int			step,dist;
; 2923 : 	WayPoint	w,nw;
; 2924 : 	Team		us;
; 2925 : 	CampEntity		e;
; 2926 : 	F4PFList	emit = new FalconPrivateList(&CampFilter);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN13@GetKnownEm
	push	OFFSET ?CampFilter@@3VCampBaseFilter@@A	; CampFilter
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z ; FalconPrivateList::FalconPrivateList
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN14@GetKnownEm
$LN13@GetKnownEm:
	mov	DWORD PTR tv76[ebp], 0
$LN14@GetKnownEm:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _emit$[ebp], ecx

; 2927 : 	uchar		added[MAX_CAMP_ENTITIES];			// Search data
; 2928 : 
; 2929 : 	emit->Register();

	mov	ecx, DWORD PTR _emit$[ebp]
	call	?Register@VuCollection@@QAEXXZ		; VuCollection::Register

; 2930 : 	memset(added,0,MAX_CAMP_ENTITIES);

	push	28000					; 00006d60H
	push	0
	lea	edx, DWORD PTR _added$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 2931 : 	w = GetFirstUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 2932 : 	nw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax

; 2933 : 	us = GetTeam();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _us$[ebp], al
$LN10@GetKnownEm:

; 2934 : 	while (w && nw)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN9@GetKnownEm
	cmp	DWORD PTR _nw$[ebp], 0
	je	$LN9@GetKnownEm

; 2935 : 	{
; 2936 : 		w->GetWPLocation(&fx,&fy);

	lea	ecx, DWORD PTR _fy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 2937 : 		nw->GetWPLocation(&nx,&ny);

	lea	eax, DWORD PTR _ny$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 2938 : 		d = Distance(fx,fy,nx,ny);

	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _fy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _fx$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 2939 : 		xd = (float)(nx-fx)/d;

	movsx	eax, WORD PTR _nx$[ebp]
	movsx	ecx, WORD PTR _fx$[ebp]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _xd$[ebp], xmm0

; 2940 : 		yd = (float)(ny-fy)/d;

	movsx	edx, WORD PTR _ny$[ebp]
	movsx	eax, WORD PTR _fy$[ebp]
	sub	edx, eax
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _yd$[ebp], xmm0

; 2941 : 		dist = FloatToInt32(d);

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _dist$[ebp], eax

; 2942 : 		for (step=0; step<=dist; step+=10)

	mov	DWORD PTR _step$[ebp], 0
	jmp	SHORT $LN8@GetKnownEm
$LN7@GetKnownEm:
	mov	ecx, DWORD PTR _step$[ebp]
	add	ecx, 10					; 0000000aH
	mov	DWORD PTR _step$[ebp], ecx
$LN8@GetKnownEm:
	mov	edx, DWORD PTR _step$[ebp]
	cmp	edx, DWORD PTR _dist$[ebp]
	jg	$LN6@GetKnownEm

; 2943 : 		{
; 2944 : 			x = fx + (GridIndex)(xd*step + 0.5F);

	movsx	eax, WORD PTR _fx$[ebp]
	cvtsi2ss xmm0, DWORD PTR _step$[ebp]
	mulss	xmm0, DWORD PTR _xd$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	movsx	edx, cx
	add	eax, edx
	mov	WORD PTR _x$[ebp], ax

; 2945 : 			y = fy + (GridIndex)(yd*step + 0.5F);

	movsx	eax, WORD PTR _fy$[ebp]
	cvtsi2ss xmm0, DWORD PTR _step$[ebp]
	mulss	xmm0, DWORD PTR _yd$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	movsx	edx, cx
	add	eax, edx
	mov	WORD PTR _y$[ebp], ax

; 2946 : 			VuListIterator	myit(EmitterList);

	mov	eax, DWORD PTR ?EmitterList@@3PAVFalconPrivateList@@A ; EmitterList
	push	eax
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2947 : 			e = (CampEntity) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN5@GetKnownEm:

; 2948 : 			//Cobra we will try to make this match the update function
; 2949 : 			while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN4@GetKnownEm

; 2950 : 			{
; 2951 : 				if (
; 2952 : 					e->GetTeam() != us && e->GetSpotted(us) && 
; 2953 : 					(!e->IsUnit() || !((Unit)e)->Moving()) && !added[e->GetCampID()] && 
; 2954 : 					e->GetElectronicDetectionRange(Air)
; 2955 : 				){

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	movzx	edx, BYTE PTR _us$[ebp]
	cmp	ecx, edx
	je	$LN1@GetKnownEm
	movzx	eax, BYTE PTR _us$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	$LN1@GetKnownEm
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN2@GetKnownEm
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	jne	$LN1@GetKnownEm
$LN2@GetKnownEm:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	movzx	edx, BYTE PTR _added$[ebp+ecx]
	test	edx, edx
	jne	$LN1@GetKnownEm
	push	5
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+420]
	call	eax
	test	eax, eax
	je	$LN1@GetKnownEm

; 2956 : 					e->GetLocation(&ex,&ey);

	lea	ecx, DWORD PTR _ey$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2957 : 					if (Distance(ex,ey,x,y) < 200 /*ADD_TO_KNOWN_EMITTER_DIST*/)

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ey$[ebp]
	push	edx
	movzx	eax, WORD PTR _ex$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv361[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	comiss	xmm0, DWORD PTR tv361[ebp]
	jbe	SHORT $LN1@GetKnownEm

; 2958 : 					{
; 2959 : 						emit->ForcedInsert(e);

	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _emit$[ebp]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert

; 2960 : 						added[e->GetCampID()]++;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	lea	ecx, DWORD PTR _added$[ebp+eax]
	mov	DWORD PTR tv272[ebp], ecx
	mov	edx, DWORD PTR tv272[ebp]
	mov	al, BYTE PTR [edx]
	add	al, 1
	mov	ecx, DWORD PTR tv272[ebp]
	mov	BYTE PTR [ecx], al
$LN1@GetKnownEm:

; 2961 : 					}
; 2962 : 				}
; 2963 : 				e = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 2964 : 			}

	jmp	$LN5@GetKnownEm
$LN4@GetKnownEm:

; 2965 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	$LN7@GetKnownEm
$LN6@GetKnownEm:

; 2966 : 		w = nw;

	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR _w$[ebp], edx

; 2967 : 		nw = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$[ebp], eax

; 2968 : 	}

	jmp	$LN10@GetKnownEm
$LN9@GetKnownEm:

; 2969 : 	return emit;

	mov	eax, DWORD PTR _emit$[ebp]

; 2970 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ$1:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetKnownEmitters@FlightClass@@UAEPAVFalconPrivateList@@XZ ENDP ; FlightClass::GetKnownEmitters
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_d$ = -32						; size = 4
_speed$ = -28						; size = 4
_w$ = -24						; size = 4
_this$ = -20						; size = 4
_x$ = -16						; size = 2
_y$ = -12						; size = 2
_tx$ = -8						; size = 2
_ty$ = -4						; size = 2
?ETA@FlightClass@@UAEKXZ PROC				; FlightClass::ETA
; _this$ = ecx

; 1047 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1048 : 	GridIndex   x,y,tx,ty;
; 1049 : 	WayPoint		w;
; 1050 : 	float       d;
; 1051 : 	int			speed;
; 1052 : 
; 1053 : 	w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1054 : 	if (!w)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN1@ETA

; 1055 : 		return CampaignDay;

	mov	eax, 86400000				; 05265c00H
	jmp	SHORT $LN2@ETA
$LN1@ETA:

; 1056 : 	GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1057 : 	w->GetWPLocation(&tx,&ty);

	lea	edx, DWORD PTR _ty$[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1058 : 	speed = GetCruiseSpeed();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCruiseSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCruiseSpeed
	mov	DWORD PTR _speed$[ebp], eax

; 1059 : 	d = Distance(x,y,tx,ty);

	movzx	ecx, WORD PTR _ty$[ebp]
	push	ecx
	movzx	edx, WORD PTR _tx$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1060 : 	return  Camp_GetCurrentTime() + TimeToArrive(d,(float)speed);

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	cvtsi2ss xmm0, DWORD PTR _speed$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?TimeToArrive@@YAKMM@Z			; TimeToArrive
	add	esp, 8
	add	eax, esi
$LN2@ETA:

; 1061 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ETA@FlightClass@@UAEKXZ ENDP				; FlightClass::ETA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_hp$ = -8						; size = 4
_i$ = -4						; size = 4
?DumpWeapons@FlightClass@@UAEHXZ PROC			; FlightClass::DumpWeapons
; _this$ = ecx

; 1064 : int FlightClass::DumpWeapons(){

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1065 : 	int		i,hp;
; 1066 : 
; 1067 : 	for (i=0; i<loadouts; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@DumpWeapon
$LN6@DumpWeapon:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@DumpWeapon:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$[ebp], edx
	jge	$LN5@DumpWeapon

; 1068 : 		for (hp=0; hp<HARDPOINT_MAX; hp++){

	mov	DWORD PTR _hp$[ebp], 0
	jmp	SHORT $LN4@DumpWeapon
$LN3@DumpWeapon:
	mov	eax, DWORD PTR _hp$[ebp]
	add	eax, 1
	mov	DWORD PTR _hp$[ebp], eax
$LN4@DumpWeapon:
	cmp	DWORD PTR _hp$[ebp], 16			; 00000010H
	jge	$LN2@DumpWeapon

; 1069 : 			// RV - Biker - Don't drop fuel tanks and jammers in 2d
; 1070 : 			if (
; 1071 : 				loadout[i].WeaponID[hp] && !GetWeaponHitChance(loadout[i].WeaponID[hp],Air) &&
; 1072 : 				!(GetWeaponFlags(loadout[i].WeaponID[hp]) & WEAP_FUEL) &&
; 1073 : 				!(GetWeaponFlags(loadout[i].WeaponID[hp]) & WEAP_ECM)
; 1074 : 			){

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _hp$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	test	edx, edx
	je	$LN1@DumpWeapon
	push	5
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _hp$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	push	ecx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@DumpWeapon
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _hp$[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	push	eax
	call	?GetWeaponFlags@@YAHH@Z			; GetWeaponFlags
	add	esp, 4
	and	eax, 2
	jne	SHORT $LN1@DumpWeapon
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _hp$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	push	edx
	call	?GetWeaponFlags@@YAHH@Z			; GetWeaponFlags
	add	esp, 4
	and	eax, 4
	jne	SHORT $LN1@DumpWeapon

; 1075 : 				loadout[i].WeaponID[hp] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+372]
	xor	edx, edx
	mov	ecx, DWORD PTR _hp$[ebp]
	mov	WORD PTR [eax+ecx*2], dx

; 1076 : 				loadout[i].WeaponCount[hp] = 0;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _hp$[ebp]
	mov	BYTE PTR [edx+ecx+32], 0
$LN1@DumpWeapon:

; 1077 : 			}
; 1078 : 		}

	jmp	$LN3@DumpWeapon
$LN2@DumpWeapon:

; 1079 : 	}

	jmp	$LN6@DumpWeapon
$LN5@DumpWeapon:

; 1080 : 	return 1;

	mov	eax, 1

; 1081 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DumpWeapons@FlightClass@@UAEHXZ ENDP			; FlightClass::DumpWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_load$2 = -32						; size = 4
$T3 = -28						; size = 4
tv74 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_squad$ = 8						; size = 4
_dam$ = 12						; size = 4
_mt$ = 16						; size = 4
_num$ = 20						; size = 4
_type_flags$ = 24					; size = 4
_guide_flags$ = 28					; size = 4
?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z PROC ; FlightClass::LoadWeapons
; _this$ = ecx

; 2840 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2841 : 	if (!loadouts)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+376]
	test	ecx, ecx
	jne	SHORT $LN1@LoadWeapon

; 2842 : 	{
; 2843 : 		LoadoutStruct	*load = new LoadoutStruct;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN4@LoadWeapon
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0LoadoutStruct@@QAE@XZ		; LoadoutStruct::LoadoutStruct
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@LoadWeapon
$LN4@LoadWeapon:
	mov	DWORD PTR tv74[ebp], 0
$LN5@LoadWeapon:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _load$2[ebp], eax

; 2844 : 		SetLoadout(load, 1);

	push	1
	mov	ecx, DWORD PTR _load$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+636]
	call	edx
$LN1@LoadWeapon:

; 2845 : 	}
; 2846 : 	return ::LoadWeapons (squad, GetVehicleID(0), dam, mt, num, type_flags, guide_flags, loadout[0].WeaponID, loadout[0].WeaponCount);

	mov	eax, 48					; 00000030H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	lea	eax, DWORD PTR [edx+eax+32]
	push	eax
	mov	ecx, 48					; 00000030H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	push	eax
	mov	ecx, DWORD PTR _guide_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dam$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	push	ecx
	call	?LoadWeapons@@YAHPAXHPAEW4MoveType@@HHHQAFQAE@Z ; LoadWeapons
	add	esp, 36					; 00000024H

; 2847 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadWeapons@FlightClass@@UAEHPAXPAEW4MoveType@@HHH@Z ENDP ; FlightClass::LoadWeapons
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_w$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitAirbaseID@FlightClass@@UAE?AVVU_ID@@XZ PROC	; FlightClass::GetUnitAirbaseID
; _this$ = ecx

; 1104 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 	// KCK: Two ways to do this -
; 1106 : 	// 1) Get squadron's airbase
; 1107 : 	// 2) Get airbase from takeoff waypoint's target
; 1108 : 	// I'm taking option 2 since squadron's airbase can change mid-flight, etc..
; 1109 : 	WayPoint w = GetFirstUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1110 : 	ShiAssert ( w && w->GetWPAction() == WP_TAKEOFF )
; 1111 : 		return w->GetWPTargetID();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1112 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitAirbaseID@FlightClass@@UAE?AVVU_ID@@XZ ENDP	; FlightClass::GetUnitAirbaseID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_w$ = -4						; size = 4
?GetUnitAirbase@FlightClass@@UAEPAVCampBaseClass@@XZ PROC ; FlightClass::GetUnitAirbase
; _this$ = ecx

; 1088 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1089 : 	// KCK: Two ways to do this -
; 1090 : 	// 1) Get squadron's airbase
; 1091 : 	// 2) Get airbase from takeoff waypoint's target
; 1092 : 	// I'm taking option 2 since squadron's airbase can change mid-flight, etc..
; 1093 : 	WayPoint w = GetFirstUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1094 : 	if (!w)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN1@GetUnitAir

; 1095 : 	{
; 1096 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@GetUnitAir
$LN1@GetUnitAir:

; 1097 : 	}
; 1098 :     // Pu239 Why the first waypoint has to be takeoff? What about Instant Action?
; 1099 : 	//ShiAssert ( w && w->GetWPAction() == WP_TAKEOFF )
; 1100 : 		return w->GetWPTarget();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
$LN2@GetUnitAir:

; 1101 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitAirbase@FlightClass@@UAEPAVCampBaseClass@@XZ ENDP ; FlightClass::GetUnitAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitSquadronID@FlightClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitSquadronID@FlightClass@@UAE?AVVU_ID@@XZ PROC	; FlightClass::GetUnitSquadronID, COMDAT
; _this$ = ecx

; 196  : 		virtual VU_ID GetUnitSquadronID (void)					{ return squadron; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	edx, DWORD PTR [eax+396]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSquadronID@FlightClass@@UAE?AVVU_ID@@XZ ENDP	; FlightClass::GetUnitSquadronID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitSquadron@FlightClass@@UAEPAVUnitClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSquadron@FlightClass@@UAEPAVUnitClass@@XZ PROC	; FlightClass::GetUnitSquadron, COMDAT
; _this$ = ecx

; 195  : 		virtual Unit GetUnitSquadron (void)						{ return FindUnit(squadron); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	push	ecx
	mov	edx, DWORD PTR [eax+392]
	push	edx
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSquadron@FlightClass@@UAEPAVUnitClass@@XZ ENDP	; FlightClass::GetUnitSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitTOT@FlightClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitTOT@FlightClass@@UAEKXZ PROC			; FlightClass::GetUnitTOT, COMDAT
; _this$ = ecx

; 194  : 		virtual CampaignTime GetUnitTOT	(void)					{ return time_on_target; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitTOT@FlightClass@@UAEKXZ ENDP			; FlightClass::GetUnitTOT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitMissionTargetID@FlightClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitMissionTargetID@FlightClass@@UAE?AVVU_ID@@XZ PROC ; FlightClass::GetUnitMissionTargetID, COMDAT
; _this$ = ecx

; 193  : 		virtual VU_ID GetUnitMissionTargetID (void)				{ return mission_target; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	edx, DWORD PTR [eax+292]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitMissionTargetID@FlightClass@@UAE?AVVU_ID@@XZ ENDP ; FlightClass::GetUnitMissionTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitMissionTarget@FlightClass@@UAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMissionTarget@FlightClass@@UAEPAVCampBaseClass@@XZ PROC ; FlightClass::GetUnitMissionTarget, COMDAT
; _this$ = ecx

; 192  : 		virtual CampEntity GetUnitMissionTarget (void)			{ return (CampEntity)vuDatabase->Find(mission_target); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	mov	edx, DWORD PTR [eax+288]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMissionTarget@FlightClass@@UAEPAVCampBaseClass@@XZ ENDP ; FlightClass::GetUnitMissionTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitMissionID@FlightClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMissionID@FlightClass@@UAEHXZ PROC		; FlightClass::GetUnitMissionID, COMDAT
; _this$ = ecx

; 191  : 		virtual int GetUnitMissionID (void)						{ return (int)mission_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+381]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMissionID@FlightClass@@UAEHXZ ENDP		; FlightClass::GetUnitMissionID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hp$ = 8						; size = 4
_ac$ = 12						; size = 4
?GetUnitWeaponCount@FlightClass@@UAEHHH@Z PROC		; FlightClass::GetUnitWeaponCount
; _this$ = ecx

; 4128 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4129 : 	if (ac >= loadouts)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+376]
	cmp	DWORD PTR _ac$[ebp], ecx
	jl	SHORT $LN2@GetUnitWea

; 4130 : 		ac = 0;

	mov	DWORD PTR _ac$[ebp], 0
$LN2@GetUnitWea:

; 4131 : 
; 4132 : 	ShiAssert (loadouts);
; 4133 : 
; 4134 : 	if (&loadout[ac])

	mov	edx, DWORD PTR _ac$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+372]
	je	SHORT $LN1@GetUnitWea

; 4135 : 		return loadout[ac].WeaponCount[hp];

	mov	ecx, DWORD PTR _ac$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _hp$[ebp]
	movzx	eax, BYTE PTR [eax+ecx+32]
	jmp	SHORT $LN3@GetUnitWea
$LN1@GetUnitWea:

; 4136 : 
; 4137 : 	return 0;

	xor	eax, eax
$LN3@GetUnitWea:

; 4138 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetUnitWeaponCount@FlightClass@@UAEHHH@Z ENDP		; FlightClass::GetUnitWeaponCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hp$ = 8						; size = 4
_ac$ = 12						; size = 4
?GetUnitWeaponId@FlightClass@@UAEHHH@Z PROC		; FlightClass::GetUnitWeaponId
; _this$ = ecx

; 4115 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4116 : 	if (ac >= loadouts)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+376]
	cmp	DWORD PTR _ac$[ebp], ecx
	jl	SHORT $LN2@GetUnitWea

; 4117 : 		ac = 0;

	mov	DWORD PTR _ac$[ebp], 0
$LN2@GetUnitWea:

; 4118 : 
; 4119 : 	ShiAssert (loadouts);
; 4120 : 
; 4121 : 	if (&loadout[ac])

	mov	edx, DWORD PTR _ac$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+372]
	je	SHORT $LN1@GetUnitWea

; 4122 : 		return loadout[ac].WeaponID[hp];

	mov	ecx, DWORD PTR _ac$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _hp$[ebp]
	movsx	eax, WORD PTR [eax+ecx*2]
	jmp	SHORT $LN3@GetUnitWea
$LN1@GetUnitWea:

; 4123 : 
; 4124 : 	return 0;

	xor	eax, eax
$LN3@GetUnitWea:

; 4125 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetUnitWeaponId@FlightClass@@UAEHHH@Z ENDP		; FlightClass::GetUnitWeaponId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitPriority@FlightClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPriority@FlightClass@@UAEHXZ PROC		; FlightClass::GetUnitPriority, COMDAT
; _this$ = ecx

; 188  : 		virtual int GetUnitPriority (void)						{ return (int)priority; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+380]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPriority@FlightClass@@UAEHXZ ENDP		; FlightClass::GetUnitPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitCurrentRole@FlightClass@@UBEHXZ PROC		; FlightClass::GetUnitCurrentRole
; _this$ = ecx

; 1083 : int FlightClass::GetUnitCurrentRole() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1084 : 	return MissionData[mission].skill;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+377]
	shl	ecx, 5
	movzx	eax, BYTE PTR ?MissionData@@3PAUMissionDataType@@A[ecx+2]

; 1085 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitCurrentRole@FlightClass@@UBEHXZ ENDP		; FlightClass::GetUnitCurrentRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitMission@FlightClass@@UAE?AW4MissionTypeEnum@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMission@FlightClass@@UAE?AW4MissionTypeEnum@@XZ PROC ; FlightClass::GetUnitMission, COMDAT
; _this$ = ecx

; 186  : 		virtual MissionTypeEnum GetUnitMission (void)						{ return (MissionTypeEnum)mission; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+377]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMission@FlightClass@@UAE?AW4MissionTypeEnum@@XZ ENDP ; FlightClass::GetUnitMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetBurntFuel@FlightClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBurntFuel@FlightClass@@UAEHXZ PROC			; FlightClass::GetBurntFuel, COMDAT
; _this$ = ecx

; 185  : 		virtual int GetBurntFuel (void)							{ return fuel_burnt; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBurntFuel@FlightClass@@UAEHXZ ENDP			; FlightClass::GetBurntFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetCombatTime@FlightClass@@UAEKXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?GetCombatTime@FlightClass@@UAEKXZ PROC			; FlightClass::GetCombatTime, COMDAT
; _this$ = ecx

; 184  : 		virtual CampaignTime GetCombatTime (void)				{ return (TheCampaign.CurrentTime>last_combat)? TheCampaign.CurrentTime - last_combat:0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	cmp	ecx, DWORD PTR [eax+272]
	jbe	SHORT $LN3@GetCombatT
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	eax, DWORD PTR [edx+272]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@GetCombatT
$LN3@GetCombatT:
	mov	DWORD PTR tv68[ebp], 0
$LN4@GetCombatT:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCombatTime@FlightClass@@UAEKXZ ENDP			; FlightClass::GetCombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMoveTime@FlightClass@@UAEKXZ PROC			; FlightClass::GetMoveTime
; _this$ = ecx

; 2373 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2374 : 	if (last_move && TheCampaign.CurrentTime > last_move)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN1@GetMoveTim
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	cmp	edx, DWORD PTR [ecx+268]
	jbe	SHORT $LN1@GetMoveTim

; 2375 : 		return TheCampaign.CurrentTime - last_move;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	ecx, DWORD PTR [eax+268]
	mov	eax, ecx
	jmp	SHORT $LN2@GetMoveTim
$LN1@GetMoveTim:

; 2376 : 
; 2377 : 	last_move = TheCampaign.CurrentTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR [edx+268], eax

; 2378 : 
; 2379 : 	return 0;

	xor	eax, eax
$LN2@GetMoveTim:

; 2380 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMoveTime@FlightClass@@UAEKXZ ENDP			; FlightClass::GetMoveTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetNumberOfLoadouts@FlightClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumberOfLoadouts@FlightClass@@UAEHXZ PROC		; FlightClass::GetNumberOfLoadouts, COMDAT
; _this$ = ecx

; 181  : 		virtual int GetNumberOfLoadouts (void)					{ return loadouts; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+376]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfLoadouts@FlightClass@@UAEHXZ ENDP		; FlightClass::GetNumberOfLoadouts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ac$ = 8						; size = 4
?GetLoadout@FlightClass@@UAEPAULoadoutStruct@@H@Z PROC	; FlightClass::GetLoadout
; _this$ = ecx

; 4151 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4152 : 	if (ac >= loadouts)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+376]
	cmp	DWORD PTR _ac$[ebp], ecx
	jl	SHORT $LN1@GetLoadout

; 4153 : 		ac = 0;

	mov	DWORD PTR _ac$[ebp], 0
$LN1@GetLoadout:

; 4154 : 
; 4155 : 	ShiAssert (loadouts);
; 4156 : 
; 4157 : 	return &loadout[ac];

	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+372]

; 4158 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetLoadout@FlightClass@@UAEPAULoadoutStruct@@H@Z ENDP	; FlightClass::GetLoadout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveLoadout@FlightClass@@UAEXXZ PROC			; FlightClass::RemoveLoadout
; _this$ = ecx

; 4141 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4142 : 	if (loadout)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+372], 0
	je	SHORT $LN1@RemoveLoad

; 4143 : 	{
; 4144 : 		delete loadout;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 4145 : 		loadout = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+372], 0
$LN1@RemoveLoad:

; 4146 : 	}
; 4147 : 	loadouts = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+376], 0

; 4148 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveLoadout@FlightClass@@UAEXXZ ENDP			; FlightClass::RemoveLoadout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 8
$T3 = -84						; size = 8
_lbsfuel$4 = -76					; size = 4
$T5 = -72						; size = 4
$T6 = -68						; size = 4
_target$7 = -64						; size = 4
$T8 = -60						; size = 4
_oldload$ = -56						; size = 4
_vc$ = -52						; size = 4
tv194 = -48						; size = 4
$T9 = -44						; size = 4
tv79 = -40						; size = 4
_hasECM$ = -36						; size = 4
_msg$10 = -32						; size = 4
_j$ = -28						; size = 4
_i$ = -24						; size = 4
_buffer$11 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_newload$ = 8						; size = 4
_count$ = 12						; size = 4
?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z PROC	; FlightClass::SetLoadout
; _this$ = ecx

; 4161 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4162 : 	LoadoutStruct		*oldload = loadout;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	mov	DWORD PTR _oldload$[ebp], ecx

; 4163 : 
; 4164 : 	// JPO strengthened the checks.
; 4165 : 	ShiAssert (FALSE == F4IsBadReadPtr(class_data, sizeof *class_data)); // RH
; 4166 : 	VehicleClassDataType *vc = GetVehicleClassData(class_data->VehicleType[0]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	mov	ecx, 2
	imul	ecx, 0
	movsx	edx, WORD PTR [eax+ecx+68]
	push	edx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 4167 : 	ShiAssert(FALSE == F4IsBadReadPtr(vc, sizeof *vc));
; 4168 : 	int hasECM = (vc->Flags & VEH_HAS_JAMMER ? TRUE : FALSE);

	mov	eax, DWORD PTR _vc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN14@SetLoadout
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN15@SetLoadout
$LN14@SetLoadout:
	mov	DWORD PTR tv79[ebp], 0
$LN15@SetLoadout:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _hasECM$[ebp], edx

; 4169 : 	int i, j;
; 4170 : 
; 4171 : 	loadouts = count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _count$[ebp]
	mov	BYTE PTR [eax+376], cl

; 4172 : 	loadout = newload;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newload$[ebp]
	mov	DWORD PTR [edx+372], eax

; 4173 : 	delete oldload;

	mov	ecx, DWORD PTR _oldload$[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, DWORD PTR $T8[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 4174 : 
; 4175 : 	// Check for ECM pods. Stop looking if we find even one
; 4176 : 	for (i=0; i<loadouts && !hasECM; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@SetLoadout
$LN10@SetLoadout:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@SetLoadout:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN9@SetLoadout
	cmp	DWORD PTR _hasECM$[ebp], 0
	jne	SHORT $LN9@SetLoadout

; 4177 : 	{
; 4178 : 		for (j=0; j<HARDPOINT_MAX && !hasECM; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN8@SetLoadout
$LN7@SetLoadout:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN8@SetLoadout:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	SHORT $LN6@SetLoadout
	cmp	DWORD PTR _hasECM$[ebp], 0
	jne	SHORT $LN6@SetLoadout

; 4179 : 		{
; 4180 : 			if ((loadout[i].WeaponCount[j] > 0) && (WeaponDataTable[loadout[i].WeaponID[j]].Flags & WEAP_ECM)) {

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR [eax+ecx+32]
	test	edx, edx
	jle	SHORT $LN5@SetLoadout
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _j$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	eax, WORD PTR [edx+ecx+10]
	and	eax, 4
	je	SHORT $LN5@SetLoadout

; 4181 : 				hasECM = TRUE;

	mov	DWORD PTR _hasECM$[ebp], 1
$LN5@SetLoadout:

; 4182 : 			}
; 4183 : 		}

	jmp	SHORT $LN7@SetLoadout
$LN6@SetLoadout:

; 4184 : 	}

	jmp	$LN10@SetLoadout
$LN9@SetLoadout:

; 4185 : 	SetHasECM (hasECM);

	mov	ecx, DWORD PTR _hasECM$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHasECM@UnitClass@@QAEXH@Z		; UnitClass::SetHasECM

; 4186 : 
; 4187 : 	if (!IsLocal())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	jne	$LN4@SetLoadout

; 4188 : 	{
; 4189 : 
; 4190 : 		// Need to send data to the host
; 4191 : 		VuSessionEntity				*target = (VuSessionEntity*) vuDatabase->Find(OwnerId());

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$7[ebp], eax

; 4192 : 		FalconFlightPlanMessage		*msg = new FalconFlightPlanMessage(Id(), target);

	push	57					; 00000039H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN16@SetLoadout
	push	1
	mov	eax, DWORD PTR _target$7[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0FalconFlightPlanMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconFlightPlanMessage::FalconFlightPlanMessage
	mov	DWORD PTR tv194[ebp], eax
	jmp	SHORT $LN17@SetLoadout
$LN16@SetLoadout:
	mov	DWORD PTR tv194[ebp], 0
$LN17@SetLoadout:
	mov	ecx, DWORD PTR tv194[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _msg$10[ebp], edx

; 4193 : 		uchar						*buffer;
; 4194 : 		long						lbsfuel = 0;

	mov	DWORD PTR _lbsfuel$4[ebp], 0

; 4195 : 
; 4196 : 		msg->dataBlock.type = FalconFlightPlanMessage::loadoutData;

	mov	eax, DWORD PTR _msg$10[ebp]
	mov	BYTE PTR [eax+48], 1

; 4197 : 		msg->dataBlock.size = HARDPOINT_MAX * loadouts + HARDPOINT_MAX * loadouts * sizeof(short) + sizeof(long) + sizeof(uchar);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+376]
	shl	ecx, 4
	lea	edx, DWORD PTR [edx+ecx*2+5]
	mov	eax, DWORD PTR _msg$10[ebp]
	mov	DWORD PTR [eax+49], edx

; 4198 : 		msg->dataBlock.data = buffer = new uchar[msg->dataBlock.size];

	mov	ecx, DWORD PTR _msg$10[ebp]
	mov	edx, DWORD PTR [ecx+49]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR _buffer$11[ebp], eax
	mov	ecx, DWORD PTR _msg$10[ebp]
	mov	edx, DWORD PTR _buffer$11[ebp]
	mov	DWORD PTR [ecx+53], edx

; 4199 : 		memcpy(buffer,&lbsfuel,sizeof(long));							buffer += sizeof(long);

	push	4
	lea	eax, DWORD PTR _lbsfuel$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$11[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _buffer$11[ebp]
	add	edx, 4
	mov	DWORD PTR _buffer$11[ebp], edx

; 4200 : 		memcpy(buffer,&loadouts,sizeof(uchar));							buffer += sizeof(uchar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 376				; 00000178H
	push	eax
	mov	ecx, DWORD PTR _buffer$11[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _buffer$11[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$11[ebp], edx

; 4201 : 		for (i=0; i<loadouts; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SetLoadout
$LN2@SetLoadout:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SetLoadout:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN1@SetLoadout

; 4202 : 		{
; 4203 : 			// edg: for debugging -- we're getting bad data in loadouts
; 4204 : 			// Ed, PLEASE don't do this sort of thing without some sort of testing #def,
; 4205 : 			// or use the correct value - this would make adding new weapons difficult
; 4206 : #ifdef EDDEBUG
; 4207 : 			if ( loadout[i].WeaponID[0] > 203 )
; 4208 : 			{
; 4209 : 				loadout[i].WeaponID[0] = 0;
; 4210 : 			}
; 4211 : #endif
; 4212 : 			ShiAssert (loadout[i].WeaponID[0] < NumWeaponTypes);
; 4213 : 
; 4214 : 			memcpy(buffer,loadout[i].WeaponID,HARDPOINT_MAX * sizeof(short));			buffer += HARDPOINT_MAX * sizeof(short);

	push	32					; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	push	edx
	mov	eax, DWORD PTR _buffer$11[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _buffer$11[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _buffer$11[ebp], ecx

; 4215 : 			memcpy(buffer,loadout[i].WeaponCount,HARDPOINT_MAX);		buffer += HARDPOINT_MAX;

	push	16					; 00000010H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	lea	edx, DWORD PTR [ecx+edx+32]
	push	edx
	mov	eax, DWORD PTR _buffer$11[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _buffer$11[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _buffer$11[ebp], ecx

; 4216 : 		}

	jmp	SHORT $LN2@SetLoadout
$LN1@SetLoadout:

; 4217 : 		FalconSendMessage(msg, TRUE);

	push	1
	mov	edx, DWORD PTR _msg$10[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN4@SetLoadout:

; 4218 : 	}
; 4219 : 
; 4220 : 	MakeStoresDirty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeStoresDirty@FlightClass@@QAEXXZ	; FlightClass::MakeStoresDirty

; 4221 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetLoadout@FlightClass@@UAEXPAULoadoutStruct@@H@Z ENDP	; FlightClass::SetLoadout
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?SimSetOrientation@FlightClass@@UAEXMMM@Z PROC		; FlightClass::SimSetOrientation
; _this$ = ecx

; 2319 : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2320 : 	if (yaw < 0.0F){ yaw += 2.0F*PI; }

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _yaw$[ebp]
	jbe	SHORT $LN1@SimSetOrie
	movss	xmm0, DWORD PTR _yaw$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _yaw$[ebp], xmm0
$LN1@SimSetOrie:

; 2321 : 	SetLastDirection ((int)(yaw * RTD)/45); 

	movss	xmm0, DWORD PTR _yaw$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvttss2si eax, xmm0
	cdq
	mov	ecx, 45					; 0000002dH
	idiv	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLastDirection@FlightClass@@QAEXE@Z	; FlightClass::SetLastDirection

; 2322 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SimSetOrientation@FlightClass@@UAEXMMM@Z ENDP		; FlightClass::SimSetOrientation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
tv231 = -88						; size = 8
_sincos$ = -80						; size = 8
tv314 = -72						; size = 4
tv310 = -68						; size = 4
tv300 = -64						; size = 4
tv295 = -60						; size = 4
tv289 = -56						; size = 4
tv283 = -52						; size = 4
_heading$ = -48						; size = 4
tv270 = -44						; size = 4
tv265 = -40						; size = 4
_speed$ = -36						; size = 4
_ny$ = -32						; size = 4
_nx$ = -28						; size = 4
_movetime$ = -24					; size = 4
_w$ = -20						; size = 4
tv228 = -16						; size = 4
_dist$ = -12						; size = 4
_nz$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?GetRealPosition@FlightClass@@UAEXPAM00@Z PROC		; FlightClass::GetRealPosition
; _this$ = ecx

; 2325 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 2326 : 	// This will use the last move time to determine the real x,y & z of the unit
; 2327 : 	WayPoint		w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 2328 : 	float			movetime = (float)(SimLibElapsedTime - last_move) / VU_TICS_PER_SECOND;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR tv228[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv228[ebp]
	mov	edx, DWORD PTR tv228[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv231[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv231[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _movetime$[ebp], xmm0

; 2329 : 	float			nx,ny,nz;
; 2330 : 	float			speed;
; 2331 : 	float			heading;
; 2332 : 	float			dist;
; 2333 : 	mlTrig			sincos;
; 2334 : 
; 2335 : 	if (SimLibElapsedTime > last_move || !w)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+268]
	ja	SHORT $LN8@GetRealPos
	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN9@GetRealPos
$LN8@GetRealPos:

; 2336 : 	{
; 2337 : 		*x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, DWORD PTR _x$[ebp]
	fstp	DWORD PTR [edx]

; 2338 : 		*y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax]

; 2339 : 		*z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _z$[ebp]
	fstp	DWORD PTR [ecx]

; 2340 : 		return;

	jmp	$LN10@GetRealPos

; 2341 : 	}
; 2342 : 	else

	jmp	SHORT $LN7@GetRealPos
$LN9@GetRealPos:

; 2343 : 	{
; 2344 : 		// edg: prevent negative movetime
; 2345 : 		movetime = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _movetime$[ebp], xmm0
$LN7@GetRealPos:

; 2346 : 	}
; 2347 : 
; 2348 : 	w->GetLocation(&nx,&ny,&nz);

	lea	edx, DWORD PTR _nz$[ebp]
	push	edx
	lea	eax, DWORD PTR _ny$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 2349 : 	nz = AdjustAltitudeForMSL_AGL(nx, ny, nz);

	push	ecx
	movss	xmm0, DWORD PTR _nz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?AdjustAltitudeForMSL_AGL@@YAMMMM@Z	; AdjustAltitudeForMSL_AGL
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _nz$[ebp]

; 2350 : 	speed = (float) GetUnitSpeed() * KPH_TO_FPS;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+516]
	call	edx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f693e32
	movss	DWORD PTR _speed$[ebp], xmm0

; 2351 : 	dist = speed * movetime;

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR _movetime$[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0

; 2352 : 	heading = (float) atan2 (ny - YPos(), nx - XPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv265[ebp]
	movss	xmm0, DWORD PTR _nx$[ebp]
	subss	xmm0, DWORD PTR tv265[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv270[ebp]
	movss	xmm0, DWORD PTR _ny$[ebp]
	subss	xmm0, DWORD PTR tv270[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _heading$[ebp]

; 2353 : 	mlSinCos(&sincos, heading);

	push	ecx
	movss	xmm0, DWORD PTR _heading$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _sincos$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2354 : 	*x = XPos() + dist * sincos.cos;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv283[ebp]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR _sincos$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2355 : 	*y = YPos() + dist * sincos.sin;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv289[ebp]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR _sincos$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _y$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2356 : 	if (nz > ZPos())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv295[ebp]
	movss	xmm0, DWORD PTR _nz$[ebp]
	comiss	xmm0, DWORD PTR tv295[ebp]
	jbe	SHORT $LN6@GetRealPos

; 2357 : 	{
; 2358 : 		*z = ZPos() + dist * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv300[ebp]
	movss	xmm0, DWORD PTR tv300[ebp]
	movss	xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2359 : 		if (*z > nz)

	mov	ecx, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR _nz$[ebp]
	jbe	SHORT $LN5@GetRealPos

; 2360 : 			*z = nz;

	mov	edx, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR _nz$[ebp]
	movss	DWORD PTR [edx], xmm0
$LN5@GetRealPos:

; 2361 : 	}

	jmp	SHORT $LN1@GetRealPos
$LN6@GetRealPos:

; 2362 : 	else if (nz < ZPos())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv310[ebp]
	movss	xmm0, DWORD PTR tv310[ebp]
	comiss	xmm0, DWORD PTR _nz$[ebp]
	jbe	SHORT $LN3@GetRealPos

; 2363 : 	{
; 2364 : 		*z = ZPos() - dist * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv314[ebp]
	movss	xmm0, DWORD PTR tv314[ebp]
	movss	xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2365 : 		if (*z < nz)

	mov	ecx, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR _nz$[ebp]
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN2@GetRealPos

; 2366 : 			*z = nz;

	mov	edx, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR _nz$[ebp]
	movss	DWORD PTR [edx], xmm0
$LN2@GetRealPos:

; 2367 : 	}
; 2368 : 	else

	jmp	SHORT $LN1@GetRealPos
$LN3@GetRealPos:

; 2369 : 		*z = nz;

	mov	eax, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR _nz$[ebp]
	movss	DWORD PTR [eax], xmm0
$LN1@GetRealPos:
$LN10@GetRealPos:

; 2370 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetRealPosition@FlightClass@@UAEXPAM00@Z ENDP		; FlightClass::GetRealPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
tv167 = -44						; size = 4
tv161 = -40						; size = 4
_cx$ = -36						; size = 2
_cy$ = -32						; size = 2
_nx$ = -28						; size = 2
_ny$ = -24						; size = 2
_this$ = -20						; size = 4
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SimSetLocation@FlightClass@@UAEXMMM@Z PROC		; FlightClass::SimSetLocation
; _this$ = ecx

; 2298 : void FlightClass::SimSetLocation (float x, float y, float z){

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2299 : 	GridIndex	cx,cy,nx,ny;
; 2300 : 
; 2301 : 	// Check if flight has moved, and evaluate current situation if so
; 2302 : 	GetLocation(&cx,&cy);

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2303 : 	// sfr: xy order
; 2304 : 	::vector pos = { x, y };

	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _pos$[ebp+4], xmm0
	xor	edx, edx
	mov	DWORD PTR _pos$[ebp+8], edx

; 2305 : 	ConvertSimToGrid(&pos, &nx, &ny);

	lea	eax, DWORD PTR _ny$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 2306 : 	//nx = SimToGrid(y);
; 2307 : 	//ny = SimToGrid(x);
; 2308 : 	if (cx != nx || cy != ny || fabs(z - ZPos()) > 500){

	movsx	eax, WORD PTR _cx$[ebp]
	movsx	ecx, WORD PTR _nx$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@SimSetLoca
	movsx	edx, WORD PTR _cy$[ebp]
	movsx	eax, WORD PTR _ny$[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@SimSetLoca
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv161[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	subss	xmm0, DWORD PTR tv161[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv167[ebp]
	movss	xmm0, DWORD PTR tv167[ebp]
	comiss	xmm0, DWORD PTR __real@43fa0000
	jbe	SHORT $LN2@SimSetLoca
$LN1@SimSetLoca:

; 2309 : 		SetPosition(x,y,z);

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 2310 : 		//MakeCampBaseDirty (DIRTY_POSITION, DDP[97].priority);
; 2311 : 		MakeCampBaseDirty (DIRTY_POSITION, SEND_SOON);

	push	4096					; 00001000H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z ; CampBaseClass::MakeCampBaseDirty

; 2312 : 		//MakeCampBaseDirty (DIRTY_ALTITUDE, DDP[98].priority);
; 2313 : 		MakeCampBaseDirty (DIRTY_ALTITUDE, SEND_SOON);

	push	4096					; 00001000H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z ; CampBaseClass::MakeCampBaseDirty

; 2314 : 		TheCampaign.MissionEvaluator->RegisterMove(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?RegisterMove@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z ; MissionEvaluationClass::RegisterMove
$LN2@SimSetLoca:

; 2315 : 	}
; 2316 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SimSetLocation@FlightClass@@UAEXMMM@Z ENDP		; FlightClass::SimSetLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetUnitSquadron@FlightClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 8
?SetUnitSquadron@FlightClass@@UAEXVVU_ID@@@Z PROC	; FlightClass::SetUnitSquadron, COMDAT
; _this$ = ecx

; 173  : 		virtual void SetUnitSquadron (VU_ID ID)					{ squadron = ID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax+392], ecx
	mov	edx, DWORD PTR _ID$[ebp+4]
	mov	DWORD PTR [eax+396], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitSquadron@FlightClass@@UAEXVVU_ID@@@Z ENDP	; FlightClass::SetUnitSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetUnitTOT@FlightClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tot$ = 8						; size = 4
?SetUnitTOT@FlightClass@@UAEXK@Z PROC			; FlightClass::SetUnitTOT, COMDAT
; _this$ = ecx

; 172  : 		virtual void SetUnitTOT (CampaignTime tot)				{ time_on_target = tot; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tot$[ebp]
	mov	DWORD PTR [eax+276], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitTOT@FlightClass@@UAEXK@Z ENDP			; FlightClass::SetUnitTOT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetUnitMissionTarget@FlightClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?SetUnitMissionTarget@FlightClass@@UAEXVVU_ID@@@Z PROC	; FlightClass::SetUnitMissionTarget, COMDAT
; _this$ = ecx

; 171  : 		virtual void SetUnitMissionTarget (VU_ID id)			{ mission_target = id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+288], ecx
	mov	edx, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR [eax+292], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitMissionTarget@FlightClass@@UAEXVVU_ID@@@Z ENDP	; FlightClass::SetUnitMissionTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetUnitMissionID@FlightClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetUnitMissionID@FlightClass@@UAEXH@Z PROC		; FlightClass::SetUnitMissionID, COMDAT
; _this$ = ecx

; 170  : 		virtual void SetUnitMissionID (int id)					{ mission_id	= (uchar)id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _id$[ebp]
	mov	BYTE PTR [eax+381], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMissionID@FlightClass@@UAEXH@Z ENDP		; FlightClass::SetUnitMissionID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetUnitPriority@FlightClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?SetUnitPriority@FlightClass@@UAEXH@Z PROC		; FlightClass::SetUnitPriority, COMDAT
; _this$ = ecx

; 169  : 		virtual void SetUnitPriority (int p)					{ priority		= (uchar)p; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _p$[ebp]
	mov	BYTE PTR [eax+380], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitPriority@FlightClass@@UAEXH@Z ENDP		; FlightClass::SetUnitPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mis$ = 8						; size = 1
?SetUnitMission@FlightClass@@UAEXE@Z PROC		; FlightClass::SetUnitMission
; _this$ = ecx

; 1544 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1545 : 	if (mission != mis)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+377]
	movzx	edx, BYTE PTR _mis$[ebp]
	cmp	ecx, edx
	je	SHORT $LN5@SetUnitMis

; 1546 : 	{
; 1547 : 		mission = mis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _mis$[ebp]
	mov	BYTE PTR [eax+377], cl

; 1548 : 		MakeFlightDirty (DIRTY_MISSION, DDP[95].priority);

	mov	edx, 4
	imul	edx, 95					; 0000005fH
	mov	eax, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 1549 : 		//	MakeFlightDirty (DIRTY_MISSION, SEND_EVENTUALLY);
; 1550 : 
; 1551 : 		if (IsTacan() && mis != AMIS_TANKER)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsTacan@CampBaseClass@@QAEHXZ		; CampBaseClass::IsTacan
	test	eax, eax
	je	SHORT $LN3@SetUnitMis
	movzx	edx, BYTE PTR _mis$[ebp]
	cmp	edx, 28					; 0000001cH
	je	SHORT $LN3@SetUnitMis

; 1552 : 		{
; 1553 : 			// Cancel tacan in case of abort
; 1554 : 			SetTacan(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTacan@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetTacan
	jmp	SHORT $LN5@SetUnitMis
$LN3@SetUnitMis:

; 1555 : 		}
; 1556 : 		else if(!IsTacan() && mis == AMIS_TANKER)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsTacan@CampBaseClass@@QAEHXZ		; CampBaseClass::IsTacan
	test	eax, eax
	jne	SHORT $LN5@SetUnitMis
	movzx	eax, BYTE PTR _mis$[ebp]
	cmp	eax, 28					; 0000001cH
	jne	SHORT $LN5@SetUnitMis

; 1557 : 		{
; 1558 : 			SetTacan(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTacan@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetTacan
$LN5@SetUnitMis:

; 1559 : 		}
; 1560 : 	}
; 1561 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMission@FlightClass@@UAEXE@Z ENDP		; FlightClass::SetUnitMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetBurntFuel@FlightClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fuel$ = 8						; size = 4
?SetBurntFuel@FlightClass@@UAEXJ@Z PROC			; FlightClass::SetBurntFuel, COMDAT
; _this$ = ecx

; 167  : 		virtual void SetBurntFuel (long fuel)					{ fuel_burnt = fuel; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fuel$[ebp]
	mov	DWORD PTR [eax+264], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBurntFuel@FlightClass@@UAEXJ@Z ENDP			; FlightClass::SetBurntFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetCombatTime@FlightClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetCombatTime@FlightClass@@UAEXK@Z PROC		; FlightClass::SetCombatTime, COMDAT
; _this$ = ecx

; 166  : 		virtual void SetCombatTime (CampaignTime t)				{ last_combat = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+272], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCombatTime@FlightClass@@UAEXK@Z ENDP		; FlightClass::SetCombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?SetUnitLastMove@FlightClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetUnitLastMove@FlightClass@@UAEXK@Z PROC		; FlightClass::SetUnitLastMove, COMDAT
; _this$ = ecx

; 165  : 		virtual void SetUnitLastMove (CampaignTime t)			{ last_move = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+268], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitLastMove@FlightClass@@UAEXK@Z ENDP		; FlightClass::SetUnitLastMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -96						; size = 8
_trig$ = -88						; size = 8
tv861 = -80						; size = 4
_atc$2 = -76						; size = 4
tv604 = -72						; size = 4
tv590 = -68						; size = 4
_ahead$3 = -64						; size = 4
_right$4 = -60						; size = 4
_pc$ = -56						; size = 4
_w$5 = -52						; size = 4
_y$6 = -48						; size = 4
_x$7 = -44						; size = 4
_info$ = -40						; size = 4
_value$ = -36						; size = 4
tv337 = -32						; size = 4
_pt$8 = -28						; size = 4
_i$ = -24						; size = 4
_this$ = -20						; size = 4
_ux$9 = -16						; size = 2
_uy$10 = -12						; size = 2
_wx$11 = -8						; size = 2
_wy$12 = -4						; size = 2
_simdata$ = 8						; size = 4
_remote$ = 12						; size = 4
?GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z PROC ; FlightClass::GetVehicleDeagData
; _this$ = ecx

; 3897 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 3898 : 	static CampEntity		ent;
; 3899 : 	static int				pilotSlot,queue=0,fuelBurnt, rwindex = 0;
; 3900 : 	int						value,i;
; 3901 : 	PilotClass				*pc;
; 3902 : 	runwayQueueStruct *info = NULL;	

	mov	DWORD PTR _info$[ebp], 0

; 3903 : 	mlTrig trig;
; 3904 : 
; 3905 : 	// Reinitialize static vars upon query of first vehicle
; 3906 : 	if (simdata->vehicleInUnit < 0)

	mov	eax, DWORD PTR _simdata$[ebp]
	movsx	ecx, WORD PTR [eax+42]
	test	ecx, ecx
	jge	$LN54@GetVehicle

; 3907 : 	{
; 3908 : 		WayPoint w;
; 3909 : 		pilotSlot = 0;

	mov	DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, 0

; 3910 : 		if (!remote)

	cmp	DWORD PTR _remote$[ebp], 0
	jne	$LN53@GetVehicle

; 3911 : 		{
; 3912 : 			simdata->ptIndex = GetDeaggregationPoint(0, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+468]
	call	edx
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 3913 : 			if (simdata->ptIndex == DPT_ERROR_NOT_READY)

	mov	edx, DWORD PTR _simdata$[ebp]
	cmp	DWORD PTR [edx+84], -1
	jne	SHORT $LN52@GetVehicle

; 3914 : 			{
; 3915 : 				return -1;

	or	eax, -1
	jmp	$LN55@GetVehicle
	jmp	SHORT $LN48@GetVehicle
$LN52@GetVehicle:

; 3916 : 			}
; 3917 : 			else if (simdata->ptIndex == DPT_ERROR_CANT_PLACE)

	mov	eax, DWORD PTR _simdata$[ebp]
	cmp	DWORD PTR [eax+84], -2			; fffffffeH
	jne	SHORT $LN50@GetVehicle

; 3918 : 			{
; 3919 : 				return -1;

	or	eax, -1
	jmp	$LN55@GetVehicle
	jmp	SHORT $LN48@GetVehicle
$LN50@GetVehicle:

; 3920 : 			}
; 3921 : 			else if (simdata->ptIndex == DPT_ONBOARD_CARRIER)

	mov	ecx, DWORD PTR _simdata$[ebp]
	cmp	DWORD PTR [ecx+84], 32000		; 00007d00H
	jne	SHORT $LN48@GetVehicle

; 3922 : 			{
; 3923 : 				simdata->ptIndex = 0;

	mov	edx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [edx+84], 0
$LN48@GetVehicle:

; 3924 : 			}
; 3925 : 
; 3926 : 			if (ent && ent->IsObjective())

	cmp	DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A, 0
	je	$LN45@GetVehicle
	mov	eax, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN45@GetVehicle

; 3927 : 			{		
; 3928 : 				ATCBrain *atc = ((Objective)ent)->brain;

	mov	ecx, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	edx, DWORD PTR [ecx+240]
	mov	DWORD PTR _atc$2[ebp], edx

; 3929 : 				info = atc->InList(Id());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _atc$2[ebp]
	call	?InList@ATCBrain@@QAEPAUrunwayQueueStruct@@VVU_ID@@@Z ; ATCBrain::InList
	mov	DWORD PTR _info$[ebp], eax

; 3930 : 				if(info)

	cmp	DWORD PTR _info$[ebp], 0
	je	SHORT $LN46@GetVehicle

; 3931 : 				{
; 3932 : 					rwindex = info->rwindex;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, ecx

; 3933 : 					queue = GetQueue(rwindex);

	mov	edx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	push	edx
	call	?GetQueue@@YAHH@Z			; GetQueue
	add	esp, 4
	mov	DWORD PTR ?queue@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, eax

; 3934 : 				}					
; 3935 : 				else 

	jmp	SHORT $LN45@GetVehicle
$LN46@GetVehicle:

; 3936 : 				{
; 3937 : 					queue = 0;

	mov	DWORD PTR ?queue@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, 0

; 3938 : 					rwindex = simdata->rwIndex;

	mov	eax, DWORD PTR _simdata$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, ecx
$LN45@GetVehicle:

; 3939 : 				}
; 3940 : 			}
; 3941 : 
; 3942 : 			w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$5[ebp], eax

; 3943 : 			if (w)

	cmp	DWORD PTR _w$5[ebp], 0
	je	SHORT $LN44@GetVehicle

; 3944 : 			{
; 3945 : 				// Find heading to next waypoint
; 3946 : 				GridIndex	ux,uy,wx,wy;
; 3947 : 				GetLocation(&ux,&uy);

	lea	edx, DWORD PTR _uy$10[ebp]
	push	edx
	lea	eax, DWORD PTR _ux$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 3948 : 				w->GetWPLocation(&wx,&wy);

	lea	ecx, DWORD PTR _wy$12[ebp]
	push	ecx
	lea	edx, DWORD PTR _wx$11[ebp]
	push	edx
	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 3949 : 				simdata->heading = AngleTo(ux,uy,wx,wy);

	movzx	eax, WORD PTR _wy$12[ebp]
	push	eax
	movzx	ecx, WORD PTR _wx$11[ebp]
	push	ecx
	movzx	edx, WORD PTR _uy$10[ebp]
	push	edx
	movzx	eax, WORD PTR _ux$9[ebp]
	push	eax
	call	?AngleTo@@YAMFFFF@Z			; AngleTo
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _simdata$[ebp]
	fstp	DWORD PTR [ecx+68]
$LN44@GetVehicle:

; 3950 : 			}
; 3951 : 		}
; 3952 : 		else 

	jmp	SHORT $LN43@GetVehicle
$LN53@GetVehicle:

; 3953 : 		{
; 3954 : 			simdata->ptIndex = 0;

	mov	edx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [edx+84], 0
$LN43@GetVehicle:

; 3955 : 		}
; 3956 : 	}
; 3957 : 	else 

	jmp	SHORT $LN42@GetVehicle
$LN54@GetVehicle:

; 3958 : 	{
; 3959 : 		pilotSlot++;

	mov	eax, DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	add	eax, 1
	mov	DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, eax
$LN42@GetVehicle:

; 3960 : 	}
; 3961 : 
; 3962 : 	// Skip dead/missing slots
; 3963 : 	while (plane_stats[pilotSlot] != AIRCRAFT_AVAILABLE && pilotSlot < PILOTS_PER_FLIGHT){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	movzx	edx, BYTE PTR [ecx+416]
	cmp	edx, 4
	je	SHORT $LN40@GetVehicle
	cmp	DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, 4
	jge	SHORT $LN40@GetVehicle

; 3964 : 		pilotSlot++;

	mov	eax, DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	add	eax, 1
	mov	DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, eax

; 3965 : 	}

	jmp	SHORT $LN42@GetVehicle
$LN40@GetVehicle:

; 3966 : 
; 3967 : 	pilotSlot = pilotSlot % PILOTS_PER_FLIGHT;

	mov	ecx, DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN62@GetVehicle
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN62@GetVehicle:
	mov	DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, ecx

; 3968 : 
; 3969 : 	// vehicleInUnit is the pilot/vehicle slot in the case of Flights.
; 3970 : 	simdata->vehicleInUnit = pilotSlot;

	mov	edx, DWORD PTR _simdata$[ebp]
	mov	ax, WORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	mov	WORD PTR [edx+42], ax

; 3971 : 	// playerSlot is the id of any player pilots which are expected to be joining
; 3972 : 	simdata->playerSlot = player_slots[pilotSlot];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	movzx	dx, BYTE PTR [ecx+420]
	mov	eax, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [eax+40], dx

; 3973 : 
; 3974 : 	// Determine skill
; 3975 : 	pc = GetPilotData(pilotSlot);

	mov	ecx, DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPilotData@FlightClass@@QAEPAVPilotClass@@H@Z ; FlightClass::GetPilotData
	mov	DWORD PTR _pc$[ebp], eax

; 3976 : 	if (pc){

	cmp	DWORD PTR _pc$[ebp], 0
	je	SHORT $LN39@GetVehicle

; 3977 : 		simdata->skill = pc->GetPilotSkill();

	mov	ecx, DWORD PTR _pc$[ebp]
	call	?GetPilotSkill@PilotClass@@QAEHXZ	; PilotClass::GetPilotSkill
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [edx+44], ax

; 3978 : 	}
; 3979 : 	else {	

	jmp	SHORT $LN38@GetVehicle
$LN39@GetVehicle:

; 3980 : 		// Need to have a squadron to have a pilot skill
; 3981 : 		simdata->skill = pilots[pilotSlot]%PILOT_SKILL_RANGE;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR ?pilotSlot@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	movzx	eax, BYTE PTR [eax+412]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	eax, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [eax+44], dx
$LN38@GetVehicle:

; 3982 : 	}
; 3983 : 	if (simdata->skill > 4){

	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+44]
	cmp	edx, 4
	jle	SHORT $LN37@GetVehicle

; 3984 : 		simdata->skill = 4;

	mov	eax, 4
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [ecx+44], ax
$LN37@GetVehicle:

; 3985 : 	}
; 3986 : 	if (simdata->skill < 0){

	mov	edx, DWORD PTR _simdata$[ebp]
	movsx	eax, WORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $LN36@GetVehicle

; 3987 : 		simdata->skill = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [edx+44], cx
$LN36@GetVehicle:

; 3988 : 	}
; 3989 : 
; 3990 : 	// Determine location (local entities only)
; 3991 : 	if (!remote){

	cmp	DWORD PTR _remote$[ebp], 0
	jne	$LN11@GetVehicle

; 3992 : 		// Place on a taxi point (ground)
; 3993 : 		if (simdata->ptIndex > 0){

	mov	eax, DWORD PTR _simdata$[ebp]
	cmp	DWORD PTR [eax+84], 0
	jle	$LN34@GetVehicle

; 3994 : 			float x,y;
; 3995 : 			if(
; 3996 : 				PtDataTable[simdata->ptIndex].type == TakeoffPt && 
; 3997 : 				((Objective)ent)->brain->UseSectionTakeoff(this, rwindex) && simdata->vehicleInUnit < 2)

	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?PtDataTable@@3PAUPtDataType@@A ; PtDataTable
	movzx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 2
	jne	$LN33@GetVehicle
	mov	edx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	ecx, DWORD PTR [ecx+240]
	call	?UseSectionTakeoff@ATCBrain@@QAEHPAVFlightClass@@H@Z ; ATCBrain::UseSectionTakeoff
	test	eax, eax
	je	$LN33@GetVehicle
	mov	edx, DWORD PTR _simdata$[ebp]
	movsx	eax, WORD PTR [edx+42]
	cmp	eax, 2
	jge	$LN33@GetVehicle

; 3998 : 			{
; 3999 : 				simdata->ptIndex = ((Objective)ent)->brain->FindTakeoffPt(
; 4000 : 					this, simdata->vehicleInUnit, rwindex, &simdata->x, &simdata->y
; 4001 : 				);

	mov	ecx, DWORD PTR _simdata$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	mov	edx, DWORD PTR _simdata$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	mov	eax, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	push	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	ecx, DWORD PTR [ecx+240]
	call	?FindTakeoffPt@ATCBrain@@QAEHPAVFlightClass@@HHPAM1@Z ; ATCBrain::FindTakeoffPt
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN32@GetVehicle:

; 4002 : 
; 4003 : 				while(CheckPointGlobal(this, simdata->x, simdata->y)){

	mov	eax, DWORD PTR _simdata$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+60]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _simdata$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CheckPointGlobal@@YAPAVSimBaseClass@@PAVCampBaseClass@@MM@Z ; CheckPointGlobal
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN31@GetVehicle

; 4004 : 					if(!rwindex){

	cmp	DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, 0
	jne	SHORT $LN30@GetVehicle

; 4005 : 						simdata->x -= 50.0F;

	mov	eax, DWORD PTR _simdata$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	subss	xmm0, DWORD PTR __real@42480000
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+56], xmm0
	jmp	$LN27@GetVehicle
$LN30@GetVehicle:

; 4006 : 					}
; 4007 : 					else if(PtHeaderDataTable[rwindex].ltrt < 0){

	mov	edx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movsx	ecx, BYTE PTR [eax+edx+25]
	test	ecx, ecx
	jge	SHORT $LN28@GetVehicle

; 4008 : 						simdata->x -= -PtHeaderDataTable[rwindex].sinHeading * 50.0F;

	mov	edx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [eax+edx+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42480000
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [ecx+56]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [edx+56], xmm1

; 4009 : 						simdata->y -= PtHeaderDataTable[rwindex].cosHeading * 50.0F;

	mov	eax, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [ecx+eax+16]
	mulss	xmm0, DWORD PTR __real@42480000
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [edx+60]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+60], xmm1

; 4010 : 					}
; 4011 : 					else {

	jmp	SHORT $LN27@GetVehicle
$LN28@GetVehicle:

; 4012 : 						simdata->x -= PtHeaderDataTable[rwindex].sinHeading * 50.0F;

	mov	ecx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [edx+ecx+12]
	mulss	xmm0, DWORD PTR __real@42480000
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [eax+56]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+56], xmm1

; 4013 : 						simdata->y -= -PtHeaderDataTable[rwindex].cosHeading * 50.0F;

	mov	edx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [eax+edx+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42480000
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [ecx+60]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [edx+60], xmm1
$LN27@GetVehicle:

; 4014 : 					}
; 4015 : 				}

	jmp	$LN32@GetVehicle
$LN31@GetVehicle:

; 4016 : 				// Face the next point
; 4017 : 				((Objective)ent)->brain->FindRunwayPt(this, simdata->inSlot, rwindex, &x, &y);

	lea	eax, DWORD PTR _y$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$7[ebp]
	push	ecx
	mov	edx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	push	edx
	mov	eax, DWORD PTR _simdata$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	ecx, DWORD PTR [eax+240]
	call	?FindRunwayPt@ATCBrain@@QAEHPAVFlightClass@@HHPAM1@Z ; ATCBrain::FindRunwayPt

; 4018 : 				simdata->heading = (float)atan2 ( (y - simdata->y), (x - simdata->x) );

	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	xmm0, DWORD PTR _x$7[ebp]
	subss	xmm0, DWORD PTR [ecx+56]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	xmm0, DWORD PTR _y$6[ebp]
	subss	xmm0, DWORD PTR [edx+60]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _simdata$[ebp]
	fstp	DWORD PTR [eax+68]

; 4019 : 			}
; 4020 : 			else {

	jmp	$LN26@GetVehicle
$LN33@GetVehicle:

; 4021 : 				if(simdata->vehicleInUnit){

	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	test	edx, edx
	je	SHORT $LN23@GetVehicle

; 4022 : 					int pt;
; 4023 : 					simdata->ptIndex = GetNextPtLoop(simdata->ptIndex);

	mov	eax, DWORD PTR _simdata$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	?GetNextPtLoop@@YAHH@Z			; GetNextPtLoop
	add	esp, 4
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [edx+84], eax

; 4024 : 					pt = simdata->ptIndex;

	mov	eax, DWORD PTR _simdata$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _pt$8[ebp], ecx
$LN24@GetVehicle:

; 4025 : 					while(pt){

	cmp	DWORD PTR _pt$8[ebp], 0
	je	SHORT $LN23@GetVehicle

; 4026 : 						// && PtDataTable[pt].type != TaxiPt && PtDataTable[pt].type != CritTaxiPt)
; 4027 : 						switch(PtDataTable[pt].type) 

	mov	edx, DWORD PTR _pt$8[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?PtDataTable@@3PAUPtDataType@@A ; PtDataTable
	movzx	ecx, BYTE PTR [eax+edx+8]
	mov	DWORD PTR tv337[ebp], ecx
	mov	edx, DWORD PTR tv337[ebp]
	sub	edx, 3
	mov	DWORD PTR tv337[ebp], edx
	cmp	DWORD PTR tv337[ebp], 16		; 00000010H
	ja	SHORT $LN19@GetVehicle
	mov	eax, DWORD PTR tv337[ebp]
	movzx	ecx, BYTE PTR $LN61@GetVehicle[eax]
	jmp	DWORD PTR $LN65@GetVehicle[ecx*4]
$LN20@GetVehicle:

; 4028 : 						{
; 4029 : 							case TaxiPt:
; 4030 : 							case CritTaxiPt:
; 4031 : 							case LargeParkPt:
; 4032 : 							case SmallParkPt:
; 4033 : 								break;

	jmp	SHORT $LN21@GetVehicle
$LN19@GetVehicle:

; 4034 : 							default:
; 4035 : 								pt = GetNextPt(pt);

	mov	edx, DWORD PTR _pt$8[ebp]
	push	edx
	call	?GetNextPt@@YAHH@Z			; GetNextPt
	add	esp, 4
	mov	DWORD PTR _pt$8[ebp], eax

; 4036 : 								if(pt)

	cmp	DWORD PTR _pt$8[ebp], 0
	je	SHORT $LN18@GetVehicle

; 4037 : 									simdata->ptIndex = pt;

	mov	eax, DWORD PTR _simdata$[ebp]
	mov	ecx, DWORD PTR _pt$8[ebp]
	mov	DWORD PTR [eax+84], ecx
$LN18@GetVehicle:

; 4038 : 								continue;

	jmp	SHORT $LN24@GetVehicle
$LN21@GetVehicle:

; 4039 : 						}
; 4040 : 						break;

	jmp	SHORT $LN23@GetVehicle

; 4041 : 					}

	jmp	SHORT $LN24@GetVehicle
$LN23@GetVehicle:

; 4042 : 				}
; 4043 : 
; 4044 : 				TranslatePointData(ent, simdata->ptIndex, &simdata->x, &simdata->y);

	mov	edx, DWORD PTR _simdata$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	eax, DWORD PTR _simdata$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	eax
	call	?TranslatePointData@@YAXPAVCampBaseClass@@HPAM1@Z ; TranslatePointData
	add	esp, 16					; 00000010H
$LN17@GetVehicle:

; 4045 : 				while (CheckPointGlobal(this, simdata->x, simdata->y)){

	mov	ecx, DWORD PTR _simdata$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _simdata$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+56]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CheckPointGlobal@@YAPAVSimBaseClass@@PAVCampBaseClass@@MM@Z ; CheckPointGlobal
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN16@GetVehicle

; 4046 : 					if(!rwindex){

	cmp	DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, 0
	jne	SHORT $LN15@GetVehicle

; 4047 : 						simdata->x -= 50.0F;

	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	subss	xmm0, DWORD PTR __real@42480000
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [edx+56], xmm0
	jmp	$LN12@GetVehicle
$LN15@GetVehicle:

; 4048 : 					}
; 4049 : 					else if(PtHeaderDataTable[rwindex].ltrt < 0){

	mov	eax, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movsx	edx, BYTE PTR [ecx+eax+25]
	test	edx, edx
	jge	SHORT $LN13@GetVehicle

; 4050 : 						simdata->x -= -PtHeaderDataTable[simdata->rwIndex].sinHeading * 50.0F;

	mov	eax, DWORD PTR _simdata$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [edx+ecx+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42480000
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [eax+56]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+56], xmm1

; 4051 : 						simdata->y -= PtHeaderDataTable[simdata->rwIndex].cosHeading * 50.0F;

	mov	edx, DWORD PTR _simdata$[ebp]
	mov	eax, DWORD PTR [edx+88]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [ecx+eax+16]
	mulss	xmm0, DWORD PTR __real@42480000
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [edx+60]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+60], xmm1

; 4052 : 					}
; 4053 : 					else {

	jmp	SHORT $LN12@GetVehicle
$LN13@GetVehicle:

; 4054 : 						simdata->x -= PtHeaderDataTable[rwindex].sinHeading * 50.0F;

	mov	ecx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [edx+ecx+12]
	mulss	xmm0, DWORD PTR __real@42480000
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [eax+56]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+56], xmm1

; 4055 : 						simdata->y -= -PtHeaderDataTable[rwindex].cosHeading * 50.0F;

	mov	edx, DWORD PTR ?rwindex@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movss	xmm0, DWORD PTR [eax+edx+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42480000
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [ecx+60]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [edx+60], xmm1
$LN12@GetVehicle:

; 4056 : 					}
; 4057 : 				}

	jmp	$LN17@GetVehicle
$LN16@GetVehicle:

; 4058 : 				// Face the next point
; 4059 : 				TranslatePointData(ent, simdata->ptIndex-1, &x, &y);

	lea	eax, DWORD PTR _y$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	eax, DWORD PTR [edx+84]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR ?ent@?1??GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	ecx
	call	?TranslatePointData@@YAXPAVCampBaseClass@@HPAM1@Z ; TranslatePointData
	add	esp, 16					; 00000010H

; 4060 : 				simdata->heading = (float)atan2 ( (y - simdata->y), (x - simdata->x) );

	mov	edx, DWORD PTR _simdata$[ebp]
	movss	xmm0, DWORD PTR _x$7[ebp]
	subss	xmm0, DWORD PTR [edx+56]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	xmm0, DWORD PTR _y$6[ebp]
	subss	xmm0, DWORD PTR [eax+60]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _simdata$[ebp]
	fstp	DWORD PTR [ecx+68]
$LN26@GetVehicle:

; 4061 : 
; 4062 : 			}
; 4063 : 			simdata->z = OTWDriver.GetGroundLevel(simdata->x, simdata->y) - 5.0F;									

	push	0
	mov	edx, DWORD PTR _simdata$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _simdata$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+56]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv861[ebp]
	movss	xmm0, DWORD PTR tv861[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+64], xmm0

; 4064 : 		}
; 4065 : 		else

	jmp	$LN11@GetVehicle
$LN34@GetVehicle:

; 4066 : 		{
; 4067 : 			mlSinCos (&trig, simdata->heading);

	mov	edx, DWORD PTR _simdata$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+68]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 4068 : 			if (GetTotalVehicles() <= 4){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	cmp	eax, 4
	jg	$LN10@GetVehicle

; 4069 : 				simdata->x = simdata->x - VFormRight[simdata->vehicleInUnit] * trig.sin +
; 4070 : 					VFormAhead[simdata->vehicleInUnit] * trig.cos;

	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	movss	xmm0, DWORD PTR ?VFormRight@@3PAMA[edx*4]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	xmm1, DWORD PTR [eax+56]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	movss	xmm0, DWORD PTR ?VFormAhead@@3PAMA[edx*4]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+56], xmm1

; 4071 : 				simdata->y = simdata->y + VFormRight[simdata->vehicleInUnit] * trig.cos +
; 4072 : 					VFormAhead[simdata->vehicleInUnit] * trig.sin;

	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	movss	xmm0, DWORD PTR ?VFormRight@@3PAMA[edx*4]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	mov	eax, DWORD PTR _simdata$[ebp]
	addss	xmm0, DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	movss	xmm1, DWORD PTR ?VFormAhead@@3PAMA[edx*4]
	mulss	xmm1, DWORD PTR _trig$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 4073 : 			}
; 4074 : 			else {

	jmp	$LN9@GetVehicle
$LN10@GetVehicle:

; 4075 : 				float	right = CompanyFormations[1][simdata->campSlot/4].x + PlatoonFormations[3][simdata->campSlot%4].x + SquadFormations[2][simdata->inSlot].x;

	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	edx, 32					; 00000020H
	imul	edx, 3
	mov	esi, DWORD PTR _simdata$[ebp]
	mov	esi, DWORD PTR [esi+32]
	and	esi, -2147483645			; 80000003H
	jns	SHORT $LN63@GetVehicle
	dec	esi
	or	esi, -4					; fffffffcH
	inc	esi
$LN63@GetVehicle:
	movss	xmm0, DWORD PTR ?CompanyFormations@@3PAY03UAIOffsetType@@A[ecx+eax*8]
	addss	xmm0, DWORD PTR ?PlatoonFormations@@3PAY03UAIOffsetType@@A[edx+esi*8]
	mov	eax, 24					; 00000018H
	shl	eax, 1
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	addss	xmm0, DWORD PTR ?SquadFormations@@3PAY02UAIOffsetType@@A[eax+edx*8]
	movss	DWORD PTR _right$4[ebp], xmm0

; 4076 : 				float	ahead = CompanyFormations[1][simdata->campSlot/4].y + PlatoonFormations[3][simdata->campSlot%4].y + SquadFormations[2][simdata->inSlot].y;

	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	edx, 32					; 00000020H
	imul	edx, 3
	mov	esi, DWORD PTR _simdata$[ebp]
	mov	esi, DWORD PTR [esi+32]
	and	esi, -2147483645			; 80000003H
	jns	SHORT $LN64@GetVehicle
	dec	esi
	or	esi, -4					; fffffffcH
	inc	esi
$LN64@GetVehicle:
	movss	xmm0, DWORD PTR ?CompanyFormations@@3PAY03UAIOffsetType@@A[ecx+eax*8+4]
	addss	xmm0, DWORD PTR ?PlatoonFormations@@3PAY03UAIOffsetType@@A[edx+esi*8+4]
	mov	eax, 24					; 00000018H
	shl	eax, 1
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	addss	xmm0, DWORD PTR ?SquadFormations@@3PAY02UAIOffsetType@@A[eax+edx*8+4]
	movss	DWORD PTR _ahead$3[ebp], xmm0

; 4077 : 				simdata->x = simdata->x + right * trig.cos - ahead * trig.sin;

	movss	xmm0, DWORD PTR _right$4[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	mov	eax, DWORD PTR _simdata$[ebp]
	addss	xmm0, DWORD PTR [eax+56]
	movss	xmm1, DWORD PTR _ahead$3[ebp]
	mulss	xmm1, DWORD PTR _trig$[ebp]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 4078 : 				simdata->y = simdata->y + right * trig.sin - ahead * trig.cos;

	movss	xmm0, DWORD PTR _right$4[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	mov	edx, DWORD PTR _simdata$[ebp]
	addss	xmm0, DWORD PTR [edx+60]
	movss	xmm1, DWORD PTR _ahead$3[ebp]
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+60], xmm0
$LN9@GetVehicle:

; 4079 : 			}
; 4080 : 			simdata->ptIndex = 0;

	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+84], 0
$LN11@GetVehicle:

; 4081 : 		}
; 4082 : 	}
; 4083 : 
; 4084 : 
; 4085 : 	// Do weapon loadout
; 4086 : 	if (GetNumberOfLoadouts()-1 < simdata->vehicleInUnit){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+640]
	call	edx
	sub	eax, 1
	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	cmp	eax, edx
	jge	SHORT $LN8@GetVehicle

; 4087 : 		value = 1;

	mov	DWORD PTR _value$[ebp], 1

; 4088 : 	}
; 4089 : 	else {

	jmp	SHORT $LN7@GetVehicle
$LN8@GetVehicle:

; 4090 : 		value = simdata->vehicleInUnit;

	mov	eax, DWORD PTR _simdata$[ebp]
	movsx	ecx, WORD PTR [eax+42]
	mov	DWORD PTR _value$[ebp], ecx
$LN7@GetVehicle:

; 4091 : 	}
; 4092 : 	for (i=0; i<HARDPOINT_MAX; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@GetVehicle
$LN5@GetVehicle:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@GetVehicle:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN4@GetVehicle

; 4093 : 		simdata->weapon[i] = GetUnitWeaponId(i,value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+584]
	call	edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [edx+ecx*2+96], ax

; 4094 : 		if (simdata->weapon[i])

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+96]
	test	edx, edx
	je	SHORT $LN3@GetVehicle

; 4095 : 			simdata->weapons[i] = GetUnitWeaponCount(i,value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+588]
	call	edx
	mov	ecx, DWORD PTR _simdata$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+128], al

; 4096 : 		else

	jmp	SHORT $LN2@GetVehicle
$LN3@GetVehicle:

; 4097 : 			simdata->weapons[i] = 0;

	mov	edx, DWORD PTR _simdata$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+128], 0
$LN2@GetVehicle:

; 4098 : 	}

	jmp	SHORT $LN5@GetVehicle
$LN4@GetVehicle:

; 4099 : 
; 4100 : 	// JB 020122 Reset the fuel when entering a dogfight.
; 4101 : 	if (FalconLocalGame && FalconLocalGame->GetGameType() == game_Dogfight){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN57@GetVehicle
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv590[ebp], eax
	jmp	SHORT $LN58@GetVehicle
$LN57@GetVehicle:
	mov	DWORD PTR tv590[ebp], 0
$LN58@GetVehicle:
	cmp	DWORD PTR tv590[ebp], 0
	je	SHORT $LN1@GetVehicle
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@GetVehicle
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv604[ebp], eax
	jmp	SHORT $LN60@GetVehicle
$LN59@GetVehicle:
	mov	DWORD PTR tv604[ebp], 0
$LN60@GetVehicle:
	mov	ecx, DWORD PTR tv604[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 2
	jne	SHORT $LN1@GetVehicle

; 4102 : 		fuel_burnt = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
$LN1@GetVehicle:

; 4103 : 	}
; 4104 : 
; 4105 : 	// Determine actual fuel for this aircraft
; 4106 : 	simdata->fuel = CalculateFuelAvailable(value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 4107 : 
; 4108 : 	// Do waypoints
; 4109 : 	simdata->waypointList = CloneWPToList(GetFirstUnitWP(),NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	push	eax
	call	?CloneWPToList@@YAPAVWayPointClass@@PAV1@0@Z ; CloneWPToList
	add	esp, 8
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [edx+160], eax

; 4110 : 
; 4111 : 	return MOTION_AIR_AI;

	mov	eax, 131072				; 00020000H
$LN55@GetVehicle:

; 4112 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN65@GetVehicle:
	DD	$LN20@GetVehicle
	DD	$LN19@GetVehicle
$LN61@GetVehicle:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
?GetVehicleDeagData@FlightClass@@UAEHPAVSimInitDataClass@@H@Z ENDP ; FlightClass::GetVehicleDeagData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasAreaJamming@FlightClass@@UAEHXZ PROC		; FlightClass::HasAreaJamming
; _this$ = ecx

; 3889 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3890 : 	if (mission == AMIS_ECM)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+377]
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN1@HasAreaJam

; 3891 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@HasAreaJam
$LN1@HasAreaJam:

; 3892 : 	return FALSE;

	xor	eax, eax
$LN2@HasAreaJam:

; 3893 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasAreaJamming@FlightClass@@UAEHXZ ENDP		; FlightClass::HasAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasSPJamming@FlightClass@@UAEHXZ PROC			; FlightClass::HasSPJamming
; _this$ = ecx

; 3882 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3883 : 	if (GetUnitFlags() & U_HASECM)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitFlags@UnitClass@@QAEJXZ		; UnitClass::GetUnitFlags
	and	eax, 4096				; 00001000H
	je	SHORT $LN1@HasSPJammi

; 3884 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@HasSPJammi
$LN1@HasSPJammi:

; 3885 : 	return FALSE;

	xor	eax, eax
$LN2@HasSPJammi:

; 3886 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasSPJamming@FlightClass@@UAEHXZ ENDP			; FlightClass::HasSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAreaJamming@FlightClass@@UAEHXZ PROC			; FlightClass::IsAreaJamming
; _this$ = ecx

; 3871 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3872 : 	// JPO - change to basically jamming and active.
; 3873 : 	if (HasAreaJamming() && 
; 3874 : 			(eval_flags & FEVAL_ON_STATION)) // old test 2002-02-19 REINSTATED BY S.G. Fixed the eval_flags bug where the bit would not reset

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+280]
	call	eax
	test	eax, eax
	je	SHORT $LN1@IsAreaJamm
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+382]
	and	edx, 4
	je	SHORT $LN1@IsAreaJamm

; 3875 : 		//	    Moving() && 
; 3876 : 		//	    !IsDead())
; 3877 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@IsAreaJamm
$LN1@IsAreaJamm:

; 3878 : 	return FALSE;

	xor	eax, eax
$LN2@IsAreaJamm:

; 3879 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAreaJamming@FlightClass@@UAEHXZ ENDP			; FlightClass::IsAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSPJamming@FlightClass@@UAEHXZ PROC			; FlightClass::IsSPJamming
; _this$ = ecx

; 3864 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3865 : 	if (HasSPJamming() && (Engaged() || Locked() || GetUnitCurrentRole() == ARO_CA))

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+276]
	call	eax
	test	eax, eax
	je	SHORT $LN2@IsSPJammin
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	jne	SHORT $LN1@IsSPJammin
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Locked@UnitClass@@QAEHXZ		; UnitClass::Locked
	test	eax, eax
	jne	SHORT $LN1@IsSPJammin
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 1
	jne	SHORT $LN2@IsSPJammin
$LN1@IsSPJammin:

; 3866 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@IsSPJammin
$LN2@IsSPJammin:

; 3867 : 	return FALSE;

	xor	eax, eax
$LN3@IsSPJammin:

; 3868 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSPJamming@FlightClass@@UAEHXZ ENDP			; FlightClass::IsSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetRadarMode@FlightClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FlightClass@@UAEHXZ PROC			; FlightClass::GetRadarMode, COMDAT
; _this$ = ecx

; 158  : 		virtual int GetRadarMode (void)							{ return FEC_RADAR_SEARCH_100; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FlightClass@@UAEHXZ ENDP			; FlightClass::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_uc$ = -12						; size = 4
_dr$ = -8						; size = 4
_this$ = -4						; size = 4
_mt$ = 8						; size = 4
?GetDetectionRange@FlightClass@@UAEHH@Z PROC		; FlightClass::GetDetectionRange
; _this$ = ecx

; 3844 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3845 : 	int					dr;
; 3846 : 	UnitClassDataType*	uc = GetUnitClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$[ebp], eax

; 3847 : 
; 3848 : 	ShiAssert(uc);
; 3849 : 	// 2001-04-21 MODIFIED BY S.G. 
; 3850 : 	// ABOVE 250 HAS A NEW MEANING SO USE THE UNIT ELECTRONIC DETECTION RANGE INSTEAD...
; 3851 : 	//	dr = uc->Detection[mt];
; 3852 : 	dr = GetElectronicDetectionRange(mt);

	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+420]
	call	eax
	mov	DWORD PTR _dr$[ebp], eax

; 3853 : 	// 2001-03-15 MODIFIED BY S.G. WHY *8?!? 
; 3854 : 	// THIS BRINGS THE DETECTION RANGE FOR A F16C TO 128 KM!!! OTHER TYPE DON'T DO THIS ANYHOW...
; 3855 : 	//	if (dr < VisualDetectionRange[mt]*8)
; 3856 : 	//		dr = GetVisualDetectionRange(mt)*8;
; 3857 : 	if (dr < VisualDetectionRange[mt] * g_nFlightVisualBonus){

	mov	ecx, DWORD PTR _mt$[ebp]
	mov	edx, DWORD PTR ?VisualDetectionRange@@3PAHA[ecx*4]
	imul	edx, DWORD PTR ?g_nFlightVisualBonus@@3HA ; g_nFlightVisualBonus
	cmp	DWORD PTR _dr$[ebp], edx
	jge	SHORT $LN1@GetDetecti

; 3858 : 		dr = GetVisualDetectionRange(mt) * g_nFlightVisualBonus;

	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	call	?GetVisualDetectionRange@@YAHH@Z	; GetVisualDetectionRange
	add	esp, 4
	imul	eax, DWORD PTR ?g_nFlightVisualBonus@@3HA ; g_nFlightVisualBonus
	mov	DWORD PTR _dr$[ebp], eax
$LN1@GetDetecti:

; 3859 : 	}
; 3860 : 	return dr;

	mov	eax, DWORD PTR _dr$[ebp]

; 3861 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDetectionRange@FlightClass@@UAEHH@Z ENDP		; FlightClass::GetDetectionRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?IsFlight@FlightClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FlightClass@@UBEHXZ PROC			; FlightClass::IsFlight, COMDAT
; _this$ = ecx

; 156  : 		virtual int IsFlight() const							{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FlightClass@@UBEHXZ ENDP			; FlightClass::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?CombatTime@FlightClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatTime@FlightClass@@UAEKXZ PROC			; FlightClass::CombatTime, COMDAT
; _this$ = ecx

; 155  : 		virtual CampaignTime CombatTime (void)					{ return FLIGHT_COMBAT_CHECK_INTERVAL*CampaignSeconds; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR ?FLIGHT_COMBAT_CHECK_INTERVAL@@3FA ; FLIGHT_COMBAT_CHECK_INTERVAL
	imul	eax, 1000				; 000003e8H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatTime@FlightClass@@UAEKXZ ENDP			; FlightClass::CombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?MaxUpdateTime@FlightClass@@UBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxUpdateTime@FlightClass@@UBEKXZ PROC			; FlightClass::MaxUpdateTime, COMDAT
; _this$ = ecx

; 151  : 		virtual CampaignTime MaxUpdateTime() const				{ return FLIGHT_MOVE_CHECK_INTERVAL*CampaignSeconds; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR ?FLIGHT_MOVE_CHECK_INTERVAL@@3FA ; FLIGHT_MOVE_CHECK_INTERVAL
	imul	eax, 1000				; 000003e8H
	mov	esp, ebp
	pop	ebp
	ret	0
?MaxUpdateTime@FlightClass@@UBEKXZ ENDP			; FlightClass::MaxUpdateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_hp$ = -56						; size = 4
_vc$ = -52						; size = 4
_vehsPerRound$ = -48					; size = 4
_dropTwo$ = -44						; size = 4
_rounds$ = -40						; size = 4
_lhp$ = -36						; size = 4
_maxCount$ = -32					; size = 4
_next$ = -28						; size = 4
_bw$ = -24						; size = 4
_shots$ = -20						; size = 4
_bhp$ = -16						; size = 4
_i$ = -12						; size = 4
_ac$ = -8						; size = 4
_this$ = -4						; size = 4
_dam$ = 8						; size = 4
_m$ = 12						; size = 4
_w$ = 16						; size = 4
_wc$ = 20						; size = 4
_dist$ = 24						; size = 4
?CollectWeapons@FlightClass@@UAEHPAEW4MoveType@@QAFQAEH@Z PROC ; FlightClass::CollectWeapons
; _this$ = ecx

; 2850 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2851 : 	int		i,ac,bw,hp,bhp,lhp=0,maxCount,shots=1,dropTwo=0,next=0,vehsPerRound=1,rounds;

	mov	DWORD PTR _lhp$[ebp], 0
	mov	DWORD PTR _shots$[ebp], 1
	mov	DWORD PTR _dropTwo$[ebp], 0
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _vehsPerRound$[ebp], 1

; 2852 : 	VehicleClassDataType*	vc;
; 2853 : 
; 2854 : 	vc = GetVehicleClassData(class_data->VehicleType[0]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	mov	edx, 2
	imul	edx, 0
	movsx	eax, WORD PTR [ecx+edx+68]
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 2855 : 
; 2856 : 	// If we're shooting at a ground unit, take two shots for each vehicle if we can 
; 2857 : 	// (Must be two shots with same weapon type)
; 2858 : 	if (MOVE_GROUND(m) || m == NoMove)

	cmp	DWORD PTR _m$[ebp], 1
	je	SHORT $LN20@CollectWea
	cmp	DWORD PTR _m$[ebp], 2
	je	SHORT $LN20@CollectWea
	cmp	DWORD PTR _m$[ebp], 3
	je	SHORT $LN20@CollectWea
	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN21@CollectWea
$LN20@CollectWea:

; 2859 : 		dropTwo = TRUE;

	mov	DWORD PTR _dropTwo$[ebp], 1
$LN21@CollectWea:

; 2860 : 
; 2861 : 	rounds = GetNumberOfLoadouts();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+640]
	call	eax
	mov	DWORD PTR _rounds$[ebp], eax

; 2862 : 	if (rounds == 1)

	cmp	DWORD PTR _rounds$[ebp], 1
	jne	SHORT $LN19@CollectWea

; 2863 : 		vehsPerRound = GetTotalVehicles();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	DWORD PTR _vehsPerRound$[ebp], eax
$LN19@CollectWea:

; 2864 : 
; 2865 : 	// Now collect our weapons (per ac)
; 2866 : 	for (ac=0; ac<rounds; ac++)

	mov	DWORD PTR _ac$[ebp], 0
	jmp	SHORT $LN18@CollectWea
$LN17@CollectWea:
	mov	ecx, DWORD PTR _ac$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ac$[ebp], ecx
$LN18@CollectWea:
	mov	edx, DWORD PTR _ac$[ebp]
	cmp	edx, DWORD PTR _rounds$[ebp]
	jge	$LN16@CollectWea

; 2867 : 	{
; 2868 : 		if (plane_stats[ac] == AIRCRAFT_AVAILABLE || rounds == 1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _ac$[ebp]
	movzx	ecx, BYTE PTR [eax+416]
	cmp	ecx, 4
	je	SHORT $LN14@CollectWea
	cmp	DWORD PTR _rounds$[ebp], 1
	jne	$LN15@CollectWea
$LN14@CollectWea:

; 2869 : 		{
; 2870 : 			bw = GetBestVehicleWeapon(ac,dam,m,dist,&hp);

	lea	edx, DWORD PTR _hp$[ebp]
	push	edx
	mov	eax, DWORD PTR _dist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dam$[ebp]
	push	edx
	mov	eax, DWORD PTR _ac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+568]
	call	eax
	mov	DWORD PTR _bw$[ebp], eax

; 2871 : 			if (bw > 0)

	cmp	DWORD PTR _bw$[ebp], 0
	jle	$LN15@CollectWea

; 2872 : 			{
; 2873 : 				// Find the hardpoint with the most of this type of weapon)
; 2874 : 				for (i=0,bhp=0,maxCount=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _bhp$[ebp], 0
	mov	DWORD PTR _maxCount$[ebp], 0
	jmp	SHORT $LN12@CollectWea
$LN11@CollectWea:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@CollectWea:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN10@CollectWea

; 2875 : 				{
; 2876 : 					if (bw == loadout[ac].WeaponID[i] && loadout[ac].WeaponCount[i] > maxCount)

	mov	edx, DWORD PTR _ac$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	cmp	DWORD PTR _bw$[ebp], eax
	jne	SHORT $LN9@CollectWea
	mov	ecx, DWORD PTR _ac$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx+32]
	cmp	edx, DWORD PTR _maxCount$[ebp]
	jle	SHORT $LN9@CollectWea

; 2877 : 					{
; 2878 : 						maxCount = loadout[ac].WeaponCount[i];

	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+eax+32]
	mov	DWORD PTR _maxCount$[ebp], ecx

; 2879 : 						bhp = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _bhp$[ebp], edx
$LN9@CollectWea:

; 2880 : 					}
; 2881 : 					if (loadout[ac].WeaponID[i])

	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	test	ecx, ecx
	je	SHORT $LN8@CollectWea

; 2882 : 						lhp = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lhp$[ebp], edx
$LN8@CollectWea:

; 2883 : 				}

	jmp	$LN11@CollectWea
$LN10@CollectWea:

; 2884 : 				// Figure out how many to shoot
; 2885 : 				if (maxCount)

	cmp	DWORD PTR _maxCount$[ebp], 0
	je	$LN15@CollectWea

; 2886 : 				{
; 2887 : 					// 2001-05-01 MODIFIED BY S.G. SO VisibleFlags STATE IS REVERSED (SET IS EXTERNAL AND CLEARED IS INTERNAL)
; 2888 : 					//					if (bhp && (vc->VisibleFlags & (0x01 << bhp)))
; 2889 : 					if (bhp && !(vc->VisibleFlags & (0x01 << bhp)))

	cmp	DWORD PTR _bhp$[ebp], 0
	je	SHORT $LN6@CollectWea
	mov	eax, DWORD PTR _vc$[ebp]
	movzx	edx, WORD PTR [eax+62]
	mov	eax, 1
	mov	ecx, DWORD PTR _bhp$[ebp]
	shl	eax, cl
	and	edx, eax
	jne	SHORT $LN6@CollectWea

; 2890 : 						shots = maxCount;					// Bomb-bay - drop everything at once

	mov	ecx, DWORD PTR _maxCount$[ebp]
	mov	DWORD PTR _shots$[ebp], ecx
	jmp	SHORT $LN5@CollectWea
$LN6@CollectWea:

; 2891 : 					else if (GetWeaponFireRate(bw) <= maxCount)

	mov	edx, DWORD PTR _bw$[ebp]
	push	edx
	call	?GetWeaponFireRate@@YAHH@Z		; GetWeaponFireRate
	add	esp, 4
	cmp	eax, DWORD PTR _maxCount$[ebp]
	jg	SHORT $LN4@CollectWea

; 2892 : 						shots = GetWeaponFireRate(bw);		// Fire a volley

	mov	eax, DWORD PTR _bw$[ebp]
	push	eax
	call	?GetWeaponFireRate@@YAHH@Z		; GetWeaponFireRate
	add	esp, 4
	mov	DWORD PTR _shots$[ebp], eax

; 2893 : 					else

	jmp	SHORT $LN5@CollectWea
$LN4@CollectWea:

; 2894 : 						shots = 1;							// Drop one

	mov	DWORD PTR _shots$[ebp], 1
$LN5@CollectWea:

; 2895 : 					// Use up the ammo
; 2896 : 					loadout[ac].WeaponCount[bhp] -= shots;

	mov	ecx, DWORD PTR _ac$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _bhp$[ebp]
	movzx	edx, BYTE PTR [eax+ecx+32]
	sub	edx, DWORD PTR _shots$[ebp]
	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+372]
	mov	ecx, DWORD PTR _bhp$[ebp]
	mov	BYTE PTR [eax+ecx+32], dl

; 2897 : 					w[next] = bw;

	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	cx, WORD PTR _bw$[ebp]
	mov	WORD PTR [eax+edx*2], cx

; 2898 : 					wc[next] = shots*vehsPerRound;

	mov	edx, DWORD PTR _shots$[ebp]
	imul	edx, DWORD PTR _vehsPerRound$[ebp]
	mov	eax, DWORD PTR _wc$[ebp]
	add	eax, DWORD PTR _next$[ebp]
	mov	BYTE PTR [eax], dl

; 2899 : 					// Try to drop another bomb/weapon if we're loaded symetrically
; 2900 : 					// 2001-06-17 ADDED BY S.G. IF FIRING HARMS, ONLY ONE SHOT PER VEHICLE
; 2901 : 					if (WeaponDataTable[bw].GuidanceFlags & WEAP_ANTIRADATION)

	mov	ecx, DWORD PTR _bw$[ebp]
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	eax, WORD PTR [edx+ecx+42]
	and	eax, 1
	je	SHORT $LN2@CollectWea

; 2902 : 						dropTwo = FALSE;

	mov	DWORD PTR _dropTwo$[ebp], 0
$LN2@CollectWea:

; 2903 : 					// END OF ADDED SECTION
; 2904 : 					if (dropTwo && loadout[ac].WeaponID[lhp+1-bhp] == bw && loadout[ac].WeaponCount[lhp+1-bhp] >= shots)

	cmp	DWORD PTR _dropTwo$[ebp], 0
	je	$LN1@CollectWea
	mov	ecx, DWORD PTR _ac$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	mov	ecx, DWORD PTR _lhp$[ebp]
	add	ecx, 1
	sub	ecx, DWORD PTR _bhp$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	cmp	edx, DWORD PTR _bw$[ebp]
	jne	SHORT $LN1@CollectWea
	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _lhp$[ebp]
	add	eax, 1
	sub	eax, DWORD PTR _bhp$[ebp]
	movzx	ecx, BYTE PTR [edx+eax+32]
	cmp	ecx, DWORD PTR _shots$[ebp]
	jl	SHORT $LN1@CollectWea

; 2905 : 					{
; 2906 : 						wc[next] += shots*vehsPerRound;

	mov	edx, DWORD PTR _shots$[ebp]
	imul	edx, DWORD PTR _vehsPerRound$[ebp]
	mov	eax, DWORD PTR _wc$[ebp]
	add	eax, DWORD PTR _next$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _wc$[ebp]
	add	edx, DWORD PTR _next$[ebp]
	mov	BYTE PTR [edx], cl

; 2907 : 						loadout[ac].WeaponCount[lhp+1-bhp] -= shots;

	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _lhp$[ebp]
	add	eax, 1
	sub	eax, DWORD PTR _bhp$[ebp]
	movzx	ecx, BYTE PTR [edx+eax+32]
	sub	ecx, DWORD PTR _shots$[ebp]
	mov	edx, DWORD PTR _lhp$[ebp]
	add	edx, 1
	sub	edx, DWORD PTR _bhp$[ebp]
	mov	eax, DWORD PTR _ac$[ebp]
	imul	eax, 48					; 00000030H
	mov	esi, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [esi+372]
	mov	BYTE PTR [eax+edx+32], cl
$LN1@CollectWea:

; 2908 : 					}
; 2909 : 					next++;

	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
$LN15@CollectWea:

; 2910 : 				}
; 2911 : 			}
; 2912 : 		}
; 2913 : 	}

	jmp	$LN17@CollectWea
$LN16@CollectWea:

; 2914 : 	return 1;

	mov	eax, 1

; 2915 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?CollectWeapons@FlightClass@@UAEHPAEW4MoveType@@QAFQAEH@Z ENDP ; FlightClass::CollectWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?Real@FlightClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Real@FlightClass@@UAEHXZ PROC				; FlightClass::Real, COMDAT
; _this$ = ecx

; 148  : 		virtual int Real (void)									{ return 1; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?Real@FlightClass@@UAEHXZ ENDP				; FlightClass::Real
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_gridit$ = -692						; size = 60
_gridit$2 = -632					; size = 60
$T3 = -572						; size = 8
$T4 = -564						; size = 8
$T5 = -556						; size = 8
$T6 = -548						; size = 8
$T7 = -540						; size = 8
tv2441 = -532						; size = 8
_placeHolder$8 = -524					; size = 4
_myit$9 = -520						; size = 12
_detit$10 = -508					; size = 12
_sit$ = -496						; size = 12
_detit$11 = -484					; size = 12
$T12 = -472						; size = 4
_d$13 = -468						; size = 4
_d$14 = -464						; size = 4
_d$15 = -460						; size = 4
_range$16 = -456					; size = 4
_tstr$17 = -452						; size = 4
_rad$ = -448						; size = 4
tv2759 = -444						; size = 4
_air_search_dist$ = -440				; size = 4
$T18 = -436						; size = 4
$T19 = -432						; size = 4
_was_engaged$ = -428					; size = 4
tv480 = -424						; size = 4
tv846 = -420						; size = 4
$T20 = -416						; size = 4
tv1175 = -412						; size = 4
tv802 = -408						; size = 4
tv469 = -404						; size = 4
tv1885 = -400						; size = 4
tv910 = -396						; size = 4
$T21 = -392						; size = 4
tv2437 = -388						; size = 4
tv1874 = -384						; size = 4
_tstr$22 = -380						; size = 4
_x$23 = -376						; size = 2
_y$ = -372						; size = 2
_y$24 = -368						; size = 2
_y$25 = -364						; size = 2
_tx$26 = -360						; size = 2
_ty$27 = -356						; size = 2
_retval$ = -352						; size = 4
_ty$28 = -348						; size = 2
_flight$29 = -344					; size = 4
_y$30 = -340						; size = 2
_pack$31 = -336						; size = 4
_y$32 = -332						; size = 2
_i$33 = -328						; size = 4
_tx$34 = -324						; size = 2
_enemy$ = -320						; size = 4
_x$ = -316						; size = 2
_ground_search_dist$ = -312				; size = 4
_x$35 = -308						; size = 2
_nu$36 = -304						; size = 4
_tx$37 = -300						; size = 2
_tx$38 = -296						; size = 2
_x$39 = -292						; size = 2
_ty$40 = -288						; size = 2
_ty$41 = -284						; size = 2
_x$42 = -280						; size = 2
_enter$43 = -276					; size = 4
_ix$ = -272						; size = 4
_towardTarget$ = -268					; size = 4
_element$44 = -264					; size = 4
_undivert$45 = -260					; size = 4
_y2$46 = -256						; size = 2
_session$ = -252					; size = 4
_x2$47 = -248						; size = 2
_ostr$ = -244						; size = 4
_parent$48 = -240					; size = 4
_estr$ = -236						; size = 4
_player$49 = -232					; size = 4
_cf$50 = -228						; size = 4
_w$ = -224						; size = 4
_spot$ = -220						; size = 4
_msg$51 = -216						; size = 4
_i$ = -212						; size = 4
_best_reaction$ = -208					; size = 4
_react_distance$ = -204					; size = 4
_msg$52 = -200						; size = 4
_who$ = -193						; size = 1
_combat$ = -192						; size = 4
_old_target$ = -188					; size = 4
_react$ = -184						; size = 4
_mAWACSavail$53 = -177					; size = 1
_msg$54 = -176						; size = 4
_d$ = -172						; size = 4
_react_against$ = -168					; size = 4
_e$ = -164						; size = 4
_this$ = -160						; size = 4
_mis$55 = -156						; size = 76
_roea$ = -80						; size = 32
_roeg$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ChooseTarget@FlightClass@@UAEHXZ PROC			; FlightClass::ChooseTarget
; _this$ = ecx

; 1617 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ChooseTarget@FlightClass@@UAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 680				; 000002a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1618 : 	if (IsChecked() || !Final()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsChecked@CampBaseClass@@QAEHXZ	; CampBaseClass::IsChecked
	test	eax, eax
	jne	SHORT $LN109@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Final@UnitClass@@QBEHXZ		; UnitClass::Final
	test	eax, eax
	jne	SHORT $LN110@ChooseTarg
$LN109@ChooseTarg:

; 1619 : 		return Engaged();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	jmp	$LN111@ChooseTarg
$LN110@ChooseTarg:

; 1620 : 	}
; 1621 : 
; 1622 : 	if (GetUnitAltitude() == 0){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitAltitude@UnitClass@@QAEHXZ	; UnitClass::GetUnitAltitude
	test	eax, eax
	jne	SHORT $LN108@ChooseTarg

; 1623 : 		return 0;

	xor	eax, eax
	jmp	$LN111@ChooseTarg
$LN108@ChooseTarg:

; 1624 : 	}
; 1625 : 
; 1626 : 	FalconEntity		*old_target,*react_against=NULL;

	mov	DWORD PTR _react_against$[ebp], 0

; 1627 : 	CampEntity			e;
; 1628 : 	Team				who;
; 1629 : 	float				d,react_distance = 9999.0F; 

	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 1630 : 	int					react,enemy,best_reaction=1,combat,spot=0,i,ix,ostr,estr=0,was_engaged,retval=0;

	mov	DWORD PTR _best_reaction$[ebp], 1
	mov	DWORD PTR _spot$[ebp], 0
	mov	DWORD PTR _estr$[ebp], 0
	mov	DWORD PTR _retval$[ebp], 0

; 1631 : 	int					air_search_dist,ground_search_dist;
; 1632 : 	int					roeg[NUM_TEAMS],roea[NUM_TEAMS];
; 1633 : 	GridIndex			x,y;
; 1634 : 
; 1635 : 	who = GetTeam();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _who$[ebp], al

; 1636 : 	for (i=0; i<NUM_TEAMS; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN107@ChooseTarg
$LN106@ChooseTarg:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN107@ChooseTarg:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN105@ChooseTarg

; 1637 : 		roeg[i] = GetRoE(who,i,ROE_GROUND_FIRE);

	push	1
	movzx	edx, BYTE PTR _i$[ebp]
	push	edx
	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _roeg$[ebp+ecx*4], eax

; 1638 : 		roea[i] = GetRoE(who,i,ROE_AIR_FIRE);

	push	5
	movzx	edx, BYTE PTR _i$[ebp]
	push	edx
	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _roea$[ebp+ecx*4], eax

; 1639 : 	}

	jmp	SHORT $LN106@ChooseTarg
$LN105@ChooseTarg:

; 1640 : 
; 1641 : 	was_engaged = Engaged();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	mov	DWORD PTR _was_engaged$[ebp], eax

; 1642 : 	old_target = GetTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _old_target$[ebp], eax

; 1643 : 	ShiAssert(
; 1644 : 		!old_target || old_target->IsFlight() || old_target->IsBattalion() || 
; 1645 : 		old_target->IsTaskForce() || old_target->IsObjective() || old_target->IsAirplane()
; 1646 : 	);
; 1647 : 
; 1648 : 	SetEngaged(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1649 : 	SetCombat(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat

; 1650 : 	SetChecked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetChecked@CampBaseClass@@QAEXXZ	; CampBaseClass::SetChecked

; 1651 : 
; 1652 : 	// Choose which map to use
; 1653 : 	GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1654 : 	i = (y / MAP_RATIO)*MRX + (x / MAP_RATIO);

	movsx	eax, WORD PTR _y$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, eax
	imul	ecx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	eax, WORD PTR _x$[ebp]
	cdq
	mov	esi, 6
	idiv	esi
	add	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx

; 1655 : 	if (i < 0){

	jns	SHORT $LN104@ChooseTarg

; 1656 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN104@ChooseTarg:

; 1657 : 	}
; 1658 : 	// 2001-06-08 MODIFIED BY S.G. 
; 1659 : 	// USE SamMapSize INSTEAD SINCE RadarMapSize IS 0 UNTIL FIVE MINUTES INTO THE TE/CAMPAIGN
; 1660 : 	//	if (i > TheCampaign.RadarMapSize)
; 1661 : 	//		i = TheCampaign.RadarMapSize;
; 1662 : 	if (i > TheCampaign.SamMapSize){

	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+288
	jle	SHORT $LN103@ChooseTarg

; 1663 : 		i = TheCampaign.SamMapSize;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+288
	mov	DWORD PTR _i$[ebp], eax
$LN103@ChooseTarg:

; 1664 : 	}
; 1665 : 	if (who == FalconLocalSession->GetTeam()){

	movzx	esi, BYTE PTR _who$[ebp]
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN102@ChooseTarg

; 1666 : 		ix = 4;

	mov	DWORD PTR _ix$[ebp], 4

; 1667 : 	}
; 1668 : 	else {

	jmp	SHORT $LN101@ChooseTarg
$LN102@ChooseTarg:

; 1669 : 		ix = 0;

	mov	DWORD PTR _ix$[ebp], 0
$LN101@ChooseTarg:

; 1670 : 	}
; 1671 : 	if (GetMovementType() == Air){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+228]
	call	edx
	cmp	eax, 5
	jne	SHORT $LN100@ChooseTarg

; 1672 : 		ix += 2;

	mov	eax, DWORD PTR _ix$[ebp]
	add	eax, 2
	mov	DWORD PTR _ix$[ebp], eax
$LN100@ChooseTarg:

; 1673 : 	}
; 1674 : 	// Find enemy team
; 1675 : 	enemy = GetEnemyTeam(who);

	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	movzx	edx, al
	mov	DWORD PTR _enemy$[ebp], edx

; 1676 : 
; 1677 : 	// Check vs SAMs, if any
; 1678 : 	// KCK NOTE: Currently only SEAD ac will bother to engage Air Defenses
; 1679 : 	// 2001-06-07 MODIFIED BY S.G. SINCE I COMMENTED THE EmitterList QUERY BELOW, 
; 1680 : 	// LETS FORGET ABOUT THE SAM MAP WHICH IS NOT ACCURATE ANYWAY
; 1681 : 	// 2001-06-19 MODIFIED BY S.G. SEAD STRIKES AND ESCORTS GO IN, NOT JUST SEAD ESCORTS
; 1682 : 	//	if (GetUnitMission() == AMIS_SEADESCORT && (TheCampaign.SamMapData[i] >> ix) & 0x03)
; 1683 : 	if (GetUnitCurrentRole() == ARO_SEAD && (TheCampaign.SamMapData[i] >> ix) & 0x03){

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 7
	jne	$LN99@ChooseTarg
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _ix$[ebp]
	sar	edx, cl
	and	edx, 3
	je	$LN99@ChooseTarg

; 1684 : 		VuListIterator	detit(AirDefenseList);

	mov	eax, DWORD PTR ?AirDefenseList@@3PAVFalconPrivateList@@A ; AirDefenseList
	push	eax
	lea	ecx, DWORD PTR _detit$11[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1685 : 		e = (CampEntity)detit.GetFirst();

	lea	ecx, DWORD PTR _detit$11[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN98@ChooseTarg:

; 1686 : 		while (e){

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN97@ChooseTarg

; 1687 : 			/* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */
; 1688 : 			if ( !e->IsDead() && roeg[e->GetTeam()] == ROE_ALLOWED){						

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN84@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR _roeg$[ebp+ecx*4], 1
	jne	$LN84@ChooseTarg

; 1689 : 				// 2001-06-07 ADDED BY S.G. SO NON RADAR VEHICLE UNITS ARE NO LONGER A CANDIDATE FOR INCLUSION
; 1690 : 				// Don't use the emitting status since they can be on or off depending on AIDS. 
; 1691 : 				// Also, SAM can turn on their radar, then turn them back off
; 1692 : 				// Also, only battalion makes it to the AirDefenseList 
; 1693 : 				// so I can safely cast it as a battalion class
; 1694 : 				// Therefore, in its current version, check how many radar vehicles are left 
; 1695 : 				// (if the radar vehicle position is above 15, it's a AAA 
; 1696 : 				// so assume there is one until the unit is dead).
; 1697 : 				// 2001-06-19 MODIFIED BY S.G. SEAD STRIKES AND ESCORTS GO IN, 
; 1698 : 				// NOT JUST SEAD ESCORTS (SEE COMMENTS WITHIN FOR MORE DETAILS)
; 1699 : 				//if (((BattalionClass *)e)->class_data->RadarVehicle < 255 && 
; 1700 : 				// (((BattalionClass *)e)->class_data->RadarVehicle > 15 || 
; 1701 : 				// ((BattalionClass *)e)->GetNumVehicles(((BattalionClass *)e)->class_data->RadarVehicle)))
; 1702 : 				int enter = FALSE;

	mov	DWORD PTR _enter$43[ebp], 0

; 1703 : 
; 1704 : 				// Must have a radar vehicle (AAA even has more than one)
; 1705 : 				if (((BattalionClass *)e)->class_data->RadarVehicle < 255 && e->IsEmitting()){

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+236]
	movzx	ecx, BYTE PTR [eax+328]
	cmp	ecx, 255				; 000000ffH
	jge	$LN89@ChooseTarg
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+216]
	call	edx
	test	eax, eax
	je	$LN89@ChooseTarg

; 1706 : 					// If the radar vehicle index is less than 16, it's a SAM. 
; 1707 : 					// Check if it still has a radar vehicle
; 1708 : 					if (((BattalionClass *)e)->class_data->RadarVehicle < 16){

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	movzx	edx, BYTE PTR [ecx+328]
	cmp	edx, 16					; 00000010H
	jge	$LN94@ChooseTarg

; 1709 : 						if (((BattalionClass *)e)->GetNumVehicles(
; 1710 : 							((BattalionClass *)e)->class_data->RadarVehicle)
; 1711 : 						){

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	movzx	edx, BYTE PTR [ecx+328]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetNumVehicles@UnitClass@@QAEHH@Z	; UnitClass::GetNumVehicles
	test	eax, eax
	je	$LN92@ChooseTarg

; 1712 : 							GridIndex   x,y,tx,ty;
; 1713 : 							float       d; // VP_changes this definition should be removed
; 1714 : 							GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$25[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$42[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1715 : 							e->GetLocation(&tx,&ty);

	lea	edx, DWORD PTR _ty$28[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$34[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1716 : 							d = Distance(x,y,tx,ty);

	movzx	ecx, WORD PTR _ty$28[ebp]
	push	ecx
	movzx	edx, WORD PTR _tx$34[ebp]
	push	edx
	movzx	eax, WORD PTR _y$25[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$42[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$14[ebp]

; 1717 : 							if (d <= class_data->Range[e->GetMovementType()]){

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+236]
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	movzx	ecx, BYTE PTR [esi+eax+301]
	cvtsi2ss xmm0, ecx
	comiss	xmm0, DWORD PTR _d$14[ebp]
	jb	SHORT $LN92@ChooseTarg

; 1718 : 								enter = TRUE;

	mov	DWORD PTR _enter$43[ebp], 1
$LN92@ChooseTarg:

; 1719 : 							}
; 1720 : 						}
; 1721 : 					}
; 1722 : 					// If the radar vehicle index is more than 15, it's an AAA.
; 1723 : 					else {

	jmp	$LN89@ChooseTarg
$LN94@ChooseTarg:

; 1724 : 						// Only SEAD ESCORT deals with AAA
; 1725 : 						if (GetUnitMission() == AMIS_SEADESCORT){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+664]
	call	edx
	cmp	eax, 12					; 0000000cH
	jne	SHORT $LN89@ChooseTarg

; 1726 : 							// If the distance between us and the target is more than 18, we skip it
; 1727 : 							GridIndex   x,y,tx,ty;
; 1728 : 							float       d; // VP_changes this definition should be removed
; 1729 : 							GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$24[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$23[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1730 : 							e->GetLocation(&tx,&ty);

	lea	edx, DWORD PTR _ty$40[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$38[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1731 : 							d = Distance(x,y,tx,ty);

	movzx	ecx, WORD PTR _ty$40[ebp]
	push	ecx
	movzx	edx, WORD PTR _tx$38[ebp]
	push	edx
	movzx	eax, WORD PTR _y$24[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$23[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$15[ebp]

; 1732 : 							if (d <= 18){

	movss	xmm0, DWORD PTR __real@41900000
	comiss	xmm0, DWORD PTR _d$15[ebp]
	jb	SHORT $LN89@ChooseTarg

; 1733 : 								enter = TRUE;

	mov	DWORD PTR _enter$43[ebp], 1
$LN89@ChooseTarg:

; 1734 : 							}
; 1735 : 						}
; 1736 : 					}
; 1737 : 				}
; 1738 : 
; 1739 : 				if (enter){

	cmp	DWORD PTR _enter$43[ebp], 0
	je	$LN88@ChooseTarg

; 1740 : 					// END OF ADDED SECTION (EXCEPT FOR INDENTATION)
; 1741 : 					combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 1742 : 					// VP_changes here d should be determined
; 1743 : 					react = DetectVs(e, &d, &combat, &spot, &estr);

	lea	edx, DWORD PTR _estr$[ebp]
	push	edx
	lea	eax, DWORD PTR _spot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax

; 1744 : 					// 2001-06-26 ADDED BY S.G. SO NON EMITTING RADAR ARE 'TONED DOWN' 
; 1745 : 					// BUT MAKE SURE YOU DON'T TONE DOWN TO ZERO AND ITS DISTANCE IS ARTIFICIALLY INCREASED!
; 1746 : 					//					if (!e->IsEmitting()) {
; 1747 : 					//						if (react > 1)
; 1748 : 					//							react = react / 2;
; 1749 : 					//						d *= 1.5f;
; 1750 : 					//					}
; 1751 : 					// END OF ADDED SECTION
; 1752 : 					if (react >= best_reaction && d < react_distance){

	mov	ecx, DWORD PTR _react$[ebp]
	cmp	ecx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN87@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN87@ChooseTarg

; 1753 : 						best_reaction = react;

	mov	edx, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], edx

; 1754 : 						react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 1755 : 						react_against = e;

	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR _react_against$[ebp], eax

; 1756 : 						SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1757 : 						SetCombat(combat);

	mov	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN87@ChooseTarg:

; 1758 : 					}
; 1759 : 
; 1760 : 					if (spot){

	cmp	DWORD PTR _spot$[ebp], 0
	je	$LN86@ChooseTarg

; 1761 : 						// Send radio messages for new contacts
; 1762 : 						FalconRadioChatterMessage	*msg = new FalconRadioChatterMessage(Id(), FalconLocalGame);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T20[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN115@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN113@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv469[ebp], eax
	jmp	SHORT $LN114@ChooseTarg
$LN113@ChooseTarg:
	mov	DWORD PTR tv469[ebp], 0
$LN114@ChooseTarg:
	push	1
	mov	eax, DWORD PTR tv469[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T20[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv480[ebp], eax
	jmp	SHORT $LN116@ChooseTarg
$LN115@ChooseTarg:
	mov	DWORD PTR tv480[ebp], 0
$LN116@ChooseTarg:
	mov	ecx, DWORD PTR tv480[ebp]
	mov	DWORD PTR $T18[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T18[ebp]
	mov	DWORD PTR _msg$51[ebp], edx

; 1763 : 						msg->dataBlock.from = Id();

	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$51[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 1764 : 						msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _msg$51[ebp]
	mov	BYTE PTR [ecx+60], 1

; 1765 : 						msg->dataBlock.voice_id = ((Flight)this)->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	edx, DWORD PTR _msg$51[ebp]
	mov	BYTE PTR [edx+61], al

; 1766 : 						msg->dataBlock.message = rcSAMUP;

	mov	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _msg$51[ebp]
	mov	WORD PTR [ecx+62], ax

; 1767 : 						msg->dataBlock.edata[0] = ((Flight)this)->callsign_id;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _msg$51[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1768 : 						msg->dataBlock.edata[1] = ((Flight)this)->GetFlightLeadCallNumber();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ ; FlightClass::GetFlightLeadCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$51[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1769 : 						// JB/Marco 010117
; 1770 : 						// Type of Radar/SAM
; 1771 : 						msg->dataBlock.edata[2] = (short)(((Unit)e)->GetVehicleID(0));

	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _msg$51[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1772 : 						// Location of Radar/SAM
; 1773 : 						e->GetLocation(&msg->dataBlock.edata[3], &msg->dataBlock.edata[4]);

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _msg$51[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _msg$51[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1774 : 						FalconSendMessage(msg, FALSE);

	push	0
	mov	eax, DWORD PTR _msg$51[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN86@ChooseTarg:

; 1775 : 						// JB/Marco 010117
; 1776 : 					}
; 1777 : 					// 2001-06-07 ADDED BY S.G. FORGET ABOUT THIS RADAR IF IT IS NOW DEAD
; 1778 : 				}

	jmp	SHORT $LN84@ChooseTarg
$LN88@ChooseTarg:

; 1779 : 				else if (old_target == e){

	mov	ecx, DWORD PTR _old_target$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	jne	SHORT $LN84@ChooseTarg

; 1780 : 					old_target = NULL;

	mov	DWORD PTR _old_target$[ebp], 0
$LN84@ChooseTarg:

; 1781 : 				}
; 1782 : 				// END OF ADDED SECTION (EXCEPT FOR INDENTATION
; 1783 : 			}
; 1784 : 			e = (CampEntity)detit.GetNext();

	lea	ecx, DWORD PTR _detit$11[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 1785 : 		}

	jmp	$LN98@ChooseTarg
$LN97@ChooseTarg:

; 1786 : 
; 1787 : 		// 2001-10-24 ADDED BY S.G. It's possible that our 'AirDefenseList' 
; 1788 : 		// got updated before we had a chance to finish our attack which can 
; 1789 : 		// potentially result in the unit being removed from the 'AirDefenseList'. 
; 1790 : 		// Because of this, old_target will not get cleared. Check now to make sure it is still valid...
; 1791 : 		if (
; 1792 : 			old_target && old_target->IsBattalion() && 
; 1793 : 			((BattalionClass *)old_target)->class_data->RadarVehicle < 16 && 
; 1794 : 			((BattalionClass *)old_target)->GetNumVehicles(
; 1795 : 				((BattalionClass *)old_target)->class_data->RadarVehicle
; 1796 : 			) == 0
; 1797 : 		){

	cmp	DWORD PTR _old_target$[ebp], 0
	je	SHORT $LN83@ChooseTarg
	mov	edx, DWORD PTR _old_target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _old_target$[ebp]
	mov	edx, DWORD PTR [eax+240]
	call	edx
	test	eax, eax
	je	SHORT $LN83@ChooseTarg
	mov	eax, DWORD PTR _old_target$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	movzx	edx, BYTE PTR [ecx+328]
	cmp	edx, 16					; 00000010H
	jge	SHORT $LN83@ChooseTarg
	mov	eax, DWORD PTR _old_target$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	movzx	edx, BYTE PTR [ecx+328]
	push	edx
	mov	ecx, DWORD PTR _old_target$[ebp]
	call	?GetNumVehicles@UnitClass@@QAEHH@Z	; UnitClass::GetNumVehicles
	test	eax, eax
	jne	SHORT $LN83@ChooseTarg

; 1798 : 			old_target = NULL;

	mov	DWORD PTR _old_target$[ebp], 0
$LN83@ChooseTarg:

; 1799 : 		}
; 1800 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _detit$11[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN99@ChooseTarg:

; 1801 : 
; 1802 : 
; 1803 : 	// Check vs other aircraft (over the air radius)
; 1804 : 	air_search_dist = GetDetectionRange(Air);

	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+416]
	call	eax
	mov	DWORD PTR _air_search_dist$[ebp], eax

; 1805 : 	//Cobra, we let DB tell us what is reasonable; See if this helps AI detect father out
; 1806 : 	/*if (air_search_dist > MAX_AIR_SEARCH && GetUnitMission() != AMIS_AWACS)
; 1807 : 	  air_search_dist = MAX_AIR_SEARCH;	*/	// Reasonable max search distance for non-awacs flights
; 1808 : 	BIG_SCALAR rad = GridToSim(air_search_dist);

	movzx	ecx, WORD PTR _air_search_dist$[ebp]
	push	ecx
	call	?GridToSim@@YAMF@Z			; GridToSim
	add	esp, 4
	fstp	DWORD PTR _rad$[ebp]

; 1809 : #ifdef VU_GRID_TREE_Y_MAJOR
; 1810 : 	VuGridIterator	gridit(RealUnitProxList, YPos(), XPos(), rad);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	edx
	lea	ecx, DWORD PTR _gridit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1811 : #else
; 1812 : 	VuGridIterator	gridit(RealUnitProxList, XPos(), YPos(), rad);
; 1813 : #endif
; 1814 : 
; 1815 : 	e = (CampEntity)gridit.GetFirst();

	lea	ecx, DWORD PTR _gridit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN82@ChooseTarg:

; 1816 : 	while (e){

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN81@ChooseTarg

; 1817 : 
; 1818 : 		if (
; 1819 : 			/* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ !e->IsDead() && /* END OF ADDED SECTION */
; 1820 : 			e->IsFlight() && roea[e->GetTeam()] == ROE_ALLOWED && ((Unit)e)->Moving() && e != this
; 1821 : 			// ((Unit)e)->current_wp > 1)
; 1822 : 		){ 

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN61@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN61@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR _roea$[ebp+ecx*4], 1
	jne	$LN61@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	je	$LN61@ChooseTarg
	mov	edx, DWORD PTR _e$[ebp]
	cmp	edx, DWORD PTR _this$[ebp]
	je	$LN61@ChooseTarg

; 1823 : 			combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 1824 : 			react = DetectVs(e, &d, &combat, &spot, &estr);

	lea	eax, DWORD PTR _estr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _spot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _combat$[ebp]
	push	edx
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax

; 1825 : 			if (react >= best_reaction && d < react_distance){

	mov	edx, DWORD PTR _react$[ebp]
	cmp	edx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN79@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN79@ChooseTarg

; 1826 : 				best_reaction = react;

	mov	eax, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], eax

; 1827 : 				react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 1828 : 				react_against = e;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _react_against$[ebp], ecx

; 1829 : 				SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1830 : 				SetCombat(combat);

	mov	edx, DWORD PTR _combat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN79@ChooseTarg:

; 1831 : 			}
; 1832 : 
; 1833 : 			if (spot || d <70.0f && LastawackWarning + 20000.0f < SimLibElapsedTime){

	cmp	DWORD PTR _spot$[ebp], 0
	jne	SHORT $LN77@ChooseTarg
	movss	xmm0, DWORD PTR __real@428c0000
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	$LN61@ChooseTarg
	cvtsi2ss xmm0, DWORD PTR ?LastawackWarning@@3JA	; LastawackWarning
	addss	xmm0, DWORD PTR __real@469c4000
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv2437[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv2437[ebp]
	mov	ecx, DWORD PTR tv2437[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv2441[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv2441[ebp]
	comiss	xmm1, xmm0
	jbe	$LN61@ChooseTarg
$LN77@ChooseTarg:

; 1834 : 				//me123 addet || check
; 1835 : 				// Send radio messages for new contacts
; 1836 : 				FalconRadioChatterMessage	*msg = NULL;

	mov	DWORD PTR _msg$54[ebp], 0

; 1837 : 
; 1838 : 				bool mAWACSavail = false;

	mov	BYTE PTR _mAWACSavail$53[ebp], 0

; 1839 : 
; 1840 : 				if (!g_bAWACSRequired || GetFlightController()){

	movzx	edx, BYTE PTR ?g_bAWACSRequired@@3_NA	; g_bAWACSRequired
	test	edx, edx
	je	SHORT $LN75@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	test	eax, eax
	je	SHORT $LN76@ChooseTarg
$LN75@ChooseTarg:

; 1841 : 					mAWACSavail = true; // We've a flight controller

	mov	BYTE PTR _mAWACSavail$53[ebp], 1
$LN76@ChooseTarg:

; 1842 : 				}
; 1843 : 
; 1844 : 				// MN - if we don't have a flight controller but require AWACS,
; 1845 : 				// check if there's an AWACS at all...
; 1846 : 				if (!mAWACSavail){

	movzx	eax, BYTE PTR _mAWACSavail$53[ebp]
	test	eax, eax
	jne	$LN74@ChooseTarg

; 1847 : 					Unit nu, cf;
; 1848 : 					VuListIterator myit(AllAirList);

	mov	ecx, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	ecx
	lea	ecx, DWORD PTR _myit$9[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1849 : 					nu = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$9[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _nu$36[ebp], eax
$LN138@ChooseTarg:

; 1850 : 					while (nu && !mAWACSavail){

	cmp	DWORD PTR _nu$36[ebp], 0
	je	$LN72@ChooseTarg
	movzx	edx, BYTE PTR _mAWACSavail$53[ebp]
	test	edx, edx
	jne	$LN72@ChooseTarg

; 1851 : 						cf = nu;

	mov	eax, DWORD PTR _nu$36[ebp]
	mov	DWORD PTR _cf$50[ebp], eax

; 1852 : 						nu = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$9[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nu$36[ebp], eax

; 1853 : 						if (!cf->IsFlight() || cf->IsDead()){

	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN70@ChooseTarg
	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	je	SHORT $LN71@ChooseTarg
$LN70@ChooseTarg:

; 1854 : 							continue;

	jmp	SHORT $LN138@ChooseTarg
$LN71@ChooseTarg:

; 1855 : 						}
; 1856 : 						if (cf->GetUnitMission() == AMIS_AWACS && cf->GetTeam() == GetTeam()){

	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 26					; 0000001aH
	jne	SHORT $LN69@ChooseTarg
	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$50[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN69@ChooseTarg

; 1857 : 							mAWACSavail = true;

	mov	BYTE PTR _mAWACSavail$53[ebp], 1
$LN69@ChooseTarg:

; 1858 : 						}
; 1859 : 					}

	jmp	$LN138@ChooseTarg
$LN72@ChooseTarg:

; 1860 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _myit$9[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN74@ChooseTarg:

; 1861 : 
; 1862 : 				if (GetUnitMission() == AMIS_AWACS){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+664]
	call	edx
	cmp	eax, 26					; 0000001aH
	jne	$LN68@ChooseTarg

; 1863 : 					if (((Unit)e)->GetCurrentWaypoint() < 3){

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetCurrentWaypoint@UnitClass@@QAEGXZ	; UnitClass::GetCurrentWaypoint
	movzx	eax, ax
	cmp	eax, 3
	jge	$LN67@ChooseTarg

; 1864 : 						msg = CreateCallFromAwacs (this, rcENEMYLAUNCH, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN117@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv802[ebp], eax
	jmp	SHORT $LN118@ChooseTarg
$LN117@ChooseTarg:
	mov	DWORD PTR tv802[ebp], 0
$LN118@ChooseTarg:
	mov	edx, DWORD PTR tv802[ebp]
	push	edx
	push	57					; 00000039H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$54[ebp], eax

; 1865 : 						e->GetLocation(&msg->dataBlock.edata[4], &msg->dataBlock.edata[5]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _msg$54[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _msg$54[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1866 : 						msg->dataBlock.edata[2] = -1; // Just say a general warning message, not

	mov	ecx, 2
	shl	ecx, 1
	or	edx, -1
	mov	eax, DWORD PTR _msg$54[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 1867 : 						msg->dataBlock.edata[3] = -1; // AWACS warning another AWACS...

	mov	ecx, 2
	imul	ecx, 3
	or	edx, -1
	mov	eax, DWORD PTR _msg$54[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 1868 : 					}
; 1869 : 					else {

	jmp	$LN66@ChooseTarg
$LN67@ChooseTarg:

; 1870 : 						msg = CreateCallFromAwacs (this, rcBVRTHREATWARN, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN119@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv846[ebp], eax
	jmp	SHORT $LN120@ChooseTarg
$LN119@ChooseTarg:
	mov	DWORD PTR tv846[ebp], 0
$LN120@ChooseTarg:
	mov	edx, DWORD PTR tv846[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$54[ebp], eax

; 1871 : 						e->GetLocation(&msg->dataBlock.edata[4], &msg->dataBlock.edata[5]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _msg$54[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _msg$54[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1872 : 						msg->dataBlock.edata[6] = ((Unit)e)->GetUnitAltitude();

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetUnitAltitude@UnitClass@@QAEHXZ	; UnitClass::GetUnitAltitude
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _msg$54[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1873 : 						msg->dataBlock.edata[2] = -1; // Just say a general warning message, not

	mov	eax, 2
	shl	eax, 1
	or	ecx, -1
	mov	edx, DWORD PTR _msg$54[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 1874 : 						msg->dataBlock.edata[3] = -1; // AWACS warning another AWACS...

	mov	eax, 2
	imul	eax, 3
	or	ecx, -1
	mov	edx, DWORD PTR _msg$54[ebp]
	mov	WORD PTR [edx+eax+64], cx
$LN66@ChooseTarg:

; 1875 : 					}

	jmp	$LN62@ChooseTarg
$LN68@ChooseTarg:

; 1876 : 				}
; 1877 : 				else if (GetTotalVehicles() > 0 && mAWACSavail)		//me123 from 1

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	test	eax, eax
	jle	$LN62@ChooseTarg
	movzx	eax, BYTE PTR _mAWACSavail$53[ebp]
	test	eax, eax
	je	$LN62@ChooseTarg

; 1878 : 				{
; 1879 : 					//me123 multichanges here
; 1880 : 					msg = CreateCallFromAwacs (this, rcBVRTHREATWARN, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN121@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv910[ebp], eax
	jmp	SHORT $LN122@ChooseTarg
$LN121@ChooseTarg:
	mov	DWORD PTR tv910[ebp], 0
$LN122@ChooseTarg:
	mov	edx, DWORD PTR tv910[ebp]
	push	edx
	push	33					; 00000021H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$54[ebp], eax

; 1881 : 					e->GetLocation(&msg->dataBlock.edata[4], &msg->dataBlock.edata[5]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _msg$54[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _msg$54[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1882 : 					msg->dataBlock.edata[6] = ((Unit)e)->GetUnitAltitude();	

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetUnitAltitude@UnitClass@@QAEHXZ	; UnitClass::GetUnitAltitude
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _msg$54[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1883 : 					LastawackWarning = SimLibElapsedTime;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR ?LastawackWarning@@3JA, eax	; LastawackWarning

; 1884 : 					RequestIntercept((Flight)this, enemy);//Cobra Let Awacs request Intercepts

	push	0
	mov	ecx, DWORD PTR _enemy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ; RequestIntercept
	add	esp, 12					; 0000000cH

; 1885 : 
; 1886 : 					if(GetFlightController()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	test	eax, eax
	je	SHORT $LN63@ChooseTarg

; 1887 : 						msg->dataBlock.from = GetFlightController()->Id();

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$54[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 1888 : 						msg->dataBlock.voice_id = (uchar)(GetFlightController())->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	ecx, eax
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	ecx, DWORD PTR _msg$54[ebp]
	mov	BYTE PTR [ecx+61], al

; 1889 : 						msg->dataBlock.edata[2] = (GetFlightController())->callsign_id;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	movzx	dx, BYTE PTR [eax+425]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _msg$54[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 1890 : 					}
; 1891 : 					else {

	jmp	SHORT $LN62@ChooseTarg
$LN63@ChooseTarg:

; 1892 : 						msg->dataBlock.from = FalconNullId;

	mov	edx, DWORD PTR _msg$54[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+52], ecx

; 1893 : 						msg->dataBlock.voice_id = GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	edx, DWORD PTR _msg$54[ebp]
	mov	BYTE PTR [edx+61], al

; 1894 : 						msg->dataBlock.edata[2] = gDefaultAWACSCallSign;

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _msg$54[ebp]
	mov	dx, WORD PTR ?gDefaultAWACSCallSign@@3FA ; gDefaultAWACSCallSign
	mov	WORD PTR [ecx+eax+64], dx
$LN62@ChooseTarg:

; 1895 : 					}
; 1896 : 				}
; 1897 : 
; 1898 : 				if (msg){

	cmp	DWORD PTR _msg$54[ebp], 0
	je	SHORT $LN61@ChooseTarg

; 1899 : 					FalconSendMessage(msg, FALSE);

	push	0
	mov	eax, DWORD PTR _msg$54[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN61@ChooseTarg:

; 1900 : 				}
; 1901 : 			}
; 1902 : 		}
; 1903 : 		e = (CampEntity)gridit.GetNext();

	lea	ecx, DWORD PTR _gridit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 1904 : 	}

	jmp	$LN82@ChooseTarg
$LN81@ChooseTarg:

; 1905 : 
; 1906 : 	// Check vs Waypoint target, if any
; 1907 : 	WayPoint w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1908 : 	// 2001-06-17 MODIFIED BY S.G. SO WE CHECK THE NEXT WAYPOINT IN CASE 
; 1909 : 	// THE DISTANCE BETWEEN THIS WAYPOINT AND TARGET WAYPOINT (NEXT ONE) IS TOO SHORT
; 1910 : 	//	if (w && w->GetWPFlags() & WPF_TARGET)
; 1911 : 	// 2001-10-19 ADDED BY S.G. Don't check range if flying toward the attack waypoint (weird way of doing it)
; 1912 : 	int towardTarget = TRUE;

	mov	DWORD PTR _towardTarget$[ebp], 1

; 1913 : 	if (
; 1914 : 		w && ((w->GetWPFlags() & WPF_TARGET) || 
; 1915 : 		((w = w->GetNextWP()) && (w->GetWPFlags() & WPF_TARGET) && !(towardTarget = FALSE)))
; 1916 : 	){

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN53@ChooseTarg
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	jne	SHORT $LN59@ChooseTarg
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax
	cmp	DWORD PTR _w$[ebp], 0
	je	$LN53@ChooseTarg
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	je	$LN53@ChooseTarg
	mov	DWORD PTR _towardTarget$[ebp], 0
	cmp	DWORD PTR _towardTarget$[ebp], 0
	jne	$LN53@ChooseTarg
$LN59@ChooseTarg:

; 1917 : 		if (!towardTarget){

	cmp	DWORD PTR _towardTarget$[ebp], 0
	jne	SHORT $LN58@ChooseTarg

; 1918 : 			GridIndex   x,y,tx,ty;
; 1919 : 			float       d = 0.0F; // this is temporary change only to run application

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _d$13[ebp], xmm0

; 1920 : 			GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$32[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$39[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1921 : 			w->GetWPLocation(&tx,&ty);

	lea	eax, DWORD PTR _ty$41[ebp]
	push	eax
	lea	ecx, DWORD PTR _tx$26[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1922 : 			d = Distance(x,y,tx,ty);

	movzx	edx, WORD PTR _ty$41[ebp]
	push	edx
	movzx	eax, WORD PTR _tx$26[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$32[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$39[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$13[ebp]
$LN58@ChooseTarg:

; 1923 : 		}
; 1924 : 
; 1925 : 		e = w->GetWPTarget();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _e$[ebp], eax

; 1926 : 		// VP_changes Oct 1:Run-Time Check Failure #3 - The variable 'd' is being used without being defined.
; 1927 : 
; 1928 : 		GridIndex   x,y,tx,ty;
; 1929 : 		GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$30[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$35[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1930 : 		w->GetWPLocation(&tx,&ty);

	lea	edx, DWORD PTR _ty$27[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1931 : 		d = Distance(x,y,tx,ty);

	movzx	ecx, WORD PTR _ty$27[ebp]
	push	ecx
	movzx	edx, WORD PTR _tx$37[ebp]
	push	edx
	movzx	eax, WORD PTR _y$30[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$35[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1932 : 
; 1933 : 		if (e && (towardTarget || d > class_data->Range[e->GetMovementType()])){

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN53@ChooseTarg
	cmp	DWORD PTR _towardTarget$[ebp], 0
	jne	SHORT $LN56@ChooseTarg
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+236]
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	movzx	ecx, BYTE PTR [esi+eax+301]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR _d$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN53@ChooseTarg
$LN56@ChooseTarg:

; 1934 : 			// END OF MODIFIED SECTION (EXCEPT FOR BLOCK INDENTATION)
; 1935 : 			Unit		parent = NULL;

	mov	DWORD PTR _parent$48[ebp], 0

; 1936 : 			int			element = 0;

	mov	DWORD PTR _element$44[ebp], 0

; 1937 : 			//			e = w->GetWPTarget();  // S.G. DONE ABOVE
; 1938 : 
; 1939 : 			if (e && e->IsUnit() && ((Unit)e)->Father()){	

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN55@ChooseTarg
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	SHORT $LN55@ChooseTarg
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+504]
	call	eax
	test	eax, eax
	je	SHORT $LN55@ChooseTarg

; 1940 : 				// Check vs each element in a father unit
; 1941 : 				parent = (Unit)e;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _parent$48[ebp], ecx

; 1942 : 				e = parent->GetUnitElement(element);

	mov	edx, DWORD PTR _element$44[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$48[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent$48[ebp]
	mov	eax, DWORD PTR [edx+888]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN55@ChooseTarg:

; 1943 : 			}
; 1944 : 			
; 1945 : 			while (e && roeg[e->GetTeam()] == ROE_ALLOWED){

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN53@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR _roeg$[ebp+ecx*4], 1
	jne	$LN53@ChooseTarg

; 1946 : 				// 2001-06-11 ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED
; 1947 : 				if (!e->IsDead()){

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+212]
	call	edx
	test	eax, eax
	jne	$LN51@ChooseTarg

; 1948 : 					// END OF ADDED SECTION (EXCEPT FOR BLOCK INDENTATION)
; 1949 : 					combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 1950 : 					react = DetectVs(e, &d, &combat, &spot, &estr);

	lea	eax, DWORD PTR _estr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _spot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _combat$[ebp]
	push	edx
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax

; 1951 : 					if (react >= best_reaction && d < react_distance){

	mov	edx, DWORD PTR _react$[ebp]
	cmp	edx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN51@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN51@ChooseTarg

; 1952 : 						best_reaction = react;

	mov	eax, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], eax

; 1953 : 						react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 1954 : 						react_against = e;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _react_against$[ebp], ecx

; 1955 : 						SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1956 : 						SetCombat(combat);

	mov	edx, DWORD PTR _combat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN51@ChooseTarg:

; 1957 : 					}
; 1958 : 				}
; 1959 : 
; 1960 : 				if (parent){

	cmp	DWORD PTR _parent$48[ebp], 0
	je	SHORT $LN50@ChooseTarg

; 1961 : 					element++;

	mov	eax, DWORD PTR _element$44[ebp]
	add	eax, 1
	mov	DWORD PTR _element$44[ebp], eax

; 1962 : 					e = parent->GetUnitElement(element);

	mov	ecx, DWORD PTR _element$44[ebp]
	push	ecx
	mov	edx, DWORD PTR _parent$48[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _parent$48[ebp]
	mov	edx, DWORD PTR [eax+888]
	call	edx
	mov	DWORD PTR _e$[ebp], eax

; 1963 : 				}
; 1964 : 				else {

	jmp	SHORT $LN49@ChooseTarg
$LN50@ChooseTarg:

; 1965 : 					e = NULL;

	mov	DWORD PTR _e$[ebp], 0
$LN49@ChooseTarg:

; 1966 : 				}
; 1967 : 			}

	jmp	$LN55@ChooseTarg
$LN53@ChooseTarg:

; 1968 : 			/* S.G.*/	
; 1969 : 		}
; 1970 : 	}
; 1971 : 
; 1972 : 	// Check vs all players
; 1973 : 	FalconSessionEntity		*session;
; 1974 : 	VuSessionsIterator		sit(FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN123@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv1175[ebp], eax
	jmp	SHORT $LN124@ChooseTarg
$LN123@ChooseTarg:
	mov	DWORD PTR tv1175[ebp], 0
$LN124@ChooseTarg:
	mov	ecx, DWORD PTR tv1175[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sit$[ebp]
	call	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z ; VuSessionsIterator::VuSessionsIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1975 : 	session = (FalconSessionEntity*) sit.GetFirst();

	lea	ecx, DWORD PTR _sit$[ebp]
	call	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetFirst
	mov	DWORD PTR _session$[ebp], eax
$LN48@ChooseTarg:

; 1976 : 	while (session){

	cmp	DWORD PTR _session$[ebp], 0
	je	$LN47@ChooseTarg

; 1977 : 		AircraftClass	*player = (AircraftClass*) session->GetPlayerEntity();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	mov	DWORD PTR _player$49[ebp], eax

; 1978 : 		if (player && /* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ !player->IsDead() && /* END OF ADDED SECTION */ session->GetTeam() < NUM_TEAMS && roea[session->GetTeam()] == ROE_ALLOWED && player->IsAirplane())

	cmp	DWORD PTR _player$49[ebp], 0
	je	$LN45@ChooseTarg
	mov	edx, DWORD PTR _player$49[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _player$49[ebp]
	mov	edx, DWORD PTR [eax+340]
	call	edx
	test	eax, eax
	jne	$LN45@ChooseTarg
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	cmp	eax, 8
	jge	$LN45@ChooseTarg
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	cmp	DWORD PTR _roea$[ebp+ecx*4], 1
	jne	$LN45@ChooseTarg
	mov	edx, DWORD PTR _player$49[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _player$49[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	$LN45@ChooseTarg

; 1979 : 		{
; 1980 : 			combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 1981 : 			react = DetectVs(player, &d, &combat, &spot, &estr);

	lea	eax, DWORD PTR _estr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _spot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _combat$[ebp]
	push	edx
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _player$49[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax

; 1982 : 			if (react >= best_reaction && d < react_distance)

	mov	edx, DWORD PTR _react$[ebp]
	cmp	edx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN45@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN45@ChooseTarg

; 1983 : 			{
; 1984 : 				best_reaction = react;

	mov	eax, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], eax

; 1985 : 				react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 1986 : 				react_against = player;

	mov	ecx, DWORD PTR _player$49[ebp]
	mov	DWORD PTR _react_against$[ebp], ecx

; 1987 : 				SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1988 : 				SetCombat(combat);

	mov	edx, DWORD PTR _combat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN45@ChooseTarg:

; 1989 : 			}
; 1990 : 		}
; 1991 : 		session = (FalconSessionEntity*) sit.GetNext();

	lea	ecx, DWORD PTR _sit$[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _session$[ebp], eax

; 1992 : 	}

	jmp	$LN48@ChooseTarg
$LN47@ChooseTarg:

; 1993 : 
; 1994 : 	// Check vs ground units, if we're of a valid mission type
; 1995 : 	if (
; 1996 : 		(GetUnitMission() == AMIS_JSTAR || GetUnitCurrentRole() == ARO_GA || GetUnitCurrentRole() == ARO_FAC)
; 1997 : 		/*&& !react_against*/ 
; 1998 : 	){

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 27					; 0000001bH
	je	SHORT $LN43@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 4
	je	SHORT $LN43@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 15					; 0000000fH
	jne	$LN44@ChooseTarg
$LN43@ChooseTarg:

; 1999 : 		ground_search_dist = GetDetectionRange(Tracked);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+416]
	call	eax
	mov	DWORD PTR _ground_search_dist$[ebp], eax

; 2000 : 		if (ground_search_dist > MAX_GROUND_SEARCH && GetUnitMission() != AMIS_JSTAR)

	movsx	ecx, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	cmp	DWORD PTR _ground_search_dist$[ebp], ecx
	jle	SHORT $LN42@ChooseTarg
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+664]
	call	edx
	cmp	eax, 27					; 0000001bH
	je	SHORT $LN42@ChooseTarg

; 2001 : 			ground_search_dist = MAX_GROUND_SEARCH;		// Reasonable max search distance for non-awacs flights

	movsx	eax, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	mov	DWORD PTR _ground_search_dist$[ebp], eax
$LN42@ChooseTarg:

; 2002 : #ifdef VU_GRID_TREE_Y_MAJOR
; 2003 : 		VuGridIterator	gridit(RealUnitProxList, YPos(), XPos(), (BIG_SCALAR)GridToSim(ground_search_dist));

	movzx	ecx, WORD PTR _ground_search_dist$[ebp]
	push	ecx
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	edx
	lea	ecx, DWORD PTR _gridit$2[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 2004 : #else
; 2005 : 		VuGridIterator	gridit(RealUnitProxList, XPos(), YPos(), (BIG_SCALAR)GridToSim(ground_search_dist));
; 2006 : #endif
; 2007 : 		e = (CampEntity)gridit.GetFirst();

	lea	ecx, DWORD PTR _gridit$2[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN41@ChooseTarg:

; 2008 : 		while (e){

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN40@ChooseTarg

; 2009 : 			if (e->IsBattalion() && 
; 2010 : 				/* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ !e->IsDead() && /* END OF ADDED SECTION */
; 2011 : 				roeg[e->GetTeam()] == ROE_ALLOWED
; 2012 : 			){

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	je	$LN38@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN38@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR _roeg$[ebp+ecx*4], 1
	jne	$LN38@ChooseTarg

; 2013 : 				combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 2014 : 				react = DetectVs(e, &d, &combat, &spot, &estr);

	lea	edx, DWORD PTR _estr$[ebp]
	push	edx
	lea	eax, DWORD PTR _spot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax

; 2015 : 				if (react >= best_reaction && d < react_distance){

	mov	ecx, DWORD PTR _react$[ebp]
	cmp	ecx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN38@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN38@ChooseTarg

; 2016 : 					best_reaction = react;

	mov	edx, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], edx

; 2017 : 					react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 2018 : 					react_against = e;

	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR _react_against$[ebp], eax

; 2019 : 					SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 2020 : 					SetCombat(combat);

	mov	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN38@ChooseTarg:

; 2021 : 				}
; 2022 : 			}
; 2023 : 			e = (CampEntity)gridit.GetNext();

	lea	ecx, DWORD PTR _gridit$2[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 2024 : 		}

	jmp	$LN41@ChooseTarg
$LN40@ChooseTarg:

; 2025 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _gridit$2[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
$LN44@ChooseTarg:

; 2026 : 
; 2027 : 	// Check vs Emitters, if we're SEAD
; 2028 : 	// 2001-03-17 MODIFIED BY S.G. LETS TRY THAT CanDetect ON EVERY GROUND EMITTER...
; 2029 : 	//            BUT WAIT! SINCE THIS CODE ALREADY DOES IT SO I'LL COMBINED BOTH INTO ONE
; 2030 : #if 0
; 2031 : 	if (GetUnitCurrentRole() == ARO_SEAD /*&& !react_against*/ && ::GetOwner(TheCampaign.CampMapData,x,y) != who){
; 2032 : 		VuListIterator	detit(EmitterList);
; 2033 : 		e = (CampEntity)detit.GetFirst();
; 2034 : 		while (e)
; 2035 : 		{
; 2036 : 			if (/* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ !e->IsDead() && /* END OF ADDED SECTION */ roeg[e->GetTeam()] == ROE_ALLOWED)
; 2037 : 			{
; 2038 : 				react = DetectVs(e, &d, &combat, &spot, &estr);
; 2039 : 				if (react >= best_reaction && d < react_distance)
; 2040 : 				{
; 2041 : 					best_reaction = react;
; 2042 : 					react_distance = d;
; 2043 : 					react_against = e;
; 2044 : 					SetEngaged(1);
; 2045 : 					SetCombat(combat);
; 2046 : 				}
; 2047 : 			}
; 2048 : 			e = (CampEntity)detit.GetNext();
; 2049 : 		}
; 2050 : 	}
; 2051 : 
; 2052 : 	// Check to see if we've been detected by ground radar
; 2053 : 	if ((TheCampaign.RadarMapData) && (!GetSpotted(enemy)) && (((TheCampaign.RadarMapData[i] >> ix) & 0x03) > (rand()%4)))
; 2054 : 	{
; 2055 : 		// KCK: Realistically, we should do a CanDetect() on every ground emitter which could see us,
; 2056 : 		// to check for detection, but that's pretty costly. 
; 2057 : 		// Right now, if the map region is marked as detected, we'll set ourselves detected.
; 2058 : 		UnitClassDataType	*uc = GetUnitClassData();
; 2059 : 		// KCK: Stealth AC don't get spotted by the enemy
; 2060 : 		if (!(uc->Flags & VEH_STEALTH))
; 2061 : 		{
; 2062 : 			if (!GetSpotted(enemy))
; 2063 : 				RequestIntercept((Flight)this, enemy);
; 2064 : 			SetSpotted(enemy,TheCampaign.CurrentTime);	
; 2065 : 		}
; 2066 : 	}
; 2067 : #else
; 2068 : 	// Don't even start testing if we have been spotted in the last ReconLossTime[GetMovementType()]/8
; 2069 : 	if (Camp_GetCurrentTime() - GetSpotTime() > ReconLossTime[GetMovementType()] / 8 || !((GetSpotted() >> enemy) & 0x01))

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotTime@CampBaseClass@@QBEKXZ	; CampBaseClass::GetSpotTime
	sub	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+228]
	call	edx
	mov	eax, DWORD PTR ?ReconLossTime@@3PAKA[eax*4]
	shr	eax, 3
	cmp	esi, eax
	ja	SHORT $LN36@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QBEFXZ	; CampBaseClass::GetSpotted
	movsx	edx, ax
	mov	ecx, DWORD PTR _enemy$[ebp]
	sar	edx, cl
	and	edx, 1
	jne	$LN37@ChooseTarg
$LN36@ChooseTarg:

; 2070 : 	{
; 2071 : 		VuListIterator	detit(EmitterList);

	mov	eax, DWORD PTR ?EmitterList@@3PAVFalconPrivateList@@A ; EmitterList
	push	eax
	lea	ecx, DWORD PTR _detit$10[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 2072 : 		e = (CampEntity)detit.GetFirst();

	lea	ecx, DWORD PTR _detit$10[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN35@ChooseTarg:

; 2073 : 		while (e) {

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN34@ChooseTarg

; 2074 : 			/* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */
; 2075 : 			if (!e->IsDead() && roeg[e->GetTeam()] == ROE_ALLOWED){

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN32@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR _roeg$[ebp+ecx*4], 1
	jne	$LN32@ChooseTarg

; 2076 : 				// This Code is the original "// Check vs Emitters, if we're SEAD"
; 2077 : 				// 2001-06-07 REMOVED BY S.G. SEAD STRIKES SHOULD GO AGAINST THEIR TARGET (DONE ABOVE),
; 2078 : 				// SEAD ESCORT AGAINST THE AIR DEFENSE, NOT EMITTERS (DONE ABOVE)...
; 2079 : 				/*
; 2080 : 				//					if (GetUnitCurrentRole() == ARO_SEAD && ::GetOwner(TheCampaign.CampMapData,x,y) != who) {
; 2081 : 				// 2001-06-07 ADDED BY S.G. SO DEAD RADAR ARE NO LONGER A CANDIDATE FOR INCLUSION
; 2082 : 				if (e->IsEmitting()) {
; 2083 : 				// END OF ADDED SECTION (EXCEPT FOR INDENTATION
; 2084 : 				react = DetectVs(e, &d, &combat, &spot, &estr);
; 2085 : 				if (react >= best_reaction && d < react_distance) {
; 2086 : 				best_reaction = react;
; 2087 : 				react_distance = d;
; 2088 : 				react_against = e;
; 2089 : 				SetEngaged(1);
; 2090 : 				SetCombat(combat);
; 2091 : 				}
; 2092 : 				// 2001-06-07 ADDED BY S.G. FORGET ABOUT THIS RADAR IF IT IS NOW DEAD
; 2093 : 				}
; 2094 : 				else if (old_target == e)
; 2095 : 				old_target = NULL;
; 2096 : 				// END OF ADDED SECTION (EXCEPT FOR INDENTATION
; 2097 : 				}
; 2098 : 				*/
; 2099 : 				// This Code is OUR "Check to see if we've been detected by OBJECTIVE ground radar"
; 2100 : 				// No need to test for unit ground radar since they'll do it themselve...
; 2101 : 				// plus we let CanDetect handle stealth flights
; 2102 : 				// Stop the loop once we got spotted
; 2103 : 				if (e->IsObjective() && e->CanDetect(this) && ((ObjectiveClass *)e)->IsGCI()) {

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	$LN32@ChooseTarg
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	test	eax, eax
	je	$LN32@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	call	?IsGCI@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsGCI
	test	eax, eax
	je	$LN32@ChooseTarg

; 2104 : 					if (!GetSpotted(e->GetTeam()))

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN31@ChooseTarg

; 2105 : 						RequestIntercept((Flight)this, e->GetTeam());

	push	0
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ; RequestIntercept
	add	esp, 12					; 0000000cH
$LN31@ChooseTarg:

; 2106 : 					float range = Distance(XPos(),YPos(),e->XPos(),e->YPos()) / GRID_SIZE_FT;

	mov	ecx, DWORD PTR _e$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _e$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Distance@@YAMMMMM@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv2759[ebp]
	movss	xmm0, DWORD PTR tv2759[ebp]
	divss	xmm0, DWORD PTR __real@454cffae
	movss	DWORD PTR _range$16[ebp], xmm0

; 2107 : 					SetSpotted(enemy,TheCampaign.CurrentTime, CanItIdentify(e, this, range, this->GetMovementType())); // 2002-02-11 MODIFIED BY S.G. Test if identifed by ground radar

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+228]
	call	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _range$16[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z ; CanItIdentify
	add	esp, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	edx
	movzx	eax, BYTE PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted

; 2108 : 					break;

	jmp	SHORT $LN34@ChooseTarg
$LN32@ChooseTarg:

; 2109 : 				}
; 2110 : 			}
; 2111 : 			e = (CampEntity)detit.GetNext();

	lea	ecx, DWORD PTR _detit$10[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 2112 : 		}

	jmp	$LN35@ChooseTarg
$LN34@ChooseTarg:

; 2113 : 		int placeHolder = 0;

	mov	DWORD PTR _placeHolder$8[ebp], 0

; 2114 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _detit$10[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN37@ChooseTarg:

; 2115 : #endif
; 2116 : 	// END OF MODIFIED SECTION
; 2117 : 
; 2118 : 	// Check vs assigned target, if any and if not already chosen
; 2119 : 	if (assigned_target != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN20@ChooseTarg

; 2120 : 	{
; 2121 : 		int		undivert = FALSE;

	mov	DWORD PTR _undivert$45[ebp], 0

; 2122 : 
; 2123 : 		e = (CampEntity) vuDatabase->Find(assigned_target);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+300]
	push	eax
	mov	ecx, DWORD PTR [edx+296]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 2124 : 		if (e && (e->IsPackage() || e->IsBrigade()))

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN29@ChooseTarg
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx
	test	eax, eax
	jne	SHORT $LN28@ChooseTarg
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+244]
	call	eax
	test	eax, eax
	je	SHORT $LN29@ChooseTarg
$LN28@ChooseTarg:

; 2125 : 			e = ((Unit)e)->GetFirstUnitElement();

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _e$[ebp], eax
$LN29@ChooseTarg:

; 2126 : 		// KCK: Check if assigned target is still viable
; 2127 : 		if (e && e->IsUnit() && ((e->IsFlight() && ((Unit)e)->Broken()) || ((Unit)e)->IsDead()))

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN27@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN27@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN25@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	jne	SHORT $LN26@ChooseTarg
$LN25@ChooseTarg:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	je	SHORT $LN27@ChooseTarg
$LN26@ChooseTarg:

; 2128 : 			undivert = TRUE;

	mov	DWORD PTR _undivert$45[ebp], 1
$LN27@ChooseTarg:

; 2129 : 		if (e && /* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ !e->IsDead() && /* END OF ADDED SECTION */ e != react_against)

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN24@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN24@ChooseTarg
	mov	ecx, DWORD PTR _e$[ebp]
	cmp	ecx, DWORD PTR _react_against$[ebp]
	je	$LN24@ChooseTarg

; 2130 : 		{
; 2131 : 			int tstr = 0;

	mov	DWORD PTR _tstr$17[ebp], 0

; 2132 : 			combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 2133 : 			react = DetectVs(e, &d, &combat, &spot, &tstr) + 1;

	lea	edx, DWORD PTR _tstr$17[ebp]
	push	edx
	lea	eax, DWORD PTR _spot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	add	eax, 1
	mov	DWORD PTR _react$[ebp], eax

; 2134 : 			if (react >= best_reaction && d < react_distance)

	mov	ecx, DWORD PTR _react$[ebp]
	cmp	ecx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN23@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN23@ChooseTarg

; 2135 : 			{
; 2136 : 				best_reaction = react;

	mov	edx, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], edx

; 2137 : 				react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 2138 : 				react_against = e;

	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR _react_against$[ebp], eax

; 2139 : 				SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 2140 : 				SetCombat(combat);

	mov	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat

; 2141 : 			}
; 2142 : 			else

	jmp	SHORT $LN22@ChooseTarg
$LN23@ChooseTarg:

; 2143 : 			{
; 2144 : 				// KCK: This whole section of code is pretty suspect.
; 2145 : 				// I am attempting to allow AWACs to retask another flight when we
; 2146 : 				// run into some higher priority target. Perhaps the better thing to 
; 2147 : 				// do in this case is send another mission request and clear this 
; 2148 : 				// flight's assigned target - but 'undiverting' is actually a very 
; 2149 : 				// error prone task.
; 2150 : 				// Clear our hold on this target, so someone else can be tasked
; 2151 : 				// NOTE: this momentarily sets this entity as unspotted.
; 2152 : 				e->SetSpotted(GetTeam(),0);

	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted

; 2153 : 				undivert = TRUE;

	mov	DWORD PTR _undivert$45[ebp], 1
$LN22@ChooseTarg:

; 2154 : 				// KCK: Not sure about this - it does keep AWACS from retasking us, though
; 2155 : 				//				priority = react;
; 2156 : 			}
; 2157 : 		}
; 2158 : 		else

	jmp	SHORT $LN21@ChooseTarg
$LN24@ChooseTarg:

; 2159 : 			undivert = TRUE;

	mov	DWORD PTR _undivert$45[ebp], 1
$LN21@ChooseTarg:

; 2160 : 
; 2161 : 		// If we've set the "undivert" flag, we need to return to our origional mission
; 2162 : 		// KCK: This has not been well tested and is almost guarenteed to be buggy.
; 2163 : 		if (undivert)

	cmp	DWORD PTR _undivert$45[ebp], 0
	je	$LN20@ChooseTarg

; 2164 : 		{
; 2165 : 			MissionRequestClass		mis;

	lea	ecx, DWORD PTR _mis$55[ebp]
	call	??0MissionRequestClass@@QAE@XZ		; MissionRequestClass::MissionRequestClass
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 2166 : 			requester = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+400], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+404], eax

; 2167 : 			ClearAssignedTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAssignedTarget@FlightClass@@QAEXXZ ; FlightClass::ClearAssignedTarget

; 2168 : 			SetUnitMission(old_mission);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+378]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax

; 2169 : 			ClearDivertWayPoints(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?ClearDivertWayPoints@@YAXPAVFlightClass@@@Z ; ClearDivertWayPoints
	add	esp, 4

; 2170 : 			// Update the mission evaluator
; 2171 : 			mis.mission = old_mission;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+378]
	mov	BYTE PTR _mis$55[ebp+60], al

; 2172 : 			mis.targetID = mission_target;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	mov	eax, DWORD PTR [ecx+292]
	mov	DWORD PTR _mis$55[ebp+8], edx
	mov	DWORD PTR _mis$55[ebp+12], eax

; 2173 : 			TheCampaign.MissionEvaluator->RegisterDivert(this, &mis);

	lea	ecx, DWORD PTR _mis$55[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?RegisterDivert@MissionEvaluationClass@@QAEXPAVFlightClass@@PAVMissionRequestClass@@@Z ; MissionEvaluationClass::RegisterDivert

; 2174 : 			SetDiverted(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDiverted@UnitClass@@QAEXH@Z		; UnitClass::SetDiverted

; 2175 : 			MakeFlightDirty (DIRTY_DIVERT_INFO, DDP[96].priority);

	mov	eax, 4
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 2176 : 			//	MakeFlightDirty (DIRTY_DIVERT_INFO, SEND_SOON);
; 2177 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _mis$55[ebp]
	call	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
$LN20@ChooseTarg:

; 2178 : 	}
; 2179 : 
; 2180 : 	// Check vs current target, if any and if not already chosen
; 2181 : 	if (old_target && old_target != react_against && /* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ !old_target->IsDead() && /* END OF ADDED SECTION */ roeg[old_target->GetTeam()] == ROE_ALLOWED)

	cmp	DWORD PTR _old_target$[ebp], 0
	je	$LN14@ChooseTarg
	mov	eax, DWORD PTR _old_target$[ebp]
	cmp	eax, DWORD PTR _react_against$[ebp]
	je	$LN14@ChooseTarg
	mov	ecx, DWORD PTR _old_target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _old_target$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN14@ChooseTarg
	mov	ecx, DWORD PTR _old_target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _old_target$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR _roeg$[ebp+ecx*4], 1
	jne	$LN14@ChooseTarg

; 2182 : 	{
; 2183 : 		int tstr = 0;

	mov	DWORD PTR _tstr$22[ebp], 0

; 2184 : 		combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 2185 : 		if (old_target->IsAirplane())

	mov	edx, DWORD PTR _old_target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _old_target$[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN18@ChooseTarg

; 2186 : 			react = DetectVs((AircraftClass*)old_target, &d, &combat, &spot, &tstr);

	lea	eax, DWORD PTR _tstr$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _spot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _combat$[ebp]
	push	edx
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_target$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVAircraftClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax
	jmp	SHORT $LN15@ChooseTarg
$LN18@ChooseTarg:

; 2187 : 		else if (old_target->IsCampaign())

	mov	ecx, DWORD PTR _old_target$[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN16@ChooseTarg

; 2188 : 			react = DetectVs((CampBaseClass*)old_target, &d, &combat, &spot, &tstr);

	lea	edx, DWORD PTR _tstr$22[ebp]
	push	edx
	lea	eax, DWORD PTR _spot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _old_target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@FlightClass@@QAEHPAVCampBaseClass@@PAMPAH22@Z ; FlightClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax

; 2189 : 		else

	jmp	SHORT $LN15@ChooseTarg
$LN16@ChooseTarg:

; 2190 : 		{
; 2191 : 			d = 9999.0F;

	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR _d$[ebp], xmm0

; 2192 : 			react = 0;

	mov	DWORD PTR _react$[ebp], 0
$LN15@ChooseTarg:

; 2193 : 		}
; 2194 : 		if (react >= best_reaction && d < react_distance)

	mov	ecx, DWORD PTR _react$[ebp]
	cmp	ecx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN14@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN14@ChooseTarg

; 2195 : 		{
; 2196 : 			best_reaction = react;

	mov	edx, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], edx

; 2197 : 			react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 2198 : 			react_against = old_target;

	mov	eax, DWORD PTR _old_target$[ebp]
	mov	DWORD PTR _react_against$[ebp], eax

; 2199 : 			SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 2200 : 			SetCombat(combat);

	mov	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN14@ChooseTarg:

; 2201 : 		}
; 2202 : 	}
; 2203 : 
; 2204 : 	if (!was_engaged && Engaged() && !(rand() % 6))

	cmp	DWORD PTR _was_engaged$[ebp], 0
	jne	$LN12@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	$LN12@ChooseTarg
	call	_rand
	cdq
	mov	ecx, 6
	idiv	ecx
	test	edx, edx
	jne	$LN12@ChooseTarg

; 2205 : 	{
; 2206 : 		if ( /* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ !react_against->IsDead() && /* END OF ADDED SECTION */react_against->IsFlight())

	mov	edx, DWORD PTR _react_against$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _react_against$[ebp]
	mov	edx, DWORD PTR [eax+212]
	call	edx
	test	eax, eax
	jne	$LN12@ChooseTarg
	mov	eax, DWORD PTR _react_against$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _react_against$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN12@ChooseTarg

; 2207 : 		{
; 2208 : 			// Report engagements for RadioChatter
; 2209 : 			GridIndex					x2,y2;
; 2210 : 			FalconRadioChatterMessage	*msg = new FalconRadioChatterMessage(Id(), FalconLocalGame);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN127@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN125@ChooseTarg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv1874[ebp], eax
	jmp	SHORT $LN126@ChooseTarg
$LN125@ChooseTarg:
	mov	DWORD PTR tv1874[ebp], 0
$LN126@ChooseTarg:
	push	1
	mov	edx, DWORD PTR tv1874[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv1885[ebp], eax
	jmp	SHORT $LN128@ChooseTarg
$LN127@ChooseTarg:
	mov	DWORD PTR tv1885[ebp], 0
$LN128@ChooseTarg:
	mov	eax, DWORD PTR tv1885[ebp]
	mov	DWORD PTR $T12[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR _msg$52[ebp], ecx

; 2211 : 			msg->dataBlock.from = Id();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$52[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 2212 : 			msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _msg$52[ebp]
	mov	BYTE PTR [ecx+60], 1

; 2213 : 			msg->dataBlock.voice_id = ((Flight)this)->GetPilotVoiceID(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	BYTE PTR [edx+61], al

; 2214 : 			react_against->GetLocation(&x2,&y2);

	lea	eax, DWORD PTR _y2$46[ebp]
	push	eax
	lea	ecx, DWORD PTR _x2$47[ebp]
	push	ecx
	mov	ecx, DWORD PTR _react_against$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2215 : 			if (1)//me123 (GetUnitCurrentRole() == ARO_CA)

	mov	edx, 1
	test	edx, edx
	je	$LN11@ChooseTarg

; 2216 : 			{
; 2217 : 				msg->dataBlock.message = rcENGAGINGB;

	mov	eax, 62					; 0000003eH
	mov	ecx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [ecx+62], ax

; 2218 : 				msg->dataBlock.edata[0] = ((Flight)this)->callsign_id;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 2219 : 				msg->dataBlock.edata[1] = ((Flight)this)->GetFlightLeadCallNumber();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ ; FlightClass::GetFlightLeadCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 2220 : 				msg->dataBlock.edata[2] = (((Unit)react_against)->GetVehicleID(0))*2;

	push	0
	mov	ecx, DWORD PTR _react_against$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	shl	eax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 2221 : 				msg->dataBlock.edata[3] = x2;

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _msg$52[ebp]
	mov	dx, WORD PTR _x2$47[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 2222 : 				msg->dataBlock.edata[4] = y2;

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _msg$52[ebp]
	mov	dx, WORD PTR _y2$46[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 2223 : 				msg->dataBlock.edata[5] = GetUnitAltitude();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitAltitude@UnitClass@@QAEHXZ	; UnitClass::GetUnitAltitude
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 2224 : 				//msg->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds; // FRB - Chatter control
; 2225 : 			}
; 2226 : 			else

	jmp	$LN10@ChooseTarg
$LN11@ChooseTarg:

; 2227 : 			{
; 2228 : 				msg->dataBlock.message = rcENGDEFENSIVEA;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [ecx+62], ax

; 2229 : 				msg->dataBlock.edata[0] = ((Flight)this)->callsign_id;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 2230 : 				msg->dataBlock.edata[1] = ((Flight)this)->GetFlightLeadCallNumber();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ ; FlightClass::GetFlightLeadCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 2231 : 				msg->dataBlock.edata[2] = x2;

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _msg$52[ebp]
	mov	dx, WORD PTR _x2$47[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 2232 : 				msg->dataBlock.edata[3] = y2;

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _msg$52[ebp]
	mov	dx, WORD PTR _y2$46[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 2233 : 				msg->dataBlock.edata[4] = GetUnitAltitude();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitAltitude@UnitClass@@QAEHXZ	; UnitClass::GetUnitAltitude
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _msg$52[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN10@ChooseTarg:

; 2234 : 				//msg->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds; // FRB - Chatter control
; 2235 : 			}
; 2236 : 			FalconSendMessage(msg, FALSE);

	push	0
	mov	eax, DWORD PTR _msg$52[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN12@ChooseTarg:

; 2237 : 		}
; 2238 : 	}
; 2239 : 
; 2240 : 	ShiAssert(!react_against || react_against->IsFlight() || react_against->IsBattalion() || react_against->IsTaskForce() || react_against->IsObjective() || react_against->IsAirplane());
; 2241 : 
; 2242 : 	if (react_against /* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ && !react_against->IsDead() /* END OF ADDED SECTION */)

	cmp	DWORD PTR _react_against$[ebp], 0
	je	SHORT $LN9@ChooseTarg
	mov	ecx, DWORD PTR _react_against$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _react_against$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	SHORT $LN9@ChooseTarg

; 2243 : 	{
; 2244 : 		SetTarget(react_against);

	mov	ecx, DWORD PTR _react_against$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget

; 2245 : 		ostr = GetUnitScore (this, react_against->GetMovementType());

	mov	edx, DWORD PTR _react_against$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _react_against$[ebp]
	mov	edx, DWORD PTR [eax+228]
	call	edx
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z ; GetUnitScore
	add	esp, 8
	mov	DWORD PTR _ostr$[ebp], eax

; 2246 : 		retval = 1;

	mov	DWORD PTR _retval$[ebp], 1

; 2247 : 	}
; 2248 : 	else

	jmp	SHORT $LN8@ChooseTarg
$LN9@ChooseTarg:

; 2249 : 	{
; 2250 : 		ostr = GetUnitScore (this, Air);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z ; GetUnitScore
	add	esp, 8
	mov	DWORD PTR _ostr$[ebp], eax

; 2251 : 		retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 2252 : 		SetTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget
$LN8@ChooseTarg:

; 2253 : 	}
; 2254 : 
; 2255 : 	if (react_distance < 1.1F)

	movss	xmm0, DWORD PTR __real@3f8ccccd
	comiss	xmm0, DWORD PTR _react_distance$[ebp]
	jbe	SHORT $LN7@ChooseTarg

; 2256 : 	{
; 2257 : 		// KCK - due to timing, it's possible to overfly our target before we get a chance to shoot.
; 2258 : 		// Make sure we're able to shoot right now
; 2259 : 		SetCombatTime(0);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+596]
	call	edx
$LN7@ChooseTarg:

; 2260 : 	}
; 2261 : 
; 2262 : #if 0 //#ifdef DEBUG
; 2263 : 	if (!IsAggregate())
; 2264 : 	{
; 2265 : 		if (react_against && react_against->IsUnit())
; 2266 : 			MonoPrint("Deag flight %d (%s, %s) chose target %d (%s, %s).\n",GetCampID(),GetUnitClassData()->Name,MissStr[GetUnitMission()],react_against->GetCampID(),((Unit)react_against)->GetUnitClassData()->Name,MissStr[((Unit)react_against)->GetUnitMission()]);
; 2267 : 		else if (react_against)
; 2268 : 			MonoPrint("Deag flight %d (%s, %s) chose target %d\n",GetCampID(),GetUnitClassData()->Name,MissStr[GetUnitMission()],react_against->GetCampID());
; 2269 : 		else
; 2270 : 			MonoPrint("Deag flight %d (%s, %s) chose no target.\n",GetCampID(),GetUnitClassData()->Name,MissStr[GetUnitMission()]);
; 2271 : 	}
; 2272 : #endif
; 2273 : 
; 2274 : 	// These odds arn't very accurate - as it only counts strength vs us from potential targets,
; 2275 : 	// not everyone who is actually engaing us
; 2276 : 	if (estr)

	cmp	DWORD PTR _estr$[ebp], 0
	je	$LN6@ChooseTarg

; 2277 : 	{
; 2278 : 		Flight				flight = (Flight)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _flight$29[ebp], eax

; 2279 : 		Package				pack = (Package)GetUnitParent();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pack$31[ebp], eax

; 2280 : 		// Add any escorts we have to our strength
; 2281 : 		for (int i=GetUnitElement()+1; pack && flight; i++)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+892]
	call	eax
	add	eax, 1
	mov	DWORD PTR _i$33[ebp], eax
	jmp	SHORT $LN5@ChooseTarg
$LN4@ChooseTarg:
	mov	ecx, DWORD PTR _i$33[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$33[ebp], ecx
$LN5@ChooseTarg:
	cmp	DWORD PTR _pack$31[ebp], 0
	je	SHORT $LN3@ChooseTarg
	cmp	DWORD PTR _flight$29[ebp], 0
	je	SHORT $LN3@ChooseTarg

; 2282 : 		{
; 2283 : 			flight = (Flight)pack->GetUnitElement(i);

	mov	edx, DWORD PTR _i$33[ebp]
	push	edx
	mov	eax, DWORD PTR _pack$31[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pack$31[ebp]
	mov	eax, DWORD PTR [edx+888]
	call	eax
	mov	DWORD PTR _flight$29[ebp], eax

; 2284 : 			ostr += GetUnitScore (flight, Air);

	push	5
	mov	ecx, DWORD PTR _flight$29[ebp]
	push	ecx
	call	?GetUnitScore@@YAHPAVUnitClass@@W4MoveType@@@Z ; GetUnitScore
	add	esp, 8
	add	eax, DWORD PTR _ostr$[ebp]
	mov	DWORD PTR _ostr$[ebp], eax

; 2285 : 		}

	jmp	SHORT $LN4@ChooseTarg
$LN3@ChooseTarg:

; 2286 : 		SetOdds ((ostr * 10) / estr);

	mov	eax, DWORD PTR _ostr$[ebp]
	imul	eax, 10					; 0000000aH
	cdq
	idiv	DWORD PTR _estr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOdds@UnitClass@@QAEXF@Z		; UnitClass::SetOdds

; 2287 : 	}
; 2288 : 	else

	jmp	SHORT $LN2@ChooseTarg
$LN6@ChooseTarg:

; 2289 : 		SetOdds (ostr * 10);

	mov	edx, DWORD PTR _ostr$[ebp]
	imul	edx, 10					; 0000000aH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOdds@UnitClass@@QAEXF@Z		; UnitClass::SetOdds
$LN2@ChooseTarg:

; 2290 : 
; 2291 : 	// Recheck our tactic if we've chosen a new target
; 2292 : 	if (old_target != react_against /* ADDED BY S.G. SO DEAD UNIT ARE NOT TARGETED */ && react_against && !react_against->IsDead() /* END OF ADDED SECTION */)

	mov	eax, DWORD PTR _old_target$[ebp]
	cmp	eax, DWORD PTR _react_against$[ebp]
	je	SHORT $LN1@ChooseTarg
	cmp	DWORD PTR _react_against$[ebp], 0
	je	SHORT $LN1@ChooseTarg
	mov	ecx, DWORD PTR _react_against$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _react_against$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@ChooseTarg

; 2293 : 		ChooseTactic();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+496]
	call	eax
$LN1@ChooseTarg:

; 2294 : 
; 2295 : 	return retval;

	mov	ecx, DWORD PTR _retval$[ebp]
	mov	DWORD PTR $T19[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _sit$[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _gridit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T19[ebp]
$LN111@ChooseTarg:

; 2296 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$0:
	lea	ecx, DWORD PTR _detit$11[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$1:
	mov	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$2:
	lea	ecx, DWORD PTR _gridit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$3:
	lea	ecx, DWORD PTR _myit$9[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$4:
	lea	ecx, DWORD PTR _sit$[ebp]
	jmp	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$5:
	lea	ecx, DWORD PTR _gridit$2[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$6:
	lea	ecx, DWORD PTR _detit$10[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$7:
	lea	ecx, DWORD PTR _mis$55[ebp]
	jmp	??1MissionRequestClass@@QAE@XZ		; MissionRequestClass::~MissionRequestClass
__unwindfunclet$?ChooseTarget@FlightClass@@UAEHXZ$8:
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ChooseTarget@FlightClass@@UAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-688]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ChooseTarget@FlightClass@@UAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ChooseTarget@FlightClass@@UAEHXZ ENDP			; FlightClass::ChooseTarget
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DetectOnMove@FlightClass@@UAEHXZ PROC			; FlightClass::DetectOnMove
; _this$ = ecx

; 1607 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1608 : 	if (!Engaged() && !(GetUnitMoved()%5)){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	jne	SHORT $LN1@DetectOnMo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitMoved@UnitClass@@QBEHXZ		; UnitClass::GetUnitMoved
	cdq
	mov	ecx, 5
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN1@DetectOnMo

; 1609 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@DetectOnMo
$LN1@DetectOnMo:

; 1610 : 	}
; 1611 : 	return ChooseTarget();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+524]
	call	edx
$LN2@DetectOnMo:

; 1612 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetectOnMove@FlightClass@@UAEHXZ ENDP			; FlightClass::DetectOnMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 8
_d$2 = -44						; size = 4
_e$3 = -40						; size = 4
_e$4 = -36						; size = 4
_w$5 = -32						; size = 4
_this$ = -28						; size = 4
_x$6 = -24						; size = 2
_y$7 = -20						; size = 2
_x$8 = -16						; size = 2
_y$9 = -12						; size = 2
_ex$10 = -8						; size = 2
_ey$11 = -4						; size = 2
_tid$ = 8						; size = 4
?CheckTactic@FlightClass@@UAEHH@Z PROC			; FlightClass::CheckTactic
; _this$ = ecx

; 1431 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1432 : 	if (haveWeaps < 0)		// We've not collected our stats yet

	cmp	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
	jge	SHORT $LN30@CheckTacti

; 1433 : 	{
; 1434 : 		ourMission = GetUnitMission();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	DWORD PTR ?ourMission@@3HA, eax		; ourMission

; 1435 : 		haveWeaps = HasWeapons();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasWeapons@FlightClass@@QAEHXZ		; FlightClass::HasWeapons
	mov	DWORD PTR ?haveWeaps@@3HA, eax		; haveWeaps

; 1436 : 		haveFuel = HasFuel();

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasFuel@FlightClass@@QAEHH@Z		; FlightClass::HasFuel
	mov	DWORD PTR ?haveFuel@@3HA, eax		; haveFuel
$LN30@CheckTacti:

; 1437 : 	}
; 1438 : 
; 1439 : 	// Mark us as having weapons for purposes of the non-combat tactics if we've
; 1440 : 	// already reached our target and are on a mission type which allows for this.
; 1441 : 	// 2001-03-31 MODIFIED BY S.G. REMOVED THE TEST FOR FEVAL_GOT_TO_TARGET FROM THE EQUATION. THIS PREVENTS A2G AIRCRAFT FROM ABORTING
; 1442 : 	//	if (!haveWeaps && tid >= ATACTIC_ENGAGE_DEF && MissionData[mission].flags & AMIS_NO_TARGETABORT && eval_flags & FEVAL_GOT_TO_TARGET)
; 1443 : 	if (!haveWeaps && tid >= ATACTIC_ENGAGE_DEF && MissionData[mission].flags & AMIS_NO_TARGETABORT)

	cmp	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
	jne	SHORT $LN29@CheckTacti
	cmp	DWORD PTR _tid$[ebp], 8
	jl	SHORT $LN29@CheckTacti
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+377]
	shl	edx, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[edx+28]
	and	eax, 268435456				; 10000000H
	je	SHORT $LN29@CheckTacti

; 1444 : 		haveWeaps++;

	mov	ecx, DWORD PTR ?haveWeaps@@3HA		; haveWeaps
	add	ecx, 1
	mov	DWORD PTR ?haveWeaps@@3HA, ecx		; haveWeaps
$LN29@CheckTacti:

; 1445 : 
; 1446 : 	// Special check for beam tactic
; 1447 : 	if (tid == ATACTIC_BEAM)

	cmp	DWORD PTR _tid$[ebp], 3
	jne	$LN28@CheckTacti

; 1448 : 	{
; 1449 : #ifdef GILMANS_BEAM_TACTIC
; 1450 : 		if (!Locked())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Locked@UnitClass@@QAEHXZ		; UnitClass::Locked
	test	eax, eax
	jne	SHORT $LN27@CheckTacti

; 1451 : 			return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti

; 1452 : 		else

	jmp	$LN23@CheckTacti
$LN27@CheckTacti:

; 1453 : 		{
; 1454 : 			int			d;
; 1455 : 			GridIndex	x,y,ex,ey;
; 1456 : 			Flight		e = (Flight) vuDatabase->Find(enemy_locker);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+308]
	push	eax
	mov	ecx, DWORD PTR [edx+304]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$3[ebp], eax

; 1457 : 			// Check if our locker exists and has us locked
; 1458 : 			if (!e || e->GetUnitTactic() != ATACTIC_ENGAGE_AIR)

	cmp	DWORD PTR _e$3[ebp], 0
	je	SHORT $LN24@CheckTacti
	mov	ecx, DWORD PTR _e$3[ebp]
	call	?GetUnitTactic@UnitClass@@QBEHXZ	; UnitClass::GetUnitTactic
	cmp	eax, 1
	je	SHORT $LN25@CheckTacti
$LN24@CheckTacti:

; 1459 : 			{
; 1460 : 				SetLocked(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocked@UnitClass@@QAEXH@Z		; UnitClass::SetLocked

; 1461 : 				return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN25@CheckTacti:

; 1462 : 			}
; 1463 : 			// Check tactic range
; 1464 : 			GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$9[ebp]
	push	edx
	lea	eax, DWORD PTR _x$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1465 : 			e->GetLocation(&ex,&ey);

	lea	ecx, DWORD PTR _ey$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _ex$10[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$3[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1466 : 			d = FloatToInt32(Distance(x,y,ex,ey));

	movzx	eax, WORD PTR _ey$11[ebp]
	push	eax
	movzx	ecx, WORD PTR _ex$10[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$9[ebp]
	push	edx
	movzx	eax, WORD PTR _x$8[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$2[ebp], eax

; 1467 : 			if (!CheckRange(tid,d))

	mov	ecx, DWORD PTR _d$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckRange@@YAHHH@Z			; CheckRange
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@CheckTacti

; 1468 : 			{
; 1469 : 				SetLocked(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocked@UnitClass@@QAEXH@Z		; UnitClass::SetLocked

; 1470 : 				return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN23@CheckTacti:

; 1471 : 			}
; 1472 : 		}
; 1473 : 		return GetTacticPriority(tid);

	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?GetTacticPriority@@YAHH@Z		; GetTacticPriority
	add	esp, 4
	jmp	$LN31@CheckTacti
$LN28@CheckTacti:

; 1474 : #else
; 1475 : 		return 0;
; 1476 : #endif
; 1477 : 	}
; 1478 : 
; 1479 : 	// Now do the check
; 1480 : 	if (!CheckStatus(tid,Aborted()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	push	eax
	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?CheckStatus@@YAHHH@Z			; CheckStatus
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN22@CheckTacti

; 1481 : 		return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN22@CheckTacti:

; 1482 : 	if (!CheckEngaged(tid,Engaged()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	push	eax
	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckEngaged@@YAHHH@Z			; CheckEngaged
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@CheckTacti

; 1483 : 		return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN21@CheckTacti:

; 1484 : 	if (!CheckAction(tid,ourMission))

	mov	eax, DWORD PTR ?ourMission@@3HA		; ourMission
	push	eax
	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?CheckAction@@YAHHH@Z			; CheckAction
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@CheckTacti

; 1485 : 		return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN20@CheckTacti:

; 1486 : 	if (!CheckFuel(tid,haveFuel))

	mov	edx, DWORD PTR ?haveFuel@@3HA		; haveFuel
	push	edx
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckFuel@@YAHHH@Z			; CheckFuel
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@CheckTacti

; 1487 : 		return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN19@CheckTacti:

; 1488 : 	if (Engaged() && !CheckOdds(tid,GetOdds()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN18@CheckTacti
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOdds@UnitClass@@QAEFXZ		; UnitClass::GetOdds
	movsx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckOdds@@YAHHH@Z			; CheckOdds
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@CheckTacti

; 1489 : 		return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN18@CheckTacti:

; 1490 : 	if (CheckWeapons(tid) == 1 && !haveWeaps)

	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckWeapons@@YAHH@Z			; CheckWeapons
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN17@CheckTacti
	cmp	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
	jne	SHORT $LN17@CheckTacti

; 1491 : 		return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN17@CheckTacti:

; 1492 : 	if (CheckWeapons(tid) == 2 && (Fired() || !haveWeaps))

	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?CheckWeapons@@YAHH@Z			; CheckWeapons
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN12@CheckTacti
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fired@UnitClass@@QAEHXZ		; UnitClass::Fired
	test	eax, eax
	jne	SHORT $LN15@CheckTacti
	cmp	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
	jne	SHORT $LN12@CheckTacti
$LN15@CheckTacti:

; 1493 : 	{
; 1494 : 		// Marco Edit - if we're out of weapons then we want to abort
; 1495 : 		//   if we haven't reached our target yet - if we have then we want to continue our mission steerpoints
; 1496 : 		//   since we're on our way home and might need to avoid a threat along our target -> airfield route
; 1497 : 		if (tid == ATACTIC_IGNORE && !haveWeaps)

	cmp	DWORD PTR _tid$[ebp], 9
	jne	SHORT $LN12@CheckTacti
	cmp	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
	jne	SHORT $LN12@CheckTacti

; 1498 : 		{
; 1499 : 			WayPoint w ;
; 1500 : 			w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$5[ebp], eax
$LN13@CheckTacti:

; 1501 : 
; 1502 : 			// Look for the Mission Target after this steerpoint - if we find it then we
; 1503 : 			// Abort
; 1504 : 			while (w)

	cmp	DWORD PTR _w$5[ebp], 0
	je	SHORT $LN12@CheckTacti

; 1505 : 			{
; 1506 : 				if (w->GetWPFlags() & WPF_TARGET)

	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	je	SHORT $LN11@CheckTacti

; 1507 : 					return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN11@CheckTacti:

; 1508 : 				w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$5[ebp], eax

; 1509 : 			}

	jmp	SHORT $LN13@CheckTacti
$LN12@CheckTacti:

; 1510 : 		}
; 1511 : 	}
; 1512 : 
; 1513 : 	if (tid == ATACTIC_ENGAGE_STRIKE)

	cmp	DWORD PTR _tid$[ebp], 4
	jne	SHORT $LN9@CheckTacti

; 1514 : 	{
; 1515 : 		// Make sure our target is our target objective
; 1516 : 		// To avoid picking this tactic vs a ground unit enroute.
; 1517 : 		if (GetTargetID() != mission_target)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@CheckTacti

; 1518 : 			return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN9@CheckTacti:

; 1519 : 	}
; 1520 : 	if (CheckSpecial(tid) > 0)

	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckSpecial@@YAHH@Z			; CheckSpecial
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN7@CheckTacti

; 1521 : 	{
; 1522 : 		if (!Engaged() || CheckSpecial(tid) != theirDomain)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN6@CheckTacti
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?CheckSpecial@@YAHH@Z			; CheckSpecial
	add	esp, 4
	cmp	eax, DWORD PTR ?theirDomain@@3HA	; theirDomain
	je	SHORT $LN7@CheckTacti
$LN6@CheckTacti:

; 1523 : 			return 0;

	xor	eax, eax
	jmp	$LN31@CheckTacti
$LN7@CheckTacti:

; 1524 : 	}
; 1525 : 	if (tid == ATACTIC_ENGAGE_DEF && !CheckRange(tid,ourRange))

	cmp	DWORD PTR _tid$[ebp], 8
	jne	SHORT $LN5@CheckTacti
	mov	ecx, DWORD PTR ?ourRange@@3HA		; ourRange
	push	ecx
	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	call	?CheckRange@@YAHHH@Z			; CheckRange
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CheckTacti

; 1526 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN31@CheckTacti
$LN5@CheckTacti:

; 1527 : 
; 1528 : 	// Some more special case stuff
; 1529 : 	if (tid == ATACTIC_ENGAGE_AIR || tid == ATACTIC_SHOOT_AND_RUN)

	cmp	DWORD PTR _tid$[ebp], 1
	je	SHORT $LN3@CheckTacti
	cmp	DWORD PTR _tid$[ebp], 2
	jne	SHORT $LN2@CheckTacti
$LN3@CheckTacti:

; 1530 : 	{
; 1531 : 		// In most cases, we don't want to drive into enemy territory chasing an aborted flight
; 1532 : 		// Check for this case and don't choose this tactic if it comes up
; 1533 : 		GridIndex	x,y;
; 1534 : 		Unit		e = (Unit) GetTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _e$4[ebp], eax

; 1535 : 		GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1536 : 		if (!e || (e->Aborted() && ::GetOwner(TheCampaign.CampMapData, x, y) == e->GetTeam()))

	cmp	DWORD PTR _e$4[ebp], 0
	je	SHORT $LN1@CheckTacti
	mov	ecx, DWORD PTR _e$4[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	je	SHORT $LN2@CheckTacti
	movzx	edx, WORD PTR _y$7[ebp]
	push	edx
	movzx	eax, WORD PTR _x$6[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+296
	push	ecx
	call	?GetOwner@@YAEPAEFF@Z			; GetOwner
	add	esp, 12					; 0000000cH
	movzx	esi, al
	mov	edx, DWORD PTR _e$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$4[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN2@CheckTacti
$LN1@CheckTacti:

; 1537 : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN31@CheckTacti
$LN2@CheckTacti:

; 1538 : 	}
; 1539 : 
; 1540 : 	return GetTacticPriority(tid);

	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?GetTacticPriority@@YAHH@Z		; GetTacticPriority
	add	esp, 4
$LN31@CheckTacti:

; 1541 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckTactic@FlightClass@@UAEHH@Z ENDP			; FlightClass::CheckTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
tv208 = -32						; size = 4
tv187 = -28						; size = 4
tv163 = -24						; size = 4
tv143 = -20						; size = 4
_radioMessage$1 = -16					; size = 4
_priority$ = -12					; size = 4
_tid$ = -8						; size = 4
_this$ = -4						; size = 4
?ChooseTactic@FlightClass@@UAEHXZ PROC			; FlightClass::ChooseTactic
; _this$ = ecx

; 1383 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1384 : 	int			priority=0,tid;

	mov	DWORD PTR _priority$[ebp], 0

; 1385 : 
; 1386 : 	haveWeaps = -1;

	mov	DWORD PTR ?haveWeaps@@3HA, -1		; haveWeaps

; 1387 : 	tid = FirstAirTactic;

	movsx	eax, WORD PTR ?FirstAirTactic@@3FA	; FirstAirTactic
	mov	DWORD PTR _tid$[ebp], eax
$LN9@ChooseTact:

; 1388 : 	// MD -- 20041228: fixing a small campaign bug here.  It was possible for the loop to
; 1389 : 	// go past the max number of air tactics and trip the assert condition below the loop.
; 1390 : 	// fixed it now so that planes that really ought to abort, really do abort.
; 1391 : 	//while (tid < FirstAirTactic + AirTactics && !priority)
; 1392 : 	while (tid < AirTactics && !priority)

	movsx	ecx, WORD PTR ?AirTactics@@3FA		; AirTactics
	cmp	DWORD PTR _tid$[ebp], ecx
	jge	SHORT $LN8@ChooseTact
	cmp	DWORD PTR _priority$[ebp], 0
	jne	SHORT $LN8@ChooseTact

; 1393 : 	{
; 1394 : 		priority = CheckTactic(tid);

	mov	edx, DWORD PTR _tid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+500]
	call	eax
	mov	DWORD PTR _priority$[ebp], eax

; 1395 : 		if (!priority)

	cmp	DWORD PTR _priority$[ebp], 0
	jne	SHORT $LN7@ChooseTact

; 1396 : 			tid++;

	mov	ecx, DWORD PTR _tid$[ebp]
	add	ecx, 1
	mov	DWORD PTR _tid$[ebp], ecx
$LN7@ChooseTact:

; 1397 : 	}

	jmp	SHORT $LN9@ChooseTact
$LN8@ChooseTact:

; 1398 : 	ShiAssert(tid < FirstAirTactic + AirTactics);
; 1399 : 
; 1400 : 	if (GetUnitTactic() != ATACTIC_ABORT && tid == ATACTIC_ABORT)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitTactic@UnitClass@@QBEHXZ	; UnitClass::GetUnitTactic
	cmp	eax, 12					; 0000000cH
	je	$LN6@ChooseTact
	cmp	DWORD PTR _tid$[ebp], 12		; 0000000cH
	jne	$LN6@ChooseTact

; 1401 : 	{
; 1402 : 		// Send radio calls on aborts
; 1403 : 		if (MissionData[mission].flags & AMIS_EXPECT_DIVERT)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+377]
	shl	eax, 5
	mov	ecx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+28]
	and	ecx, 33554432				; 02000000H
	je	$LN6@ChooseTact

; 1404 : 		{
; 1405 : 			FalconRadioChatterMessage*	radioMessage;
; 1406 : 			if (!haveWeaps)

	cmp	DWORD PTR ?haveWeaps@@3HA, 0		; haveWeaps
	jne	SHORT $LN4@ChooseTact

; 1407 : 				SendCallToAWACS(this,rcENDCAPARMS,FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@ChooseTact
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN13@ChooseTact
$LN12@ChooseTact:
	mov	DWORD PTR tv143[ebp], 0
$LN13@ChooseTact:
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	54					; 00000036H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?SendCallToAWACS@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 1408 : 			else

	jmp	SHORT $LN3@ChooseTact
$LN4@ChooseTact:

; 1409 : 				SendCallToAWACS(this,rcENDCAPFUEL,FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@ChooseTact
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN15@ChooseTact
$LN14@ChooseTact:
	mov	DWORD PTR tv163[ebp], 0
$LN15@ChooseTact:
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	push	55					; 00000037H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?SendCallToAWACS@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH
$LN3@ChooseTact:

; 1410 : 			if (rand()%2)

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN20@ChooseTact
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN20@ChooseTact:
	test	eax, eax
	je	SHORT $LN2@ChooseTact

; 1411 : 				radioMessage = CreateCallFromAwacs(this,rcRELIEVED,FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN16@ChooseTact
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv187[ebp], eax
	jmp	SHORT $LN17@ChooseTact
$LN16@ChooseTact:
	mov	DWORD PTR tv187[ebp], 0
$LN17@ChooseTact:
	mov	eax, DWORD PTR tv187[ebp]
	push	eax
	push	237					; 000000edH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$1[ebp], eax

; 1412 : 			else

	jmp	SHORT $LN1@ChooseTact
$LN2@ChooseTact:

; 1413 : 				radioMessage = CreateCallFromAwacs(this,rcDISMISSED,FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@ChooseTact
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv208[ebp], eax
	jmp	SHORT $LN19@ChooseTact
$LN18@ChooseTact:
	mov	DWORD PTR tv208[ebp], 0
$LN19@ChooseTact:
	mov	eax, DWORD PTR tv208[ebp]
	push	eax
	push	239					; 000000efH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$1[ebp], eax
$LN1@ChooseTact:

; 1414 : 			radioMessage->dataBlock.time_to_play = CampaignSeconds;	// Delay response.

	mov	edx, DWORD PTR _radioMessage$1[ebp]
	mov	DWORD PTR [edx+56], 1000		; 000003e8H

; 1415 : 			FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$1[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN6@ChooseTact:

; 1416 : 		}
; 1417 : 	}
; 1418 : 
; 1419 : #if 0 //#ifdef DEBUG
; 1420 : 	//	if (tid != tactic)
; 1421 : 	//		MonoPrint("Flight %d (%s) chose tactic %s.\n",GetCampID(),MissStr[mission],TacticsTable[tid].name);
; 1422 : 	if (!IsAggregate())
; 1423 : 		MonoPrint("Deag flight %d (%s, %s) chose tactic %s.\n",GetCampID(),MissStr[mission],GetUnitClassData()->Name,TacticsTable[tid].name);
; 1424 : #endif
; 1425 : 
; 1426 : 	SetUnitTactic(tid);

	movzx	ecx, BYTE PTR _tid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitTactic@UnitClass@@QAEXE@Z	; UnitClass::SetUnitTactic

; 1427 : 	return tid;

	mov	eax, DWORD PTR _tid$[ebp]

; 1428 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChooseTactic@FlightClass@@UAEHXZ ENDP			; FlightClass::ChooseTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_result$1 = -32						; size = 4
_e$2 = -28						; size = 4
_headto$3 = -24						; size = 4
_this$ = -20						; size = 4
_ux$4 = -16						; size = 2
_uy$5 = -12						; size = 2
_tx$6 = -8						; size = 2
_ty$7 = -4						; size = 2
?DoCombat@FlightClass@@UAEHXZ PROC			; FlightClass::DoCombat
; _this$ = ecx

; 996  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 	SetCombatTime(TheCampaign.CurrentTime);

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+596]
	call	eax

; 998  : 
; 999  : 	if (Engaged() && Combat() && Final())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	$LN8@DoCombat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Combat@UnitClass@@QBEHXZ		; UnitClass::Combat
	test	eax, eax
	je	$LN8@DoCombat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Final@UnitClass@@QBEHXZ		; UnitClass::Final
	test	eax, eax
	je	$LN8@DoCombat

; 1000 : 	{
; 1001 : 		FalconEntity	*e = GetTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _e$2[ebp], eax

; 1002 : 		int				result = 1;

	mov	DWORD PTR _result$1[ebp], 1

; 1003 : 
; 1004 : 		if (!e)

	cmp	DWORD PTR _e$2[ebp], 0
	jne	SHORT $LN7@DoCombat

; 1005 : 		{
; 1006 : 			SetTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget

; 1007 : 			SetEngaged(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1008 : 			SetCombat(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat

; 1009 : 			return 0;

	xor	eax, eax
	jmp	$LN9@DoCombat
$LN7@DoCombat:

; 1010 : 		}
; 1011 : 
; 1012 : #ifdef KEV_DEBUG
; 1013 : 		MonoPrint("Flight %d (%s::%s) vs %d at %d.\n",GetCampID(),MissStr[mission],TacticsTable[tactic].name,e->GetCampID(),TheCampaign.CurrentTime);
; 1014 : #endif
; 1015 : 
; 1016 : 		// Check if our tactic allows for shooting
; 1017 : 		if (GetTactic() >= ATACTIC_IGNORE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTactic@UnitClass@@QAEEXZ		; UnitClass::GetTactic
	movzx	ecx, al
	cmp	ecx, 9
	jl	SHORT $LN6@DoCombat

; 1018 : 		{
; 1019 : #ifdef KEV_DEBUG
; 1020 : 			MonoPrint("   unable to fire due to tactic.\n");
; 1021 : #endif
; 1022 : 			return 0;

	xor	eax, eax
	jmp	$LN9@DoCombat
$LN6@DoCombat:

; 1023 : 		}
; 1024 : 
; 1025 : 		// Check if target is in our shooting arc
; 1026 : 		GridIndex		ux,uy,tx,ty;
; 1027 : 		int				headto;
; 1028 : 		GetLocation(&ux,&uy);

	lea	edx, DWORD PTR _uy$5[ebp]
	push	edx
	lea	eax, DWORD PTR _ux$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1029 : 		e->GetLocation(&tx,&ty);

	lea	ecx, DWORD PTR _ty$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _tx$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$2[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1030 : 		headto = DirectionTo(ux,uy,tx,ty);

	movzx	eax, WORD PTR _ty$7[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$6[ebp]
	push	ecx
	movzx	edx, WORD PTR _uy$5[ebp]
	push	edx
	movzx	eax, WORD PTR _ux$4[ebp]
	push	eax
	call	?DirectionTo@@YAEFFFF@Z			; DirectionTo
	add	esp, 16					; 00000010H
	movzx	ecx, al
	mov	DWORD PTR _headto$3[ebp], ecx

; 1031 : 		if (headto == Here || abs(headto - last_direction) <= 1 || abs(headto - last_direction) >= 7)

	cmp	DWORD PTR _headto$3[ebp], 8
	je	SHORT $LN4@DoCombat
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+379]
	mov	ecx, DWORD PTR _headto$3[ebp]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 1
	jle	SHORT $LN4@DoCombat
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+379]
	mov	ecx, DWORD PTR _headto$3[ebp]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 7
	jl	SHORT $LN5@DoCombat
$LN4@DoCombat:

; 1032 : 			result = ::DoCombat(this,e);

	mov	edx, DWORD PTR _e$2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?DoCombat@@YAHPAVCampBaseClass@@PAVFalconEntity@@@Z ; DoCombat
	add	esp, 8
	mov	DWORD PTR _result$1[ebp], eax
$LN5@DoCombat:

; 1033 : #ifdef KEV_DEBUG
; 1034 : 		else
; 1035 : 			MonoPrint("   unable to fire due to position (%d vs %d).\n", last_direction,headto);
; 1036 : #endif
; 1037 : 
; 1038 : 		if (result < 0)

	cmp	DWORD PTR _result$1[ebp], 0
	jge	SHORT $LN3@DoCombat

; 1039 : 			SetTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget
	jmp	SHORT $LN8@DoCombat
$LN3@DoCombat:

; 1040 : 		else if (result > 0)

	cmp	DWORD PTR _result$1[ebp], 0
	jle	SHORT $LN8@DoCombat

; 1041 : 			SetCombatTime(Camp_GetCurrentTime());

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+596]
	call	eax
$LN8@DoCombat:

; 1042 : 	}
; 1043 : 	return 0;

	xor	eax, eax
$LN9@DoCombat:

; 1044 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoCombat@FlightClass@@UAEHXZ ENDP			; FlightClass::DoCombat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -212						; size = 8
$T2 = -204						; size = 8
_zd$3 = -196						; size = 4
_uc$4 = -192						; size = 4
_start_moving$ = -188					; size = 4
tv1609 = -184						; size = 4
tv1630 = -180						; size = 4
tv1677 = -176						; size = 4
tv1651 = -172						; size = 4
tv1587 = -168						; size = 4
tv1656 = -164						; size = 4
tv1575 = -160						; size = 4
_o$5 = -156						; size = 4
_newalt$6 = -152					; size = 4
_sq$ = -148						; size = 4
_sq$7 = -144						; size = 4
_eh$8 = -140						; size = 4
_o$9 = -136						; size = 4
_target$10 = -132					; size = 4
_move_time$11 = -128					; size = 4
_yd$12 = -124						; size = 4
_xd$13 = -120						; size = 4
_o$14 = -116						; size = 4
_max_climb$15 = -112					; size = 4
_y$16 = -108						; size = 4
_ow$ = -104						; size = 4
_curalt$17 = -100					; size = 4
_tw$18 = -96						; size = 4
_newalt$19 = -92					; size = 4
_nextTime$20 = -88					; size = 4
_ox$ = -84						; size = 2
_d$21 = -77						; size = 1
_oy$ = -76						; size = 2
_hd$22 = -72						; size = 4
_e$ = -68						; size = 4
_moving$ = -63						; size = 1
_moved$ = -62						; size = 1
_follow_wps$ = -61					; size = 1
_y$ = -60						; size = 2
_x$ = -56						; size = 2
_w$ = -52						; size = 4
_set_yaw$ = -45						; size = 1
_ny$ = -44						; size = 2
_nx$ = -40						; size = 2
_tactic$ = -34						; size = 1
_h$ = -33						; size = 1
_this$ = -32						; size = 4
_collPoint$23 = -28					; size = 12
_pos$24 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_time$ = 8						; size = 4
?MoveUnit@FlightClass@@UAEHK@Z PROC			; FlightClass::MoveUnit
; _this$ = ecx

; 587  : int FlightClass::MoveUnit(CampaignTime time){

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 588  : 	GridIndex		x,y,nx=0,ny=0,ox,oy;

	xor	eax, eax
	mov	WORD PTR _nx$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _ny$[ebp], cx

; 589  : 	CampaignHeading	h;
; 590  : 	uchar			moving=1,moved=0,set_yaw=0,tactic,follow_wps=FALSE;

	mov	BYTE PTR _moving$[ebp], 1
	mov	BYTE PTR _moved$[ebp], 0
	mov	BYTE PTR _set_yaw$[ebp], 0
	mov	BYTE PTR _follow_wps$[ebp], 0

; 591  : 	WayPoint		w=NULL,ow=NULL;

	mov	DWORD PTR _w$[ebp], 0
	mov	DWORD PTR _ow$[ebp], 0

; 592  : 	FalconEntity	*e;
; 593  : 
; 594  : 	if (!Final()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Final@UnitClass@@QBEHXZ		; UnitClass::Final
	test	eax, eax
	jne	SHORT $LN97@MoveUnit

; 595  : 		return 0;

	xor	eax, eax
	jmp	$LN98@MoveUnit
$LN97@MoveUnit:

; 596  : 	}
; 597  : 
; 598  : 	w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 599  : 	if (!w){

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN96@MoveUnit

; 600  : 		return -1;

	or	eax, -1
	jmp	$LN98@MoveUnit
$LN96@MoveUnit:

; 601  : 	}
; 602  : 
; 603  : 	// VP_changes for tracing DB 
; 604  : 	/*
; 605  : 	   FILE* deb = fopen("c:\\traceA10\\dbrain.txt", "a");
; 606  : 	   fprintf(deb, "FlightClass MoveUnit \n" );   
; 607  : 	   fclose(deb);
; 608  : 	   */
; 609  : 
; 610  : 	if (w->GetWPAction() == WP_TAKEOFF){

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	$LN90@MoveUnit

; 611  : 		// Check for takeoff
; 612  : 		if (Camp_GetCurrentTime() > w->GetWPDepartureTime()){

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	cmp	esi, eax
	jbe	$LN94@MoveUnit

; 613  : 			// Check for holdshort timeout
; 614  : 			if (IsSetFalcFlag(FEC_HOLDSHORT) && Camp_GetCurrentTime() < w->GetWPDepartureTime() + CampaignMinutes){

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN93@MoveUnit
	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	add	eax, 60000				; 0000ea60H
	cmp	esi, eax
	jae	SHORT $LN93@MoveUnit

; 615  : 				return 0;

	xor	eax, eax
	jmp	$LN98@MoveUnit
$LN93@MoveUnit:

; 616  : 			}
; 617  : 			UnSetFalcFlag(FEC_HOLDSHORT);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnSetFalcFlag@FalconEntity@@QAEXH@Z	; FalconEntity::UnSetFalcFlag

; 618  : 			// JPO - check airbase is still ok. if not force an ATM reassesment
; 619  : 			// and cancel the flight anyway.
; 620  : 			// also check the team owns the airbase.
; 621  : 			Objective	o = (Objective)GetUnitAirbase();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+704]
	call	edx
	mov	DWORD PTR _o$14[ebp], eax

; 622  : 			// Cobra : removed comment by sfr
; 623  : 			// sfr: we only cancel aggregated flights
; 624  : 			if ((AirbaseOperational(o) == FALSE) && IsAggregate()){

	mov	eax, DWORD PTR _o$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AirbaseOperational@FlightClass@@QAEHPAVObjectiveClass@@@Z ; FlightClass::AirbaseOperational
	test	eax, eax
	jne	$LN92@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN92@MoveUnit

; 625  : 				CancelFlight(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CancelFlight@@YAXPAVFlightClass@@@Z	; CancelFlight
	add	esp, 4

; 626  : 				ShiAssert(TeamInfo[GetTeam()] && TeamInfo[GetTeam()]->atm && o);
; 627  : 				if (TeamInfo[GetTeam()] && TeamInfo[GetTeam()]->atm && o){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	je	SHORT $LN91@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	cmp	DWORD PTR [edx+876], 0
	je	SHORT $LN91@MoveUnit
	cmp	DWORD PTR _o$14[ebp], 0
	je	SHORT $LN91@MoveUnit

; 628  : 					TeamInfo[GetTeam()]->atm->SendATMMessage(
; 629  : 						o->Id(), GetTeam(), FalconAirTaskingMessage::atmZapAirbase, 0, 0, NULL, 0
; 630  : 					);

	push	0
	push	0
	push	0
	push	0
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$14[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	call	?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z ; AirTaskingManagerClass::SendATMMessage
$LN91@MoveUnit:

; 631  : 				}
; 632  : 				return 0;

	xor	eax, eax
	jmp	$LN98@MoveUnit
$LN92@MoveUnit:

; 633  : 			}
; 634  : 		}
; 635  : 		else {

	jmp	$LN90@MoveUnit
$LN94@MoveUnit:

; 636  : 			// Don't bother looking at us again until we're ready to takeoff, or ready to schedule pilots
; 637  : 			//Cobra
; 638  : 			Objective	o = (Objective)GetUnitAirbase();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+704]
	call	eax
	mov	DWORD PTR _o$9[ebp], eax

; 639  : 			//Cobra clean up the list if airbase destroyed 
; 640  : 			//sfr: dont cancel deagged flights!
; 641  : 			if (
; 642  : 				(AirbaseOperational(o) == FALSE) && /*&& this != FalconLocalSession->GetPlayerFlight()*/
; 643  : 				IsAggregate()
; 644  : 			){

	mov	ecx, DWORD PTR _o$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AirbaseOperational@FlightClass@@QAEHPAVObjectiveClass@@@Z ; FlightClass::AirbaseOperational
	test	eax, eax
	jne	$LN88@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN88@MoveUnit

; 645  : 				CancelFlight(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CancelFlight@@YAXPAVFlightClass@@@Z	; CancelFlight
	add	esp, 4

; 646  : 				ShiAssert(TeamInfo[GetTeam()] && TeamInfo[GetTeam()]->atm && o);
; 647  : 				if (TeamInfo[GetTeam()] && TeamInfo[GetTeam()]->atm && o){

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4], 0
	je	$LN88@MoveUnit
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	cmp	DWORD PTR [ecx+876], 0
	je	SHORT $LN88@MoveUnit
	cmp	DWORD PTR _o$9[ebp], 0
	je	SHORT $LN88@MoveUnit

; 648  : 					TeamInfo[GetTeam()]->atm->SendATMMessage(
; 649  : 						o->Id(), GetTeam(), FalconAirTaskingMessage::atmZapAirbase, 0, 0, NULL, 0
; 650  : 					);

	push	0
	push	0
	push	0
	push	0
	push	6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$9[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	call	?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z ; AirTaskingManagerClass::SendATMMessage

; 651  : 					return 0;

	xor	eax, eax
	jmp	$LN98@MoveUnit
$LN88@MoveUnit:

; 652  : 				}
; 653  : 			}
; 654  : 			//End
; 655  : 			CampaignTime nextTime = TheCampaign.CurrentTime;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR _nextTime$20[ebp], eax

; 656  : 			if (
; 657  : 				!HasPilots() && (((long)(w->GetWPDepartureTime() - TheCampaign.CurrentTime)) <= PILOT_ASSIGN_TIME)
; 658  : 			){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasPilots@UnitClass@@QAEHXZ		; UnitClass::HasPilots
	test	eax, eax
	jne	SHORT $LN87@MoveUnit
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	sub	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	cmp	eax, DWORD PTR ?PILOT_ASSIGN_TIME@@3JA	; PILOT_ASSIGN_TIME
	jg	SHORT $LN87@MoveUnit

; 659  : 				Squadron sq = (Squadron)GetUnitSquadron();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _sq$7[ebp], eax

; 660  : 				if (!sq || sq->AssignPilots(this)){

	cmp	DWORD PTR _sq$7[ebp], 0
	je	SHORT $LN85@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sq$7[ebp]
	call	?AssignPilots@SquadronClass@@QAEHPAVFlightClass@@@Z ; SquadronClass::AssignPilots
	test	eax, eax
	je	SHORT $LN86@MoveUnit
$LN85@MoveUnit:

; 661  : 					nextTime = w->GetWPDepartureTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	DWORD PTR _nextTime$20[ebp], eax
$LN86@MoveUnit:

; 662  : 				}
; 663  : 			}

	jmp	SHORT $LN82@MoveUnit
$LN87@MoveUnit:

; 664  : 			else if (!HasPilots()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasPilots@UnitClass@@QAEHXZ		; UnitClass::HasPilots
	test	eax, eax
	jne	SHORT $LN83@MoveUnit

; 665  : 				nextTime = w->GetWPDepartureTime() - PILOT_ASSIGN_TIME;

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	sub	eax, DWORD PTR ?PILOT_ASSIGN_TIME@@3JA	; PILOT_ASSIGN_TIME
	mov	DWORD PTR _nextTime$20[ebp], eax

; 666  : 			}
; 667  : 			else {

	jmp	SHORT $LN82@MoveUnit
$LN83@MoveUnit:

; 668  : 				nextTime = w->GetWPDepartureTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	DWORD PTR _nextTime$20[ebp], eax
$LN82@MoveUnit:

; 669  : 			}
; 670  : 			SetLastCheck(nextTime + 1 - UpdateTime());

	mov	esi, DWORD PTR _nextTime$20[ebp]
	add	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateTime@UnitClass@@QBEKXZ		; UnitClass::UpdateTime
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLastCheck@UnitClass@@QAEXK@Z	; UnitClass::SetLastCheck

; 671  : 			SetUnitLastMove(nextTime);

	mov	edx, DWORD PTR _nextTime$20[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+592]
	call	eax

; 672  : 			SetCombatTime(nextTime);

	mov	ecx, DWORD PTR _nextTime$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+596]
	call	edx

; 673  : 			return 0;

	xor	eax, eax
	jmp	$LN98@MoveUnit
$LN90@MoveUnit:

; 674  : 		}
; 675  : 	}
; 676  : 	Squadron sq = (Squadron)GetUnitSquadron();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	call	eax
	mov	DWORD PTR _sq$[ebp], eax

; 677  : 	// Check for pilots once more
; 678  : 	if (!HasPilots()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasPilots@UnitClass@@QAEHXZ		; UnitClass::HasPilots
	test	eax, eax
	jne	SHORT $LN80@MoveUnit

; 679  : 		//Squadron	sq = (Squadron)GetUnitSquadron();
; 680  : 		if (sq && !sq->AssignPilots(this)){

	cmp	DWORD PTR _sq$[ebp], 0
	je	SHORT $LN80@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sq$[ebp]
	call	?AssignPilots@SquadronClass@@QAEHPAVFlightClass@@@Z ; SquadronClass::AssignPilots
	test	eax, eax
	jne	SHORT $LN80@MoveUnit

; 681  : 			CancelFlight(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CancelFlight@@YAXPAVFlightClass@@@Z	; CancelFlight
	add	esp, 4

; 682  : 
; 683  : 			return -1;

	or	eax, -1
	jmp	$LN98@MoveUnit
$LN80@MoveUnit:

; 684  : 		}
; 685  : 	}
; 686  : 
; 687  : 	SetMoving(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoving@UnitClass@@QAEXH@Z		; UnitClass::SetMoving

; 688  : 	SetEmitting(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEmitting@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetEmitting

; 689  : 
; 690  : #ifdef GILMANS_BEAM_TACTIC
; 691  : 	if (Locked() && TheCampaign.CurrentTime - last_enemy_lock_time > ENEMY_LOCK_TIMEOUT){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Locked@UnitClass@@QAEHXZ		; UnitClass::Locked
	test	eax, eax
	je	SHORT $LN79@MoveUnit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	ecx, DWORD PTR [eax+284]
	cmp	ecx, 4000				; 00000fa0H
	jbe	SHORT $LN79@MoveUnit

; 692  : 		SetLocked(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocked@UnitClass@@QAEXH@Z		; UnitClass::SetLocked
$LN79@MoveUnit:

; 693  : 	}
; 694  : #endif
; 695  : 
; 696  : 	// This is it for deaggregated flights
; 697  : 	if (!IsAggregate()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN78@MoveUnit

; 698  : 		return 0;

	xor	eax, eax
	jmp	$LN98@MoveUnit
$LN78@MoveUnit:

; 699  : 	}
; 700  : 
; 701  : 	// Check tactics
; 702  : 	w = ResetCurrentWP(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?ResetCurrentWP@@YAPAVWayPointClass@@PAVUnitClass@@@Z ; ResetCurrentWP
	add	esp, 4
	mov	DWORD PTR _w$[ebp], eax

; 703  : 	if (!w){

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN77@MoveUnit

; 704  : 		return -1;

	or	eax, -1
	jmp	$LN98@MoveUnit
$LN77@MoveUnit:

; 705  : 	}
; 706  : 	tactic = ChooseTactic();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+496]
	call	eax
	mov	BYTE PTR _tactic$[ebp], al

; 707  : 
; 708  : 	// 2002-02-12 MN check if target is occupied by us now and set tactic to abort if so
; 709  : 	// 2002-03-03 MN fix, only check for strike mission flights, fixes aborting resupply flights
; 710  : 	if (GetUnitMission() > AMIS_SEADESCORT && GetUnitMission() < AMIS_FAC){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 12					; 0000000cH
	jle	$LN74@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 19					; 00000013H
	jge	SHORT $LN74@MoveUnit

; 711  : 		WayPoint tw = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _tw$18[ebp], eax
$LN75@MoveUnit:

; 712  : 		while (tw){

	cmp	DWORD PTR _tw$18[ebp], 0
	je	SHORT $LN74@MoveUnit

; 713  : 			if (!(tw->GetWPFlags() & WPF_TARGET)){

	mov	ecx, DWORD PTR _tw$18[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	jne	SHORT $LN73@MoveUnit

; 714  : 				tw = tw->GetNextWP();

	mov	ecx, DWORD PTR _tw$18[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tw$18[ebp], eax

; 715  : 				continue;

	jmp	SHORT $LN75@MoveUnit
$LN73@MoveUnit:

; 716  : 			}
; 717  : 			CampEntity target;
; 718  : 			target = tw->GetWPTarget();

	mov	ecx, DWORD PTR _tw$18[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _target$10[ebp], eax

; 719  : 			if (target && (target->GetTeam() == GetTeam())){

	cmp	DWORD PTR _target$10[ebp], 0
	je	SHORT $LN72@MoveUnit
	mov	ecx, DWORD PTR _target$10[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$10[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN72@MoveUnit

; 720  : 				tactic = ATACTIC_ABORT;

	mov	BYTE PTR _tactic$[ebp], 12		; 0000000cH
$LN72@MoveUnit:

; 721  : 			}
; 722  : 			break;

	jmp	SHORT $LN74@MoveUnit

; 723  : 		}

	jmp	SHORT $LN75@MoveUnit
$LN74@MoveUnit:

; 724  : 	}
; 725  : 
; 726  : 	// Two options- follow waypoints, or do a tactic
; 727  : 	GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 728  : 
; 729  : 	if (
; 730  : 		(tactic == ATACTIC_ENGAGE_AIR) || 
; 731  : 		(tactic == ATACTIC_SHOOT_AND_RUN) || 
; 732  : 		(tactic == ATACTIC_ENGAGE_STRIKE) || 
; 733  : 		(tactic == ATACTIC_ENGAGE_SURFACE)
; 734  : 	){

	movzx	ecx, BYTE PTR _tactic$[ebp]
	cmp	ecx, 1
	je	SHORT $LN70@MoveUnit
	movzx	edx, BYTE PTR _tactic$[ebp]
	cmp	edx, 2
	je	SHORT $LN70@MoveUnit
	movzx	eax, BYTE PTR _tactic$[ebp]
	cmp	eax, 4
	je	SHORT $LN70@MoveUnit
	movzx	ecx, BYTE PTR _tactic$[ebp]
	cmp	ecx, 5
	jne	$LN71@MoveUnit
$LN70@MoveUnit:

; 735  : 		// We're engaged- head towards/intercept our target
; 736  : 		vector	collPoint;
; 737  : 		e = GetTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _e$[ebp], eax

; 738  : 		e->GetLocation(&nx,&ny);

	lea	edx, DWORD PTR _ny$[ebp]
	push	edx
	lea	eax, DWORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 739  : 		if ((e->IsAirplane() || e->IsUnit()) && DistSqu(x,y,nx,ny) > 10*10 && FindCollisionPoint(e,&collPoint,FALSE)){

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	SHORT $LN68@MoveUnit
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN69@MoveUnit
$LN68@MoveUnit:
	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cmp	eax, 100				; 00000064H
	jle	SHORT $LN69@MoveUnit
	push	0
	lea	edx, DWORD PTR _collPoint$23[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindCollisionPoint@FlightClass@@QAEHPAVFalconEntity@@PAUvector@@H@Z ; FlightClass::FindCollisionPoint
	test	eax, eax
	je	SHORT $LN69@MoveUnit

; 740  : 			// KCK HACK: < x km, just fly towards their location
; 741  : 			// sfr: xy order
; 742  : 			::vector pos = {collPoint.x, collPoint.y};

	movss	xmm0, DWORD PTR _collPoint$23[ebp]
	movss	DWORD PTR _pos$24[ebp], xmm0
	movss	xmm0, DWORD PTR _collPoint$23[ebp+4]
	movss	DWORD PTR _pos$24[ebp+4], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _pos$24[ebp+8], ecx

; 743  : 			//nx = SimToGrid(collPoint.y);
; 744  : 			//ny = SimToGrid(collPoint.x);
; 745  : 			ConvertSimToGrid(&pos, &nx, &ny);

	lea	edx, DWORD PTR _ny$[ebp]
	push	edx
	lea	eax, DWORD PTR _nx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$24[ebp]
	push	ecx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH
$LN69@MoveUnit:

; 746  : 		}
; 747  : 		// Don't stick around in one place if we're already there, keep flying around
; 748  : 		if (x == nx && y == ny){

	movsx	edx, WORD PTR _x$[ebp]
	movsx	eax, WORD PTR _nx$[ebp]
	cmp	edx, eax
	jne	SHORT $LN67@MoveUnit
	movsx	ecx, WORD PTR _y$[ebp]
	movsx	edx, WORD PTR _ny$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN67@MoveUnit

; 749  : 			nx = x + dx[last_direction];

	movsx	eax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	movsx	ecx, WORD PTR ?dx@@3PAFA[edx*2]
	add	eax, ecx
	mov	WORD PTR _nx$[ebp], ax

; 750  : 			ny = y + dy[last_direction];

	movsx	edx, WORD PTR _y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+379]
	movsx	eax, WORD PTR ?dy@@3PAFA[ecx*2]
	add	edx, eax
	mov	WORD PTR _ny$[ebp], dx
$LN67@MoveUnit:

; 751  : 		}
; 752  : 		set_yaw = 1;

	mov	BYTE PTR _set_yaw$[ebp], 1
	jmp	$LN47@MoveUnit
$LN71@MoveUnit:

; 753  : 	}
; 754  : #ifdef GILMANS_BEAM_TACTIC
; 755  : 	else if (tactic == ATACTIC_BEAM){

	movzx	ecx, BYTE PTR _tactic$[ebp]
	cmp	ecx, 3
	jne	$LN65@MoveUnit

; 756  : 		int		eh,hd;
; 757  : 		e = (CampEntity) vuDatabase->Find(enemy_locker);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+308]
	push	eax
	mov	ecx, DWORD PTR [edx+304]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 758  : 		if (!e || !e->IsFlight()){

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN63@MoveUnit
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	jne	SHORT $LN64@MoveUnit
$LN63@MoveUnit:

; 759  : 			SetLocked(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocked@UnitClass@@QAEXH@Z		; UnitClass::SetLocked

; 760  : 			return 0;

	xor	eax, eax
	jmp	$LN98@MoveUnit
$LN64@MoveUnit:

; 761  : 		}
; 762  : 		// Determine heading to beam
; 763  : 		h = last_direction;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+379]
	mov	BYTE PTR _h$[ebp], cl

; 764  : 		eh = ((Flight)e)->last_direction;

	mov	edx, DWORD PTR _e$[ebp]
	movzx	eax, BYTE PTR [edx+379]
	mov	DWORD PTR _eh$8[ebp], eax

; 765  : 		hd = (eh - last_direction);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	mov	eax, DWORD PTR _eh$8[ebp]
	sub	eax, edx
	mov	DWORD PTR _hd$22[ebp], eax

; 766  : 		if (hd < -4)

	cmp	DWORD PTR _hd$22[ebp], -4		; fffffffcH
	jge	SHORT $LN62@MoveUnit

; 767  : 			hd += 8;

	mov	ecx, DWORD PTR _hd$22[ebp]
	add	ecx, 8
	mov	DWORD PTR _hd$22[ebp], ecx
	jmp	SHORT $LN60@MoveUnit
$LN62@MoveUnit:

; 768  : 		else if (hd > 4)

	cmp	DWORD PTR _hd$22[ebp], 4
	jle	SHORT $LN60@MoveUnit

; 769  : 			hd -= 8;

	mov	edx, DWORD PTR _hd$22[ebp]
	sub	edx, 8
	mov	DWORD PTR _hd$22[ebp], edx
$LN60@MoveUnit:

; 770  : 		if (hd <= 0)

	cmp	DWORD PTR _hd$22[ebp], 0
	jg	SHORT $LN59@MoveUnit

; 771  : 			h = (eh + 10)%8;

	mov	eax, DWORD PTR _eh$8[ebp]
	add	eax, 10					; 0000000aH
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN100@MoveUnit
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN100@MoveUnit:
	mov	BYTE PTR _h$[ebp], al
	jmp	SHORT $LN57@MoveUnit
$LN59@MoveUnit:

; 772  : 		else if (hd > 0)

	cmp	DWORD PTR _hd$22[ebp], 0
	jle	SHORT $LN57@MoveUnit

; 773  : 			h = (eh + 6)%8;

	mov	ecx, DWORD PTR _eh$8[ebp]
	add	ecx, 6
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN101@MoveUnit
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN101@MoveUnit:
	mov	BYTE PTR _h$[ebp], cl
$LN57@MoveUnit:

; 774  : 		// Set our destination a few km to that direction
; 775  : 		nx = x+5*dx[h];

	movsx	edx, WORD PTR _x$[ebp]
	movzx	eax, BYTE PTR _h$[ebp]
	movsx	ecx, WORD PTR ?dx@@3PAFA[eax*2]
	imul	ecx, 5
	add	edx, ecx
	mov	WORD PTR _nx$[ebp], dx

; 776  : 		ny = y+5*dy[h];

	movsx	edx, WORD PTR _y$[ebp]
	movzx	eax, BYTE PTR _h$[ebp]
	movsx	ecx, WORD PTR ?dy@@3PAFA[eax*2]
	imul	ecx, 5
	add	edx, ecx
	mov	WORD PTR _ny$[ebp], dx

; 777  : 		set_yaw = 1;

	mov	BYTE PTR _set_yaw$[ebp], 1
	jmp	$LN47@MoveUnit
$LN65@MoveUnit:

; 778  : 	}
; 779  : #endif
; 780  : 	else if (tactic == ATACTIC_ENGAGE_DEF){

	movzx	edx, BYTE PTR _tactic$[ebp]
	cmp	edx, 8
	jne	SHORT $LN55@MoveUnit

; 781  : 		// What should we do here? Currently, keep following our waypoints
; 782  : 		tactic = 0;

	mov	BYTE PTR _tactic$[ebp], 0

; 783  : 		follow_wps = TRUE;

	mov	BYTE PTR _follow_wps$[ebp], 1

; 784  : 		set_yaw = 1;

	mov	BYTE PTR _set_yaw$[ebp], 1
	jmp	$LN47@MoveUnit
$LN55@MoveUnit:

; 785  : 	}
; 786  : 	else if (tactic == ATACTIC_RETROGRADE){

	movzx	eax, BYTE PTR _tactic$[ebp]
	cmp	eax, 7
	jne	$LN53@MoveUnit

; 787  : 		// Pick a good location to run to
; 788  : 		// How about our home airbase?
; 789  : 		Objective o = (Objective)GetUnitAirbase();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+704]
	call	eax
	mov	DWORD PTR _o$5[ebp], eax

; 790  : 		if (AirbaseOperational(o)){ 

	mov	ecx, DWORD PTR _o$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AirbaseOperational@FlightClass@@QAEHPAVObjectiveClass@@@Z ; FlightClass::AirbaseOperational
	test	eax, eax
	je	SHORT $LN52@MoveUnit

; 791  : 			// JPO - 2nd test to see if we can land
; 792  : 			o->GetLocation(&nx,&ny);

	lea	edx, DWORD PTR _ny$[ebp]
	push	edx
	lea	eax, DWORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$5[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 793  : 			if (x == nx && y == ny){

	movsx	ecx, WORD PTR _x$[ebp]
	movsx	edx, WORD PTR _nx$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN51@MoveUnit
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR _ny$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN51@MoveUnit

; 794  : 				// RV - Biker don't unload Air Mobile over water 
; 795  : 				if (this->Cargo() && GetCover(nx, ny) != Water){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cargo@UnitClass@@QBEHXZ		; UnitClass::Cargo
	test	eax, eax
	je	SHORT $LN50@MoveUnit
	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	je	SHORT $LN50@MoveUnit

; 796  : 					this->UnloadUnit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnloadUnit@UnitClass@@QAEXXZ		; UnitClass::UnloadUnit
$LN50@MoveUnit:

; 797  : 				}
; 798  : 				// If we ran all the way home, land and quit.
; 799  : 				UpdateSquadronStatus(this, TRUE, FALSE);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z ; UpdateSquadronStatus
	add	esp, 12					; 0000000cH

; 800  : 				return -1;

	or	eax, -1
	jmp	$LN98@MoveUnit
$LN51@MoveUnit:

; 801  : 			}
; 802  : 		}
; 803  : 		else{

	jmp	SHORT $LN49@MoveUnit
$LN52@MoveUnit:

; 804  : 			AbortFlight(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?AbortFlight@@YAXPAVFlightClass@@@Z	; AbortFlight
	add	esp, 4
$LN49@MoveUnit:

; 805  : 		}
; 806  : 		set_yaw = 1;

	mov	BYTE PTR _set_yaw$[ebp], 1
	jmp	$LN47@MoveUnit
$LN53@MoveUnit:

; 807  : 	}
; 808  : 	else if (tactic == ATACTIC_ABORT){

	movzx	eax, BYTE PTR _tactic$[ebp]
	cmp	eax, 12					; 0000000cH
	jne	$LN47@MoveUnit

; 809  : 		if (GetUnitMission() != AMIS_ABORT){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 39					; 00000027H
	je	$LN46@MoveUnit

; 810  : 			// If we're not flying an abort path, make one
; 811  : 			// KCK NOTE: Abort for campaign aircraft is essentially RTB right now - we fly home
; 812  : 			AbortFlight(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AbortFlight@@YAXPAVFlightClass@@@Z	; AbortFlight
	add	esp, 4

; 813  : 			DumpWeapons();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+716]
	call	edx

; 814  : 			SetUnitMission(AMIS_ABORT);

	push	39					; 00000027H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax

; 815  : 			SetUnitTOT(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+624]
	call	eax

; 816  : 			GoHome(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?GoHome@@YAXPAVFlightClass@@@Z		; GoHome
	add	esp, 4

; 817  : 			w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 818  : 			if (w){

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN45@MoveUnit

; 819  : 				SetCurrentUnitWP(w);

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z ; UnitClass::SetCurrentUnitWP

; 820  : 				w->GetWPLocation(&nx,&ny);

	lea	eax, DWORD PTR _ny$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 821  : 			}
; 822  : 			else {

	jmp	SHORT $LN44@MoveUnit
$LN45@MoveUnit:

; 823  : 				// If we can't find a valid landing place, just regroup now..
; 824  : 				RegroupFlight(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?RegroupFlight@@YAHPAVFlightClass@@@Z	; RegroupFlight
	add	esp, 4

; 825  : 				return -1;

	or	eax, -1
	jmp	$LN98@MoveUnit
$LN44@MoveUnit:

; 826  : 			}
; 827  : 			SetUnitDestination(nx,ny);

	movzx	eax, WORD PTR _ny$[ebp]
	push	eax
	movzx	ecx, WORD PTR _nx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitDestination@UnitClass@@QAEXFF@Z	; UnitClass::SetUnitDestination
$LN46@MoveUnit:

; 828  : 		}
; 829  : 		follow_wps = TRUE;

	mov	BYTE PTR _follow_wps$[ebp], 1
$LN47@MoveUnit:

; 830  : 	}
; 831  : 
; 832  : 	if (!tactic || !nx || !ny){

	movzx	edx, BYTE PTR _tactic$[ebp]
	test	edx, edx
	je	SHORT $LN42@MoveUnit
	movsx	eax, WORD PTR _nx$[ebp]
	test	eax, eax
	je	SHORT $LN42@MoveUnit
	movsx	ecx, WORD PTR _ny$[ebp]
	test	ecx, ecx
	jne	$LN43@MoveUnit
$LN42@MoveUnit:

; 833  : 		// Otherwise, follow waypoints
; 834  : 		ShiAssert(w);
; 835  : 		w->GetWPLocation(&nx,&ny);

	lea	edx, DWORD PTR _ny$[ebp]
	push	edx
	lea	eax, DWORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 836  : 		follow_wps = TRUE;

	mov	BYTE PTR _follow_wps$[ebp], 1

; 837  : 		// If we're ahead of schedule, circle (we'll eventually get somewhere where we need to turn towards the WP)
; 838  : 		if (ETA() < w->GetWPArrivalTime() && !Aborted()){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+720]
	call	eax
	mov	esi, eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	cmp	esi, eax
	jae	SHORT $LN41@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	jne	SHORT $LN41@MoveUnit

; 839  : 			h = last_direction + 4 & 0x7;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	add	edx, 4
	and	edx, 7
	mov	BYTE PTR _h$[ebp], dl

; 840  : 			nx = x + dx[h];

	movsx	eax, WORD PTR _x$[ebp]
	movzx	ecx, BYTE PTR _h$[ebp]
	movsx	edx, WORD PTR ?dx@@3PAFA[ecx*2]
	add	eax, edx
	mov	WORD PTR _nx$[ebp], ax

; 841  : 			ny = y + dy[h];

	movsx	eax, WORD PTR _y$[ebp]
	movzx	ecx, BYTE PTR _h$[ebp]
	movsx	edx, WORD PTR ?dy@@3PAFA[ecx*2]
	add	eax, edx
	mov	WORD PTR _ny$[ebp], ax
$LN41@MoveUnit:

; 842  : 		}
; 843  : 		set_yaw = 2;

	mov	BYTE PTR _set_yaw$[ebp], 2
$LN43@MoveUnit:

; 844  : 	}
; 845  : 
; 846  : 	CampaignTime start_moving = last_move;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR _start_moving$[ebp], ecx

; 847  : 
; 848  : 	// Move, if we're not at destination
; 849  : 	if (x!=nx || y!=ny){

	movsx	edx, WORD PTR _x$[ebp]
	movsx	eax, WORD PTR _nx$[ebp]
	cmp	edx, eax
	jne	SHORT $LN39@MoveUnit
	movsx	ecx, WORD PTR _y$[ebp]
	movsx	edx, WORD PTR _ny$[ebp]
	cmp	ecx, edx
	je	$LN4@MoveUnit
$LN39@MoveUnit:

; 850  : 		if (w) {

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN36@MoveUnit

; 851  : 			// 2001-03-27 HACK BY S.G. IF THE NEXT WAYPOINT IS A REPEAT WAYPOINT, USE OUR CURRENT LOCATION
; 852  : 			if (w->GetNextWP() && (w->GetNextWP()->GetWPFlags() & WPF_REPEAT)){

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	je	SHORT $LN37@MoveUnit
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	ecx, eax
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	je	SHORT $LN37@MoveUnit

; 853  : 				ow = NULL;

	mov	DWORD PTR _ow$[ebp], 0

; 854  : 			}
; 855  : 			else {

	jmp	SHORT $LN36@MoveUnit
$LN37@MoveUnit:

; 856  : 				// END OF HACK
; 857  : 				ow = w->GetPrevWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _ow$[ebp], eax
$LN36@MoveUnit:

; 858  : 			}
; 859  : 		}
; 860  : 
; 861  : 		if (ow){

	cmp	DWORD PTR _ow$[ebp], 0
	je	SHORT $LN35@MoveUnit

; 862  : 			ow->GetWPLocation(&ox,&oy);

	lea	eax, DWORD PTR _oy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ox$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ow$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 863  : 		}
; 864  : 		else {

	jmp	SHORT $LN34@MoveUnit
$LN35@MoveUnit:

; 865  : 			GetLocation(&ox,&oy);

	lea	edx, DWORD PTR _oy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN34@MoveUnit:

; 866  : 		}
; 867  : 
; 868  : 		while (moving){

	movzx	ecx, BYTE PTR _moving$[ebp]
	test	ecx, ecx
	je	$LN32@MoveUnit

; 869  : 			h = DirectionTo(ox,oy,nx,ny,x,y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	movzx	eax, WORD PTR _oy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ox$[ebp]
	push	ecx
	call	?DirectionTo@@YAEFFFFFF@Z		; DirectionTo
	add	esp, 24					; 00000018H
	mov	BYTE PTR _h$[ebp], al

; 870  : 			if (h > 7){

	movzx	edx, BYTE PTR _h$[ebp]
	cmp	edx, 7
	jle	SHORT $LN31@MoveUnit

; 871  : 				moving = 0;

	mov	BYTE PTR _moving$[ebp], 0

; 872  : 				h = Here;

	mov	BYTE PTR _h$[ebp], 8
$LN31@MoveUnit:

; 873  : 			}
; 874  : 
; 875  : 			// This is kinda hacky - basically, limit change in direction to 45 deg per move
; 876  : 			if (h > last_direction){

	movzx	eax, BYTE PTR _h$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	cmp	eax, edx
	jle	SHORT $LN30@MoveUnit

; 877  : 				if (h - last_direction < 5){

	movzx	eax, BYTE PTR _h$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	sub	eax, edx
	cmp	eax, 5
	jge	SHORT $LN29@MoveUnit

; 878  : 					h = (last_direction+1) & 0x07;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+379]
	add	ecx, 1
	and	ecx, 7
	mov	BYTE PTR _h$[ebp], cl

; 879  : 				}
; 880  : 				else {

	jmp	SHORT $LN28@MoveUnit
$LN29@MoveUnit:

; 881  : 					h = (last_direction+7) & 0x07;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+379]
	add	eax, 7
	and	eax, 7
	mov	BYTE PTR _h$[ebp], al
$LN28@MoveUnit:

; 882  : 				}

	jmp	SHORT $LN24@MoveUnit
$LN30@MoveUnit:

; 883  : 			}
; 884  : 			else if (h < last_direction){

	movzx	ecx, BYTE PTR _h$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+379]
	cmp	ecx, eax
	jge	SHORT $LN24@MoveUnit

; 885  : 				if (last_direction - h < 5){

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	movzx	eax, BYTE PTR _h$[ebp]
	sub	edx, eax
	cmp	edx, 5
	jge	SHORT $LN25@MoveUnit

; 886  : 					h = (last_direction+7) & 0x07;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	add	edx, 7
	and	edx, 7
	mov	BYTE PTR _h$[ebp], dl

; 887  : 				}
; 888  : 				else{

	jmp	SHORT $LN24@MoveUnit
$LN25@MoveUnit:

; 889  : 					h = (last_direction+1) & 0x07;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+379]
	add	ecx, 1
	and	ecx, 7
	mov	BYTE PTR _h$[ebp], cl
$LN24@MoveUnit:

; 890  : 				}
; 891  : 			}
; 892  : 
; 893  : 			if (ChangeUnitLocation(h) > 0){

	movzx	edx, BYTE PTR _h$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeUnitLocation@UnitClass@@QAEHE@Z	; UnitClass::ChangeUnitLocation
	test	eax, eax
	jle	$LN23@MoveUnit

; 894  : 				moved++;

	mov	al, BYTE PTR _moved$[ebp]
	add	al, 1
	mov	BYTE PTR _moved$[ebp], al

; 895  : 				GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 896  : 
; 897  : 				// Check for WP arrival
; 898  : 				if (follow_wps && DistSqu(x,y,nx,ny) < 1.2F){

	movzx	eax, BYTE PTR _follow_wps$[ebp]
	test	eax, eax
	je	SHORT $LN22@MoveUnit
	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f99999a
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@MoveUnit

; 899  : 					ox = nx;

	mov	dx, WORD PTR _nx$[ebp]
	mov	WORD PTR _ox$[ebp], dx

; 900  : 					oy = ny;

	mov	ax, WORD PTR _ny$[ebp]
	mov	WORD PTR _oy$[ebp], ax

; 901  : 					w = ResetCurrentWP(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?ResetCurrentWP@@YAPAVWayPointClass@@PAVUnitClass@@@Z ; ResetCurrentWP
	add	esp, 4
	mov	DWORD PTR _w$[ebp], eax

; 902  : 					if (!w){

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN21@MoveUnit

; 903  : 						return -1;

	or	eax, -1
	jmp	$LN98@MoveUnit
$LN21@MoveUnit:

; 904  : 					}
; 905  : 					w->GetWPLocation(&nx,&ny);

	lea	edx, DWORD PTR _ny$[ebp]
	push	edx
	lea	eax, DWORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation
$LN22@MoveUnit:

; 906  : 				}
; 907  : 
; 908  : 				// If we leave the map, act as if we landed.
; 909  : 				if ((x < 0) || (x >= Map_Max_X) || (y < 0) || (y >= Map_Max_Y)){

	movsx	ecx, WORD PTR _x$[ebp]
	test	ecx, ecx
	jl	SHORT $LN19@MoveUnit
	movsx	edx, WORD PTR _x$[ebp]
	movsx	eax, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	cmp	edx, eax
	jge	SHORT $LN19@MoveUnit
	movsx	ecx, WORD PTR _y$[ebp]
	test	ecx, ecx
	jl	SHORT $LN19@MoveUnit
	movsx	edx, WORD PTR _y$[ebp]
	movsx	eax, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	cmp	edx, eax
	jl	SHORT $LN20@MoveUnit
$LN19@MoveUnit:

; 910  : 					UpdateSquadronStatus(this, TRUE, FALSE);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?UpdateSquadronStatus@@YAXPAVFlightClass@@HH@Z ; UpdateSquadronStatus
	add	esp, 12					; 0000000cH

; 911  : 					return -1;

	or	eax, -1
	jmp	$LN98@MoveUnit
$LN20@MoveUnit:

; 912  : 				}
; 913  : 				SetLastDirection(h);

	movzx	edx, BYTE PTR _h$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLastDirection@FlightClass@@QAEXE@Z	; FlightClass::SetLastDirection

; 914  : 			}
; 915  : 			else {

	jmp	SHORT $LN18@MoveUnit
$LN23@MoveUnit:

; 916  : 				moving = 0;

	mov	BYTE PTR _moving$[ebp], 0
$LN18@MoveUnit:

; 917  : 			}
; 918  : 
; 919  : 			// Now do combat
; 920  : 			if (GetCombatTime() > CombatTime()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+648]
	call	eax
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+532]
	call	eax
	cmp	esi, eax
	jbe	SHORT $LN17@MoveUnit

; 921  : 				DoCombat();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	call	eax
$LN17@MoveUnit:

; 922  : 			}
; 923  : 		}

	jmp	$LN34@MoveUnit
$LN32@MoveUnit:

; 924  : 
; 925  : 		if (moved){

	movzx	ecx, BYTE PTR _moved$[ebp]
	test	ecx, ecx
	je	$LN4@MoveUnit

; 926  : 			CampaignTime move_time = last_move - start_moving;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+268]
	sub	eax, DWORD PTR _start_moving$[ebp]
	mov	DWORD PTR _move_time$11[ebp], eax

; 927  : 			UnitClassDataType *uc = GetUnitClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$4[ebp], eax

; 928  : 
; 929  : 			if (move_time > CampaignMinutes){

	cmp	DWORD PTR _move_time$11[ebp], 60000	; 0000ea60H
	jbe	SHORT $LN15@MoveUnit

; 930  : 				move_time = CampaignMinutes;

	mov	DWORD PTR _move_time$11[ebp], 60000	; 0000ea60H
$LN15@MoveUnit:

; 931  : 			}
; 932  : 			UseFuel((move_time * uc->Rate) / CampaignMinutes);

	mov	ecx, DWORD PTR _uc$4[ebp]
	movsx	edx, WORD PTR [ecx+264]
	mov	eax, edx
	imul	eax, DWORD PTR _move_time$11[ebp]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+740]
	call	edx

; 933  : 			TheCampaign.MissionEvaluator->RegisterMove(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?RegisterMove@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z ; MissionEvaluationClass::RegisterMove

; 934  : 			
; 935  : 			// Adjust altitude - JPO convert so we are speaking the same coordinate system
; 936  : 			// JB 020217 Reduce altitude of units have have run out of fuel.
; 937  : 			// Kill units which have hit the ground.
; 938  : 			if (CalculateFuelAvailable(255) == 0){

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	test	eax, eax
	jne	$LN14@MoveUnit

; 939  : 				int newalt = (int)(-ZPos() - 250);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1575[ebp]
	movss	xmm0, DWORD PTR tv1575[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR __real@437a0000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _newalt$6[ebp], ecx

; 940  : 				if (newalt <= TheMap.GetMEA(XPos(),YPos())){

	cvtsi2ss xmm0, DWORD PTR _newalt$6[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1677[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	fstp	DWORD PTR tv1587[ebp]
	movss	xmm0, DWORD PTR tv1587[ebp]
	movss	xmm1, DWORD PTR tv1677[ebp]
	comiss	xmm0, xmm1
	jb	SHORT $LN13@MoveUnit

; 941  : 					KillUnit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 942  : 				}
; 943  : 				else {

	jmp	SHORT $LN12@MoveUnit
$LN13@MoveUnit:

; 944  : 					SetUnitAltitude(newalt);

	mov	edx, DWORD PTR _newalt$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitAltitude@UnitClass@@QAEXH@Z	; UnitClass::SetUnitAltitude
$LN12@MoveUnit:

; 945  : 				}
; 946  : 			}
; 947  : 			else if (

	jmp	$LN10@MoveUnit
$LN14@MoveUnit:

; 948  : 				w && !(w->GetWPFlags() & WPF_HOLDCURRENT) &&
; 949  : 				FloatToInt32(ZPos()) != FloatToInt32(
; 950  : 					-1.0F * AdjustAltitudeForMSL_AGL (XPos(), YPos(), -1.0F*w->GetWPAltitude())
; 951  : 				)
; 952  : 			){

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN10@MoveUnit
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2048				; 00000800H
	jne	$LN10@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?AdjustAltitudeForMSL_AGL@@YAMMMM@Z	; AdjustAltitudeForMSL_AGL
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR tv1609[ebp]
	movss	xmm0, DWORD PTR tv1609[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cmp	esi, eax
	je	$LN10@MoveUnit

; 953  : 				int		newalt,curalt = GetUnitAltitude();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitAltitude@UnitClass@@QAEHXZ	; UnitClass::GetUnitAltitude
	mov	DWORD PTR _curalt$17[ebp], eax

; 954  : 				int		max_climb = FloatToInt32(moved * KM_TO_FT * 0.5F);

	movzx	eax, BYTE PTR _moved$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@454cffae
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _max_climb$15[ebp], eax

; 955  : 				newalt = FloatToInt32(-1.0F * AdjustAltitudeForMSL_AGL (XPos(), YPos(), -1.0F*w->GetWPAltitude()));

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?AdjustAltitudeForMSL_AGL@@YAMMMM@Z	; AdjustAltitudeForMSL_AGL
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR tv1630[ebp]
	movss	xmm0, DWORD PTR tv1630[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _newalt$19[ebp], eax

; 956  : 				if (newalt - curalt > max_climb){

	mov	ecx, DWORD PTR _newalt$19[ebp]
	sub	ecx, DWORD PTR _curalt$17[ebp]
	cmp	ecx, DWORD PTR _max_climb$15[ebp]
	jle	SHORT $LN9@MoveUnit

; 957  : 					newalt = curalt + max_climb;

	mov	edx, DWORD PTR _curalt$17[ebp]
	add	edx, DWORD PTR _max_climb$15[ebp]
	mov	DWORD PTR _newalt$19[ebp], edx
	jmp	SHORT $LN7@MoveUnit
$LN9@MoveUnit:

; 958  : 				}
; 959  : 				else if (curalt - newalt > max_climb){

	mov	eax, DWORD PTR _curalt$17[ebp]
	sub	eax, DWORD PTR _newalt$19[ebp]
	cmp	eax, DWORD PTR _max_climb$15[ebp]
	jle	SHORT $LN7@MoveUnit

; 960  : 					newalt = curalt - max_climb;

	mov	ecx, DWORD PTR _curalt$17[ebp]
	sub	ecx, DWORD PTR _max_climb$15[ebp]
	mov	DWORD PTR _newalt$19[ebp], ecx
$LN7@MoveUnit:

; 961  : 				}
; 962  : 				SetUnitAltitude(newalt);

	mov	edx, DWORD PTR _newalt$19[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUnitAltitude@UnitClass@@QAEXH@Z	; UnitClass::SetUnitAltitude
$LN10@MoveUnit:

; 963  : 			}
; 964  : 
; 965  : 			if (set_yaw == 1){

	movzx	eax, BYTE PTR _set_yaw$[ebp]
	cmp	eax, 1
	jne	SHORT $LN6@MoveUnit

; 966  : 				// Set yaw to current heading
; 967  : 				SetYPR(last_direction*45*DTR,0.0F,0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+379]
	imul	edx, 45					; 0000002dH
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR
	jmp	$LN4@MoveUnit
$LN6@MoveUnit:

; 968  : 			}
; 969  : 			else if (set_yaw == 2){

	movzx	eax, BYTE PTR _set_yaw$[ebp]
	cmp	eax, 2
	jne	$LN4@MoveUnit

; 970  : 				// Set yaw to heading to next waypoint
; 971  : 				float	xd,yd,zd;
; 972  : 				w->GetLocation(&xd,&yd,&zd);

	lea	ecx, DWORD PTR _zd$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _yd$12[ebp]
	push	edx
	lea	eax, DWORD PTR _xd$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 973  : 				xd -= XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1651[ebp]
	movss	xmm0, DWORD PTR _xd$13[ebp]
	subss	xmm0, DWORD PTR tv1651[ebp]
	movss	DWORD PTR _xd$13[ebp], xmm0

; 974  : 				yd -= YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1656[ebp]
	movss	xmm0, DWORD PTR _yd$12[ebp]
	subss	xmm0, DWORD PTR tv1656[ebp]
	movss	DWORD PTR _yd$12[ebp], xmm0

; 975  : 				SM_SCALAR y = static_cast<float>(atan2(yd,xd));

	cvtss2sd xmm0, DWORD PTR _xd$13[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _yd$12[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _y$16[ebp]

; 976  : 				// sfr: fixing the wpt bug
; 977  : 				if (y < 0){ y += VU_TWOPI; }

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _y$16[ebp]
	jbe	SHORT $LN3@MoveUnit
	movss	xmm0, DWORD PTR _y$16[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _y$16[ebp], xmm0
$LN3@MoveUnit:

; 978  : 				uchar d = static_cast<uchar>((y*RTD)/45);

	movss	xmm0, DWORD PTR _y$16[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	divss	xmm0, DWORD PTR __real@42340000
	cvttss2si ecx, xmm0
	mov	BYTE PTR _d$21[ebp], cl

; 979  : 				SetLastDirection(d); 

	movzx	edx, BYTE PTR _d$21[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLastDirection@FlightClass@@QAEXE@Z	; FlightClass::SetLastDirection
$LN4@MoveUnit:

; 980  : 			}
; 981  : 		}
; 982  : 	}
; 983  : 
; 984  : 
; 985  : 	if (Engaged()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN1@MoveUnit

; 986  : 		// Drop off any cargo we're carrying
; 987  : 		if (Cargo() && Losses()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cargo@UnitClass@@QBEHXZ		; UnitClass::Cargo
	test	eax, eax
	je	SHORT $LN1@MoveUnit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Losses@UnitClass@@QBEHXZ		; UnitClass::Losses
	test	eax, eax
	je	SHORT $LN1@MoveUnit

; 988  : 			AbortFlight(this);		// We'll drop cargo on an abort

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AbortFlight@@YAXPAVFlightClass@@@Z	; AbortFlight
	add	esp, 4
$LN1@MoveUnit:

; 989  : 		}
; 990  : 	}
; 991  : 
; 992  : 	return 0;

	xor	eax, eax
$LN98@MoveUnit:

; 993  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?MoveUnit@FlightClass@@UAEHK@Z ENDP			; FlightClass::MoveUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T1 = -124						; size = 8
$T2 = -116						; size = 8
$T3 = -108						; size = 8
$T4 = -100						; size = 8
$T5 = -92						; size = 8
$T6 = -84						; size = 8
$T7 = -76						; size = 8
$T8 = -68						; size = 8
$T9 = -60						; size = 8
$T10 = -52						; size = 8
$T11 = -44						; size = 8
_approxhitchance$ = -36					; size = 4
_w$ = -32						; size = 4
tv347 = -28						; size = 4
tv336 = -24						; size = 4
_omt$ = -20						; size = 4
_enemy_threat_bonus$ = -16				; size = 4
_tmt$ = -12						; size = 4
_this$ = -8						; size = 4
_score$ = -4						; size = 4
_e$ = 8							; size = 4
_knowledge$ = 12					; size = 4
_range$ = 16						; size = 4
?Reaction@FlightClass@@UAEHPAVCampBaseClass@@HM@Z PROC	; FlightClass::Reaction
; _this$ = ecx

; 1173 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1174 : 	int			score = 0,enemy_threat_bonus=1;

	mov	DWORD PTR _score$[ebp], 0
	mov	DWORD PTR _enemy_threat_bonus$[ebp], 1

; 1175 : 	MoveType	tmt,omt;
; 1176 : 	WayPoint	w;
; 1177 : 	int approxhitchance; // JB 010711
; 1178 : 
; 1179 : 	if (!e)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN47@Reaction

; 1180 : 		return 0;

	xor	eax, eax
	jmp	$LN48@Reaction
$LN47@Reaction:

; 1181 : 
; 1182 : 	if (GetUnitMission() == AMIS_NONE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	test	eax, eax
	jne	SHORT $LN46@Reaction

; 1183 : 		return 0;

	xor	eax, eax
	jmp	$LN48@Reaction
$LN46@Reaction:

; 1184 : 
; 1185 : 	// Some basic info.
; 1186 : 	omt = GetMovementType();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	DWORD PTR _omt$[ebp], eax

; 1187 : 	tmt = e->GetMovementType();

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	DWORD PTR _tmt$[ebp], eax

; 1188 : 	if (e->IsFlight() && !((Flight)e)->Moving())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN45@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	jne	SHORT $LN45@Reaction

; 1189 : 		return 0;			// Aircraft on ground are ignored (technically, strike aircraft could hit them.. but..)

	xor	eax, eax
	jmp	$LN48@Reaction
$LN45@Reaction:

; 1190 : 
; 1191 : 	// Score their threat to us
; 1192 : 	if (knowledge & FRIENDLY_DETECTED)

	mov	ecx, DWORD PTR _knowledge$[ebp]
	and	ecx, 4
	je	SHORT $LN44@Reaction

; 1193 : 		enemy_threat_bonus++;

	mov	edx, DWORD PTR _enemy_threat_bonus$[ebp]
	add	edx, 1
	mov	DWORD PTR _enemy_threat_bonus$[ebp], edx
$LN44@Reaction:

; 1194 : 	if (knowledge & FRIENDLY_IN_RANGE)

	mov	eax, DWORD PTR _knowledge$[ebp]
	and	eax, 8
	je	SHORT $LN43@Reaction

; 1195 : 		enemy_threat_bonus++;

	mov	ecx, DWORD PTR _enemy_threat_bonus$[ebp]
	add	ecx, 1
	mov	DWORD PTR _enemy_threat_bonus$[ebp], ecx
$LN43@Reaction:

; 1196 : 
; 1197 : 	// Bonus for them being our target
; 1198 : 	w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1199 : 	if (w && w->GetWPFlags() & WPF_TARGET && e->Id() == w->GetWPTargetID())

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN42@Reaction
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	je	SHORT $LN42@Reaction
	lea	edx, DWORD PTR $T11[ebp]
	push	edx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	push	eax
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN42@Reaction

; 1200 : 		score += 2 + GetAproxHitChance(tmt,FloatToInt32(range/2.0F))/10;

	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _tmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _score$[ebp]
	lea	eax, DWORD PTR [edx+eax+2]
	mov	DWORD PTR _score$[ebp], eax
$LN42@Reaction:

; 1201 : 	if (assigned_target && (e->Id() == assigned_target || (e->IsUnit() && ((Unit)e)->GetUnitParentID() == assigned_target)))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	$LN41@Reaction
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN40@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN41@Reaction
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+948]
	call	eax
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@Reaction
$LN40@Reaction:

; 1202 : 		score += 2 + GetAproxHitChance(tmt,FloatToInt32(range/2.0F))/5;

	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _tmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	edx, DWORD PTR _score$[ebp]
	lea	eax, DWORD PTR [edx+eax+2]
	mov	DWORD PTR _score$[ebp], eax
$LN41@Reaction:

; 1203 : 
; 1204 : 	// No more checks necessary vs objectives
; 1205 : 	if (!e->IsUnit())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	jne	SHORT $LN39@Reaction

; 1206 : 		return score;

	mov	eax, DWORD PTR _score$[ebp]
	jmp	$LN48@Reaction
$LN39@Reaction:

; 1207 : 
; 1208 : 	// we're a little interested if they're targetting us.
; 1209 : 	if (((Unit)e)->GetTargetID() == Id())

	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN38@Reaction

; 1210 : 		score += e->GetAproxHitChance(omt,0)/10 * enemy_threat_bonus;

	push	0
	mov	ecx, DWORD PTR _omt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+396]
	call	edx
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
	jmp	$LN34@Reaction
$LN38@Reaction:

; 1211 : 	// JB 010711 Flights on A2G missions do not engage other flights unless they are spotted.
; 1212 : 	else if (e->IsFlight() && e->GetTeam() != GetTeam() && !GetSpotted(e->GetTeam()))

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN34@Reaction
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN34@Reaction
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN34@Reaction

; 1213 : 	{
; 1214 : 		switch (GetUnitMission())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	DWORD PTR tv336[ebp], eax
	mov	ecx, DWORD PTR tv336[ebp]
	sub	ecx, 11					; 0000000bH
	mov	DWORD PTR tv336[ebp], ecx
	cmp	DWORD PTR tv336[ebp], 23		; 00000017H
	ja	SHORT $LN34@Reaction
	mov	edx, DWORD PTR tv336[ebp]
	movzx	eax, BYTE PTR $LN50@Reaction[edx]
	jmp	DWORD PTR $LN52@Reaction[eax*4]
$LN33@Reaction:

; 1215 : 		{
; 1216 : 			case AMIS_SEADSTRIKE:
; 1217 : 			case AMIS_SEADESCORT:
; 1218 : 			case AMIS_OCASTRIKE:
; 1219 : 			case AMIS_INTSTRIKE:
; 1220 : 			case AMIS_STRIKE:
; 1221 : 			case AMIS_DEEPSTRIKE:
; 1222 : 			case AMIS_STSTRIKE:
; 1223 : 			case AMIS_STRATBOMB:
; 1224 : 			case AMIS_FAC:
; 1225 : 			case AMIS_ONCALLCAS:
; 1226 : 			case AMIS_PRPLANCAS:
; 1227 : 			case AMIS_CAS:
; 1228 : 			case AMIS_SAD:
; 1229 : 			case AMIS_INT:
; 1230 : 			case AMIS_BAI:
; 1231 : 			case AMIS_BDA:
; 1232 : 			case AMIS_SAR:
; 1233 : 				return 0;

	xor	eax, eax
	jmp	$LN48@Reaction
$LN34@Reaction:

; 1234 : 		}
; 1235 : 	}
; 1236 : 
; 1237 : 	// Now score for our ability to kill them, if we're on that sort of mission type
; 1238 : 	switch (GetUnitMission())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	DWORD PTR tv347[ebp], eax
	mov	ecx, DWORD PTR tv347[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv347[ebp], ecx
	cmp	DWORD PTR tv347[ebp], 35		; 00000023H
	ja	$LN4@Reaction
	mov	edx, DWORD PTR tv347[ebp]
	movzx	eax, BYTE PTR $LN51@Reaction[edx]
	jmp	DWORD PTR $LN53@Reaction[eax*4]
$LN30@Reaction:

; 1239 : 	{
; 1240 : 		case AMIS_BARCAP:    	
; 1241 : 		case AMIS_BARCAP2:    	
; 1242 : 		case AMIS_TARCAP:
; 1243 : 			// 2001-04-20 ADDED BY S.G. DON'T REACT IF TOO FAR FROM US...
; 1244 : 			if ((e->GetDomain() == DOMAIN_AIR) && (range >= 60 * NM_TO_KM)){ //Cobra changed to 60 from 30

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN29@Reaction
	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR __real@42de450a
	jb	SHORT $LN29@Reaction

; 1245 : 				return 0;

	xor	eax, eax
	jmp	$LN48@Reaction
$LN29@Reaction:

; 1246 : 			}
; 1247 : 			// END OF ADDED SECTION
; 1248 : 
; 1249 : 			// Added bonus for them being attack aircraft
; 1250 : 			if (e->IsFlight() && (((Flight)e)->GetUnitCurrentRole() == ARO_GA || ((Flight)e)->GetUnitCurrentRole() == ARO_S || ((Flight)e)->GetUnitCurrentRole() == ARO_SB))

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN28@Reaction
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 4
	je	SHORT $LN27@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 3
	je	SHORT $LN27@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 5
	jne	SHORT $LN28@Reaction
$LN27@Reaction:

; 1251 : 				score += (e->GetAproxHitChance(NoMove,0)/10) * enemy_threat_bonus;

	push	0
	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN28@Reaction:

; 1252 : 			// Added bonus for being the correct mission
; 1253 : 			if (e->Id() == mission_target)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@Reaction

; 1254 : 				score += GetAproxHitChance(tmt,0)/10;

	push	0
	mov	edx, DWORD PTR _tmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN26@Reaction:

; 1255 : 			// Continued for sweep
; 1256 : 		case AMIS_INTERCEPT:
; 1257 : 		case AMIS_SWEEP:
; 1258 : 			if (e->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN24@Reaction

; 1259 : 				score += GetAproxHitChance(tmt,0)/10;

	push	0
	mov	eax, DWORD PTR _tmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN24@Reaction:

; 1260 : 			break;

	jmp	$LN31@Reaction
$LN23@Reaction:

; 1261 : 		case AMIS_ESCORT:
; 1262 : 		case AMIS_HAVCAP:
; 1263 : 			// 2001-04-20 ADDED BY S.G. DON'T REACT IF TOO FAR FROM US...
; 1264 : 			if (range >= 25 * NM_TO_KM)

	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR __real@42393988
	jb	SHORT $LN22@Reaction

; 1265 : 				return 0;

	xor	eax, eax
	jmp	$LN48@Reaction
$LN22@Reaction:

; 1266 : 			// END OF ADDED SECTION
; 1267 : 			//				return 0;
; 1268 : 
; 1269 : 			if (!g_bRP5Comp) {

	movzx	edx, BYTE PTR ?g_bRP5Comp@@3_NA		; g_bRP5Comp
	test	edx, edx
	jne	SHORT $LN21@Reaction

; 1270 : 				// JB 010711
; 1271 : 				approxhitchance = GetAproxHitChance(tmt,0);

	push	0
	mov	eax, DWORD PTR _tmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	mov	DWORD PTR _approxhitchance$[ebp], eax

; 1272 : 				if (approxhitchance < 20)

	cmp	DWORD PTR _approxhitchance$[ebp], 20	; 00000014H
	jge	SHORT $LN20@Reaction

; 1273 : 					return 0;

	xor	eax, eax
	jmp	$LN48@Reaction
$LN20@Reaction:

; 1274 : 
; 1275 : 				// Bonus just for being aircraft
; 1276 : 				if (e->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN19@Reaction

; 1277 : 					score += approxhitchance/20;

	mov	eax, DWORD PTR _approxhitchance$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN19@Reaction:

; 1278 : 			}
; 1279 : 			else {

	jmp	SHORT $LN18@Reaction
$LN21@Reaction:

; 1280 : 				// 2001-04-05 MODIFIED BY S.G. NEED TO MAKE HAVCAP AND ESCORT IGNORE BOMBERS. I'LL IGNORE OUR HIT CHANCE AND CONCENTRATE ON OUR TARGET HIT CHANCE ON US
; 1281 : 				//				score += GetAproxHitChance(tmt,0)/20;
; 1282 : 				score += e->GetAproxHitChance(omt,0)/26;

	push	0
	mov	edx, DWORD PTR _omt$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 26					; 0000001aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN18@Reaction:

; 1283 : 			}
; 1284 : 
; 1285 : 			// Added bonus for them attacking the unit we're protecting
; 1286 : 			if (((Unit)e)->GetTargetID() == mission_target)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN17@Reaction

; 1287 : 				score += (e->GetAproxHitChance(omt,0)/10) * enemy_threat_bonus;

	push	0
	mov	edx, DWORD PTR _omt$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN17@Reaction:

; 1288 : 			break;

	jmp	$LN31@Reaction
$LN16@Reaction:

; 1289 : 		case AMIS_SEADESCORT:	
; 1290 : 			// Added bonus for non-air types attacking the unit we're protecting
; 1291 : 			// 2001-06-07 MODIFIED BY S.G. NON AIR, SO IT'S A BATTALION OR NAVAL, RIGHT? USE ITS *AIR* TARGET, NOT ITS *GROUND* TARGET!
; 1292 : 			// 2001-06-07 NEVER IMPLEMENTED FOR FUTURE TESTS
; 1293 : 			if (!e->IsFlight() && ((Unit)e)->GetTargetID() == mission_target)

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	jne	SHORT $LN15@Reaction
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN15@Reaction

; 1294 : 				score += (e->GetAproxHitChance(omt,0)/10) * enemy_threat_bonus;

	push	0
	mov	eax, DWORD PTR _omt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN15@Reaction:

; 1295 : 			/*			{
; 1296 : 						FalconEntity *target = NULL;
; 1297 : 
; 1298 : 						if (e->IsBattalion() && ((BattalionClass *)e)->GetAirTargetID() != FalconNullId)
; 1299 : 						target = (FalconEntity *) vuDatabase->Find(((BattalionClass *)e)->GetAirTargetID());
; 1300 : 						else if (e->IsTaskForce() && ((BattalionClass *)e)->GetAirTargetID() != FalconNullId)
; 1301 : 						target = (FalconEntity *) vuDatabase->Find(((TaskForceClass *)e)->GetAirTargetID());
; 1302 : 
; 1303 : 						if (target && target->IsSim())
; 1304 : 						target = ((SimBaseClass *)target)->GetCampaignObject();
; 1305 : 
; 1306 : 						if (target && target->Id() == mission_target)
; 1307 : 						score += (e->GetAproxHitChance(omt,0)/10) * enemy_threat_bonus;
; 1308 : 						}
; 1309 : 						*/// END OF MODIFIED SECTION
; 1310 : 			// Continued for SEAD Strike
; 1311 : 		case AMIS_SEADSTRIKE:	
; 1312 : 			// Added bonus for any SEAD types
; 1313 : 			if (e->GetDomain() == DOMAIN_LAND && e->GetSType() == STYPE_UNIT_AIR_DEFENSE)

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 3
	jne	SHORT $LN13@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN13@Reaction

; 1314 : 				score += GetAproxHitChance(tmt,0)/10;

	push	0
	mov	ecx, DWORD PTR _tmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+396]
	call	edx
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN13@Reaction:

; 1315 : 			// 2001-06-07 ADDED BY S.G. IF HE TARGETS US, ADD BONUS
; 1316 : 			// 2001-06-07 NEVER IMPLEMENTED FOR FUTURE TESTS
; 1317 : 			/*			{
; 1318 : 						FalconEntity *target = NULL;
; 1319 : 
; 1320 : 						if (e->IsBattalion())
; 1321 : 						target = (FalconEntity *) vuDatabase->Find(((BattalionClass *)e)->GetAirTargetID());
; 1322 : 						else if (e->IsTaskForce())
; 1323 : 						target = (FalconEntity *) vuDatabase->Find(((TaskForceClass *)e)->GetAirTargetID());
; 1324 : 
; 1325 : 						if (target && target->IsSim())
; 1326 : 						target = ((SimBaseClass *)target)->GetCampaignObject();
; 1327 : 
; 1328 : 						if (target && target->Id() == mission_target)
; 1329 : 						score += (e->GetAproxHitChance(omt,0)/10) * enemy_threat_bonus;
; 1330 : 						}
; 1331 : 						*/// END OF ADDED SECTION
; 1332 : 			break;

	jmp	$LN31@Reaction
$LN12@Reaction:

; 1333 : 		case AMIS_SAD:			
; 1334 : 		case AMIS_BAI:
; 1335 : 		case AMIS_INT:
; 1336 : 			score += GetAproxHitChance(tmt,0)/10;

	push	0
	mov	edx, DWORD PTR _tmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax

; 1337 : 			break;

	jmp	$LN31@Reaction
$LN11@Reaction:

; 1338 : 		case AMIS_CAS:
; 1339 : 		case AMIS_ONCALLCAS:
; 1340 : 		case AMIS_PRPLANCAS:
; 1341 : 			if (e->IsBattalion())

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+240]
	call	edx
	test	eax, eax
	je	$LN8@Reaction

; 1342 : 			{
; 1343 : 				score += GetAproxHitChance(tmt,0)/10 + e->GetAproxHitChance(NoMove,0)/10 * enemy_threat_bonus;

	push	0
	mov	eax, DWORD PTR _tmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	esi, eax
	push	0
	push	0
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+396]
	call	edx
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	add	eax, esi
	mov	DWORD PTR _score$[ebp], eax

; 1344 : 				if (((Unit)e)->Engaged())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN9@Reaction

; 1345 : 					score += 2;

	mov	edx, DWORD PTR _score$[ebp]
	add	edx, 2
	mov	DWORD PTR _score$[ebp], edx
$LN9@Reaction:

; 1346 : 				// Added bonus for being the correct mission
; 1347 : 				if (e->Id() == mission_target)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@Reaction

; 1348 : 					score += GetAproxHitChance(tmt,0)/10;

	push	0
	mov	eax, DWORD PTR _tmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN8@Reaction:

; 1349 : 			}
; 1350 : 			break;

	jmp	SHORT $LN31@Reaction
$LN7@Reaction:

; 1351 : 		case AMIS_ASW:
; 1352 : 		case AMIS_ASHIP:
; 1353 : 			if (e->GetDomain() == DOMAIN_SEA)

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 4
	jne	SHORT $LN6@Reaction

; 1354 : 				score += GetAproxHitChance(tmt,0)/10;

	push	0
	mov	eax, DWORD PTR _tmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN6@Reaction:

; 1355 : 			// Added bonus for being the correct mission
; 1356 : 			if (e->Id() == mission_target)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Reaction

; 1357 : 				score += GetAproxHitChance(tmt,0)/10;

	push	0
	mov	edx, DWORD PTR _tmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN5@Reaction:
$LN4@Reaction:
$LN31@Reaction:

; 1358 : 			break;
; 1359 : 		default:
; 1360 : 			break;
; 1361 : 	}
; 1362 : 
; 1363 : 	// Everyone is interested if these enemies are extremely close
; 1364 : 	if (range < MIN_IGNORE_RANGE)

	movss	xmm0, DWORD PTR ?MIN_IGNORE_RANGE@@3MA
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	$LN3@Reaction

; 1365 : 	{
; 1366 : 		score += GetAproxHitChance(tmt,FloatToInt32(range/2.0F))/5;		// our chance to hit them

	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _tmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 5
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax

; 1367 : 		score += e->GetAproxHitChance(omt,0)/5 * enemy_threat_bonus;	// their chance to hit us

	push	0
	mov	edx, DWORD PTR _omt$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 5
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax

; 1368 : 		score += FloatToInt32(MIN_IGNORE_RANGE - range) * 5;			// range bonus

	movss	xmm0, DWORD PTR ?MIN_IGNORE_RANGE@@3MA
	subss	xmm0, DWORD PTR _range$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, 5
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN3@Reaction:

; 1369 : 	}
; 1370 : 
; 1371 : 	// Helicopters are lower priority than aircraft
; 1372 : 	if (e->IsFlight() && ((Flight)e)->IsHelicopter() && score > 3)

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN2@Reaction
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+992]
	call	eax
	test	eax, eax
	je	SHORT $LN2@Reaction
	cmp	DWORD PTR _score$[ebp], 3
	jle	SHORT $LN2@Reaction

; 1373 : 		score /= 4;

	mov	eax, DWORD PTR _score$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _score$[ebp], eax
$LN2@Reaction:

; 1374 : 
; 1375 : 	// KCK HACK: FAC aircraft are very low priority
; 1376 : 	if (score && e->IsFlight() && ((Flight)e)->GetUnitMission() == AMIS_FAC)

	cmp	DWORD PTR _score$[ebp], 0
	je	SHORT $LN1@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN1@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 19					; 00000013H
	jne	SHORT $LN1@Reaction

; 1377 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN48@Reaction
$LN1@Reaction:

; 1378 : 
; 1379 : 	return score;

	mov	eax, DWORD PTR _score$[ebp]
$LN48@Reaction:

; 1380 : } 

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN52@Reaction:
	DD	$LN33@Reaction
	DD	$LN34@Reaction
$LN50@Reaction:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0
$LN53@Reaction:
	DD	$LN30@Reaction
	DD	$LN23@Reaction
	DD	$LN26@Reaction
	DD	$LN15@Reaction
	DD	$LN16@Reaction
	DD	$LN11@Reaction
	DD	$LN12@Reaction
	DD	$LN7@Reaction
	DD	$LN4@Reaction
$LN51@Reaction:
	DB	0
	DB	0
	DB	1
	DB	0
	DB	8
	DB	8
	DB	2
	DB	8
	DB	2
	DB	1
	DB	3
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	5
	DB	5
	DB	6
	DB	6
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
	DB	7
?Reaction@FlightClass@@UAEHPAVCampBaseClass@@HM@Z ENDP	; FlightClass::Reaction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_pt$1 = -16						; size = 4
_w$ = -12						; size = 4
_this$ = -8						; size = 4
_installation$2 = -4					; size = 4
?ShouldDeaggregate@FlightClass@@UAEHXZ PROC		; FlightClass::ShouldDeaggregate
; _this$ = ecx

; 1115 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1116 : 	if (IsHelicopter())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+992]
	call	eax
	test	eax, eax
	je	SHORT $LN9@ShouldDeag

; 1117 : 		return TRUE;

	mov	eax, 1
	jmp	$LN10@ShouldDeag
$LN9@ShouldDeag:

; 1118 : 
; 1119 : 	WayPoint w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1120 : 	if (w && w->GetWPAction() == WP_TAKEOFF)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN8@ShouldDeag
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	$LN8@ShouldDeag

; 1121 : 	{
; 1122 : 		CampEntity installation = GetUnitAirbase();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+704]
	call	eax
	mov	DWORD PTR _installation$2[ebp], eax

; 1123 : 		ShiAssert( installation );
; 1124 : 		if (installation)

	cmp	DWORD PTR _installation$2[ebp], 0
	je	SHORT $LN8@ShouldDeag

; 1125 : 		{
; 1126 : 			if (installation->IsObjective())

	mov	ecx, DWORD PTR _installation$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _installation$2[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN6@ShouldDeag

; 1127 : 			{
; 1128 : 				int pt = FindTaxiPt(this,(Objective)installation, FALSE);

	push	0
	mov	ecx, DWORD PTR _installation$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindTaxiPt@@YAHPAVFlightClass@@PAVObjectiveClass@@H@Z ; FindTaxiPt
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pt$1[ebp], eax

; 1129 : 				if (pt <= 0)

	cmp	DWORD PTR _pt$1[ebp], 0
	jg	SHORT $LN5@ShouldDeag

; 1130 : 					return FALSE;			// Not ready to take off yet

	xor	eax, eax
	jmp	SHORT $LN10@ShouldDeag
$LN5@ShouldDeag:

; 1131 : 			}

	jmp	SHORT $LN8@ShouldDeag
$LN6@ShouldDeag:

; 1132 : 			else if (installation->IsTaskForce())

	mov	eax, DWORD PTR _installation$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _installation$2[ebp]
	mov	eax, DWORD PTR [edx+264]
	call	eax
	test	eax, eax
	je	SHORT $LN3@ShouldDeag

; 1133 : 				return FALSE;

	xor	eax, eax
	jmp	SHORT $LN10@ShouldDeag
	jmp	SHORT $LN8@ShouldDeag
$LN3@ShouldDeag:

; 1134 : 			else if (installation->IsSquadron())

	mov	ecx, DWORD PTR _installation$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _installation$2[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	test	eax, eax
	je	SHORT $LN8@ShouldDeag

; 1135 : 				return FALSE;

	xor	eax, eax
	jmp	SHORT $LN10@ShouldDeag
$LN8@ShouldDeag:

; 1136 : 		}
; 1137 : 	}
; 1138 : 	return TRUE;

	mov	eax, 1
$LN10@ShouldDeag:

; 1139 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ShouldDeaggregate@FlightClass@@UAEHXZ ENDP		; FlightClass::ShouldDeaggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_w$ = -12						; size = 4
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
_slot$ = 8						; size = 4
_installation$ = 12					; size = 4
?GetDeaggregationPoint@FlightClass@@UAEHHPAPAVCampBaseClass@@@Z PROC ; FlightClass::GetDeaggregationPoint
; _this$ = ecx

; 1142 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 	int	pt=0;

	mov	DWORD PTR _pt$[ebp], 0

; 1144 : 	
; 1145 : 	// RED - CTD Fix - Always make it NULL, even if Heli..
; 1146 : 	*installation = NULL;

	mov	eax, DWORD PTR _installation$[ebp]
	mov	DWORD PTR [eax], 0

; 1147 : 
; 1148 : 	if (IsHelicopter()){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+992]
	call	eax
	test	eax, eax
	je	SHORT $LN9@GetDeaggre

; 1149 : 		return pt;

	mov	eax, DWORD PTR _pt$[ebp]
	jmp	$LN10@GetDeaggre
$LN9@GetDeaggre:

; 1150 : 	}
; 1151 : 
; 1152 : 	WayPoint w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1153 : 	if (w && w->GetWPAction() == WP_TAKEOFF){

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN8@GetDeaggre
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	$LN8@GetDeaggre

; 1154 : 		*installation = GetUnitAirbase();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+704]
	call	eax
	mov	ecx, DWORD PTR _installation$[ebp]
	mov	DWORD PTR [ecx], eax

; 1155 : 		if (*installation == NULL){

	mov	edx, DWORD PTR _installation$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN7@GetDeaggre

; 1156 : 			return DPT_ERROR_NOT_READY;

	or	eax, -1
	jmp	SHORT $LN10@GetDeaggre
$LN7@GetDeaggre:

; 1157 : 		}
; 1158 : 		if ((*installation)->IsObjective()){

	mov	eax, DWORD PTR _installation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _installation$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN6@GetDeaggre

; 1159 : 			pt = FindTaxiPt((Flight)this, (Objective)*installation, TRUE);

	push	1
	mov	eax, DWORD PTR _installation$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindTaxiPt@@YAHPAVFlightClass@@PAVObjectiveClass@@H@Z ; FindTaxiPt
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pt$[ebp], eax

; 1160 : 			if (!pt){

	cmp	DWORD PTR _pt$[ebp], 0
	jne	SHORT $LN5@GetDeaggre

; 1161 : 				return DPT_ERROR_NOT_READY;			// Not ready to take off yet

	or	eax, -1
	jmp	SHORT $LN10@GetDeaggre
$LN5@GetDeaggre:

; 1162 : 			}
; 1163 : 		}

	jmp	SHORT $LN8@GetDeaggre
$LN6@GetDeaggre:

; 1164 : 		else if ((*installation)->IsTaskForce())

	mov	eax, DWORD PTR _installation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _installation$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+264]
	call	edx
	test	eax, eax
	je	SHORT $LN3@GetDeaggre

; 1165 : 			return DPT_ONBOARD_CARRIER;

	mov	eax, 32000				; 00007d00H
	jmp	SHORT $LN10@GetDeaggre
	jmp	SHORT $LN8@GetDeaggre
$LN3@GetDeaggre:

; 1166 : 		else if ((*installation)->IsSquadron())

	mov	eax, DWORD PTR _installation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _installation$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+252]
	call	edx
	test	eax, eax
	je	SHORT $LN8@GetDeaggre

; 1167 : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN10@GetDeaggre
$LN8@GetDeaggre:

; 1168 : 	}
; 1169 : 	return pt;

	mov	eax, DWORD PTR _pt$[ebp]
$LN10@GetDeaggre:

; 1170 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetDeaggregationPoint@FlightClass@@UAEHHPAPAVCampBaseClass@@@Z ENDP ; FlightClass::GetDeaggregationPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
tv184 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
_i$5 = -28						; size = 4
_tmp_ent$ = -24						; size = 4
_this$ = -20						; size = 4
_ld$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_event$ = 8						; size = 4
?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC	; FlightClass::Handle
; _this$ = ecx

; 545  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 546  : 	// copy data from temp entity to current entity
; 547  : 	Flight tmp_ent = (Flight)(event->expandedData_.get());

	mov	ecx, DWORD PTR _event$[ebp]
	add	ecx, 48					; 00000030H
	call	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::get
	mov	DWORD PTR _tmp_ent$[ebp], eax

; 548  : 
; 549  : 	// KCK: Allow this to happen - it makes multiplayer force on force possible
; 550  : 	// ShiAssert ( !IsLocal() );
; 551  : 
; 552  : 	memcpy(&pos_.z_, &tmp_ent->pos_.z_, sizeof(BIG_SCALAR));				

	push	4
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 553  : 	memcpy(&fuel_burnt, &tmp_ent->fuel_burnt, sizeof(long));							

	push	4
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 554  : 	memcpy(&last_move, &tmp_ent->last_move, sizeof(CampaignTime));			

	push	4
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 268				; 0000010cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 555  : 	memcpy(&last_combat, &tmp_ent->last_combat, sizeof(CampaignTime));		

	push	4
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 556  : 	memcpy(&time_on_target, &tmp_ent->time_on_target, sizeof(CampaignTime));		

	push	4
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 276				; 00000114H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 557  : 	memcpy(&mission_over_time, &tmp_ent->mission_over_time, sizeof(CampaignTime));	

	push	4
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 280				; 00000118H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 280				; 00000118H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 558  : 	memcpy(&mission_target, &tmp_ent->mission_target, sizeof(short));				

	push	2
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 559  : 	memcpy(&mission, &tmp_ent->mission, sizeof(uchar));					

	push	1
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 377				; 00000179H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 377				; 00000179H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 560  : 	memcpy(&old_mission, &tmp_ent->old_mission, sizeof(uchar));					

	push	1
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 378				; 0000017aH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 378				; 0000017aH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 561  : 	memcpy(&loadouts, &tmp_ent->loadouts, sizeof(uchar));

	push	1
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 376				; 00000178H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 562  : 	loadout = new LoadoutStruct[loadouts];

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+376]
	mov	DWORD PTR $T3[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 48					; 00000030H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN6@Handle
	push	OFFSET ??0LoadoutStruct@@QAE@XZ		; LoadoutStruct::LoadoutStruct
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	48					; 00000030H
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv184[ebp], edx
	jmp	SHORT $LN7@Handle
$LN6@Handle:
	mov	DWORD PTR tv184[ebp], 0
$LN7@Handle:
	mov	eax, DWORD PTR tv184[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+372], edx

; 563  : 	for (int i=0; i<loadouts; i++)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN3@Handle
$LN2@Handle:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN3@Handle:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$5[ebp], edx
	jge	SHORT $LN1@Handle

; 564  : 		memcpy(&loadout[i], &tmp_ent->loadout[i], sizeof(LoadoutStruct));

	push	48					; 00000030H
	mov	eax, DWORD PTR _i$5[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	eax, DWORD PTR [ecx+372]
	push	eax
	mov	edx, DWORD PTR _i$5[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+372]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@Handle
$LN1@Handle:

; 565  : 	last_direction = Here;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+379], 8

; 566  : 	uchar ld;
; 567  : 	memcpy(&ld, &tmp_ent->last_direction, sizeof(uchar));	

	push	1
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 379				; 0000017bH
	push	edx
	lea	eax, DWORD PTR _ld$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 568  : 	SetLastDirection(ld);

	movzx	ecx, BYTE PTR _ld$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLastDirection@FlightClass@@QAEXE@Z	; FlightClass::SetLastDirection

; 569  : 	memcpy(&priority, &tmp_ent->priority, sizeof(uchar));					

	push	1
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 380				; 0000017cH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 570  : 	memcpy(&mission_id, &tmp_ent->mission_id, sizeof(uchar));					

	push	1
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 381				; 0000017dH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 381				; 0000017dH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 571  : 	memcpy(&eval_flags, &tmp_ent->eval_flags, sizeof(uchar));					

	push	1
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 382				; 0000017eH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 382				; 0000017eH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 572  : 	memcpy(&mission_context, &tmp_ent->mission_context, sizeof(uchar));					

	push	1
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 383				; 0000017fH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 383				; 0000017fH
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 573  : 	memcpy(&package, &tmp_ent->package, sizeof(VU_ID));					

	push	8
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 384				; 00000180H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 384				; 00000180H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 574  : 	memcpy(&squadron, &tmp_ent->squadron, sizeof(VU_ID));					

	push	8
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 392				; 00000188H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 392				; 00000188H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 575  : 	memcpy(&requester, &tmp_ent->requester, sizeof(VU_ID));					

	push	8
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 400				; 00000190H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 400				; 00000190H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 576  : 	memcpy(slots, tmp_ent->slots, sizeof(uchar)*PILOTS_PER_FLIGHT);	

	push	4
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 408				; 00000198H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 408				; 00000198H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 577  : 	memcpy(pilots, tmp_ent->pilots, sizeof(uchar)*PILOTS_PER_FLIGHT);	

	push	4
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 412				; 0000019cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 412				; 0000019cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 578  : 	memcpy(plane_stats, tmp_ent->plane_stats, sizeof(uchar)*PILOTS_PER_FLIGHT);

	push	4
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 416				; 000001a0H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 579  : 	memcpy(player_slots, tmp_ent->player_slots, sizeof(uchar)*PILOTS_PER_FLIGHT);

	push	4
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 420				; 000001a4H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 420				; 000001a4H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 580  : 	memcpy(&last_player_slot, &tmp_ent->last_player_slot, sizeof(uchar));

	push	1
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 424				; 000001a8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 581  : 	memcpy(&callsign_id, &tmp_ent->callsign_id, sizeof(uchar));	

	push	1
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 425				; 000001a9H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 425				; 000001a9H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 582  : 	memcpy(&callsign_num, &tmp_ent->callsign_num, sizeof(uchar));	

	push	1
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 426				; 000001aaH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 426				; 000001aaH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 583  : 
; 584  : 	return AirUnitClass::Handle(event);

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@AirUnitClass@@UAEHPAVVuFullUpdateEvent@@@Z ; AirUnitClass::Handle

; 585  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Handle@FlightClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP	; FlightClass::Handle
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemovalCallback@FlightClass@@UAEHXZ PROC		; FlightClass::RemovalCallback
; _this$ = ecx

; 538  : VU_ERRCODE FlightClass::RemovalCallback(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 539  : 	UI_Refresh();

	call	?UI_Refresh@@YAXXZ			; UI_Refresh

; 540  : 	return AirUnitClass::RemovalCallback(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemovalCallback@FalconEntity@@UAEHXZ	; FalconEntity::RemovalCallback

; 541  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemovalCallback@FlightClass@@UAEHXZ ENDP		; FlightClass::RemovalCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@FlightClass@@UAEHPAPAE@Z PROC			; FlightClass::Save
; _this$ = ecx

; 480  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 481  : #ifdef _DEBUG
; 482  : 	VU_BYTE *start = *stream;
; 483  : #endif
; 484  : 	AirUnitClass::Save(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@AirUnitClass@@UAEHPAPAE@Z		; AirUnitClass::Save

; 485  : 	if (save_log)

	cmp	DWORD PTR ?save_log@@3PAU_iobuf@@A, 0	; save_log
	je	SHORT $LN4@Save

; 486  : 	{
; 487  : 		fprintf (save_log, "%08x FlightClass ", *stream - start_save_stream);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR ?start_save_stream@@3HA	; start_save_stream
	push	edx
	push	OFFSET ??_C@_0BC@GNBNJBMB@?$CF08x?5FlightClass?5?$AA@
	mov	eax, DWORD PTR ?save_log@@3PAU_iobuf@@A	; save_log
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 488  : 		fflush (save_log);

	mov	ecx, DWORD PTR ?save_log@@3PAU_iobuf@@A	; save_log
	push	ecx
	call	_fflush
	add	esp, 4
$LN4@Save:

; 489  : 	}
; 490  : 
; 491  : 	memcpy(*stream, &pos_.z_, sizeof(BIG_SCALAR));				*stream += sizeof(BIG_SCALAR); 

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 492  : 	memcpy(*stream, &fuel_burnt, sizeof(long));					*stream += sizeof(long); 

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 493  : 	memcpy(*stream, &last_move, sizeof(CampaignTime));			*stream += sizeof(CampaignTime);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 494  : 	memcpy(*stream, &last_combat, sizeof(CampaignTime));		*stream += sizeof(CampaignTime);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 272				; 00000110H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 495  : 	memcpy(*stream, &time_on_target, sizeof(CampaignTime));		*stream += sizeof(CampaignTime); 

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 276				; 00000114H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 496  : 	memcpy(*stream, &mission_over_time, sizeof(CampaignTime));	*stream += sizeof(CampaignTime); 

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 280				; 00000118H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 497  : 	memcpy(*stream, &mission_target, sizeof(short));			*stream += sizeof(short); 

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 498  : 
; 499  : 	memcpy(*stream, &loadouts, sizeof(uchar));					*stream += sizeof(uchar); 

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 500  : 	for (int i=0; i<loadouts; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Save
$LN2@Save:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@Save:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+376]
	cmp	DWORD PTR _i$1[ebp], ecx
	jge	SHORT $LN1@Save

; 501  : 	{
; 502  : 		memcpy(*stream, &loadout[i], sizeof(LoadoutStruct));		*stream += sizeof(LoadoutStruct); 

	push	48					; 00000030H
	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+372]
	push	edx
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 503  : 	}

	jmp	SHORT $LN2@Save
$LN1@Save:

; 504  : 
; 505  : 	memcpy(*stream, &mission, sizeof(uchar));					*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 377				; 00000179H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 506  : 	memcpy(*stream, &old_mission, sizeof(uchar));				*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 378				; 0000017aH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 507  : 	memcpy(*stream, &last_direction, sizeof(uchar));			*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 379				; 0000017bH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 508  : 	memcpy(*stream, &priority, sizeof(uchar));					*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 509  : 	memcpy(*stream, &mission_id, sizeof(uchar));				*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 381				; 0000017dH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 510  : 	memcpy(*stream, &eval_flags, sizeof(uchar));				*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 382				; 0000017eH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 511  : 	memcpy(*stream ,&mission_context, sizeof(uchar));			*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 383				; 0000017fH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 512  : 
; 513  : #ifdef CAMPTOOL
; 514  : 	if (gRenameIds)
; 515  : 		package.num_ = RenameTable[package.num_];
; 516  : #endif
; 517  : 	memcpy(*stream, &package, sizeof(VU_ID));					*stream += sizeof(VU_ID); 

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 384				; 00000180H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 518  : #ifdef CAMPTOOL
; 519  : 	if (gRenameIds)
; 520  : 		squadron.num_ = RenameTable[squadron.num_];
; 521  : #endif
; 522  : 	memcpy(*stream, &squadron, sizeof(VU_ID));					*stream += sizeof(VU_ID); 

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 392				; 00000188H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 523  : 	memcpy(*stream, &requester, sizeof(VU_ID));					*stream += sizeof(VU_ID); 

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 400				; 00000190H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 524  : 	memcpy(*stream, slots, sizeof(uchar)*PILOTS_PER_FLIGHT);	*stream += sizeof(uchar)*PILOTS_PER_FLIGHT; 

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 408				; 00000198H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 525  : 	memcpy(*stream, pilots, sizeof(uchar)*PILOTS_PER_FLIGHT);	*stream += sizeof(uchar)*PILOTS_PER_FLIGHT; 

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 412				; 0000019cH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 526  : 	memcpy(*stream, plane_stats, sizeof(uchar)*PILOTS_PER_FLIGHT);	*stream += sizeof(uchar)*PILOTS_PER_FLIGHT; 

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 527  : 	memcpy(*stream, player_slots, sizeof(uchar)*PILOTS_PER_FLIGHT);	*stream += sizeof(uchar)*PILOTS_PER_FLIGHT; 

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 420				; 000001a4H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 528  : 	memcpy(*stream, &last_player_slot, sizeof(uchar));			*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 424				; 000001a8H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 529  : 	memcpy(*stream, &callsign_id, sizeof(uchar));				*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 425				; 000001a9H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 530  : 	memcpy(*stream, &callsign_num, sizeof(uchar));				*stream += sizeof(uchar); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 426				; 000001aaH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 531  : 	memcpy(*stream, &refuel, sizeof(unsigned int));			*stream += sizeof(unsigned int);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 452				; 000001c4H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 532  : #ifdef _DEBUG
; 533  : 	ShiAssert(*stream - start == SaveSize()); // keep us honest JPO
; 534  : #endif
; 535  : 	return FlightClass::SaveSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@FlightClass@@UAEHXZ		; FlightClass::SaveSize

; 536  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@FlightClass@@UAEHPAPAE@Z ENDP			; FlightClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
?SaveSize@FlightClass@@UAEHXZ PROC			; FlightClass::SaveSize
; _this$ = ecx

; 443  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 444  : 	int
; 445  : 		size;
; 446  : 
; 447  : 	size = AirUnitClass::SaveSize()
; 448  : 		+ sizeof(BIG_SCALAR)
; 449  : 		+ sizeof(long)
; 450  : 		+ sizeof(CampaignTime)
; 451  : 		+ sizeof(CampaignTime)
; 452  : 		+ sizeof(CampaignTime)
; 453  : 		+ sizeof(CampaignTime)
; 454  : 		+ sizeof(short)
; 455  : 		+ sizeof(uchar)
; 456  : 		+ sizeof(LoadoutStruct)*loadouts
; 457  : 		+ sizeof(uchar)
; 458  : 		+ sizeof(uchar)
; 459  : 		+ sizeof(uchar)
; 460  : 		+ sizeof(uchar)
; 461  : 		+ sizeof(uchar)
; 462  : 		+ sizeof(uchar)
; 463  : 		+ sizeof(uchar)
; 464  : 		+ sizeof(VU_ID)		
; 465  : 		+ sizeof(VU_ID)
; 466  : 		+ sizeof(VU_ID)
; 467  : 		+ sizeof(uchar)*PILOTS_PER_FLIGHT
; 468  : 		+ sizeof(uchar)*PILOTS_PER_FLIGHT
; 469  : 		+ sizeof(uchar)*PILOTS_PER_FLIGHT
; 470  : 		+ sizeof(uchar)*PILOTS_PER_FLIGHT
; 471  : 		+ sizeof(uchar)
; 472  : 		+ sizeof(uchar)
; 473  : 		+ sizeof(uchar)
; 474  : 		+ sizeof(unsigned int);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@AirUnitClass@@UAEHXZ		; AirUnitClass::SaveSize
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	imul	edx, 48					; 00000030H
	lea	eax, DWORD PTR [eax+edx+81]
	mov	DWORD PTR _size$[ebp], eax

; 475  : 
; 476  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 477  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@FlightClass@@UAEHXZ ENDP			; FlightClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FlightClass@@UAE@XZ PROC				; FlightClass::~FlightClass
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1FlightClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FlightClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 435  : 	if (IsAwake())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN2@FlightClas

; 436  : 		Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sleep@UnitClass@@UAEHXZ		; UnitClass::Sleep
$LN2@FlightClas:

; 437  : 
; 438  : 	if (loadout)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+372], 0
	je	SHORT $LN3@FlightClas

; 439  : 		RemoveLoadout ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveLoadout@FlightClass@@UAEXXZ	; FlightClass::RemoveLoadout
$LN3@FlightClas:

; 440  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AirUnitClass@@UAE@XZ			; AirUnitClass::~AirUnitClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1FlightClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AirUnitClass@@UAE@XZ			; AirUnitClass::~AirUnitClass
__ehhandler$??1FlightClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1FlightClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1FlightClass@@UAE@XZ ENDP				; FlightClass::~FlightClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_w$ = -388						; size = 4
$T2 = -384						; size = 4
$T3 = -380						; size = 4
tv299 = -376						; size = 4
$T4 = -372						; size = 4
tv215 = -368						; size = 4
$T5 = -364						; size = 4
_pack$ = -360						; size = 4
_dummy$6 = -353						; size = 1
$T7 = -352						; size = 4
$T8 = -348						; size = 4
_i$9 = -344						; size = 4
_i$10 = -340						; size = 4
_ld$ = -333						; size = 1
_j$11 = -332						; size = 4
_use_loadout$12 = -325					; size = 1
_this$ = -324						; size = 4
_junk$13 = -320						; size = 240
_weapon$14 = -80					; size = 32
_weapon$15 = -48					; size = 16
_weapons$16 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0FlightClass@@QAE@PAPAEPAJ@Z PROC			; FlightClass::FlightClass
; _this$ = ecx

; 261  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FlightClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AirUnitClass@@QAE@PAPAEPAJ@Z		; AirUnitClass::AirUnitClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7FlightClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??0WayPointClass@@QAE@XZ		; WayPointClass::WayPointClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 392				; 00000188H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 262  : 	Package	pack;
; 263  : 
; 264  : 	if (load_log)

	cmp	DWORD PTR ?load_log@@3PAU_iobuf@@A, 0	; load_log
	je	SHORT $LN37@FlightClas

; 265  : 	{
; 266  : 		fprintf (load_log, "%08x FlightClass ", *stream - start_load_stream);

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR ?start_load_stream@@3HA	; start_load_stream
	push	ecx
	push	OFFSET ??_C@_0BC@GNBNJBMB@?$CF08x?5FlightClass?5?$AA@
	mov	edx, DWORD PTR ?load_log@@3PAU_iobuf@@A	; load_log
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 267  : 		fflush (load_log);

	mov	eax, DWORD PTR ?load_log@@3PAU_iobuf@@A	; load_log
	push	eax
	call	_fflush
	add	esp, 4
$LN37@FlightClas:

; 268  : 	}
; 269  : 
; 270  : 	if (share_.id_.creator_ == vuLocalSession.creator_){// && share_.id_.num_ > lastFlightId){

	push	OFFSET ?vuLocalSession@@3VVU_ID@@A+4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN36@FlightClas

; 271  : 		FlightNS.UseId(share_.id_.num_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, OFFSET ?FlightNS@@3VIdNamespace@@A	; FlightNS
	call	?UseId@IdNamespace@@QAEXK@Z		; IdNamespace::UseId
$LN36@FlightClas:

; 272  : 		//lastFlightId = share_.id_.num_;
; 273  : 		//printf("does this happen?");
; 274  : 	}
; 275  : 
; 276  : 	memcpychk(&pos_.z_, stream, sizeof(BIG_SCALAR), rem);				

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 277  : 	memcpychk(&fuel_burnt, stream, sizeof(long), rem);					

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 278  : 	if (gCampDataVersion < 65)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 65	; gCampDataVersion, 00000041H
	jge	SHORT $LN35@FlightClas

; 279  : 		fuel_burnt = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
$LN35@FlightClas:

; 280  : 	memcpychk(&last_move, stream, sizeof(CampaignTime), rem);			

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 281  : 	memcpychk(&last_combat, stream, sizeof(CampaignTime), rem);		

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 282  : 	memcpychk(&time_on_target, stream, sizeof(CampaignTime), rem);		

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 283  : 	memcpychk(&mission_over_time, stream, sizeof(CampaignTime), rem);	

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 280				; 00000118H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 284  : 	memcpychk(&mission_target, stream, sizeof(short), rem);			

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 285  : 
; 286  : 	if (gCampDataVersion < 24)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 24	; gCampDataVersion, 00000018H
	jge	$LN34@FlightClas

; 287  : 	{
; 288  : 		char	use_loadout = 0;

	mov	BYTE PTR _use_loadout$12[ebp], 0

; 289  : 		uchar	weapons[HARDPOINT_MAX];
; 290  : 
; 291  : 		loadouts = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+376], 1

; 292  : 		loadout = new LoadoutStruct[loadouts];

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+376]
	mov	DWORD PTR $T5[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, 48					; 00000030H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN40@FlightClas
	push	OFFSET ??0LoadoutStruct@@QAE@XZ		; LoadoutStruct::LoadoutStruct
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	push	48					; 00000030H
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR tv215[ebp], edx
	jmp	SHORT $LN41@FlightClas
$LN40@FlightClas:
	mov	DWORD PTR tv215[ebp], 0
$LN41@FlightClas:
	mov	eax, DWORD PTR tv215[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+372], edx

; 293  : 		if (gCampDataVersion >= 8)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 8	; gCampDataVersion
	jl	SHORT $LN32@FlightClas

; 294  : 		{
; 295  : 			memcpychk(&use_loadout, stream, sizeof(char), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _use_loadout$12[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 296  : 			if (use_loadout)

	movsx	eax, BYTE PTR _use_loadout$12[ebp]
	test	eax, eax
	je	SHORT $LN32@FlightClas

; 297  : 			{
; 298  : 				LoadoutArray	junk;

	lea	ecx, DWORD PTR _junk$13[ebp]
	call	??0LoadoutArray@@QAE@XZ

; 299  : 				memcpychk (&junk, stream, sizeof (LoadoutArray), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	240					; 000000f0H
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _junk$13[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 300  : 				loadout[0] = junk.Stores[0];

	mov	ecx, 48					; 00000030H
	imul	ecx, 0
	lea	edx, DWORD PTR _junk$13[ebp+ecx]
	push	edx
	mov	ecx, 48					; 00000030H
	imul	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+372]
	call	??4LoadoutStruct@@QAEABU0@ABU0@@Z	; LoadoutStruct::operator=
$LN32@FlightClas:

; 301  : 			}
; 302  : 		}
; 303  : 		if (gCampDataVersion < 18)

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 18	; gCampDataVersion, 00000012H
	jge	SHORT $LN31@FlightClas

; 304  : 		{
; 305  : 			short	weapon[HARDPOINT_MAX];
; 306  : 			memcpychk(weapon, stream, sizeof(short)*HARDPOINT_MAX, rem); 

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _weapon$14[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 307  : 			if (!use_loadout)

	movsx	ecx, BYTE PTR _use_loadout$12[ebp]
	test	ecx, ecx
	jne	SHORT $LN27@FlightClas

; 308  : 			{
; 309  : 				for (int i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN29@FlightClas
$LN28@FlightClas:
	mov	edx, DWORD PTR _i$9[ebp]
	add	edx, 1
	mov	DWORD PTR _i$9[ebp], edx
$LN29@FlightClas:
	cmp	DWORD PTR _i$9[ebp], 16			; 00000010H
	jge	SHORT $LN27@FlightClas

; 310  : 					loadout[0].WeaponID[i] = (short) weapon[i];

	mov	eax, 48					; 00000030H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+372]
	mov	edx, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	cx, WORD PTR _weapon$14[ebp+ecx*2]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN28@FlightClas
$LN27@FlightClas:

; 311  : 			}
; 312  : 		}
; 313  : 		else

	jmp	SHORT $LN25@FlightClas
$LN31@FlightClas:

; 314  : 		{
; 315  : 			uchar	weapon[HARDPOINT_MAX];
; 316  : 			memcpychk(weapon, stream, sizeof(uchar)*HARDPOINT_MAX, rem); 

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _weapon$15[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 317  : 			if (!use_loadout)

	movsx	edx, BYTE PTR _use_loadout$12[ebp]
	test	edx, edx
	jne	SHORT $LN25@FlightClas

; 318  : 				memcpy(loadout[0].WeaponID, weapon, sizeof(short)*HARDPOINT_MAX);

	push	32					; 00000020H
	lea	eax, DWORD PTR _weapon$15[ebp]
	push	eax
	mov	ecx, 48					; 00000030H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+372]
	add	eax, ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN25@FlightClas:

; 319  : 		}
; 320  : 		memcpychk(weapons, stream, sizeof(uchar)*HARDPOINT_MAX, rem); 

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _weapons$16[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 321  : 		if (!use_loadout)

	movsx	ecx, BYTE PTR _use_loadout$12[ebp]
	test	ecx, ecx
	jne	SHORT $LN24@FlightClas

; 322  : 			memcpy(loadout[0].WeaponCount, weapons, sizeof(uchar)*HARDPOINT_MAX);

	push	16					; 00000010H
	lea	edx, DWORD PTR _weapons$16[ebp]
	push	edx
	mov	eax, 48					; 00000030H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	lea	eax, DWORD PTR [edx+eax+32]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN24@FlightClas:

; 323  : 	}
; 324  : 	else

	jmp	$LN20@FlightClas
$LN34@FlightClas:

; 325  : 	{
; 326  : 		memcpychk(&loadouts, stream, sizeof(uchar), rem); 

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 376				; 00000178H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 327  : 		loadout = new LoadoutStruct[loadouts];

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	mov	DWORD PTR $T4[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, 48					; 00000030H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN42@FlightClas
	push	OFFSET ??0LoadoutStruct@@QAE@XZ		; LoadoutStruct::LoadoutStruct
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	push	48					; 00000030H
	mov	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR tv299[ebp], edx
	jmp	SHORT $LN43@FlightClas
$LN42@FlightClas:
	mov	DWORD PTR tv299[ebp], 0
$LN43@FlightClas:
	mov	eax, DWORD PTR tv299[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+372], edx

; 328  : 		for (int i=0; i<loadouts; i++){

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN22@FlightClas
$LN21@FlightClas:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN22@FlightClas:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$10[ebp], edx
	jge	$LN20@FlightClas

; 329  : 			if (gCampDataVersion <= 72)	{

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 72	; gCampDataVersion, 00000048H
	jg	$LN19@FlightClas

; 330  : 				int j;
; 331  : 				for (j = 0; j < HARDPOINT_MAX; j++)	{

	mov	DWORD PTR _j$11[ebp], 0
	jmp	SHORT $LN18@FlightClas
$LN17@FlightClas:
	mov	eax, DWORD PTR _j$11[ebp]
	add	eax, 1
	mov	DWORD PTR _j$11[ebp], eax
$LN18@FlightClas:
	cmp	DWORD PTR _j$11[ebp], 16		; 00000010H
	jge	SHORT $LN16@FlightClas

; 332  : 					memcpychk(&(loadout[i].WeaponID[j]), stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$10[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	add	edx, eax
	mov	eax, DWORD PTR _j$11[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 333  : 				}

	jmp	SHORT $LN17@FlightClas
$LN16@FlightClas:

; 334  : 
; 335  : 				for (j = 0; j < HARDPOINT_MAX; j++)	{

	mov	DWORD PTR _j$11[ebp], 0
	jmp	SHORT $LN15@FlightClas
$LN14@FlightClas:
	mov	edx, DWORD PTR _j$11[ebp]
	add	edx, 1
	mov	DWORD PTR _j$11[ebp], edx
$LN15@FlightClas:
	cmp	DWORD PTR _j$11[ebp], 16		; 00000010H
	jge	SHORT $LN13@FlightClas

; 336  : 					memcpychk(&(loadout[i].WeaponCount[j]), stream, sizeof(uchar), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$10[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, edx
	mov	edx, DWORD PTR _j$11[ebp]
	lea	eax, DWORD PTR [ecx+edx+32]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 337  : 				}

	jmp	SHORT $LN14@FlightClas
$LN13@FlightClas:

; 338  : 			}
; 339  : 			else{

	jmp	SHORT $LN12@FlightClas
$LN19@FlightClas:

; 340  : 				memcpychk(&loadout[i], stream, sizeof(LoadoutStruct), rem); 

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	48					; 00000030H
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$10[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+372]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN12@FlightClas:

; 341  : 			}
; 342  : 		}

	jmp	$LN21@FlightClas
$LN20@FlightClas:

; 343  : 	}
; 344  : 
; 345  : 	memcpychk(&mission, stream, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 377				; 00000179H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 346  : 	if (gCampDataVersion > 65){

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 65	; gCampDataVersion, 00000041H
	jle	SHORT $LN11@FlightClas

; 347  : 		memcpychk(&old_mission, stream, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 378				; 0000017aH
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 348  : 	}
; 349  : 	else{

	jmp	SHORT $LN10@FlightClas
$LN11@FlightClas:

; 350  : 		old_mission = mission;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+377]
	mov	BYTE PTR [edx+378], cl
$LN10@FlightClas:

; 351  : 	}
; 352  : 	// FRB - Alert!!!
; 353  : 	// sfr: gotta do yaw stuff here, otherwise well get stuck north
; 354  : 	last_direction = Here;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+379], 8

; 355  : 	uchar ld;
; 356  : 	memcpychk(&ld, stream, sizeof(uchar), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ld$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 357  : 	SetLastDirection(ld);

	movzx	eax, BYTE PTR _ld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLastDirection@FlightClass@@QAEXE@Z	; FlightClass::SetLastDirection

; 358  : 	memcpychk(&priority, stream, sizeof(uchar), rem);				

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 359  : 	memcpychk(&mission_id, stream, sizeof(uchar), rem);				

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 381				; 0000017dH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 360  : 	if (gCampDataVersion < 14){

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 14	; gCampDataVersion, 0000000eH
	jge	SHORT $LN9@FlightClas

; 361  : 		uchar	dummy;
; 362  : 		memcpychk(&dummy, stream, sizeof(uchar), rem);				

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _dummy$6[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN9@FlightClas:

; 363  : 	}
; 364  : 	memcpychk(&eval_flags, stream ,sizeof(uchar), rem);				

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 382				; 0000017eH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 365  : 	if (gCampDataVersion > 65){

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 65	; gCampDataVersion, 00000041H
	jle	SHORT $LN8@FlightClas

; 366  : 		memcpychk(&mission_context, stream ,sizeof(uchar), rem);		

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 383				; 0000017fH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 367  : 	}
; 368  : 	else{

	jmp	SHORT $LN7@FlightClas
$LN8@FlightClas:

; 369  : 		mission_context = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+383], 0
$LN7@FlightClas:

; 370  : 	}
; 371  : 
; 372  : 	memcpychk(&package, stream, sizeof(VU_ID), rem);					

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 373  : 
; 374  : 	// Attach us to our package, incase we missed it before
; 375  : 	pack = (PackageClass*) vuDatabase->Find(package);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	push	eax
	mov	ecx, DWORD PTR [edx+384]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pack$[ebp], eax

; 376  : 	if (pack){

	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $LN6@FlightClas

; 377  : 		pack->AddUnitChild(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx+972]
	call	eax
$LN6@FlightClas:

; 378  : 	}
; 379  : 
; 380  : 	memcpychk(&squadron, stream, sizeof(VU_ID), rem);					

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 392				; 00000188H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 381  : 	if (gCampDataVersion > 65)	{

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 65	; gCampDataVersion, 00000041H
	jle	SHORT $LN5@FlightClas

; 382  : 		memcpychk(&requester, stream, sizeof(VU_ID), rem);				

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 400				; 00000190H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 383  : 	}
; 384  : 	else{

	jmp	SHORT $LN4@FlightClas
$LN5@FlightClas:

; 385  : 		requester = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+400], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+404], eax
$LN4@FlightClas:

; 386  : 	}
; 387  : #ifdef DEBUG
; 388  : 	package.num_ &= 0x0000ffff;
; 389  : 	squadron.num_ &= 0x0000ffff;
; 390  : #endif
; 391  : 	memcpychk(slots, stream, sizeof(uchar)*PILOTS_PER_FLIGHT, rem);			

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 408				; 00000198H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 392  : 	memcpychk(pilots, stream, sizeof(uchar)*PILOTS_PER_FLIGHT, rem);			

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 412				; 0000019cH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 393  : 	memcpychk(plane_stats, stream, sizeof(uchar)*PILOTS_PER_FLIGHT, rem);	

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 394  : 	memcpychk(player_slots, stream, sizeof(uchar)*PILOTS_PER_FLIGHT, rem);	

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 420				; 000001a4H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 395  : 	memcpychk(&last_player_slot, stream, sizeof(uchar), rem);				

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 424				; 000001a8H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 396  : 	memcpychk(&callsign_id, stream, sizeof(uchar), rem);						

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 425				; 000001a9H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 397  : 	memcpychk(&callsign_num, stream, sizeof(uchar), rem);					

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 426				; 000001aaH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 398  : 
; 399  : 	if (gCampDataVersion >= 72) {

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 72	; gCampDataVersion, 00000048H
	jl	SHORT $LN3@FlightClas

; 400  : 		memcpychk(&refuel, stream, sizeof(unsigned int), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 452				; 000001c4H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 401  : 	}
; 402  : 	else {

	jmp	SHORT $LN2@FlightClas
$LN3@FlightClas:

; 403  : 		refuel = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+452], 0
$LN2@FlightClas:

; 404  : 	}
; 405  : 
; 406  : 	enemy_locker = FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+304], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+308], ecx

; 407  : 	last_enemy_lock_time = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+284], 0

; 408  : 
; 409  : 	tacan_channel	= -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+436], 255			; 000000ffH

; 410  : 	tacan_band		= -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+437], 255			; 000000ffH

; 411  : 	WayPoint w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 412  : 	if (mission == AMIS_TANKER)// && w && (w->GetWPFlags() & WPF_TARGET))

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+377]
	cmp	eax, 28					; 0000001cH
	jne	SHORT $LN1@FlightClas

; 413  : 	{
; 414  : 		// Add a Tacan if this is a tanker on station.
; 415  : 		SetTacan(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTacan@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetTacan
$LN1@FlightClas:

; 416  : 	}
; 417  : 
; 418  : 	assigned_target = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+296], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+300], eax

; 419  : 	override_wp.SetWPAltitudeLevel(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	?SetWPAltitudeLevel@WayPointClass@@QAEXH@Z ; WayPointClass::SetWPAltitudeLevel

; 420  : 	dirty_flight = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0

; 421  : 
; 422  : 	UI_Refresh ();

	call	?UI_Refresh@@YAXXZ			; UI_Refresh

; 423  : 	// 2001-04-03 ADDED BY S.G. ecmFlightClassPtr NEEDS TO BE INITIALIZED TO -1 MEANING IT HAS NEVER BEEN READ YET
; 424  : 	ecmFlightPtr = (FlightClass *)(unsigned)-1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+440], -1

; 425  : 	// 2001-06-25 ADDED BY S.G. NEED TO INIT OUR NEW MEMBERS
; 426  : 	shotAt = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+444], 0

; 427  : 	whoShot = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+448], 0

; 428  : 	// 2001-10-11 ADDED by M.N. 
; 429  : 	//	refuel = 0;		done above now
; 430  : 	last_collision_x = last_collision_y = 0; // JPO

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+432], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+428], xmm0

; 431  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FlightClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AirUnitClass@@UAE@XZ			; AirUnitClass::~AirUnitClass
__unwindfunclet$??0FlightClass@@QAE@PAPAEPAJ@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$??0FlightClass@@QAE@PAPAEPAJ@Z$2:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$??0FlightClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-380]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FlightClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FlightClass@@QAE@PAPAEPAJ@Z ENDP			; FlightClass::FlightClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 8
$T3 = -28						; size = 8
_uc$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 2
_parent$ = 12						; size = 4
_squad$ = 16						; size = 4
??0FlightClass@@QAE@GPAVUnitClass@@0@Z PROC		; FlightClass::FlightClass
; _this$ = ecx

; 189  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FlightClass@@QAE@GPAVUnitClass@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?FlightNS@@3VIdNamespace@@A	; FlightNS
	call	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z ; GetIdFromNamespace
	add	esp, 4
	push	eax
	movzx	eax, WORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AirUnitClass@@QAE@GK@Z		; AirUnitClass::AirUnitClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FlightClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??0WayPointClass@@QAE@XZ		; WayPointClass::WayPointClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 392				; 00000188H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 190  : 	UnitClassDataType*	uc;
; 191  : 
; 192  : 	fuel_burnt = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0

; 193  : 	last_move = 0;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0

; 194  : 	last_combat = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0

; 195  : 	SetSpottedTime (0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSpottedTime@CampBaseClass@@QAEXK@Z	; CampBaseClass::SetSpottedTime

; 196  : 	time_on_target = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0

; 197  : 	mission_over_time = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0

; 198  : 	mission_target = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+288], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+292], eax

; 199  : 	enemy_locker = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+304], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+308], eax

; 200  : 	requester = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+400], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+404], eax

; 201  : 	mission_context = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+383], 0

; 202  : 	loadout = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+372], 0

; 203  : 	loadouts = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+376], 0

; 204  : 	mission = old_mission = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+378], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+377], 0

; 205  : 	last_direction = Here;					

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+379], 8

; 206  : 	priority = 0;						

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+380], 0

; 207  : 	mission_id = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+381], 0

; 208  : 	eval_flags = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+382], 0

; 209  : 	memset(slots,255,PILOTS_PER_FLIGHT);

	push	4
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 408				; 00000198H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 210  : 	memset(player_slots,255,PILOTS_PER_FLIGHT);

	push	4
	push	255					; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 420				; 000001a4H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 211  : 	memset(pilots,0,sizeof(uchar)*PILOTS_PER_FLIGHT);

	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 412				; 0000019cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 212  : 	memset(plane_stats,0,sizeof(uchar)*PILOTS_PER_FLIGHT);

	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 213  : 	last_player_slot = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+424], 0

; 214  : 	callsign_id = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+425], 0

; 215  : 	callsign_num = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+426], 0

; 216  : 	if (parent)

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN8@FlightClas

; 217  : 		SetReinforcement (parent->GetReinforcement());

	mov	ecx, DWORD PTR _parent$[ebp]
	call	?GetReinforcement@UnitClass@@QAEFXZ	; UnitClass::GetReinforcement
	movzx	edx, ax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReinforcement@UnitClass@@QAEXF@Z	; UnitClass::SetReinforcement

; 218  : 	else

	jmp	SHORT $LN7@FlightClas
$LN8@FlightClas:

; 219  : 		SetReinforcement (0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReinforcement@UnitClass@@QAEXF@Z	; UnitClass::SetReinforcement
$LN7@FlightClas:

; 220  : 
; 221  : 	if (squad)

	cmp	DWORD PTR _squad$[ebp], 0
	je	SHORT $LN6@FlightClas

; 222  : 		squadron = squad->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _squad$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+392], ecx
	mov	DWORD PTR [eax+396], edx

; 223  : 	else

	jmp	SHORT $LN5@FlightClas
$LN6@FlightClas:

; 224  : 		squadron = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+392], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+396], eax
$LN5@FlightClas:

; 225  : 	if (parent)

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN4@FlightClas

; 226  : 	{
; 227  : 		package = parent->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _parent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+384], edx
	mov	DWORD PTR [ecx+388], eax

; 228  : 		parent->AddUnitChild(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+972]
	call	eax

; 229  : 		SetParent(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@UnitClass@@QAEXH@Z		; UnitClass::SetParent

; 230  : 	}
; 231  : 	else

	jmp	SHORT $LN3@FlightClas
$LN4@FlightClas:

; 232  : 	{
; 233  : 		package = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+384], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+388], eax

; 234  : 		SetParent(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@UnitClass@@QAEXH@Z		; UnitClass::SetParent
$LN3@FlightClas:

; 235  : 	}
; 236  : 
; 237  : 	uc = GetUnitClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$[ebp], eax

; 238  : 	if (uc && uc->Flags & U_COMBAT)

	cmp	DWORD PTR _uc$[ebp], 0
	je	SHORT $LN2@FlightClas
	mov	ecx, DWORD PTR _uc$[ebp]
	movzx	edx, WORD PTR [ecx+228]
	and	edx, 16384				; 00004000H
	je	SHORT $LN2@FlightClas

; 239  : 		SetCombat(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat

; 240  : 	else

	jmp	SHORT $LN1@FlightClas
$LN2@FlightClas:

; 241  : 		SetCombat(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN1@FlightClas:

; 242  : 
; 243  : 	dirty_flight = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0

; 244  : 	assigned_target = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+296], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+300], eax

; 245  : 	override_wp.SetWPAltitudeLevel(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	?SetWPAltitudeLevel@WayPointClass@@QAEXH@Z ; WayPointClass::SetWPAltitudeLevel

; 246  : 
; 247  : 	tacan_channel	= -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+436], 255			; 000000ffH

; 248  : 	tacan_band		= -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+437], 255			; 000000ffH

; 249  : 
; 250  : 	// 2001-04-03 ADDED BY S.G. ecmFlightClassPtr NEEDS TO BE INITIALIZED TO -1 MEANING IT HAS NEVER BEEN READ YET
; 251  : 	ecmFlightPtr = (FlightClass *)(unsigned)-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+440], -1

; 252  : 	// 2001-06-25 ADDED BY S.G. NEED TO INIT OUR NEW MEMBERS
; 253  : 	shotAt = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+444], 0

; 254  : 	whoShot = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+448], 0

; 255  : 	// 2001-10-11 ADDED by M.N. 
; 256  : 	refuel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+452], 0

; 257  : 	last_collision_x = last_collision_y = 0; // JPO

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+432], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+428], xmm0

; 258  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FlightClass@@QAE@GPAVUnitClass@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AirUnitClass@@UAE@XZ			; AirUnitClass::~AirUnitClass
__ehhandler$??0FlightClass@@QAE@GPAVUnitClass@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FlightClass@@QAE@GPAVUnitClass@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FlightClass@@QAE@GPAVUnitClass@@0@Z ENDP		; FlightClass::FlightClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 4
$T3 = -44						; size = 4
tv191 = -40						; size = 4
$T4 = -36						; size = 4
$T5 = -32						; size = 4
_i$6 = -28						; size = 4
_this$ = -24						; size = 4
_bits$ = -20						; size = 2
_ld$7 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z PROC		; FlightClass::ReadDirty
; _this$ = ecx

; 5219 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5220 : 	unsigned short bits;
; 5221 : 
; 5222 : 	memcpychk(&bits, stream, sizeof(unsigned short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bits$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 5223 : 
; 5224 : 	if (bits & DIRTY_LAST_DIRECTION){

	movzx	eax, WORD PTR _bits$[ebp]
	and	eax, 1
	je	SHORT $LN13@ReadDirty

; 5225 : 		uchar ld;
; 5226 : 		memcpychk(&ld, stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _ld$7[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 5227 : 		SetLastDirection(ld);

	movzx	ecx, BYTE PTR _ld$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLastDirection@FlightClass@@QAEXE@Z	; FlightClass::SetLastDirection
$LN13@ReadDirty:

; 5228 : 		//SetYPR(last_direction*45*DTR,0.0F,0.0F);
; 5229 : 	}
; 5230 : 
; 5231 : 	if (bits & DIRTY_PACKAGE_ID){

	movzx	edx, WORD PTR _bits$[ebp]
	and	edx, 2
	je	SHORT $LN12@ReadDirty

; 5232 : 		memcpychk(&package, stream, sizeof(VU_ID), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 384				; 00000180H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN12@ReadDirty:

; 5233 : 	}
; 5234 : 
; 5235 : 	if (bits & DIRTY_MISSION){

	movzx	eax, WORD PTR _bits$[ebp]
	and	eax, 4
	je	SHORT $LN11@ReadDirty

; 5236 : 		memcpychk(&mission, stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 377				; 00000179H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN11@ReadDirty:

; 5237 : 	}
; 5238 : 
; 5239 : 	if (bits & DIRTY_PLANE_STATS){

	movzx	ecx, WORD PTR _bits$[ebp]
	and	ecx, 8
	je	SHORT $LN10@ReadDirty

; 5240 : 		memcpychk(plane_stats, stream, sizeof(uchar)*PILOTS_PER_FLIGHT, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN10@ReadDirty:

; 5241 : 	}
; 5242 : 
; 5243 : 	if (bits & DIRTY_PILOTS){

	movzx	edx, WORD PTR _bits$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN9@ReadDirty

; 5244 : 		memcpychk (player_slots, stream, sizeof(uchar)*PILOTS_PER_FLIGHT, rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 420				; 000001a4H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 5245 : 		memcpychk (pilots, stream, sizeof(uchar)*PILOTS_PER_FLIGHT, rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 412				; 0000019cH
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN9@ReadDirty:

; 5246 : 	}
; 5247 : 
; 5248 : 	if (bits & DIRTY_EVAL_FLAGS){

	movzx	eax, WORD PTR _bits$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN8@ReadDirty

; 5249 : 		memcpychk(&eval_flags, stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 382				; 0000017eH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN8@ReadDirty:

; 5250 : 	}
; 5251 : 
; 5252 : 	if (bits & DIRTY_ASSIGNED_TARGET){

	movzx	ecx, WORD PTR _bits$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN7@ReadDirty

; 5253 : 		memcpychk(&assigned_target, stream, sizeof(VU_ID), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN7@ReadDirty:

; 5254 : 	}
; 5255 : 
; 5256 : 	if (bits & DIRTY_STORES){

	movzx	edx, WORD PTR _bits$[ebp]
	and	edx, 128				; 00000080H
	je	$LN6@ReadDirty

; 5257 : 		memcpychk(&loadouts, stream, sizeof(uchar), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 5258 : 
; 5259 : 		if (loadout) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+372], 0
	je	SHORT $LN5@ReadDirty

; 5260 : 			delete loadout;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@ReadDirty:

; 5261 : 		}
; 5262 : 
; 5263 : 		loadout = new LoadoutStruct[loadouts];

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	mov	DWORD PTR $T4[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, 48					; 00000030H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN16@ReadDirty
	push	OFFSET ??0LoadoutStruct@@QAE@XZ		; LoadoutStruct::LoadoutStruct
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	push	48					; 00000030H
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR tv191[ebp], edx
	jmp	SHORT $LN17@ReadDirty
$LN16@ReadDirty:
	mov	DWORD PTR tv191[ebp], 0
$LN17@ReadDirty:
	mov	eax, DWORD PTR tv191[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+372], edx

; 5264 : 		for (int i=0; i<loadouts; i++) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@ReadDirty
$LN3@ReadDirty:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN4@ReadDirty:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$6[ebp], edx
	jge	SHORT $LN6@ReadDirty

; 5265 : 			memcpychk(&loadout[i], stream, sizeof(LoadoutStruct), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	48					; 00000030H
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$6[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+372]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 5266 : 		}

	jmp	SHORT $LN3@ReadDirty
$LN6@ReadDirty:

; 5267 : 	}
; 5268 : 
; 5269 : 	if (bits & DIRTY_DIVERT_INFO) {

	movzx	ecx, WORD PTR _bits$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN14@ReadDirty

; 5270 : 		memcpychk(&mission_context, stream, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 383				; 0000017fH
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 5271 : 		memcpychk(&requester, stream, sizeof(VU_ID), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN14@ReadDirty:

; 5272 : 	}
; 5273 : 
; 5274 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadDirty@FlightClass@@QAEXPAPAEPAJ@Z ENDP		; FlightClass::ReadDirty
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_this$ = -8						; size = 4
_ptr$ = -4						; size = 4
_stream$ = 8						; size = 4
?WriteDirty@FlightClass@@QAEXPAPAE@Z PROC		; FlightClass::WriteDirty
; _this$ = ecx

; 5138 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 5139 : 	unsigned char *ptr;
; 5140 : 
; 5141 : 	ptr = *stream;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptr$[ebp], ecx

; 5142 : 
; 5143 : 	// Encode it up
; 5144 : 	*(unsigned short *)ptr = dirty_flight;

	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+260]
	mov	WORD PTR [edx], cx

; 5145 : 	ptr += sizeof (unsigned short);

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _ptr$[ebp], edx

; 5146 : 
; 5147 : 	// sfr: send last direction if position is going too
; 5148 : 	if (dirty_flight & DIRTY_LAST_DIRECTION){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	and	ecx, 1
	je	SHORT $LN12@WriteDirty

; 5149 : 		*(uchar*)ptr = last_direction;

	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+379]
	mov	BYTE PTR [edx], cl

; 5150 : 		ptr += sizeof (uchar);

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _ptr$[ebp], edx
$LN12@WriteDirty:

; 5151 : 	}
; 5152 : 
; 5153 : 	if (dirty_flight & DIRTY_PACKAGE_ID)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	and	ecx, 2
	je	SHORT $LN11@WriteDirty

; 5154 : 	{
; 5155 : 		*(VU_ID*)ptr = package;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+384]
	mov	ecx, DWORD PTR [edx+388]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 5156 : 		ptr += sizeof (VU_ID);

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 8
	mov	DWORD PTR _ptr$[ebp], eax
$LN11@WriteDirty:

; 5157 : 	}
; 5158 : 
; 5159 : 	if (dirty_flight & DIRTY_MISSION)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	and	edx, 4
	je	SHORT $LN10@WriteDirty

; 5160 : 	{
; 5161 : 		*(uchar*)ptr = mission;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+377]
	mov	BYTE PTR [eax], dl

; 5162 : 		ptr += sizeof (uchar);

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax
$LN10@WriteDirty:

; 5163 : 	}
; 5164 : 
; 5165 : 	if (dirty_flight & DIRTY_PLANE_STATS)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	and	edx, 8
	je	SHORT $LN9@WriteDirty

; 5166 : 	{
; 5167 : 		memcpy (ptr, plane_stats, sizeof(uchar)*PILOTS_PER_FLIGHT);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 5168 : 		ptr += sizeof (uchar)*PILOTS_PER_FLIGHT;

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _ptr$[ebp], edx
$LN9@WriteDirty:

; 5169 : 	}
; 5170 : 
; 5171 : 	if (dirty_flight & DIRTY_PILOTS)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@WriteDirty

; 5172 : 	{
; 5173 : 		memcpy (ptr, player_slots, sizeof(uchar)*PILOTS_PER_FLIGHT);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 420				; 000001a4H
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 5174 : 		ptr += sizeof (uchar)*PILOTS_PER_FLIGHT;

	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ptr$[ebp], ecx

; 5175 : 		memcpy (ptr, pilots, sizeof(uchar)*PILOTS_PER_FLIGHT);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 412				; 0000019cH
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 5176 : 		ptr += sizeof (uchar)*PILOTS_PER_FLIGHT;

	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ptr$[ebp], ecx
$LN8@WriteDirty:

; 5177 : 	}
; 5178 : 
; 5179 : 	if (dirty_flight & DIRTY_EVAL_FLAGS)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	and	eax, 32					; 00000020H
	je	SHORT $LN7@WriteDirty

; 5180 : 	{
; 5181 : 		*(uchar*)ptr = eval_flags;

	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+382]
	mov	BYTE PTR [ecx], al

; 5182 : 		ptr += sizeof (uchar);

	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx
$LN7@WriteDirty:

; 5183 : 	}
; 5184 : 
; 5185 : 	if (dirty_flight & DIRTY_ASSIGNED_TARGET)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	and	eax, 64					; 00000040H
	je	SHORT $LN6@WriteDirty

; 5186 : 	{
; 5187 : 		*(VU_ID*)ptr = assigned_target;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	mov	eax, DWORD PTR [ecx+300]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 5188 : 		ptr += sizeof (VU_ID);

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 8
	mov	DWORD PTR _ptr$[ebp], edx
$LN6@WriteDirty:

; 5189 : 	}
; 5190 : 
; 5191 : 	if (dirty_flight & DIRTY_STORES)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	and	ecx, 128				; 00000080H
	je	SHORT $LN5@WriteDirty

; 5192 : 	{
; 5193 : 		*(uchar*)ptr = loadouts;

	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+376]
	mov	BYTE PTR [edx], cl

; 5194 : 		ptr += sizeof (uchar);

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _ptr$[ebp], edx

; 5195 : 
; 5196 : 		for (int i=0; i<loadouts; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@WriteDirty
$LN3@WriteDirty:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@WriteDirty:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+376]
	cmp	DWORD PTR _i$1[ebp], edx
	jge	SHORT $LN5@WriteDirty

; 5197 : 		{
; 5198 : 			memcpy(ptr, &loadout[i], sizeof(LoadoutStruct));

	push	48					; 00000030H
	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+372]
	push	eax
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 5199 : 			ptr += sizeof(LoadoutStruct); 

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _ptr$[ebp], eax

; 5200 : 		}

	jmp	SHORT $LN3@WriteDirty
$LN5@WriteDirty:

; 5201 : 	}
; 5202 : 
; 5203 : 	if (dirty_flight & DIRTY_DIVERT_INFO)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	and	edx, 256				; 00000100H
	je	SHORT $LN1@WriteDirty

; 5204 : 	{
; 5205 : 		*(uchar*)ptr = mission_context;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+383]
	mov	BYTE PTR [eax], dl

; 5206 : 		ptr += sizeof (uchar);

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax

; 5207 : 		*(VU_ID*)ptr = requester;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+400]
	mov	eax, DWORD PTR [ecx+404]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 5208 : 		ptr += sizeof (VU_ID);

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 8
	mov	DWORD PTR _ptr$[ebp], edx
$LN1@WriteDirty:

; 5209 : 	}
; 5210 : 
; 5211 : 	dirty_flight = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0

; 5212 : 
; 5213 : 	*stream = ptr;

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx], edx

; 5214 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?WriteDirty@FlightClass@@QAEXPAPAE@Z ENDP		; FlightClass::WriteDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
_score$ = 12						; size = 4
?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z PROC ; FlightClass::MakeFlightDirty
; _this$ = ecx

; 5114 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5115 : 	if ((!IsLocal()) || (VuState() != VU_MEM_ACTIVE)){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@MakeFlight
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	je	SHORT $LN5@MakeFlight
$LN4@MakeFlight:

; 5116 : 		return;

	jmp	SHORT $LN6@MakeFlight
$LN5@MakeFlight:

; 5117 : 	}
; 5118 : 
; 5119 : 	if (!IsAggregate()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN3@MakeFlight

; 5120 : 		if (score >= SEND_NOW){

	cmp	DWORD PTR _score$[ebp], 65536		; 00010000H
	jl	SHORT $LN2@MakeFlight

; 5121 : 			score = SEND_RELIABLEANDOOB;

	mov	DWORD PTR _score$[ebp], 268435456	; 10000000H

; 5122 : 		}
; 5123 : 		else {

	jmp	SHORT $LN3@MakeFlight
$LN2@MakeFlight:

; 5124 : 			score = SEND_NOW;

	mov	DWORD PTR _score$[ebp], 65536		; 00010000H
$LN3@MakeFlight:

; 5125 : 		}
; 5126 : 	}
; 5127 : 	dirty_flight |= bits;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	or	edx, DWORD PTR _bits$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], edx

; 5128 : 
; 5129 : 	MakeDirty (DIRTY_FLIGHT, score);

	mov	ecx, DWORD PTR _score$[ebp]
	push	ecx
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeDirty@FalconEntity@@QAEXW4Dirty_Class@@W4Dirtyness@@@Z ; FalconEntity::MakeDirty
$LN6@MakeFlight:

; 5130 : 	// MonoPrint ("MakeFlightDirty bits,  score  %08x", bits, score);//me123
; 5131 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ENDP ; FlightClass::MakeFlightDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeStoresDirty@FlightClass@@QAEXXZ PROC		; FlightClass::MakeStoresDirty
; _this$ = ecx

; 5104 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5105 : 	//MakeFlightDirty (DIRTY_STORES, DDP[110].priority);
; 5106 : 	MakeFlightDirty (DIRTY_STORES, SEND_SOON);

	push	4096					; 00001000H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 5107 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MakeStoresDirty@FlightClass@@QAEXXZ ENDP		; FlightClass::MakeStoresDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_ReqHelpHint$ = 12					; size = 1
?SetOverrideWP@FlightClass@@QAEXPAVWayPointClass@@_N@Z PROC ; FlightClass::SetOverrideWP
; _this$ = ecx

; 5079 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5080 : 	// NOTE: This COPIES the waypoint instead of setting it.
; 5081 : 	// This way the waypoint will always be accessable and thread safe (not
; 5082 : 	// necessarily accurate, however)
; 5083 : 	if (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN3@SetOverrid

; 5084 : 		override_wp.CloneWP(w);

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	?CloneWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::CloneWP

; 5085 : 	else

	jmp	SHORT $LN2@SetOverrid
$LN3@SetOverrid:

; 5086 : 		override_wp.SetWPAltitudeLevel(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	?SetWPAltitudeLevel@WayPointClass@@QAEXH@Z ; WayPointClass::SetWPAltitudeLevel
$LN2@SetOverrid:

; 5087 : 	if (ReqHelpHint)	// M.N. mark this as a help request WP

	movzx	ecx, BYTE PTR _ReqHelpHint$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@SetOverrid

; 5088 : 		override_wp.SetWPFlag(WPF_REQHELP);

	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag
$LN4@SetOverrid:

; 5089 : 	//	MakeFlightDirty (DIRTY_OVERRIDE, SEND_EVENTUALLY);
; 5090 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetOverrideWP@FlightClass@@QAEXPAVWayPointClass@@_N@Z ENDP ; FlightClass::SetOverrideWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearAssignedTarget@FlightClass@@QAEXXZ PROC		; FlightClass::ClearAssignedTarget
; _this$ = ecx

; 5060 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5061 : 	if (assigned_target != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@ClearAssig

; 5062 : 	{
; 5063 : 		// KCK: Send an AWACS message to return to regular waypoints
; 5064 : 		// KCK NOTE: This will probably play even if you run into a closer enemy
; 5065 : 		PlayDivertRadioCalls (NULL, DIVERT_CANCLED, this, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	-2					; fffffffeH
	push	0
	call	?PlayDivertRadioCalls@@YAXPAVCampBaseClass@@HPAVFlightClass@@H@Z ; PlayDivertRadioCalls
	add	esp, 16					; 00000010H
$LN1@ClearAssig:

; 5066 : 	}
; 5067 : 	assigned_target = FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+296], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+300], ecx

; 5068 : 	SetOverrideWP(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOverrideWP@FlightClass@@QAEXPAVWayPointClass@@_N@Z ; FlightClass::SetOverrideWP

; 5069 : 	priority = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+380], 0

; 5070 : 	//MakeFlightDirty (DIRTY_ASSIGNED_TARGET, DDP[109].priority);
; 5071 : 	MakeFlightDirty (DIRTY_ASSIGNED_TARGET, SEND_SOON);

	push	4096					; 00001000H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 5072 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAssignedTarget@FlightClass@@QAEXXZ ENDP		; FlightClass::ClearAssignedTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_targetId$ = 8						; size = 8
?SetAssignedTarget@FlightClass@@QAEXVVU_ID@@@Z PROC	; FlightClass::SetAssignedTarget
; _this$ = ecx

; 5050 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5051 : 	if (assigned_target != targetId)

	lea	eax, DWORD PTR _targetId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@SetAssigne

; 5052 : 	{
; 5053 : 		assigned_target = targetId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _targetId$[ebp]
	mov	DWORD PTR [edx+296], eax
	mov	ecx, DWORD PTR _targetId$[ebp+4]
	mov	DWORD PTR [edx+300], ecx

; 5054 : 		//MakeFlightDirty (DIRTY_ASSIGNED_TARGET, DDP[108].priority);
; 5055 : 		MakeFlightDirty (DIRTY_ASSIGNED_TARGET, SEND_SOON);

	push	4096					; 00001000H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN2@SetAssigne:

; 5056 : 	}
; 5057 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetAssignedTarget@FlightClass@@QAEXVVU_ID@@@Z ENDP	; FlightClass::SetAssignedTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 1
?ClearEvalFlag@FlightClass@@QAEXE@Z PROC		; FlightClass::ClearEvalFlag
; _this$ = ecx

; 5036 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5037 : 	if ((eval_flags & f))

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+382]
	movzx	edx, BYTE PTR _f$[ebp]
	and	ecx, edx
	je	SHORT $LN2@ClearEvalF

; 5038 : 	{
; 5039 : 		eval_flags &= ~f;

	movzx	eax, BYTE PTR _f$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+382]
	and	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+382], dl

; 5040 : 		//MakeFlightDirty (DIRTY_EVAL_FLAGS, DDP[107].priority);
; 5041 : 		MakeFlightDirty (DIRTY_EVAL_FLAGS, SEND_EVENTUALLY);

	push	1
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN2@ClearEvalF:

; 5042 : 	}
; 5043 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearEvalFlag@FlightClass@@QAEXE@Z ENDP		; FlightClass::ClearEvalFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 1
_reset$ = 12						; size = 4
?SetEvalFlag@FlightClass@@QAEXEH@Z PROC			; FlightClass::SetEvalFlag
; _this$ = ecx

; 5007 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5008 : 	// 2002-02-19 ADDED BY S.G. If reset != 0 
; 5009 : 	// (defaults to 0 so it doesn't interfere with previous behavior), 
; 5010 : 	// what we passed becomes the new eval_flag, no question asked
; 5011 : 	if (reset) {

	cmp	DWORD PTR _reset$[ebp], 0
	je	SHORT $LN4@SetEvalFla

; 5012 : 		if (eval_flags != f)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+382]
	movzx	edx, BYTE PTR _f$[ebp]
	cmp	ecx, edx
	je	SHORT $LN3@SetEvalFla

; 5013 : 		{
; 5014 : 			eval_flags = f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _f$[ebp]
	mov	BYTE PTR [eax+382], cl

; 5015 : 			//MakeFlightDirty (DIRTY_EVAL_FLAGS, DDP[105].priority);
; 5016 : 			MakeFlightDirty (DIRTY_EVAL_FLAGS, SEND_EVENTUALLY);

	push	1
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN3@SetEvalFla:

; 5017 : 		}
; 5018 : 	}
; 5019 : 	else {

	jmp	SHORT $LN5@SetEvalFla
$LN4@SetEvalFla:

; 5020 : 		// END OF ADDED SECTION 2002-02-19
; 5021 : 		//if (!(eval_flags & f))
; 5022 : 		if ((eval_flags & f) != f) // JB 010711

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+382]
	movzx	ecx, BYTE PTR _f$[ebp]
	and	eax, ecx
	movzx	edx, BYTE PTR _f$[ebp]
	cmp	eax, edx
	je	SHORT $LN5@SetEvalFla

; 5023 : 		{
; 5024 : 			eval_flags |= f;

	movzx	eax, BYTE PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+382]
	or	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+382], dl

; 5025 : 			//MakeFlightDirty (DIRTY_EVAL_FLAGS, DDP[106].priority);
; 5026 : 			MakeFlightDirty (DIRTY_EVAL_FLAGS, SEND_EVENTUALLY);

	push	1
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN5@SetEvalFla:

; 5027 : 		}
; 5028 : 	}
; 5029 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetEvalFlag@FlightClass@@QAEXEH@Z ENDP			; FlightClass::SetEvalFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?SetPackage@FlightClass@@QAEXVVU_ID@@@Z PROC		; FlightClass::SetPackage
; _this$ = ecx

; 4993 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4994 : 	if (package != id)

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@SetPackage

; 4995 : 	{
; 4996 : 		package = id;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR [edx+384], eax
	mov	ecx, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR [edx+388], ecx

; 4997 : 		//MakeFlightDirty (DIRTY_PACKAGE_ID, DDP[104].priority);
; 4998 : 		MakeFlightDirty (DIRTY_PACKAGE_ID, SEND_SOON);

	push	4096					; 00001000H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN2@SetPackage:

; 4999 : 	}
; 5000 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetPackage@FlightClass@@QAEXVVU_ID@@@Z ENDP		; FlightClass::SetPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_y$1 = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 1
?SetLastDirection@FlightClass@@QAEXE@Z PROC		; FlightClass::SetLastDirection
; _this$ = ecx

; 4974 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4975 : 	if (last_direction != d){

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+379]
	movzx	edx, BYTE PTR _d$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@SetLastDir

; 4976 : 		SM_SCALAR y = d*45.0f / RTD;

	movzx	eax, BYTE PTR _d$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@42340000
	divss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _y$1[ebp], xmm0

; 4977 : 		SetYPR(y, 0, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 4978 : 		last_direction = d;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+379], dl

; 4979 : 		// sfr: alone this should be very rare...
; 4980 : 		// so im setting it very low priority, so when movement happens, 
; 4981 : 		// direction will also get updated
; 4982 : 		//MakeFlightDirty(DIRTY_LAST_DIRECTION, DDP[103].priority);
; 4983 : 		MakeFlightDirty(DIRTY_LAST_DIRECTION, SEND_EVENTUALLY);

	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN1@SetLastDir:

; 4984 : 	}
; 4985 : 	
; 4986 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastDirection@FlightClass@@QAEXE@Z ENDP		; FlightClass::SetLastDirection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FlightClass@@UAEHXZ PROC			; FlightClass::CombatClass
; _this$ = ecx

; 5315 : int FlightClass::CombatClass(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5316 : 	return SimACDefTable[Falcon4ClassTable[GetVehicleID(0)].vehicleDataIndex].combatClass;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	movsx	edx, WORD PTR [ecx+eax+74]
	imul	edx, 52					; 00000034H
	mov	eax, DWORD PTR ?SimACDefTable@@3PAUSimACDefType@@A ; SimACDefTable
	mov	eax, DWORD PTR [eax+edx]

; 5317 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FlightClass@@UAEHXZ ENDP			; FlightClass::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetEvalFlags@FlightClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEvalFlags@FlightClass@@QAEEXZ PROC			; FlightClass::GetEvalFlags, COMDAT
; _this$ = ecx

; 104  : 		uchar GetEvalFlags (void)					{ return eval_flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+382]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEvalFlags@FlightClass@@QAEEXZ ENDP			; FlightClass::GetEvalFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\flight.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ PROC ; FlightClass::GetOverrideWP
; _this$ = ecx

; 5093 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5094 : 	if (override_wp.GetWPAltitudeLevel() == -1)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	?GetWPAltitudeLevel@WayPointClass@@QAEHXZ ; WayPointClass::GetWPAltitudeLevel
	cmp	eax, -1
	jne	SHORT $LN1@GetOverrid

; 5095 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetOverrid
$LN1@GetOverrid:

; 5096 : 	return &override_wp; 

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 312				; 00000138H
$LN2@GetOverrid:

; 5097 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ ENDP ; FlightClass::GetOverrideWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\pilot.h
;	COMDAT ?SetPilotSR@PilotClass@@QAEXEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 1
_rating$ = 12						; size = 1
?SetPilotSR@PilotClass@@QAEXEE@Z PROC			; PilotClass::SetPilotSR, COMDAT
; _this$ = ecx

; 53   : 		void SetPilotSR(uchar skill, uchar rating)	{ pilot_skill_and_rating = (uchar)((rating << 4) | skill); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _rating$[ebp]
	shl	eax, 4
	movzx	ecx, BYTE PTR _skill$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	esp, ebp
	pop	ebp
	ret	8
?SetPilotSR@PilotClass@@QAEXEE@Z ENDP			; PilotClass::SetPilotSR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\pilot.h
;	COMDAT ?GetPilotRating@PilotClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPilotRating@PilotClass@@QAEHXZ PROC			; PilotClass::GetPilotRating, COMDAT
; _this$ = ecx

; 52   : 		int GetPilotRating(void)	{ return ((uchar)((pilot_skill_and_rating & 0xF0) >> 4)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	movzx	eax, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPilotRating@PilotClass@@QAEHXZ ENDP			; PilotClass::GetPilotRating
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\pilot.h
;	COMDAT ?GetPilotSkill@PilotClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPilotSkill@PilotClass@@QAEHXZ PROC			; PilotClass::GetPilotSkill, COMDAT
; _this$ = ecx

; 51   : 		int GetPilotSkill(void)		{ return (pilot_skill_and_rating & 0xF); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+2]
	and	eax, 15					; 0000000fH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPilotSkill@PilotClass@@QAEHXZ ENDP			; PilotClass::GetPilotSkill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ PROC ; PackageClass::GetMissionRequest, COMDAT
; _this$ = ecx

; 96   : 		MissionRequestClass *GetMissionRequest (void)	{ return &mis_request; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 392				; 00000188H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ENDP ; PackageClass::GetMissionRequest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetEgress@PackageClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEgress@PackageClass@@QAEPAVWayPointClass@@XZ PROC	; PackageClass::GetEgress, COMDAT
; _this$ = ecx

; 94   : 		WayPoint GetEgress (void)						{ return egress; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+388]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEgress@PackageClass@@QAEPAVWayPointClass@@XZ ENDP	; PackageClass::GetEgress
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetIngress@PackageClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIngress@PackageClass@@QAEPAVWayPointClass@@XZ PROC	; PackageClass::GetIngress, COMDAT
; _this$ = ecx

; 93   : 		WayPoint GetIngress (void)						{ return ingress; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+384]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIngress@PackageClass@@QAEPAVWayPointClass@@XZ ENDP	; PackageClass::GetIngress
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetFlights@PackageClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlights@PackageClass@@QAEEXZ PROC			; PackageClass::GetFlights, COMDAT
; _this$ = ecx

; 91   : 		uchar GetFlights (void)							{ return flights; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+345]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlights@PackageClass@@QAEEXZ ENDP			; PackageClass::GetFlights
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetTakeoff@PackageClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTakeoff@PackageClass@@QAEKXZ PROC			; PackageClass::GetTakeoff, COMDAT
; _this$ = ecx

; 89   : 		CampaignTime GetTakeoff (void)					{ return takeoff; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+364]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTakeoff@PackageClass@@QAEKXZ ENDP			; PackageClass::GetTakeoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ PROC		; PackageClass::GetTanker, COMDAT
; _this$ = ecx

; 87   : 		VU_ID GetTanker (void)							{ return tanker; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+336]
	mov	edx, DWORD PTR [eax+340]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ ENDP		; PackageClass::GetTanker
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetECM@PackageClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetECM@PackageClass@@QAE?AVVU_ID@@XZ PROC		; PackageClass::GetECM, COMDAT
; _this$ = ecx

; 85   : 		VU_ID GetECM (void)								{ return ecm; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	edx, DWORD PTR [eax+332]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetECM@PackageClass@@QAE?AVVU_ID@@XZ ENDP		; PackageClass::GetECM
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetJStar@PackageClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetJStar@PackageClass@@QAE?AVVU_ID@@XZ PROC		; PackageClass::GetJStar, COMDAT
; _this$ = ecx

; 84   : 		VU_ID GetJStar (void)							{ return jstar; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+320]
	mov	edx, DWORD PTR [eax+324]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetJStar@PackageClass@@QAE?AVVU_ID@@XZ ENDP		; PackageClass::GetJStar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetAwacs@PackageClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAwacs@PackageClass@@QAE?AVVU_ID@@XZ PROC		; PackageClass::GetAwacs, COMDAT
; _this$ = ecx

; 83   : 		VU_ID GetAwacs (void)							{ return awacs; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+312]
	mov	edx, DWORD PTR [eax+316]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAwacs@PackageClass@@QAE?AVVU_ID@@XZ ENDP		; PackageClass::GetAwacs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\airunit.h
;	COMDAT ?GetKias@AirUnitClass@@UBEMXZ
_TEXT	SEGMENT
tv82 = -12						; size = 4
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetKias@AirUnitClass@@UBEMXZ PROC			; AirUnitClass::GetKias, COMDAT
; _this$ = ecx

; 56   : 		virtual float GetKias()	const 						{ return GetVt() * FTPSEC_TO_KNOTS; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv80[ebp]
	movss	xmm0, DWORD PTR tv80[ebp]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv82[ebp], xmm0
	fld	DWORD PTR tv82[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKias@AirUnitClass@@UBEMXZ ENDP			; AirUnitClass::GetKias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\airunit.h
;	COMDAT ?GetVt@AirUnitClass@@UBEMXZ
_TEXT	SEGMENT
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?GetVt@AirUnitClass@@UBEMXZ PROC			; AirUnitClass::GetVt, COMDAT
; _this$ = ecx

; 55   : 		virtual float GetVt() const							{ return GetUnitSpeed() * KPH_TO_FPS; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	call	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f693e32
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVt@AirUnitClass@@UBEMXZ ENDP			; AirUnitClass::GetVt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?UpdateParentStatistics@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateParentStatistics@UnitClass@@UAEHXZ PROC		; UnitClass::UpdateParentStatistics, COMDAT
; _this$ = ecx

; 559  : 	virtual int UpdateParentStatistics (void)					{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateParentStatistics@UnitClass@@UAEHXZ ENDP		; UnitClass::UpdateParentStatistics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ReorganizeUnit@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReorganizeUnit@UnitClass@@UAEXXZ PROC			; UnitClass::ReorganizeUnit, COMDAT
; _this$ = ecx

; 558  : 	virtual void ReorganizeUnit (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReorganizeUnit@UnitClass@@UAEXXZ ENDP			; UnitClass::ReorganizeUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z PROC		; UnitClass::RemoveChild, COMDAT
; _this$ = ecx

; 557  : 	virtual void RemoveChild (VU_ID)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z ENDP		; UnitClass::RemoveChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?DisposeChildren@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisposeChildren@UnitClass@@UAEXXZ PROC			; UnitClass::DisposeChildren, COMDAT
; _this$ = ecx

; 556  : 	virtual void DisposeChildren (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisposeChildren@UnitClass@@UAEXXZ ENDP			; UnitClass::DisposeChildren
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?AddUnitChild@UnitClass@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?AddUnitChild@UnitClass@@UAEXPAV1@@Z PROC		; UnitClass::AddUnitChild, COMDAT
; _this$ = ecx

; 555  : 	virtual void AddUnitChild (Unit)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddUnitChild@UnitClass@@UAEXPAV1@@Z ENDP		; UnitClass::AddUnitChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z PROC	; UnitClass::GetPrevUnitElement, COMDAT
; _this$ = ecx

; 554  : 	virtual Unit GetPrevUnitElement (Unit)						{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z ENDP	; UnitClass::GetPrevUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z PROC		; UnitClass::GetUnitElementByID, COMDAT
; _this$ = ecx

; 553  : 	virtual Unit GetUnitElementByID (int)						{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z ENDP		; UnitClass::GetUnitElementByID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitElement@UnitClass@@UAEPAV1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitElement@UnitClass@@UAEPAV1@H@Z PROC		; UnitClass::GetUnitElement, COMDAT
; _this$ = ecx

; 552  : 	virtual Unit GetUnitElement (int)							{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElement@UnitClass@@UAEPAV1@H@Z ENDP		; UnitClass::GetUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNextUnitElement@UnitClass@@UBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextUnitElement@UnitClass@@UBEPAV1@XZ PROC		; UnitClass::GetNextUnitElement, COMDAT
; _this$ = ecx

; 551  : 	virtual Unit GetNextUnitElement() const						{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextUnitElement@UnitClass@@UBEPAV1@XZ ENDP		; UnitClass::GetNextUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ PROC		; UnitClass::GetFirstUnitElement, COMDAT
; _this$ = ecx

; 550  : 	virtual Unit GetFirstUnitElement() const					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ ENDP		; UnitClass::GetFirstUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitParent@UnitClass@@UBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitParent@UnitClass@@UBEPAV1@XZ PROC		; UnitClass::GetUnitParent, COMDAT
; _this$ = ecx

; 541  : 	virtual Unit GetUnitParent() const							{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitParent@UnitClass@@UBEPAV1@XZ ENDP		; UnitClass::GetUnitParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?RallyUnit@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?RallyUnit@UnitClass@@UAEHH@Z PROC			; UnitClass::RallyUnit, COMDAT
; _this$ = ecx

; 538  : 	virtual int RallyUnit (int)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?RallyUnit@UnitClass@@UAEHH@Z ENDP			; UnitClass::RallyUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?BuildMission@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BuildMission@UnitClass@@UAEHXZ PROC			; UnitClass::BuildMission, COMDAT
; _this$ = ecx

; 537  : 	virtual int BuildMission (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?BuildMission@UnitClass@@UAEHXZ ENDP			; UnitClass::BuildMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?CheckForSurrender@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckForSurrender@UnitClass@@UAEHXZ PROC		; UnitClass::CheckForSurrender, COMDAT
; _this$ = ecx

; 536  : 	virtual int CheckForSurrender (void)						{ return 1; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckForSurrender@UnitClass@@UAEHXZ ENDP		; UnitClass::CheckForSurrender
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z PROC ; UnitClass::GetObjMovementType, COMDAT
; _this$ = ecx

; 535  : 	virtual MoveType GetObjMovementType (Objective, int)	{ return CampBaseClass::GetMovementType(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ; FalconEntity::GetMovementType
	mov	esp, ebp
	pop	ebp
	ret	8
?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z ENDP ; UnitClass::GetObjMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z PROC	; UnitClass::GetUnitCurrentDestination, COMDAT
; _this$ = ecx

; 534  : 	virtual void GetUnitCurrentDestination(GridIndex*, GridIndex*)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z ENDP	; UnitClass::GetUnitCurrentDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 2
___formal$ = 12						; size = 2
?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z PROC	; UnitClass::SetUnitCurrentDestination, COMDAT
; _this$ = ecx

; 533  : 	virtual void SetUnitCurrentDestination(GridIndex, GridIndex)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z ENDP	; UnitClass::SetUnitCurrentDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNextMoveDirection@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextMoveDirection@UnitClass@@UAEHXZ PROC		; UnitClass::GetNextMoveDirection, COMDAT
; _this$ = ecx

; 532  : 	virtual int GetNextMoveDirection (void)						{ return Here; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextMoveDirection@UnitClass@@UAEHXZ ENDP		; UnitClass::GetNextMoveDirection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ClearUnitPath@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearUnitPath@UnitClass@@UAEXXZ PROC			; UnitClass::ClearUnitPath, COMDAT
; _this$ = ecx

; 531  : 	virtual void ClearUnitPath (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearUnitPath@UnitClass@@UAEXXZ ENDP			; UnitClass::ClearUnitPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitNextMove@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetUnitNextMove@UnitClass@@UAEXXZ PROC			; UnitClass::SetUnitNextMove, COMDAT
; _this$ = ecx

; 530  : 	virtual void SetUnitNextMove (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetUnitNextMove@UnitClass@@UAEXXZ ENDP			; UnitClass::SetUnitNextMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitHeading@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitHeading@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitHeading, COMDAT
; _this$ = ecx

; 529  : 	virtual int GetUnitHeading (void)							{ return Here; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitHeading@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitHeading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitDivision@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitDivision@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitDivision, COMDAT
; _this$ = ecx

; 528  : 	virtual int GetUnitDivision (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitDivision@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPosition@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPosition@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitPosition, COMDAT
; _this$ = ecx

; 527  : 	virtual int GetUnitPosition (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPosition@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMode@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMode@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitMode, COMDAT
; _this$ = ecx

; 526  : 	virtual int GetUnitMode (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMode@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitElement@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitElement@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitElement, COMDAT
; _this$ = ecx

; 525  : 	virtual int GetUnitElement (void) 							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitElement@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitFatigue@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitFatigue@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitFatigue, COMDAT
; _this$ = ecx

; 524  : 	virtual int GetUnitFatigue (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitFatigue@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitFatigue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitOrders@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitOrders@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitOrders, COMDAT
; _this$ = ecx

; 523  : 	virtual int GetUnitOrders (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitOrders@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitObjectiveID, COMDAT
; _this$ = ecx

; 522  : 	virtual VU_ID GetUnitObjectiveID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitObjectiveID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitSecondaryObjID, COMDAT
; _this$ = ecx

; 521  : 	virtual VU_ID GetUnitSecondaryObjID (void)					{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitSecondaryObjID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitPrimaryObjID, COMDAT
; _this$ = ecx

; 520  : 	virtual VU_ID GetUnitPrimaryObjID (void)					{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitPrimaryObjID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ PROC ; UnitClass::GetUnitObjective, COMDAT
; _this$ = ecx

; 519  : 	virtual Objective GetUnitObjective (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; UnitClass::GetUnitObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ PROC ; UnitClass::GetUnitSecondaryObj, COMDAT
; _this$ = ecx

; 518  : 	virtual Objective GetUnitSecondaryObj (void)				{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; UnitClass::GetUnitSecondaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ PROC ; UnitClass::GetUnitPrimaryObj, COMDAT
; _this$ = ecx

; 517  : 	virtual Objective GetUnitPrimaryObj (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; UnitClass::GetUnitPrimaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitHeading@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitHeading@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitHeading, COMDAT
; _this$ = ecx

; 516  : 	virtual void SetUnitHeading (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitHeading@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitHeading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitDivision@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitDivision@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitDivision, COMDAT
; _this$ = ecx

; 515  : 	virtual void SetUnitDivision (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitDivision@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitPosition@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitPosition@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitPosition, COMDAT
; _this$ = ecx

; 514  : 	virtual void SetUnitPosition (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitPosition@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMode@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMode@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitMode, COMDAT
; _this$ = ecx

; 513  : 	virtual void SetUnitMode (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMode@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitFatigue@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitFatigue@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitFatigue, COMDAT
; _this$ = ecx

; 511  : 	virtual void SetUnitFatigue (int) 						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitFatigue@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitFatigue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z PROC		; UnitClass::SetUnitOrders, COMDAT
; _this$ = ecx

; 510  : 	virtual void SetUnitOrders (int, VU_ID)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z ENDP		; UnitClass::SetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitOrders@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitOrders@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitOrders, COMDAT
; _this$ = ecx

; 509  : 	virtual void SetUnitOrders (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitOrders@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z PROC	; UnitClass::SetUnitObjective, COMDAT
; _this$ = ecx

; 508  : 	virtual void SetUnitObjective (VU_ID)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z ENDP	; UnitClass::SetUnitObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z PROC	; UnitClass::SetUnitSecondaryObj, COMDAT
; _this$ = ecx

; 507  : 	virtual void SetUnitSecondaryObj (VU_ID)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z ENDP	; UnitClass::SetUnitSecondaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z PROC	; UnitClass::SetUnitPrimaryObj, COMDAT
; _this$ = ecx

; 506  : 	virtual void SetUnitPrimaryObj (VU_ID)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z ENDP	; UnitClass::SetUnitPrimaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 2
___formal$ = 16						; size = 2
?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z PROC		; UnitClass::SetUnitAssemblyPoint, COMDAT
; _this$ = ecx

; 502  : 	virtual void SetUnitAssemblyPoint (int, GridIndex, GridIndex)		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z ENDP		; UnitClass::SetUnitAssemblyPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 8
?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z PROC	; UnitClass::HandleRequestReceipt, COMDAT
; _this$ = ecx

; 501  : 	virtual void HandleRequestReceipt(int, int, VU_ID)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z ENDP	; UnitClass::HandleRequestReceipt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z PROC ; UnitClass::BuildPackage, COMDAT
; _this$ = ecx

; 500  : 	virtual int BuildPackage(MissionRequest, F4PFList)	{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z ENDP ; UnitClass::BuildPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetLastResupply@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastResupply@UnitClass@@UAEHXZ PROC			; UnitClass::GetLastResupply, COMDAT
; _this$ = ecx

; 497  : 	virtual int GetLastResupply (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastResupply@UnitClass@@UAEHXZ ENDP			; UnitClass::GetLastResupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetLastResupplyTime@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastResupplyTime@UnitClass@@UAEKXZ PROC		; UnitClass::GetLastResupplyTime, COMDAT
; _this$ = ecx

; 496  : 	virtual CampaignTime GetLastResupplyTime (void)				{ return TheCampaign.CurrentTime; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastResupplyTime@UnitClass@@UAEKXZ ENDP		; UnitClass::GetLastResupplyTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitStores@UnitClass@@UAEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitStores@UnitClass@@UAEEH@Z PROC			; UnitClass::GetUnitStores, COMDAT
; _this$ = ecx

; 495  : 	virtual uchar GetUnitStores (int)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitStores@UnitClass@@UAEEH@Z ENDP			; UnitClass::GetUnitStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetSquadronFuel@UnitClass@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSquadronFuel@UnitClass@@UAEJXZ PROC			; UnitClass::GetSquadronFuel, COMDAT
; _this$ = ecx

; 494  : 	virtual long GetSquadronFuel (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSquadronFuel@UnitClass@@UAEJXZ ENDP			; UnitClass::GetSquadronFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMorale@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMorale@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitMorale, COMDAT
; _this$ = ecx

; 493  : 	virtual int GetUnitMorale (void) 							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMorale@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitMorale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSupply@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSupply@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitSupply, COMDAT
; _this$ = ecx

; 492  : 	virtual int GetUnitSupply (void) 							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSupply@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSpecialty@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSpecialty@UnitClass@@UAEHXZ PROC		; UnitClass::GetUnitSpecialty, COMDAT
; _this$ = ecx

; 491  : 	virtual int GetUnitSpecialty (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSpecialty@UnitClass@@UAEHXZ ENDP		; UnitClass::GetUnitSpecialty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLastResupplyTime@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLastResupplyTime@UnitClass@@UAEXK@Z PROC		; UnitClass::SetLastResupplyTime, COMDAT
; _this$ = ecx

; 490  : 	virtual void SetLastResupplyTime (CampaignTime)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastResupplyTime@UnitClass@@UAEXK@Z ENDP		; UnitClass::SetLastResupplyTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLastResupply@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLastResupply@UnitClass@@UAEXH@Z PROC		; UnitClass::SetLastResupply, COMDAT
; _this$ = ecx

; 489  : 	virtual void SetLastResupply (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastResupply@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetLastResupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitStores@UnitClass@@UAEXHE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
?SetUnitStores@UnitClass@@UAEXHE@Z PROC			; UnitClass::SetUnitStores, COMDAT
; _this$ = ecx

; 488  : 	virtual void SetUnitStores (int, uchar)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitStores@UnitClass@@UAEXHE@Z ENDP			; UnitClass::SetUnitStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetSquadronFuel@UnitClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetSquadronFuel@UnitClass@@UAEXJ@Z PROC		; UnitClass::SetSquadronFuel, COMDAT
; _this$ = ecx

; 487  : 	virtual void SetSquadronFuel (long)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSquadronFuel@UnitClass@@UAEXJ@Z ENDP		; UnitClass::SetSquadronFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMorale@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMorale@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitMorale, COMDAT
; _this$ = ecx

; 486  : 	virtual void SetUnitMorale (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMorale@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitMorale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSupply@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitSupply@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitSupply, COMDAT
; _this$ = ecx

; 485  : 	virtual void SetUnitSupply (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitSupply@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSpecialty@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitSpecialty@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitSpecialty, COMDAT
; _this$ = ecx

; 484  : 	virtual void SetUnitSpecialty (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitSpecialty@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitSpecialty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitNormalRole@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitNormalRole@UnitClass@@UAEHXZ PROC		; UnitClass::GetUnitNormalRole, COMDAT
; _this$ = ecx

; 464  : 	virtual int GetUnitNormalRole (void)						{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitNormalRole@UnitClass@@UAEHXZ ENDP		; UnitClass::GetUnitNormalRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ PROC	; UnitClass::GetAirTarget, COMDAT
; _this$ = ecx

; 461  : 	virtual FalconEntity* GetAirTarget (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAirTarget@UnitClass@@UAEPAVFalconEntity@@XZ ENDP	; UnitClass::GetAirTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ PROC		; UnitClass::GetAirTargetID, COMDAT
; _this$ = ecx

; 460  : 	virtual VU_ID GetAirTargetID (void)							{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAirTargetID@UnitClass@@UAE?AVVU_ID@@XZ ENDP		; UnitClass::GetAirTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z PROC		; UnitClass::SetUnitAirbase, COMDAT
; _this$ = ecx

; 455  : 	virtual void SetUnitAirbase (VU_ID)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z ENDP		; UnitClass::SetUnitAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMissionTarget@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMissionTarget@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitMissionTarget, COMDAT
; _this$ = ecx

; 452  : 	virtual void SetUnitMissionTarget (int)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMissionTarget@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitMissionTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitRole@UnitClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetUnitRole@UnitClass@@UAEXE@Z PROC			; UnitClass::SetUnitRole, COMDAT
; _this$ = ecx

; 449  : 	virtual void SetUnitRole (uchar)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitRole@UnitClass@@UAEXE@Z ENDP			; UnitClass::SetUnitRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ PROC	; UnitClass::GetFirstUnitWP, COMDAT
; _this$ = ecx

; 431  : 	WayPoint GetFirstUnitWP()				{ return wp_list; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ENDP	; UnitClass::GetFirstUnitWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitTactic@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitTactic@UnitClass@@QBEHXZ PROC			; UnitClass::GetUnitTactic, COMDAT
; _this$ = ecx

; 375  : 	int GetUnitTactic() const						{ return tactic; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+222]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitTactic@UnitClass@@QBEHXZ ENDP			; UnitClass::GetUnitTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMoved@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMoved@UnitClass@@QBEHXZ PROC			; UnitClass::GetUnitMoved, COMDAT
; _this$ = ecx

; 374  : 	int GetUnitMoved() const						{ return moved; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+220]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMoved@UnitClass@@QBEHXZ ENDP			; UnitClass::GetUnitMoved
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ PROC		; UnitClass::GetTargetID, COMDAT
; _this$ = ecx

; 367  : 	VU_ID GetTargetID (void)						{ return target_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR [eax+216]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ ENDP		; UnitClass::GetTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ PROC	; UnitClass::GetTarget, COMDAT
; _this$ = ecx

; 366  : 	FalconEntity* GetTarget (void)					{ return (FalconEntity*) vuDatabase->Find(target_id); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	mov	edx, DWORD PTR [eax+212]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ENDP	; UnitClass::GetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNumVehicles@UnitClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vg$ = 8						; size = 4
?GetNumVehicles@UnitClass@@QAEHH@Z PROC			; UnitClass::GetNumVehicles, COMDAT
; _this$ = ecx

; 365  : 	int GetNumVehicles (int vg)						{ return (int)((roster >> (vg*2)) & 0x03); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _vg$[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	sar	eax, cl
	and	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumVehicles@UnitClass@@QAEHH@Z ENDP			; UnitClass::GetNumVehicles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitTactic@UnitClass@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 1
?SetUnitTactic@UnitClass@@QAEXE@Z PROC			; UnitClass::SetUnitTactic, COMDAT
; _this$ = ecx

; 361  : 	void SetUnitTactic (uchar t)			 		{ tactic = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _t$[ebp]
	mov	BYTE PTR [eax+222], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitTactic@UnitClass@@QAEXE@Z ENDP			; UnitClass::SetUnitTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z
_TEXT	SEGMENT
$T1 = -28						; size = 8
$T2 = -20						; size = 8
_this$ = -12						; size = 4
$T3 = -8						; size = 4
tv73 = -4						; size = 4
_e$ = 8							; size = 4
?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z PROC	; UnitClass::SetTarget, COMDAT
; _this$ = ecx

; 359  : 	void SetTarget (FalconEntity *e)				{ target_id = (e)? e->Id() : FalconNullId; }

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN3@SetTarget
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@SetTarget
$LN3@SetTarget:
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR $T2[ebp+4], edx
	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv73[ebp], eax
$LN4@SetTarget:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+212], eax
	mov	DWORD PTR [edx+216], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ENDP	; UnitClass::SetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitDestination@UnitClass@@QAEXFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?SetUnitDestination@UnitClass@@QAEXFF@Z PROC		; UnitClass::SetUnitDestination, COMDAT
; _this$ = ecx

; 356  : 	void SetUnitDestination (GridIndex x, GridIndex y)	{ 	dest_x = (GridIndex)(x+1); dest_y = (GridIndex)(y+1); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR _x$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+200], ax
	movsx	edx, WORD PTR _y$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+202], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitDestination@UnitClass@@QAEXFF@Z ENDP		; UnitClass::SetUnitDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAltitude@UnitClass@@QAEHXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?GetUnitAltitude@UnitClass@@QAEHXZ PROC			; UnitClass::GetUnitAltitude, COMDAT
; _this$ = ecx

; 343  : 	int GetUnitAltitude (void)						{ return FloatToInt32(ZPos()*-1.0F); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv76[ebp]
	movss	xmm0, DWORD PTR tv76[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitAltitude@UnitClass@@QAEHXZ ENDP			; UnitClass::GetUnitAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitAltitude@UnitClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_alt$ = 8						; size = 4
?SetUnitAltitude@UnitClass@@QAEXH@Z PROC		; UnitClass::SetUnitAltitude, COMDAT
; _this$ = ecx

; 341  : 	void SetUnitAltitude (int alt)					{ SetPosition(XPos(),YPos(),-1.0F * (float)alt); MakeCampBaseDirty (DIRTY_ALTITUDE, DDP[181].priority); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cvtsi2ss xmm0, DWORD PTR _alt$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition
	mov	eax, 4
	imul	eax, 181				; 000000b5H
	mov	ecx, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z ; CampBaseClass::MakeCampBaseDirty
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitAltitude@UnitClass@@QAEXH@Z ENDP		; UnitClass::SetUnitAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?NoAbort@UnitClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NoAbort@UnitClass@@QAEHXZ PROC				; UnitClass::NoAbort, COMDAT
; _this$ = ecx

; 336  : 	int NoAbort (void)								{ return (int)unit_flags & U_NO_ABORT; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 67108864				; 04000000H
	mov	esp, ebp
	pop	ebp
	ret	0
?NoAbort@UnitClass@@QAEHXZ ENDP				; UnitClass::NoAbort
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Locked@UnitClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Locked@UnitClass@@QAEHXZ PROC				; UnitClass::Locked, COMDAT
; _this$ = ecx

; 334  : 	int Locked (void)								{ return (int)unit_flags & U_LOCKED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 16777216				; 01000000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Locked@UnitClass@@QAEHXZ ENDP				; UnitClass::Locked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Fired@UnitClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Fired@UnitClass@@QAEHXZ PROC				; UnitClass::Fired, COMDAT
; _this$ = ecx

; 333  : 	int Fired (void)								{ return (int)unit_flags & U_FIRED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 8388608				; 00800000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Fired@UnitClass@@QAEHXZ ENDP				; UnitClass::Fired
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Diverted@UnitClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Diverted@UnitClass@@QAEHXZ PROC			; UnitClass::Diverted, COMDAT
; _this$ = ecx

; 332  : 	int Diverted (void)								{ return (int)unit_flags & U_DIVERTED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 4194304				; 00400000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Diverted@UnitClass@@QAEHXZ ENDP			; UnitClass::Diverted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?HasPilots@UnitClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasPilots@UnitClass@@QAEHXZ PROC			; UnitClass::HasPilots, COMDAT
; _this$ = ecx

; 331  : 	int HasPilots (void)							{ return (int)unit_flags & U_HAS_PILOTS; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 2097152				; 00200000H
	mov	esp, ebp
	pop	ebp
	ret	0
?HasPilots@UnitClass@@QAEHXZ ENDP			; UnitClass::HasPilots
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Final@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Final@UnitClass@@QBEHXZ PROC				; UnitClass::Final, COMDAT
; _this$ = ecx

; 330  : 	int Final () const								{ return (int)unit_flags & U_FINAL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1048576				; 00100000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Final@UnitClass@@QBEHXZ ENDP				; UnitClass::Final
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Losses@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Losses@UnitClass@@QBEHXZ PROC				; UnitClass::Losses, COMDAT
; _this$ = ecx

; 322  : 	int Losses () const								{ return (int)unit_flags & U_LOSSES; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 65536				; 00010000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Losses@UnitClass@@QBEHXZ ENDP				; UnitClass::Losses
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Aborted@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Aborted@UnitClass@@QBEHXZ PROC				; UnitClass::Aborted, COMDAT
; _this$ = ecx

; 321  : 	int Aborted () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Aborted@UnitClass@@QBEHXZ ENDP				; UnitClass::Aborted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Broken@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Broken@UnitClass@@QBEHXZ PROC				; UnitClass::Broken, COMDAT
; _this$ = ecx

; 320  : 	int Broken () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Broken@UnitClass@@QBEHXZ ENDP				; UnitClass::Broken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Combat@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Combat@UnitClass@@QBEHXZ PROC				; UnitClass::Combat, COMDAT
; _this$ = ecx

; 319  : 	int Combat () const								{ return (int)unit_flags & U_COMBAT; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 16384				; 00004000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Combat@UnitClass@@QBEHXZ ENDP				; UnitClass::Combat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Cargo@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cargo@UnitClass@@QBEHXZ PROC				; UnitClass::Cargo, COMDAT
; _this$ = ecx

; 318  : 	int Cargo () const								{ return (int)unit_flags & U_CARGO; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 8192				; 00002000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Cargo@UnitClass@@QBEHXZ ENDP				; UnitClass::Cargo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Moving@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Moving@UnitClass@@QBEHXZ PROC				; UnitClass::Moving, COMDAT
; _this$ = ecx

; 316  : 	int Moving() const								{ return (int)unit_flags & U_MOVING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1024				; 00000400H
	mov	esp, ebp
	pop	ebp
	ret	0
?Moving@UnitClass@@QBEHXZ ENDP				; UnitClass::Moving
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Engaged@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Engaged@UnitClass@@QBEHXZ PROC				; UnitClass::Engaged, COMDAT
; _this$ = ecx

; 313  : 	int Engaged() const								{ return (int)unit_flags & U_ENGAGED; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 64					; 00000040H
	mov	esp, ebp
	pop	ebp
	ret	0
?Engaged@UnitClass@@QBEHXZ ENDP				; UnitClass::Engaged
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IsDead@UnitClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@UnitClass@@UBEHXZ PROC				; UnitClass::IsDead, COMDAT
; _this$ = ecx

; 307  : 	virtual int IsDead() const						{ return (int)unit_flags & U_DEAD; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@UnitClass@@UBEHXZ ENDP				; UnitClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IsUnit@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@UnitClass@@UAEHXZ PROC				; UnitClass::IsUnit, COMDAT
; _this$ = ecx

; 274  : 	virtual int IsUnit (void)										{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@UnitClass@@UAEHXZ ENDP				; UnitClass::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SupplyUnit@UnitClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SupplyUnit@UnitClass@@UAEXHH@Z PROC			; UnitClass::SupplyUnit, COMDAT
; _this$ = ecx

; 265  : 	virtual void SupplyUnit (int, int)								{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SupplyUnit@UnitClass@@UAEXHH@Z ENDP			; UnitClass::SupplyUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitFuelNeed@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitFuelNeed@UnitClass@@UAEHH@Z PROC		; UnitClass::GetUnitFuelNeed, COMDAT
; _this$ = ecx

; 264  : 	virtual int GetUnitFuelNeed (int)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitFuelNeed@UnitClass@@UAEHH@Z ENDP		; UnitClass::GetUnitFuelNeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSupplyNeed@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitSupplyNeed@UnitClass@@UAEHH@Z PROC		; UnitClass::GetUnitSupplyNeed, COMDAT
; _this$ = ecx

; 263  : 	virtual int GetUnitSupplyNeed (int)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSupplyNeed@UnitClass@@UAEHH@Z ENDP		; UnitClass::GetUnitSupplyNeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?AdjustForSupply@UnitClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AdjustForSupply@UnitClass@@UAEMXZ PROC			; UnitClass::AdjustForSupply, COMDAT
; _this$ = ecx

; 250  : 	virtual float AdjustForSupply(void)								{ return 1.0F; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld1
	mov	esp, ebp
	pop	ebp
	ret	0
?AdjustForSupply@UnitClass@@UAEMXZ ENDP			; UnitClass::AdjustForSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Father@UnitClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Father@UnitClass@@UBEHXZ PROC				; UnitClass::Father, COMDAT
; _this$ = ecx

; 248  : 	virtual int Father() const										{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Father@UnitClass@@UBEHXZ ENDP				; UnitClass::Father
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ClearDeaggregationData@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDeaggregationData@UnitClass@@UAEXXZ PROC		; UnitClass::ClearDeaggregationData, COMDAT
; _this$ = ecx

; 242  : 	virtual void ClearDeaggregationData (void)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDeaggregationData@UnitClass@@UAEXXZ ENDP		; UnitClass::ClearDeaggregationData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ PROC ; UnitClass::GetUnitDeaggregationData, COMDAT
; _this$ = ecx

; 240  : 	virtual UnitDeaggregationData* GetUnitDeaggregationData (void)	{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ ENDP ; UnitClass::GetUnitDeaggregationData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?CanShootWeapon@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?CanShootWeapon@UnitClass@@UAEHH@Z PROC			; UnitClass::CanShootWeapon, COMDAT
; _this$ = ecx

; 238  : 	virtual int CanShootWeapon (int)								{ return TRUE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	4
?CanShootWeapon@UnitClass@@UAEHH@Z ENDP			; UnitClass::CanShootWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetOdds@UnitClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOdds@UnitClass@@QAEFXZ PROC				; UnitClass::GetOdds, COMDAT
; _this$ = ecx

; 159  : 	short GetOdds (void)				{ return odds; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+230]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOdds@UnitClass@@QAEFXZ ENDP				; UnitClass::GetOdds
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetReinforcement@UnitClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReinforcement@UnitClass@@QAEFXZ PROC		; UnitClass::GetReinforcement, COMDAT
; _this$ = ecx

; 158  : 	short GetReinforcement (void)		{ return reinforcement; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+228]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReinforcement@UnitClass@@QAEFXZ ENDP		; UnitClass::GetReinforcement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetCurrentWaypoint@UnitClass@@QAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentWaypoint@UnitClass@@QAEGXZ PROC		; UnitClass::GetCurrentWaypoint, COMDAT
; _this$ = ecx

; 156  : 	ushort GetCurrentWaypoint (void)	{ return current_wp; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+224]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentWaypoint@UnitClass@@QAEGXZ ENDP		; UnitClass::GetCurrentWaypoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTactic@UnitClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTactic@UnitClass@@QAEEXZ PROC			; UnitClass::GetTactic, COMDAT
; _this$ = ecx

; 155  : 	uchar GetTactic (void)				{ return tactic; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+222]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTactic@UnitClass@@QAEEXZ ENDP			; UnitClass::GetTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitFlags@UnitClass@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitFlags@UnitClass@@QAEJXZ PROC			; UnitClass::GetUnitFlags, COMDAT
; _this$ = ecx

; 148  : 	fourbyte GetUnitFlags (void)		{ return unit_flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitFlags@UnitClass@@QAEJXZ ENDP			; UnitClass::GetUnitFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetRoster@UnitClass@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRoster@UnitClass@@QAEJXZ PROC			; UnitClass::GetRoster, COMDAT
; _this$ = ecx

; 147  : 	fourbyte GetRoster (void)			{ return roster; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRoster@UnitClass@@QAEJXZ ENDP			; UnitClass::GetRoster
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0LoadoutArray@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LoadoutArray@@QAE@XZ PROC				; LoadoutArray::LoadoutArray, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0LoadoutStruct@@QAE@XZ		; LoadoutStruct::LoadoutStruct
	push	5
	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0LoadoutArray@@QAE@XZ ENDP				; LoadoutArray::LoadoutArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\loadout.h
;	COMDAT ??4LoadoutStruct@@QAEABU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??4LoadoutStruct@@QAEABU0@ABU0@@Z PROC			; LoadoutStruct::operator=, COMDAT
; _this$ = ecx

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   :  			if (&rhs != this)

	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	je	SHORT $LN1@operator

; 41   : 			{ 
; 42   : 				memcpy(WeaponID,	rhs.WeaponID,	 (sizeof(short) * HARDPOINT_MAX)); 

	push	32					; 00000020H
	mov	ecx, DWORD PTR _rhs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 43   : 				memcpy(WeaponCount,	rhs.WeaponCount, (sizeof(uchar) * HARDPOINT_MAX)); 

	push	16					; 00000010H
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 44   : 			}
; 45   : 
; 46   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 47   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4LoadoutStruct@@QAEABU0@ABU0@@Z ENDP			; LoadoutStruct::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\loadout.h
;	COMDAT ??0LoadoutStruct@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LoadoutStruct@@QAE@XZ PROC				; LoadoutStruct::LoadoutStruct, COMDAT
; _this$ = ecx

; 32   : 		LoadoutStruct(void)		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		{ 
; 34   : 			memset(WeaponID,	0,	(sizeof(short) * HARDPOINT_MAX)); 

	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 35   : 			memset(WeaponCount,	0,	(sizeof(uchar) * HARDPOINT_MAX)); 

	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0LoadoutStruct@@QAE@XZ ENDP				; LoadoutStruct::LoadoutStruct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?HasNCTR@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasNCTR@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::HasNCTR, COMDAT
; _this$ = ecx

; 195  : 	int HasNCTR (void)										{ return (int)(O_HAS_NCTR & obj_data.obj_flags); }	// 2002-02-13 ADDED BY S.G.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 2097152				; 00200000H
	mov	esp, ebp
	pop	ebp
	ret	0
?HasNCTR@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::HasNCTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsGCI@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGCI@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::IsGCI, COMDAT
; _this$ = ecx

; 194  : 	int IsGCI (void)										{ return (int)(O_IS_GCI & obj_data.obj_flags); }	// 2002-02-13 ADDED BY S.G.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 4194304				; 00400000H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGCI@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::IsGCI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsNearfront@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNearfront@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsNearfront, COMDAT
; _this$ = ecx

; 189  : 	int IsNearfront (void)									{ return (int)((O_THIRDLINE | O_SECONDLINE | O_FRONTLINE) & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 7
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNearfront@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsNearfront
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?SetChecked@CampBaseClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetChecked@CampBaseClass@@QAEXXZ PROC			; CampBaseClass::SetChecked, COMDAT
; _this$ = ecx

; 306  : 	void SetChecked (void)						{	local_flags |= CBC_CHECKED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+156]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+156], cx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetChecked@CampBaseClass@@QAEXXZ ENDP			; CampBaseClass::SetChecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?SetSpottedTime@CampBaseClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetSpottedTime@CampBaseClass@@QAEXK@Z PROC		; CampBaseClass::SetSpottedTime, COMDAT
; _this$ = ecx

; 299  : 	void SetSpottedTime (CampaignTime t)		{	spotTime = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+144], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSpottedTime@CampBaseClass@@QAEXK@Z ENDP		; CampBaseClass::SetSpottedTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z PROC	; CampBaseClass::HasEntity, COMDAT
; _this$ = ecx

; 281  : 	virtual int HasEntity(VuEntity *e) const    {   

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 		return ((components && (components->Find(e) != NULL)) || (this == e)); 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN3@HasEntity
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z ; VuCollection::Find
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	je	SHORT $LN4@HasEntity
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN5@HasEntity
$LN4@HasEntity:
	mov	DWORD PTR tv81[ebp], 1
$LN5@HasEntity:
	mov	eax, DWORD PTR tv81[ebp]

; 283  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z ENDP	; CampBaseClass::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsTacan@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTacan@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsTacan, COMDAT
; _this$ = ecx

; 279  : 	int IsTacan (void)							{	return local_flags & CBC_HAS_TACAN; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 256				; 00000100H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTacan@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsTacan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAwake@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 273  : 	int IsAwake (void)							{	return local_flags & CBC_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsChecked@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsChecked@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsChecked, COMDAT
; _this$ = ecx

; 272  : 	int IsChecked (void)						{	return local_flags & CBC_CHECKED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsChecked@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsChecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsEmitting@CampBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@CampBaseClass@@UAEHXZ PROC			; CampBaseClass::IsEmitting, COMDAT
; _this$ = ecx

; 269  : 	virtual int IsEmitting (void)				{	return base_flags & CBC_EMITTING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+150]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@CampBaseClass@@UAEHXZ ENDP			; CampBaseClass::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsCampBase@CampBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@CampBaseClass@@UAE_NXZ PROC			; CampBaseClass::IsCampBase, COMDAT
; _this$ = ecx

; 268  : 	virtual bool IsCampBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@CampBaseClass@@UAE_NXZ ENDP			; CampBaseClass::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetMissilesFlying@CampBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMissilesFlying@CampBaseClass@@UAEHXZ PROC		; CampBaseClass::GetMissilesFlying, COMDAT
; _this$ = ecx

; 249  : 	virtual int GetMissilesFlying (void)				{ return 0; } // MLR 10/3/2004 - finishing what //me123 started

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMissilesFlying@CampBaseClass@@UAEHXZ ENDP		; CampBaseClass::GetMissilesFlying
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?StepRadar@CampBaseClass@@UAEHHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_d$ = 12						; size = 4
_range$ = 16						; size = 4
?StepRadar@CampBaseClass@@UAEHHHM@Z PROC		; CampBaseClass::StepRadar, COMDAT
; _this$ = ecx

; 240  : 	virtual int StepRadar (int t,int d, float range)								{	return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StepRadar@CampBaseClass@@UAEHHHM@Z ENDP		; CampBaseClass::StepRadar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCountry@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 239  : 	virtual uchar GetCountry (void)								{	return owner; }		// New FalcEnt friendly form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetTeam@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetTeam, COMDAT
; _this$ = ecx

; 238  : 	virtual uchar GetTeam (void)								{	return ::GetTeam(owner); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+154]
	push	ecx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCampID@CampBaseClass@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampID@CampBaseClass@@UAEFXZ PROC			; CampBaseClass::GetCampID, COMDAT
; _this$ = ecx

; 237  : 	virtual short GetCampID (void)								{	return camp_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+152]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampID@CampBaseClass@@UAEFXZ ENDP			; CampBaseClass::GetCampID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSpotted@CampBaseClass@@QBEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpotted@CampBaseClass@@QBEFXZ PROC			; CampBaseClass::GetSpotted, COMDAT
; _this$ = ecx

; 137  : 	short GetSpotted() const 					{	return spotted; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpotted@CampBaseClass@@QBEFXZ ENDP			; CampBaseClass::GetSpotted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSpotTime@CampBaseClass@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpotTime@CampBaseClass@@QBEKXZ PROC			; CampBaseClass::GetSpotTime, COMDAT
; _this$ = ecx

; 136  : 	CampaignTime GetSpotTime() const			{	return spotTime; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+144]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpotTime@CampBaseClass@@QBEKXZ ENDP			; CampBaseClass::GetSpotTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?UseId@IdNamespace@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?UseId@IdNamespace@@QAEXK@Z PROC			; IdNamespace::UseId, COMDAT
; _this$ = ecx

; 57   : 	void UseId(VU_ID_NUMBER id){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 		if (id >= curId){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@UseId

; 59   : 			++curId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 60   : 			if (curId > hiWrap){ curId = lowWrap; }

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN3@UseId
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx
$LN3@UseId:

; 61   : 		}
; 62   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?UseId@IdNamespace@@QAEXK@Z ENDP			; IdNamespace::UseId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPLocation@WayPointClass@@QBEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetWPLocation@WayPointClass@@QBEXPAF0@Z PROC		; WayPointClass::GetWPLocation, COMDAT
; _this$ = ecx

; 205  : 	void GetWPLocation (GridIndex* x, GridIndex* y) const { *x = GridX; *y = GridY; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetWPLocation@WayPointClass@@QBEXPAF0@Z ENDP		; WayPointClass::GetWPLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPDepartureTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPDepartureTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPDepartureTime, COMDAT
; _this$ = ecx

; 203  : 	CampaignTime GetWPDepartureTime()				{ return Depart; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPDepartureTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPDepartureTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPArrivalTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPArrivalTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPArrivalTime, COMDAT
; _this$ = ecx

; 202  : 	CampaignTime GetWPArrivalTime()					{ return Arrive; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPArrivalTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPArrivalTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAltitudeLevel@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAltitudeLevel@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPAltitudeLevel, COMDAT
; _this$ = ecx

; 200  : 	int GetWPAltitudeLevel()						{ return GridZ; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAltitudeLevel@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPAltitudeLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAltitude@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAltitude@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPAltitude, COMDAT
; _this$ = ecx

; 199  : 	int GetWPAltitude()								{ return (int)(GridZ*GRIDZ_SCALE_FACTOR); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	imul	eax, 10					; 0000000aH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAltitude@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetPrevWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrevWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetPrevWP, COMDAT
; _this$ = ecx

; 176  : 	WayPoint GetPrevWP (void)						{ return PrevWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrevWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetPrevWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFlags@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFlags@WayPointClass@@QAEKXZ PROC			; WayPointClass::GetWPFlags, COMDAT
; _this$ = ecx

; 173  : 	ulong GetWPFlags (void)							{ return (ulong)Flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFlags@WayPointClass@@QAEKXZ ENDP			; WayPointClass::GetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ PROC ; WayPointClass::GetWPTarget, COMDAT
; _this$ = ecx

; 168  : 	CampEntity GetWPTarget (void)					{ return (CampEntity)vuDatabase->Find(TargetID); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ENDP ; WayPointClass::GetWPTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ PROC	; WayPointClass::GetWPTargetID, COMDAT
; _this$ = ecx

; 167  : 	VU_ID GetWPTargetID (void)						{ return TargetID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ENDP	; WayPointClass::GetWPTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPFlag@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?SetWPFlag@WayPointClass@@QAEXK@Z PROC			; WayPointClass::SetWPFlag, COMDAT
; _this$ = ecx

; 164  : 	void SetWPFlag (ulong f)						{ Flags |= (ulong) f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPFlag@WayPointClass@@QAEXK@Z ENDP			; WayPointClass::SetWPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ PROC	; FalconEntity::GetMovementType, COMDAT
; _this$ = ecx

; 149  : 	virtual MoveType GetMovementType (void)		{ return NoMove; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ENDP	; FalconEntity::GetMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsExploding@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsExploding@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsExploding, COMDAT
; _this$ = ecx

; 143  : 	virtual int IsExploding (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMover@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMover, COMDAT
; _this$ = ecx

; 134  : 	virtual int IsMover (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?UnSetFalcFlag@FalconEntity@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?UnSetFalcFlag@FalconEntity@@QAEXH@Z PROC		; FalconEntity::UnSetFalcFlag, COMDAT
; _this$ = ecx

; 111  : 	void UnSetFalcFlag (int flag)				{ if (falconFlags & flag) {falconFlags &= ~flag; MakeFlagsDirty ();} };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN2@UnSetFalcF
	mov	edx, DWORD PTR _flag$[ebp]
	not	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+136], cl
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeFlagsDirty@FalconEntity@@QAEXXZ	; FalconEntity::MakeFlagsDirty
$LN2@UnSetFalcF:
	mov	esp, ebp
	pop	ebp
	ret	4
?UnSetFalcFlag@FalconEntity@@QAEXH@Z ENDP		; FalconEntity::UnSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampaign@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsCampaign@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsCampaign, COMDAT
; _this$ = ecx

; 101  : 		{return (falconType & FalconCampaignEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 1
	je	SHORT $LN3@IsCampaign
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsCampaign
$LN3@IsCampaign:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsCampaign:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampaign@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSimBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsSimBase, COMDAT
; _this$ = ecx

; 98   : 	virtual bool IsSimBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC	; VuBin<VuEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP	; VuBin<VuEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ PROC		; VuEntity::VuState, COMDAT
; _this$ = ecx

; 153  : 	VU_MEM VuState() const    { return vuState_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ ENDP		; VuEntity::VuState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z PROC	; VuEntity::SetSendCreate, COMDAT
; _this$ = ecx

; 148  : 	void SetSendCreate(VU_SEND_TYPE sc) { share_.flags_.breakdown_.sendCreate_ = sc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sc$[ebp]
	and	eax, 3
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -193				; ffffff3fH
	or	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ENDP	; VuEntity::SetSendCreate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPR@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
?SetYPR@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPR, COMDAT
; _this$ = ecx

; 113  : 	void SetYPR(SM_SCALAR yaw, SM_SCALAR pitch, SM_SCALAR roll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		orient_.yaw_ = yaw; orient_.pitch_ = pitch; orient_.roll_ = roll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [ecx+64], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 115  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPR@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
