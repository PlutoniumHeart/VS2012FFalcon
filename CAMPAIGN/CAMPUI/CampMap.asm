; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPUI\CampMap.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?MRX@@3HA					; MRX
PUBLIC	?MRY@@3HA					; MRY
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?ALT_TO_BUILD_RANGES_TO@@3HA			; ALT_TO_BUILD_RANGES_TO
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?PMRX@@3HA					; PMRX
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?PMRY@@3HA					; PMRY
PUBLIC	?MAXOI@@3HA					; MAXOI
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
_BSS	SEGMENT
?MRX@@3HA DD	01H DUP (?)				; MRX
?MRY@@3HA DD	01H DUP (?)				; MRY
?PMRX@@3HA DD	01H DUP (?)				; PMRX
?PMRY@@3HA DD	01H DUP (?)				; PMRY
?MAXOI@@3HA DD	01H DUP (?)				; MAXOI
_BSS	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
_DATA	SEGMENT
?ALT_TO_BUILD_RANGES_TO@@3HA DD 09c4H			; ALT_TO_BUILD_RANGES_TO
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?CampEnterCriticalSection@@YAXXZ		; CampEnterCriticalSection
PUBLIC	?CampLeaveCriticalSection@@YAXXZ		; CampLeaveCriticalSection
PUBLIC	?Moving@UnitClass@@QBEHXZ			; UnitClass::Moving
PUBLIC	?MakeCampMap@@YAPAEHPAEH@Z			; MakeCampMap
PUBLIC	?UpdateCampMap@@YAPAEHPAEFF@Z			; UpdateCampMap
PUBLIC	?GetOwner@@YAEPAEFF@Z				; GetOwner
PUBLIC	?FreeCampMap@@YAXPAE@Z				; FreeCampMap
PUBLIC	?AddToThreatMap@@YAHPAVCampBaseClass@@PAEH@Z	; AddToThreatMap
PUBLIC	?AddToDetectionMap@@YAHPAVCampBaseClass@@PAEH@Z	; AddToDetectionMap
PUBLIC	?FriendlyTerritory@@YAHFFH@Z			; FriendlyTerritory
PUBLIC	?GetAproxDetection@@YAHEFF@Z			; GetAproxDetection
PUBLIC	?GetAproxThreat@@YAHEFF@Z			; GetAproxThreat
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03HKJIJDAE@pak?$AA@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@399fcd90
PUBLIC	__real@3f800000
PUBLIC	__real@40c00000
PUBLIC	__real@bf800000
EXTRN	_fclose:PROC
EXTRN	_fread:PROC
EXTRN	_memset:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z:PROC	; OpenCampFile
EXTRN	?GetCover@@YA?AW4CoverType@@FF@Z:PROC		; GetCover
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?OctantTo@@YAHFFFF@Z:PROC			; OctantTo
EXTRN	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z:PROC ; FindNearestObjective
EXTRN	?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z:PROC ; FindNearestObjective
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	?UI_UpdateOccupationMap@@YAXXZ:PROC		; UI_UpdateOccupationMap
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?Map_Max_X@@3FA:WORD				; Map_Max_X
EXTRN	?Map_Max_Y@@3FA:WORD				; Map_Max_Y
EXTRN	?campCritical@@3PAUF4CSECTIONHANDLE@@A:DWORD	; campCritical
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?POList@@3PAVFalconPrivateOrderedList@@A:DWORD	; POList
EXTRN	?AirDefenseList@@3PAVFalconPrivateList@@A:DWORD	; AirDefenseList
EXTRN	?EmitterList@@3PAVFalconPrivateList@@A:DWORD	; EmitterList
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@399fcd90
CONST	SEGMENT
__real@399fcd90 DD 0399fcd90r			; 0.0003048
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_03HKJIJDAE@pak?$AA@
CONST	SEGMENT
??_C@_03HKJIJDAE@pak?$AA@ DB 'pak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?MakeCampMap@@YAPAEHPAEH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeCampMap@@YAPAEHPAEH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeCampMap@@YAPAEHPAEH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeCampMap@@YAPAEHPAEH@Z$2
__ehfuncinfo$?MakeCampMap@@YAPAEHPAEH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?MakeCampMap@@YAPAEHPAEH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
_ix$ = -8						; size = 4
_i$ = -4						; size = 4
_who$ = 8						; size = 1
_x$ = 12						; size = 2
_y$ = 16						; size = 2
?GetAproxThreat@@YAHEFF@Z PROC				; GetAproxThreat

; 316  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 317  : 	int		i,ix;
; 318  : 
; 319  : 	// Find our indexes
; 320  : 	i = (y/MAP_RATIO)*MRX + (x/MAP_RATIO);

	movsx	eax, WORD PTR _y$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, eax
	imul	ecx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	eax, WORD PTR _x$[ebp]
	cdq
	mov	esi, 6
	idiv	esi
	add	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx

; 321  : 	if (i < 0 || i > TheCampaign.RadarMapSize)

	js	SHORT $LN3@GetAproxTh
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+292
	jle	SHORT $LN4@GetAproxTh
$LN3@GetAproxTh:

; 322  : 		return 0;				// Off the map

	xor	eax, eax
	jmp	SHORT $LN5@GetAproxTh
$LN4@GetAproxTh:

; 323  : 	if (who == FalconLocalSession->GetTeam())

	movzx	esi, BYTE PTR _who$[ebp]
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN2@GetAproxTh

; 324  : 		ix = 4;

	mov	DWORD PTR _ix$[ebp], 4

; 325  : 	else

	jmp	SHORT $LN1@GetAproxTh
$LN2@GetAproxTh:

; 326  : 		ix = 0;

	mov	DWORD PTR _ix$[ebp], 0
$LN1@GetAproxTh:

; 327  : 	
; 328  : 	return (TheCampaign.SamMapData[i] >> ix) & 0x03;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	ecx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _ix$[ebp]
	sar	eax, cl
	and	eax, 3
$LN5@GetAproxTh:

; 329  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAproxThreat@@YAHEFF@Z ENDP				; GetAproxThreat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
_ix$ = -8						; size = 4
_i$ = -4						; size = 4
_who$ = 8						; size = 1
_x$ = 12						; size = 2
_y$ = 16						; size = 2
?GetAproxDetection@@YAHEFF@Z PROC			; GetAproxDetection

; 300  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 301  : 	int		i,ix;
; 302  : 
; 303  : 	// Find our indexes
; 304  : 	i = (y/MAP_RATIO)*MRX + (x/MAP_RATIO);

	movsx	eax, WORD PTR _y$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, eax
	imul	ecx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	eax, WORD PTR _x$[ebp]
	cdq
	mov	esi, 6
	idiv	esi
	add	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx

; 305  : 	if (i < 0 || i > TheCampaign.RadarMapSize)

	js	SHORT $LN3@GetAproxDe
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+292
	jle	SHORT $LN4@GetAproxDe
$LN3@GetAproxDe:

; 306  : 		return 0;				// Off the map

	xor	eax, eax
	jmp	SHORT $LN5@GetAproxDe
$LN4@GetAproxDe:

; 307  : 	if (who == FalconLocalSession->GetTeam())

	movzx	esi, BYTE PTR _who$[ebp]
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN2@GetAproxDe

; 308  : 		ix = 4;

	mov	DWORD PTR _ix$[ebp], 4

; 309  : 	else

	jmp	SHORT $LN1@GetAproxDe
$LN2@GetAproxDe:

; 310  : 		ix = 0;

	mov	DWORD PTR _ix$[ebp], 0
$LN1@GetAproxDe:

; 311  : 
; 312  : 	return (TheCampaign.RadarMapData[i] >> ix) & 0x03;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+304
	add	ecx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _ix$[ebp]
	sar	eax, cl
	and	eax, 3
$LN5@GetAproxDe:

; 313  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAproxDetection@@YAHEFF@Z ENDP			; GetAproxDetection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_team$ = 16						; size = 4
?FriendlyTerritory@@YAHFFH@Z PROC			; FriendlyTerritory

; 293  : 	{

	push	ebp
	mov	ebp, esp

; 294  : 	if (GetOwner(TheCampaign.CampMapData,x,y) == team)

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+296
	push	edx
	call	?GetOwner@@YAEPAEFF@Z			; GetOwner
	add	esp, 12					; 0000000cH
	movzx	eax, al
	cmp	eax, DWORD PTR _team$[ebp]
	jne	SHORT $LN1@FriendlyTe

; 295  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN2@FriendlyTe
$LN1@FriendlyTe:

; 296  : 	return 0;

	xor	eax, eax
$LN2@FriendlyTe:

; 297  : 	}

	pop	ebp
	ret	0
?FriendlyTerritory@@YAHFFH@Z ENDP			; FriendlyTerritory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
_fx$ = -132						; size = 4
_ly$ = -128						; size = 4
_oct$ = -124						; size = 4
_fy$ = -120						; size = 4
tv401 = -116						; size = 4
_lx$ = -112						; size = 4
tv177 = -108						; size = 4
tv185 = -104						; size = 4
_d$ = -100						; size = 4
tv167 = -96						; size = 4
tv195 = -92						; size = 4
_arcRatio$1 = -88					; size = 4
_hd$ = -84						; size = 4
_ld0$ = -80						; size = 4
_li$ = -76						; size = 4
_hi$ = -72						; size = 4
_bd$ = -68						; size = 4
_c$ = -64						; size = 4
_bdi$ = -60						; size = 4
_y$ = -56						; size = 2
_x$ = -52						; size = 2
_Y$ = -48						; size = 2
_X$ = -44						; size = 2
_i$ = -40						; size = 4
_ld$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_e$ = 8							; size = 4
_map_data$ = 12						; size = 4
_who$ = 16						; size = 4
?AddToDetectionMap@@YAHPAVCampBaseClass@@PAEH@Z PROC	; AddToDetectionMap

; 392  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 393  : 	GridIndex   x,y,X,Y;
; 394  : 	int			fx,lx,fy,ly,li,hi,i,c,oct,bdi;
; 395  : 	float		d,hd,bd,ld[NUM_RADAR_ARCS] /* 2001-03-13 S.G. */, ld0;
; 396  : 
; 397  : 	if (!e->GetNumberOfArcs())

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+432]
	call	eax
	test	eax, eax
	jne	SHORT $LN19@AddToDetec

; 398  : 		return 0;

	xor	eax, eax
	jmp	$LN20@AddToDetec
$LN19@AddToDetec:

; 399  : 
; 400  : 	bd = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bd$[ebp], xmm0

; 401  : 	e->GetLocation(&X,&Y);

	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 402  : 	X /= MAP_RATIO;

	movsx	eax, WORD PTR _X$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _X$[ebp], ax

; 403  : 	Y /= MAP_RATIO;

	movsx	eax, WORD PTR _Y$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _Y$[ebp], ax

; 404  : 
; 405  : // 2001-03-13 ADDED BY S.G. I NEED THE DETECTION RANGE FROM THE DATA FILE AS WELL, JUST LIKE THE THREAT MAP DOES
; 406  : 	ld0 = (float) e->GetDetectionRange(LowAir)/MAP_RATIO;

	push	4
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+416]
	call	edx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _ld0$[ebp], xmm0

; 407  : // END OF ADDED SECTION
; 408  : 
; 409  : 	for (i=0; i<NUM_RADAR_ARCS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@AddToDetec
$LN17@AddToDetec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@AddToDetec:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN16@AddToDetec

; 410  : 		{
; 411  : // 2001-03-09 MODIFIEDED BY S.G. e->GetArcRatio(i) CAN BE ZERO! IF THAT HAPPENS, The for (x=... LOOP BELOW IS SQUIPPED SO HIGH ALTITUDE IS NOT MAPPED!
; 412  : //		ld[i] = (float) (((ALT_TO_BUILD_RANGES_TO / e->GetArcRatio(i)) * FT_TO_KM)/MAP_RATIO);
; 413  : 		if (float arcRatio = e->GetArcRatio(i)) {

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+436]
	call	edx
	fstp	DWORD PTR _arcRatio$1[ebp]
	movss	xmm0, DWORD PTR _arcRatio$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@AddToDetec

; 414  : 			ld[i] = (float) (((ALT_TO_BUILD_RANGES_TO / arcRatio) * FT_TO_KM)/MAP_RATIO);

	cvtsi2ss xmm0, DWORD PTR ?ALT_TO_BUILD_RANGES_TO@@3HA ; ALT_TO_BUILD_RANGES_TO
	divss	xmm0, DWORD PTR _arcRatio$1[ebp]
	mulss	xmm0, DWORD PTR __real@399fcd90
	divss	xmm0, DWORD PTR __real@40c00000
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR _ld$[ebp+eax*4], xmm0

; 415  : 			if (ld0 < ld[i])

	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _ld$[ebp+ecx*4]
	comiss	xmm0, DWORD PTR _ld0$[ebp]
	jbe	SHORT $LN14@AddToDetec

; 416  : 				ld[i] = ld0;

	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _ld0$[ebp]
	movss	DWORD PTR _ld$[ebp+edx*4], xmm0
$LN14@AddToDetec:

; 417  : 		}
; 418  : 		else

	jmp	SHORT $LN13@AddToDetec
$LN15@AddToDetec:

; 419  : 			ld[i] = ld0;

	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _ld0$[ebp]
	movss	DWORD PTR _ld$[ebp+eax*4], xmm0
$LN13@AddToDetec:

; 420  : // END OF MODIFIED SECTION
; 421  : 		if (ld[i] > bd)

	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _ld$[ebp+ecx*4]
	comiss	xmm0, DWORD PTR _bd$[ebp]
	jbe	SHORT $LN12@AddToDetec

; 422  : 			bd = ld[i];

	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _ld$[ebp+edx*4]
	movss	DWORD PTR _bd$[ebp], xmm0
$LN12@AddToDetec:

; 423  : 		}

	jmp	$LN17@AddToDetec
$LN16@AddToDetec:

; 424  : 	hd = (float) e->GetDetectionRange(Air)/MAP_RATIO;

	push	5
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+416]
	call	eax
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _hd$[ebp], xmm0

; 425  : 	if (hd > bd)

	movss	xmm0, DWORD PTR _hd$[ebp]
	comiss	xmm0, DWORD PTR _bd$[ebp]
	jbe	SHORT $LN11@AddToDetec

; 426  : 		bd = hd;

	movss	xmm0, DWORD PTR _hd$[ebp]
	movss	DWORD PTR _bd$[ebp], xmm0
$LN11@AddToDetec:

; 427  : //	bd = MAX(FloatToInt32(hd),FloatToInt32(ld));
; 428  : 	bdi = FloatToInt32(bd);

	push	ecx
	movss	xmm0, DWORD PTR _bd$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _bdi$[ebp], eax

; 429  : 	fx = MAX(X - bdi - 1, 0);

	movsx	ecx, WORD PTR _X$[ebp]
	sub	ecx, DWORD PTR _bdi$[ebp]
	sub	ecx, 1
	test	ecx, ecx
	jle	SHORT $LN22@AddToDetec
	movsx	edx, WORD PTR _X$[ebp]
	sub	edx, DWORD PTR _bdi$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN23@AddToDetec
$LN22@AddToDetec:
	mov	DWORD PTR tv167[ebp], 0
$LN23@AddToDetec:
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR _fx$[ebp], eax

; 430  : 	lx = MIN(X + bdi + 1, MRX-1);

	movsx	ecx, WORD PTR _X$[ebp]
	mov	edx, DWORD PTR _bdi$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR ?MRX@@3HA		; MRX
	sub	ecx, 1
	cmp	eax, ecx
	jge	SHORT $LN24@AddToDetec
	movsx	edx, WORD PTR _X$[ebp]
	mov	eax, DWORD PTR _bdi$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	DWORD PTR tv177[ebp], ecx
	jmp	SHORT $LN25@AddToDetec
$LN24@AddToDetec:
	mov	edx, DWORD PTR ?MRX@@3HA		; MRX
	sub	edx, 1
	mov	DWORD PTR tv177[ebp], edx
$LN25@AddToDetec:
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR _lx$[ebp], eax

; 431  : 	fy = MAX(Y - bdi - 1, 0);

	movsx	ecx, WORD PTR _Y$[ebp]
	sub	ecx, DWORD PTR _bdi$[ebp]
	sub	ecx, 1
	test	ecx, ecx
	jle	SHORT $LN26@AddToDetec
	movsx	edx, WORD PTR _Y$[ebp]
	sub	edx, DWORD PTR _bdi$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv185[ebp], edx
	jmp	SHORT $LN27@AddToDetec
$LN26@AddToDetec:
	mov	DWORD PTR tv185[ebp], 0
$LN27@AddToDetec:
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR _fy$[ebp], eax

; 432  : 	ly = MIN(Y + bdi + 1, MRY-1);

	movsx	ecx, WORD PTR _Y$[ebp]
	mov	edx, DWORD PTR _bdi$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR ?MRY@@3HA		; MRY
	sub	ecx, 1
	cmp	eax, ecx
	jge	SHORT $LN28@AddToDetec
	movsx	edx, WORD PTR _Y$[ebp]
	mov	eax, DWORD PTR _bdi$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	DWORD PTR tv195[ebp], ecx
	jmp	SHORT $LN29@AddToDetec
$LN28@AddToDetec:
	mov	edx, DWORD PTR ?MRY@@3HA		; MRY
	sub	edx, 1
	mov	DWORD PTR tv195[ebp], edx
$LN29@AddToDetec:
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR _ly$[ebp], eax

; 433  : 	if (GetRoE(e->GetTeam(),who,ROE_AIR_ENGAGE) == ROE_ALLOWED)

	push	4
	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN10@AddToDetec

; 434  : 		{
; 435  : 		li = 4;

	mov	DWORD PTR _li$[ebp], 4

; 436  : 		hi = 6;

	mov	DWORD PTR _hi$[ebp], 6

; 437  : 		}
; 438  : 	else

	jmp	SHORT $LN9@AddToDetec
$LN10@AddToDetec:

; 439  : 		{
; 440  : 		li = 0;

	mov	DWORD PTR _li$[ebp], 0

; 441  : 		hi = 2;

	mov	DWORD PTR _hi$[ebp], 2
$LN9@AddToDetec:

; 442  : 		}
; 443  : 	for (x = fx; x <= lx; x++)

	mov	cx, WORD PTR _fx$[ebp]
	mov	WORD PTR _x$[ebp], cx
	jmp	SHORT $LN8@AddToDetec
$LN7@AddToDetec:
	mov	dx, WORD PTR _x$[ebp]
	add	dx, 1
	mov	WORD PTR _x$[ebp], dx
$LN8@AddToDetec:
	movsx	eax, WORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _lx$[ebp]
	jg	$LN6@AddToDetec

; 444  : 		{
; 445  : 		for (y = fy; y <= ly; y++)

	mov	cx, WORD PTR _fy$[ebp]
	mov	WORD PTR _y$[ebp], cx
	jmp	SHORT $LN5@AddToDetec
$LN4@AddToDetec:
	mov	dx, WORD PTR _y$[ebp]
	add	dx, 1
	mov	WORD PTR _y$[ebp], dx
$LN5@AddToDetec:
	movsx	eax, WORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _ly$[ebp]
	jg	$LN3@AddToDetec

; 446  : 			{
; 447  : 			i = y*MRX + x;

	movsx	ecx, WORD PTR _y$[ebp]
	imul	ecx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	edx, WORD PTR _x$[ebp]
	add	ecx, edx
	mov	DWORD PTR _i$[ebp], ecx

; 448  : 			d = Distance(x,y,X,Y) - 1.0F;

	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv401[ebp]
	movss	xmm0, DWORD PTR tv401[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _d$[ebp], xmm0

; 449  : 			c = (map_data[i] >> li) & 0x03;

	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _li$[ebp]
	sar	edx, cl
	and	edx, 3
	mov	DWORD PTR _c$[ebp], edx

; 450  : 			oct = OctantTo(X,Y,x,y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	movzx	edx, WORD PTR _Y$[ebp]
	push	edx
	movzx	eax, WORD PTR _X$[ebp]
	push	eax
	call	?OctantTo@@YAHFFFF@Z			; OctantTo
	add	esp, 16					; 00000010H
	mov	DWORD PTR _oct$[ebp], eax

; 451  : 			if (ld[oct] >= d && c < 3)

	mov	ecx, DWORD PTR _oct$[ebp]
	movss	xmm0, DWORD PTR _ld$[ebp+ecx*4]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jb	SHORT $LN2@AddToDetec
	cmp	DWORD PTR _c$[ebp], 3
	jge	SHORT $LN2@AddToDetec

; 452  : 				{
; 453  : 				map_data[i] ^= (c << li);

	mov	edx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _li$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _map_data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], cl

; 454  : 				map_data[i] |= ((c+1) << li);

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _li$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
$LN2@AddToDetec:

; 455  : 				}
; 456  : 			c = (map_data[i] >> hi) & 0x03;

	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _hi$[ebp]
	sar	edx, cl
	and	edx, 3
	mov	DWORD PTR _c$[ebp], edx

; 457  : 			if (hd >= d && c < 3)

	movss	xmm0, DWORD PTR _hd$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jb	SHORT $LN1@AddToDetec
	cmp	DWORD PTR _c$[ebp], 3
	jge	SHORT $LN1@AddToDetec

; 458  : 				{
; 459  : 				map_data[i] ^= (c << hi);

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl

; 460  : 				map_data[i] |= ((c+1) << hi);

	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, edx
	mov	edx, DWORD PTR _map_data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], cl
$LN1@AddToDetec:

; 461  : 				}
; 462  : 			}

	jmp	$LN4@AddToDetec
$LN3@AddToDetec:

; 463  : 		}

	jmp	$LN7@AddToDetec
$LN6@AddToDetec:

; 464  : 	return 1;

	mov	eax, 1
$LN20@AddToDetec:

; 465  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddToDetectionMap@@YAHPAVCampBaseClass@@PAEH@Z ENDP	; AddToDetectionMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
tv340 = -88						; size = 4
_ly$ = -84						; size = 4
_fy$ = -80						; size = 4
_lx$ = -76						; size = 4
_fx$ = -72						; size = 4
tv170 = -68						; size = 4
tv160 = -64						; size = 4
tv152 = -60						; size = 4
tv142 = -56						; size = 4
tv134 = -52						; size = 4
_hd$ = -48						; size = 4
_ld$ = -44						; size = 4
_hi$ = -40						; size = 4
_d$ = -36						; size = 4
_li$ = -32						; size = 4
_c$ = -28						; size = 4
_bd$ = -24						; size = 4
_i$ = -20						; size = 4
_x$ = -16						; size = 2
_y$ = -12						; size = 2
_X$ = -8						; size = 2
_Y$ = -4						; size = 2
_e$ = 8							; size = 4
_map_data$ = 12						; size = 4
_who$ = 16						; size = 4
?AddToThreatMap@@YAHPAVCampBaseClass@@PAEH@Z PROC	; AddToThreatMap

; 343  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi

; 344  : 	GridIndex   x,y,X,Y;
; 345  : 	int			fx,lx,fy,ly,bd,li,hi,i,c;
; 346  : 	float		d,ld,hd;
; 347  : 
; 348  : 	e->GetLocation(&X,&Y);

	lea	eax, DWORD PTR _Y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _X$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 349  : 	X /= MAP_RATIO;

	movsx	eax, WORD PTR _X$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _X$[ebp], ax

; 350  : 	Y /= MAP_RATIO;

	movsx	eax, WORD PTR _Y$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _Y$[ebp], ax

; 351  : 	ld = (float) e->GetWeaponRange(LowAir)/MAP_RATIO;

	push	0
	push	4
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+408]
	call	edx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _ld$[ebp], xmm0

; 352  : 	hd = (float) e->GetWeaponRange(Air)/MAP_RATIO;

	push	0
	push	5
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+408]
	call	eax
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _hd$[ebp], xmm0

; 353  : 	bd = MAX(FloatToInt32(hd),FloatToInt32(ld));

	push	ecx
	movss	xmm0, DWORD PTR _hd$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esi, eax
	push	ecx
	movss	xmm0, DWORD PTR _ld$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cmp	esi, eax
	jle	SHORT $LN13@AddToThrea
	push	ecx
	movss	xmm0, DWORD PTR _hd$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN14@AddToThrea
$LN13@AddToThrea:
	push	ecx
	movss	xmm0, DWORD PTR _ld$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
$LN14@AddToThrea:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _bd$[ebp], ecx

; 354  : 	fx = MAX(X - bd - 1, 0);

	movsx	edx, WORD PTR _X$[ebp]
	sub	edx, DWORD PTR _bd$[ebp]
	sub	edx, 1
	test	edx, edx
	jle	SHORT $LN15@AddToThrea
	movsx	eax, WORD PTR _X$[ebp]
	sub	eax, DWORD PTR _bd$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN16@AddToThrea
$LN15@AddToThrea:
	mov	DWORD PTR tv142[ebp], 0
$LN16@AddToThrea:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _fx$[ebp], ecx

; 355  : 	lx = MIN(X + bd + 1, MRX-1);

	movsx	edx, WORD PTR _X$[ebp]
	mov	eax, DWORD PTR _bd$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	edx, DWORD PTR ?MRX@@3HA		; MRX
	sub	edx, 1
	cmp	ecx, edx
	jge	SHORT $LN17@AddToThrea
	movsx	eax, WORD PTR _X$[ebp]
	mov	ecx, DWORD PTR _bd$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR tv152[ebp], edx
	jmp	SHORT $LN18@AddToThrea
$LN17@AddToThrea:
	mov	eax, DWORD PTR ?MRX@@3HA		; MRX
	sub	eax, 1
	mov	DWORD PTR tv152[ebp], eax
$LN18@AddToThrea:
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR _lx$[ebp], ecx

; 356  : 	fy = MAX(Y - bd - 1, 0);

	movsx	edx, WORD PTR _Y$[ebp]
	sub	edx, DWORD PTR _bd$[ebp]
	sub	edx, 1
	test	edx, edx
	jle	SHORT $LN19@AddToThrea
	movsx	eax, WORD PTR _Y$[ebp]
	sub	eax, DWORD PTR _bd$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN20@AddToThrea
$LN19@AddToThrea:
	mov	DWORD PTR tv160[ebp], 0
$LN20@AddToThrea:
	mov	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR _fy$[ebp], ecx

; 357  : 	ly = MIN(Y + bd + 1, MRY-1);

	movsx	edx, WORD PTR _Y$[ebp]
	mov	eax, DWORD PTR _bd$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	edx, DWORD PTR ?MRY@@3HA		; MRY
	sub	edx, 1
	cmp	ecx, edx
	jge	SHORT $LN21@AddToThrea
	movsx	eax, WORD PTR _Y$[ebp]
	mov	ecx, DWORD PTR _bd$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR tv170[ebp], edx
	jmp	SHORT $LN22@AddToThrea
$LN21@AddToThrea:
	mov	eax, DWORD PTR ?MRY@@3HA		; MRY
	sub	eax, 1
	mov	DWORD PTR tv170[ebp], eax
$LN22@AddToThrea:
	mov	ecx, DWORD PTR tv170[ebp]
	mov	DWORD PTR _ly$[ebp], ecx

; 358  : 	if (GetRoE(e->GetTeam(),who,ROE_AIR_ENGAGE) == ROE_ALLOWED)

	push	4
	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN10@AddToThrea

; 359  : 		{
; 360  : 		li = 4;

	mov	DWORD PTR _li$[ebp], 4

; 361  : 		hi = 6;

	mov	DWORD PTR _hi$[ebp], 6

; 362  : 		}
; 363  : 	else

	jmp	SHORT $LN9@AddToThrea
$LN10@AddToThrea:

; 364  : 		{
; 365  : 		li = 0;

	mov	DWORD PTR _li$[ebp], 0

; 366  : 		hi = 2;

	mov	DWORD PTR _hi$[ebp], 2
$LN9@AddToThrea:

; 367  : 		}
; 368  : 	for (x = fx; x <= lx; x++)

	mov	dx, WORD PTR _fx$[ebp]
	mov	WORD PTR _x$[ebp], dx
	jmp	SHORT $LN8@AddToThrea
$LN7@AddToThrea:
	mov	ax, WORD PTR _x$[ebp]
	add	ax, 1
	mov	WORD PTR _x$[ebp], ax
$LN8@AddToThrea:
	movsx	ecx, WORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR _lx$[ebp]
	jg	$LN6@AddToThrea

; 369  : 		{
; 370  : 		for (y = fy; y <= ly; y++)

	mov	dx, WORD PTR _fy$[ebp]
	mov	WORD PTR _y$[ebp], dx
	jmp	SHORT $LN5@AddToThrea
$LN4@AddToThrea:
	mov	ax, WORD PTR _y$[ebp]
	add	ax, 1
	mov	WORD PTR _y$[ebp], ax
$LN5@AddToThrea:
	movsx	ecx, WORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _ly$[ebp]
	jg	$LN3@AddToThrea

; 371  : 			{
; 372  : 			i = y*MRX + x;

	movsx	edx, WORD PTR _y$[ebp]
	imul	edx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	eax, WORD PTR _x$[ebp]
	add	edx, eax
	mov	DWORD PTR _i$[ebp], edx

; 373  : 			d = Distance(x,y,X,Y) - 1.0F;

	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv340[ebp]
	movss	xmm0, DWORD PTR tv340[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _d$[ebp], xmm0

; 374  : 			c = (map_data[i] >> li) & 0x03;

	mov	edx, DWORD PTR _map_data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _li$[ebp]
	sar	eax, cl
	and	eax, 3
	mov	DWORD PTR _c$[ebp], eax

; 375  : 			if (ld >= d && c < 3 && e->GetAproxHitChance(LowAir,FloatToInt32(d*MAP_RATIO)))

	movss	xmm0, DWORD PTR _ld$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jb	SHORT $LN2@AddToThrea
	cmp	DWORD PTR _c$[ebp], 3
	jge	SHORT $LN2@AddToThrea
	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@40c00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	4
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	test	eax, eax
	je	SHORT $LN2@AddToThrea

; 376  : 				{
; 377  : 				map_data[i] ^= (c << li);

	mov	edx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _li$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _map_data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], cl

; 378  : 				map_data[i] |= ((c+1) << li);

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _li$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
$LN2@AddToThrea:

; 379  : 				}
; 380  : 			c = (map_data[i] >> hi) & 0x03;

	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _hi$[ebp]
	sar	edx, cl
	and	edx, 3
	mov	DWORD PTR _c$[ebp], edx

; 381  : 			if (hd >= d && c < 3 && e->GetAproxHitChance(Air,FloatToInt32(d*MAP_RATIO)))

	movss	xmm0, DWORD PTR _hd$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jb	SHORT $LN1@AddToThrea
	cmp	DWORD PTR _c$[ebp], 3
	jge	SHORT $LN1@AddToThrea
	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@40c00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	5
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	test	eax, eax
	je	SHORT $LN1@AddToThrea

; 382  : 				{
; 383  : 				map_data[i] ^= (c << hi);

	mov	edx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _map_data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], cl

; 384  : 				map_data[i] |= ((c+1) << hi);

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
$LN1@AddToThrea:

; 385  : 				}
; 386  : 			}

	jmp	$LN4@AddToThrea
$LN3@AddToThrea:

; 387  : 		}

	jmp	$LN7@AddToThrea
$LN6@AddToThrea:

; 388  : 	return 1;

	mov	eax, 1

; 389  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?AddToThreatMap@@YAHPAVCampBaseClass@@PAEH@Z ENDP	; AddToThreatMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_map_data$ = 8						; size = 4
?FreeCampMap@@YAXPAE@Z PROC				; FreeCampMap

; 333  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 334  : 	if (map_data)

	cmp	DWORD PTR _map_data$[ebp], 0
	je	SHORT $LN2@FreeCampMa

; 335  : 		delete [] map_data;

	mov	eax, DWORD PTR _map_data$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@FreeCampMa:

; 336  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeCampMap@@YAXPAE@Z ENDP				; FreeCampMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
_hi$ = -8						; size = 4
_i$ = -4						; size = 4
_map_data$ = 8						; size = 4
_x$ = 12						; size = 2
_y$ = 16						; size = 2
?GetOwner@@YAEPAEFF@Z PROC				; GetOwner

; 280  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 281  : 	int		i,hi;
; 282  : 
; 283  : 	if (!map_data)

	cmp	DWORD PTR _map_data$[ebp], 0
	jne	SHORT $LN3@GetOwner

; 284  : 		return 0;

	xor	al, al
	jmp	SHORT $LN4@GetOwner
$LN3@GetOwner:

; 285  : 	i = (y/MAP_RATIO)*MRX + (x/MAP_RATIO);

	movsx	eax, WORD PTR _y$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, eax
	imul	ecx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	eax, WORD PTR _x$[ebp]
	cdq
	mov	esi, 6
	idiv	esi
	add	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx

; 286  : 	if (i < 0 || i > MAXOI)

	js	SHORT $LN1@GetOwner
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?MAXOI@@3HA		; MAXOI
	jle	SHORT $LN2@GetOwner
$LN1@GetOwner:

; 287  : 		return 0;

	xor	al, al
	jmp	SHORT $LN4@GetOwner
$LN2@GetOwner:

; 288  : 	hi = 4 * (i & 1);

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 1
	shl	eax, 2
	mov	DWORD PTR _hi$[ebp], eax

; 289  : 	return ((map_data[i/2] >> hi) & 0x0F);

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _map_data$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR _hi$[ebp]
	sar	eax, cl
	and	eax, 15					; 0000000fH
$LN4@GetOwner:

; 290  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@@YAEPAEFF@Z ENDP				; GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
_hi$ = -48						; size = 4
tv139 = -44						; size = 4
_i$ = -40						; size = 4
_o$ = -36						; size = 4
_rx$ = -32						; size = 2
_ry$ = -28						; size = 2
_y$ = -24						; size = 2
_x$ = -20						; size = 2
_ly$ = -16						; size = 2
_fy$ = -12						; size = 2
_lx$ = -8						; size = 2
_fx$ = -4						; size = 2
_type$ = 8						; size = 4
_map_data$ = 12						; size = 4
_cx$ = 16						; size = 2
_cy$ = 20						; size = 2
?UpdateCampMap@@YAPAEHPAEFF@Z PROC			; UpdateCampMap

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi

; 215  : 	GridIndex	x,y,rx,ry,fx,fy,lx,ly;
; 216  : 	int			i,hi;
; 217  : 	Objective	o;
; 218  : 
; 219  : 	if (!map_data)

	cmp	DWORD PTR _map_data$[ebp], 0
	jne	SHORT $LN20@UpdateCamp

; 220  : 		return NULL;

	xor	eax, eax
	jmp	$LN21@UpdateCamp
$LN20@UpdateCamp:

; 221  : 
; 222  : 	fx = cx - MAP_RADIUS;

	movsx	eax, WORD PTR _cx$[ebp]
	sub	eax, 20					; 00000014H
	mov	WORD PTR _fx$[ebp], ax

; 223  : 	lx = cx + MAP_RADIUS;

	movsx	ecx, WORD PTR _cx$[ebp]
	add	ecx, 20					; 00000014H
	mov	WORD PTR _lx$[ebp], cx

; 224  : 	fy = cy - MAP_RADIUS;

	movsx	edx, WORD PTR _cy$[ebp]
	sub	edx, 20					; 00000014H
	mov	WORD PTR _fy$[ebp], dx

; 225  : 	ly = cy + MAP_RADIUS;

	movsx	eax, WORD PTR _cy$[ebp]
	add	eax, 20					; 00000014H
	mov	WORD PTR _ly$[ebp], ax

; 226  : 	if (fx < 0)

	movsx	ecx, WORD PTR _fx$[ebp]
	test	ecx, ecx
	jge	SHORT $LN19@UpdateCamp

; 227  : 		fx = 0;

	xor	edx, edx
	mov	WORD PTR _fx$[ebp], dx
$LN19@UpdateCamp:

; 228  : 	if (fy < 0)

	movsx	eax, WORD PTR _fy$[ebp]
	test	eax, eax
	jge	SHORT $LN18@UpdateCamp

; 229  : 		fy = 0;

	xor	ecx, ecx
	mov	WORD PTR _fy$[ebp], cx
$LN18@UpdateCamp:

; 230  : 	if (lx > Map_Max_X - 1)

	movsx	edx, WORD PTR _lx$[ebp]
	movsx	eax, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	sub	eax, 1
	cmp	edx, eax
	jle	SHORT $LN17@UpdateCamp

; 231  : 		lx = Map_Max_X - 1;

	movsx	ecx, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	sub	ecx, 1
	mov	WORD PTR _lx$[ebp], cx
$LN17@UpdateCamp:

; 232  : 	if (ly > Map_Max_Y - 1)

	movsx	edx, WORD PTR _ly$[ebp]
	movsx	eax, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	sub	eax, 1
	cmp	edx, eax
	jle	SHORT $LN16@UpdateCamp

; 233  : 		ly = Map_Max_Y - 1;

	movsx	ecx, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	sub	ecx, 1
	mov	WORD PTR _ly$[ebp], cx
$LN16@UpdateCamp:

; 234  : 	fx /= MAP_RATIO;

	movsx	eax, WORD PTR _fx$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _fx$[ebp], ax

; 235  : 	fy /= MAP_RATIO;

	movsx	eax, WORD PTR _fy$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _fy$[ebp], ax

; 236  : 	lx /= MAP_RATIO;

	movsx	eax, WORD PTR _lx$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _lx$[ebp], ax

; 237  : 	ly /= MAP_RATIO;

	movsx	eax, WORD PTR _ly$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	WORD PTR _ly$[ebp], ax

; 238  : 
; 239  : 	switch (type)

	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv139[ebp], edx
	cmp	DWORD PTR tv139[ebp], 2
	jl	SHORT $LN12@UpdateCamp
	cmp	DWORD PTR tv139[ebp], 3
	jle	SHORT $LN13@UpdateCamp
	jmp	SHORT $LN12@UpdateCamp
$LN13@UpdateCamp:

; 240  : 		{
; 241  : 		case MAP_RADARCOVERAGE:
; 242  : 		case MAP_SAMCOVERAGE:
; 243  : 			break;

	jmp	$LN14@UpdateCamp
$LN12@UpdateCamp:

; 244  : 		case MAP_OWNERSHIP:
; 245  : 		default:
; 246  : 			for (x=fx; x<lx; x++){

	mov	ax, WORD PTR _fx$[ebp]
	mov	WORD PTR _x$[ebp], ax
	jmp	SHORT $LN11@UpdateCamp
$LN10@UpdateCamp:
	mov	cx, WORD PTR _x$[ebp]
	add	cx, 1
	mov	WORD PTR _x$[ebp], cx
$LN11@UpdateCamp:
	movsx	edx, WORD PTR _x$[ebp]
	movsx	eax, WORD PTR _lx$[ebp]
	cmp	edx, eax
	jge	$LN14@UpdateCamp

; 247  : 				for (y=fy; y<ly; y++){

	mov	cx, WORD PTR _fy$[ebp]
	mov	WORD PTR _y$[ebp], cx
	jmp	SHORT $LN8@UpdateCamp
$LN7@UpdateCamp:
	mov	dx, WORD PTR _y$[ebp]
	add	dx, 1
	mov	WORD PTR _y$[ebp], dx
$LN8@UpdateCamp:
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR _ly$[ebp]
	cmp	eax, ecx
	jge	$LN6@UpdateCamp

; 248  : 					i = y*MRX + x;

	movsx	edx, WORD PTR _y$[ebp]
	imul	edx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	eax, WORD PTR _x$[ebp]
	add	edx, eax
	mov	DWORD PTR _i$[ebp], edx

; 249  : 					hi = 4*(i%2);

	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN23@UpdateCamp
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN23@UpdateCamp:
	shl	ecx, 2
	mov	DWORD PTR _hi$[ebp], ecx

; 250  : 					rx = x*MAP_RATIO;

	movsx	edx, WORD PTR _x$[ebp]
	imul	edx, 6
	mov	WORD PTR _rx$[ebp], dx

; 251  : 					ry = y*MAP_RATIO;

	movsx	eax, WORD PTR _y$[ebp]
	imul	eax, 6
	mov	WORD PTR _ry$[ebp], ax

; 252  : 					if (
; 253  : 						GetCover(rx,ry) != Water || 
; 254  : 						GetCover(rx+MAP_RATIO-1,ry) != Water || 
; 255  : 						GetCover(rx,ry+MAP_RATIO-1) != Water
; 256  : 					){

	movzx	ecx, WORD PTR _ry$[ebp]
	push	ecx
	movzx	edx, WORD PTR _rx$[ebp]
	push	edx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@UpdateCamp
	movzx	eax, WORD PTR _ry$[ebp]
	push	eax
	movsx	ecx, WORD PTR _rx$[ebp]
	add	ecx, 5
	push	ecx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@UpdateCamp
	movsx	edx, WORD PTR _ry$[ebp]
	add	edx, 5
	push	edx
	movzx	eax, WORD PTR _rx$[ebp]
	push	eax
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	je	$LN5@UpdateCamp
$LN4@UpdateCamp:

; 257  : 						// KCK: Searh a small area first, then if I don't find something, search a larger area
; 258  : 						o = FindNearestObjective(rx, ry, NULL, 10);

	push	10					; 0000000aH
	push	0
	movzx	ecx, WORD PTR _ry$[ebp]
	push	ecx
	movzx	edx, WORD PTR _rx$[ebp]
	push	edx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax

; 259  : 						if (!o){

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@UpdateCamp

; 260  : 							o = FindNearestObjective(rx, ry, NULL, 80);

	push	80					; 00000050H
	push	0
	movzx	eax, WORD PTR _ry$[ebp]
	push	eax
	movzx	ecx, WORD PTR _rx$[ebp]
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax
$LN3@UpdateCamp:

; 261  : 						}
; 262  : 						if (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN2@UpdateCamp

; 263  : 							map_data[i/2] |= o->GetTeam() << hi;

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _map_data$[ebp]
	movzx	ecx, BYTE PTR [ecx+esi]
	or	ecx, eax
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _map_data$[ebp]
	mov	BYTE PTR [edx+eax], cl

; 264  : 						}
; 265  : 						else {

	jmp	SHORT $LN5@UpdateCamp
$LN2@UpdateCamp:

; 266  : 							map_data[i/2] |= 0xF << hi;

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	edx, cl
	mov	ecx, DWORD PTR _map_data$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax]
	or	ecx, edx
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _map_data$[ebp]
	mov	BYTE PTR [edx+eax], cl
$LN5@UpdateCamp:

; 267  : 						}
; 268  : 					}
; 269  : 				}

	jmp	$LN7@UpdateCamp
$LN6@UpdateCamp:

; 270  : 			}

	jmp	$LN10@UpdateCamp
$LN14@UpdateCamp:

; 271  : 			// KCK: Robin or Peter - this will cause deadlock - Entering a critical section from here is a no-no
; 272  : 			// Either post a message or set a dirty flag..
; 273  : 			// UI_UpdateOccupationMap();
; 274  : 			break;
; 275  : 		}
; 276  : 	return map_data;

	mov	eax, DWORD PTR _map_data$[ebp]
$LN21@UpdateCamp:

; 277  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateCampMap@@YAPAEHPAEFF@Z ENDP			; UpdateCampMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\campmap.cpp
_TEXT	SEGMENT
$T2 = -552						; size = 8
$T3 = -544						; size = 8
_got$4 = -536						; size = 4
_poit$5 = -532						; size = 12
_uit$6 = -520						; size = 12
_uit$7 = -508						; size = 12
$T8 = -496						; size = 4
$T9 = -492						; size = 4
_own$10 = -488						; size = 4
_last$11 = -484						; size = 4
_hi$ = -480						; size = 4
_done$12 = -476						; size = 4
_fp$13 = -472						; size = 4
_e$14 = -468						; size = 4
tv74 = -464						; size = 4
tv88 = -460						; size = 4
_e$15 = -456						; size = 4
_team$ = -452						; size = 4
_size$ = -448						; size = 4
_i$ = -444						; size = 4
_p$16 = -440						; size = 4
_o$ = -436						; size = 4
_ry$ = -432						; size = 2
_rx$ = -428						; size = 2
_x$ = -424						; size = 2
_y$ = -420						; size = 2
_pakTable$17 = -416					; size = 400
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_map_data$ = 12						; size = 4
_csize$ = 16						; size = 4
?MakeCampMap@@YAPAEHPAEH@Z PROC				; MakeCampMap

; 50   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakeCampMap@@YAPAEHPAEH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 540				; 0000021cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 51   : 	GridIndex	x,y,rx,ry;
; 52   : 	int			i,hi,size,team;
; 53   : 	Objective	o;
; 54   : 
; 55   : 	team = FalconLocalSession->GetTeam();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	mov	DWORD PTR _team$[ebp], eax

; 56   : 	if (team > NUM_TEAMS)

	cmp	DWORD PTR _team$[ebp], 8
	jle	SHORT $LN53@MakeCampMa

; 57   : 		team = 0;

	mov	DWORD PTR _team$[ebp], 0
$LN53@MakeCampMa:

; 58   : 
; 59   : 	switch (type){

	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR tv74[ebp]
	sub	edx, 2
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 3
	ja	SHORT $LN47@MakeCampMa
	mov	eax, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN61@MakeCampMa[eax*4]
$LN50@MakeCampMa:

; 60   : 		case MAP_SAMCOVERAGE:
; 61   : //			MRX = Map_Max_X/MAP_RATIO;
; 62   : //			MRY = Map_Max_Y/MAP_RATIO;
; 63   : 			size = sizeof(uchar)*MRX*MRY;

	mov	ecx, DWORD PTR ?MRX@@3HA		; MRX
	imul	ecx, DWORD PTR ?MRY@@3HA		; MRY
	mov	DWORD PTR _size$[ebp], ecx

; 64   : 			break;

	jmp	SHORT $LN51@MakeCampMa
$LN49@MakeCampMa:

; 65   : 		case MAP_RADARCOVERAGE:
; 66   : //			MRX = Map_Max_X/MAP_RATIO;
; 67   : //			MRY = Map_Max_Y/MAP_RATIO;
; 68   : 			size = sizeof(uchar)*MRX*MRY;

	mov	edx, DWORD PTR ?MRX@@3HA		; MRX
	imul	edx, DWORD PTR ?MRY@@3HA		; MRY
	mov	DWORD PTR _size$[ebp], edx

; 69   : 			break;

	jmp	SHORT $LN51@MakeCampMa
$LN48@MakeCampMa:

; 70   : 		case MAP_PAK:
; 71   : 		case MAP_PAK_BUILD:
; 72   : //			PMRX = Map_Max_X/PAK_MAP_RATIO;
; 73   : //			PMRY = Map_Max_Y/PAK_MAP_RATIO;
; 74   : 			size = sizeof(uchar)*PMRX*PMRY;

	mov	eax, DWORD PTR ?PMRX@@3HA		; PMRX
	imul	eax, DWORD PTR ?PMRY@@3HA		; PMRY
	mov	DWORD PTR _size$[ebp], eax

; 75   : 			break;

	jmp	SHORT $LN51@MakeCampMa
$LN47@MakeCampMa:

; 76   : 		case MAP_OWNERSHIP:
; 77   : 		default:
; 78   : //			MRX = Map_Max_X/MAP_RATIO;
; 79   : //			MRY = Map_Max_Y/MAP_RATIO;
; 80   : 			size = sizeof(uchar)*MRX*MRY/2;

	mov	ecx, DWORD PTR ?MRX@@3HA		; MRX
	imul	ecx, DWORD PTR ?MRY@@3HA		; MRY
	shr	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
$LN51@MakeCampMa:

; 81   : 			break;
; 82   : 	}
; 83   : 	if (size != csize || !map_data)

	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR _csize$[ebp]
	jne	SHORT $LN45@MakeCampMa
	cmp	DWORD PTR _map_data$[ebp], 0
	jne	SHORT $LN46@MakeCampMa
$LN45@MakeCampMa:

; 84   : 	{
; 85   : 		// better resize it
; 86   : 		CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 87   : 		if (map_data)

	cmp	DWORD PTR _map_data$[ebp], 0
	je	SHORT $LN44@MakeCampMa

; 88   : 			delete [] map_data;

	mov	eax, DWORD PTR _map_data$[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN44@MakeCampMa:

; 89   : 		map_data = new unsigned char[size];

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR _map_data$[ebp], eax

; 90   : 		CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection
$LN46@MakeCampMa:

; 91   : 	}
; 92   : 	memset(map_data,0,size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _map_data$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 93   : 
; 94   : 	switch (type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR tv88[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 3
	ja	$LN12@MakeCampMa
	mov	edx, DWORD PTR tv88[ebp]
	jmp	DWORD PTR $LN62@MakeCampMa[edx*4]
$LN41@MakeCampMa:

; 95   : 	{
; 96   : 		case MAP_RADARCOVERAGE:
; 97   : 		{
; 98   : 			VuListIterator	uit(EmitterList);

	mov	eax, DWORD PTR ?EmitterList@@3PAVFalconPrivateList@@A ; EmitterList
	push	eax
	lea	ecx, DWORD PTR _uit$7[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 99   : 			CampEntity		e;
; 100  : 			e = (CampEntity) uit.GetFirst();

	lea	ecx, DWORD PTR _uit$7[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$14[ebp], eax
$LN40@MakeCampMa:

; 101  : 			while (e){

	cmp	DWORD PTR _e$14[ebp], 0
	je	SHORT $LN39@MakeCampMa

; 102  : 				AddToDetectionMap (e, map_data, team);

	mov	ecx, DWORD PTR _team$[ebp]
	push	ecx
	mov	edx, DWORD PTR _map_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$14[ebp]
	push	eax
	call	?AddToDetectionMap@@YAHPAVCampBaseClass@@PAEH@Z ; AddToDetectionMap
	add	esp, 12					; 0000000cH

; 103  : 				e = (CampEntity) uit.GetNext();

	lea	ecx, DWORD PTR _uit$7[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$14[ebp], eax

; 104  : 			}

	jmp	SHORT $LN40@MakeCampMa
$LN39@MakeCampMa:

; 105  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$7[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 106  : 		break;

	jmp	$LN42@MakeCampMa
$LN38@MakeCampMa:

; 107  : 		case MAP_SAMCOVERAGE:
; 108  : 		{
; 109  : 			VuListIterator	uit(AirDefenseList);

	mov	ecx, DWORD PTR ?AirDefenseList@@3PAVFalconPrivateList@@A ; AirDefenseList
	push	ecx
	lea	ecx, DWORD PTR _uit$6[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 110  : 			Unit e;
; 111  : 			e = (Unit) uit.GetFirst();

	lea	ecx, DWORD PTR _uit$6[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$15[ebp], eax
$LN37@MakeCampMa:

; 112  : 			while (e){

	cmp	DWORD PTR _e$15[ebp], 0
	je	SHORT $LN36@MakeCampMa

; 113  : 				if (!e->Moving()){

	mov	ecx, DWORD PTR _e$15[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	jne	SHORT $LN35@MakeCampMa

; 114  : 					AddToThreatMap (e, map_data, team);

	mov	edx, DWORD PTR _team$[ebp]
	push	edx
	mov	eax, DWORD PTR _map_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$15[ebp]
	push	ecx
	call	?AddToThreatMap@@YAHPAVCampBaseClass@@PAEH@Z ; AddToThreatMap
	add	esp, 12					; 0000000cH
$LN35@MakeCampMa:

; 115  : 				}
; 116  : 				e = (Unit) uit.GetNext();

	lea	ecx, DWORD PTR _uit$6[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$15[ebp], eax

; 117  : 			}

	jmp	SHORT $LN37@MakeCampMa
$LN36@MakeCampMa:

; 118  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$6[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 119  : 		break;

	jmp	$LN42@MakeCampMa
$LN34@MakeCampMa:

; 120  : 		case MAP_PAK:
; 121  : 		{
; 122  : 			FILE		*fp = OpenCampFile(TheCampaign.TheaterName,"pak","rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	OFFSET ??_C@_03HKJIJDAE@pak?$AA@
	push	OFFSET ?TheCampaign@@3VCampaignClass@@A+102
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$13[ebp], eax

; 123  : 			int got = fread(map_data,1, size,fp);

	mov	edx, DWORD PTR _fp$13[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _map_data$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H
	mov	DWORD PTR _got$4[ebp], eax

; 124  : 			ShiAssert(got == size);
; 125  : 			fclose(fp);

	mov	edx, DWORD PTR _fp$13[ebp]
	push	edx
	call	_fclose
	add	esp, 4

; 126  : 		}
; 127  : 		break;

	jmp	$LN42@MakeCampMa
$LN33@MakeCampMa:

; 128  : 		case MAP_PAK_BUILD:
; 129  : 		{
; 130  : 			VU_ID			pakTable[50];

	push	OFFSET ??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	push	50					; 00000032H
	push	8
	lea	eax, DWORD PTR _pakTable$17[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 131  : 			int				p,done,own;
; 132  : 
; 133  : 			// Build our table
; 134  : 			for (p=0;p<50;p++)

	mov	DWORD PTR _p$16[ebp], 0
	jmp	SHORT $LN32@MakeCampMa
$LN31@MakeCampMa:
	mov	ecx, DWORD PTR _p$16[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$16[ebp], ecx
$LN32@MakeCampMa:
	cmp	DWORD PTR _p$16[ebp], 50		; 00000032H
	jge	SHORT $LN30@MakeCampMa

; 135  : 				pakTable[p] = FalconNullId;

	mov	edx, DWORD PTR _p$16[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _pakTable$17[ebp+edx*8], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _pakTable$17[ebp+edx*8+4], ecx
	jmp	SHORT $LN31@MakeCampMa
$LN30@MakeCampMa:

; 136  : 			p = 1;

	mov	DWORD PTR _p$16[ebp], 1

; 137  : 			{
; 138  : 				VuListIterator	poit(POList);

	mov	edx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	edx
	lea	ecx, DWORD PTR _poit$5[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 139  : 				o = (Objective) poit.GetFirst();

	lea	ecx, DWORD PTR _poit$5[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN29@MakeCampMa:

; 140  : 				while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN28@MakeCampMa

; 141  : 					pakTable[p] = o->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p$16[ebp]
	mov	DWORD PTR _pakTable$17[ebp+eax*8], ecx
	mov	DWORD PTR _pakTable$17[ebp+eax*8+4], edx

; 142  : 					p++;

	mov	ecx, DWORD PTR _p$16[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$16[ebp], ecx

; 143  : 					o = (Objective) poit.GetNext();

	lea	ecx, DWORD PTR _poit$5[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 144  : 				}

	jmp	SHORT $LN29@MakeCampMa
$LN28@MakeCampMa:

; 145  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _poit$5[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 146  : 				
; 147  : 			for (x=0; x<PMRX-1; x++){

	xor	edx, edx
	mov	WORD PTR _x$[ebp], dx
	jmp	SHORT $LN27@MakeCampMa
$LN26@MakeCampMa:
	mov	ax, WORD PTR _x$[ebp]
	add	ax, 1
	mov	WORD PTR _x$[ebp], ax
$LN27@MakeCampMa:
	movsx	ecx, WORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?PMRX@@3HA		; PMRX
	sub	edx, 1
	cmp	ecx, edx
	jge	$LN25@MakeCampMa

; 148  : 				for (y=0; y<PMRY-1; y++){

	xor	eax, eax
	mov	WORD PTR _y$[ebp], ax
	jmp	SHORT $LN24@MakeCampMa
$LN23@MakeCampMa:
	mov	cx, WORD PTR _y$[ebp]
	add	cx, 1
	mov	WORD PTR _y$[ebp], cx
$LN24@MakeCampMa:
	movsx	edx, WORD PTR _y$[ebp]
	mov	eax, DWORD PTR ?PMRY@@3HA		; PMRY
	sub	eax, 1
	cmp	edx, eax
	jge	$LN22@MakeCampMa

; 149  : 					i = ((PMRY-1) * PMRX) - y*PMRX + x;

	mov	ecx, DWORD PTR ?PMRY@@3HA		; PMRY
	sub	ecx, 1
	imul	ecx, DWORD PTR ?PMRX@@3HA		; PMRX
	movsx	edx, WORD PTR _y$[ebp]
	imul	edx, DWORD PTR ?PMRX@@3HA		; PMRX
	sub	ecx, edx
	movsx	eax, WORD PTR _x$[ebp]
	add	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx

; 150  : 					rx = x*PAK_MAP_RATIO;

	movsx	ecx, WORD PTR _x$[ebp]
	shl	ecx, 2
	mov	WORD PTR _rx$[ebp], cx

; 151  : 					ry = y*PAK_MAP_RATIO;

	movsx	edx, WORD PTR _y$[ebp]
	shl	edx, 2
	mov	WORD PTR _ry$[ebp], dx

; 152  : 					own = GetOwner(TheCampaign.CampMapData, rx, ry);

	movzx	eax, WORD PTR _ry$[ebp]
	push	eax
	movzx	ecx, WORD PTR _rx$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+296
	push	edx
	call	?GetOwner@@YAEPAEFF@Z			; GetOwner
	add	esp, 12					; 0000000cH
	movzx	eax, al
	mov	DWORD PTR _own$10[ebp], eax

; 153  : 					// Let the ownership map decide if we're over water or not
; 154  : 					//if (GetCover(rx,ry) != Water || GetCover(rx+PAK_MAP_RATIO-1,ry) != Water || 
; 155  : 					// GetCover(rx,ry+PAK_MAP_RATIO-1) != Water)
; 156  : 					if (own){

	cmp	DWORD PTR _own$10[ebp], 0
	je	$LN13@MakeCampMa

; 157  : 						float	last = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _last$11[ebp], xmm0

; 158  : 						o = FindNearestObjective(POList, rx, ry,&last);

	lea	ecx, DWORD PTR _last$11[ebp]
	push	ecx
	movzx	edx, WORD PTR _ry$[ebp]
	push	edx
	movzx	eax, WORD PTR _rx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax
$LN20@MakeCampMa:

; 159  : 						while (o && o->GetTeam() != own){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN19@MakeCampMa
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	eax, DWORD PTR _own$10[ebp]
	je	SHORT $LN19@MakeCampMa

; 160  : 							o = FindNearestObjective(POList, rx, ry, &last);

	lea	ecx, DWORD PTR _last$11[ebp]
	push	ecx
	movzx	edx, WORD PTR _ry$[ebp]
	push	edx
	movzx	eax, WORD PTR _rx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax

; 161  : 						}

	jmp	SHORT $LN20@MakeCampMa
$LN19@MakeCampMa:

; 162  : 						if (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN18@MakeCampMa

; 163  : 							for (p=1,done=0;p<50&&!done&&o;p++){

	mov	DWORD PTR _p$16[ebp], 1
	mov	DWORD PTR _done$12[ebp], 0
	jmp	SHORT $LN17@MakeCampMa
$LN16@MakeCampMa:
	mov	edx, DWORD PTR _p$16[ebp]
	add	edx, 1
	mov	DWORD PTR _p$16[ebp], edx
$LN17@MakeCampMa:
	cmp	DWORD PTR _p$16[ebp], 50		; 00000032H
	jge	SHORT $LN15@MakeCampMa
	cmp	DWORD PTR _done$12[ebp], 0
	jne	SHORT $LN15@MakeCampMa
	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN15@MakeCampMa

; 164  : 								if (o->Id() == pakTable[p]){

	mov	eax, DWORD PTR _p$16[ebp]
	lea	ecx, DWORD PTR _pakTable$17[ebp+eax*8]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@MakeCampMa

; 165  : 									map_data[i] = p;

	mov	ecx, DWORD PTR _map_data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR _p$16[ebp]
	mov	BYTE PTR [ecx], dl

; 166  : 									done = 1;

	mov	DWORD PTR _done$12[ebp], 1
$LN14@MakeCampMa:

; 167  : 								}
; 168  : 							}

	jmp	SHORT $LN16@MakeCampMa
$LN15@MakeCampMa:

; 169  : 							ShiAssert(done);
; 170  : 						}
; 171  : 						else

	jmp	SHORT $LN13@MakeCampMa
$LN18@MakeCampMa:

; 172  : 							map_data[i] = 255;

	mov	eax, DWORD PTR _map_data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH
$LN13@MakeCampMa:

; 173  : 					}
; 174  : 				}

	jmp	$LN23@MakeCampMa
$LN22@MakeCampMa:

; 175  : 			}

	jmp	$LN26@MakeCampMa
$LN25@MakeCampMa:

; 176  : 		}
; 177  : 		break;

	jmp	$LN42@MakeCampMa
$LN12@MakeCampMa:

; 178  : 		case MAP_OWNERSHIP:
; 179  : 		default:
; 180  : 			for (x=0; x<MRX; x++){

	xor	ecx, ecx
	mov	WORD PTR _x$[ebp], cx
	jmp	SHORT $LN11@MakeCampMa
$LN10@MakeCampMa:
	mov	dx, WORD PTR _x$[ebp]
	add	dx, 1
	mov	WORD PTR _x$[ebp], dx
$LN11@MakeCampMa:
	movsx	eax, WORD PTR _x$[ebp]
	cmp	eax, DWORD PTR ?MRX@@3HA		; MRX
	jge	$LN9@MakeCampMa

; 181  : 				for (y=0; y<MRY; y++){

	xor	ecx, ecx
	mov	WORD PTR _y$[ebp], cx
	jmp	SHORT $LN8@MakeCampMa
$LN7@MakeCampMa:
	mov	dx, WORD PTR _y$[ebp]
	add	dx, 1
	mov	WORD PTR _y$[ebp], dx
$LN8@MakeCampMa:
	movsx	eax, WORD PTR _y$[ebp]
	cmp	eax, DWORD PTR ?MRY@@3HA		; MRY
	jge	$LN6@MakeCampMa

; 182  : 					i = y*MRX + x;

	movsx	ecx, WORD PTR _y$[ebp]
	imul	ecx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	edx, WORD PTR _x$[ebp]
	add	ecx, edx
	mov	DWORD PTR _i$[ebp], ecx

; 183  : 					hi = 4*(i%2);

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN60@MakeCampMa
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN60@MakeCampMa:
	shl	eax, 2
	mov	DWORD PTR _hi$[ebp], eax

; 184  : 					rx = x*MAP_RATIO;

	movsx	ecx, WORD PTR _x$[ebp]
	imul	ecx, 6
	mov	WORD PTR _rx$[ebp], cx

; 185  : 					ry = y*MAP_RATIO;

	movsx	edx, WORD PTR _y$[ebp]
	imul	edx, 6
	mov	WORD PTR _ry$[ebp], dx

; 186  : 					if (
; 187  : 						GetCover(rx,ry) != Water || 
; 188  : 						GetCover(rx+MAP_RATIO-1,ry) != Water || 
; 189  : 						GetCover(rx,ry+MAP_RATIO-1) != Water
; 190  : 					){

	movzx	eax, WORD PTR _ry$[ebp]
	push	eax
	movzx	ecx, WORD PTR _rx$[ebp]
	push	ecx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@MakeCampMa
	movzx	edx, WORD PTR _ry$[ebp]
	push	edx
	movsx	eax, WORD PTR _rx$[ebp]
	add	eax, 5
	push	eax
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@MakeCampMa
	movsx	ecx, WORD PTR _ry$[ebp]
	add	ecx, 5
	push	ecx
	movzx	edx, WORD PTR _rx$[ebp]
	push	edx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	je	$LN1@MakeCampMa
$LN4@MakeCampMa:

; 191  : 						// KCK: Search a small area first, then if I don't find something, search a larger area
; 192  : 						o = FindNearestObjective(rx, ry, NULL, 10);

	push	10					; 0000000aH
	push	0
	movzx	eax, WORD PTR _ry$[ebp]
	push	eax
	movzx	ecx, WORD PTR _rx$[ebp]
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax

; 193  : 						if (!o){

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@MakeCampMa

; 194  : 							o = FindNearestObjective(rx, ry, NULL, 80);

	push	80					; 00000050H
	push	0
	movzx	edx, WORD PTR _ry$[ebp]
	push	edx
	movzx	eax, WORD PTR _rx$[ebp]
	push	eax
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax
$LN3@MakeCampMa:

; 195  : 						}
; 196  : 						
; 197  : 						if (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN2@MakeCampMa

; 198  : 							map_data[i/2] |= o->GetTeam() << hi;

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	edx, al
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _map_data$[ebp]
	movzx	ecx, BYTE PTR [eax+esi]
	or	ecx, edx
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _map_data$[ebp]
	mov	BYTE PTR [edx+eax], cl

; 199  : 						}
; 200  : 						else {

	jmp	SHORT $LN1@MakeCampMa
$LN2@MakeCampMa:

; 201  : 							map_data[i/2] |= 0xF << hi;

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	edx, cl
	mov	ecx, DWORD PTR _map_data$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax]
	or	ecx, edx
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _map_data$[ebp]
	mov	BYTE PTR [edx+eax], cl
$LN1@MakeCampMa:

; 202  : 						}
; 203  : 					}
; 204  : 				}

	jmp	$LN7@MakeCampMa
$LN6@MakeCampMa:

; 205  : 			}

	jmp	$LN10@MakeCampMa
$LN9@MakeCampMa:

; 206  : 			UI_UpdateOccupationMap();

	call	?UI_UpdateOccupationMap@@YAXXZ		; UI_UpdateOccupationMap
$LN42@MakeCampMa:

; 207  : 			break;
; 208  : 		}
; 209  : 	return map_data;

	mov	eax, DWORD PTR _map_data$[ebp]

; 210  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN61@MakeCampMa:
	DD	$LN50@MakeCampMa
	DD	$LN49@MakeCampMa
	DD	$LN48@MakeCampMa
	DD	$LN48@MakeCampMa
$LN62@MakeCampMa:
	DD	$LN38@MakeCampMa
	DD	$LN41@MakeCampMa
	DD	$LN34@MakeCampMa
	DD	$LN33@MakeCampMa
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MakeCampMap@@YAPAEHPAEH@Z$0:
	lea	ecx, DWORD PTR _uit$7[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?MakeCampMap@@YAPAEHPAEH@Z$1:
	lea	ecx, DWORD PTR _uit$6[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?MakeCampMap@@YAPAEHPAEH@Z$2:
	lea	ecx, DWORD PTR _poit$5[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?MakeCampMap@@YAPAEHPAEH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-548]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakeCampMap@@YAPAEHPAEH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakeCampMap@@YAPAEHPAEH@Z ENDP				; MakeCampMap
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Moving@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Moving@UnitClass@@QBEHXZ PROC				; UnitClass::Moving, COMDAT
; _this$ = ecx

; 316  : 	int Moving() const								{ return (int)unit_flags & U_MOVING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1024				; 00000400H
	mov	esp, ebp
	pop	ebp
	ret	0
?Moving@UnitClass@@QBEHXZ ENDP				; UnitClass::Moving
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampLeaveCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampLeaveCriticalSection@@YAXXZ PROC			; CampLeaveCriticalSection, COMDAT

; 51   : inline void CampLeaveCriticalSection(){ F4LeaveCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampLeaveCriticalSection@@YAXXZ ENDP			; CampLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampEnterCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampEnterCriticalSection@@YAXXZ PROC			; CampEnterCriticalSection, COMDAT

; 50   : inline void CampEnterCriticalSection(){ F4EnterCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampEnterCriticalSection@@YAXXZ ENDP			; CampEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
