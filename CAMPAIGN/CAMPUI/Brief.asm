; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPUI\Brief.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_BDefaultFont DD 011H
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
PUBLIC	__tcschr
PUBLIC	__tcscmp
PUBLIC	?_tcschr@@YAPADPADI@Z				; _tcschr
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?GetWPRouteAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPRouteAction
PUBLIC	?GetWPFlags@WayPointClass@@QAEKXZ		; WayPointClass::GetWPFlags
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetWPSpeed@WayPointClass@@QAEMXZ		; WayPointClass::GetWPSpeed
PUBLIC	?GetWPAltitude@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAltitude
PUBLIC	?GetWPArrivalTime@WayPointClass@@QAEKXZ		; WayPointClass::GetWPArrivalTime
PUBLIC	?GetWPLocation@WayPointClass@@QBEXPAF0@Z	; WayPointClass::GetWPLocation
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetClass@CampBaseClass@@QBEEXZ			; CampBaseClass::GetClass
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?CampEnterCriticalSection@@YAXXZ		; CampEnterCriticalSection
PUBLIC	?CampLeaveCriticalSection@@YAXXZ		; CampLeaveCriticalSection
PUBLIC	?Broken@UnitClass@@QBEHXZ			; UnitClass::Broken
PUBLIC	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
PUBLIC	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
PUBLIC	?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetOffensiveAirAction
PUBLIC	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ	; ObjectiveClass::GetObjectiveStatus
PUBLIC	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
PUBLIC	?BuildCampBrief@@YAXPAVC_Window@@@Z		; BuildCampBrief
PUBLIC	?BuildCampDebrief@@YAXPAVC_Window@@@Z		; BuildCampDebrief
PUBLIC	?BuildCampBrief@@YAXPAD@Z			; BuildCampBrief
PUBLIC	?BuildCampDebrief@@YAXPAD@Z			; BuildCampDebrief
PUBLIC	?GetBriefingData@@YAHHHPADH@Z			; GetBriefingData
PUBLIC	?AddStringToBuffer@@YAXPAD0@Z			; AddStringToBuffer
PUBLIC	?AddIndexedStringToBuffer@@YAXHPAD@Z		; AddIndexedStringToBuffer
PUBLIC	?AddNumberToBuffer@@YAXHPAD@Z			; AddNumberToBuffer
PUBLIC	?AddNumberToBuffer@@YAXMHPAD@Z			; AddNumberToBuffer
PUBLIC	?AddTimeToBuffer@@YAXKPADH@Z			; AddTimeToBuffer
PUBLIC	?AddLocationToBuffer@@YAXDFFPAD@Z		; AddLocationToBuffer
PUBLIC	?ConstructOrderedSentence@@YAXFPAD0ZZ		; ConstructOrderedSentence
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?SetClient@C_Base@@QAEXF@Z			; C_Base::SetClient
PUBLIC	?SetParent@C_Base@@QAEXPAVC_Window@@@Z		; C_Base::SetParent
PUBLIC	?SetNormColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetNormColor
PUBLIC	?SetSelColor@C_ListBox@@QAEXK@Z			; C_ListBox::SetSelColor
PUBLIC	?SetDisColor@C_ListBox@@QAEXK@Z			; C_ListBox::SetDisColor
PUBLIC	?SetBarColor@C_ListBox@@QAEXK@Z			; C_ListBox::SetBarColor
PUBLIC	?SetBgColor@C_ListBox@@QAEXK@Z			; C_ListBox::SetBgColor
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?BuildBriefString@@YAHPAVC_Window@@PAD@Z	; BuildBriefString
PUBLIC	?BuildDebriefString@@YAHPAVC_Window@@PAD@Z	; BuildDebriefString
PUBLIC	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
PUBLIC	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z	; AddHorizontalLineToBrief
PUBLIC	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z	; AddStringToBrief
PUBLIC	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z		; AddTabToBrief
PUBLIC	?AddTabToDebrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToDebrief
PUBLIC	?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z		; AddEOLToBrief
PUBLIC	?GetCurrentBriefXY@@YAXPAH0PADPAVC_Window@@1@Z	; GetCurrentBriefXY
PUBLIC	?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z ; AddRightJustifiedStringToBrief
PUBLIC	?AddFontTextToBrief@@YAXPADHPAVC_Window@@0@Z	; AddFontTextToBrief
PUBLIC	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z	; GetEntityName
PUBLIC	?GetEntityDestination@@YAXPAVCampBaseClass@@PAD@Z ; GetEntityDestination
PUBLIC	?ReadComments@@YAXPAU_iobuf@@@Z			; ReadComments
PUBLIC	?ReadToken@@YAPADPAU_iobuf@@QADH@Z		; ReadToken
PUBLIC	?ReadMemToken@@YAPADPAPADQADH@Z			; ReadMemToken
PUBLIC	?GetGender@@YAHPAVCampBaseClass@@H@Z		; GetGender
PUBLIC	?ConstructOrderedGenderedSentence@@YAXFPADPAVEventDataClass@@ZZ ; ConstructOrderedGenderedSentence
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_08KPOPBMGJ@Header?4b?$AA@			; `string'
PUBLIC	??_C@_09IOMGACNF@Situate?4b?$AA@		; `string'
PUBLIC	??_C@_08CALBNDK@divert?4b?$AA@			; `string'
PUBLIC	??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@		; `string'
PUBLIC	??_C@_0L@GAFPAEGE@PackHead?4b?$AA@		; `string'
PUBLIC	??_C@_09FDKFKIOG@Element?4b?$AA@		; `string'
PUBLIC	??_C@_09KPKCJAOF@Threats?4b?$AA@		; `string'
PUBLIC	??_C@_0L@EEOKCHAH@SteerPtH?4b?$AA@		; `string'
PUBLIC	??_C@_09FNCAMDID@SteerPt?4b?$AA@		; `string'
PUBLIC	??_C@_0L@MGLGPKDC@Loadouth?4b?$AA@		; `string'
PUBLIC	??_C@_09DBEEHBDF@Loadout?4b?$AA@		; `string'
PUBLIC	??_C@_09EEHEOFJM@Weather?4b?$AA@		; `string'
PUBLIC	??_C@_09EPKPDGMH@Support?4b?$AA@		; `string'
PUBLIC	??_C@_05NNMLNNPM@RoE?4b?$AA@			; `string'
PUBLIC	??_C@_0L@IMPHLOC@Emerganc?4b?$AA@		; `string'
PUBLIC	??_C@_05OGPGAODE@End?4b?$AA@			; `string'
PUBLIC	??_C@_09CINKEAKH@header?4db?$AA@		; `string'
PUBLIC	??_C@_0L@FOPFMLMO@pheader?4db?$AA@		; `string'
PUBLIC	??_C@_0L@JMOABIKF@element?4db?$AA@		; `string'
PUBLIC	??_C@_0L@CALOFOKN@FlEvent?4db?$AA@		; `string'
PUBLIC	??_C@_09ELGDCBBJ@flight?4db?$AA@		; `string'
PUBLIC	??_C@_0L@BDADIECF@FOrdnce?4db?$AA@		; `string'
PUBLIC	??_C@_0M@JBIFENN@FOrdWeap?4db?$AA@		; `string'
PUBLIC	??_C@_0L@NACCMEFJ@FOrdEvt?4db?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_08MHOPPMNB@pilot?4db?$AA@			; `string'
PUBLIC	??_C@_0M@DGFFLKPN@PElement?4db?$AA@		; `string'
PUBLIC	??_C@_0L@BCEJELHM@results?4db?$AA@		; `string'
PUBLIC	??_C@_0L@NHLKLBAI@related?4db?$AA@		; `string'
PUBLIC	??_C@_08IFIJADLA@task?4gbd?$AA@			; `string'
PUBLIC	??_C@_0M@NPHIDLME@mission?4gbd?$AA@		; `string'
PUBLIC	??_C@_04MPGECEBJ@Dist?$AA@			; `string'
PUBLIC	??_C@_03PHINJBAN@Alt?$AA@			; `string'
PUBLIC	??_C@_03FCGDEGFM@Spd?$AA@			; `string'
PUBLIC	??_C@_03OFHJMOKN@Hdg?$AA@			; `string'
PUBLIC	??_C@_04OKOFBOPB@Time?$AA@			; `string'
PUBLIC	??_C@_03JHMDMDFK@Wpt?$AA@			; `string'
PUBLIC	??_C@_0BO@DDPJPIDF@?$CF3s?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF4s?5?$CF4s?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BO@PBDJADDD@?$CF3d?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF5s?5?$CF4s?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_04LHEKBCCP@?$DMtd?$DO?$AA@		; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f?$AA@			; `string'
PUBLIC	??_C@_04GEFJINEE@?$CF?42f?$AA@			; `string'
PUBLIC	??_C@_03IPLKIPCO@?$CDDD?$AA@			; `string'
PUBLIC	??_C@_05NCAJEJLJ@?$DMunk?$DO?$AA@		; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_03LFFEHOPP@?$CDIF?$AA@			; `string'
PUBLIC	??_C@_05GNCADCNB@?$CDELSE?$AA@			; `string'
PUBLIC	??_C@_06OJIOOPNB@?$CDENDIF?$AA@			; `string'
PUBLIC	??_C@_0CK@EGAAPGFI@?$DMBrief?5reading?5Error?5?9?5unmatched@ ; `string'
PUBLIC	??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@		; `string'
PUBLIC	??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@ ; `string'
PUBLIC	??_C@_0BA@HEBDCAAB@?$CDIF_HAVE_TARGET?$AA@	; `string'
PUBLIC	??_C@_0BI@PHKLIJPH@?$CDIF_HAVE_PACKAGE_TARGET?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KKGPNOPM@?$CDIF_HAVE_TARGET_BUILDING?$AA@ ; `string'
PUBLIC	??_C@_0BF@MGMEMEHP@?$CDIF_HAVE_PATROL_TIME?$AA@	; `string'
PUBLIC	??_C@_0BH@JPBGPHCM@?$CDIF_PACKAGE_MISSION_EQ?$AA@ ; `string'
PUBLIC	??_C@_0P@GMDIIIKA@?$CDIF_MISSION_EQ?$AA@	; `string'
PUBLIC	??_C@_0BD@PJEKJAJL@?$CDIF_OLD_MISSION_EQ?$AA@	; `string'
PUBLIC	??_C@_0P@EKIPLFBG@?$CDIF_TARGET_OBJ?$AA@	; `string'
PUBLIC	??_C@_0BA@EIIJCMHG@?$CDIF_TARGET_UNIT?$AA@	; `string'
PUBLIC	??_C@_0BG@LFFPHFBL@?$CDIF_FLIGHT_CONTEXT_EQ?$AA@ ; `string'
PUBLIC	??_C@_0P@JHDJKIKK@?$CDIF_CONTEXT_EQ?$AA@	; `string'
PUBLIC	??_C@_0BD@NGKNAHIA@?$CDIF_PRIMARY_FLIGHT?$AA@	; `string'
PUBLIC	??_C@_0BC@BICNCHDF@?$CDIF_PLAYER_FLIGHT?$AA@	; `string'
PUBLIC	??_C@_0BB@FMCCFLJB@?$CDIF_PLAYER_PLANE?$AA@	; `string'
PUBLIC	??_C@_0BB@DMLOGKM@?$CDIF_SOLO_PACKAGE?$AA@	; `string'
PUBLIC	??_C@_0BH@CFGHOHFO@?$CDIF_ENEMY_AIR_RESPONSE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@GEJCFLGA@?$CDIF_ENEMY_CA_ACTIVITY_GT?$AA@ ; `string'
PUBLIC	??_C@_0BB@IGNPKMMF@?$CDIF_HAVE_THREATS?$AA@	; `string'
PUBLIC	??_C@_0BE@CCGIDIBK@?$CDIF_ALTERNATE_STRIP?$AA@	; `string'
PUBLIC	??_C@_0P@IIBJFFLN@?$CDIF_HAVE_PILOT?$AA@	; `string'
PUBLIC	??_C@_0BA@IJFOIFPD@?$CDIF_HAVE_WEAPON?$AA@	; `string'
PUBLIC	??_C@_0BB@ECBMLOJO@?$CDIF_FIRST_WEAPON?$AA@	; `string'
PUBLIC	??_C@_0BC@PNEBFBKP@?$CDIF_WEAPONS_FIRED?$AA@	; `string'
PUBLIC	??_C@_0BE@NCBOGAAH@?$CDIF_FIRST_PILOT_SET?$AA@	; `string'
PUBLIC	??_C@_0BB@LEFKKKEP@?$CDIF_WEAPON_FIRED?$AA@	; `string'
PUBLIC	??_C@_0BF@ILDEBBON@?$CDIF_WEAPON_MISSED_EQ?$AA@	; `string'
PUBLIC	??_C@_0BC@KEGODJIP@?$CDIF_WEAPON_HIT_EQ?$AA@	; `string'
PUBLIC	??_C@_0BG@BLDENJFD@?$CDIF_THREAT_IS_MISSILE?$AA@ ; `string'
PUBLIC	??_C@_0BK@IALOGJJJ@?$CDIF_TARGET_VEH_IS_MISSILE?$AA@ ; `string'
PUBLIC	??_C@_09HOJEAAHG@?$CDIF_AWACS?$AA@		; `string'
PUBLIC	??_C@_09JMILBEPH@?$CDIF_JSTAR?$AA@		; `string'
PUBLIC	??_C@_0L@IOLDENMM@?$CDIF_TANKER?$AA@		; `string'
PUBLIC	??_C@_07MEDEGODM@?$CDIF_ECM?$AA@		; `string'
PUBLIC	??_C@_0BH@KFLLPBHK@?$CDIF_PACKAGE_SUCCESS_EQ?$AA@ ; `string'
PUBLIC	??_C@_0BH@CJDAIELH@?$CDIF_NOT_SUPPORT_HEADER?$AA@ ; `string'
PUBLIC	??_C@_0BB@DELDEFBL@?$CDIF_PLAYER_PILOT?$AA@	; `string'
PUBLIC	??_C@_0BD@FDANNMCJ@?$CDIF_RELATED_EVENTS?$AA@	; `string'
PUBLIC	??_C@_0N@GLNDBAKF@?$CDIF_DIVERTED?$AA@		; `string'
PUBLIC	??_C@_0BG@IMPLIODD@?$CDIF_OFFENSIVE_PLANNED?$AA@ ; `string'
PUBLIC	??_C@_0BG@CCLGKGNJ@?$CDIF_DEFENSIVE_PLANNED?$AA@ ; `string'
PUBLIC	??_C@_0BC@OBPCDIPD@?$CDIF_CLEAR_WEATHER?$AA@	; `string'
PUBLIC	??_C@_0BI@NEHCGBKJ@?$CDIF_TACTICAL_ENGAGEMENT?$AA@ ; `string'
PUBLIC	??_C@_04DEHMDPMN@?$CDEOL?$AA@			; `string'
PUBLIC	??_C@_03HBHCBENH@?$DMp?$DO?$AA@			; `string'
PUBLIC	??_C@_06PCLFABJD@?$CDSPACE?$AA@			; `string'
PUBLIC	??_C@_06ODLOODK@?$CGnbsp?$DL?$AA@		; `string'
PUBLIC	??_C@_06LFHPLCJ@?$CDCOLON?$AA@			; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_04EIMEAPLD@?$CDTAB?$AA@			; `string'
PUBLIC	??_C@_06ONCAKGHE@?$CDCOLOR?$AA@			; `string'
PUBLIC	??_C@_05HPBCPENM@?$CDFONT?$AA@			; `string'
PUBLIC	??_C@_08PDBNACPI@?$CDENDFONT?$AA@		; `string'
PUBLIC	??_C@_04PIPAPGIN@?$CDINC?$AA@			; `string'
PUBLIC	??_C@_05GDIDNJLL@PILOT?$AA@			; `string'
PUBLIC	??_C@_06GANGLKEK@WEAPON?$AA@			; `string'
PUBLIC	??_C@_04DFNBDBBL@DATA?$AA@			; `string'
PUBLIC	??_C@_0L@HBLJNPMB@FLIGHT_NUM?$AA@		; `string'
PUBLIC	??_C@_0M@LOGHDAHB@FLIGHT_NAME?$AA@		; `string'
PUBLIC	??_C@_0L@EHHCCPNN@PLANE_NAME?$AA@		; `string'
PUBLIC	??_C@_0N@EONIOOBP@MISSION_NAME?$AA@		; `string'
PUBLIC	??_C@_0BB@KLMDELEG@OLD_MISSION_NAME?$AA@	; `string'
PUBLIC	??_C@_0BE@JLKIMEFN@MISSION_DESCRIPTION?$AA@	; `string'
PUBLIC	??_C@_0BI@JCKFPPPN@OLD_MISSION_DESCRIPTION?$AA@	; `string'
PUBLIC	??_C@_0BM@JMBJCAAD@PACKAGE_MISSION_DESCRIPTION?$AA@ ; `string'
PUBLIC	??_C@_0BE@GIIEOPEC@PACKAGE_TARGET_NAME?$AA@	; `string'
PUBLIC	??_C@_0BA@BPIADFBG@OLD_TARGET_NAME?$AA@		; `string'
PUBLIC	??_C@_0M@NBJLGBNL@TARGET_NAME?$AA@		; `string'
PUBLIC	??_C@_0BE@HAAKOLEJ@TARGET_VEHICLE_NAME?$AA@	; `string'
PUBLIC	??_C@_0N@KPBELBIC@TARGET_OWNER?$AA@		; `string'
PUBLIC	??_C@_0BI@MMPDJKCG@PACKAGE_TARGET_BUILDING?$AA@	; `string'
PUBLIC	??_C@_0BA@JIPHAHDE@TARGET_BUILDING?$AA@		; `string'
PUBLIC	??_C@_0BF@CNELNPAK@REQUESTING_UNIT_NAME?$AA@	; `string'
PUBLIC	??_C@_0BF@KNPIPNJG@REQUESTING_UNIT_DEST?$AA@	; `string'
PUBLIC	??_C@_0BI@FJDKIODL@REQUESTING_UNIT_VEHICLE?$AA@	; `string'
PUBLIC	??_C@_0BB@FCHFNNAM@INTERCEPTOR_NAME?$AA@	; `string'
PUBLIC	??_C@_0L@GIEPPCOM@AWACS_NAME?$AA@		; `string'
PUBLIC	??_C@_0L@EAIANOCF@JSTAR_NAME?$AA@		; `string'
PUBLIC	??_C@_0M@GJONMGJD@TANKER_NAME?$AA@		; `string'
PUBLIC	??_C@_08MDMCLKCP@ECM_NAME?$AA@			; `string'
PUBLIC	??_C@_0M@EPDBPGIE@CONTEXT_STR?$AA@		; `string'
PUBLIC	??_C@_0L@OFHHCAD@RESULT_STR?$AA@		; `string'
PUBLIC	??_C@_0L@OGBKPMOJ@TE_SUCCESS?$AA@		; `string'
PUBLIC	??_C@_0N@EPPNAEFI@NUM_AIRCRAFT?$AA@		; `string'
PUBLIC	??_C@_0O@HMJMPBIP@AIRCRAFT_TYPE?$AA@		; `string'
PUBLIC	??_C@_0P@HAOODHME@TIME_ON_TARGET?$AA@		; `string'
PUBLIC	??_C@_0BG@IGCLGGLJ@TIME_ON_STATION_LABEL?$AA@	; `string'
PUBLIC	??_C@_0BG@HNKMNDFO@ACTUAL_TIME_ON_TARGET?$AA@	; `string'
PUBLIC	??_C@_0M@BDMBEEHA@PATROL_TIME?$AA@		; `string'
PUBLIC	??_C@_0BF@DNJJMPHP@ALTERNATE_STRIP_NAME?$AA@	; `string'
PUBLIC	??_C@_0BB@OMGDKJHI@GENERAL_LOCATION?$AA@	; `string'
PUBLIC	??_C@_0BC@DMENCOPB@SPECIFIC_LOCATION?$AA@	; `string'
PUBLIC	??_C@_0BB@OHEAIOPL@NEAREST_LOCATION?$AA@	; `string'
PUBLIC	??_C@_0N@KHJIANEJ@THE_LOCATION?$AA@		; `string'
PUBLIC	??_C@_06JNJLBPLI@TARGET?$AA@			; `string'
PUBLIC	??_C@_05MAOIJGBI@AWACS?$AA@			; `string'
PUBLIC	??_C@_05CCPHICJJ@JSTAR?$AA@			; `string'
PUBLIC	??_C@_06CEAHHNAF@TANKER?$AA@			; `string'
PUBLIC	??_C@_03EFHKIKDN@ECM?$AA@			; `string'
PUBLIC	??_C@_0M@HJCHKFEP@ALT_AIRBASE?$AA@		; `string'
PUBLIC	??_C@_06BHJECOCH@THREAT?$AA@			; `string'
PUBLIC	??_C@_0BA@CBDBMLNG@PACKAGE_SUCCESS?$AA@		; `string'
PUBLIC	??_C@_0P@MLGAPOFH@FLIGHT_SUCCESS?$AA@		; `string'
PUBLIC	??_C@_0N@NKGNADJL@PILOT_RATING?$AA@		; `string'
PUBLIC	??_C@_0L@FNBHJECK@PILOT_NAME?$AA@		; `string'
PUBLIC	??_C@_0N@BLKPJHHD@PILOT_STATUS?$AA@		; `string'
PUBLIC	??_C@_08OJBNPKBJ@AA_KILLS?$AA@			; `string'
PUBLIC	??_C@_08CPHCPDJO@AG_KILLS?$AA@			; `string'
PUBLIC	??_C@_0M@DKBNCJOI@AI_AA_KILLS?$AA@		; `string'
PUBLIC	??_C@_0M@PMHCCAGP@AI_AG_KILLS?$AA@		; `string'
PUBLIC	??_C@_0BA@FCCCFIKL@FRIENDLY_LOSSES?$AA@		; `string'
PUBLIC	??_C@_0BF@OEDNAPDC@LONG_MISSION_SUCCESS?$AA@	; `string'
PUBLIC	??_C@_0N@BMOBJAGI@PLANE_STATUS?$AA@		; `string'
PUBLIC	??_C@_0N@GPGBNCDH@SHOW_THREATS?$AA@		; `string'
PUBLIC	??_C@_08LBGOJGJE@threat?4b?$AA@			; `string'
PUBLIC	??_C@_0BE@KOEEKKNE@THREAT_VEHICLE_NAME?$AA@	; `string'
PUBLIC	??_C@_0M@MKJEOGME@WEAPON_LOAD?$AA@		; `string'
PUBLIC	??_C@_0M@EAIKAKLC@WEAPON_NAME?$AA@		; `string'
PUBLIC	??_C@_0N@GFGDFMMO@WEAPON_FIRED?$AA@		; `string'
PUBLIC	??_C@_0L@ODMPMGIJ@WEAPON_HIT?$AA@		; `string'
PUBLIC	??_C@_0O@KDHLBJNE@WEAPON_MISSED?$AA@		; `string'
PUBLIC	??_C@_0BB@GHONPEOJ@WEAPON_HIT_RATIO?$AA@	; `string'
PUBLIC	??_C@_0L@JDMDCMBE@SHOW_EVENT?$AA@		; `string'
PUBLIC	??_C@_0M@JJCIBNAA@SHOW_RESULT?$AA@		; `string'
PUBLIC	??_C@_0N@DBCANENI@WIND_HEADING?$AA@		; `string'
PUBLIC	??_C@_0L@DFMPPPLF@WIND_SPEED?$AA@		; `string'
PUBLIC	??_C@_0M@MHBLBKPD@TEMPERATURE?$AA@		; `string'
PUBLIC	??_C@_0L@JEABLADM@CLOUD_TYPE?$AA@		; `string'
PUBLIC	??_C@_06BIBOHBLI@Sunny?5?$AA@			; `string'
PUBLIC	??_C@_05LHLBMJMF@Fair?5?$AA@			; `string'
PUBLIC	??_C@_05PIGFMJPO@Poor?5?$AA@			; `string'
PUBLIC	??_C@_0L@DFEKLGMK@Inclement?5?$AA@		; `string'
PUBLIC	??_C@_0O@EGKEPNOD@CLOUD_TYPETXT?$AA@		; `string'
PUBLIC	??_C@_0L@DMNMBFBN@Situation?3?$AA@		; `string'
PUBLIC	??_C@_0O@CONFGFEI@CLOUD_BASETXT?$AA@		; `string'
PUBLIC	??_C@_0M@GMCADLIP@Cloud?5Base?3?$AA@		; `string'
PUBLIC	??_C@_0L@OMEKBDDH@CLOUD_BASE?$AA@		; `string'
PUBLIC	??_C@_09NEIJCFEG@CON_LAYER?$AA@			; `string'
PUBLIC	??_C@_0N@MPKJONPA@WAYPOINT_NUM?$AA@		; `string'
PUBLIC	??_C@_0BA@EMAJDOKP@WAYPOINT_ACTION?$AA@		; `string'
PUBLIC	??_C@_0O@ODIHLF@WAYPOINT_TIME?$AA@		; `string'
PUBLIC	??_C@_0BC@JKELBHA@WAYPOINT_DISTANCE?$AA@	; `string'
PUBLIC	??_C@_0BB@LGCEINB@WAYPOINT_HEADING?$AA@		; `string'
PUBLIC	??_C@_0P@JKFPMDCB@WAYPOINT_SPEED?$AA@		; `string'
PUBLIC	??_C@_0N@BPDNMMEB@WAYPOINT_ALT?$AA@		; `string'
PUBLIC	??_C@_0P@COAGPCLP@WAYPOINT_CLIMB?$AA@		; `string'
PUBLIC	??_C@_0O@GKDHIGHD@WAYPOINT_DESC?$AA@		; `string'
PUBLIC	??_C@_0BA@CDILAEIO@ENEMY_SQUADRONS?$AA@		; `string'
PUBLIC	??_C@_07CFIKMPDI@Squad?4b?$AA@			; `string'
PUBLIC	??_C@_09KAILABEB@NoSquad?4b?$AA@		; `string'
PUBLIC	??_C@_0M@MBMEMPCO@ENTITY_NAME?$AA@		; `string'
PUBLIC	??_C@_0BE@OLKAIAIB@ENTITY_ELEMENT_NAME?$AA@	; `string'
PUBLIC	??_C@_0BD@BEPFECOL@ENTITY_OPERATIONAL?$AA@	; `string'
PUBLIC	??_C@_0O@CKAKCIEF@BEST_FEATURES?$AA@		; `string'
PUBLIC	??_C@_09CMFODKLL@Feature?4b?$AA@		; `string'
PUBLIC	??_C@_0BC@GMAGFIAP@POTENTIAL_TARGETS?$AA@	; `string'
PUBLIC	??_C@_0L@MABPEDIO@Objectiv?4b?$AA@		; `string'
PUBLIC	??_C@_0O@NGEDJDPM@RELATED_EVENT?$AA@		; `string'
PUBLIC	??_C@_0BH@GGCDMBFC@SHOW_PLANNED_OFFENSIVE?$AA@	; `string'
PUBLIC	??_C@_0BH@KHEOAGGA@SHOW_PLANNED_DEFENSIVE?$AA@	; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@392c987a
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f000000
PUBLIC	__real@3f0a35e2
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f693e32
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40200000
PUBLIC	__real@40a00000
PUBLIC	__real@42652ee1
PUBLIC	__real@43340000
PUBLIC	__real@43b40000
PUBLIC	__real@447a0000
PUBLIC	__real@454cffae
PUBLIC	__real@461c3c00
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_feof:PROC
EXTRN	_fgetc:PROC
EXTRN	_fgets:PROC
EXTRN	_ungetc:PROC
EXTRN	_sprintf:PROC
EXTRN	_atoi:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strchr:PROC
EXTRN	_strncmp:PROC
EXTRN	_strncpy:PROC
EXTRN	_strstr:PROC
EXTRN	_tolower:PROC
EXTRN	__mbschr:PROC
EXTRN	__mbscmp:PROC
EXTRN	__ismbclower:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z:PROC	; OpenCampFile
EXTRN	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z:PROC ; GetVehicleClassData
EXTRN	?GetBestVehicleWeapon@@YAHHPAEW4MoveType@@HPAH@Z:PROC ; GetBestVehicleWeapon
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ:PROC ; FalconGameEntity::GetGameType
EXTRN	?CloseCampFile@@YAXPAU_iobuf@@@Z:PROC		; CloseCampFile
EXTRN	??0EventDataClass@@QAE@XZ:PROC			; EventDataClass::EventDataClass
EXTRN	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ:PROC ; UnitClass::GetUnitClassData
EXTRN	?GetUnitDestination@UnitClass@@QAEXPAF0@Z:PROC	; UnitClass::GetUnitDestination
EXTRN	?GetVehicleID@UnitClass@@QAEFH@Z:PROC		; UnitClass::GetVehicleID
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?GetFullstrengthVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetFullstrengthVehicles
EXTRN	?GetTTRelations@@YAHEE@Z:PROC			; GetTTRelations
EXTRN	?GetTimeString@@YAPADKQADH@Z:PROC		; GetTimeString
EXTRN	?ReadIndexedString@@YAXHPADH@Z:PROC		; ReadIndexedString
EXTRN	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z:PROC ; FindObjective
EXTRN	?GetFeatureID@ObjectiveClass@@QAEHH@Z:PROC	; ObjectiveClass::GetFeatureID
EXTRN	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetFirstObjective
EXTRN	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetNextObjective
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?AngleTo@@YAMFFFF@Z:PROC			; AngleTo
EXTRN	?DirectionTo@@YAEFFFF@Z:PROC			; DirectionTo
EXTRN	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z:PROC	; FindUnit
EXTRN	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z:PROC ; FindEntity
EXTRN	?GetCallsign@@YAXHHPAD@Z:PROC			; GetCallsign
EXTRN	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z:PROC ; GetFeatureClassData
EXTRN	?FindPilotDataFromAC@MissionEvaluationClass@@QAEPAVPilotDataClass@@PAVFlightDataClass@@H@Z:PROC ; MissionEvaluationClass::FindPilotDataFromAC
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetHeight@C_Font@@QAEHJ@Z:PROC			; C_Font::GetHeight
EXTRN	?StrWidth@C_Font@@QAEHJPAD@Z:PROC		; C_Font::StrWidth
EXTRN	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z:PROC ; UI_Enter
EXTRN	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z:PROC	; UI_Leave
EXTRN	?SetUserNumber@C_Base@@QAEXJJ@Z:PROC		; C_Base::SetUserNumber
EXTRN	??0C_ListBox@@QAE@XZ:PROC			; C_ListBox::C_ListBox
EXTRN	?Setup@C_ListBox@@QAEXJFPAVC_Handler@@@Z:PROC	; C_ListBox::Setup
EXTRN	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z:PROC	; C_ListBox::AddItem
EXTRN	?SetDropDown@C_ListBox@@QAEXJ@Z:PROC		; C_ListBox::SetDropDown
EXTRN	?AddScrollBar@C_ListBox@@QAEXJJJJJJ@Z:PROC	; C_ListBox::AddScrollBar
EXTRN	??0C_Box@@QAE@XZ:PROC				; C_Box::C_Box
EXTRN	?Setup@C_Box@@QAEXJF@Z:PROC			; C_Box::Setup
EXTRN	?SetColor@C_Box@@QAEXK@Z:PROC			; C_Box::SetColor
EXTRN	?ScanClientAreas@C_Window@@QAEXXZ:PROC		; C_Window::ScanClientAreas
EXTRN	?AddControl@C_Window@@QAEXPAVC_Base@@@Z:PROC	; C_Window::AddControl
EXTRN	?RefreshWindow@C_Window@@QAEXXZ:PROC		; C_Window::RefreshWindow
EXTRN	?DeleteGroupList@@YAXJ@Z:PROC			; DeleteGroupList
EXTRN	?GetCloudCover@WeatherClass@@QAEHFF@Z:PROC	; WeatherClass::GetCloudCover
EXTRN	?AddWordWrapTextToWindow@@YAHPAVC_Window@@PAF1FFKPADJ@Z:PROC ; AddWordWrapTextToWindow
EXTRN	?AddHorizontalLineToWindow@@YAXPAVC_Window@@PAF1FFKJ@Z:PROC ; AddHorizontalLineToWindow
EXTRN	?get_air_speed@@YAMMH@Z:PROC			; get_air_speed
EXTRN	?determine_tactical_rating@@YAHXZ:PROC		; determine_tactical_rating
EXTRN	?ConvertTeamToStringIndex@@YAHHHHH@Z:PROC	; ConvertTeamToStringIndex
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?campCritical@@3PAUF4CSECTIONHANDLE@@A:DWORD	; campCritical
EXTRN	?DefaultDamageMods@@3PAEA:BYTE			; DefaultDamageMods
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?WPActStr@@3PAY0BE@DA:BYTE			; WPActStr
EXTRN	?AllAirList@@3PAVVuLinkedList@@A:DWORD		; AllAirList
EXTRN	?AllObjList@@3PAVVuLinkedList@@A:DWORD		; AllObjList
EXTRN	?POList@@3PAVFalconPrivateOrderedList@@A:DWORD	; POList
EXTRN	?SOList@@3PAVFalconPrivateList@@A:DWORD		; SOList
EXTRN	?gFontList@@3PAVC_Font@@A:DWORD			; gFontList
EXTRN	?gMainHandler@@3PAVC_Handler@@A:DWORD		; gMainHandler
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?gLangIDNum@@3HA:DWORD				; gLangIDNum
EXTRN	?g_bBriefHTML@@3_NA:BYTE			; g_bBriefHTML
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_CBX	DW	01H DUP (?)
	ALIGN	4

_CBY	DW	01H DUP (?)
	ALIGN	4

_CLineStart DD	01H DUP (?)
_CBColor DD	01H DUP (?)
_CWayPoint DD	01H DUP (?)
_LWayPoint DD	01H DUP (?)
_CEntity DD	01H DUP (?)
_ESquad	DD	01H DUP (?)
_CTextPtr DD	01H DUP (?)
_CCurrentLine DD 01H DUP (?)
_CPilotData DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@461c3c00
CONST	SEGMENT
__real@461c3c00 DD 0461c3c00r			; 9999
CONST	ENDS
;	COMDAT __real@454cffae
CONST	SEGMENT
__real@454cffae DD 0454cffaer			; 3279.98
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f693e32
CONST	SEGMENT
__real@3f693e32 DD 03f693e32r			; 0.911105
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f0a35e2
CONST	SEGMENT
__real@3f0a35e2 DD 03f0a35e2r			; 0.539885
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM?$AA@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM?$AA@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KHEOAGGA@SHOW_PLANNED_DEFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BH@KHEOAGGA@SHOW_PLANNED_DEFENSIVE?$AA@ DB 'SHOW_PLANNED_DEFENSIVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GGCDMBFC@SHOW_PLANNED_OFFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BH@GGCDMBFC@SHOW_PLANNED_OFFENSIVE?$AA@ DB 'SHOW_PLANNED_OFFENSIVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NGEDJDPM@RELATED_EVENT?$AA@
CONST	SEGMENT
??_C@_0O@NGEDJDPM@RELATED_EVENT?$AA@ DB 'RELATED_EVENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MABPEDIO@Objectiv?4b?$AA@
CONST	SEGMENT
??_C@_0L@MABPEDIO@Objectiv?4b?$AA@ DB 'Objectiv.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMAGFIAP@POTENTIAL_TARGETS?$AA@
CONST	SEGMENT
??_C@_0BC@GMAGFIAP@POTENTIAL_TARGETS?$AA@ DB 'POTENTIAL_TARGETS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CMFODKLL@Feature?4b?$AA@
CONST	SEGMENT
??_C@_09CMFODKLL@Feature?4b?$AA@ DB 'Feature.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKAKCIEF@BEST_FEATURES?$AA@
CONST	SEGMENT
??_C@_0O@CKAKCIEF@BEST_FEATURES?$AA@ DB 'BEST_FEATURES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BEPFECOL@ENTITY_OPERATIONAL?$AA@
CONST	SEGMENT
??_C@_0BD@BEPFECOL@ENTITY_OPERATIONAL?$AA@ DB 'ENTITY_OPERATIONAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OLKAIAIB@ENTITY_ELEMENT_NAME?$AA@
CONST	SEGMENT
??_C@_0BE@OLKAIAIB@ENTITY_ELEMENT_NAME?$AA@ DB 'ENTITY_ELEMENT_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MBMEMPCO@ENTITY_NAME?$AA@
CONST	SEGMENT
??_C@_0M@MBMEMPCO@ENTITY_NAME?$AA@ DB 'ENTITY_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KAILABEB@NoSquad?4b?$AA@
CONST	SEGMENT
??_C@_09KAILABEB@NoSquad?4b?$AA@ DB 'NoSquad.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFIKMPDI@Squad?4b?$AA@
CONST	SEGMENT
??_C@_07CFIKMPDI@Squad?4b?$AA@ DB 'Squad.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CDILAEIO@ENEMY_SQUADRONS?$AA@
CONST	SEGMENT
??_C@_0BA@CDILAEIO@ENEMY_SQUADRONS?$AA@ DB 'ENEMY_SQUADRONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GKDHIGHD@WAYPOINT_DESC?$AA@
CONST	SEGMENT
??_C@_0O@GKDHIGHD@WAYPOINT_DESC?$AA@ DB 'WAYPOINT_DESC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COAGPCLP@WAYPOINT_CLIMB?$AA@
CONST	SEGMENT
??_C@_0P@COAGPCLP@WAYPOINT_CLIMB?$AA@ DB 'WAYPOINT_CLIMB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BPDNMMEB@WAYPOINT_ALT?$AA@
CONST	SEGMENT
??_C@_0N@BPDNMMEB@WAYPOINT_ALT?$AA@ DB 'WAYPOINT_ALT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JKFPMDCB@WAYPOINT_SPEED?$AA@
CONST	SEGMENT
??_C@_0P@JKFPMDCB@WAYPOINT_SPEED?$AA@ DB 'WAYPOINT_SPEED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LGCEINB@WAYPOINT_HEADING?$AA@
CONST	SEGMENT
??_C@_0BB@LGCEINB@WAYPOINT_HEADING?$AA@ DB 'WAYPOINT_HEADING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKELBHA@WAYPOINT_DISTANCE?$AA@
CONST	SEGMENT
??_C@_0BC@JKELBHA@WAYPOINT_DISTANCE?$AA@ DB 'WAYPOINT_DISTANCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ODIHLF@WAYPOINT_TIME?$AA@
CONST	SEGMENT
??_C@_0O@ODIHLF@WAYPOINT_TIME?$AA@ DB 'WAYPOINT_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EMAJDOKP@WAYPOINT_ACTION?$AA@
CONST	SEGMENT
??_C@_0BA@EMAJDOKP@WAYPOINT_ACTION?$AA@ DB 'WAYPOINT_ACTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MPKJONPA@WAYPOINT_NUM?$AA@
CONST	SEGMENT
??_C@_0N@MPKJONPA@WAYPOINT_NUM?$AA@ DB 'WAYPOINT_NUM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NEIJCFEG@CON_LAYER?$AA@
CONST	SEGMENT
??_C@_09NEIJCFEG@CON_LAYER?$AA@ DB 'CON_LAYER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OMEKBDDH@CLOUD_BASE?$AA@
CONST	SEGMENT
??_C@_0L@OMEKBDDH@CLOUD_BASE?$AA@ DB 'CLOUD_BASE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMCADLIP@Cloud?5Base?3?$AA@
CONST	SEGMENT
??_C@_0M@GMCADLIP@Cloud?5Base?3?$AA@ DB 'Cloud Base:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CONFGFEI@CLOUD_BASETXT?$AA@
CONST	SEGMENT
??_C@_0O@CONFGFEI@CLOUD_BASETXT?$AA@ DB 'CLOUD_BASETXT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DMNMBFBN@Situation?3?$AA@
CONST	SEGMENT
??_C@_0L@DMNMBFBN@Situation?3?$AA@ DB 'Situation:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EGKEPNOD@CLOUD_TYPETXT?$AA@
CONST	SEGMENT
??_C@_0O@EGKEPNOD@CLOUD_TYPETXT?$AA@ DB 'CLOUD_TYPETXT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DFEKLGMK@Inclement?5?$AA@
CONST	SEGMENT
??_C@_0L@DFEKLGMK@Inclement?5?$AA@ DB 'Inclement ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PIGFMJPO@Poor?5?$AA@
CONST	SEGMENT
??_C@_05PIGFMJPO@Poor?5?$AA@ DB 'Poor ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHLBMJMF@Fair?5?$AA@
CONST	SEGMENT
??_C@_05LHLBMJMF@Fair?5?$AA@ DB 'Fair ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIBOHBLI@Sunny?5?$AA@
CONST	SEGMENT
??_C@_06BIBOHBLI@Sunny?5?$AA@ DB 'Sunny ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEABLADM@CLOUD_TYPE?$AA@
CONST	SEGMENT
??_C@_0L@JEABLADM@CLOUD_TYPE?$AA@ DB 'CLOUD_TYPE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MHBLBKPD@TEMPERATURE?$AA@
CONST	SEGMENT
??_C@_0M@MHBLBKPD@TEMPERATURE?$AA@ DB 'TEMPERATURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DFMPPPLF@WIND_SPEED?$AA@
CONST	SEGMENT
??_C@_0L@DFMPPPLF@WIND_SPEED?$AA@ DB 'WIND_SPEED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBCANENI@WIND_HEADING?$AA@
CONST	SEGMENT
??_C@_0N@DBCANENI@WIND_HEADING?$AA@ DB 'WIND_HEADING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJCIBNAA@SHOW_RESULT?$AA@
CONST	SEGMENT
??_C@_0M@JJCIBNAA@SHOW_RESULT?$AA@ DB 'SHOW_RESULT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDMDCMBE@SHOW_EVENT?$AA@
CONST	SEGMENT
??_C@_0L@JDMDCMBE@SHOW_EVENT?$AA@ DB 'SHOW_EVENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GHONPEOJ@WEAPON_HIT_RATIO?$AA@
CONST	SEGMENT
??_C@_0BB@GHONPEOJ@WEAPON_HIT_RATIO?$AA@ DB 'WEAPON_HIT_RATIO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KDHLBJNE@WEAPON_MISSED?$AA@
CONST	SEGMENT
??_C@_0O@KDHLBJNE@WEAPON_MISSED?$AA@ DB 'WEAPON_MISSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ODMPMGIJ@WEAPON_HIT?$AA@
CONST	SEGMENT
??_C@_0L@ODMPMGIJ@WEAPON_HIT?$AA@ DB 'WEAPON_HIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GFGDFMMO@WEAPON_FIRED?$AA@
CONST	SEGMENT
??_C@_0N@GFGDFMMO@WEAPON_FIRED?$AA@ DB 'WEAPON_FIRED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EAIKAKLC@WEAPON_NAME?$AA@
CONST	SEGMENT
??_C@_0M@EAIKAKLC@WEAPON_NAME?$AA@ DB 'WEAPON_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MKJEOGME@WEAPON_LOAD?$AA@
CONST	SEGMENT
??_C@_0M@MKJEOGME@WEAPON_LOAD?$AA@ DB 'WEAPON_LOAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KOEEKKNE@THREAT_VEHICLE_NAME?$AA@
CONST	SEGMENT
??_C@_0BE@KOEEKKNE@THREAT_VEHICLE_NAME?$AA@ DB 'THREAT_VEHICLE_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LBGOJGJE@threat?4b?$AA@
CONST	SEGMENT
??_C@_08LBGOJGJE@threat?4b?$AA@ DB 'threat.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GPGBNCDH@SHOW_THREATS?$AA@
CONST	SEGMENT
??_C@_0N@GPGBNCDH@SHOW_THREATS?$AA@ DB 'SHOW_THREATS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BMOBJAGI@PLANE_STATUS?$AA@
CONST	SEGMENT
??_C@_0N@BMOBJAGI@PLANE_STATUS?$AA@ DB 'PLANE_STATUS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEDNAPDC@LONG_MISSION_SUCCESS?$AA@
CONST	SEGMENT
??_C@_0BF@OEDNAPDC@LONG_MISSION_SUCCESS?$AA@ DB 'LONG_MISSION_SUCCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FCCCFIKL@FRIENDLY_LOSSES?$AA@
CONST	SEGMENT
??_C@_0BA@FCCCFIKL@FRIENDLY_LOSSES?$AA@ DB 'FRIENDLY_LOSSES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PMHCCAGP@AI_AG_KILLS?$AA@
CONST	SEGMENT
??_C@_0M@PMHCCAGP@AI_AG_KILLS?$AA@ DB 'AI_AG_KILLS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DKBNCJOI@AI_AA_KILLS?$AA@
CONST	SEGMENT
??_C@_0M@DKBNCJOI@AI_AA_KILLS?$AA@ DB 'AI_AA_KILLS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPHCPDJO@AG_KILLS?$AA@
CONST	SEGMENT
??_C@_08CPHCPDJO@AG_KILLS?$AA@ DB 'AG_KILLS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OJBNPKBJ@AA_KILLS?$AA@
CONST	SEGMENT
??_C@_08OJBNPKBJ@AA_KILLS?$AA@ DB 'AA_KILLS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BLKPJHHD@PILOT_STATUS?$AA@
CONST	SEGMENT
??_C@_0N@BLKPJHHD@PILOT_STATUS?$AA@ DB 'PILOT_STATUS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNBHJECK@PILOT_NAME?$AA@
CONST	SEGMENT
??_C@_0L@FNBHJECK@PILOT_NAME?$AA@ DB 'PILOT_NAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NKGNADJL@PILOT_RATING?$AA@
CONST	SEGMENT
??_C@_0N@NKGNADJL@PILOT_RATING?$AA@ DB 'PILOT_RATING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLGAPOFH@FLIGHT_SUCCESS?$AA@
CONST	SEGMENT
??_C@_0P@MLGAPOFH@FLIGHT_SUCCESS?$AA@ DB 'FLIGHT_SUCCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CBDBMLNG@PACKAGE_SUCCESS?$AA@
CONST	SEGMENT
??_C@_0BA@CBDBMLNG@PACKAGE_SUCCESS?$AA@ DB 'PACKAGE_SUCCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHJECOCH@THREAT?$AA@
CONST	SEGMENT
??_C@_06BHJECOCH@THREAT?$AA@ DB 'THREAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HJCHKFEP@ALT_AIRBASE?$AA@
CONST	SEGMENT
??_C@_0M@HJCHKFEP@ALT_AIRBASE?$AA@ DB 'ALT_AIRBASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03EFHKIKDN@ECM?$AA@
CONST	SEGMENT
??_C@_03EFHKIKDN@ECM?$AA@ DB 'ECM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEAHHNAF@TANKER?$AA@
CONST	SEGMENT
??_C@_06CEAHHNAF@TANKER?$AA@ DB 'TANKER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCPHICJJ@JSTAR?$AA@
CONST	SEGMENT
??_C@_05CCPHICJJ@JSTAR?$AA@ DB 'JSTAR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAOIJGBI@AWACS?$AA@
CONST	SEGMENT
??_C@_05MAOIJGBI@AWACS?$AA@ DB 'AWACS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNJLBPLI@TARGET?$AA@
CONST	SEGMENT
??_C@_06JNJLBPLI@TARGET?$AA@ DB 'TARGET', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KHJIANEJ@THE_LOCATION?$AA@
CONST	SEGMENT
??_C@_0N@KHJIANEJ@THE_LOCATION?$AA@ DB 'THE_LOCATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OHEAIOPL@NEAREST_LOCATION?$AA@
CONST	SEGMENT
??_C@_0BB@OHEAIOPL@NEAREST_LOCATION?$AA@ DB 'NEAREST_LOCATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DMENCOPB@SPECIFIC_LOCATION?$AA@
CONST	SEGMENT
??_C@_0BC@DMENCOPB@SPECIFIC_LOCATION?$AA@ DB 'SPECIFIC_LOCATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMGDKJHI@GENERAL_LOCATION?$AA@
CONST	SEGMENT
??_C@_0BB@OMGDKJHI@GENERAL_LOCATION?$AA@ DB 'GENERAL_LOCATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DNJJMPHP@ALTERNATE_STRIP_NAME?$AA@
CONST	SEGMENT
??_C@_0BF@DNJJMPHP@ALTERNATE_STRIP_NAME?$AA@ DB 'ALTERNATE_STRIP_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDMBEEHA@PATROL_TIME?$AA@
CONST	SEGMENT
??_C@_0M@BDMBEEHA@PATROL_TIME?$AA@ DB 'PATROL_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HNKMNDFO@ACTUAL_TIME_ON_TARGET?$AA@
CONST	SEGMENT
??_C@_0BG@HNKMNDFO@ACTUAL_TIME_ON_TARGET?$AA@ DB 'ACTUAL_TIME_ON_TARGET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IGCLGGLJ@TIME_ON_STATION_LABEL?$AA@
CONST	SEGMENT
??_C@_0BG@IGCLGGLJ@TIME_ON_STATION_LABEL?$AA@ DB 'TIME_ON_STATION_LABEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HAOODHME@TIME_ON_TARGET?$AA@
CONST	SEGMENT
??_C@_0P@HAOODHME@TIME_ON_TARGET?$AA@ DB 'TIME_ON_TARGET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HMJMPBIP@AIRCRAFT_TYPE?$AA@
CONST	SEGMENT
??_C@_0O@HMJMPBIP@AIRCRAFT_TYPE?$AA@ DB 'AIRCRAFT_TYPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EPPNAEFI@NUM_AIRCRAFT?$AA@
CONST	SEGMENT
??_C@_0N@EPPNAEFI@NUM_AIRCRAFT?$AA@ DB 'NUM_AIRCRAFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OGBKPMOJ@TE_SUCCESS?$AA@
CONST	SEGMENT
??_C@_0L@OGBKPMOJ@TE_SUCCESS?$AA@ DB 'TE_SUCCESS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OFHHCAD@RESULT_STR?$AA@
CONST	SEGMENT
??_C@_0L@OFHHCAD@RESULT_STR?$AA@ DB 'RESULT_STR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPDBPGIE@CONTEXT_STR?$AA@
CONST	SEGMENT
??_C@_0M@EPDBPGIE@CONTEXT_STR?$AA@ DB 'CONTEXT_STR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MDMCLKCP@ECM_NAME?$AA@
CONST	SEGMENT
??_C@_08MDMCLKCP@ECM_NAME?$AA@ DB 'ECM_NAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GJONMGJD@TANKER_NAME?$AA@
CONST	SEGMENT
??_C@_0M@GJONMGJD@TANKER_NAME?$AA@ DB 'TANKER_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EAIANOCF@JSTAR_NAME?$AA@
CONST	SEGMENT
??_C@_0L@EAIANOCF@JSTAR_NAME?$AA@ DB 'JSTAR_NAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GIEPPCOM@AWACS_NAME?$AA@
CONST	SEGMENT
??_C@_0L@GIEPPCOM@AWACS_NAME?$AA@ DB 'AWACS_NAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCHFNNAM@INTERCEPTOR_NAME?$AA@
CONST	SEGMENT
??_C@_0BB@FCHFNNAM@INTERCEPTOR_NAME?$AA@ DB 'INTERCEPTOR_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJDKIODL@REQUESTING_UNIT_VEHICLE?$AA@
CONST	SEGMENT
??_C@_0BI@FJDKIODL@REQUESTING_UNIT_VEHICLE?$AA@ DB 'REQUESTING_UNIT_VEHIC'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KNPIPNJG@REQUESTING_UNIT_DEST?$AA@
CONST	SEGMENT
??_C@_0BF@KNPIPNJG@REQUESTING_UNIT_DEST?$AA@ DB 'REQUESTING_UNIT_DEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CNELNPAK@REQUESTING_UNIT_NAME?$AA@
CONST	SEGMENT
??_C@_0BF@CNELNPAK@REQUESTING_UNIT_NAME?$AA@ DB 'REQUESTING_UNIT_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JIPHAHDE@TARGET_BUILDING?$AA@
CONST	SEGMENT
??_C@_0BA@JIPHAHDE@TARGET_BUILDING?$AA@ DB 'TARGET_BUILDING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MMPDJKCG@PACKAGE_TARGET_BUILDING?$AA@
CONST	SEGMENT
??_C@_0BI@MMPDJKCG@PACKAGE_TARGET_BUILDING?$AA@ DB 'PACKAGE_TARGET_BUILDI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KPBELBIC@TARGET_OWNER?$AA@
CONST	SEGMENT
??_C@_0N@KPBELBIC@TARGET_OWNER?$AA@ DB 'TARGET_OWNER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HAAKOLEJ@TARGET_VEHICLE_NAME?$AA@
CONST	SEGMENT
??_C@_0BE@HAAKOLEJ@TARGET_VEHICLE_NAME?$AA@ DB 'TARGET_VEHICLE_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NBJLGBNL@TARGET_NAME?$AA@
CONST	SEGMENT
??_C@_0M@NBJLGBNL@TARGET_NAME?$AA@ DB 'TARGET_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPIADFBG@OLD_TARGET_NAME?$AA@
CONST	SEGMENT
??_C@_0BA@BPIADFBG@OLD_TARGET_NAME?$AA@ DB 'OLD_TARGET_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GIIEOPEC@PACKAGE_TARGET_NAME?$AA@
CONST	SEGMENT
??_C@_0BE@GIIEOPEC@PACKAGE_TARGET_NAME?$AA@ DB 'PACKAGE_TARGET_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JMBJCAAD@PACKAGE_MISSION_DESCRIPTION?$AA@
CONST	SEGMENT
??_C@_0BM@JMBJCAAD@PACKAGE_MISSION_DESCRIPTION?$AA@ DB 'PACKAGE_MISSION_D'
	DB	'ESCRIPTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JCKFPPPN@OLD_MISSION_DESCRIPTION?$AA@
CONST	SEGMENT
??_C@_0BI@JCKFPPPN@OLD_MISSION_DESCRIPTION?$AA@ DB 'OLD_MISSION_DESCRIPTI'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JLKIMEFN@MISSION_DESCRIPTION?$AA@
CONST	SEGMENT
??_C@_0BE@JLKIMEFN@MISSION_DESCRIPTION?$AA@ DB 'MISSION_DESCRIPTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KLMDELEG@OLD_MISSION_NAME?$AA@
CONST	SEGMENT
??_C@_0BB@KLMDELEG@OLD_MISSION_NAME?$AA@ DB 'OLD_MISSION_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EONIOOBP@MISSION_NAME?$AA@
CONST	SEGMENT
??_C@_0N@EONIOOBP@MISSION_NAME?$AA@ DB 'MISSION_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EHHCCPNN@PLANE_NAME?$AA@
CONST	SEGMENT
??_C@_0L@EHHCCPNN@PLANE_NAME?$AA@ DB 'PLANE_NAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LOGHDAHB@FLIGHT_NAME?$AA@
CONST	SEGMENT
??_C@_0M@LOGHDAHB@FLIGHT_NAME?$AA@ DB 'FLIGHT_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HBLJNPMB@FLIGHT_NUM?$AA@
CONST	SEGMENT
??_C@_0L@HBLJNPMB@FLIGHT_NUM?$AA@ DB 'FLIGHT_NUM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFNBDBBL@DATA?$AA@
CONST	SEGMENT
??_C@_04DFNBDBBL@DATA?$AA@ DB 'DATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GANGLKEK@WEAPON?$AA@
CONST	SEGMENT
??_C@_06GANGLKEK@WEAPON?$AA@ DB 'WEAPON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GDIDNJLL@PILOT?$AA@
CONST	SEGMENT
??_C@_05GDIDNJLL@PILOT?$AA@ DB 'PILOT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PIPAPGIN@?$CDINC?$AA@
CONST	SEGMENT
??_C@_04PIPAPGIN@?$CDINC?$AA@ DB '#INC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDBNACPI@?$CDENDFONT?$AA@
CONST	SEGMENT
??_C@_08PDBNACPI@?$CDENDFONT?$AA@ DB '#ENDFONT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPBCPENM@?$CDFONT?$AA@
CONST	SEGMENT
??_C@_05HPBCPENM@?$CDFONT?$AA@ DB '#FONT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONCAKGHE@?$CDCOLOR?$AA@
CONST	SEGMENT
??_C@_06ONCAKGHE@?$CDCOLOR?$AA@ DB '#COLOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIMEAPLD@?$CDTAB?$AA@
CONST	SEGMENT
??_C@_04EIMEAPLD@?$CDTAB?$AA@ DB '#TAB', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFHPLCJ@?$CDCOLON?$AA@
CONST	SEGMENT
??_C@_06LFHPLCJ@?$CDCOLON?$AA@ DB '#COLON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODLOODK@?$CGnbsp?$DL?$AA@
CONST	SEGMENT
??_C@_06ODLOODK@?$CGnbsp?$DL?$AA@ DB '&nbsp;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCLFABJD@?$CDSPACE?$AA@
CONST	SEGMENT
??_C@_06PCLFABJD@?$CDSPACE?$AA@ DB '#SPACE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBHCBENH@?$DMp?$DO?$AA@
CONST	SEGMENT
??_C@_03HBHCBENH@?$DMp?$DO?$AA@ DB '<p>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DEHMDPMN@?$CDEOL?$AA@
CONST	SEGMENT
??_C@_04DEHMDPMN@?$CDEOL?$AA@ DB '#EOL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NEHCGBKJ@?$CDIF_TACTICAL_ENGAGEMENT?$AA@
CONST	SEGMENT
??_C@_0BI@NEHCGBKJ@?$CDIF_TACTICAL_ENGAGEMENT?$AA@ DB '#IF_TACTICAL_ENGAG'
	DB	'EMENT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OBPCDIPD@?$CDIF_CLEAR_WEATHER?$AA@
CONST	SEGMENT
??_C@_0BC@OBPCDIPD@?$CDIF_CLEAR_WEATHER?$AA@ DB '#IF_CLEAR_WEATHER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CCLGKGNJ@?$CDIF_DEFENSIVE_PLANNED?$AA@
CONST	SEGMENT
??_C@_0BG@CCLGKGNJ@?$CDIF_DEFENSIVE_PLANNED?$AA@ DB '#IF_DEFENSIVE_PLANNE'
	DB	'D', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IMPLIODD@?$CDIF_OFFENSIVE_PLANNED?$AA@
CONST	SEGMENT
??_C@_0BG@IMPLIODD@?$CDIF_OFFENSIVE_PLANNED?$AA@ DB '#IF_OFFENSIVE_PLANNE'
	DB	'D', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GLNDBAKF@?$CDIF_DIVERTED?$AA@
CONST	SEGMENT
??_C@_0N@GLNDBAKF@?$CDIF_DIVERTED?$AA@ DB '#IF_DIVERTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FDANNMCJ@?$CDIF_RELATED_EVENTS?$AA@
CONST	SEGMENT
??_C@_0BD@FDANNMCJ@?$CDIF_RELATED_EVENTS?$AA@ DB '#IF_RELATED_EVENTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DELDEFBL@?$CDIF_PLAYER_PILOT?$AA@
CONST	SEGMENT
??_C@_0BB@DELDEFBL@?$CDIF_PLAYER_PILOT?$AA@ DB '#IF_PLAYER_PILOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CJDAIELH@?$CDIF_NOT_SUPPORT_HEADER?$AA@
CONST	SEGMENT
??_C@_0BH@CJDAIELH@?$CDIF_NOT_SUPPORT_HEADER?$AA@ DB '#IF_NOT_SUPPORT_HEA'
	DB	'DER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KFLLPBHK@?$CDIF_PACKAGE_SUCCESS_EQ?$AA@
CONST	SEGMENT
??_C@_0BH@KFLLPBHK@?$CDIF_PACKAGE_SUCCESS_EQ?$AA@ DB '#IF_PACKAGE_SUCCESS'
	DB	'_EQ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEDEGODM@?$CDIF_ECM?$AA@
CONST	SEGMENT
??_C@_07MEDEGODM@?$CDIF_ECM?$AA@ DB '#IF_ECM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IOLDENMM@?$CDIF_TANKER?$AA@
CONST	SEGMENT
??_C@_0L@IOLDENMM@?$CDIF_TANKER?$AA@ DB '#IF_TANKER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JMILBEPH@?$CDIF_JSTAR?$AA@
CONST	SEGMENT
??_C@_09JMILBEPH@?$CDIF_JSTAR?$AA@ DB '#IF_JSTAR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HOJEAAHG@?$CDIF_AWACS?$AA@
CONST	SEGMENT
??_C@_09HOJEAAHG@?$CDIF_AWACS?$AA@ DB '#IF_AWACS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IALOGJJJ@?$CDIF_TARGET_VEH_IS_MISSILE?$AA@
CONST	SEGMENT
??_C@_0BK@IALOGJJJ@?$CDIF_TARGET_VEH_IS_MISSILE?$AA@ DB '#IF_TARGET_VEH_I'
	DB	'S_MISSILE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BLDENJFD@?$CDIF_THREAT_IS_MISSILE?$AA@
CONST	SEGMENT
??_C@_0BG@BLDENJFD@?$CDIF_THREAT_IS_MISSILE?$AA@ DB '#IF_THREAT_IS_MISSIL'
	DB	'E', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KEGODJIP@?$CDIF_WEAPON_HIT_EQ?$AA@
CONST	SEGMENT
??_C@_0BC@KEGODJIP@?$CDIF_WEAPON_HIT_EQ?$AA@ DB '#IF_WEAPON_HIT_EQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ILDEBBON@?$CDIF_WEAPON_MISSED_EQ?$AA@
CONST	SEGMENT
??_C@_0BF@ILDEBBON@?$CDIF_WEAPON_MISSED_EQ?$AA@ DB '#IF_WEAPON_MISSED_EQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LEFKKKEP@?$CDIF_WEAPON_FIRED?$AA@
CONST	SEGMENT
??_C@_0BB@LEFKKKEP@?$CDIF_WEAPON_FIRED?$AA@ DB '#IF_WEAPON_FIRED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NCBOGAAH@?$CDIF_FIRST_PILOT_SET?$AA@
CONST	SEGMENT
??_C@_0BE@NCBOGAAH@?$CDIF_FIRST_PILOT_SET?$AA@ DB '#IF_FIRST_PILOT_SET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PNEBFBKP@?$CDIF_WEAPONS_FIRED?$AA@
CONST	SEGMENT
??_C@_0BC@PNEBFBKP@?$CDIF_WEAPONS_FIRED?$AA@ DB '#IF_WEAPONS_FIRED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ECBMLOJO@?$CDIF_FIRST_WEAPON?$AA@
CONST	SEGMENT
??_C@_0BB@ECBMLOJO@?$CDIF_FIRST_WEAPON?$AA@ DB '#IF_FIRST_WEAPON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJFOIFPD@?$CDIF_HAVE_WEAPON?$AA@
CONST	SEGMENT
??_C@_0BA@IJFOIFPD@?$CDIF_HAVE_WEAPON?$AA@ DB '#IF_HAVE_WEAPON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IIBJFFLN@?$CDIF_HAVE_PILOT?$AA@
CONST	SEGMENT
??_C@_0P@IIBJFFLN@?$CDIF_HAVE_PILOT?$AA@ DB '#IF_HAVE_PILOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CCGIDIBK@?$CDIF_ALTERNATE_STRIP?$AA@
CONST	SEGMENT
??_C@_0BE@CCGIDIBK@?$CDIF_ALTERNATE_STRIP?$AA@ DB '#IF_ALTERNATE_STRIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGNPKMMF@?$CDIF_HAVE_THREATS?$AA@
CONST	SEGMENT
??_C@_0BB@IGNPKMMF@?$CDIF_HAVE_THREATS?$AA@ DB '#IF_HAVE_THREATS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GEJCFLGA@?$CDIF_ENEMY_CA_ACTIVITY_GT?$AA@
CONST	SEGMENT
??_C@_0BJ@GEJCFLGA@?$CDIF_ENEMY_CA_ACTIVITY_GT?$AA@ DB '#IF_ENEMY_CA_ACTI'
	DB	'VITY_GT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CFGHOHFO@?$CDIF_ENEMY_AIR_RESPONSE?$AA@
CONST	SEGMENT
??_C@_0BH@CFGHOHFO@?$CDIF_ENEMY_AIR_RESPONSE?$AA@ DB '#IF_ENEMY_AIR_RESPO'
	DB	'NSE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DMLOGKM@?$CDIF_SOLO_PACKAGE?$AA@
CONST	SEGMENT
??_C@_0BB@DMLOGKM@?$CDIF_SOLO_PACKAGE?$AA@ DB '#IF_SOLO_PACKAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FMCCFLJB@?$CDIF_PLAYER_PLANE?$AA@
CONST	SEGMENT
??_C@_0BB@FMCCFLJB@?$CDIF_PLAYER_PLANE?$AA@ DB '#IF_PLAYER_PLANE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BICNCHDF@?$CDIF_PLAYER_FLIGHT?$AA@
CONST	SEGMENT
??_C@_0BC@BICNCHDF@?$CDIF_PLAYER_FLIGHT?$AA@ DB '#IF_PLAYER_FLIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGKNAHIA@?$CDIF_PRIMARY_FLIGHT?$AA@
CONST	SEGMENT
??_C@_0BD@NGKNAHIA@?$CDIF_PRIMARY_FLIGHT?$AA@ DB '#IF_PRIMARY_FLIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JHDJKIKK@?$CDIF_CONTEXT_EQ?$AA@
CONST	SEGMENT
??_C@_0P@JHDJKIKK@?$CDIF_CONTEXT_EQ?$AA@ DB '#IF_CONTEXT_EQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LFFPHFBL@?$CDIF_FLIGHT_CONTEXT_EQ?$AA@
CONST	SEGMENT
??_C@_0BG@LFFPHFBL@?$CDIF_FLIGHT_CONTEXT_EQ?$AA@ DB '#IF_FLIGHT_CONTEXT_E'
	DB	'Q', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIIJCMHG@?$CDIF_TARGET_UNIT?$AA@
CONST	SEGMENT
??_C@_0BA@EIIJCMHG@?$CDIF_TARGET_UNIT?$AA@ DB '#IF_TARGET_UNIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EKIPLFBG@?$CDIF_TARGET_OBJ?$AA@
CONST	SEGMENT
??_C@_0P@EKIPLFBG@?$CDIF_TARGET_OBJ?$AA@ DB '#IF_TARGET_OBJ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJEKJAJL@?$CDIF_OLD_MISSION_EQ?$AA@
CONST	SEGMENT
??_C@_0BD@PJEKJAJL@?$CDIF_OLD_MISSION_EQ?$AA@ DB '#IF_OLD_MISSION_EQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GMDIIIKA@?$CDIF_MISSION_EQ?$AA@
CONST	SEGMENT
??_C@_0P@GMDIIIKA@?$CDIF_MISSION_EQ?$AA@ DB '#IF_MISSION_EQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JPBGPHCM@?$CDIF_PACKAGE_MISSION_EQ?$AA@
CONST	SEGMENT
??_C@_0BH@JPBGPHCM@?$CDIF_PACKAGE_MISSION_EQ?$AA@ DB '#IF_PACKAGE_MISSION'
	DB	'_EQ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MGMEMEHP@?$CDIF_HAVE_PATROL_TIME?$AA@
CONST	SEGMENT
??_C@_0BF@MGMEMEHP@?$CDIF_HAVE_PATROL_TIME?$AA@ DB '#IF_HAVE_PATROL_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KKGPNOPM@?$CDIF_HAVE_TARGET_BUILDING?$AA@
CONST	SEGMENT
??_C@_0BJ@KKGPNOPM@?$CDIF_HAVE_TARGET_BUILDING?$AA@ DB '#IF_HAVE_TARGET_B'
	DB	'UILDING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PHKLIJPH@?$CDIF_HAVE_PACKAGE_TARGET?$AA@
CONST	SEGMENT
??_C@_0BI@PHKLIJPH@?$CDIF_HAVE_PACKAGE_TARGET?$AA@ DB '#IF_HAVE_PACKAGE_T'
	DB	'ARGET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HEBDCAAB@?$CDIF_HAVE_TARGET?$AA@
CONST	SEGMENT
??_C@_0BA@HEBDCAAB@?$CDIF_HAVE_TARGET?$AA@ DB '#IF_HAVE_TARGET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@
CONST	SEGMENT
??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@ DB '<Brief '
	DB	'Reading Error - stack overflow. Max stacks = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@
CONST	SEGMENT
??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@ DB '#ENDSCRIPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EGAAPGFI@?$DMBrief?5reading?5Error?5?9?5unmatched@
CONST	SEGMENT
??_C@_0CK@EGAAPGFI@?$DMBrief?5reading?5Error?5?9?5unmatched@ DB '<Brief r'
	DB	'eading Error - unmatched #ENDIF>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJIOOPNB@?$CDENDIF?$AA@
CONST	SEGMENT
??_C@_06OJIOOPNB@?$CDENDIF?$AA@ DB '#ENDIF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GNCADCNB@?$CDELSE?$AA@
CONST	SEGMENT
??_C@_05GNCADCNB@?$CDELSE?$AA@ DB '#ELSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFFEHOPP@?$CDIF?$AA@
CONST	SEGMENT
??_C@_03LFFEHOPP@?$CDIF?$AA@ DB '#IF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCAJEJLJ@?$DMunk?$DO?$AA@
CONST	SEGMENT
??_C@_05NCAJEJLJ@?$DMunk?$DO?$AA@ DB '<unk>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03IPLKIPCO@?$CDDD?$AA@
CONST	SEGMENT
??_C@_03IPLKIPCO@?$CDDD?$AA@ DB '#DD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GEFJINEE@?$CF?42f?$AA@
CONST	SEGMENT
??_C@_04GEFJINEE@?$CF?42f?$AA@ DB '%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f?$AA@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f?$AA@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f?$AA@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f?$AA@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LHEKBCCP@?$DMtd?$DO?$AA@
CONST	SEGMENT
??_C@_04LHEKBCCP@?$DMtd?$DO?$AA@ DB '<td>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PBDJADDD@?$CF3d?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF5s?5?$CF4s?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@PBDJADDD@?$CF3d?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF5s?5?$CF4s?5?$CFs?5?$CFs?$AA@ DB '%'
	DB	'3d %8s %3s %3s %5s %4s %s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DDPJPIDF@?$CF3s?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF4s?5?$CF4s?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@DDPJPIDF@?$CF3s?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF4s?5?$CF4s?5?$CFs?5?$CFs?$AA@ DB '%'
	DB	'3s %8s %3s %3s %4s %4s %s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JHMDMDFK@Wpt?$AA@
CONST	SEGMENT
??_C@_03JHMDMDFK@Wpt?$AA@ DB 'Wpt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKOFBOPB@Time?$AA@
CONST	SEGMENT
??_C@_04OKOFBOPB@Time?$AA@ DB 'Time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFHJMOKN@Hdg?$AA@
CONST	SEGMENT
??_C@_03OFHJMOKN@Hdg?$AA@ DB 'Hdg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FCGDEGFM@Spd?$AA@
CONST	SEGMENT
??_C@_03FCGDEGFM@Spd?$AA@ DB 'Spd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHINJBAN@Alt?$AA@
CONST	SEGMENT
??_C@_03PHINJBAN@Alt?$AA@ DB 'Alt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MPGECEBJ@Dist?$AA@
CONST	SEGMENT
??_C@_04MPGECEBJ@Dist?$AA@ DB 'Dist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NPHIDLME@mission?4gbd?$AA@
CONST	SEGMENT
??_C@_0M@NPHIDLME@mission?4gbd?$AA@ DB 'mission.gbd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFIJADLA@task?4gbd?$AA@
CONST	SEGMENT
??_C@_08IFIJADLA@task?4gbd?$AA@ DB 'task.gbd', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHLKLBAI@related?4db?$AA@
CONST	SEGMENT
??_C@_0L@NHLKLBAI@related?4db?$AA@ DB 'related.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BCEJELHM@results?4db?$AA@
CONST	SEGMENT
??_C@_0L@BCEJELHM@results?4db?$AA@ DB 'results.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DGFFLKPN@PElement?4db?$AA@
CONST	SEGMENT
??_C@_0M@DGFFLKPN@PElement?4db?$AA@ DB 'PElement.db', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHOPPMNB@pilot?4db?$AA@
CONST	SEGMENT
??_C@_08MHOPPMNB@pilot?4db?$AA@ DB 'pilot.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NACCMEFJ@FOrdEvt?4db?$AA@
CONST	SEGMENT
??_C@_0L@NACCMEFJ@FOrdEvt?4db?$AA@ DB 'FOrdEvt.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JBIFENN@FOrdWeap?4db?$AA@
CONST	SEGMENT
??_C@_0M@JBIFENN@FOrdWeap?4db?$AA@ DB 'FOrdWeap.db', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDADIECF@FOrdnce?4db?$AA@
CONST	SEGMENT
??_C@_0L@BDADIECF@FOrdnce?4db?$AA@ DB 'FOrdnce.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELGDCBBJ@flight?4db?$AA@
CONST	SEGMENT
??_C@_09ELGDCBBJ@flight?4db?$AA@ DB 'flight.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CALOFOKN@FlEvent?4db?$AA@
CONST	SEGMENT
??_C@_0L@CALOFOKN@FlEvent?4db?$AA@ DB 'FlEvent.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMOABIKF@element?4db?$AA@
CONST	SEGMENT
??_C@_0L@JMOABIKF@element?4db?$AA@ DB 'element.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FOPFMLMO@pheader?4db?$AA@
CONST	SEGMENT
??_C@_0L@FOPFMLMO@pheader?4db?$AA@ DB 'pheader.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CINKEAKH@header?4db?$AA@
CONST	SEGMENT
??_C@_09CINKEAKH@header?4db?$AA@ DB 'header.db', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OGPGAODE@End?4b?$AA@
CONST	SEGMENT
??_C@_05OGPGAODE@End?4b?$AA@ DB 'End.b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IMPHLOC@Emerganc?4b?$AA@
CONST	SEGMENT
??_C@_0L@IMPHLOC@Emerganc?4b?$AA@ DB 'Emerganc.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNMLNNPM@RoE?4b?$AA@
CONST	SEGMENT
??_C@_05NNMLNNPM@RoE?4b?$AA@ DB 'RoE.b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EPKPDGMH@Support?4b?$AA@
CONST	SEGMENT
??_C@_09EPKPDGMH@Support?4b?$AA@ DB 'Support.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEHEOFJM@Weather?4b?$AA@
CONST	SEGMENT
??_C@_09EEHEOFJM@Weather?4b?$AA@ DB 'Weather.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBEEHBDF@Loadout?4b?$AA@
CONST	SEGMENT
??_C@_09DBEEHBDF@Loadout?4b?$AA@ DB 'Loadout.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MGLGPKDC@Loadouth?4b?$AA@
CONST	SEGMENT
??_C@_0L@MGLGPKDC@Loadouth?4b?$AA@ DB 'Loadouth.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNCAMDID@SteerPt?4b?$AA@
CONST	SEGMENT
??_C@_09FNCAMDID@SteerPt?4b?$AA@ DB 'SteerPt.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEOKCHAH@SteerPtH?4b?$AA@
CONST	SEGMENT
??_C@_0L@EEOKCHAH@SteerPtH?4b?$AA@ DB 'SteerPtH.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPKCJAOF@Threats?4b?$AA@
CONST	SEGMENT
??_C@_09KPKCJAOF@Threats?4b?$AA@ DB 'Threats.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDKFKIOG@Element?4b?$AA@
CONST	SEGMENT
??_C@_09FDKFKIOG@Element?4b?$AA@ DB 'Element.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GAFPAEGE@PackHead?4b?$AA@
CONST	SEGMENT
??_C@_0L@GAFPAEGE@PackHead?4b?$AA@ DB 'PackHead.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@
CONST	SEGMENT
??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@ DB '</table>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CALBNDK@divert?4b?$AA@
CONST	SEGMENT
??_C@_08CALBNDK@divert?4b?$AA@ DB 'divert.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOMGACNF@Situate?4b?$AA@
CONST	SEGMENT
??_C@_09IOMGACNF@Situate?4b?$AA@ DB 'Situate.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPOPBMGJ@Header?4b?$AA@
CONST	SEGMENT
??_C@_08KPOPBMGJ@Header?4b?$AA@ DB 'Header.b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z$0
__unwindtable$?AddLocationToBuffer@@YAXDFFPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddLocationToBuffer@@YAXDFFPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddLocationToBuffer@@YAXDFFPAD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddLocationToBuffer@@YAXDFFPAD@Z$2
__unwindtable$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$3
__ehfuncinfo$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddLocationToBuffer@@YAXDFFPAD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?AddLocationToBuffer@@YAXDFFPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_div$1 = -1368						; size = 4
$T2 = -1364						; size = 4
_sptr$3 = -1360						; size = 4
_sptr$4 = -1356						; size = 4
$T5 = -1352						; size = 4
_div$6 = -1348						; size = 4
tv501 = -1344						; size = 4
_vc$7 = -1340						; size = 4
_mode$ = -1336						; size = 4
_argnum$8 = -1332					; size = 4
tv386 = -1328						; size = 4
_size$ = -1324						; size = 4
_to_upper$ = -1320					; size = 4
_params$ = -1316					; size = 4
_addchar$ = -1312					; size = 2
_stridx$ = -1308					; size = 4
_plural$ = -1304					; size = 4
_gender$ = -1300					; size = 4
_usage$ = -1296						; size = 4
_entity$ = -1292					; size = 4
_index$ = -1288						; size = 4
_format$ = -1284					; size = 1024
_argstring$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_maxsize$ = 8						; size = 2
_string$ = 12						; size = 4
_data$ = 16						; size = 4
?ConstructOrderedGenderedSentence@@YAXFPADPAVEventDataClass@@ZZ PROC ; ConstructOrderedGenderedSentence

; 1325 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 1368				; 00000558H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1326 : 	_TCHAR		argstring[MAX_STRLEN_PER_TOKEN],addchar[2];
; 1327 : 	_TCHAR		format[1024];
; 1328 : 	int			size,index=0;

	mov	DWORD PTR _index$[ebp], 0

; 1329 : 	int			plural,to_upper,gender,usage,stridx,mode;
; 1330 : 	CampEntity	entity;
; 1331 : 	va_list		params;
; 1332 : 
; 1333 : 	string[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _string$[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 1334 : 	ReadIndexedString(data->formatId, format, 1024);

	push	1024					; 00000400H
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	movsx	ecx, WORD PTR [eax]
	push	ecx
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 1335 : 	size = _tcslen(format);

	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax
$LN71@ConstructO:

; 1336 : 
; 1337 : 	while (format[index])

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	test	ecx, ecx
	je	$LN73@ConstructO

; 1338 : 		{
; 1339 : 		if (format[index] == '#')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 35					; 00000023H
	jne	$LN69@ConstructO

; 1340 : 			{
; 1341 : 			// Evaluate the expression
; 1342 : 			index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1343 : 			plural = 0;

	mov	DWORD PTR _plural$[ebp], 0

; 1344 : 			to_upper = 0;

	mov	DWORD PTR _to_upper$[ebp], 0

; 1345 : 			usage = 0;

	mov	DWORD PTR _usage$[ebp], 0

; 1346 : 			mode = 0;

	mov	DWORD PTR _mode$[ebp], 0

; 1347 : 			gender = -1;

	mov	DWORD PTR _gender$[ebp], -1

; 1348 : 			argstring[0] = 0;

	mov	edx, 1
	imul	edx, 0
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 256			; 00000100H
	jae	SHORT $LN74@ConstructO
	jmp	SHORT $LN75@ConstructO
$LN74@ConstructO:
	call	___report_rangecheckfailure
$LN75@ConstructO:
	mov	eax, DWORD PTR $T2[ebp]
	mov	BYTE PTR _argstring$[ebp+eax], 0

; 1349 : 
; 1350 : 			// Check for an artical, country name, description or Location
; 1351 : 			if (format[index] == 'A' || format[index] == 'a')

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 65					; 00000041H
	je	SHORT $LN67@ConstructO
	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 97					; 00000061H
	jne	$LN68@ConstructO
$LN67@ConstructO:

; 1352 : 				{
; 1353 : 				if (format[index] == 'A')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN66@ConstructO

; 1354 : 					to_upper = 1;

	mov	DWORD PTR _to_upper$[ebp], 1
$LN66@ConstructO:

; 1355 : 				index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1356 : 				// Check for Gender
; 1357 : 				if (format[index] == 'm' || format[index] == 'M')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 109				; 0000006dH
	je	SHORT $LN64@ConstructO
	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 77					; 0000004dH
	jne	SHORT $LN65@ConstructO
$LN64@ConstructO:

; 1358 : 					{
; 1359 : 					if (format[index] == 'M')

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 77					; 0000004dH
	jne	SHORT $LN63@ConstructO

; 1360 : 						plural = 1;

	mov	DWORD PTR _plural$[ebp], 1
$LN63@ConstructO:

; 1361 : 					index++;

	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx

; 1362 : 					gender = F4LANG_MASCULINE;

	mov	DWORD PTR _gender$[ebp], 0
	jmp	$LN62@ConstructO
$LN65@ConstructO:

; 1363 : 					}
; 1364 : 				else if (format[index] == 'f' || format[index] == 'F')

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 102				; 00000066H
	je	SHORT $LN60@ConstructO
	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN61@ConstructO
$LN60@ConstructO:

; 1365 : 					{
; 1366 : 					if (format[index] == 'F')

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 70					; 00000046H
	jne	SHORT $LN59@ConstructO

; 1367 : 						plural = 1;

	mov	DWORD PTR _plural$[ebp], 1
$LN59@ConstructO:

; 1368 : 					index++;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 1369 : 					gender = F4LANG_FEMININE;

	mov	DWORD PTR _gender$[ebp], 1
	jmp	SHORT $LN62@ConstructO
$LN61@ConstructO:

; 1370 : 					}
; 1371 : 				else if (format[index] == 'n' || format[index] == 'N')

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 110				; 0000006eH
	je	SHORT $LN56@ConstructO
	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 78					; 0000004eH
	jne	SHORT $LN62@ConstructO
$LN56@ConstructO:

; 1372 : 					{
; 1373 : 					if (format[index] == 'N')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 78					; 0000004eH
	jne	SHORT $LN55@ConstructO

; 1374 : 						plural = 1;

	mov	DWORD PTR _plural$[ebp], 1
$LN55@ConstructO:

; 1375 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1376 : 					gender = F4LANG_NEUTER;

	mov	DWORD PTR _gender$[ebp], 2
$LN62@ConstructO:

; 1377 : 					}
; 1378 : 				// Check for Usage
; 1379 : 				if (format[index] == 'O')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 79					; 0000004fH
	jne	SHORT $LN54@ConstructO

; 1380 : 					{
; 1381 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1382 : 					usage = 1;

	mov	DWORD PTR _usage$[ebp], 1
	jmp	SHORT $LN53@ConstructO
$LN54@ConstructO:

; 1383 : 					}
; 1384 : 				// Check for Usage
; 1385 : 				else if (format[index] == 'o')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 111				; 0000006fH
	jne	SHORT $LN53@ConstructO

; 1386 : 					{
; 1387 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1388 : 					usage = 2;

	mov	DWORD PTR _usage$[ebp], 2
$LN53@ConstructO:

; 1389 : 					}
; 1390 : 				// Now find which item it refers to
; 1391 : 				if (gender < 0)

	cmp	DWORD PTR _gender$[ebp], 0
	jge	$LN51@ConstructO

; 1392 : 					{
; 1393 : 					// Find the entity
; 1394 : 					ShiAssert(format[index] == '0' || format[index] == '1');
; 1395 : 					entity = (CampEntity) vuDatabase->Find(data->vuIds[format[index] - '0']);

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-372]
	push	edx
	mov	eax, DWORD PTR [ecx+eax*8-376]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _entity$[ebp], eax

; 1396 : 					// Check for force to division
; 1397 : 					_TCHAR	*sptr = strstr(format,"#DD");

	push	OFFSET ??_C@_03IPLKIPCO@?$CDDD?$AA@
	lea	ecx, DWORD PTR _format$[ebp]
	push	ecx
	call	?strstr@@YAPADPADPBD@Z			; strstr
	add	esp, 8
	mov	DWORD PTR _sptr$3[ebp], eax

; 1398 : 					int		div = 0;

	mov	DWORD PTR _div$1[ebp], 0

; 1399 : 					if (sptr && sptr[3] == format[index])

	cmp	DWORD PTR _sptr$3[ebp], 0
	je	SHORT $LN50@ConstructO
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _sptr$3[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	ecx, eax
	jne	SHORT $LN50@ConstructO

; 1400 : 						div = 1;

	mov	DWORD PTR _div$1[ebp], 1
$LN50@ConstructO:

; 1401 : 					gender = GetGender(entity, div);

	mov	ecx, DWORD PTR _div$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _entity$[ebp]
	push	edx
	call	?GetGender@@YAHPAVCampBaseClass@@H@Z	; GetGender
	add	esp, 8
	mov	DWORD PTR _gender$[ebp], eax
$LN51@ConstructO:

; 1402 : 					}
; 1403 : 				// Find the artical
; 1404 : 				stridx = 3800 + 6*usage + 3*plural + gender;

	mov	eax, DWORD PTR _usage$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _plural$[ebp]
	imul	ecx, 3
	add	eax, DWORD PTR _gender$[ebp]
	lea	edx, DWORD PTR [ecx+eax+3800]
	mov	DWORD PTR _stridx$[ebp], edx

; 1405 : 				AddIndexedStringToBuffer(stridx, argstring);

	lea	eax, DWORD PTR _argstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stridx$[ebp]
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 1406 : 				if (to_upper && _istlower(argstring[0]))

	cmp	DWORD PTR _to_upper$[ebp], 0
	je	SHORT $LN49@ConstructO
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _argstring$[ebp+edx]
	push	eax
	call	__ismbclower
	add	esp, 4
	test	eax, eax
	je	SHORT $LN49@ConstructO

; 1407 : 					argstring[0] = _toupper(argstring[0]);

	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _argstring$[ebp+ecx]
	sub	edx, 32					; 00000020H
	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR _argstring$[ebp+eax], dl
$LN49@ConstructO:

; 1408 : 				}

	jmp	$LN48@ConstructO
$LN68@ConstructO:

; 1409 : 			else if (format[index] == 'C' || format[index] == 'c')

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 67					; 00000043H
	je	SHORT $LN46@ConstructO
	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 99					; 00000063H
	jne	$LN47@ConstructO
$LN46@ConstructO:

; 1410 : 				{
; 1411 : 				if (format[index] == 'C')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 67					; 00000043H
	jne	SHORT $LN45@ConstructO

; 1412 : 					to_upper = 1;

	mov	DWORD PTR _to_upper$[ebp], 1
$LN45@ConstructO:

; 1413 : 				index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1414 : 				// Check for Gender
; 1415 : 				if (format[index] == 'm' || format[index] == 'M')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 109				; 0000006dH
	je	SHORT $LN43@ConstructO
	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 77					; 0000004dH
	jne	SHORT $LN44@ConstructO
$LN43@ConstructO:

; 1416 : 					{
; 1417 : 					if (format[index] == 'M')

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 77					; 0000004dH
	jne	SHORT $LN42@ConstructO

; 1418 : 						plural = 1;

	mov	DWORD PTR _plural$[ebp], 1
$LN42@ConstructO:

; 1419 : 					index++;

	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx

; 1420 : 					gender = F4LANG_MASCULINE;

	mov	DWORD PTR _gender$[ebp], 0
	jmp	$LN41@ConstructO
$LN44@ConstructO:

; 1421 : 					}
; 1422 : 				else if (format[index] == 'f' || format[index] == 'F')

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 102				; 00000066H
	je	SHORT $LN39@ConstructO
	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN40@ConstructO
$LN39@ConstructO:

; 1423 : 					{
; 1424 : 					if (format[index] == 'F')

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 70					; 00000046H
	jne	SHORT $LN38@ConstructO

; 1425 : 						plural = 1;

	mov	DWORD PTR _plural$[ebp], 1
$LN38@ConstructO:

; 1426 : 					index++;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 1427 : 					gender = F4LANG_FEMININE;

	mov	DWORD PTR _gender$[ebp], 1
	jmp	SHORT $LN41@ConstructO
$LN40@ConstructO:

; 1428 : 					}
; 1429 : 				else if (format[index] == 'n' || format[index] == 'N')

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 110				; 0000006eH
	je	SHORT $LN35@ConstructO
	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 78					; 0000004eH
	jne	SHORT $LN41@ConstructO
$LN35@ConstructO:

; 1430 : 					{
; 1431 : 					if (format[index] == 'N')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 78					; 0000004eH
	jne	SHORT $LN34@ConstructO

; 1432 : 						plural = 1;

	mov	DWORD PTR _plural$[ebp], 1
$LN34@ConstructO:

; 1433 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1434 : 					gender = F4LANG_NEUTER;

	mov	DWORD PTR _gender$[ebp], 2
$LN41@ConstructO:

; 1435 : 					}
; 1436 : 				// Check for Usage
; 1437 : 				if (format[index] == 'O')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 79					; 0000004fH
	jne	SHORT $LN33@ConstructO

; 1438 : 					{
; 1439 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1440 : 					usage = 1;

	mov	DWORD PTR _usage$[ebp], 1
	jmp	SHORT $LN32@ConstructO
$LN33@ConstructO:

; 1441 : 					}
; 1442 : 				else if (format[index] == 'o')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 111				; 0000006fH
	jne	SHORT $LN32@ConstructO

; 1443 : 					{
; 1444 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1445 : 					usage = 2;

	mov	DWORD PTR _usage$[ebp], 2
$LN32@ConstructO:

; 1446 : 					}
; 1447 : 				// Now find which item it refers to
; 1448 : 				if (gender < 0)

	cmp	DWORD PTR _gender$[ebp], 0
	jge	$LN30@ConstructO

; 1449 : 					{
; 1450 : 					// Find the entity
; 1451 : 					ShiAssert(format[index] == '0' || format[index] == '1');
; 1452 : 					entity = (CampEntity) vuDatabase->Find(data->vuIds[format[index] - '0']);

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-372]
	push	edx
	mov	eax, DWORD PTR [ecx+eax*8-376]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _entity$[ebp], eax

; 1453 : 					// Check for force to division
; 1454 : 					_TCHAR	*sptr = strstr(format,"#DD");

	push	OFFSET ??_C@_03IPLKIPCO@?$CDDD?$AA@
	lea	ecx, DWORD PTR _format$[ebp]
	push	ecx
	call	?strstr@@YAPADPADPBD@Z			; strstr
	add	esp, 8
	mov	DWORD PTR _sptr$4[ebp], eax

; 1455 : 					int		div = 0;

	mov	DWORD PTR _div$6[ebp], 0

; 1456 : 					if (sptr && sptr[3] == format[index])

	cmp	DWORD PTR _sptr$4[ebp], 0
	je	SHORT $LN29@ConstructO
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _sptr$4[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	ecx, eax
	jne	SHORT $LN29@ConstructO

; 1457 : 						div = 1;

	mov	DWORD PTR _div$6[ebp], 1
$LN29@ConstructO:

; 1458 : 					gender = 0;

	mov	DWORD PTR _gender$[ebp], 0

; 1459 : 					if (entity)

	cmp	DWORD PTR _entity$[ebp], 0
	je	SHORT $LN30@ConstructO

; 1460 : 						gender = GetGender(entity, div);

	mov	ecx, DWORD PTR _div$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _entity$[ebp]
	push	edx
	call	?GetGender@@YAHPAVCampBaseClass@@H@Z	; GetGender
	add	esp, 8
	mov	DWORD PTR _gender$[ebp], eax
$LN30@ConstructO:

; 1461 : 					}
; 1462 : 				ShiAssert(format[index] == '0' || format[index] == '1');
; 1463 : 				// Find the adjective
; 1464 : 				stridx = ConvertTeamToStringIndex(data->owners[format[index] - '0'], gender, usage, plural);

	mov	eax, DWORD PTR _plural$[ebp]
	push	eax
	mov	ecx, DWORD PTR _usage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gender$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	mov	edx, DWORD PTR _data$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2-72]
	push	eax
	call	?ConvertTeamToStringIndex@@YAHHHHH@Z	; ConvertTeamToStringIndex
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stridx$[ebp], eax

; 1465 : //				stridx = 3820 + 20*data->owners[format[index] - '0'] + 6*usage + 3*plural + gender;
; 1466 : 				AddIndexedStringToBuffer(stridx, argstring);

	lea	ecx, DWORD PTR _argstring$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stridx$[ebp]
	push	edx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 1467 : 				if (to_upper && _istlower(argstring[0]))

	cmp	DWORD PTR _to_upper$[ebp], 0
	je	SHORT $LN27@ConstructO
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _argstring$[ebp+eax]
	push	ecx
	call	__ismbclower
	add	esp, 4
	test	eax, eax
	je	SHORT $LN27@ConstructO

; 1468 : 					argstring[0] = _toupper(argstring[0]);

	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _argstring$[ebp+edx]
	sub	eax, 32					; 00000020H
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR _argstring$[ebp+ecx], al
$LN27@ConstructO:

; 1469 : 				}

	jmp	$LN48@ConstructO
$LN47@ConstructO:

; 1470 : 			else if (format[index] == 'D')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 68					; 00000044H
	jne	$LN25@ConstructO

; 1471 : 				{
; 1472 : 				index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1473 : 				// Check for description type
; 1474 : 				ShiAssert (format[index] == 'D' || format[index] == 'F' || format[index] == 'B');
; 1475 : 				mode = format[index];

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	mov	DWORD PTR _mode$[ebp], eax

; 1476 : 				index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1477 : 				// Check for Usage
; 1478 : 				if (format[index] == 'O')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 79					; 0000004fH
	jne	SHORT $LN24@ConstructO

; 1479 : 					{
; 1480 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1481 : 					usage = 1;

	mov	DWORD PTR _usage$[ebp], 1
	jmp	SHORT $LN23@ConstructO
$LN24@ConstructO:

; 1482 : 					}
; 1483 : 				else if (format[index] == 'o')

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	cmp	eax, 111				; 0000006fH
	jne	SHORT $LN23@ConstructO

; 1484 : 					{
; 1485 : 					index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1486 : 					usage = 2;

	mov	DWORD PTR _usage$[ebp], 2
$LN23@ConstructO:

; 1487 : 					}
; 1488 : 				// Find the entity
; 1489 : 				ShiAssert(format[index] == '0' || format[index] == '1');
; 1490 : 				entity = (CampEntity) vuDatabase->Find(data->vuIds[format[index] - '0']);

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-372]
	push	edx
	mov	eax, DWORD PTR [ecx+eax*8-376]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _entity$[ebp], eax

; 1491 : 				if (entity)

	cmp	DWORD PTR _entity$[ebp], 0
	je	$LN21@ConstructO

; 1492 : 					{
; 1493 : 					switch (mode)

	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv386[ebp], ecx
	cmp	DWORD PTR tv386[ebp], 68		; 00000044H
	je	SHORT $LN18@ConstructO
	cmp	DWORD PTR tv386[ebp], 70		; 00000046H
	je	SHORT $LN17@ConstructO
	cmp	DWORD PTR tv386[ebp], 80		; 00000050H
	je	SHORT $LN16@ConstructO
	jmp	$LN13@ConstructO
$LN18@ConstructO:

; 1494 : 						{
; 1495 : 						case 'D':
; 1496 : 							entity->GetDivisionName(argstring,MAX_STRLEN_PER_TOKEN,usage);

	mov	edx, DWORD PTR _usage$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _argstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax

; 1497 : 							break;

	jmp	$LN21@ConstructO
$LN17@ConstructO:

; 1498 : 						case 'F':
; 1499 : 							entity->GetFullName(argstring,MAX_STRLEN_PER_TOKEN,usage);

	mov	ecx, DWORD PTR _usage$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	mov	eax, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+384]
	call	eax

; 1500 : 							break;

	jmp	$LN21@ConstructO
$LN16@ConstructO:

; 1501 : 						case 'P':
; 1502 : 							entity->GetName(argstring,MAX_STRLEN_PER_TOKEN,usage);

	mov	ecx, DWORD PTR _usage$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	mov	eax, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 1503 : 							if (entity->IsUnit())

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN15@ConstructO

; 1504 : 								{
; 1505 : 								entity = ((Unit)entity)->GetUnitParent();

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+944]
	call	eax
	mov	DWORD PTR _entity$[ebp], eax

; 1506 : 								if (entity)

	cmp	DWORD PTR _entity$[ebp], 0
	je	SHORT $LN15@ConstructO

; 1507 : 									entity->GetName(argstring,MAX_STRLEN_PER_TOKEN,usage);

	mov	ecx, DWORD PTR _usage$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	mov	eax, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax
$LN15@ConstructO:

; 1508 : 								}
; 1509 : 							break;

	jmp	SHORT $LN21@ConstructO
$LN13@ConstructO:

; 1510 : 						default:
; 1511 : 							entity->GetName(argstring,MAX_STRLEN_PER_TOKEN,usage);

	mov	ecx, DWORD PTR _usage$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	mov	eax, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax
$LN21@ConstructO:

; 1512 : 							break;
; 1513 : 						}
; 1514 : 					}
; 1515 : 				// Hack for sentance beginnings
; 1516 : 				if (string[0] == 0 && _istlower(argstring[0]))

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _string$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN12@ConstructO
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _argstring$[ebp+ecx]
	push	edx
	call	__ismbclower
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@ConstructO

; 1517 : 					argstring[0] = _toupper(argstring[0]);

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _argstring$[ebp+eax]
	sub	ecx, 32					; 00000020H
	mov	edx, 1
	imul	edx, 0
	mov	BYTE PTR _argstring$[ebp+edx], cl
$LN12@ConstructO:

; 1518 : 				}

	jmp	$LN48@ConstructO
$LN25@ConstructO:

; 1519 : 			else if (format[index] == 'L')

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	cmp	ecx, 76					; 0000004cH
	jne	SHORT $LN10@ConstructO

; 1520 : 				{
; 1521 : 				// add a location
; 1522 : 				index++;

	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx

; 1523 : 				ShiAssert (format[index] == 'N' || format[index] == 'T' || format[index] == 'S' || format[index] == 'G' || format[index] == 'n' || format[index] == 't' || format[index] == 's' || format[index] == 'g' || format[index] == 'E' || format[index] == 'e');
; 1524 : 				AddLocationToBuffer(format[index],data->xLoc,data->yLoc,argstring);

	lea	eax, DWORD PTR _argstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	movzx	eax, BYTE PTR _format$[ebp+edx]
	push	eax
	call	?AddLocationToBuffer@@YAXDFFPAD@Z	; AddLocationToBuffer
	add	esp, 16					; 00000010H
	jmp	$LN48@ConstructO
$LN10@ConstructO:

; 1525 : 				}
; 1526 : 			else if (format[index] == 'I')

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	cmp	edx, 73					; 00000049H
	jne	$LN8@ConstructO

; 1527 : 				{
; 1528 : 				// Indexed replacement
; 1529 : 				index++;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 1530 : 				if (data->textIds[format[index] - '0'] < 0)

	mov	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR _format$[ebp+ecx]
	mov	eax, DWORD PTR _data$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2-68]
	test	ecx, ecx
	jge	SHORT $LN7@ConstructO

; 1531 : 					{
; 1532 : 					VehicleClassDataType	*vc;
; 1533 : 					vc = GetVehicleClassData(-1 * data->textIds[format[index] - '0']);

	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR _format$[ebp+edx]
	mov	ecx, DWORD PTR _data$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2-68]
	imul	edx, -1
	push	edx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$7[ebp], eax

; 1534 : 					ShiAssert(vc != NULL);
; 1535 : 					_stprintf(argstring,vc?vc->Name : "<unk>");

	cmp	DWORD PTR _vc$7[ebp], 0
	je	SHORT $LN76@ConstructO
	mov	eax, DWORD PTR _vc$7[ebp]
	add	eax, 8
	mov	DWORD PTR tv501[ebp], eax
	jmp	SHORT $LN77@ConstructO
$LN76@ConstructO:
	mov	DWORD PTR tv501[ebp], OFFSET ??_C@_05NCAJEJLJ@?$DMunk?$DO?$AA@
$LN77@ConstructO:
	mov	ecx, DWORD PTR tv501[ebp]
	push	ecx
	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8

; 1536 : 					}
; 1537 : 				else

	jmp	SHORT $LN6@ConstructO
$LN7@ConstructO:

; 1538 : 					{
; 1539 : 					// read and add the numbered argument's string index
; 1540 : 					stridx = data->textIds[format[index] - '0'];

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	mov	edx, DWORD PTR _data$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2-68]
	mov	DWORD PTR _stridx$[ebp], eax

; 1541 : 					AddIndexedStringToBuffer(stridx, argstring);

	lea	ecx, DWORD PTR _argstring$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stridx$[ebp]
	push	edx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN6@ConstructO:

; 1542 : 					}
; 1543 : 				}
; 1544 : 			else

	jmp	SHORT $LN48@ConstructO
$LN8@ConstructO:

; 1545 : 				{
; 1546 : 				// Otherwise direct string substitution from argument list
; 1547 : 				int argnum = format[index] - '0';	// arg #

	mov	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR _format$[ebp+eax]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _argnum$8[ebp], ecx

; 1548 : 				va_start(params, data);			// Initialize variable arguments.

	lea	edx, DWORD PTR _data$[ebp+4]
	mov	DWORD PTR _params$[ebp], edx
$LN4@ConstructO:

; 1549 : 				while (argnum >= 0)

	cmp	DWORD PTR _argnum$8[ebp], 0
	jl	SHORT $LN3@ConstructO

; 1550 : 					{
; 1551 : 					sprintf(argstring,va_arg(params, _TCHAR*));

	mov	eax, DWORD PTR _params$[ebp]
	add	eax, 4
	mov	DWORD PTR _params$[ebp], eax
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	lea	eax, DWORD PTR _argstring$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 1552 : 					argnum--;

	mov	ecx, DWORD PTR _argnum$8[ebp]
	sub	ecx, 1
	mov	DWORD PTR _argnum$8[ebp], ecx

; 1553 : 					}

	jmp	SHORT $LN4@ConstructO
$LN3@ConstructO:

; 1554 : 				va_end(params);						// Reset variable arguments.

	mov	DWORD PTR _params$[ebp], 0
$LN48@ConstructO:

; 1555 : 				}
; 1556 : 			// Check for buffer overflow
; 1557 : 			ShiAssert(static_cast<short>(size + _tcslen(argstring)) < maxsize);
; 1558 : 			size += _tcslen(argstring);

	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 1559 : 			if (size > maxsize)

	movsx	eax, WORD PTR _maxsize$[ebp]
	cmp	DWORD PTR _size$[ebp], eax
	jle	SHORT $LN2@ConstructO

; 1560 : 				return;

	jmp	$LN73@ConstructO
$LN2@ConstructO:

; 1561 : 			_tcscat(string,argstring);

	lea	ecx, DWORD PTR _argstring$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 1562 : 			}
; 1563 : 		else

	jmp	SHORT $LN1@ConstructO
$LN69@ConstructO:

; 1564 : 			{
; 1565 : 			// Add the character
; 1566 : 			addchar[0] = format[index];

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _index$[ebp]
	mov	dl, BYTE PTR _format$[ebp+ecx]
	mov	BYTE PTR _addchar$[ebp+eax], dl

; 1567 : 			addchar[1] = 0;

	mov	DWORD PTR $T5[ebp], 1
	cmp	DWORD PTR $T5[ebp], 2
	jae	SHORT $LN78@ConstructO
	jmp	SHORT $LN79@ConstructO
$LN78@ConstructO:
	call	___report_rangecheckfailure
$LN79@ConstructO:
	mov	eax, DWORD PTR $T5[ebp]
	mov	BYTE PTR _addchar$[ebp+eax], 0

; 1568 : 			_tcscat(string,addchar);

	lea	ecx, DWORD PTR _addchar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$LN1@ConstructO:

; 1569 : 			}
; 1570 : 		index++;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 1571 : 		}

	jmp	$LN71@ConstructO
$LN73@ConstructO:

; 1572 : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ConstructOrderedGenderedSentence@@YAXFPADPAVEventDataClass@@ZZ ENDP ; ConstructOrderedGenderedSentence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_entity$ = 8						; size = 4
_div$ = 12						; size = 4
?GetGender@@YAHPAVCampBaseClass@@H@Z PROC		; GetGender

; 1268 : 	{

	push	ebp
	mov	ebp, esp

; 1269 : 	// Gender is hardcoded for now- no data exists
; 1270 : 	if (!entity || gLangIDNum < F4LANG_GERMAN)

	cmp	DWORD PTR _entity$[ebp], 0
	je	SHORT $LN38@GetGender
	cmp	DWORD PTR ?gLangIDNum@@3HA, 3		; gLangIDNum
	jge	SHORT $LN39@GetGender
$LN38@GetGender:

; 1271 : 		return F4LANG_MASCULINE;

	xor	eax, eax
	jmp	$LN40@GetGender
$LN39@GetGender:

; 1272 : 	if (div && (!entity->IsUnit() || !((Unit)entity)->GetUnitDivision()))

	cmp	DWORD PTR _div$[ebp], 0
	je	SHORT $LN37@GetGender
	mov	eax, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN36@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+904]
	call	eax
	test	eax, eax
	jne	SHORT $LN37@GetGender
$LN36@GetGender:

; 1273 : 		div = 0;

	mov	DWORD PTR _div$[ebp], 0
$LN37@GetGender:

; 1274 : 	if (gLangIDNum == F4LANG_GERMAN)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 3		; gLangIDNum
	jne	SHORT $LN35@GetGender

; 1275 : 		{
; 1276 : 		if (div)

	cmp	DWORD PTR _div$[ebp], 0
	je	SHORT $LN34@GetGender

; 1277 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	$LN40@GetGender
	jmp	SHORT $LN33@GetGender
$LN34@GetGender:

; 1278 : 		else if (entity->IsBattalion())

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	je	SHORT $LN32@GetGender

; 1279 : 			return F4LANG_NEUTER;

	mov	eax, 2
	jmp	$LN40@GetGender
	jmp	SHORT $LN33@GetGender
$LN32@GetGender:

; 1280 : 		else if (entity->IsFlight())

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN30@GetGender

; 1281 : 			return F4LANG_MASCULINE;

	xor	eax, eax
	jmp	$LN40@GetGender

; 1282 : 		else

	jmp	SHORT $LN33@GetGender
$LN30@GetGender:

; 1283 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	$LN40@GetGender
$LN33@GetGender:
	jmp	$LN28@GetGender
$LN35@GetGender:

; 1284 : 		}
; 1285 : 	else if (gLangIDNum == F4LANG_FRENCH)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 4		; gLangIDNum
	jne	SHORT $LN27@GetGender

; 1286 : 		{
; 1287 : 		if (div)

	cmp	DWORD PTR _div$[ebp], 0
	je	SHORT $LN26@GetGender

; 1288 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	$LN40@GetGender
	jmp	SHORT $LN25@GetGender
$LN26@GetGender:

; 1289 : 		else if (entity->IsBattalion() || entity->IsSquadron() || entity->IsTaskForce())

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	jne	SHORT $LN23@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	test	eax, eax
	jne	SHORT $LN23@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+264]
	call	eax
	test	eax, eax
	je	SHORT $LN24@GetGender
$LN23@GetGender:

; 1290 : 			return F4LANG_MASCULINE;

	xor	eax, eax
	jmp	$LN40@GetGender

; 1291 : 		else

	jmp	SHORT $LN25@GetGender
$LN24@GetGender:

; 1292 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	$LN40@GetGender
$LN25@GetGender:
	jmp	$LN28@GetGender
$LN27@GetGender:

; 1293 : 		}
; 1294 : 	else if (gLangIDNum == F4LANG_ITALIAN)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 6		; gLangIDNum
	jne	SHORT $LN20@GetGender

; 1295 : 		{
; 1296 : 		if (div)

	cmp	DWORD PTR _div$[ebp], 0
	je	SHORT $LN19@GetGender

; 1297 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	$LN40@GetGender
	jmp	SHORT $LN18@GetGender
$LN19@GetGender:

; 1298 : 		else if (entity->IsBattalion() || entity->IsPackage())

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	jne	SHORT $LN16@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	test	eax, eax
	je	SHORT $LN17@GetGender
$LN16@GetGender:

; 1299 : 			return F4LANG_MASCULINE;

	xor	eax, eax
	jmp	$LN40@GetGender

; 1300 : 		else

	jmp	SHORT $LN18@GetGender
$LN17@GetGender:

; 1301 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	$LN40@GetGender
$LN18@GetGender:
	jmp	$LN28@GetGender
$LN20@GetGender:

; 1302 : 		}
; 1303 : 	else if (gLangIDNum == F4LANG_SPANISH)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 5		; gLangIDNum
	jne	SHORT $LN13@GetGender

; 1304 : 		{
; 1305 : 		if (div)

	cmp	DWORD PTR _div$[ebp], 0
	je	SHORT $LN12@GetGender

; 1306 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	$LN40@GetGender
	jmp	SHORT $LN11@GetGender
$LN12@GetGender:

; 1307 : 		else if (entity->IsBattalion() || entity->IsFlight() || entity->IsSquadron())

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	jne	SHORT $LN9@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN9@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	test	eax, eax
	je	SHORT $LN10@GetGender
$LN9@GetGender:

; 1308 : 			return F4LANG_MASCULINE;

	xor	eax, eax
	jmp	SHORT $LN40@GetGender

; 1309 : 		else

	jmp	SHORT $LN11@GetGender
$LN10@GetGender:

; 1310 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	SHORT $LN40@GetGender
$LN11@GetGender:
	jmp	SHORT $LN28@GetGender
$LN13@GetGender:

; 1311 : 		}
; 1312 : 	else if (gLangIDNum == F4LANG_PORTUGESE)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 7		; gLangIDNum
	jne	SHORT $LN28@GetGender

; 1313 : 		{
; 1314 : 		if (div)

	cmp	DWORD PTR _div$[ebp], 0
	je	SHORT $LN5@GetGender

; 1315 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	SHORT $LN40@GetGender
	jmp	SHORT $LN28@GetGender
$LN5@GetGender:

; 1316 : 		else if (entity->IsBattalion() || entity->IsPackage() || entity->IsSquadron())

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@GetGender
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	test	eax, eax
	je	SHORT $LN3@GetGender
$LN2@GetGender:

; 1317 : 			return F4LANG_MASCULINE;

	xor	eax, eax
	jmp	SHORT $LN40@GetGender

; 1318 : 		else

	jmp	SHORT $LN28@GetGender
$LN3@GetGender:

; 1319 : 			return F4LANG_FEMININE;

	mov	eax, 1
	jmp	SHORT $LN40@GetGender
$LN28@GetGender:

; 1320 : 		}	
; 1321 : 	return F4LANG_MASCULINE;

	xor	eax, eax
$LN40@GetGender:

; 1322 : 	}

	pop	ebp
	ret	0
?GetGender@@YAHPAVCampBaseClass@@H@Z ENDP		; GetGender
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_dst$ = -8						; size = 4
_src$ = -4						; size = 4
_ptr$ = 8						; size = 4
_name$ = 12						; size = 4
_len$ = 16						; size = 4
?ReadMemToken@@YAPADPAPADQADH@Z PROC			; ReadMemToken

; 1196 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1197 : 	char
; 1198 : 		*src,
; 1199 : 		*dst;
; 1200 : 
; 1201 : 	src = *ptr;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$[ebp], ecx

; 1202 : 	dst = name;

	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR _dst$[ebp], edx
$LN7@ReadMemTok:

; 1203 : 
; 1204 : 	while ((*src == '\n') || (*src == '\r'))

	mov	eax, DWORD PTR _src$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN5@ReadMemTok
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN4@ReadMemTok
$LN5@ReadMemTok:

; 1205 : 	{
; 1206 : 		*src ++;

	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx

; 1207 : 	}

	jmp	SHORT $LN7@ReadMemTok
$LN4@ReadMemTok:

; 1208 : 
; 1209 : 	while ((len) && (*src))

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN3@ReadMemTok
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN3@ReadMemTok

; 1210 : 	{
; 1211 : 		if ((*src == '\n') || (*src == '\r'))

	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN1@ReadMemTok
	mov	eax, DWORD PTR _src$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN2@ReadMemTok
$LN1@ReadMemTok:

; 1212 : 		{
; 1213 : 			break;

	jmp	SHORT $LN3@ReadMemTok
$LN2@ReadMemTok:

; 1214 : 		}
; 1215 : 
; 1216 : 		*dst ++ = *src ++;

	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 1
	mov	DWORD PTR _dst$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax

; 1217 : 
; 1218 : 		len --;

	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx

; 1219 : 	}

	jmp	SHORT $LN4@ReadMemTok
$LN3@ReadMemTok:

; 1220 : 
; 1221 : 	*dst = 0;

	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx], 0

; 1222 : 
; 1223 : 	return name;

	mov	eax, DWORD PTR _name$[ebp]

; 1224 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReadMemToken@@YAPADPAPADQADH@Z ENDP			; ReadMemToken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_sptr$ = -264						; size = 4
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_fp$ = 8						; size = 4
_name$ = 12						; size = 4
_len$ = 16						; size = 4
?ReadToken@@YAPADPAU_iobuf@@QADH@Z PROC			; ReadToken

; 1181 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1182 : 	char buffer[256];
; 1183 : 	char *sptr;
; 1184 : 
; 1185 : 	fgets(buffer,256,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1186 : 	strncpy(name,buffer,len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 1187 : 	if (name[len-1])

	mov	edx, DWORD PTR _name$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	movsx	eax, BYTE PTR [edx-1]
	test	eax, eax
	je	SHORT $LN2@ReadToken

; 1188 : 		name[len-1] = 0;

	mov	ecx, DWORD PTR _name$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx-1], 0
$LN2@ReadToken:

; 1189 : 	sptr = strchr(name,'\n');

	push	10					; 0000000aH
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1190 : 	if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN1@ReadToken

; 1191 : 		*sptr = '\0';

	mov	eax, DWORD PTR _sptr$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@ReadToken:

; 1192 : 	return name;

	mov	eax, DWORD PTR _name$[ebp]

; 1193 : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadToken@@YAPADPAU_iobuf@@QADH@Z ENDP			; ReadToken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_c$ = -4						; size = 4
_fh$ = 8						; size = 4
?ReadComments@@YAXPAU_iobuf@@@Z PROC			; ReadComments

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 	int					c;
; 1165 : 
; 1166 : 	c = fgetc(fh);

	mov	eax, DWORD PTR _fh$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
$LN8@ReadCommen:

; 1167 : 	while (c == '\n')

	cmp	DWORD PTR _c$[ebp], 10			; 0000000aH
	jne	SHORT $LN6@ReadCommen

; 1168 : 		c = fgetc(fh);

	mov	ecx, DWORD PTR _fh$[ebp]
	push	ecx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN8@ReadCommen
$LN6@ReadCommen:

; 1169 : 	while (c == '/' && !feof(fh))

	cmp	DWORD PTR _c$[ebp], 47			; 0000002fH
	jne	SHORT $LN5@ReadCommen
	mov	edx, DWORD PTR _fh$[ebp]
	push	edx
	call	_feof
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@ReadCommen

; 1170 : 		{
; 1171 : 		c = fgetc(fh);

	mov	eax, DWORD PTR _fh$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
$LN4@ReadCommen:

; 1172 : 		while (c != '\n' && !feof(fh))

	cmp	DWORD PTR _c$[ebp], 10			; 0000000aH
	je	SHORT $LN2@ReadCommen
	mov	ecx, DWORD PTR _fh$[ebp]
	push	ecx
	call	_feof
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@ReadCommen

; 1173 : 			c = fgetc(fh);

	mov	edx, DWORD PTR _fh$[ebp]
	push	edx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN4@ReadCommen
$LN2@ReadCommen:

; 1174 : 		while (c == '\n')

	cmp	DWORD PTR _c$[ebp], 10			; 0000000aH
	jne	SHORT $LN1@ReadCommen

; 1175 : 			c = fgetc(fh);

	mov	eax, DWORD PTR _fh$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN2@ReadCommen
$LN1@ReadCommen:

; 1176 : 		}

	jmp	SHORT $LN6@ReadCommen
$LN5@ReadCommen:

; 1177 : 	ungetc(c,fh);

	mov	ecx, DWORD PTR _fh$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_ungetc
	add	esp, 8

; 1178 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ReadComments@@YAXPAU_iobuf@@@Z ENDP			; ReadComments
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_t$1 = -12						; size = 4
_o$2 = -8						; size = 4
_w$3 = -4						; size = 4
_e$ = 8							; size = 4
_name$ = 12						; size = 4
?GetEntityDestination@@YAXPAVCampBaseClass@@PAD@Z PROC	; GetEntityDestination

; 1129 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1130 : 	if (!e)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN13@GetEntityD

; 1131 : 		ReadIndexedString(38, name, 80);

	push	80					; 00000050H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	38					; 00000026H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
	jmp	$LN14@GetEntityD
$LN13@GetEntityD:

; 1132 : 	else if (e->IsUnit())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	$LN11@GetEntityD

; 1133 : 		{
; 1134 : 		if (e->GetDomain() == DOMAIN_LAND)

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN10@GetEntityD

; 1135 : 			{
; 1136 : 			Objective o = ((Unit)e)->GetUnitSecondaryObj();

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+860]
	call	edx
	mov	DWORD PTR _o$2[ebp], eax

; 1137 : 			if (o)

	cmp	DWORD PTR _o$2[ebp], 0
	je	SHORT $LN9@GetEntityD

; 1138 : 				o->GetName(name, 80, FALSE);

	push	0
	push	80					; 00000050H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$2[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 1139 : 			else

	jmp	SHORT $LN8@GetEntityD
$LN9@GetEntityD:

; 1140 : 				ReadIndexedString(253, name, 80);	

	push	80					; 00000050H
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	253					; 000000fdH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN8@GetEntityD:
	jmp	SHORT $LN7@GetEntityD
$LN10@GetEntityD:

; 1141 : 			}
; 1142 : 		else if (e->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN7@GetEntityD

; 1143 : 			{
; 1144 : 			// Find out where this flight is going (find the target)
; 1145 : 			WayPoint	w = ((Unit)e)->GetFirstUnitWP();

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$3[ebp], eax
$LN5@GetEntityD:

; 1146 : 			CampEntity	t;
; 1147 : 			while (w && !(w->GetWPFlags() & WPF_TARGET))

	cmp	DWORD PTR _w$3[ebp], 0
	je	SHORT $LN4@GetEntityD
	mov	ecx, DWORD PTR _w$3[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	jne	SHORT $LN4@GetEntityD

; 1148 : 				w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$3[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$3[ebp], eax
	jmp	SHORT $LN5@GetEntityD
$LN4@GetEntityD:

; 1149 : 			if (w)

	cmp	DWORD PTR _w$3[ebp], 0
	je	SHORT $LN3@GetEntityD

; 1150 : 				{
; 1151 : 				t = w->GetWPTarget();

	mov	ecx, DWORD PTR _w$3[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _t$1[ebp], eax

; 1152 : 				GetEntityName(t, name, ' ', ' ');

	push	32					; 00000020H
	push	32					; 00000020H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$1[ebp]
	push	ecx
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H

; 1153 : 				}
; 1154 : 			else

	jmp	SHORT $LN7@GetEntityD
$LN3@GetEntityD:

; 1155 : 				ReadIndexedString(253, name, 80);	

	push	80					; 00000050H
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	253					; 000000fdH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN7@GetEntityD:

; 1156 : 			}
; 1157 : 		}
; 1158 : 	else

	jmp	SHORT $LN14@GetEntityD
$LN11@GetEntityD:

; 1159 : 		GetEntityName(e, name, ' ', ' ');

	push	32					; 00000020H
	push	32					; 00000020H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H
$LN14@GetEntityD:

; 1160 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEntityDestination@@YAXPAVCampBaseClass@@PAD@Z ENDP	; GetEntityDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
tv95 = -12						; size = 4
_parent_unit$1 = -8					; size = 4
_object$ = -4						; size = 4
_e$ = 8							; size = 4
_name$ = 12						; size = 4
_name_type$ = 16					; size = 1
_objchar$ = 20						; size = 1
?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z PROC	; GetEntityName

; 1092 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1093 : 	int		object = FALSE;

	mov	DWORD PTR _object$[ebp], 0

; 1094 : 
; 1095 : 	if (objchar == 'O')

	movsx	eax, BYTE PTR _objchar$[ebp]
	cmp	eax, 79					; 0000004fH
	jne	SHORT $LN14@GetEntityN

; 1096 : 		object = TRUE;

	mov	DWORD PTR _object$[ebp], 1
$LN14@GetEntityN:

; 1097 : 	if (!e)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN13@GetEntityN

; 1098 : 		ReadIndexedString(168, name, 80);

	push	80					; 00000050H
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	168					; 000000a8H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
	jmp	$LN15@GetEntityN
$LN13@GetEntityN:

; 1099 : 	else if (e->IsObjective())

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN11@GetEntityN

; 1100 : 		e->GetName(name,80,object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	push	80					; 00000050H
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+380]
	call	edx
	jmp	$LN15@GetEntityN
$LN11@GetEntityN:

; 1101 : 	else if (e->IsUnit())

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	$LN15@GetEntityN

; 1102 : 		{
; 1103 : 		Unit		parent_unit = NULL;				

	mov	DWORD PTR _parent_unit$1[ebp], 0

; 1104 : 		switch (name_type)

	mov	cl, BYTE PTR _name_type$[ebp]
	mov	BYTE PTR tv95[ebp], cl
	cmp	BYTE PTR tv95[ebp], 68			; 00000044H
	je	SHORT $LN6@GetEntityN
	cmp	BYTE PTR tv95[ebp], 70			; 00000046H
	je	SHORT $LN2@GetEntityN
	cmp	BYTE PTR tv95[ebp], 80			; 00000050H
	je	SHORT $LN5@GetEntityN
	jmp	$LN1@GetEntityN
$LN6@GetEntityN:

; 1105 : 			{
; 1106 : 			case 'D':
; 1107 : 				((Unit)e)->GetDivisionName(name,80,object);

	mov	edx, DWORD PTR _object$[ebp]
	push	edx
	push	80					; 00000050H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax

; 1108 : 				break;

	jmp	$LN15@GetEntityN
$LN5@GetEntityN:

; 1109 : 			case 'P':
; 1110 : 				// KCK: This is dangerous to do. Look into fixing this so we don't need to do it.
; 1111 : 				parent_unit = ((Unit)e)->GetUnitParent();

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+944]
	call	eax
	mov	DWORD PTR _parent_unit$1[ebp], eax

; 1112 : 				if (parent_unit)

	cmp	DWORD PTR _parent_unit$1[ebp], 0
	je	SHORT $LN4@GetEntityN

; 1113 : 					((Unit)parent_unit)->GetName(name,80,object);

	mov	ecx, DWORD PTR _object$[ebp]
	push	ecx
	push	80					; 00000050H
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent_unit$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent_unit$1[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 1114 : 				else

	jmp	SHORT $LN3@GetEntityN
$LN4@GetEntityN:

; 1115 : 					((Unit)e)->GetName(name,80,object);

	mov	ecx, DWORD PTR _object$[ebp]
	push	ecx
	push	80					; 00000050H
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax
$LN3@GetEntityN:

; 1116 : 				break;

	jmp	SHORT $LN15@GetEntityN
$LN2@GetEntityN:

; 1117 : 			case 'F':
; 1118 : 				((Unit)e)->GetFullName(name,80,object);

	mov	ecx, DWORD PTR _object$[ebp]
	push	ecx
	push	80					; 00000050H
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+384]
	call	eax

; 1119 : 				break;

	jmp	SHORT $LN15@GetEntityN
$LN1@GetEntityN:

; 1120 : 			case 'U':
; 1121 : 			default:
; 1122 : 				((Unit)e)->GetName(name,80,object);

	mov	ecx, DWORD PTR _object$[ebp]
	push	ecx
	push	80					; 00000050H
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax
$LN15@GetEntityN:

; 1123 : 				break;
; 1124 : 			}
; 1125 : 		}
; 1126 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ENDP	; GetEntityName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_oldfont$1 = -12					; size = 4
_oldheight$2 = -8					; size = 4
_height$3 = -4						; size = 4
_buffer$ = 8						; size = 4
_font$ = 12						; size = 4
_window$ = 16						; size = 4
_output$ = 20						; size = 4
?AddFontTextToBrief@@YAXPADHPAVC_Window@@0@Z PROC	; AddFontTextToBrief

; 906  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 907  : 	if (window)

	cmp	DWORD PTR _window$[ebp], 0
	je	$LN7@AddFontTex

; 908  : 		{
; 909  : 		int		height,oldheight,oldfont;
; 910  : 		oldfont = window->Font_;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _oldfont$1[ebp], ecx

; 911  : 		oldheight = gFontList->GetHeight(oldfont);

	mov	edx, DWORD PTR _oldfont$1[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	mov	DWORD PTR _oldheight$2[ebp], eax

; 912  : 		height = gFontList->GetHeight(font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	mov	DWORD PTR _height$3[ebp], eax

; 913  : 		// KCK HACK: Some fonts just don't get very good heights
; 914  : 		if (font == 14)

	cmp	DWORD PTR _font$[ebp], 14		; 0000000eH
	jne	SHORT $LN6@AddFontTex

; 915  : 			{
; 916  : 			if (gLangIDNum == F4LANG_GERMAN)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 3		; gLangIDNum
	jne	SHORT $LN5@AddFontTex
	jmp	SHORT $LN6@AddFontTex
$LN5@AddFontTex:

; 917  : 				;
; 918  : 			else if (gLangIDNum >= F4LANG_SPANISH)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 5		; gLangIDNum
	jl	SHORT $LN3@AddFontTex

; 919  : 				height--;

	mov	ecx, DWORD PTR _height$3[ebp]
	sub	ecx, 1
	mov	DWORD PTR _height$3[ebp], ecx

; 920  : 			else

	jmp	SHORT $LN6@AddFontTex
$LN3@AddFontTex:

; 921  : 				height = 19;

	mov	DWORD PTR _height$3[ebp], 19		; 00000013H
$LN6@AddFontTex:

; 922  : 			}
; 923  : 		CBY += oldheight - height;

	mov	edx, DWORD PTR _oldheight$2[ebp]
	sub	edx, DWORD PTR _height$3[ebp]
	movsx	eax, WORD PTR _CBY
	add	eax, edx
	mov	WORD PTR _CBY, ax

; 924  : 		window->Font_ = font;

	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+108], edx

; 925  : 		AddStringToBrief(buffer, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 926  : 		CBY -= oldheight - height;

	mov	eax, DWORD PTR _oldheight$2[ebp]
	sub	eax, DWORD PTR _height$3[ebp]
	movsx	ecx, WORD PTR _CBY
	sub	ecx, eax
	mov	WORD PTR _CBY, cx

; 927  : 		window->Font_ = oldfont;

	mov	edx, DWORD PTR _window$[ebp]
	mov	eax, DWORD PTR _oldfont$1[ebp]
	mov	DWORD PTR [edx+108], eax

; 928  : 		}
; 929  : 	else

	jmp	SHORT $LN8@AddFontTex
$LN7@AddFontTex:

; 930  : 		AddStringToBrief(buffer, window, output);

	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	mov	edx, DWORD PTR _window$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH
$LN8@AddFontTex:

; 931  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?AddFontTextToBrief@@YAXPADHPAVC_Window@@0@Z ENDP	; AddFontTextToBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_width$ = -4						; size = 4
_string$ = 8						; size = 4
_field_width$ = 12					; size = 4
_buffer$ = 16						; size = 4
_window$ = 20						; size = 4
_output$ = 24						; size = 4
?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z PROC ; AddRightJustifiedStringToBrief

; 890  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 891  : 	int			width,x,y;
; 892  : 	if (window)

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN3@AddRightJu

; 893  : 		width = gFontList->StrWidth(window->Font_,string);

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPAD@Z		; C_Font::StrWidth
	mov	DWORD PTR _width$[ebp], eax
	jmp	SHORT $LN2@AddRightJu
$LN3@AddRightJu:

; 894  : #if 0 // to improve the looks
; 895  : 	else if (gFontList)
; 896  : 		width = gFontList->StrWidth(BDefaultFont,string);
; 897  : #endif
; 898  : 	else width = strlen(string);

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _width$[ebp], eax
$LN2@AddRightJu:

; 899  : 	GetCurrentBriefXY (&x, &y, buffer, window, output);

	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	mov	edx, DWORD PTR _window$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	call	?GetCurrentBriefXY@@YAXPAH0PADPAVC_Window@@1@Z ; GetCurrentBriefXY
	add	esp, 20					; 00000014H

; 900  : 	if (width < field_width)

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _field_width$[ebp]
	jge	SHORT $LN1@AddRightJu

; 901  : 	    AddTabToBrief(x+field_width-width, "", window, output);

	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	mov	edx, DWORD PTR _window$[ebp]
	push	edx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _field_width$[ebp]
	sub	eax, DWORD PTR _width$[ebp]
	push	eax
	call	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToBrief
	add	esp, 16					; 00000010H
$LN1@AddRightJu:

; 902  : 	AddStringToBrief(string, window, output);

	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	mov	edx, DWORD PTR _window$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 903  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z ENDP ; AddRightJustifiedStringToBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_wp$ = 8						; size = 4
_cline$ = 12						; size = 4
?GetWpDescription@@YAXPAVWayPointClass@@PAD@Z PROC	; GetWpDescription

; 750  : {

	push	ebp
	mov	ebp, esp

; 751  :     if (wp->GetWPFlags() & WPF_ALTERNATE)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1024				; 00000400H
	je	SHORT $LN6@GetWpDescr

; 752  : 	AddIndexedStringToBuffer(237, cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	push	237					; 000000edH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	SHORT $LN7@GetWpDescr
$LN6@GetWpDescr:

; 753  :     else if (wp->GetWPFlags() & WPF_REPEAT)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	je	SHORT $LN4@GetWpDescr

; 754  : 	AddIndexedStringToBuffer(247, cline);

	mov	ecx, DWORD PTR _cline$[ebp]
	push	ecx
	push	247					; 000000f7H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	SHORT $LN7@GetWpDescr
$LN4@GetWpDescr:

; 755  :     else if (wp->GetWPAction() == WP_NOTHING)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	test	eax, eax
	jne	SHORT $LN2@GetWpDescr

; 756  : 	AddIndexedStringToBuffer(1650+wp->GetWPRouteAction(), cline);

	mov	edx, DWORD PTR _cline$[ebp]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	add	eax, 1650				; 00000672H
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 757  :     else

	jmp	SHORT $LN7@GetWpDescr
$LN2@GetWpDescr:

; 758  : 	AddIndexedStringToBuffer(1650+wp->GetWPAction(), cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	add	eax, 1650				; 00000672H
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN7@GetWpDescr:

; 759  : }

	pop	ebp
	ret	0
?GetWpDescription@@YAXPAVWayPointClass@@PAD@Z ENDP	; GetWpDescription
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_heading$1 = -24					; size = 4
_ih$2 = -20						; size = 4
_lx$3 = -16						; size = 2
_ly$4 = -12						; size = 2
_cx$5 = -8						; size = 2
_cy$6 = -4						; size = 2
_wp$ = 8						; size = 4
_lwp$ = 12						; size = 4
_cline$ = 16						; size = 4
?GetWpHeading@@YAXPAVWayPointClass@@0PAD@Z PROC		; GetWpHeading

; 762  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 763  :     if (wp && lwp && wp->GetWPAction() != WP_REFUEL && !(wp->GetWPFlags() & WPF_ALTERNATE))

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN3@GetWpHeadi
	cmp	DWORD PTR _lwp$[ebp], 0
	je	$LN3@GetWpHeadi
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	je	$LN3@GetWpHeadi
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1024				; 00000400H
	jne	$LN3@GetWpHeadi

; 764  :     {
; 765  : 	GridIndex	cx,cy,lx,ly;
; 766  : 	float		heading;
; 767  : 	int		ih;
; 768  : 	lwp->GetWPLocation(&lx,&ly);

	lea	eax, DWORD PTR _ly$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _lx$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lwp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 769  : 	wp->GetWPLocation(&cx,&cy);

	lea	edx, DWORD PTR _cy$6[ebp]
	push	edx
	lea	eax, DWORD PTR _cx$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 770  : 	heading = AngleTo(lx,ly,cx,cy);

	movzx	ecx, WORD PTR _cy$6[ebp]
	push	ecx
	movzx	edx, WORD PTR _cx$5[ebp]
	push	edx
	movzx	eax, WORD PTR _ly$4[ebp]
	push	eax
	movzx	ecx, WORD PTR _lx$3[ebp]
	push	ecx
	call	?AngleTo@@YAMFFFF@Z			; AngleTo
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _heading$1[ebp]

; 771  : 	ih = FloatToInt32((heading * RADIANS_TO_DEG)+0.5F);

	movss	xmm0, DWORD PTR _heading$1[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _ih$2[ebp], eax

; 772  : 	if (ih < 0)

	cmp	DWORD PTR _ih$2[ebp], 0
	jge	SHORT $LN2@GetWpHeadi

; 773  : 	    ih += 360;

	mov	edx, DWORD PTR _ih$2[ebp]
	add	edx, 360				; 00000168H
	mov	DWORD PTR _ih$2[ebp], edx
$LN2@GetWpHeadi:

; 774  : 	AddNumberToBuffer(ih, cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ih$2[ebp]
	push	ecx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 775  :     }
; 776  :     else

	jmp	SHORT $LN1@GetWpHeadi
$LN3@GetWpHeadi:

; 777  : 	AddIndexedStringToBuffer(1650, cline);

	mov	edx, DWORD PTR _cline$[ebp]
	push	edx
	push	1650					; 00000672H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN1@GetWpHeadi:

; 778  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWpHeading@@YAXPAVWayPointClass@@0PAD@Z ENDP		; GetWpHeading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_alt$ = -4						; size = 4
_wp$ = 8						; size = 4
_lwp$ = 12						; size = 4
_cline$ = 16						; size = 4
?GetWpAlt@@YAHPAVWayPointClass@@0PAD@Z PROC		; GetWpAlt

; 737  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 738  :     
; 739  :     int	alt = wp->GetWPAltitude();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	DWORD PTR _alt$[ebp], eax

; 740  :     if (lwp && wp->GetWPFlags() & WPF_HOLDCURRENT)

	cmp	DWORD PTR _lwp$[ebp], 0
	je	SHORT $LN3@GetWpAlt
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN3@GetWpAlt

; 741  : 	alt = lwp->GetWPAltitude();

	mov	ecx, DWORD PTR _lwp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	DWORD PTR _alt$[ebp], eax
$LN3@GetWpAlt:

; 742  :     if (alt > 0)

	cmp	DWORD PTR _alt$[ebp], 0
	jle	SHORT $LN2@GetWpAlt

; 743  : 	AddNumberToBuffer ((float)(alt)/1000.0F, 1, cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	push	1
	cvtsi2ss xmm0, DWORD PTR _alt$[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?AddNumberToBuffer@@YAXMHPAD@Z		; AddNumberToBuffer
	add	esp, 12					; 0000000cH

; 744  :     else

	jmp	SHORT $LN1@GetWpAlt
$LN2@GetWpAlt:

; 745  : 	AddIndexedStringToBuffer(1650, cline);

	mov	ecx, DWORD PTR _cline$[ebp]
	push	ecx
	push	1650					; 00000672H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN1@GetWpAlt:

; 746  :     return alt;

	mov	eax, DWORD PTR _alt$[ebp]

; 747  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWpAlt@@YAHPAVWayPointClass@@0PAD@Z ENDP		; GetWpAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_ispeed$1 = -16						; size = 4
tv151 = -12						; size = 4
tv143 = -8						; size = 4
_speed$2 = -4						; size = 4
_wp$ = 8						; size = 4
_lwp$ = 12						; size = 4
_cline$ = 16						; size = 4
?GetWptSpeed@@YAXPAVWayPointClass@@0PAD@Z PROC		; GetWptSpeed

; 706  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 707  :     if (wp && lwp && wp->GetWPAction() != WP_REFUEL && !(wp->GetWPFlags() & WPF_ALTERNATE))

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN4@GetWptSpee
	cmp	DWORD PTR _lwp$[ebp], 0
	je	$LN4@GetWptSpee
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	je	$LN4@GetWptSpee
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1024				; 00000400H
	jne	$LN4@GetWptSpee

; 708  :     {
; 709  :     /*
; 710  :     GridIndex		cx,cy,lx,ly;
; 711  :     float			speed,dist,time;
; 712  :     int				ispeed;
; 713  :     LWayPoint->GetWPLocation(&lx,&ly);
; 714  :     wp->GetWPLocation(&cx,&cy);
; 715  :     // Time (in hours)
; 716  :     time = (float)(wp->GetWPArrivalTime() - lwp->GetWPDepartureTime())/CampaignHours;
; 717  :     // Distance (in km)
; 718  :     dist = Distance(lx,ly,cx,cy);
; 719  :     // Speed (in knots)
; 720  :     speed = (dist/time)*KPH_TO_FPS*FTPSEC_TO_KNOTS;
; 721  : 	*/
; 722  : 	float	speed;
; 723  : 	int		ispeed;
; 724  : 	
; 725  : 	if (wp->GetWPFlags() & WPF_HOLDCURRENT)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN3@GetWptSpee

; 726  : 	    speed = get_air_speed(wp->GetWPSpeed()*KM_TO_NM, lwp->GetWPAltitude());

	mov	ecx, DWORD PTR _lwp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv143[ebp]
	movss	xmm0, DWORD PTR tv143[ebp]
	mulss	xmm0, DWORD PTR __real@3f0a35e2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 8
	fstp	DWORD PTR _speed$2[ebp]

; 727  : 	else

	jmp	SHORT $LN2@GetWptSpee
$LN3@GetWptSpee:

; 728  : 	    speed = get_air_speed(wp->GetWPSpeed()*KM_TO_NM, wp->GetWPAltitude());

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv151[ebp]
	movss	xmm0, DWORD PTR tv151[ebp]
	mulss	xmm0, DWORD PTR __real@3f0a35e2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 8
	fstp	DWORD PTR _speed$2[ebp]
$LN2@GetWptSpee:

; 729  : 	ispeed = FloatToInt32((speed + 2.5F) / 5.0F) * 5;

	movss	xmm0, DWORD PTR _speed$2[ebp]
	addss	xmm0, DWORD PTR __real@40200000
	divss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, 5
	mov	DWORD PTR _ispeed$1[ebp], eax

; 730  : 	AddNumberToBuffer(ispeed, cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ispeed$1[ebp]
	push	ecx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 731  :     }
; 732  :     else

	jmp	SHORT $LN1@GetWptSpee
$LN4@GetWptSpee:

; 733  : 	AddIndexedStringToBuffer(1650, cline);

	mov	edx, DWORD PTR _cline$[ebp]
	push	edx
	push	1650					; 00000672H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN1@GetWptSpee:

; 734  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWptSpeed@@YAXPAVWayPointClass@@0PAD@Z ENDP		; GetWptSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
tv139 = -20						; size = 4
_lx$1 = -16						; size = 2
_ly$2 = -12						; size = 2
_cx$3 = -8						; size = 2
_cy$4 = -4						; size = 2
_wp$ = 8						; size = 4
_lwp$ = 12						; size = 4
_cline$ = 16						; size = 4
?GetWptDist@@YAXPAVWayPointClass@@0PAD@Z PROC		; GetWptDist

; 693  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 694  :     if (wp && lwp && wp->GetWPAction() != WP_REFUEL && !(wp->GetWPFlags() & WPF_ALTERNATE))

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN2@GetWptDist
	cmp	DWORD PTR _lwp$[ebp], 0
	je	SHORT $LN2@GetWptDist
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	je	SHORT $LN2@GetWptDist
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1024				; 00000400H
	jne	SHORT $LN2@GetWptDist

; 695  :     {
; 696  : 	GridIndex	lx,ly,cx,cy;
; 697  : 	lwp->GetWPLocation(&lx,&ly);

	lea	eax, DWORD PTR _ly$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _lx$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lwp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 698  : 	wp->GetWPLocation(&cx,&cy);

	lea	edx, DWORD PTR _cy$4[ebp]
	push	edx
	lea	eax, DWORD PTR _cx$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 699  : 	AddNumberToBuffer (Distance(lx,ly,cx,cy)*KM_TO_NM, 1, cline);

	mov	ecx, DWORD PTR _cline$[ebp]
	push	ecx
	push	1
	movzx	edx, WORD PTR _cy$4[ebp]
	push	edx
	movzx	eax, WORD PTR _cx$3[ebp]
	push	eax
	movzx	ecx, WORD PTR _ly$2[ebp]
	push	ecx
	movzx	edx, WORD PTR _lx$1[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv139[ebp]
	movss	xmm0, DWORD PTR tv139[ebp]
	mulss	xmm0, DWORD PTR __real@3f0a35e2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?AddNumberToBuffer@@YAXMHPAD@Z		; AddNumberToBuffer
	add	esp, 12					; 0000000cH

; 700  :     }
; 701  :     else

	jmp	SHORT $LN1@GetWptDist
$LN2@GetWptDist:

; 702  : 	AddIndexedStringToBuffer(1650, cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	push	1650					; 00000672H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN1@GetWptDist:

; 703  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWptDist@@YAXPAVWayPointClass@@0PAD@Z ENDP		; GetWptDist
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_wp$ = 8						; size = 4
_cline$ = 12						; size = 4
?GetWpTimeToBuffer@@YAXPAVWayPointClass@@PAD@Z PROC	; GetWpTimeToBuffer

; 685  : {

	push	ebp
	mov	ebp, esp

; 686  :     if (wp->GetWPFlags() & WPF_ALTERNATE || wp->GetWPAction() == WP_REFUEL)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1024				; 00000400H
	jne	SHORT $LN2@GetWpTimeT
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	jne	SHORT $LN3@GetWpTimeT
$LN2@GetWpTimeT:

; 687  : 	AddIndexedStringToBuffer(1650, cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	push	1650					; 00000672H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 688  :     else

	jmp	SHORT $LN4@GetWpTimeT
$LN3@GetWpTimeT:

; 689  : 	AddTimeToBuffer(wp->GetWPArrivalTime(), cline);

	push	1
	mov	ecx, DWORD PTR _cline$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	push	eax
	call	?AddTimeToBuffer@@YAXKPADH@Z		; AddTimeToBuffer
	add	esp, 12					; 0000000cH
$LN4@GetWpTimeT:

; 690  : }

	pop	ebp
	ret	0
?GetWpTimeToBuffer@@YAXPAVWayPointClass@@PAD@Z ENDP	; GetWpTimeToBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_wp$ = 8						; size = 4
_cline$ = 12						; size = 4
?GetWpActionToBuffer@@YAXPAVWayPointClass@@PAD@Z PROC	; GetWpActionToBuffer

; 653  : {

	push	ebp
	mov	ebp, esp

; 654  :     if (wp->GetWPAction() == WP_NOTHING)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	test	eax, eax
	jne	$LN12@GetWpActio

; 655  :     {
; 656  : 	if (wp->GetWPRouteAction() == WP_NOTHING)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	test	eax, eax
	jne	$LN11@GetWpActio

; 657  : 	{
; 658  : 	    if (wp->GetWPFlags() & WPF_BREAKPOINT)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 4
	je	SHORT $LN10@GetWpActio

; 659  : 		AddStringToBuffer(WPActStr[31], cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	mov	ecx, 20					; 00000014H
	imul	ecx, 31					; 0000001fH
	add	ecx, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN9@GetWpActio
$LN10@GetWpActio:

; 660  : 	    //	AddIndexedStringToBuffer(381, cline);
; 661  : 	    else if (wp->GetWPFlags() & WPF_IP)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 8
	je	SHORT $LN8@GetWpActio

; 662  : 		AddStringToBuffer(WPActStr[32], cline);

	mov	edx, DWORD PTR _cline$[ebp]
	push	edx
	mov	eax, 20					; 00000014H
	shl	eax, 5
	add	eax, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	SHORT $LN9@GetWpActio
$LN8@GetWpActio:

; 663  : 	    //	AddIndexedStringToBuffer(382, cline);
; 664  : 	    else if (wp->GetWPFlags() & WPF_TURNPOINT)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16					; 00000010H
	je	SHORT $LN6@GetWpActio

; 665  : 		AddStringToBuffer(WPActStr[33], cline);

	mov	ecx, DWORD PTR _cline$[ebp]
	push	ecx
	mov	edx, 20					; 00000014H
	imul	edx, 33					; 00000021H
	add	edx, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	SHORT $LN9@GetWpActio
$LN6@GetWpActio:

; 666  : 	    //	AddIndexedStringToBuffer(383, cline);
; 667  : 	    else if (wp->GetWPFlags() & WPF_CP)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32					; 00000020H
	je	SHORT $LN4@GetWpActio

; 668  : 		AddStringToBuffer(WPActStr[WP_CASCP], cline);

	mov	eax, DWORD PTR _cline$[ebp]
	push	eax
	mov	ecx, 20					; 00000014H
	imul	ecx, 9
	add	ecx, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 669  : 	    //	AddIndexedStringToBuffer(359, cline);
; 670  : 	    else

	jmp	SHORT $LN9@GetWpActio
$LN4@GetWpActio:

; 671  : 		AddStringToBuffer(WPActStr[0], cline);

	mov	edx, DWORD PTR _cline$[ebp]
	push	edx
	mov	eax, 20					; 00000014H
	imul	eax, 0
	add	eax, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN9@GetWpActio:

; 672  : 	    //	AddIndexedStringToBuffer(350, cline);
; 673  : 	}
; 674  : 	else {

	jmp	SHORT $LN2@GetWpActio
$LN11@GetWpActio:

; 675  : 	    AddStringToBuffer(WPActStr[wp->GetWPRouteAction()], cline);

	mov	ecx, DWORD PTR _cline$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	imul	eax, 20					; 00000014H
	add	eax, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN2@GetWpActio:

; 676  : 	//  AddIndexedStringToBuffer(350+wp->GetWPRouteAction(), cline);
; 677  : 	}
; 678  :     }
; 679  :     else

	jmp	SHORT $LN13@GetWpActio
$LN12@GetWpActio:

; 680  : 	AddStringToBuffer(WPActStr[wp->GetWPAction()], cline);

	mov	edx, DWORD PTR _cline$[ebp]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	imul	eax, 20					; 00000014H
	add	eax, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN13@GetWpActio:

; 681  : 	// AddIndexedStringToBuffer(350+wp->GetWPAction(), cline);
; 682  : }

	pop	ebp
	ret	0
?GetWpActionToBuffer@@YAXPAVWayPointClass@@PAD@Z ENDP	; GetWpActionToBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_buffer$ = 16						; size = 4
_window$ = 20						; size = 4
_output$ = 24						; size = 4
?GetCurrentBriefXY@@YAXPAH0PADPAVC_Window@@1@Z PROC	; GetCurrentBriefXY

; 818  : 	{

	push	ebp
	mov	ebp, esp

; 819  : 	// KCK: The only way we can REALLY know current x & y position is to have the UI add it for us
; 820  : 	// (and therefore do all appropriate wrapping, compression of spaces, etc, etc)
; 821  : 	AddStringToBrief(buffer, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 822  : 	*x = CBX;

	movsx	eax, WORD PTR _CBX
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax

; 823  : 	*y = CBY;

	movsx	edx, WORD PTR _CBY
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax], edx

; 824  : }

	pop	ebp
	ret	0
?GetCurrentBriefXY@@YAXPAH0PADPAVC_Window@@1@Z ENDP	; GetCurrentBriefXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_eol$1 = -4						; size = 2
_buffer$ = 8						; size = 4
_window$ = 12						; size = 4
_output$ = 16						; size = 4
?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z PROC		; AddEOLToBrief

; 873  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 874  : 	// Dump current line
; 875  : 	AddStringToBrief(buffer, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 876  : 	if (window)

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN3@AddEOLToBr

; 877  : 		CBY += gFontList->GetHeight(window->Font_);

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	movsx	edx, WORD PTR _CBY
	add	edx, eax
	mov	WORD PTR _CBY, dx
	jmp	SHORT $LN2@AddEOLToBr
$LN3@AddEOLToBr:

; 878  : 	else if (output)

	cmp	DWORD PTR _output$[ebp], 0
	je	SHORT $LN2@AddEOLToBr

; 879  : 		{
; 880  : 		// Insert linefeed
; 881  : 		_TCHAR		eol[2] = "\n";

	mov	ax, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
	mov	WORD PTR _eol$1[ebp], ax

; 882  : 		AddStringToBrief(eol, window, output);

	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	mov	edx, DWORD PTR _window$[ebp]
	push	edx
	lea	eax, DWORD PTR _eol$1[ebp]
	push	eax
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 883  : 		CCurrentLine = 0;

	mov	DWORD PTR _CCurrentLine, 0
$LN2@AddEOLToBr:

; 884  : 		}
; 885  : 	CBX = 0;

	xor	ecx, ecx
	mov	WORD PTR _CBX, cx

; 886  : 	CLineStart = 0;

	mov	DWORD PTR _CLineStart, 0

; 887  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z ENDP		; AddEOLToBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_txttab$1 = -4						; size = 2
_tab$ = 8						; size = 4
_buffer$ = 12						; size = 4
_window$ = 16						; size = 4
_output$ = 20						; size = 4
?AddTabToDebrief@@YAXHPADPAVC_Window@@0@Z PROC		; AddTabToDebrief

; 855  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 856  :     AddStringToBrief(buffer, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 857  :     if (window)

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN2@AddTabToDe

; 858  :     {
; 859  : 		CBX = tab;

	mov	ax, WORD PTR _tab$[ebp]
	mov	WORD PTR _CBX, ax

; 860  : 		CLineStart = CBX;

	movsx	ecx, WORD PTR _CBX
	mov	DWORD PTR _CLineStart, ecx

; 861  :     }
; 862  :     else

	jmp	SHORT $LN3@AddTabToDe
$LN2@AddTabToDe:

; 863  :     {
; 864  : 		tab /= 10;

	mov	eax, DWORD PTR _tab$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _tab$[ebp], eax

; 865  : 		_TCHAR		txttab[2] = " ";

	mov	dx, WORD PTR ??_C@_01CLKCMJKC@?5?$AA@
	mov	WORD PTR _txttab$1[ebp], dx

; 866  : 			//do {
; 867  : 				AddStringToBrief(txttab, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	lea	edx, DWORD PTR _txttab$1[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH
$LN3@AddTabToDe:

; 868  : 			//} while (CBX < tab-1);
; 869  :     }
; 870  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddTabToDebrief@@YAXHPADPAVC_Window@@0@Z ENDP		; AddTabToDebrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_txttab$1 = -16						; size = 2
_htmltab$2 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_tab$ = 8						; size = 4
_buffer$ = 12						; size = 4
_window$ = 16						; size = 4
_output$ = 20						; size = 4
?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z PROC		; AddTabToBrief

; 827  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 828  :     // We have to dump our current line in order to goto a new location
; 829  :     AddStringToBrief(buffer, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 830  :     if (window)

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN4@AddTabToBr

; 831  :     {
; 832  : 		CBX = tab;

	mov	ax, WORD PTR _tab$[ebp]
	mov	WORD PTR _CBX, ax

; 833  : 		CLineStart = CBX;

	movsx	ecx, WORD PTR _CBX
	mov	DWORD PTR _CLineStart, ecx

; 834  :     }
; 835  :     else

	jmp	SHORT $LN5@AddTabToBr
$LN4@AddTabToBr:

; 836  :     {
; 837  : 		tab /= 10;

	mov	eax, DWORD PTR _tab$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _tab$[ebp], eax

; 838  : 		// Insert spaces until we get to the right location
; 839  : 		// JPO - rework this so we always get at least one separator
; 840  : 		_TCHAR		htmltab[5] = "<td>";

	mov	edx, DWORD PTR ??_C@_04LHEKBCCP@?$DMtd?$DO?$AA@
	mov	DWORD PTR _htmltab$2[ebp], edx
	mov	al, BYTE PTR ??_C@_04LHEKBCCP@?$DMtd?$DO?$AA@+4
	mov	BYTE PTR _htmltab$2[ebp+4], al

; 841  : 		_TCHAR		txttab[2] = "\t";

	mov	cx, WORD PTR ??_C@_01GPOEFGEJ@?7?$AA@
	mov	WORD PTR _txttab$1[ebp], cx

; 842  : 		if (g_bBriefHTML)

	movzx	edx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	edx, edx
	je	SHORT $LN2@AddTabToBr

; 843  : 				AddStringToBrief(htmltab, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	lea	edx, DWORD PTR _htmltab$2[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 844  : 		else

	jmp	SHORT $LN5@AddTabToBr
$LN2@AddTabToBr:

; 845  : 		{
; 846  : 			//do {
; 847  : 				//_TCHAR		space[2] = " "; //THW get a real tab for better layout in files and printout
; 848  : 				AddStringToBrief(txttab, window, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	lea	edx, DWORD PTR _txttab$1[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH
$LN5@AddTabToBr:

; 849  : 			//} while (CBX < tab-1);
; 850  : 		}
; 851  :     }
; 852  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z ENDP		; AddTabToBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_window$ = 12						; size = 4
_output$ = 16						; size = 4
?AddStringToBrief@@YAXPADPAVC_Window@@0@Z PROC		; AddStringToBrief

; 793  : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 794  : 	if (!buffer[0])

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _buffer$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN4@AddStringT

; 795  : 		return;

	jmp	$LN5@AddStringT
$LN4@AddStringT:

; 796  : 	if (window)

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN3@AddStringT

; 797  : 		AddWordWrapTextToWindow(window, &CBX, &CBY, 
; 798  : 			static_cast<short>(CLineStart), 
; 799  : 			static_cast<short>(window->ClientArea_[0].right - window->ClientArea_[0].left - 10),
; 800  : 			CBColor, buffer);

	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CBColor
	push	ecx
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _window$[ebp]
	mov	esi, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [ecx+edx+176]
	sub	edx, DWORD PTR [esi+eax+168]
	sub	edx, 10					; 0000000aH
	push	edx
	movzx	eax, WORD PTR _CLineStart
	push	eax
	push	OFFSET _CBY
	push	OFFSET _CBX
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	call	?AddWordWrapTextToWindow@@YAHPAVC_Window@@PAF1FFKPADJ@Z ; AddWordWrapTextToWindow
	add	esp, 32					; 00000020H

; 801  : 	else

	jmp	SHORT $LN2@AddStringT
$LN3@AddStringT:

; 802  : 		{
; 803  : 	    ShiAssert(output != buffer);
; 804  : 		_tcscat(output,buffer);

	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 805  : 		if (!CCurrentLine)

	cmp	DWORD PTR _CCurrentLine, 0
	jne	SHORT $LN1@AddStringT

; 806  : 			CCurrentLine = output;

	mov	ecx, DWORD PTR _output$[ebp]
	mov	DWORD PTR _CCurrentLine, ecx
$LN1@AddStringT:

; 807  : #if 0 // this isn't helping the print out.
; 808  : 		if (gFontList)
; 809  : 		    CBX = CLineStart + gFontList->StrWidth(BDefaultFont,CCurrentLine);
; 810  : 		else 
; 811  : #endif
; 812  : 		    CBX = CLineStart + strlen(CCurrentLine);

	mov	edx, DWORD PTR _CCurrentLine
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _CLineStart
	mov	WORD PTR _CBX, ax
$LN2@AddStringT:

; 813  : 		}
; 814  : 	buffer[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [ecx+eax], 0
$LN5@AddStringT:

; 815  : 	}

	pop	esi
	pop	ebp
	ret	0
?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ENDP		; AddStringToBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_CBXtemp$1 = -8						; size = 2
_CBYtemp$2 = -4						; size = 2
_window$ = 8						; size = 4
?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z PROC	; AddHorizontalLineToBrief

; 781  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 782  : 	if (window)

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN2@AddHorizon

; 783  : 		{
; 784  : 		short		CBYtemp = CBY + gFontList->GetHeight(window->Font_)/2;

	movsx	esi, WORD PTR _CBY
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	WORD PTR _CBYtemp$2[ebp], si

; 785  : 		short		CBXtemp = 0;

	xor	edx, edx
	mov	WORD PTR _CBXtemp$1[ebp], dx

; 786  : 		AddHorizontalLineToWindow (window ,&CBXtemp, &CBYtemp, 
; 787  : 			0, static_cast<short>(window->ClientArea_[0].right - window->ClientArea_[0].left - 10),
; 788  : 			CBColor);

	push	0
	mov	eax, DWORD PTR _CBColor
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _window$[ebp]
	mov	esi, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+176]
	sub	ecx, DWORD PTR [esi+edx+168]
	sub	ecx, 10					; 0000000aH
	push	ecx
	push	0
	lea	edx, DWORD PTR _CBYtemp$2[ebp]
	push	edx
	lea	eax, DWORD PTR _CBXtemp$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	call	?AddHorizontalLineToWindow@@YAXPAVC_Window@@PAF1FFKJ@Z ; AddHorizontalLineToWindow
	add	esp, 28					; 0000001cH
$LN2@AddHorizon:

; 789  : 		}
; 790  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ENDP	; AddHorizontalLineToBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
$T2 = -8572						; size = 8
$T3 = -8564						; size = 8
$T4 = -8556						; size = 8
$T5 = -8548						; size = 8
tv5118 = -8540						; size = 8
tv4048 = -8532						; size = 8
_myit$6 = -8524						; size = 12
_vc$7 = -8512						; size = 4
_vc$8 = -8508						; size = 4
_pack$9 = -8504						; size = 4
_cc$10 = -8500						; size = 4
_vc$11 = -8496						; size = 4
_o$12 = -8492						; size = 4
_fc$13 = -8488						; size = 4
_o$14 = -8484						; size = 4
_flight$15 = -8480					; size = 4
_oper$16 = -8476					; size = 4
_flight$17 = -8472					; size = 4
_vc$18 = -8468						; size = 4
_flight$19 = -8464					; size = 4
_uc$20 = -8460						; size = 4
_vc$21 = -8456						; size = 4
_fc$22 = -8452						; size = 4
_vc$23 = -8448						; size = 4
_vc$24 = -8444						; size = 4
_fc$25 = -8440						; size = 4
_pack$26 = -8436					; size = 4
_vc$27 = -8432						; size = 4
_flight$28 = -8428					; size = 4
_flight$29 = -8424					; size = 4
_pack$30 = -8420					; size = 4
_flight$31 = -8416					; size = 4
_flight$32 = -8412					; size = 4
_pack$33 = -8408					; size = 4
_flight$34 = -8404					; size = 4
_wid$35 = -8400						; size = 4
_fptr$36 = -8396					; size = 4
tv4044 = -8392						; size = 4
tv921 = -8388						; size = 4
tv159 = -8384						; size = 4
tv1137 = -8380						; size = 4
_o$37 = -8376						; size = 4
_ot$38 = -8372						; size = 4
_skip$39 = -8368					; size = 4
tv1246 = -8364						; size = 4
_fc$40 = -8360						; size = 4
tv1123 = -8356						; size = 4
_alt$41 = -8352						; size = 4
_wid$42 = -8348						; size = 4
tv5114 = -8344						; size = 4
_done$ = -8340						; size = 4
_eaa$43 = -8336						; size = 4
_y$44 = -8332						; size = 2
_x$45 = -8328						; size = 2
tv2310 = -8324						; size = 4
_eol$ = -8320						; size = 2
_o$46 = -8316						; size = 4
_f$47 = -8312						; size = 4
_vc$48 = -8308						; size = 4
_got$49 = -8304						; size = 4
_sptr$50 = -8300					; size = 4
_font$ = -8296						; size = 4
_re$51 = -8292						; size = 4
_reversedWindHeading$52 = -8288				; size = 4
_mission_context$53 = -8284				; size = 4
_j$54 = -8280						; size = 4
tv2072 = -8276						; size = 4
_tar$55 = -8272						; size = 4
_i$56 = -8268						; size = 4
_nw$57 = -8264						; size = 4
_losses$58 = -8260					; size = 4
_slot$59 = -8256					; size = 4
_fp$ = -8252						; size = 4
_i$60 = -8248						; size = 4
_jstar$61 = -8244					; size = 4
_awacs$62 = -8240					; size = 4
_mission_context$63 = -8236				; size = 4
_tanker$64 = -8232					; size = 4
_u$65 = -8228						; size = 4
_ecm$66 = -8224						; size = 4
_fptr$67 = -8220					; size = 4
_u$68 = -8216						; size = 4
_ent$69 = -8212						; size = 4
_seconds_off$70 = -8208					; size = 4
_strCount$71 = -8204					; size = 4
_success$72 = -8200					; size = 4
_target$ = -8196					; size = 4
_strCount$73 = -8192					; size = 4
_re$74 = -8188						; size = 4
_x$75 = -8184						; size = 2
_y$76 = -8180						; size = 2
_ptarget$ = -8176					; size = 4
_tar$77 = -8172						; size = 4
_i$ = -8168						; size = 4
_curr_stack$ = -8164					; size = 4
_sptr$ = -8160						; size = 4
_data$78 = -8156					; size = 44
_data$79 = -8112					; size = 44
_stack_active$ = -8068					; size = 40
_result$80 = -8028					; size = 1024
_context$81 = -7004					; size = 1024
_total$82 = -5980					; size = 512
_total$83 = -5468					; size = 512
_format$84 = -4956					; size = 256
_format$85 = -4700					; size = 256
_str$86 = -4444						; size = 1280
_str$87 = -3164						; size = 1280
_names$88 = -1884					; size = 150
_name$89 = -1732					; size = 128
_name$90 = -1604					; size = 128
_name$91 = -1476					; size = 128
_name$92 = -1348					; size = 128
_szTemp$93 = -1220					; size = 256
_name$94 = -964						; size = 81
_name$95 = -880						; size = 81
_name$96 = -796						; size = 81
_wstring$97 = -712					; size = 80
_tstring$98 = -632					; size = 80
_name$99 = -552						; size = 80
_objective$100 = -472					; size = 40
_objective$101 = -432					; size = 40
_buffer$102 = -392					; size = 40
_time$103 = -352					; size = 40
_time$104 = -312					; size = 40
_string$105 = -272					; size = 32
_string$106 = -240					; size = 32
_string$107 = -208					; size = 32
_string$108 = -176					; size = 32
_token$ = -144						; size = 128
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_current_line$ = 12					; size = 4
_win$ = 16						; size = 4
_brief$ = 20						; size = 4
_mec$ = 24						; size = 4
_flight_data$ = 28					; size = 4
?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z PROC ; ReadScriptedBriefFile

; 1592 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 8560				; 00002170H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1593 : 	FILE*		fp;
; 1594 : 	int			i,font=0,done=0,curr_stack=0,stack_active[MAX_STACK] = { 1 };

	mov	DWORD PTR _font$[ebp], 0
	mov	DWORD PTR _done$[ebp], 0
	mov	DWORD PTR _curr_stack$[ebp], 0
	mov	DWORD PTR _stack_active$[ebp], 1
	xor	eax, eax
	mov	DWORD PTR _stack_active$[ebp+4], eax
	mov	DWORD PTR _stack_active$[ebp+8], eax
	mov	DWORD PTR _stack_active$[ebp+12], eax
	mov	DWORD PTR _stack_active$[ebp+16], eax
	mov	DWORD PTR _stack_active$[ebp+20], eax
	mov	DWORD PTR _stack_active$[ebp+24], eax
	mov	DWORD PTR _stack_active$[ebp+28], eax
	mov	DWORD PTR _stack_active$[ebp+32], eax
	mov	DWORD PTR _stack_active$[ebp+36], eax

; 1595 : 	char		token[128],*sptr;
; 1596 : 	_TCHAR		eol[2] = { '\n', 0 };

	mov	BYTE PTR _eol$[ebp], 10			; 0000000aH
	mov	BYTE PTR _eol$[ebp+1], 0

; 1597 : 	CampEntity	target,ptarget;
; 1598 : 
; 1599 : 	if (!mec || !mec->flight_data || !mec->flight_data->camp_id)

	cmp	DWORD PTR _mec$[ebp], 0
	je	SHORT $LN594@ReadScript
	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+204], 0
	je	SHORT $LN594@ReadScript
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+204]
	movsx	ecx, WORD PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN595@ReadScript
$LN594@ReadScript:

; 1600 : 		return 0;

	xor	eax, eax
	jmp	$LN596@ReadScript
$LN595@ReadScript:

; 1601 : 
; 1602 : 	if ((fp = OpenCampFile(filename,"","r")) == NULL)

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN593@ReadScript

; 1603 : 		return 0;

	xor	eax, eax
	jmp	$LN596@ReadScript
$LN593@ReadScript:

; 1604 : 	
; 1605 : 	if (F4IsBadReadPtr(flight_data, sizeof(FlightDataClass))) // JB 010305 CTD

	push	168					; 000000a8H
	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN592@ReadScript

; 1606 : 		return 0;

	xor	eax, eax
	jmp	$LN596@ReadScript
$LN592@ReadScript:

; 1607 : 
; 1608 : 	target = FindEntity(flight_data->target_id);

	mov	edx, DWORD PTR _flight_data$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR [edx+72]
	push	ecx
	call	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ; FindEntity
	add	esp, 8
	mov	DWORD PTR _target$[ebp], eax

; 1609 : 	ptarget = FindEntity(mec->package_target_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	mov	ecx, DWORD PTR [edx+116]
	push	ecx
	call	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ; FindEntity
	add	esp, 8
	mov	DWORD PTR _ptarget$[ebp], eax
$LN617@ReadScript:

; 1610 : 
; 1611 : 	while (!done)

	cmp	DWORD PTR _done$[ebp], 0
	jne	$LN590@ReadScript

; 1612 : 		{
; 1613 : 		ReadComments(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	?ReadComments@@YAXPAU_iobuf@@@Z		; ReadComments
	add	esp, 4

; 1614 : 		ReadToken(fp,token,120);

	push	120					; 00000078H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?ReadToken@@YAPADPAU_iobuf@@QADH@Z	; ReadToken
	add	esp, 12					; 0000000cH

; 1615 : 		if (!token[0])

	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _token$[ebp+edx]
	test	eax, eax
	jne	SHORT $LN589@ReadScript

; 1616 : 			continue;

	jmp	SHORT $LN617@ReadScript
$LN589@ReadScript:

; 1617 : 
; 1618 : 		// Handle standard tokens
; 1619 : 		if (strncmp(token,"#IF",3)==0)

	push	3
	push	OFFSET ??_C@_03LFFEHOPP@?$CDIF?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN588@ReadScript

; 1620 : 			{
; 1621 : 			curr_stack++;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	add	edx, 1
	mov	DWORD PTR _curr_stack$[ebp], edx

; 1622 : 			if (!stack_active[curr_stack-1])

	mov	eax, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+eax*4-4], 0
	jne	SHORT $LN587@ReadScript

; 1623 : 				stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 1624 : 			else

	jmp	SHORT $LN586@ReadScript
$LN587@ReadScript:

; 1625 : 				stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN586@ReadScript:
	jmp	$LN577@ReadScript
$LN588@ReadScript:

; 1626 : 			}
; 1627 : 		else if (strcmp(token,"#ELSE")==0)

	push	OFFSET ??_C@_05GNCADCNB@?$CDELSE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN584@ReadScript

; 1628 : 			{
; 1629 : 			if (curr_stack>0 && stack_active[curr_stack-1])

	cmp	DWORD PTR _curr_stack$[ebp], 0
	jle	SHORT $LN583@ReadScript
	mov	ecx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+ecx*4-4], 0
	je	SHORT $LN583@ReadScript

; 1630 : 				stack_active[curr_stack] = !stack_active[curr_stack];

	mov	edx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+edx*4], 0
	jne	SHORT $LN598@ReadScript
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN599@ReadScript
$LN598@ReadScript:
	mov	DWORD PTR tv159[ebp], 0
$LN599@ReadScript:
	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], ecx
$LN583@ReadScript:

; 1631 : 			continue;

	jmp	$LN617@ReadScript
	jmp	SHORT $LN577@ReadScript
$LN584@ReadScript:

; 1632 : 			}
; 1633 : 		else if (strcmp(token,"#ENDIF")==0)

	push	OFFSET ??_C@_06OJIOOPNB@?$CDENDIF?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN581@ReadScript

; 1634 : 			{
; 1635 : 			if (!curr_stack)

	cmp	DWORD PTR _curr_stack$[ebp], 0
	jne	SHORT $LN580@ReadScript

; 1636 : 				MonoPrint("<Brief reading Error - unmatched #ENDIF>\n");

	push	OFFSET ??_C@_0CK@EGAAPGFI@?$DMBrief?5reading?5Error?5?9?5unmatched@
	call	_MonoPrint
	add	esp, 4

; 1637 : 			else

	jmp	SHORT $LN579@ReadScript
$LN580@ReadScript:

; 1638 : 				curr_stack--;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	sub	eax, 1
	mov	DWORD PTR _curr_stack$[ebp], eax
$LN579@ReadScript:

; 1639 : 			continue;

	jmp	$LN617@ReadScript
	jmp	SHORT $LN577@ReadScript
$LN581@ReadScript:

; 1640 : 			}
; 1641 : 		else if (strcmp(token,"#ENDSCRIPT")==0)

	push	OFFSET ??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN577@ReadScript

; 1642 : 			{
; 1643 : 			done = 1;

	mov	DWORD PTR _done$[ebp], 1

; 1644 : 			continue;

	jmp	$LN617@ReadScript
$LN577@ReadScript:

; 1645 : 			}
; 1646 : 
; 1647 : 		// Check for section activity
; 1648 : 		if (stack_active[curr_stack])

	mov	edx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+edx*4], 0
	je	$LN1@ReadScript

; 1649 : 			{
; 1650 : 			// This section is active, handle tokens
; 1651 : 			if (strncmp(token,"#IF",3)==0)

	push	3
	push	OFFSET ??_C@_03LFFEHOPP@?$CDIF?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN575@ReadScript

; 1652 : 				{
; 1653 : 				if (curr_stack >= MAX_STACK)

	cmp	DWORD PTR _curr_stack$[ebp], 10		; 0000000aH
	jl	SHORT $LN574@ReadScript

; 1654 : 					{
; 1655 : 					MonoPrint("<Brief Reading Error - stack overflow. Max stacks = %d",MAX_STACK);

	push	10					; 0000000aH
	push	OFFSET ??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@
	call	_MonoPrint
	add	esp, 8

; 1656 : 					CloseCampFile(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 1657 : 					return 0;

	xor	eax, eax
	jmp	$LN596@ReadScript
$LN574@ReadScript:

; 1658 : 					}
; 1659 : 				// Add all our if conditions here
; 1660 : 				if (strcmp(token,"#IF_HAVE_TARGET")==0)

	push	OFFSET ??_C@_0BA@HEBDCAAB@?$CDIF_HAVE_TARGET?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN573@ReadScript

; 1661 : 					{
; 1662 : 					if (!target)

	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN572@ReadScript

; 1663 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0

; 1664 : 					else

	jmp	SHORT $LN571@ReadScript
$LN572@ReadScript:

; 1665 : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN571@ReadScript:
	jmp	$LN369@ReadScript
$LN573@ReadScript:

; 1666 : 					}
; 1667 : 				else if (strcmp(token,"#IF_HAVE_PACKAGE_TARGET")==0)

	push	OFFSET ??_C@_0BI@PHKLIJPH@?$CDIF_HAVE_PACKAGE_TARGET?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN569@ReadScript

; 1668 : 					{
; 1669 : 					if (!ptarget)

	cmp	DWORD PTR _ptarget$[ebp], 0
	jne	SHORT $LN568@ReadScript

; 1670 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0

; 1671 : 					else

	jmp	SHORT $LN567@ReadScript
$LN568@ReadScript:

; 1672 : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN567@ReadScript:
	jmp	$LN369@ReadScript
$LN569@ReadScript:

; 1673 : 					}
; 1674 : 				else if (strcmp(token,"#IF_HAVE_TARGET_BUILDING")==0)

	push	OFFSET ??_C@_0BJ@KKGPNOPM@?$CDIF_HAVE_TARGET_BUILDING?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN565@ReadScript

; 1675 : 					{
; 1676 : 					if (target && flight_data->target_building < FEATURES_PER_OBJ)

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN564@ReadScript
	mov	eax, DWORD PTR _flight_data$[ebp]
	movzx	ecx, BYTE PTR [eax+82]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN564@ReadScript

; 1677 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1678 : 					else

	jmp	SHORT $LN563@ReadScript
$LN564@ReadScript:

; 1679 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN563@ReadScript:
	jmp	$LN369@ReadScript
$LN565@ReadScript:

; 1680 : 					}
; 1681 : 				else if (strcmp(token,"#IF_HAVE_PATROL_TIME")==0)

	push	OFFSET ??_C@_0BF@MGMEMEHP@?$CDIF_HAVE_PATROL_TIME?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN561@ReadScript

; 1682 : 					{
; 1683 : 					if (mec->patrol_time > 0.0F)

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	DWORD PTR tv4044[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv4044[ebp]
	mov	ecx, DWORD PTR tv4044[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv4048[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv4048[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN560@ReadScript

; 1684 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1685 : 					else

	jmp	SHORT $LN559@ReadScript
$LN560@ReadScript:

; 1686 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN559@ReadScript:
	jmp	$LN369@ReadScript
$LN561@ReadScript:

; 1687 : 					}
; 1688 : 				else if (strncmp(token,"#IF_PACKAGE_MISSION_EQ",21)==0)

	push	21					; 00000015H
	push	OFFSET ??_C@_0BH@JPBGPHCM@?$CDIF_PACKAGE_MISSION_EQ?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN557@ReadScript

; 1689 : 					{
; 1690 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1691 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN556@ReadScript

; 1692 : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN556@ReadScript:

; 1693 : 					stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN555@ReadScript:

; 1694 : 					while (sptr && atoi(sptr))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN554@ReadScript
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN554@ReadScript

; 1695 : 						{
; 1696 : 						if (atoi(sptr) == mec->package_mission)

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	cmp	eax, edx
	jne	SHORT $LN553@ReadScript

; 1697 : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN553@ReadScript:

; 1698 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1699 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN552@ReadScript

; 1700 : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN552@ReadScript:

; 1701 : 						}

	jmp	SHORT $LN555@ReadScript
$LN554@ReadScript:

; 1702 : 					}
; 1703 : 				else if (strncmp(token,"#IF_MISSION_EQ",13)==0)

	jmp	$LN369@ReadScript
$LN557@ReadScript:
	push	13					; 0000000dH
	push	OFFSET ??_C@_0P@GMDIIIKA@?$CDIF_MISSION_EQ?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN550@ReadScript

; 1704 : 					{
; 1705 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1706 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN549@ReadScript

; 1707 : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN549@ReadScript:

; 1708 : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN548@ReadScript:

; 1709 : 					while (sptr && atoi(sptr))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN547@ReadScript
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN547@ReadScript

; 1710 : 						{
; 1711 : 						if (atoi(sptr) == flight_data->mission)

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	cmp	eax, edx
	jne	SHORT $LN546@ReadScript

; 1712 : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN546@ReadScript:

; 1713 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1714 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN545@ReadScript

; 1715 : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN545@ReadScript:

; 1716 : 						}

	jmp	SHORT $LN548@ReadScript
$LN547@ReadScript:

; 1717 : 					}
; 1718 : 				else if (strncmp(token,"#IF_OLD_MISSION_EQ",13)==0)

	jmp	$LN369@ReadScript
$LN550@ReadScript:
	push	13					; 0000000dH
	push	OFFSET ??_C@_0BD@PJEKJAJL@?$CDIF_OLD_MISSION_EQ?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN543@ReadScript

; 1719 : 					{
; 1720 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1721 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN542@ReadScript

; 1722 : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN542@ReadScript:

; 1723 : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN541@ReadScript:

; 1724 : 					while (sptr && atoi(sptr))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN540@ReadScript
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN540@ReadScript

; 1725 : 						{
; 1726 : 						if (atoi(sptr) == flight_data->old_mission)

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+62]
	cmp	eax, edx
	jne	SHORT $LN539@ReadScript

; 1727 : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN539@ReadScript:

; 1728 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1729 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN538@ReadScript

; 1730 : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN538@ReadScript:

; 1731 : 						}

	jmp	SHORT $LN541@ReadScript
$LN540@ReadScript:

; 1732 : 					}
; 1733 : 				else if (strncmp(token,"#IF_TARGET_OBJ",14)==0)

	jmp	$LN369@ReadScript
$LN543@ReadScript:
	push	14					; 0000000eH
	push	OFFSET ??_C@_0P@EKIPLFBG@?$CDIF_TARGET_OBJ?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN536@ReadScript

; 1734 : 					{
; 1735 : 					if (target && target->GetClass() == CLASS_OBJECTIVE)

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN535@ReadScript
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetClass@CampBaseClass@@QBEEXZ		; CampBaseClass::GetClass
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN535@ReadScript

; 1736 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1737 : 					else

	jmp	SHORT $LN534@ReadScript
$LN535@ReadScript:

; 1738 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN534@ReadScript:
	jmp	$LN369@ReadScript
$LN536@ReadScript:

; 1739 : 					}
; 1740 : 				else if (strncmp(token,"#IF_TARGET_UNIT",15)==0)

	push	15					; 0000000fH
	push	OFFSET ??_C@_0BA@EIIJCMHG@?$CDIF_TARGET_UNIT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN532@ReadScript

; 1741 : 					{
; 1742 : 					if (target && target->GetClass() == CLASS_UNIT)

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN531@ReadScript
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetClass@CampBaseClass@@QBEEXZ		; CampBaseClass::GetClass
	movzx	edx, al
	cmp	edx, 6
	jne	SHORT $LN531@ReadScript

; 1743 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 1744 : 					else

	jmp	SHORT $LN530@ReadScript
$LN531@ReadScript:

; 1745 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN530@ReadScript:
	jmp	$LN369@ReadScript
$LN532@ReadScript:

; 1746 : 					}
; 1747 : 				else if (strncmp(token,"#IF_FLIGHT_CONTEXT_EQ",21)==0)

	push	21					; 00000015H
	push	OFFSET ??_C@_0BG@LFFPHFBL@?$CDIF_FLIGHT_CONTEXT_EQ?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN528@ReadScript

; 1748 : 					{
; 1749 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1750 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN527@ReadScript

; 1751 : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN527@ReadScript:

; 1752 : 					stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
$LN526@ReadScript:

; 1753 : 					while (sptr && (atoi(sptr) || *sptr == '0'))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	$LN525@ReadScript
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN524@ReadScript
	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN525@ReadScript
$LN524@ReadScript:

; 1754 : 						{
; 1755 : 						if (atoi(sptr) == flight_data->mission_context)

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+94]
	cmp	eax, edx
	jne	SHORT $LN523@ReadScript

; 1756 : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN523@ReadScript:

; 1757 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1758 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN522@ReadScript

; 1759 : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN522@ReadScript:

; 1760 : 						}

	jmp	$LN526@ReadScript
$LN525@ReadScript:

; 1761 : 					}
; 1762 : 				else if (strncmp(token,"#IF_CONTEXT_EQ",14)==0)

	jmp	$LN369@ReadScript
$LN528@ReadScript:
	push	14					; 0000000eH
	push	OFFSET ??_C@_0P@JHDJKIKK@?$CDIF_CONTEXT_EQ?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN520@ReadScript

; 1763 : 					{
; 1764 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1765 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN519@ReadScript

; 1766 : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN519@ReadScript:

; 1767 : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN518@ReadScript:

; 1768 : 					while (sptr && (atoi(sptr) || *sptr == '0'))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	$LN517@ReadScript
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN516@ReadScript
	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN517@ReadScript
$LN516@ReadScript:

; 1769 : 						{
; 1770 : 						if (atoi(sptr) == mec->package_context)

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [edx+6]
	cmp	eax, ecx
	jne	SHORT $LN515@ReadScript

; 1771 : 							stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN515@ReadScript:

; 1772 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1773 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN514@ReadScript

; 1774 : 							sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN514@ReadScript:

; 1775 : 						}

	jmp	$LN518@ReadScript
$LN517@ReadScript:

; 1776 : 					}
; 1777 : 				else if (strcmp(token,"#IF_PRIMARY_FLIGHT")==0)

	jmp	$LN369@ReadScript
$LN520@ReadScript:
	push	OFFSET ??_C@_0BD@NGKNAHIA@?$CDIF_PRIMARY_FLIGHT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN512@ReadScript

; 1778 : 					{
; 1779 : 					if (mec->package_element == flight_data)

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _flight_data$[ebp]
	jne	SHORT $LN511@ReadScript

; 1780 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1781 : 					else

	jmp	SHORT $LN510@ReadScript
$LN511@ReadScript:

; 1782 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN510@ReadScript:
	jmp	$LN369@ReadScript
$LN512@ReadScript:

; 1783 : 					}
; 1784 : 				else if (strcmp(token,"#IF_PLAYER_FLIGHT")==0)

	push	OFFSET ??_C@_0BC@BICNCHDF@?$CDIF_PLAYER_FLIGHT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN508@ReadScript

; 1785 : 					{
; 1786 : 					if (mec->player_element == flight_data)

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _flight_data$[ebp]
	jne	SHORT $LN507@ReadScript

; 1787 : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1

; 1788 : 					else

	jmp	SHORT $LN506@ReadScript
$LN507@ReadScript:

; 1789 : 						stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
$LN506@ReadScript:
	jmp	$LN369@ReadScript
$LN508@ReadScript:

; 1790 : 					}
; 1791 : 				else if (strcmp(token,"#IF_PLAYER_PLANE")==0)

	push	OFFSET ??_C@_0BB@FMCCFLJB@?$CDIF_PLAYER_PLANE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN504@ReadScript

; 1792 : 					{
; 1793 : 					if (mec->player_element == flight_data && mec->player_pilot == mec->curr_pilot)

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _flight_data$[ebp]
	jne	SHORT $LN503@ReadScript
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+212]
	jne	SHORT $LN503@ReadScript

; 1794 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 1795 : 					else

	jmp	SHORT $LN502@ReadScript
$LN503@ReadScript:

; 1796 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN502@ReadScript:
	jmp	$LN369@ReadScript
$LN504@ReadScript:

; 1797 : 					}
; 1798 : 				else if (strcmp(token,"#IF_SOLO_PACKAGE")==0)

	push	OFFSET ??_C@_0BB@DMLOGKM@?$CDIF_SOLO_PACKAGE?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN500@ReadScript

; 1799 : 					{
; 1800 : 					if (mec->flight_data[1].camp_id > 0)

	mov	eax, 168				; 000000a8H
	shl	eax, 0
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	movsx	eax, WORD PTR [edx+eax+36]
	test	eax, eax
	jle	SHORT $LN499@ReadScript

; 1801 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 1802 : 					else

	jmp	SHORT $LN498@ReadScript
$LN499@ReadScript:

; 1803 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN498@ReadScript:
	jmp	$LN369@ReadScript
$LN500@ReadScript:

; 1804 : 					}
; 1805 : 				else if (strcmp(token,"#IF_ENEMY_AIR_RESPONSE")==0)

	push	OFFSET ??_C@_0BH@CFGHOHFO@?$CDIF_ENEMY_AIR_RESPONSE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN496@ReadScript

; 1806 : 					{
; 1807 : 					if (mec->responses & PRESPONSE_CA || ESquad)

	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+28]
	and	edx, 1
	jne	SHORT $LN494@ReadScript
	cmp	DWORD PTR _ESquad, 0
	je	SHORT $LN495@ReadScript
$LN494@ReadScript:

; 1808 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 1809 : 					else

	jmp	SHORT $LN493@ReadScript
$LN495@ReadScript:

; 1810 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN493@ReadScript:
	jmp	$LN369@ReadScript
$LN496@ReadScript:

; 1811 : 					}
; 1812 : 				else if (strncmp(token,"#IF_ENEMY_CA_ACTIVITY_GT",24)==0)

	push	24					; 00000018H
	push	OFFSET ??_C@_0BJ@GEJCFLGA@?$CDIF_ENEMY_CA_ACTIVITY_GT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN491@ReadScript

; 1813 : 					{
; 1814 : 					int eaa;
; 1815 : 
; 1816 : 					for (i=0,eaa=0; i<NUM_TEAMS; i++)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _eaa$43[ebp], 0
	jmp	SHORT $LN490@ReadScript
$LN489@ReadScript:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN490@ReadScript:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN488@ReadScript

; 1817 : 						{
; 1818 : 						if (TeamInfo[i] && TeamInfo[i]->atm && GetTTRelations(i,mec->team) == War)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4], 0
	je	SHORT $LN487@ReadScript
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	cmp	DWORD PTR [eax+876], 0
	je	SHORT $LN487@ReadScript
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+25]
	push	edx
	movzx	eax, BYTE PTR _i$[ebp]
	push	eax
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 5
	jne	SHORT $LN487@ReadScript

; 1819 : 							eaa += TeamInfo[i]->atm->averageCAMissions;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	eax, DWORD PTR [edx+876]
	movsx	ecx, WORD PTR [eax+154]
	add	ecx, DWORD PTR _eaa$43[ebp]
	mov	DWORD PTR _eaa$43[ebp], ecx
$LN487@ReadScript:

; 1820 : 						}

	jmp	$LN489@ReadScript
$LN488@ReadScript:

; 1821 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1822 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN486@ReadScript

; 1823 : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN486@ReadScript:

; 1824 : 					if (eaa >= atoi(sptr))

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	cmp	DWORD PTR _eaa$43[ebp], eax
	jl	SHORT $LN485@ReadScript

; 1825 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1826 : 					else

	jmp	SHORT $LN484@ReadScript
$LN485@ReadScript:

; 1827 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN484@ReadScript:
	jmp	$LN369@ReadScript
$LN491@ReadScript:

; 1828 : 					}
; 1829 : /*				else if (strncmp(token,"#IF_THREAT_LOC_EQ",17)==0)
; 1830 : 					{
; 1831 : 					if (sptr = strchr(token,' '))
; 1832 : 						sptr++;
; 1833 : 					stack_active[curr_stack] = 0;
; 1834 : 					while (sptr && (atoi(sptr) || *sptr == '0'))
; 1835 : 						{
; 1836 : 						if (atoi(sptr) == ((mec->threat_stats >> 8) & 0x0F))
; 1837 : 							stack_active[curr_stack] = 1;
; 1838 : 						if (sptr = strchr(sptr,' '))
; 1839 : 							sptr++;
; 1840 : 						}
; 1841 : 					}
; 1842 : 				else if (strncmp(token,"#IF_THREAT_TYPE_EQ",18)==0)
; 1843 : 					{
; 1844 : 					if (sptr = strchr(token,' '))
; 1845 : 						sptr++;
; 1846 : 					stack_active[curr_stack] = 0;
; 1847 : 					while (sptr && (atoi(sptr) || *sptr == '0'))
; 1848 : 						{
; 1849 : 						if (atoi(sptr) == ((mec->threat_stats >> 4) & 0x0F))
; 1850 : 							stack_active[curr_stack] = 1;
; 1851 : 						if (sptr = strchr(sptr,' '))
; 1852 : 							sptr++;
; 1853 : 						}
; 1854 : 					}
; 1855 : */
; 1856 : 				else if (strcmp(token,"#IF_HAVE_THREATS")==0)

	push	OFFSET ??_C@_0BB@IGNPKMMF@?$CDIF_HAVE_THREATS?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN482@ReadScript

; 1857 : 					{
; 1858 : 					if (mec->threat_ids[0])

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _mec$[ebp]
	movsx	ecx, WORD PTR [eax+edx+30]
	test	ecx, ecx
	je	SHORT $LN481@ReadScript

; 1859 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1860 : 					else

	jmp	SHORT $LN480@ReadScript
$LN481@ReadScript:

; 1861 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN480@ReadScript:
	jmp	$LN369@ReadScript
$LN482@ReadScript:

; 1862 : 					}
; 1863 : 				else if (strcmp(token,"#IF_ALTERNATE_STRIP")==0)

	push	OFFSET ??_C@_0BE@CCGIDIBK@?$CDIF_ALTERNATE_STRIP?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN478@ReadScript

; 1864 : 					{
; 1865 : 					if (mec->alternate_strip_id != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, DWORD PTR _mec$[ebp]
	add	ecx, 60					; 0000003cH
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN477@ReadScript

; 1866 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 1867 : 					else

	jmp	SHORT $LN476@ReadScript
$LN477@ReadScript:

; 1868 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN476@ReadScript:
	jmp	$LN369@ReadScript
$LN478@ReadScript:

; 1869 : 					}
; 1870 : 				else if (strcmp(token,"#IF_HAVE_PILOT")==0)

	push	OFFSET ??_C@_0P@IIBJFFLN@?$CDIF_HAVE_PILOT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN474@ReadScript

; 1871 : 					{
; 1872 : 					if (!mec->curr_pilot)

	mov	eax, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [eax+212], 0
	jne	SHORT $LN473@ReadScript

; 1873 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 1874 : 					else

	jmp	SHORT $LN472@ReadScript
$LN473@ReadScript:

; 1875 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN472@ReadScript:
	jmp	$LN369@ReadScript
$LN474@ReadScript:

; 1876 : 					}
; 1877 : 				else if (strcmp(token,"#IF_HAVE_WEAPON")==0)

	push	OFFSET ??_C@_0BA@IJFOIFPD@?$CDIF_HAVE_WEAPON?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN470@ReadScript

; 1878 : 					{
; 1879 : 					if (!mec->curr_pilot)

	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	jne	SHORT $LN469@ReadScript

; 1880 : 						stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
	jmp	SHORT $LN466@ReadScript
$LN469@ReadScript:

; 1881 : 					else if (mec->curr_pilot->weapon_data[mec->curr_weapon].weapon_id)

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+211]
	imul	eax, 36					; 00000024H
	movsx	ecx, WORD PTR [ecx+eax+104]
	test	ecx, ecx
	je	SHORT $LN467@ReadScript

; 1882 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1883 : 					else

	jmp	SHORT $LN466@ReadScript
$LN467@ReadScript:

; 1884 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN466@ReadScript:
	jmp	$LN369@ReadScript
$LN470@ReadScript:

; 1885 : 					}
; 1886 : 				else if (strcmp(token,"#IF_FIRST_WEAPON")==0)

	push	OFFSET ??_C@_0BB@ECBMLOJO@?$CDIF_FIRST_WEAPON?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN464@ReadScript

; 1887 : 					{
; 1888 : 					if (mec->curr_weapon)

	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+211]
	test	eax, eax
	je	SHORT $LN463@ReadScript

; 1889 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 1890 : 					else

	jmp	SHORT $LN462@ReadScript
$LN463@ReadScript:

; 1891 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN462@ReadScript:
	jmp	$LN369@ReadScript
$LN464@ReadScript:

; 1892 : 					}
; 1893 : 				else if (strcmp(token,"#IF_WEAPONS_FIRED")==0)

	push	OFFSET ??_C@_0BC@PNEBFBKP@?$CDIF_WEAPONS_FIRED?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN460@ReadScript

; 1894 : 					{
; 1895 : 					stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 1896 : 					for (i=0; i<mec->curr_pilot->weapon_types; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN459@ReadScript
$LN458@ReadScript:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN459@ReadScript:
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	movzx	edx, BYTE PTR [ecx+81]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN457@ReadScript

; 1897 : 						{
; 1898 : 						if (mec->curr_pilot->weapon_data[i].fired)

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	movzx	eax, BYTE PTR [ecx+edx+108]
	test	eax, eax
	je	SHORT $LN456@ReadScript

; 1899 : 							stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN456@ReadScript:

; 1900 : 						}

	jmp	SHORT $LN458@ReadScript
$LN457@ReadScript:

; 1901 : 					}
; 1902 : 				else if (strcmp(token,"#IF_FIRST_PILOT_SET")==0)

	jmp	$LN369@ReadScript
$LN460@ReadScript:
	push	OFFSET ??_C@_0BE@NCBOGAAH@?$CDIF_FIRST_PILOT_SET?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN454@ReadScript

; 1903 : 					{
; 1904 : 					if (mec->curr_data)

	mov	eax, DWORD PTR _mec$[ebp]
	movsx	ecx, WORD PTR [eax+208]
	test	ecx, ecx
	je	SHORT $LN453@ReadScript

; 1905 : 						stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0

; 1906 : 					else

	jmp	SHORT $LN452@ReadScript
$LN453@ReadScript:

; 1907 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN452@ReadScript:
	jmp	$LN369@ReadScript
$LN454@ReadScript:

; 1908 : 					}
; 1909 : 				else if (strcmp(token,"#IF_WEAPON_FIRED")==0)

	push	OFFSET ??_C@_0BB@LEFKKKEP@?$CDIF_WEAPON_FIRED?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN450@ReadScript

; 1910 : 					{
; 1911 : 					if (mec->curr_pilot->weapon_data[mec->curr_weapon].fired)

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+211]
	imul	edx, 36					; 00000024H
	movzx	eax, BYTE PTR [eax+edx+108]
	test	eax, eax
	je	SHORT $LN449@ReadScript

; 1912 : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1

; 1913 : 					else

	jmp	SHORT $LN448@ReadScript
$LN449@ReadScript:

; 1914 : 						stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
$LN448@ReadScript:
	jmp	$LN369@ReadScript
$LN450@ReadScript:

; 1915 : 					}
; 1916 : 				else if (strncmp(token,"#IF_WEAPON_MISSED_EQ",20)==0)

	push	20					; 00000014H
	push	OFFSET ??_C@_0BF@ILDEBBON@?$CDIF_WEAPON_MISSED_EQ?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN446@ReadScript

; 1917 : 					{
; 1918 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1919 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN445@ReadScript

; 1920 : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN445@ReadScript:

; 1921 : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN444@ReadScript:

; 1922 : 					while (sptr && (atoi(sptr) || *sptr == '0'))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	$LN443@ReadScript
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN442@ReadScript
	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN443@ReadScript
$LN442@ReadScript:

; 1923 : 						{
; 1924 : 						if (atoi(sptr) == mec->curr_pilot->weapon_data[mec->curr_weapon].missed)

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	edx, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [edx+212]
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [edx+211]
	imul	edx, 36					; 00000024H
	movzx	ecx, BYTE PTR [ecx+edx+109]
	cmp	eax, ecx
	jne	SHORT $LN441@ReadScript

; 1925 : 							stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN441@ReadScript:

; 1926 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1927 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN440@ReadScript

; 1928 : 							sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN440@ReadScript:

; 1929 : 						}

	jmp	$LN444@ReadScript
$LN443@ReadScript:

; 1930 : 					}
; 1931 : 				else if (strncmp(token,"#IF_WEAPON_HIT_EQ",17)==0)

	jmp	$LN369@ReadScript
$LN446@ReadScript:
	push	17					; 00000011H
	push	OFFSET ??_C@_0BC@KEGODJIP@?$CDIF_WEAPON_HIT_EQ?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN438@ReadScript

; 1932 : 					{
; 1933 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1934 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN437@ReadScript

; 1935 : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN437@ReadScript:

; 1936 : 					stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
$LN436@ReadScript:

; 1937 : 					while (sptr && (atoi(sptr) || *sptr == '0'))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	$LN435@ReadScript
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN434@ReadScript
	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN435@ReadScript
$LN434@ReadScript:

; 1938 : 						{
; 1939 : 						if (atoi(sptr) == mec->curr_pilot->weapon_data[mec->curr_weapon].hit)

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [ecx+211]
	imul	ecx, 36					; 00000024H
	movzx	edx, BYTE PTR [edx+ecx+110]
	cmp	eax, edx
	jne	SHORT $LN433@ReadScript

; 1940 : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN433@ReadScript:

; 1941 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 1942 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN432@ReadScript

; 1943 : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN432@ReadScript:

; 1944 : 						}

	jmp	$LN436@ReadScript
$LN435@ReadScript:

; 1945 : 					}
; 1946 : 				else if (strcmp(token,"#IF_THREAT_IS_MISSILE")==0)

	jmp	$LN369@ReadScript
$LN438@ReadScript:
	push	OFFSET ??_C@_0BG@BLDENJFD@?$CDIF_THREAT_IS_MISSILE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN430@ReadScript

; 1947 : 					{
; 1948 : 					int wid;
; 1949 : 					wid = GetBestVehicleWeapon(mec->threat_ids[mec->curr_data], DefaultDamageMods, LowAir, 0, &i);

	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	0
	push	4
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	mov	edx, DWORD PTR _mec$[ebp]
	movsx	eax, WORD PTR [edx+208]
	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+30]
	push	edx
	call	?GetBestVehicleWeapon@@YAHHPAEW4MoveType@@HPAH@Z ; GetBestVehicleWeapon
	add	esp, 20					; 00000014H
	mov	DWORD PTR _wid$35[ebp], eax

; 1950 : 					if (Falcon4ClassTable[WeaponDataTable[wid].Index].vuClassData.classInfo_[VU_TYPE] == TYPE_MISSILE && Falcon4ClassTable[WeaponDataTable[wid].Index].vuClassData.classInfo_[VU_CLASS] == CLASS_VEHICLE)

	mov	eax, DWORD PTR _wid$35[ebp]
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	edx, WORD PTR [ecx+eax]
	imul	edx, 81					; 00000051H
	add	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax+8]
	cmp	ecx, 6
	jne	SHORT $LN429@ReadScript
	mov	edx, DWORD PTR _wid$35[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+8]
	cmp	eax, 7
	jne	SHORT $LN429@ReadScript

; 1951 : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1

; 1952 : 					else

	jmp	SHORT $LN428@ReadScript
$LN429@ReadScript:

; 1953 : 						stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
$LN428@ReadScript:
	jmp	$LN369@ReadScript
$LN430@ReadScript:

; 1954 : 					}
; 1955 : 				else if (strcmp(token,"#IF_TARGET_VEH_IS_MISSILE")==0)

	push	OFFSET ??_C@_0BK@IALOGJJJ@?$CDIF_TARGET_VEH_IS_MISSILE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN426@ReadScript

; 1956 : 					{
; 1957 : 					int wid;
; 1958 : 					stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 1959 : 					if (ptarget && ptarget->IsUnit())

	cmp	DWORD PTR _ptarget$[ebp], 0
	je	$LN424@ReadScript
	mov	edx, DWORD PTR _ptarget$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptarget$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	$LN424@ReadScript

; 1960 : 						{
; 1961 : 						wid = GetBestVehicleWeapon(((Unit)ptarget)->GetVehicleID(0), DefaultDamageMods, LowAir, 0, &i);

	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	0
	push	4
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	push	0
	mov	ecx, DWORD PTR _ptarget$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	push	ecx
	call	?GetBestVehicleWeapon@@YAHHPAEW4MoveType@@HPAH@Z ; GetBestVehicleWeapon
	add	esp, 20					; 00000014H
	mov	DWORD PTR _wid$42[ebp], eax

; 1962 : 						if (Falcon4ClassTable[WeaponDataTable[wid].Index].vuClassData.classInfo_[VU_TYPE] == TYPE_MISSILE && Falcon4ClassTable[WeaponDataTable[wid].Index].vuClassData.classInfo_[VU_CLASS] == CLASS_VEHICLE)

	mov	edx, DWORD PTR _wid$42[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx+8]
	cmp	eax, 6
	jne	SHORT $LN424@ReadScript
	mov	ecx, DWORD PTR _wid$42[ebp]
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	eax, WORD PTR [edx+ecx]
	imul	eax, 81					; 00000051H
	add	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 7
	jne	SHORT $LN424@ReadScript

; 1963 : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN424@ReadScript:

; 1964 : 						}
; 1965 : 					}

	jmp	$LN369@ReadScript
$LN426@ReadScript:

; 1966 : 				else if (strcmp(token,"#IF_AWACS")==0)

	push	OFFSET ??_C@_09HOJEAAHG@?$CDIF_AWACS?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN422@ReadScript

; 1967 : 					{
; 1968 : 					Flight	flight = (Flight) vuDatabase->Find(mec->awacs_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR [edx+84]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$29[ebp], eax

; 1969 : 					if (flight)

	cmp	DWORD PTR _flight$29[ebp], 0
	je	SHORT $LN421@ReadScript

; 1970 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1971 : 					else

	jmp	SHORT $LN420@ReadScript
$LN421@ReadScript:

; 1972 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN420@ReadScript:
	jmp	$LN369@ReadScript
$LN422@ReadScript:

; 1973 : 					}
; 1974 : 				else if (strcmp(token,"#IF_JSTAR")==0)

	push	OFFSET ??_C@_09JMILBEPH@?$CDIF_JSTAR?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN418@ReadScript

; 1975 : 					{
; 1976 : 					Flight	flight = (Flight) vuDatabase->Find(mec->jstar_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR [edx+92]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$31[ebp], eax

; 1977 : 					if (flight)

	cmp	DWORD PTR _flight$31[ebp], 0
	je	SHORT $LN417@ReadScript

; 1978 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1979 : 					else

	jmp	SHORT $LN416@ReadScript
$LN417@ReadScript:

; 1980 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN416@ReadScript:
	jmp	$LN369@ReadScript
$LN418@ReadScript:

; 1981 : 					}
; 1982 : 				else if (strcmp(token,"#IF_TANKER")==0)

	push	OFFSET ??_C@_0L@IOLDENMM@?$CDIF_TANKER?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN414@ReadScript

; 1983 : 					{
; 1984 : 					Flight	flight = (Flight) vuDatabase->Find(mec->tanker_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR [edx+108]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$15[ebp], eax

; 1985 : 					if (flight)

	cmp	DWORD PTR _flight$15[ebp], 0
	je	SHORT $LN413@ReadScript

; 1986 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1987 : 					else

	jmp	SHORT $LN412@ReadScript
$LN413@ReadScript:

; 1988 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN412@ReadScript:
	jmp	$LN369@ReadScript
$LN414@ReadScript:

; 1989 : 				}
; 1990 : 				else if (strcmp(token,"#IF_ECM")==0)

	push	OFFSET ??_C@_07MEDEGODM@?$CDIF_ECM?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN410@ReadScript

; 1991 : 				{
; 1992 : 				    Flight	flight = (Flight) vuDatabase->Find(mec->ecm_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR [edx+100]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$34[ebp], eax

; 1993 : 				    if (flight)

	cmp	DWORD PTR _flight$34[ebp], 0
	je	SHORT $LN409@ReadScript

; 1994 : 				        stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 1995 : 				    else

	jmp	SHORT $LN408@ReadScript
$LN409@ReadScript:

; 1996 : 				        stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN408@ReadScript:
	jmp	$LN369@ReadScript
$LN410@ReadScript:

; 1997 : 				}
; 1998 : 
; 1999 : 				else if (strncmp(token,"#IF_PACKAGE_SUCCESS_EQ",22)==0)

	push	22					; 00000016H
	push	OFFSET ??_C@_0BH@KFLLPBHK@?$CDIF_PACKAGE_SUCCESS_EQ?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN406@ReadScript

; 2000 : 					{
; 2001 : 					sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 2002 : 					if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN405@ReadScript

; 2003 : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN405@ReadScript:

; 2004 : 					stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN404@ReadScript:

; 2005 : 					while (sptr && (atoi(sptr) || *sptr == '0'))

	cmp	DWORD PTR _sptr$[ebp], 0
	je	$LN403@ReadScript
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN402@ReadScript
	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN403@ReadScript
$LN402@ReadScript:

; 2006 : 						{
; 2007 : 						if (atoi(sptr) == mec->pack_success)

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	cmp	eax, edx
	jne	SHORT $LN401@ReadScript

; 2008 : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN401@ReadScript:

; 2009 : 						sptr = strchr(sptr,' ');

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 2010 : 						if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN400@ReadScript

; 2011 : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN400@ReadScript:

; 2012 : 						}

	jmp	$LN404@ReadScript
$LN403@ReadScript:

; 2013 : 					}
; 2014 : 				else if (strcmp(token,"#IF_NOT_SUPPORT_HEADER")==0)

	jmp	$LN369@ReadScript
$LN406@ReadScript:
	push	OFFSET ??_C@_0BH@CJDAIELH@?$CDIF_NOT_SUPPORT_HEADER?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN398@ReadScript

; 2015 : 					stack_active[curr_stack] = !mec->curr_data;

	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+208]
	test	edx, edx
	jne	SHORT $LN600@ReadScript
	mov	DWORD PTR tv921[ebp], 1
	jmp	SHORT $LN601@ReadScript
$LN600@ReadScript:
	mov	DWORD PTR tv921[ebp], 0
$LN601@ReadScript:
	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	ecx, DWORD PTR tv921[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], ecx
	jmp	$LN369@ReadScript
$LN398@ReadScript:

; 2016 : 				else if (strcmp(token,"#IF_PLAYER_PILOT")==0)

	push	OFFSET ??_C@_0BB@DELDEFBL@?$CDIF_PLAYER_PILOT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN396@ReadScript

; 2017 : 					{
; 2018 : 					if (CPilotData)

	cmp	DWORD PTR _CPilotData, 0
	je	SHORT $LN395@ReadScript

; 2019 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 2020 : 					else

	jmp	SHORT $LN394@ReadScript
$LN395@ReadScript:

; 2021 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN394@ReadScript:
	jmp	$LN369@ReadScript
$LN396@ReadScript:

; 2022 : 					}
; 2023 : 				else if (strcmp(token,"#IF_RELATED_EVENTS")==0)

	push	OFFSET ??_C@_0BD@FDANNMCJ@?$CDIF_RELATED_EVENTS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN392@ReadScript

; 2024 : 					{
; 2025 : 					if (mec->related_events[0])

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+eax+236], 0
	je	SHORT $LN391@ReadScript

; 2026 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 2027 : 					else

	jmp	SHORT $LN390@ReadScript
$LN391@ReadScript:

; 2028 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN390@ReadScript:
	jmp	$LN369@ReadScript
$LN392@ReadScript:

; 2029 : 					}
; 2030 : 				else if (strcmp(token,"#IF_DIVERTED")==0)

	push	OFFSET ??_C@_0N@GLNDBAKF@?$CDIF_DIVERTED?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN388@ReadScript

; 2031 : 					{
; 2032 : 					if (flight_data->old_mission != flight_data->mission)

	mov	edx, DWORD PTR _flight_data$[ebp]
	movzx	eax, BYTE PTR [edx+62]
	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	cmp	eax, edx
	je	SHORT $LN387@ReadScript

; 2033 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 2034 : 					else

	jmp	SHORT $LN386@ReadScript
$LN387@ReadScript:

; 2035 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN386@ReadScript:
	jmp	$LN369@ReadScript
$LN388@ReadScript:

; 2036 : 					}
; 2037 : 				else if (strcmp(token,"#IF_OFFENSIVE_PLANNED")==0)

	push	OFFSET ??_C@_0BG@IMPLIODD@?$CDIF_OFFENSIVE_PLANNED?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN384@ReadScript

; 2038 : 					{
; 2039 : 					if (TeamInfo[mec->team]->GetGroundAction()->actionType >= GACTION_MINOROFFENSIVE)

	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	edx, BYTE PTR [eax+16]
	cmp	edx, 3
	jl	SHORT $LN383@ReadScript

; 2040 : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 2041 : 					else

	jmp	SHORT $LN382@ReadScript
$LN383@ReadScript:

; 2042 : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN382@ReadScript:
	jmp	$LN369@ReadScript
$LN384@ReadScript:

; 2043 : 					}
; 2044 : 				else if (strcmp(token,"#IF_DEFENSIVE_PLANNED")==0)

	push	OFFSET ??_C@_0BG@CCLGKGNJ@?$CDIF_DEFENSIVE_PLANNED?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN380@ReadScript

; 2045 : 					{
; 2046 : 					if (TeamInfo[mec->team]->GetGroundAction()->actionType == GACTION_DEFENSIVE && TheCampaign.CurrentTime + 30*CampaignMinutes > TeamInfo[mec->team]->GetGroundAction()->actionTime)

	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	edx, BYTE PTR [eax+16]
	cmp	edx, 1
	jne	SHORT $LN379@ReadScript
	mov	esi, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	add	esi, 1800000				; 001b7740H
	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	cmp	esi, DWORD PTR [eax]
	jbe	SHORT $LN379@ReadScript

; 2047 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 2048 : 					else

	jmp	SHORT $LN378@ReadScript
$LN379@ReadScript:

; 2049 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN378@ReadScript:
	jmp	$LN369@ReadScript
$LN380@ReadScript:

; 2050 : 					}
; 2051 : 				else if (strcmp(token,"#IF_CLEAR_WEATHER")==0)

	push	OFFSET ??_C@_0BC@OBPCDIPD@?$CDIF_CLEAR_WEATHER?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN376@ReadScript

; 2052 : 					{
; 2053 : 					int		cc =	(((WeatherClass*)realWeather)->GetCloudCover(mec->tx,mec->ty) +
; 2054 : 									((WeatherClass*)realWeather)->GetCloudCover(mec->tx-1,mec->ty) +
; 2055 : 									((WeatherClass*)realWeather)->GetCloudCover(mec->tx,mec->ty-1) +
; 2056 : 									((WeatherClass*)realWeather)->GetCloudCover(mec->tx+1,mec->ty) +
; 2057 : 									((WeatherClass*)realWeather)->GetCloudCover(mec->tx,mec->ty+1))/5;

	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, WORD PTR [edx+186]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, WORD PTR [ecx+184]
	push	edx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?GetCloudCover@WeatherClass@@QAEHFF@Z	; WeatherClass::GetCloudCover
	mov	esi, eax
	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, WORD PTR [eax+186]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	movsx	eax, WORD PTR [edx+184]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?GetCloudCover@WeatherClass@@QAEHFF@Z	; WeatherClass::GetCloudCover
	add	esi, eax
	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+186]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, WORD PTR [eax+184]
	push	ecx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?GetCloudCover@WeatherClass@@QAEHFF@Z	; WeatherClass::GetCloudCover
	add	esi, eax
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, WORD PTR [edx+186]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+184]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?GetCloudCover@WeatherClass@@QAEHFF@Z	; WeatherClass::GetCloudCover
	add	esi, eax
	mov	eax, DWORD PTR _mec$[ebp]
	movsx	ecx, WORD PTR [eax+186]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, WORD PTR [edx+184]
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?GetCloudCover@WeatherClass@@QAEHFF@Z	; WeatherClass::GetCloudCover
	add	eax, esi
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _cc$10[ebp], eax

; 2058 : 					if (cc < 2)

	cmp	DWORD PTR _cc$10[ebp], 2
	jge	SHORT $LN375@ReadScript

; 2059 : 						stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 2060 : 					else

	jmp	SHORT $LN374@ReadScript
$LN375@ReadScript:

; 2061 : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN374@ReadScript:
	jmp	$LN369@ReadScript
$LN376@ReadScript:

; 2062 : 					}
; 2063 : 				else if (strcmp(token,"#IF_TACTICAL_ENGAGEMENT")==0)

	push	OFFSET ??_C@_0BI@NEHCGBKJ@?$CDIF_TACTICAL_ENGAGEMENT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN372@ReadScript

; 2064 : 					{
; 2065 : 					if (FalconLocalGame && FalconLocalGame->GetGameType() == game_TacticalEngagement)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN602@ReadScript
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv1123[ebp], eax
	jmp	SHORT $LN603@ReadScript
$LN602@ReadScript:
	mov	DWORD PTR tv1123[ebp], 0
$LN603@ReadScript:
	cmp	DWORD PTR tv1123[ebp], 0
	je	SHORT $LN371@ReadScript
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN604@ReadScript
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv1137[ebp], eax
	jmp	SHORT $LN605@ReadScript
$LN604@ReadScript:
	mov	DWORD PTR tv1137[ebp], 0
$LN605@ReadScript:
	mov	ecx, DWORD PTR tv1137[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 3
	jne	SHORT $LN371@ReadScript

; 2066 : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1

; 2067 : 					else

	jmp	SHORT $LN370@ReadScript
$LN371@ReadScript:

; 2068 : 						stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
$LN370@ReadScript:

; 2069 : 					}
; 2070 : 				else

	jmp	SHORT $LN369@ReadScript
$LN372@ReadScript:

; 2071 : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN369@ReadScript:

; 2072 : 				continue;

	jmp	$LN617@ReadScript
$LN575@ReadScript:

; 2073 : 				}
; 2074 : 
; 2075 : 			// special tokens
; 2076 : 			if (strcmp(token,"#EOL")==0)

	push	OFFSET ??_C@_04DEHMDPMN@?$CDEOL?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN368@ReadScript

; 2077 : 				{
; 2078 : 				if (g_bBriefHTML && (!win))

	movzx	edx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	edx, edx
	je	SHORT $LN367@ReadScript
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN367@ReadScript

; 2079 : 					AddStringToBuffer("<p>",current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_03HBHCBENH@?$DMp?$DO?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN367@ReadScript:

; 2080 : 				AddEOLToBrief(current_line,win,brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	call	?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z	; AddEOLToBrief
	add	esp, 12					; 0000000cH

; 2081 : 				continue;

	jmp	$LN617@ReadScript
	jmp	$LN334@ReadScript
$LN368@ReadScript:

; 2082 : 				}
; 2083 : 			else if (strcmp(token,"#SPACE")==0)

	push	OFFSET ??_C@_06PCLFABJD@?$CDSPACE?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN365@ReadScript

; 2084 : 				{
; 2085 : 				if (g_bBriefHTML && (!win))

	movzx	edx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	edx, edx
	je	SHORT $LN364@ReadScript
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN364@ReadScript

; 2086 : 					AddStringToBuffer("&nbsp;",current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_06ODLOODK@?$CGnbsp?$DL?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2087 : 				else

	jmp	SHORT $LN363@ReadScript
$LN364@ReadScript:

; 2088 : 					AddStringToBuffer(" ",current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN363@ReadScript:

; 2089 : 				continue;

	jmp	$LN617@ReadScript
	jmp	$LN334@ReadScript
$LN365@ReadScript:

; 2090 : 				}
; 2091 : 			else if (strcmp(token,"#COLON")==0)

	push	OFFSET ??_C@_06LFHPLCJ@?$CDCOLON?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN361@ReadScript

; 2092 : 				{
; 2093 : 				AddStringToBuffer(":",current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2094 : 				continue;

	jmp	$LN617@ReadScript
	jmp	$LN334@ReadScript
$LN361@ReadScript:

; 2095 : 				}
; 2096 : 			else if (strncmp(token,"#TAB",4)==0)

	push	4
	push	OFFSET ??_C@_04EIMEAPLD@?$CDTAB?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN359@ReadScript

; 2097 : 				{
; 2098 : 				sptr = token+4;

	lea	edx, DWORD PTR _token$[ebp+4]
	mov	DWORD PTR _sptr$[ebp], edx

; 2099 : 				i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 2100 : 				if ((strncmp(filename,"FOrdWeap.db",11)==0) || (strncmp(filename,"FOrdEvt.db",10) ==0)) 	//THW Kludge to remove tab tags from debrief 

	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@JBIFENN@FOrdWeap?4db?$AA@
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN357@ReadScript
	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@NACCMEFJ@FOrdEvt?4db?$AA@
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN358@ReadScript
$LN357@ReadScript:

; 2101 : 					AddTabToDebrief(i,current_line,NULL,brief);

	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	call	?AddTabToDebrief@@YAXHPADPAVC_Window@@0@Z ; AddTabToDebrief
	add	esp, 16					; 00000010H

; 2102 : 				else

	jmp	SHORT $LN356@ReadScript
$LN358@ReadScript:

; 2103 : 					AddTabToBrief(i,current_line,win,brief);

	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToBrief
	add	esp, 16					; 00000010H
$LN356@ReadScript:

; 2104 : 				continue;

	jmp	$LN617@ReadScript
	jmp	$LN334@ReadScript
$LN359@ReadScript:

; 2105 : 				}
; 2106 : 			else if (strncmp(token,"#COLOR",6)==0)

	push	6
	push	OFFSET ??_C@_06ONCAKGHE@?$CDCOLOR?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN354@ReadScript

; 2107 : 				{
; 2108 : 				AddStringToBrief(current_line,win,brief);

	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 2109 : 				sptr = token+6;

	lea	edx, DWORD PTR _token$[ebp+6]
	mov	DWORD PTR _sptr$[ebp], edx

; 2110 : 				i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 2111 : 				if (win)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN351@ReadScript

; 2112 : 					{
; 2113 : 					switch (i)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv1246[ebp], ecx
	cmp	DWORD PTR tv1246[ebp], 1
	je	SHORT $LN350@ReadScript
	cmp	DWORD PTR tv1246[ebp], 2
	je	SHORT $LN349@ReadScript
	jmp	SHORT $LN348@ReadScript
$LN350@ReadScript:

; 2114 : 						{
; 2115 : 						case 1:
; 2116 : 							CBColor = win->ReverseText;

	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	DWORD PTR _CBColor, eax

; 2117 : 							break;

	jmp	SHORT $LN351@ReadScript
$LN349@ReadScript:

; 2118 : 						case 2:
; 2119 : 							CBColor = win->DisabledText;

	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR _CBColor, edx

; 2120 : 							break;

	jmp	SHORT $LN351@ReadScript
$LN348@ReadScript:

; 2121 : 						default:
; 2122 : 							CBColor = win->NormalText;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR _CBColor, ecx
$LN351@ReadScript:

; 2123 : 							break;
; 2124 : 						}
; 2125 : 					}
; 2126 : 				continue;

	jmp	$LN617@ReadScript
	jmp	$LN334@ReadScript
$LN354@ReadScript:

; 2127 : 				}
; 2128 : 			else if (strncmp(token,"#FONT",5)==0)

	push	5
	push	OFFSET ??_C@_05HPBCPENM@?$CDFONT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN346@ReadScript

; 2129 : 				{
; 2130 : 				AddStringToBrief(current_line,win,brief);

	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	call	?AddStringToBrief@@YAXPADPAVC_Window@@0@Z ; AddStringToBrief
	add	esp, 12					; 0000000cH

; 2131 : 				sptr = token+5;

	lea	eax, DWORD PTR _token$[ebp+5]
	mov	DWORD PTR _sptr$[ebp], eax

; 2132 : 				i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 2133 : 				if (win)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN345@ReadScript

; 2134 : 					font = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _font$[ebp], edx
$LN345@ReadScript:

; 2135 : 				}

	jmp	$LN334@ReadScript
$LN346@ReadScript:

; 2136 : 			else if (strncmp(token,"#ENDFONT",8)==0)

	push	8
	push	OFFSET ??_C@_08PDBNACPI@?$CDENDFONT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN343@ReadScript

; 2137 : 				{
; 2138 : 				AddFontTextToBrief(current_line,font,win,brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	call	?AddFontTextToBrief@@YAXPADHPAVC_Window@@0@Z ; AddFontTextToBrief
	add	esp, 16					; 00000010H

; 2139 : 				font = 0;

	mov	DWORD PTR _font$[ebp], 0
	jmp	$LN334@ReadScript
$LN343@ReadScript:

; 2140 : 				}
; 2141 : 			else if (strncmp(token,"#INC",4)==0)

	push	4
	push	OFFSET ??_C@_04PIPAPGIN@?$CDINC?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN334@ReadScript

; 2142 : 				{
; 2143 : 				sptr = token+5;

	lea	eax, DWORD PTR _token$[ebp+5]
	mov	DWORD PTR _sptr$[ebp], eax

; 2144 : 				if (strcmp(sptr,"PILOT")==0)

	push	OFFSET ??_C@_05GDIDNJLL@PILOT?$AA@
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN336@ReadScript

; 2145 : 					{
; 2146 : 					int slot;
; 2147 : 					if (mec->curr_pilot)

	mov	edx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [edx+212], 0
	je	SHORT $LN339@ReadScript

; 2148 : 						{
; 2149 : 						slot = mec->curr_pilot->aircraft_slot + 1;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	movzx	edx, BYTE PTR [ecx+60]
	add	edx, 1
	mov	DWORD PTR _slot$59[ebp], edx

; 2150 : 						mec->curr_pilot = NULL;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	DWORD PTR [eax+212], 0

; 2151 : 						}
; 2152 : 					else

	jmp	SHORT $LN338@ReadScript
$LN339@ReadScript:

; 2153 : 						slot = 0;

	mov	DWORD PTR _slot$59[ebp], 0
$LN338@ReadScript:

; 2154 : 					while (!mec->curr_pilot && slot < PILOTS_PER_FLIGHT)

	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	jne	SHORT $LN336@ReadScript
	cmp	DWORD PTR _slot$59[ebp], 4
	jge	SHORT $LN336@ReadScript

; 2155 : 						{
; 2156 : 						mec->curr_pilot = mec->FindPilotDataFromAC(flight_data, slot);

	mov	edx, DWORD PTR _slot$59[ebp]
	push	edx
	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	call	?FindPilotDataFromAC@MissionEvaluationClass@@QAEPAVPilotDataClass@@PAVFlightDataClass@@H@Z ; MissionEvaluationClass::FindPilotDataFromAC
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	DWORD PTR [ecx+212], eax

; 2157 : 						slot++;

	mov	edx, DWORD PTR _slot$59[ebp]
	add	edx, 1
	mov	DWORD PTR _slot$59[ebp], edx

; 2158 : 						}

	jmp	SHORT $LN338@ReadScript
$LN336@ReadScript:

; 2159 : 					}
; 2160 : 				if (strcmp(sptr,"WEAPON")==0)

	push	OFFSET ??_C@_06GANGLKEK@WEAPON?$AA@
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN335@ReadScript

; 2161 : 					mec->curr_weapon++;

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	dl, BYTE PTR [ecx+211]
	add	dl, 1
	mov	eax, DWORD PTR _mec$[ebp]
	mov	BYTE PTR [eax+211], dl
$LN335@ReadScript:

; 2162 : 				if (strcmp(sptr,"DATA")==0)

	push	OFFSET ??_C@_04DFNBDBBL@DATA?$AA@
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN334@ReadScript

; 2163 : 					mec->curr_data++;

	mov	edx, DWORD PTR _mec$[ebp]
	mov	ax, WORD PTR [edx+208]
	add	ax, 1
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	WORD PTR [ecx+208], ax
$LN334@ReadScript:

; 2164 : 				}
; 2165 : 
; 2166 : 			// Text string ids
; 2167 : 			if (atoi(token) > 0)

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN333@ReadScript

; 2168 : 				AddIndexedStringToBuffer(atoi(token), current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN333@ReadScript:

; 2169 : 			// Add all our script tokens here
; 2170 : 			else if (strcmp(token,"FLIGHT_NUM")==0)

	push	OFFSET ??_C@_0L@HBLJNPMB@FLIGHT_NUM?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN331@ReadScript

; 2171 : 				AddNumberToBuffer(flight_data->camp_id, current_line);	

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight_data$[ebp]
	movsx	edx, WORD PTR [ecx+36]
	push	edx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN331@ReadScript:

; 2172 : 			else if (strcmp(token,"FLIGHT_NAME")==0)

	push	OFFSET ??_C@_0M@LOGHDAHB@FLIGHT_NAME?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN329@ReadScript

; 2173 : 				AddStringToBuffer(flight_data->name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN329@ReadScript:

; 2174 : 			else if (strcmp(token,"PLANE_NAME")==0)

	push	OFFSET ??_C@_0L@EHHCCPNN@PLANE_NAME?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN327@ReadScript

; 2175 : 				{
; 2176 : 				AddStringToBuffer(flight_data->name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2177 : 				AddNumberToBuffer(mec->curr_pilot->aircraft_slot+1, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	movzx	eax, BYTE PTR [edx+60]
	add	eax, 1
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN327@ReadScript:

; 2178 : 				}
; 2179 : 			else if (strcmp(token,"MISSION_NAME")==0)

	push	OFFSET ??_C@_0N@EONIOOBP@MISSION_NAME?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN325@ReadScript

; 2180 : 				AddIndexedStringToBuffer(300+flight_data->mission, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _flight_data$[ebp]
	movzx	ecx, BYTE PTR [eax+61]
	add	ecx, 300				; 0000012cH
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN325@ReadScript:

; 2181 : 			else if (strcmp(token,"OLD_MISSION_NAME")==0)

	push	OFFSET ??_C@_0BB@KLMDELEG@OLD_MISSION_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN323@ReadScript

; 2182 : 				AddIndexedStringToBuffer(300+flight_data->old_mission, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+62]
	add	edx, 300				; 0000012cH
	push	edx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN323@ReadScript:

; 2183 : 			else if (strncmp(token,"MISSION_DESCRIPTION",19)==0)

	push	19					; 00000013H
	push	OFFSET ??_C@_0BE@JLKIMEFN@MISSION_DESCRIPTION?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN321@ReadScript

; 2184 : 				{
; 2185 : 				sptr = token + 19;

	lea	ecx, DWORD PTR _token$[ebp+19]
	mov	DWORD PTR _sptr$[ebp], ecx

; 2186 : 				i = sptr[0] - '1';

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	sub	ecx, 49					; 00000031H
	mov	DWORD PTR _i$[ebp], ecx

; 2187 : 				sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx

; 2188 : 				if (sptr[0] == ' ')

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN320@ReadScript

; 2189 : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN320@ReadScript:

; 2190 : 				if (sptr[i] == 'O')

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 79					; 0000004fH
	jne	SHORT $LN319@ReadScript

; 2191 : 					AddIndexedStringToBuffer(400+i*50+flight_data->old_mission, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 50					; 00000032H
	mov	edx, DWORD PTR _flight_data$[ebp]
	movzx	eax, BYTE PTR [edx+62]
	lea	ecx, DWORD PTR [ecx+eax+400]
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2192 : 				else

	jmp	SHORT $LN318@ReadScript
$LN319@ReadScript:

; 2193 : 					AddIndexedStringToBuffer(400+i*50+flight_data->mission, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 50					; 00000032H
	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	lea	eax, DWORD PTR [eax+edx+400]
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN318@ReadScript:
	jmp	$LN103@ReadScript
$LN321@ReadScript:

; 2194 : 				}
; 2195 : 			else if (strncmp(token,"OLD_MISSION_DESCRIPTION",23)==0)

	push	23					; 00000017H
	push	OFFSET ??_C@_0BI@JCKFPPPN@OLD_MISSION_DESCRIPTION?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN316@ReadScript

; 2196 : 				{
; 2197 : 				sptr = token + 23;

	lea	edx, DWORD PTR _token$[ebp+23]
	mov	DWORD PTR _sptr$[ebp], edx

; 2198 : 				i = sptr[0] - '1';

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	sub	edx, 49					; 00000031H
	mov	DWORD PTR _i$[ebp], edx

; 2199 : 				AddIndexedStringToBuffer(400+i*50+flight_data->old_mission, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 50					; 00000032H
	mov	edx, DWORD PTR _flight_data$[ebp]
	movzx	eax, BYTE PTR [edx+62]
	lea	ecx, DWORD PTR [ecx+eax+400]
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN316@ReadScript:

; 2200 : 				}
; 2201 : 			else if (strncmp(token,"PACKAGE_MISSION_DESCRIPTION",27)==0)

	push	27					; 0000001bH
	push	OFFSET ??_C@_0BM@JMBJCAAD@PACKAGE_MISSION_DESCRIPTION?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN314@ReadScript

; 2202 : 				{
; 2203 : 				sptr = token + 27;

	lea	eax, DWORD PTR _token$[ebp+27]
	mov	DWORD PTR _sptr$[ebp], eax

; 2204 : 				i = sptr[0] - '1';

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	sub	eax, 49					; 00000031H
	mov	DWORD PTR _i$[ebp], eax

; 2205 : 				AddIndexedStringToBuffer(900+i*50+mec->package_mission, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 50					; 00000032H
	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	lea	edx, DWORD PTR [edx+ecx+900]
	push	edx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN314@ReadScript:

; 2206 : 				}
; 2207 : 			else if (strncmp(token,"PACKAGE_TARGET_NAME",19)==0)

	push	19					; 00000013H
	push	OFFSET ??_C@_0BE@GIIEOPEC@PACKAGE_TARGET_NAME?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN312@ReadScript

; 2208 : 				{
; 2209 : 				char		name[81];
; 2210 : 				sptr = token + 20;

	lea	ecx, DWORD PTR _token$[ebp+20]
	mov	DWORD PTR _sptr$[ebp], ecx

; 2211 : 				GetEntityName(ptarget, name, sptr[0], sptr[1]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR _name$94[ebp]
	push	edx
	mov	eax, DWORD PTR _ptarget$[ebp]
	push	eax
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H

; 2212 : 				AddStringToBuffer(name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$94[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN312@ReadScript:

; 2213 : 				}
; 2214 : 			else if (strncmp(token,"OLD_TARGET_NAME",11)==0)

	push	11					; 0000000bH
	push	OFFSET ??_C@_0BA@BPIADFBG@OLD_TARGET_NAME?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN310@ReadScript

; 2215 : 				{
; 2216 : 				_TCHAR		name[81];
; 2217 : 				sptr = token + 12;

	lea	ecx, DWORD PTR _token$[ebp+12]
	mov	DWORD PTR _sptr$[ebp], ecx

; 2218 : 				GetEntityName(NULL, name, sptr[0], sptr[1]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR _name$95[ebp]
	push	edx
	push	0
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H

; 2219 : 				AddStringToBuffer(name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$95[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN310@ReadScript:

; 2220 : 				}
; 2221 : 			else if (strncmp(token,"TARGET_NAME",11)==0)

	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@NBJLGBNL@TARGET_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN308@ReadScript

; 2222 : 				{
; 2223 : 				_TCHAR		name[81];
; 2224 : 				sptr = token + 12;

	lea	eax, DWORD PTR _token$[ebp+12]
	mov	DWORD PTR _sptr$[ebp], eax

; 2225 : 				GetEntityName(target, name, sptr[0], sptr[1]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR _name$96[ebp]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H

; 2226 : 				AddStringToBuffer(name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$96[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN308@ReadScript:

; 2227 : 				}
; 2228 : 			else if (strcmp(token,"TARGET_VEHICLE_NAME")==0)

	push	OFFSET ??_C@_0BE@HAAKOLEJ@TARGET_VEHICLE_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN306@ReadScript

; 2229 : 				{
; 2230 : 				VehicleClassDataType *vc;
; 2231 : 				if (ptarget && ptarget->IsUnit())

	cmp	DWORD PTR _ptarget$[ebp], 0
	je	$LN303@ReadScript
	mov	eax, DWORD PTR _ptarget$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ptarget$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	$LN303@ReadScript

; 2232 : 					{
; 2233 : 					Unit	u = (UnitClass*) ptarget;

	mov	ecx, DWORD PTR _ptarget$[ebp]
	mov	DWORD PTR _u$65[ebp], ecx

; 2234 : 					if (u->Father())

	mov	edx, DWORD PTR _u$65[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$65[ebp]
	mov	edx, DWORD PTR [eax+504]
	call	edx
	test	eax, eax
	je	SHORT $LN304@ReadScript

; 2235 : 						u = u->GetFirstUnitElement();

	mov	eax, DWORD PTR _u$65[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$65[ebp]
	mov	eax, DWORD PTR [edx+956]
	call	eax
	mov	DWORD PTR _u$65[ebp], eax
$LN304@ReadScript:

; 2236 : 					if (u)

	cmp	DWORD PTR _u$65[ebp], 0
	je	SHORT $LN303@ReadScript

; 2237 : 						{
; 2238 : 						vc = (VehicleClassDataType*) Falcon4ClassTable[u->GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _u$65[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$27[ebp], eax

; 2239 : 						AddStringToBuffer(vc->Name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vc$27[ebp]
	add	edx, 8
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN303@ReadScript:

; 2240 : 						}
; 2241 : 					}
; 2242 : 				}

	jmp	$LN103@ReadScript
$LN306@ReadScript:

; 2243 : 			else if (strcmp(token,"TARGET_OWNER")==0)

	push	OFFSET ??_C@_0N@KPBELBIC@TARGET_OWNER?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN301@ReadScript

; 2244 : 				{
; 2245 : 				// HACKED country adjective stuff (Used only for modification to "aircraft")
; 2246 : 				if (ptarget)

	cmp	DWORD PTR _ptarget$[ebp], 0
	je	SHORT $LN298@ReadScript

; 2247 : 					{
; 2248 : 					if (gLangIDNum == F4LANG_GERMAN)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 3		; gLangIDNum
	jne	SHORT $LN299@ReadScript

; 2249 : 						AddIndexedStringToBuffer(ConvertTeamToStringIndex(ptarget->GetOwner(), F4LANG_FEMININE), current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _ptarget$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	push	edx
	call	?ConvertTeamToStringIndex@@YAHHHHH@Z	; ConvertTeamToStringIndex
	add	esp, 16					; 00000010H
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2250 : //						AddIndexedStringToBuffer(3821 + 20*ptarget->GetOwner(), current_line);
; 2251 : 					else

	jmp	SHORT $LN298@ReadScript
$LN299@ReadScript:

; 2252 : 						AddIndexedStringToBuffer(ConvertTeamToStringIndex(ptarget->GetOwner()), current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _ptarget$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	ecx, al
	push	ecx
	call	?ConvertTeamToStringIndex@@YAHHHHH@Z	; ConvertTeamToStringIndex
	add	esp, 16					; 00000010H
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN298@ReadScript:

; 2253 : //						AddIndexedStringToBuffer(3820 + 20*ptarget->GetOwner(), current_line);
; 2254 : 					}
; 2255 : 				}

	jmp	$LN103@ReadScript
$LN301@ReadScript:

; 2256 : 			else if (strcmp(token,"PACKAGE_TARGET_BUILDING")==0)

	push	OFFSET ??_C@_0BI@MMPDJKCG@PACKAGE_TARGET_BUILDING?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN296@ReadScript

; 2257 : 				{
; 2258 : 				if (ptarget && ptarget->GetClass() == CLASS_OBJECTIVE && mec->package_element->target_building < FEATURES_PER_OBJ)

	cmp	DWORD PTR _ptarget$[ebp], 0
	je	SHORT $LN295@ReadScript
	mov	ecx, DWORD PTR _ptarget$[ebp]
	call	?GetClass@CampBaseClass@@QBEEXZ		; CampBaseClass::GetClass
	movzx	eax, al
	cmp	eax, 4
	jne	SHORT $LN295@ReadScript
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+82]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN295@ReadScript

; 2259 : 					{
; 2260 : 					FeatureClassDataType *fc;
; 2261 : 					fc = GetFeatureClassData (((Objective)ptarget)->GetFeatureID(mec->package_element->target_building));

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+82]
	push	eax
	mov	ecx, DWORD PTR _ptarget$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$13[ebp], eax

; 2262 : 					AddStringToBuffer(fc->Name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fc$13[ebp]
	add	edx, 8
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN295@ReadScript:

; 2263 : 					}
; 2264 : 				}

	jmp	$LN103@ReadScript
$LN296@ReadScript:

; 2265 : 			else if (strcmp(token,"TARGET_BUILDING")==0)

	push	OFFSET ??_C@_0BA@JIPHAHDE@TARGET_BUILDING?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN293@ReadScript

; 2266 : 				{
; 2267 : 				if (target && target->GetClass() == CLASS_OBJECTIVE && flight_data->target_building < FEATURES_PER_OBJ)

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN292@ReadScript
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetClass@CampBaseClass@@QBEEXZ		; CampBaseClass::GetClass
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN292@ReadScript
	mov	edx, DWORD PTR _flight_data$[ebp]
	movzx	eax, BYTE PTR [edx+82]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN292@ReadScript

; 2268 : 					{
; 2269 : 					FeatureClassDataType *fc;
; 2270 : 					fc = GetFeatureClassData (((Objective)target)->GetFeatureID(flight_data->target_building));

	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+82]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$25[ebp], eax

; 2271 : 					AddStringToBuffer(fc->Name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fc$25[ebp]
	add	ecx, 8
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN292@ReadScript:

; 2272 : 					}
; 2273 : 				}

	jmp	$LN103@ReadScript
$LN293@ReadScript:

; 2274 : 			else if (strncmp(token,"REQUESTING_UNIT_NAME",20)==0)

	push	20					; 00000014H
	push	OFFSET ??_C@_0BF@CNELNPAK@REQUESTING_UNIT_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN290@ReadScript
	jmp	$LN103@ReadScript
$LN290@ReadScript:

; 2275 : 				{
; 2276 : 				ShiAssert (0);
; 2277 : /*				CampEntity	reqe;
; 2278 : 				_TCHAR		name[81];
; 2279 : 
; 2280 : 				sptr = token + 21;
; 2281 : 				reqe = FindEntity(flight_data->requester_id);
; 2282 : 				if (reqe && reqe->GetClass() == CLASS_UNIT)
; 2283 : 					{
; 2284 : 					GetEntityName(reqe, name, sptr[0], sptr[1]);
; 2285 : 					AddStringToBuffer(name, current_line);
; 2286 : 					}
; 2287 : */
; 2288 : 				}
; 2289 : 			else if (strcmp(token,"REQUESTING_UNIT_DEST")==0)

	push	OFFSET ??_C@_0BF@KNPIPNJG@REQUESTING_UNIT_DEST?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN288@ReadScript
	jmp	$LN103@ReadScript
$LN288@ReadScript:

; 2290 : 				{
; 2291 : 				ShiAssert (0);
; 2292 : /*
; 2293 : 				CampEntity	reqe;
; 2294 : 				_TCHAR		name[61];
; 2295 : 				Objective	o;
; 2296 : 
; 2297 : 				reqe = FindEntity(flight_data->requester_id);
; 2298 : 				if (reqe && reqe->GetClass() == CLASS_UNIT)
; 2299 : 					{
; 2300 : 					if (reqe->GetDomain() == DOMAIN_LAND)
; 2301 : 						{
; 2302 : 						o = ((Unit)reqe)->GetUnitSecondaryObj();
; 2303 : 						if (o)
; 2304 : 							{
; 2305 : 							o->GetName(name,60,TRUE);
; 2306 : 							AddStringToBuffer(name, current_line);
; 2307 : 							}
; 2308 : 						else
; 2309 : 							AddIndexedStringToBuffer(253, current_line);	
; 2310 : 						}
; 2311 : 					else if (reqe->GetDomain() == DOMAIN_AIR)
; 2312 : 						{
; 2313 : 						CampEntity	etar;
; 2314 : 						// Find out where this flight is going (find the target)
; 2315 : 						WayPoint	w = ((Unit)reqe)->GetFirstUnitWP();
; 2316 : 						while (w && !(w->GetWPFlags() & WPF_TARGET))
; 2317 : 							w = w->GetNextWP();
; 2318 : 						if (w)
; 2319 : 							{
; 2320 : 							etar = w->GetWPTarget();
; 2321 : 							etar->GetName(name,60,FALSE);
; 2322 : 							AddStringToBuffer(name, current_line);
; 2323 : 							}
; 2324 : 						}
; 2325 : 					}
; 2326 : */
; 2327 : 				}
; 2328 : 			else if (strcmp(token,"REQUESTING_UNIT_VEHICLE")==0)

	push	OFFSET ??_C@_0BI@FJDKIODL@REQUESTING_UNIT_VEHICLE?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN286@ReadScript
	jmp	$LN103@ReadScript
$LN286@ReadScript:

; 2329 : 				{
; 2330 : 				ShiAssert(0);
; 2331 : /*
; 2332 : 				CampEntity	reqe;
; 2333 : 
; 2334 : 				reqe = FindEntity(flight_data->requester_id);
; 2335 : 				if (reqe && reqe->GetClass() == CLASS_UNIT)
; 2336 : 					{
; 2337 : 					if (reqe->GetDomain() == DOMAIN_AIR && reqe->GetType() == TYPE_PACKAGE)
; 2338 : 						reqe = ((Package)reqe)->GetFirstUnitElement();
; 2339 : 					ShiAssert (reqe);
; 2340 : 					VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[((Unit)reqe)->GetVehicleID(0)].dataPtr;
; 2341 : 					if (gLangIDNum >= F4LANG_SPANISH)
; 2342 : 						{
; 2343 : 						AddStringToBuffer(vc->Name, current_line);
; 2344 : 						AddStringToBuffer(" ", current_line);
; 2345 : 						AddIndexedStringToBuffer(3820 + 20*reqe->GetOwner(), current_line);
; 2346 : 						}
; 2347 : 					else if (gLangIDNum == F4LANG_GERMAN)
; 2348 : 						{
; 2349 : 						AddIndexedStringToBuffer(3821 + 20*reqe->GetOwner(), current_line);
; 2350 : 						AddStringToBuffer(" ", current_line);
; 2351 : 						AddStringToBuffer(vc->Name, current_line);
; 2352 : 						}
; 2353 : 					else
; 2354 : 						{
; 2355 : 						AddIndexedStringToBuffer(3820 + 20*reqe->GetOwner(), current_line);
; 2356 : 						AddStringToBuffer(" ", current_line);
; 2357 : 						AddStringToBuffer(vc->Name, current_line);
; 2358 : 						}
; 2359 : 					}
; 2360 : */
; 2361 : 				}
; 2362 : 			else if (strcmp(token,"INTERCEPTOR_NAME")==0)

	push	OFFSET ??_C@_0BB@FCHFNNAM@INTERCEPTOR_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN284@ReadScript

; 2363 : 				{
; 2364 : 				CampEntity	ent;
; 2365 : 
; 2366 : 				ent = FindEntity(mec->intercepting_ent);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR [eax+76]
	push	edx
	call	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ; FindEntity
	add	esp, 8
	mov	DWORD PTR _ent$69[ebp], eax

; 2367 : 				if (!ent)

	cmp	DWORD PTR _ent$69[ebp], 0
	jne	SHORT $LN283@ReadScript

; 2368 : 					ent = ESquad;						// Special case for fighters at airbases

	mov	eax, DWORD PTR _ESquad
	mov	DWORD PTR _ent$69[ebp], eax
$LN283@ReadScript:

; 2369 : 				if (ent && ent->GetClass() == CLASS_UNIT)

	cmp	DWORD PTR _ent$69[ebp], 0
	je	$LN278@ReadScript
	mov	ecx, DWORD PTR _ent$69[ebp]
	call	?GetClass@CampBaseClass@@QBEEXZ		; CampBaseClass::GetClass
	movzx	ecx, al
	cmp	ecx, 6
	jne	$LN278@ReadScript

; 2370 : 					{
; 2371 : 					VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[((Unit)ent)->GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _ent$69[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	edx, ax
	imul	edx, 81					; 00000051H
	mov	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, DWORD PTR [eax+edx+77]
	mov	DWORD PTR _vc$48[ebp], ecx

; 2372 : 					if (gLangIDNum >= F4LANG_SPANISH)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 5		; gLangIDNum
	jl	SHORT $LN281@ReadScript

; 2373 : 						{
; 2374 : 						AddStringToBuffer(vc->Name, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _vc$48[ebp]
	add	eax, 8
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2375 : 						AddStringToBuffer(" ", current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2376 : 						AddIndexedStringToBuffer(ConvertTeamToStringIndex(ent->GetOwner()), current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _ent$69[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	eax, al
	push	eax
	call	?ConvertTeamToStringIndex@@YAHHHHH@Z	; ConvertTeamToStringIndex
	add	esp, 16					; 00000010H
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN278@ReadScript
$LN281@ReadScript:

; 2377 : //						AddIndexedStringToBuffer(3820 + 20*ent->GetOwner(), current_line);
; 2378 : 						}
; 2379 : 					else if (gLangIDNum == F4LANG_GERMAN)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 3		; gLangIDNum
	jne	SHORT $LN279@ReadScript

; 2380 : 						{
; 2381 : 						AddIndexedStringToBuffer(ConvertTeamToStringIndex(ent->GetOwner(), F4LANG_FEMININE), current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _ent$69[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	push	edx
	call	?ConvertTeamToStringIndex@@YAHHHHH@Z	; ConvertTeamToStringIndex
	add	esp, 16					; 00000010H
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2382 : //						AddIndexedStringToBuffer(3821 + 20*ent->GetOwner(), current_line);
; 2383 : 						AddStringToBuffer(" ", current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2384 : 						AddStringToBuffer(vc->Name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vc$48[ebp]
	add	edx, 8
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2385 : 						}
; 2386 : 					else

	jmp	SHORT $LN278@ReadScript
$LN279@ReadScript:

; 2387 : 						{
; 2388 : 						AddIndexedStringToBuffer(ConvertTeamToStringIndex(ent->GetOwner()), current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _ent$69[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	ecx, al
	push	ecx
	call	?ConvertTeamToStringIndex@@YAHHHHH@Z	; ConvertTeamToStringIndex
	add	esp, 16					; 00000010H
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2389 : //						AddIndexedStringToBuffer(3820 + 20*ent->GetOwner(), current_line);
; 2390 : 						AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2391 : 						AddStringToBuffer(vc->Name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vc$48[ebp]
	add	ecx, 8
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN278@ReadScript:

; 2392 : 						}
; 2393 : 					}
; 2394 : 				}

	jmp	$LN103@ReadScript
$LN284@ReadScript:

; 2395 : 			else if (strcmp(token,"AWACS_NAME")==0)

	push	OFFSET ??_C@_0L@GIEPPCOM@AWACS_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN276@ReadScript

; 2396 : 				{
; 2397 : 				Flight		awacs = (Flight) vuDatabase->Find(mec->awacs_id);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR [eax+84]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _awacs$62[ebp], eax

; 2398 : 				_TCHAR		name[128];
; 2399 : 				if (awacs && !awacs->IsDead())

	cmp	DWORD PTR _awacs$62[ebp], 0
	je	$LN275@ReadScript
	mov	eax, DWORD PTR _awacs$62[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _awacs$62[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	jne	$LN275@ReadScript

; 2400 : 					{
; 2401 : 					VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[awacs->GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _awacs$62[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$8[ebp], eax

; 2402 : 					GetCallsign (awacs->callsign_id, awacs->callsign_num, name);

	lea	ecx, DWORD PTR _name$92[ebp]
	push	ecx
	mov	edx, DWORD PTR _awacs$62[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	mov	ecx, DWORD PTR _awacs$62[ebp]
	movzx	edx, BYTE PTR [ecx+425]
	push	edx
	call	?GetCallsign@@YAXHHPAD@Z		; GetCallsign
	add	esp, 12					; 0000000cH

; 2403 : 					AddStringToBuffer(name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$92[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2404 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2405 : 					AddIndexedStringToBuffer(220, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	220					; 000000dcH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2406 : 					AddTabToBrief(130, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	130					; 00000082H
	call	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToBrief
	add	esp, 16					; 00000010H

; 2407 : 					AddNumberToBuffer(awacs->GetTotalVehicles(),current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _awacs$62[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2408 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2409 : 					AddStringToBuffer(vc->Name,current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vc$8[ebp]
	add	ecx, 8
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN275@ReadScript:

; 2410 : 					}
; 2411 : 				}

	jmp	$LN103@ReadScript
$LN276@ReadScript:

; 2412 : 			else if (strcmp(token,"JSTAR_NAME")==0)

	push	OFFSET ??_C@_0L@EAIANOCF@JSTAR_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN273@ReadScript

; 2413 : 				{
; 2414 : 				Flight		jstar = (Flight) vuDatabase->Find(mec->jstar_id);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR [eax+92]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _jstar$61[ebp], eax

; 2415 : 				_TCHAR		name[128];
; 2416 : 				if (jstar && !jstar->IsDead())

	cmp	DWORD PTR _jstar$61[ebp], 0
	je	$LN272@ReadScript
	mov	eax, DWORD PTR _jstar$61[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _jstar$61[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	jne	$LN272@ReadScript

; 2417 : 					{
; 2418 : 					VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[jstar->GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _jstar$61[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$23[ebp], eax

; 2419 : 					GetCallsign (jstar->callsign_id, jstar->callsign_num, name);

	lea	ecx, DWORD PTR _name$90[ebp]
	push	ecx
	mov	edx, DWORD PTR _jstar$61[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	mov	ecx, DWORD PTR _jstar$61[ebp]
	movzx	edx, BYTE PTR [ecx+425]
	push	edx
	call	?GetCallsign@@YAXHHPAD@Z		; GetCallsign
	add	esp, 12					; 0000000cH

; 2420 : 					AddStringToBuffer(name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$90[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2421 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2422 : 					AddIndexedStringToBuffer(221, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	221					; 000000ddH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2423 : 					AddTabToBrief(130, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	130					; 00000082H
	call	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToBrief
	add	esp, 16					; 00000010H

; 2424 : 					AddNumberToBuffer(jstar->GetTotalVehicles(),current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _jstar$61[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2425 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2426 : 					AddStringToBuffer(vc->Name,current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vc$23[ebp]
	add	ecx, 8
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN272@ReadScript:

; 2427 : 					}
; 2428 : 				}

	jmp	$LN103@ReadScript
$LN273@ReadScript:

; 2429 : 			else if (strcmp(token,"TANKER_NAME")==0)

	push	OFFSET ??_C@_0M@GJONMGJD@TANKER_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN270@ReadScript

; 2430 : 				{
; 2431 : 				Flight		tanker = (Flight) vuDatabase->Find(mec->tanker_id);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	edx, DWORD PTR [eax+108]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _tanker$64[ebp], eax

; 2432 : 				_TCHAR		name[128];
; 2433 : 				if (tanker && !tanker->IsDead())

	cmp	DWORD PTR _tanker$64[ebp], 0
	je	$LN269@ReadScript
	mov	eax, DWORD PTR _tanker$64[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _tanker$64[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	jne	$LN269@ReadScript

; 2434 : 					{
; 2435 : 					VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[tanker->GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _tanker$64[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$11[ebp], eax

; 2436 : 					GetCallsign (tanker->callsign_id, tanker->callsign_num, name);

	lea	ecx, DWORD PTR _name$91[ebp]
	push	ecx
	mov	edx, DWORD PTR _tanker$64[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	mov	ecx, DWORD PTR _tanker$64[ebp]
	movzx	edx, BYTE PTR [ecx+425]
	push	edx
	call	?GetCallsign@@YAXHHPAD@Z		; GetCallsign
	add	esp, 12					; 0000000cH

; 2437 : 					AddStringToBuffer(name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$91[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2438 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2439 : 					AddIndexedStringToBuffer(222, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	222					; 000000deH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2440 : 					AddTabToBrief(130, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	130					; 00000082H
	call	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToBrief
	add	esp, 16					; 00000010H

; 2441 : 					AddNumberToBuffer(tanker->GetTotalVehicles(),current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tanker$64[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2442 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2443 : 					AddStringToBuffer(vc->Name,current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vc$11[ebp]
	add	ecx, 8
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN269@ReadScript:

; 2444 : 					}
; 2445 : 				}

	jmp	$LN103@ReadScript
$LN270@ReadScript:

; 2446 : 			else if (strcmp(token,"ECM_NAME")==0)

	push	OFFSET ??_C@_08MDMCLKCP@ECM_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN267@ReadScript

; 2447 : 				{
; 2448 : 				Flight		ecm = (Flight) vuDatabase->Find(mec->ecm_id);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR [eax+100]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _ecm$66[ebp], eax

; 2449 : 				_TCHAR		name[128];
; 2450 : 				if (ecm && !ecm->IsDead())

	cmp	DWORD PTR _ecm$66[ebp], 0
	je	$LN266@ReadScript
	mov	eax, DWORD PTR _ecm$66[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ecm$66[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	jne	$LN266@ReadScript

; 2451 : 					{
; 2452 : 					VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[ecm->GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _ecm$66[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$21[ebp], eax

; 2453 : 					GetCallsign (ecm->callsign_id, ecm->callsign_num, name);

	lea	ecx, DWORD PTR _name$89[ebp]
	push	ecx
	mov	edx, DWORD PTR _ecm$66[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	mov	ecx, DWORD PTR _ecm$66[ebp]
	movzx	edx, BYTE PTR [ecx+425]
	push	edx
	call	?GetCallsign@@YAXHHPAD@Z		; GetCallsign
	add	esp, 12					; 0000000cH

; 2454 : 					AddStringToBuffer(name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$89[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2455 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2456 : 					AddIndexedStringToBuffer(260, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	260					; 00000104H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2457 : 					AddTabToBrief(130, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	130					; 00000082H
	call	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToBrief
	add	esp, 16					; 00000010H

; 2458 : 					AddNumberToBuffer(ecm->GetTotalVehicles(),current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ecm$66[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2459 : 					AddStringToBuffer(" ", current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2460 : 					AddStringToBuffer(vc->Name,current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vc$21[ebp]
	add	ecx, 8
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN266@ReadScript:

; 2461 : 					}
; 2462 : 				}

	jmp	$LN103@ReadScript
$LN267@ReadScript:

; 2463 : 			else if (strncmp(token,"CONTEXT_STR",11)==0)

	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@EPDBPGIE@CONTEXT_STR?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN264@ReadScript

; 2464 : 				{
; 2465 : 				int				strCount=0,mission_context=0;

	mov	DWORD PTR _strCount$73[ebp], 0
	mov	DWORD PTR _mission_context$53[ebp], 0

; 2466 : 				_TCHAR			str[5][256] = { 0 },context[1024];

	mov	BYTE PTR _str$87[ebp], 0
	push	1279					; 000004ffH
	push	0
	lea	eax, DWORD PTR _str$87[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2467 : 				CampEntity		tar,re;
; 2468 : 				EventDataClass  data;

	lea	ecx, DWORD PTR _data$78[ebp]
	call	??0EventDataClass@@QAE@XZ		; EventDataClass::EventDataClass

; 2469 : 				FlightDataClass *fptr;
; 2470 : 
; 2471 : 				// Point to beginning of argument list
; 2472 : 				sptr = token + 12;

	lea	ecx, DWORD PTR _token$[ebp+12]
	mov	DWORD PTR _sptr$[ebp], ecx

; 2473 : 
; 2474 : 				// We need to find the target and requesting entity this situation is refering to.
; 2475 : 				// Generally this will be the package's data, but if our first argument is an 'F'
; 2476 : 				// it will be the flight's data.
; 2477 : 				tar = ptarget;

	mov	edx, DWORD PTR _ptarget$[ebp]
	mov	DWORD PTR _tar$55[ebp], edx

; 2478 : 				fptr = mec->package_element;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fptr$36[ebp], ecx

; 2479 : 				re = FindEntity(mec->requesting_ent);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR [edx+68]
	push	ecx
	call	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ; FindEntity
	add	esp, 8
	mov	DWORD PTR _re$74[ebp], eax

; 2480 : 				mission_context = mec->package_context;

	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	mov	DWORD PTR _mission_context$53[ebp], eax
$LN263@ReadScript:

; 2481 : 
; 2482 : 				// Check first argument and adjust data if necessary
; 2483 : 				while (*sptr == ' ')

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN262@ReadScript

; 2484 : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
	jmp	SHORT $LN263@ReadScript
$LN262@ReadScript:

; 2485 : 				if (*sptr == 'F')

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 70					; 00000046H
	jne	SHORT $LN261@ReadScript

; 2486 : 					{
; 2487 : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 2488 : 					tar = target;

	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _tar$55[ebp], ecx

; 2489 : 					fptr = flight_data;

	mov	edx, DWORD PTR _flight_data$[ebp]
	mov	DWORD PTR _fptr$36[ebp], edx

; 2490 : 					re = FindEntity(flight_data->requester_id);

	mov	eax, DWORD PTR _flight_data$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR [eax+64]
	push	edx
	call	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ; FindEntity
	add	esp, 8
	mov	DWORD PTR _re$74[ebp], eax

; 2491 : 					mission_context = fptr->mission_context;

	mov	eax, DWORD PTR _fptr$36[ebp]
	movzx	ecx, BYTE PTR [eax+94]
	mov	DWORD PTR _mission_context$53[ebp], ecx
$LN261@ReadScript:

; 2492 : 					}
; 2493 : 
; 2494 : 				// Set up the genderable builder data
; 2495 : 				data.formatId = 700+mission_context;

	mov	edx, DWORD PTR _mission_context$53[ebp]
	add	edx, 700				; 000002bcH
	mov	WORD PTR _data$78[ebp], dx

; 2496 : 				data.xLoc = mec->tx;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	cx, WORD PTR [eax+184]
	mov	WORD PTR _data$78[ebp+2], cx

; 2497 : 				data.yLoc = mec->ty;

	mov	edx, DWORD PTR _mec$[ebp]
	mov	ax, WORD PTR [edx+186]
	mov	WORD PTR _data$78[ebp+4], ax

; 2498 : 				if (tar)

	cmp	DWORD PTR _tar$55[ebp], 0
	je	SHORT $LN260@ReadScript

; 2499 : 					{
; 2500 : 					data.vuIds[0] = tar->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tar$55[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, 8
	imul	ecx, 0
	mov	DWORD PTR _data$78[ebp+ecx+8], edx
	mov	DWORD PTR _data$78[ebp+ecx+12], eax

; 2501 : 					data.owners[0] = tar->GetOwner();

	mov	ecx, DWORD PTR _tar$55[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	dx, al
	mov	eax, 2
	imul	eax, 0
	mov	WORD PTR _data$78[ebp+eax+24], dx
$LN260@ReadScript:

; 2502 : 					}
; 2503 : 				if (re)

	cmp	DWORD PTR _re$74[ebp], 0
	je	SHORT $LN259@ReadScript

; 2504 : 					{
; 2505 : 					data.vuIds[1] = re->Id();

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _re$74[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, 8
	shl	ecx, 0
	mov	DWORD PTR _data$78[ebp+ecx+8], edx
	mov	DWORD PTR _data$78[ebp+ecx+12], eax

; 2506 : 					data.owners[1] = re->GetOwner();

	mov	ecx, DWORD PTR _re$74[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	WORD PTR _data$78[ebp+eax+24], dx
$LN259@ReadScript:

; 2507 : 					}
; 2508 : 
; 2509 : 				// Parse any adjustment arguments, and collect substitution strings
; 2510 : 				while (*sptr)

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN257@ReadScript

; 2511 : 					{
; 2512 : 					switch (*sptr)

	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv2072[ebp], ecx
	mov	edx, DWORD PTR tv2072[ebp]
	sub	edx, 50					; 00000032H
	mov	DWORD PTR tv2072[ebp], edx
	cmp	DWORD PTR tv2072[ebp], 66		; 00000042H
	ja	$LN243@ReadScript
	mov	eax, DWORD PTR tv2072[ebp]
	movzx	ecx, BYTE PTR $LN618@ReadScript[eax]
	jmp	DWORD PTR $LN620@ReadScript[ecx*4]
$LN254@ReadScript:

; 2513 : 						{
; 2514 : 						case '2':
; 2515 : 							data.formatId = 800+mission_context;

	mov	edx, DWORD PTR _mission_context$53[ebp]
	add	edx, 800				; 00000320H
	mov	WORD PTR _data$78[ebp], dx

; 2516 : 							break;

	jmp	$LN255@ReadScript
$LN253@ReadScript:

; 2517 : 						case 'R':
; 2518 : 							// Requesting Entity Destination/Vehicle
; 2519 : 							sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 2520 : 							if (*sptr == 'D')

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 68					; 00000044H
	jne	SHORT $LN252@ReadScript

; 2521 : 								GetEntityDestination(re, str[strCount]);

	mov	eax, DWORD PTR _strCount$73[ebp]
	shl	eax, 8
	lea	ecx, DWORD PTR _str$87[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _re$74[ebp]
	push	edx
	call	?GetEntityDestination@@YAXPAVCampBaseClass@@PAD@Z ; GetEntityDestination
	add	esp, 8

; 2522 : 							else

	jmp	$LN248@ReadScript
$LN252@ReadScript:

; 2523 : 								{
; 2524 : 								if (re && re->IsPackage())

	cmp	DWORD PTR _re$74[ebp], 0
	je	SHORT $LN250@ReadScript
	mov	eax, DWORD PTR _re$74[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _re$74[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	test	eax, eax
	je	SHORT $LN250@ReadScript

; 2525 : 									re = ((Package)re)->GetFirstUnitElement();

	mov	ecx, DWORD PTR _re$74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _re$74[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	mov	DWORD PTR _re$74[ebp], eax
$LN250@ReadScript:

; 2526 : 								if (re && re->IsUnit())

	cmp	DWORD PTR _re$74[ebp], 0
	je	SHORT $LN249@ReadScript
	mov	ecx, DWORD PTR _re$74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _re$74[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN249@ReadScript

; 2527 : 									{
; 2528 : 									VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[((Unit)re)->GetVehicleID(0)].dataPtr;

	push	0
	mov	ecx, DWORD PTR _re$74[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$7[ebp], eax

; 2529 : 									_tcscpy(str[strCount],vc->Name);

	mov	ecx, DWORD PTR _vc$7[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _strCount$73[ebp]
	shl	edx, 8
	lea	eax, DWORD PTR _str$87[ebp+edx]
	push	eax
	call	_strcpy
	add	esp, 8

; 2530 : 									}
; 2531 : 								else

	jmp	SHORT $LN248@ReadScript
$LN249@ReadScript:

; 2532 : 									AddIndexedStringToBuffer(256, str[strCount]);

	mov	ecx, DWORD PTR _strCount$73[ebp]
	shl	ecx, 8
	lea	edx, DWORD PTR _str$87[ebp+ecx]
	push	edx
	push	256					; 00000100H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN248@ReadScript:

; 2533 : 								}
; 2534 : 							strCount++;

	mov	eax, DWORD PTR _strCount$73[ebp]
	add	eax, 1
	mov	DWORD PTR _strCount$73[ebp], eax

; 2535 : 							break;

	jmp	$LN255@ReadScript
$LN247@ReadScript:

; 2536 : 						case 't':
; 2537 : 							// Time on target
; 2538 : 							AddTimeToBuffer(mec->assigned_tot, str[strCount]);

	push	1
	mov	ecx, DWORD PTR _strCount$73[ebp]
	shl	ecx, 8
	lea	edx, DWORD PTR _str$87[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	?AddTimeToBuffer@@YAXKPADH@Z		; AddTimeToBuffer
	add	esp, 12					; 0000000cH

; 2539 : 							strCount++;

	mov	edx, DWORD PTR _strCount$73[ebp]
	add	edx, 1
	mov	DWORD PTR _strCount$73[ebp], edx

; 2540 : 							break;

	jmp	$LN255@ReadScript
$LN246@ReadScript:

; 2541 : 						case 'O':
; 2542 : 							sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 2543 : 							if (*sptr == 'S')		// Operation String

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 83					; 00000053H
	jne	SHORT $LN245@ReadScript

; 2544 : 								{
; 2545 : 								ReadIndexedString(854+mec->action_type, str[strCount],256);

	push	256					; 00000100H
	mov	eax, DWORD PTR _strCount$73[ebp]
	shl	eax, 8
	lea	ecx, DWORD PTR _str$87[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, 854				; 00000356H
	push	eax
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 2546 : 								strCount++;

	mov	ecx, DWORD PTR _strCount$73[ebp]
	add	ecx, 1
	mov	DWORD PTR _strCount$73[ebp], ecx

; 2547 : 								}
; 2548 : 							else					// Operation Objective

	jmp	SHORT $LN244@ReadScript
$LN245@ReadScript:

; 2549 : 								{
; 2550 : 								CampEntity ot = (CampEntity) vuDatabase->Find(TeamInfo[mec->team]->GetOffensiveAirAction()->actionObjective);

	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ; TeamClass::GetOffensiveAirAction
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _ot$38[ebp], eax

; 2551 : 								ot->GetName(str[strCount],80,FALSE);

	push	0
	push	80					; 00000050H
	mov	eax, DWORD PTR _strCount$73[ebp]
	shl	eax, 8
	lea	ecx, DWORD PTR _str$87[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _ot$38[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ot$38[ebp]
	mov	edx, DWORD PTR [eax+380]
	call	edx

; 2552 : 								strCount++;

	mov	eax, DWORD PTR _strCount$73[ebp]
	add	eax, 1
	mov	DWORD PTR _strCount$73[ebp], eax
$LN244@ReadScript:
$LN243@ReadScript:
$LN255@ReadScript:

; 2553 : 								}
; 2554 : 							break;
; 2555 : 						default:
; 2556 : 							break;
; 2557 : 						}
; 2558 : 					sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 2559 : 					if (*sptr == ' ')

	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN242@ReadScript

; 2560 : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN242@ReadScript:

; 2561 : 					}

	jmp	$LN259@ReadScript
$LN257@ReadScript:

; 2562 : 
; 2563 : 				// Build the sentance
; 2564 : 				ConstructOrderedGenderedSentence (1024, context, &data, str[0], str[1], str[2], str[3], str[4]);

	mov	edx, 256				; 00000100H
	shl	edx, 2
	lea	eax, DWORD PTR _str$87[ebp+edx]
	push	eax
	mov	ecx, 256				; 00000100H
	imul	ecx, 3
	lea	edx, DWORD PTR _str$87[ebp+ecx]
	push	edx
	mov	eax, 256				; 00000100H
	shl	eax, 1
	lea	ecx, DWORD PTR _str$87[ebp+eax]
	push	ecx
	mov	edx, 256				; 00000100H
	shl	edx, 0
	lea	eax, DWORD PTR _str$87[ebp+edx]
	push	eax
	mov	ecx, 256				; 00000100H
	imul	ecx, 0
	lea	edx, DWORD PTR _str$87[ebp+ecx]
	push	edx
	lea	eax, DWORD PTR _data$78[ebp]
	push	eax
	lea	ecx, DWORD PTR _context$81[ebp]
	push	ecx
	push	1024					; 00000400H
	call	?ConstructOrderedGenderedSentence@@YAXFPADPAVEventDataClass@@ZZ ; ConstructOrderedGenderedSentence
	add	esp, 32					; 00000020H

; 2565 : 				AddStringToBuffer(context, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	lea	eax, DWORD PTR _context$81[ebp]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN264@ReadScript:

; 2566 : 				}
; 2567 : 			else if (strncmp(token,"RESULT_STR",10)==0)

	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@OFHHCAD@RESULT_STR?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN240@ReadScript

; 2568 : 				{
; 2569 : 				int				strCount=0,success,losses,mission_context;

	mov	DWORD PTR _strCount$71[ebp], 0

; 2570 : 				_TCHAR			str[5][256] = { 0 },result[1024];

	mov	BYTE PTR _str$86[ebp], 0
	push	1279					; 000004ffH
	push	0
	lea	edx, DWORD PTR _str$86[ebp+1]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 2571 : 				CampEntity		tar,re;
; 2572 : 				EventDataClass  data;

	lea	ecx, DWORD PTR _data$79[ebp]
	call	??0EventDataClass@@QAE@XZ		; EventDataClass::EventDataClass

; 2573 : 				FlightDataClass *fptr;
; 2574 : 
; 2575 : 				// Point to beginning of argument list
; 2576 : 				sptr = token + 12;

	lea	eax, DWORD PTR _token$[ebp+12]
	mov	DWORD PTR _sptr$[ebp], eax

; 2577 : 
; 2578 : 				// We need to find the target and requesting entity this situation is refering to.
; 2579 : 				// Generally this will be the package's data, but if our first argument is an 'F'
; 2580 : 				// it will be the flight's data.
; 2581 : 				tar = ptarget;

	mov	ecx, DWORD PTR _ptarget$[ebp]
	mov	DWORD PTR _tar$77[ebp], ecx

; 2582 : 				fptr = mec->package_element;

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _fptr$67[ebp], eax

; 2583 : 				re = FindEntity(mec->requesting_ent);

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR [ecx+68]
	push	eax
	call	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ; FindEntity
	add	esp, 8
	mov	DWORD PTR _re$51[ebp], eax

; 2584 : 				mission_context = mec->package_context;

	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+6]
	mov	DWORD PTR _mission_context$63[ebp], edx
$LN239@ReadScript:

; 2585 : 
; 2586 : 				// Check first argument and adjust data if necessary
; 2587 : 				while (*sptr == ' ')

	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN238@ReadScript

; 2588 : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
	jmp	SHORT $LN239@ReadScript
$LN238@ReadScript:

; 2589 : 				if (*sptr == 'F')

	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 70					; 00000046H
	jne	SHORT $LN237@ReadScript

; 2590 : 					{
; 2591 : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx

; 2592 : 					tar = target;

	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _tar$77[ebp], eax

; 2593 : 					fptr = flight_data;

	mov	ecx, DWORD PTR _flight_data$[ebp]
	mov	DWORD PTR _fptr$67[ebp], ecx

; 2594 : 					re = FindEntity(flight_data->requester_id);

	mov	edx, DWORD PTR _flight_data$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR [edx+64]
	push	ecx
	call	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ; FindEntity
	add	esp, 8
	mov	DWORD PTR _re$51[ebp], eax

; 2595 : 					mission_context = fptr->mission_context;

	mov	edx, DWORD PTR _fptr$67[ebp]
	movzx	eax, BYTE PTR [edx+94]
	mov	DWORD PTR _mission_context$63[ebp], eax
$LN237@ReadScript:

; 2596 : 					}
; 2597 : 
; 2598 : 				// Set up the genderable builder data
; 2599 : 				data.formatId = 1104;

	mov	ecx, 1104				; 00000450H
	mov	WORD PTR _data$79[ebp], cx

; 2600 : 				data.xLoc = mec->tx;

	mov	edx, DWORD PTR _mec$[ebp]
	mov	ax, WORD PTR [edx+184]
	mov	WORD PTR _data$79[ebp+2], ax

; 2601 : 				data.yLoc = mec->ty;

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	dx, WORD PTR [ecx+186]
	mov	WORD PTR _data$79[ebp+4], dx

; 2602 : 				if (tar)

	cmp	DWORD PTR _tar$77[ebp], 0
	je	SHORT $LN236@ReadScript

; 2603 : 					{
; 2604 : 					data.vuIds[0] = tar->Id();

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	imul	eax, 0
	mov	DWORD PTR _data$79[ebp+eax+8], ecx
	mov	DWORD PTR _data$79[ebp+eax+12], edx

; 2605 : 					data.owners[0] = tar->GetOwner();

	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	cx, al
	mov	edx, 2
	imul	edx, 0
	mov	WORD PTR _data$79[ebp+edx+24], cx
$LN236@ReadScript:

; 2606 : 					}
; 2607 : 				if (re)

	cmp	DWORD PTR _re$51[ebp], 0
	je	SHORT $LN235@ReadScript

; 2608 : 					{
; 2609 : 					data.vuIds[1] = re->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _re$51[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	shl	eax, 0
	mov	DWORD PTR _data$79[ebp+eax+8], ecx
	mov	DWORD PTR _data$79[ebp+eax+12], edx

; 2610 : 					data.owners[1] = re->GetOwner();

	mov	ecx, DWORD PTR _re$51[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	cx, al
	mov	edx, 2
	shl	edx, 0
	mov	WORD PTR _data$79[ebp+edx+24], cx
$LN235@ReadScript:

; 2611 : 					}
; 2612 : 
; 2613 : 				// Determine success/losses
; 2614 : 				success = fptr->mission_success;

	mov	eax, DWORD PTR _fptr$67[ebp]
	movzx	ecx, BYTE PTR [eax+95]
	mov	DWORD PTR _success$72[ebp], ecx

; 2615 : // 2002-02-13 MN added AWACSAbort
; 2616 : 				if (success != Incomplete /*&& success != AWACSAbort*/)

	cmp	DWORD PTR _success$72[ebp], 4
	je	$LN202@ReadScript

; 2617 : 					{
; 2618 : 					// Determine losses, if necessary
; 2619 : 					losses = fptr->target_status;

	mov	edx, DWORD PTR _fptr$67[ebp]
	movzx	eax, BYTE PTR [edx+93]
	mov	DWORD PTR _losses$58[ebp], eax

; 2620 : 					if (tar && tar->IsObjective())

	cmp	DWORD PTR _tar$77[ebp], 0
	je	SHORT $LN233@ReadScript
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN233@ReadScript

; 2621 : 						losses = 100 - ((Objective)tar)->GetObjectiveStatus();

	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	ecx, al
	mov	edx, 100				; 00000064H
	sub	edx, ecx
	mov	DWORD PTR _losses$58[ebp], edx
	jmp	SHORT $LN231@ReadScript
$LN233@ReadScript:

; 2622 : 					else if (tar && tar->IsUnit())

	cmp	DWORD PTR _tar$77[ebp], 0
	je	SHORT $LN231@ReadScript
	mov	eax, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN231@ReadScript

; 2623 : 						losses = fptr->target_status - ((Unit)tar)->GetTotalVehicles();

	mov	ecx, DWORD PTR _fptr$67[ebp]
	movzx	esi, BYTE PTR [ecx+93]
	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	sub	esi, eax
	mov	DWORD PTR _losses$58[ebp], esi
$LN231@ReadScript:

; 2624 : 
; 2625 : 					// Parse the arguments
; 2626 : 					sptr = token + 11;

	lea	edx, DWORD PTR _token$[ebp+11]
	mov	DWORD PTR _sptr$[ebp], edx
$LN230@ReadScript:

; 2627 : 					while (*sptr)

	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN229@ReadScript

; 2628 : 						{
; 2629 : 						switch (*sptr)

	mov	edx, DWORD PTR _sptr$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv2310[ebp], al
	cmp	BYTE PTR tv2310[ebp], 67		; 00000043H
	je	$LN221@ReadScript
	cmp	BYTE PTR tv2310[ebp], 76		; 0000004cH
	je	SHORT $LN226@ReadScript
	cmp	BYTE PTR tv2310[ebp], 83		; 00000053H
	je	SHORT $LN225@ReadScript
	jmp	$LN220@ReadScript
$LN226@ReadScript:

; 2630 : 							{
; 2631 : 							case 'L':
; 2632 : 								// Losses
; 2633 : 								_stprintf(str[strCount],_T("%d"),losses);

	mov	ecx, DWORD PTR _losses$58[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _strCount$71[ebp]
	shl	edx, 8
	lea	eax, DWORD PTR _str$86[ebp+edx]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 2634 : 								strCount++;

	mov	ecx, DWORD PTR _strCount$71[ebp]
	add	ecx, 1
	mov	DWORD PTR _strCount$71[ebp], ecx

; 2635 : 								break;

	jmp	$LN227@ReadScript
$LN225@ReadScript:

; 2636 : 							case 'S':
; 2637 : 								// % strength
; 2638 : 								if (tar && tar->IsObjective())

	cmp	DWORD PTR _tar$77[ebp], 0
	je	SHORT $LN224@ReadScript
	mov	edx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN224@ReadScript

; 2639 : 									_stprintf(str[strCount],_T("%d"),((Objective)tar)->GetObjectiveStatus());

	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	eax, al
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _strCount$71[ebp]
	shl	ecx, 8
	lea	edx, DWORD PTR _str$86[ebp+ecx]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN222@ReadScript
$LN224@ReadScript:

; 2640 : 								else if (tar && tar->IsUnit())

	cmp	DWORD PTR _tar$77[ebp], 0
	je	SHORT $LN222@ReadScript
	mov	eax, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN222@ReadScript

; 2641 : 									_stprintf(str[strCount],_T("%d"),(((Unit)tar)->GetTotalVehicles()*100)/((Unit)tar)->GetFullstrengthVehicles());

	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	esi, eax
	imul	esi, 100				; 00000064H
	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?GetFullstrengthVehicles@UnitClass@@QAEHXZ ; UnitClass::GetFullstrengthVehicles
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _strCount$71[ebp]
	shl	edx, 8
	lea	eax, DWORD PTR _str$86[ebp+edx]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN222@ReadScript:

; 2642 : 								strCount++;

	mov	ecx, DWORD PTR _strCount$71[ebp]
	add	ecx, 1
	mov	DWORD PTR _strCount$71[ebp], ecx
$LN221@ReadScript:

; 2643 : 							case 'C':
; 2644 : 								// Critical Entity Name (in case it doesn't still exist)
; 2645 : 								_tcscpy(str[strCount],fptr->context_entity_name);

	mov	edx, DWORD PTR _fptr$67[ebp]
	add	edx, 109				; 0000006dH
	push	edx
	mov	eax, DWORD PTR _strCount$71[ebp]
	shl	eax, 8
	lea	ecx, DWORD PTR _str$86[ebp+eax]
	push	ecx
	call	_strcpy
	add	esp, 8

; 2646 : 								strCount++;

	mov	edx, DWORD PTR _strCount$71[ebp]
	add	edx, 1
	mov	DWORD PTR _strCount$71[ebp], edx
$LN220@ReadScript:
$LN227@ReadScript:

; 2647 : 								break;
; 2648 : 							default:
; 2649 : 								break;
; 2650 : 							}
; 2651 : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 2652 : 						if (*sptr == ' ')

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN219@ReadScript

; 2653 : 							sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN219@ReadScript:

; 2654 : 						}

	jmp	$LN230@ReadScript
$LN229@ReadScript:

; 2655 : 
; 2656 : 					// Now choose which format to use
; 2657 : 					if (!tar	|| (tar->IsUnit() && (((Unit)tar)->Broken() || ((Unit)tar)->IsDead())) 
; 2658 : 								|| (tar->IsObjective() && ((Objective)tar)->GetObjectiveStatus() < 10))

	cmp	DWORD PTR _tar$77[ebp], 0
	je	SHORT $LN217@ReadScript
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN216@ReadScript
	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?Broken@UnitClass@@QBEHXZ		; UnitClass::Broken
	test	eax, eax
	jne	SHORT $LN217@ReadScript
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	jne	SHORT $LN217@ReadScript
$LN216@ReadScript:
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN218@ReadScript
	mov	ecx, DWORD PTR _tar$77[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	ecx, al
	cmp	ecx, 10					; 0000000aH
	jge	SHORT $LN218@ReadScript
$LN217@ReadScript:

; 2659 : 						{
; 2660 : 						// Target is completely broken or destroyed
; 2661 : 						if (success == Success || success == PartSuccess || success == AWACSAbort)

	cmp	DWORD PTR _success$72[ebp], 3
	je	SHORT $LN214@ReadScript
	cmp	DWORD PTR _success$72[ebp], 2
	je	SHORT $LN214@ReadScript
	cmp	DWORD PTR _success$72[ebp], 5
	jne	SHORT $LN215@ReadScript
$LN214@ReadScript:

; 2662 : 							data.formatId = 1200+mission_context;

	mov	edx, DWORD PTR _mission_context$63[ebp]
	add	edx, 1200				; 000004b0H
	mov	WORD PTR _data$79[ebp], dx

; 2663 : 						else

	jmp	SHORT $LN213@ReadScript
$LN215@ReadScript:

; 2664 : 							data.formatId = 1400+mission_context;

	mov	eax, DWORD PTR _mission_context$63[ebp]
	add	eax, 1400				; 00000578H
	mov	WORD PTR _data$79[ebp], ax
$LN213@ReadScript:

; 2665 : 						}
; 2666 : 					else if (	(tar->IsUnit() && (float)losses/(float)fptr->target_status > 0.01F)

	jmp	$LN202@ReadScript
$LN218@ReadScript:

; 2667 : 							||	(tar->IsObjective() && losses > 0))

	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN209@ReadScript
	cvtsi2ss xmm0, DWORD PTR _losses$58[ebp]
	mov	ecx, DWORD PTR _fptr$67[ebp]
	movzx	edx, BYTE PTR [ecx+93]
	cvtsi2ss xmm1, edx
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3c23d70a
	ja	SHORT $LN210@ReadScript
$LN209@ReadScript:
	mov	eax, DWORD PTR _tar$77[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _tar$77[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN211@ReadScript
	cmp	DWORD PTR _losses$58[ebp], 0
	jle	SHORT $LN211@ReadScript
$LN210@ReadScript:

; 2668 : 							// KCK: Needed to use this one until we have strings entered for 
; 2669 : 							// posibility of partial destruction and successfull mission
; 2670 : //							||	(tar->IsObjective() && losses > 10))
; 2671 : 						{
; 2672 : 						// Target is partially broken or destroyed
; 2673 : 						if (success == Success || success == PartSuccess || success == AWACSAbort)

	cmp	DWORD PTR _success$72[ebp], 3
	je	SHORT $LN207@ReadScript
	cmp	DWORD PTR _success$72[ebp], 2
	je	SHORT $LN207@ReadScript
	cmp	DWORD PTR _success$72[ebp], 5
	jne	SHORT $LN208@ReadScript
$LN207@ReadScript:

; 2674 : 							data.formatId = 1200+mission_context;

	mov	ecx, DWORD PTR _mission_context$63[ebp]
	add	ecx, 1200				; 000004b0H
	mov	WORD PTR _data$79[ebp], cx

; 2675 : 						else

	jmp	SHORT $LN206@ReadScript
$LN208@ReadScript:

; 2676 : 							data.formatId = 1400+mission_context;

	mov	edx, DWORD PTR _mission_context$63[ebp]
	add	edx, 1400				; 00000578H
	mov	WORD PTR _data$79[ebp], dx
$LN206@ReadScript:

; 2677 : 						}
; 2678 : 					else

	jmp	SHORT $LN202@ReadScript
$LN211@ReadScript:

; 2679 : 						{
; 2680 : 						// Target took little or no damage
; 2681 : 						if (success == Success || success == PartSuccess || success == AWACSAbort)

	cmp	DWORD PTR _success$72[ebp], 3
	je	SHORT $LN203@ReadScript
	cmp	DWORD PTR _success$72[ebp], 2
	je	SHORT $LN203@ReadScript
	cmp	DWORD PTR _success$72[ebp], 5
	jne	SHORT $LN204@ReadScript
$LN203@ReadScript:

; 2682 : 							data.formatId = 1300+mission_context;

	mov	eax, DWORD PTR _mission_context$63[ebp]
	add	eax, 1300				; 00000514H
	mov	WORD PTR _data$79[ebp], ax

; 2683 : 						else

	jmp	SHORT $LN202@ReadScript
$LN204@ReadScript:

; 2684 : 							data.formatId = 1500+mission_context;

	mov	ecx, DWORD PTR _mission_context$63[ebp]
	add	ecx, 1500				; 000005dcH
	mov	WORD PTR _data$79[ebp], cx
$LN202@ReadScript:

; 2685 : 						}
; 2686 : 					
; 2687 : 					}
; 2688 : /*				else if (success == AWACSAbort)
; 2689 : 				{
; 2690 : 					// MNLOOK AWACSABort stuff, needs new strings.wch entry
; 2691 : 				}*/
; 2692 : 				// Now build the string
; 2693 : 				ConstructOrderedGenderedSentence (1024, result, &data, str[0], str[1], str[2], str[3], str[4]);

	mov	edx, 256				; 00000100H
	shl	edx, 2
	lea	eax, DWORD PTR _str$86[ebp+edx]
	push	eax
	mov	ecx, 256				; 00000100H
	imul	ecx, 3
	lea	edx, DWORD PTR _str$86[ebp+ecx]
	push	edx
	mov	eax, 256				; 00000100H
	shl	eax, 1
	lea	ecx, DWORD PTR _str$86[ebp+eax]
	push	ecx
	mov	edx, 256				; 00000100H
	shl	edx, 0
	lea	eax, DWORD PTR _str$86[ebp+edx]
	push	eax
	mov	ecx, 256				; 00000100H
	imul	ecx, 0
	lea	edx, DWORD PTR _str$86[ebp+ecx]
	push	edx
	lea	eax, DWORD PTR _data$79[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$80[ebp]
	push	ecx
	push	1024					; 00000400H
	call	?ConstructOrderedGenderedSentence@@YAXFPADPAVEventDataClass@@ZZ ; ConstructOrderedGenderedSentence
	add	esp, 32					; 00000020H

; 2694 : 				AddStringToBuffer(result, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$80[ebp]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN240@ReadScript:

; 2695 : 				}
; 2696 : 			else if (strcmp(token,"TE_SUCCESS")==0)

	push	OFFSET ??_C@_0L@OGBKPMOJ@TE_SUCCESS?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN200@ReadScript

; 2697 : 				AddIndexedStringToBuffer(1150 + determine_tactical_rating(), current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	call	?determine_tactical_rating@@YAHXZ	; determine_tactical_rating
	add	eax, 1150				; 0000047eH
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN200@ReadScript:

; 2698 : 			else if (strcmp(token,"NUM_AIRCRAFT")==0)

	push	OFFSET ??_C@_0N@EPPNAEFI@NUM_AIRCRAFT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN198@ReadScript

; 2699 : 				{
; 2700 : 				i = flight_data->start_aircraft;

	mov	ecx, DWORD PTR _flight_data$[ebp]
	movzx	edx, BYTE PTR [ecx+58]
	mov	DWORD PTR _i$[ebp], edx

; 2701 : 				AddIndexedStringToBuffer(i, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN198@ReadScript:

; 2702 : 				}
; 2703 : 			else if (strcmp(token,"AIRCRAFT_TYPE")==0)

	push	OFFSET ??_C@_0O@HMJMPBIP@AIRCRAFT_TYPE?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN196@ReadScript

; 2704 : 				AddStringToBuffer(flight_data->aircraft_name, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight_data$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN196@ReadScript:

; 2705 : 			else if (strcmp(token,"TIME_ON_TARGET")==0 || strcmp(token,"TIME_ON_STATION_LABEL")==0)

	push	OFFSET ??_C@_0P@HAOODHME@TIME_ON_TARGET?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN193@ReadScript
	push	OFFSET ??_C@_0BG@IGCLGGLJ@TIME_ON_STATION_LABEL?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN194@ReadScript
$LN193@ReadScript:

; 2706 : 				{
; 2707 : 				AddTimeToBuffer(mec->assigned_tot, current_line);

	push	1
	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	call	?AddTimeToBuffer@@YAXKPADH@Z		; AddTimeToBuffer
	add	esp, 12					; 0000000cH
	jmp	$LN103@ReadScript
$LN194@ReadScript:

; 2708 : 				}
; 2709 : 			else if (strcmp(token,"ACTUAL_TIME_ON_TARGET")==0)

	push	OFFSET ??_C@_0BG@HNKMNDFO@ACTUAL_TIME_ON_TARGET?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN191@ReadScript

; 2710 : 				{
; 2711 : 				int			seconds_off;
; 2712 : 				if (mec->actual_tot < 1.0F)

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	DWORD PTR tv5114[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv5114[ebp]
	mov	ecx, DWORD PTR tv5114[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv5118[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv5118[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN190@ReadScript

; 2713 : 					AddIndexedStringToBuffer(239, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	239					; 000000efH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2714 : 				else

	jmp	$LN184@ReadScript
$LN190@ReadScript:

; 2715 : 					{
; 2716 : 					AddTimeToBuffer(mec->actual_tot, current_line);

	push	1
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	call	?AddTimeToBuffer@@YAXKPADH@Z		; AddTimeToBuffer
	add	esp, 12					; 0000000cH

; 2717 : 					seconds_off = (int)(mec->actual_tot - mec->assigned_tot)/CampaignSeconds;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [eax+168]
	sub	eax, DWORD PTR [ecx+164]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _seconds_off$70[ebp], eax

; 2718 : 					if (seconds_off > 10)

	cmp	DWORD PTR _seconds_off$70[ebp], 10	; 0000000aH
	jle	$LN188@ReadScript

; 2719 : 						{
; 2720 : 						AddIndexedStringToBuffer(187, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	187					; 000000bbH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2721 : 						if (seconds_off > 500)

	cmp	DWORD PTR _seconds_off$70[ebp], 500	; 000001f4H
	jle	SHORT $LN187@ReadScript

; 2722 : 							{
; 2723 : 							AddNumberToBuffer(int(seconds_off/60), current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	eax, DWORD PTR _seconds_off$70[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2724 : 							AddIndexedStringToBuffer(251, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	251					; 000000fbH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2725 : 							}
; 2726 : 						else

	jmp	SHORT $LN186@ReadScript
$LN187@ReadScript:

; 2727 : 							{
; 2728 : 							AddNumberToBuffer(seconds_off, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seconds_off$70[ebp]
	push	ecx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2729 : 							AddIndexedStringToBuffer(240, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	240					; 000000f0H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN186@ReadScript:

; 2730 : 							}
; 2731 : 						AddIndexedStringToBuffer(188, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	188					; 000000bcH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN184@ReadScript
$LN188@ReadScript:

; 2732 : 						}
; 2733 : 					else if (seconds_off < -10)

	cmp	DWORD PTR _seconds_off$70[ebp], -10	; fffffff6H
	jge	$LN184@ReadScript

; 2734 : 						{
; 2735 : 						AddIndexedStringToBuffer(187, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	187					; 000000bbH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2736 : 						if (seconds_off < -500)

	cmp	DWORD PTR _seconds_off$70[ebp], -500	; fffffe0cH
	jge	SHORT $LN183@ReadScript

; 2737 : 							{
; 2738 : 							AddNumberToBuffer((int)(seconds_off/-60), current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _seconds_off$70[ebp]
	cdq
	mov	ecx, -60				; ffffffc4H
	idiv	ecx
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2739 : 							AddIndexedStringToBuffer(252, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	252					; 000000fcH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2740 : 							}
; 2741 : 						else

	jmp	SHORT $LN182@ReadScript
$LN183@ReadScript:

; 2742 : 							{
; 2743 : 							AddNumberToBuffer(-1*seconds_off, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seconds_off$70[ebp]
	imul	ecx, -1
	push	ecx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 2744 : 							AddIndexedStringToBuffer(241, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	241					; 000000f1H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN182@ReadScript:

; 2745 : 							}
; 2746 : 						AddIndexedStringToBuffer(188, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	188					; 000000bcH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN184@ReadScript:

; 2747 : 						}
; 2748 : 					}

	jmp	$LN103@ReadScript
$LN191@ReadScript:

; 2749 : 				}
; 2750 : 			else if (strcmp(token,"PATROL_TIME")==0)

	push	OFFSET ??_C@_0M@BDMBEEHA@PATROL_TIME?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN180@ReadScript

; 2751 : 				AddTimeToBuffer(mec->patrol_time, current_line);

	push	1
	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	call	?AddTimeToBuffer@@YAXKPADH@Z		; AddTimeToBuffer
	add	esp, 12					; 0000000cH
	jmp	$LN103@ReadScript
$LN180@ReadScript:

; 2752 : 			else if (strcmp(token,"ALTERNATE_STRIP_NAME")==0)

	push	OFFSET ??_C@_0BF@DNJJMPHP@ALTERNATE_STRIP_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN178@ReadScript

; 2753 : 				{
; 2754 : 				Objective		o;
; 2755 : 				_TCHAR			name[80];
; 2756 : 				o = FindObjective(mec->alternate_strip_id);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR [eax+60]
	push	edx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	DWORD PTR _o$46[ebp], eax

; 2757 : 				if (o)

	cmp	DWORD PTR _o$46[ebp], 0
	je	SHORT $LN177@ReadScript

; 2758 : 					{
; 2759 : 					o->GetName(name,79,FALSE);

	push	0
	push	79					; 0000004fH
	lea	eax, DWORD PTR _name$99[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$46[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$46[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 2760 : 					AddStringToBuffer(name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$99[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN177@ReadScript:

; 2761 : 					}
; 2762 : 				}

	jmp	$LN103@ReadScript
$LN178@ReadScript:

; 2763 : 			else if (strncmp(token,"GENERAL_LOCATION",16)==0 || strncmp(token,"SPECIFIC_LOCATION",17)==0 || strncmp(token,"NEAREST_LOCATION",16)==0 || strncmp(token,"THE_LOCATION",12)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BB@OMGDKJHI@GENERAL_LOCATION?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN174@ReadScript
	push	17					; 00000011H
	push	OFFSET ??_C@_0BC@DMENCOPB@SPECIFIC_LOCATION?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN174@ReadScript
	push	16					; 00000010H
	push	OFFSET ??_C@_0BB@OHEAIOPL@NEAREST_LOCATION?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN174@ReadScript
	push	12					; 0000000cH
	push	OFFSET ??_C@_0N@KHJIANEJ@THE_LOCATION?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN175@ReadScript
$LN174@ReadScript:

; 2764 : 				{
; 2765 : 				GridIndex	x=0,y=0;

	xor	ecx, ecx
	mov	WORD PTR _x$75[ebp], cx
	xor	edx, edx
	mov	WORD PTR _y$76[ebp], dx

; 2766 : 
; 2767 : 				sptr = token + 17;

	lea	eax, DWORD PTR _token$[ebp+17]
	mov	DWORD PTR _sptr$[ebp], eax

; 2768 : 				if (strncmp(token,"SPECIFIC_LOCATION",17)==0)

	push	17					; 00000011H
	push	OFFSET ??_C@_0BC@DMENCOPB@SPECIFIC_LOCATION?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN173@ReadScript

; 2769 : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN173@ReadScript:

; 2770 : 				if (strncmp(token,"THE_LOCATION",12)==0)

	push	12					; 0000000cH
	push	OFFSET ??_C@_0N@KHJIANEJ@THE_LOCATION?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN172@ReadScript

; 2771 : 					sptr -= 4;

	mov	ecx, DWORD PTR _sptr$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _sptr$[ebp], ecx
$LN172@ReadScript:

; 2772 : 				if (strcmp(sptr,"TARGET")==0)

	push	OFFSET ??_C@_06JNJLBPLI@TARGET?$AA@
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN171@ReadScript

; 2773 : 					{
; 2774 : 					x = mec->tx;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	cx, WORD PTR [eax+184]
	mov	WORD PTR _x$75[ebp], cx

; 2775 : 					y = mec->ty;

	mov	edx, DWORD PTR _mec$[ebp]
	mov	ax, WORD PTR [edx+186]
	mov	WORD PTR _y$76[ebp], ax
$LN171@ReadScript:

; 2776 : 					}
; 2777 : 				if (strcmp(sptr,"AWACS")==0)

	push	OFFSET ??_C@_05MAOIJGBI@AWACS?$AA@
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN170@ReadScript

; 2778 : 					{
; 2779 : 					Flight	flight = (Flight) vuDatabase->Find(mec->awacs_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR [edx+84]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$19[ebp], eax

; 2780 : 					Package	pack = flight->GetUnitPackage();

	mov	ecx, DWORD PTR _flight$19[ebp]
	call	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
	mov	DWORD PTR _pack$9[ebp], eax

; 2781 : 					pack->GetUnitDestination(&x,&y);

	lea	edx, DWORD PTR _y$76[ebp]
	push	edx
	lea	eax, DWORD PTR _x$75[ebp]
	push	eax
	mov	ecx, DWORD PTR _pack$9[ebp]
	call	?GetUnitDestination@UnitClass@@QAEXPAF0@Z ; UnitClass::GetUnitDestination
$LN170@ReadScript:

; 2782 : 					}
; 2783 : 				if (strcmp(sptr,"JSTAR")==0)

	push	OFFSET ??_C@_05CCPHICJJ@JSTAR?$AA@
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN169@ReadScript

; 2784 : 					{
; 2785 : 					Flight	flight = (Flight) vuDatabase->Find(mec->jstar_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR [edx+92]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$17[ebp], eax

; 2786 : 					Package	pack = flight->GetUnitPackage();

	mov	ecx, DWORD PTR _flight$17[ebp]
	call	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
	mov	DWORD PTR _pack$33[ebp], eax

; 2787 : 					pack->GetUnitDestination(&x,&y);

	lea	edx, DWORD PTR _y$76[ebp]
	push	edx
	lea	eax, DWORD PTR _x$75[ebp]
	push	eax
	mov	ecx, DWORD PTR _pack$33[ebp]
	call	?GetUnitDestination@UnitClass@@QAEXPAF0@Z ; UnitClass::GetUnitDestination
$LN169@ReadScript:

; 2788 : 					}
; 2789 : 				if (strcmp(sptr,"TANKER")==0)

	push	OFFSET ??_C@_06CEAHHNAF@TANKER?$AA@
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN168@ReadScript

; 2790 : 					{
; 2791 : 					Flight	flight = (Flight) vuDatabase->Find(mec->tanker_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR [edx+108]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$32[ebp], eax

; 2792 : 					Package	pack = flight->GetUnitPackage();

	mov	ecx, DWORD PTR _flight$32[ebp]
	call	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
	mov	DWORD PTR _pack$30[ebp], eax

; 2793 : 					pack->GetUnitDestination(&x,&y);

	lea	edx, DWORD PTR _y$76[ebp]
	push	edx
	lea	eax, DWORD PTR _x$75[ebp]
	push	eax
	mov	ecx, DWORD PTR _pack$30[ebp]
	call	?GetUnitDestination@UnitClass@@QAEXPAF0@Z ; UnitClass::GetUnitDestination
$LN168@ReadScript:

; 2794 : 					}
; 2795 : 				if (strcmp(sptr,"ECM")==0)

	push	OFFSET ??_C@_03EFHKIKDN@ECM?$AA@
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN167@ReadScript

; 2796 : 					{
; 2797 : 					Flight	flight = (Flight) vuDatabase->Find(mec->ecm_id);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR [edx+100]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$28[ebp], eax

; 2798 : 					Package	pack = flight->GetUnitPackage();

	mov	ecx, DWORD PTR _flight$28[ebp]
	call	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
	mov	DWORD PTR _pack$26[ebp], eax

; 2799 : 					pack->GetUnitDestination(&x,&y);

	lea	edx, DWORD PTR _y$76[ebp]
	push	edx
	lea	eax, DWORD PTR _x$75[ebp]
	push	eax
	mov	ecx, DWORD PTR _pack$26[ebp]
	call	?GetUnitDestination@UnitClass@@QAEXPAF0@Z ; UnitClass::GetUnitDestination
$LN167@ReadScript:

; 2800 : 					}
; 2801 : 				if (strcmp(sptr,"ALT_AIRBASE")==0)

	push	OFFSET ??_C@_0M@HJCHKFEP@ALT_AIRBASE?$AA@
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN166@ReadScript

; 2802 : 					{
; 2803 : 					x = mec->abx;

	mov	edx, DWORD PTR _mec$[ebp]
	mov	ax, WORD PTR [edx+188]
	mov	WORD PTR _x$75[ebp], ax

; 2804 : 					y = mec->aby;

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	dx, WORD PTR [ecx+190]
	mov	WORD PTR _y$76[ebp], dx
$LN166@ReadScript:

; 2805 : 					}
; 2806 : 				if (strcmp(sptr,"THREAT")==0)

	push	OFFSET ??_C@_06BHJECOCH@THREAT?$AA@
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN165@ReadScript

; 2807 : 					{
; 2808 : 					x = mec->threat_x[mec->curr_data];

	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+208]
	mov	eax, DWORD PTR _mec$[ebp]
	mov	cx, WORD PTR [eax+edx*2+40]
	mov	WORD PTR _x$75[ebp], cx

; 2809 : 					y = mec->threat_y[mec->curr_data];

	mov	edx, DWORD PTR _mec$[ebp]
	movsx	eax, WORD PTR [edx+208]
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+50]
	mov	WORD PTR _y$76[ebp], dx
$LN165@ReadScript:

; 2810 : 					}
; 2811 : 				AddLocationToBuffer(tolower(token[0]), x, y, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$76[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$75[ebp]
	push	edx
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _token$[ebp+eax]
	push	ecx
	call	_tolower
	add	esp, 4
	push	eax
	call	?AddLocationToBuffer@@YAXDFFPAD@Z	; AddLocationToBuffer
	add	esp, 16					; 00000010H
	jmp	$LN103@ReadScript
$LN175@ReadScript:

; 2812 : 				}
; 2813 : 
; 2814 : 			//
; 2815 : 			// Mission evaluation tokens here
; 2816 : 			//
; 2817 : 			else if (strcmp(token,"PACKAGE_SUCCESS")==0)

	push	OFFSET ??_C@_0BA@CBDBMLNG@PACKAGE_SUCCESS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN163@ReadScript

; 2818 : 				{
; 2819 : 				i = mec->package_element->mission_success;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+95]
	mov	DWORD PTR _i$[ebp], edx

; 2820 : // 2002-02-16 MN modified, now from index 19 for the addition of AWACSAbort success condition
; 2821 : //				AddIndexedStringToBuffer(20+i, current_line);
; 2822 : 				AddIndexedStringToBuffer(19+i, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 19					; 00000013H
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN163@ReadScript:

; 2823 : 				}
; 2824 : 			else if (strcmp(token,"FLIGHT_SUCCESS")==0)

	push	OFFSET ??_C@_0P@MLGAPOFH@FLIGHT_SUCCESS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN161@ReadScript

; 2825 : 			{
; 2826 : 				if (mec->player_element) // JB 010121	

	mov	eax, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN160@ReadScript

; 2827 : // 2002-02-16 MN modified, now from index 19 for the addition of AWACSAbort success condition
; 2828 : //					AddIndexedStringToBuffer(20+mec->player_element->mission_success, current_line);
; 2829 : 					AddIndexedStringToBuffer(19+mec->player_element->mission_success, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	ecx, BYTE PTR [eax+95]
	add	ecx, 19					; 00000013H
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN160@ReadScript:

; 2830 : 			}

	jmp	$LN103@ReadScript
$LN161@ReadScript:

; 2831 : 			else if (strcmp(token,"PILOT_RATING")==0)

	push	OFFSET ??_C@_0N@NKGNADJL@PILOT_RATING?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN158@ReadScript

; 2832 : 			{
; 2833 : 				if (mec->curr_pilot) // JB 010121

	mov	eax, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN157@ReadScript

; 2834 : 		 			AddIndexedStringToBuffer(10+mec->curr_pilot->rating, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+212]
	movzx	ecx, BYTE PTR [eax+80]
	add	ecx, 10					; 0000000aH
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN157@ReadScript:

; 2835 : 			}

	jmp	$LN103@ReadScript
$LN158@ReadScript:

; 2836 : 			else if (strcmp(token,"PILOT_NAME")==0)

	push	OFFSET ??_C@_0L@FNBHJECK@PILOT_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN155@ReadScript

; 2837 : 			{
; 2838 : 				if (mec->curr_pilot) // JB 010121

	mov	eax, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN154@ReadScript

; 2839 : 					AddStringToBuffer(mec->curr_pilot->pilot_name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+212]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN154@ReadScript:

; 2840 : 			}

	jmp	$LN103@ReadScript
$LN155@ReadScript:

; 2841 : 			else if (strcmp(token,"PILOT_STATUS")==0)

	push	OFFSET ??_C@_0N@BLKPJHHD@PILOT_STATUS?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN152@ReadScript

; 2842 : 				{
; 2843 : 				ShiAssert(mec->curr_pilot->pilot_status >= 0 && mec->curr_pilot->pilot_status <= 4);
; 2844 : 				AddIndexedStringToBuffer(95+mec->curr_pilot->pilot_status, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	movzx	edx, BYTE PTR [ecx+65]
	add	edx, 95					; 0000005fH
	push	edx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN152@ReadScript:

; 2845 : 				}
; 2846 : 			else if (strcmp(token,"AA_KILLS")==0)

	push	OFFSET ??_C@_08OJBNPKBJ@AA_KILLS?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN150@ReadScript

; 2847 : 			{
; 2848 : 				if (mec->curr_pilot) // JB 010121

	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	je	SHORT $LN149@ReadScript

; 2849 : 					AddNumberToBuffer(mec->curr_pilot->aa_kills, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	movzx	edx, BYTE PTR [ecx+67]
	push	edx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN149@ReadScript:

; 2850 : 			}

	jmp	$LN103@ReadScript
$LN150@ReadScript:

; 2851 : 			else if (strcmp(token,"AG_KILLS")==0)

	push	OFFSET ??_C@_08CPHCPDJO@AG_KILLS?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN147@ReadScript

; 2852 : 			{
; 2853 : 				if (mec->curr_pilot) // JB 010121

	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	je	SHORT $LN146@ReadScript

; 2854 : 					AddNumberToBuffer(mec->curr_pilot->ag_kills + mec->curr_pilot->as_kills + mec->curr_pilot->an_kills, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	movzx	edx, BYTE PTR [ecx+68]
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	movzx	eax, BYTE PTR [ecx+69]
	add	edx, eax
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [ecx+212]
	movzx	ecx, BYTE PTR [eax+70]
	add	edx, ecx
	push	edx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN146@ReadScript:

; 2855 : 			}

	jmp	$LN103@ReadScript
$LN147@ReadScript:

; 2856 : 			else if (strcmp(token,"AI_AA_KILLS")==0)

	push	OFFSET ??_C@_0M@DKBNCJOI@AI_AA_KILLS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN144@ReadScript

; 2857 : 			{
; 2858 : 				AddNumberToBuffer(CPilotData->aa_kills, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CPilotData
	movzx	edx, BYTE PTR [ecx+67]
	push	edx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN144@ReadScript:

; 2859 : 			}
; 2860 : 			else if (strcmp(token,"AI_AG_KILLS")==0)

	push	OFFSET ??_C@_0M@PMHCCAGP@AI_AG_KILLS?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN142@ReadScript

; 2861 : 			{
; 2862 : 				AddNumberToBuffer(CPilotData->ag_kills + CPilotData->as_kills + CPilotData->an_kills, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _CPilotData
	movzx	eax, BYTE PTR [edx+68]
	mov	ecx, DWORD PTR _CPilotData
	movzx	edx, BYTE PTR [ecx+69]
	add	eax, edx
	mov	ecx, DWORD PTR _CPilotData
	movzx	edx, BYTE PTR [ecx+70]
	add	eax, edx
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN142@ReadScript:

; 2863 : 			}
; 2864 : 			else if (strcmp(token,"FRIENDLY_LOSSES")==0)

	push	OFFSET ??_C@_0BA@FCCCFIKL@FRIENDLY_LOSSES?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN140@ReadScript

; 2865 : 			{
; 2866 : 				AddIndexedStringToBuffer(mec->friendly_losses, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN140@ReadScript:

; 2867 : 			}
; 2868 : 			else if (strcmp(token,"LONG_MISSION_SUCCESS")==0)

	push	OFFSET ??_C@_0BF@OEDNAPDC@LONG_MISSION_SUCCESS?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN138@ReadScript

; 2869 : 				{
; 2870 : 				_TCHAR		tstring[80],wstring[80];
; 2871 : 
; 2872 : // 2002-02-17 MN changed from 25+flight_data... to 4000+flight_data, new entries in strings.wch
; 2873 : 				AddIndexedStringToBuffer(4000+flight_data->mission_success, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _flight_data$[ebp]
	movzx	ecx, BYTE PTR [eax+95]
	add	ecx, 4000				; 00000fa0H
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 2874 : 				ReadIndexedString(1000+flight_data->failure_code, wstring, 80);

	push	80					; 00000050H
	lea	edx, DWORD PTR _wstring$97[ebp]
	push	edx
	mov	eax, DWORD PTR _flight_data$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	add	ecx, 1000				; 000003e8H
	push	ecx
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 2875 : 				_stprintf(tstring,wstring,flight_data->failure_data);

	mov	edx, DWORD PTR _flight_data$[ebp]
	movsx	eax, WORD PTR [edx+98]
	push	eax
	lea	ecx, DWORD PTR _wstring$97[ebp]
	push	ecx
	lea	edx, DWORD PTR _tstring$98[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 2876 : 				AddStringToBuffer(tstring, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tstring$98[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN138@ReadScript:

; 2877 : 				}
; 2878 : 			else if (strcmp(token,"PLANE_STATUS")==0)

	push	OFFSET ??_C@_0N@BMOBJAGI@PLANE_STATUS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN136@ReadScript

; 2879 : 			{
; 2880 : 				if (mec->curr_pilot) // JB 010121

	mov	eax, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN135@ReadScript

; 2881 : 					AddIndexedStringToBuffer(90+mec->curr_pilot->aircraft_status, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+212]
	movzx	ecx, BYTE PTR [eax+66]
	add	ecx, 90					; 0000005aH
	push	ecx
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN135@ReadScript:

; 2882 : 			}

	jmp	$LN103@ReadScript
$LN136@ReadScript:

; 2883 : 			else if (strcmp(token,"SHOW_THREATS")==0)

	push	OFFSET ??_C@_0N@GPGBNCDH@SHOW_THREATS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN133@ReadScript

; 2884 : 				{
; 2885 : 				for (i=0; i<MAX_COLLECTED_THREATS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN132@ReadScript
$LN131@ReadScript:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN132@ReadScript:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN130@ReadScript

; 2886 : 					{
; 2887 : 					if (mec->threat_ids[i])

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mec$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+30]
	test	eax, eax
	je	SHORT $LN129@ReadScript

; 2888 : 						{
; 2889 : 						mec->curr_data = i;

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	dx, WORD PTR _i$[ebp]
	mov	WORD PTR [ecx+208], dx

; 2890 : 						ReadScriptedBriefFile ("threat.b", current_line, win, brief, mec, mec->package_element);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08LBGOJGJE@threat?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H
$LN129@ReadScript:

; 2891 : 						}
; 2892 : 					}

	jmp	SHORT $LN131@ReadScript
$LN130@ReadScript:

; 2893 : 				}
; 2894 : 			else if (strcmp(token,"THREAT_VEHICLE_NAME")==0)

	jmp	$LN103@ReadScript
$LN133@ReadScript:
	push	OFFSET ??_C@_0BE@KOEEKKNE@THREAT_VEHICLE_NAME?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN127@ReadScript

; 2895 : 				{
; 2896 : 				VehicleClassDataType *vc = (VehicleClassDataType*) Falcon4ClassTable[mec->threat_ids[mec->curr_data]].dataPtr;

	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+208]
	mov	eax, DWORD PTR _mec$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+30]
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$24[ebp], eax

; 2897 : 				AddStringToBuffer(vc->Name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vc$24[ebp]
	add	edx, 8
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN103@ReadScript
$LN127@ReadScript:

; 2898 : 				}
; 2899 : 			else if (strcmp(token,"WEAPON_LOAD")==0)

	push	OFFSET ??_C@_0M@MKJEOGME@WEAPON_LOAD?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN125@ReadScript

; 2900 : 			{
; 2901 : 				if (mec->curr_pilot) // JB 010121

	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	je	SHORT $LN124@ReadScript

; 2902 : 					AddNumberToBuffer(mec->curr_pilot->weapon_data[mec->curr_weapon].starting_load, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+211]
	imul	eax, 36					; 00000024H
	movsx	ecx, WORD PTR [ecx+eax+106]
	push	ecx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN124@ReadScript:

; 2903 : 			}

	jmp	$LN103@ReadScript
$LN125@ReadScript:

; 2904 : 			else if (strcmp(token,"WEAPON_NAME")==0)

	push	OFFSET ??_C@_0M@EAIKAKLC@WEAPON_NAME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN122@ReadScript

; 2905 : 			{
; 2906 : 				if (mec->curr_pilot) // JB 010121

	mov	eax, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN121@ReadScript

; 2907 : 					AddStringToBuffer(mec->curr_pilot->weapon_data[mec->curr_weapon].weapon_name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+211]
	imul	edx, 36					; 00000024H
	lea	eax, DWORD PTR [eax+edx+84]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN121@ReadScript:

; 2908 : 			}

	jmp	$LN103@ReadScript
$LN122@ReadScript:

; 2909 : 			else if (strcmp(token,"WEAPON_FIRED")==0)

	push	OFFSET ??_C@_0N@GFGDFMMO@WEAPON_FIRED?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN119@ReadScript

; 2910 : 			{
; 2911 : 				if (mec->curr_pilot) // JB 010121

	mov	edx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [edx+212], 0
	je	SHORT $LN118@ReadScript

; 2912 : 					AddNumberToBuffer(mec->curr_pilot->weapon_data[mec->curr_weapon].fired, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [eax+211]
	imul	ecx, 36					; 00000024H
	movzx	edx, BYTE PTR [edx+ecx+108]
	push	edx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN118@ReadScript:

; 2913 : 			}

	jmp	$LN103@ReadScript
$LN119@ReadScript:

; 2914 : 			else if (strcmp(token,"WEAPON_HIT")==0)

	push	OFFSET ??_C@_0L@ODMPMGIJ@WEAPON_HIT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN116@ReadScript

; 2915 : 			{
; 2916 : 				if (mec->curr_pilot) // JB 010121

	mov	ecx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	je	SHORT $LN115@ReadScript

; 2917 : 					AddNumberToBuffer(mec->curr_pilot->weapon_data[mec->curr_weapon].hit, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+211]
	imul	eax, 36					; 00000024H
	movzx	ecx, BYTE PTR [ecx+eax+110]
	push	ecx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN115@ReadScript:

; 2918 : 			}

	jmp	$LN103@ReadScript
$LN116@ReadScript:

; 2919 : 			else if (strcmp(token,"WEAPON_MISSED")==0)

	push	OFFSET ??_C@_0O@KDHLBJNE@WEAPON_MISSED?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN113@ReadScript

; 2920 : 			{
; 2921 : 				if (mec->curr_pilot) // JB 010121

	mov	eax, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN112@ReadScript

; 2922 : 					AddNumberToBuffer(mec->curr_pilot->weapon_data[mec->curr_weapon].missed, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+211]
	imul	edx, 36					; 00000024H
	movzx	eax, BYTE PTR [eax+edx+109]
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN112@ReadScript:

; 2923 : 			}

	jmp	$LN103@ReadScript
$LN113@ReadScript:

; 2924 : 			else if (strcmp(token,"WEAPON_HIT_RATIO")==0)

	push	OFFSET ??_C@_0BB@GHONPEOJ@WEAPON_HIT_RATIO?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN110@ReadScript

; 2925 : 				{
; 2926 : 				// JB 010121
; 2927 : 				if (mec->curr_pilot) // JB 010121

	mov	edx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [edx+212], 0
	je	SHORT $LN109@ReadScript

; 2928 : 				{
; 2929 : 					i = (100*mec->curr_pilot->weapon_data[mec->curr_weapon].hit)/mec->curr_pilot->weapon_data[mec->curr_weapon].fired;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+211]
	imul	eax, 36					; 00000024H
	movzx	eax, BYTE PTR [ecx+eax+110]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [ecx+211]
	imul	ecx, 36					; 00000024H
	movzx	ecx, BYTE PTR [edx+ecx+108]
	cdq
	idiv	ecx
	mov	DWORD PTR _i$[ebp], eax

; 2930 : 					AddNumberToBuffer(i, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN109@ReadScript:

; 2931 : 				}
; 2932 : 				}

	jmp	$LN103@ReadScript
$LN110@ReadScript:

; 2933 : 			else if (strcmp(token,"SHOW_EVENT")==0)

	push	OFFSET ??_C@_0L@JDMDCMBE@SHOW_EVENT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN107@ReadScript

; 2934 : 				{
; 2935 : 				_TCHAR	*sptr;
; 2936 : 				sptr = _tcschr(CTextPtr,'@');

	push	64					; 00000040H
	mov	edx, DWORD PTR _CTextPtr
	push	edx
	call	?_tcschr@@YAPADPADI@Z			; _tcschr
	add	esp, 8
	mov	DWORD PTR _sptr$50[ebp], eax

; 2937 : 				if (sptr)

	cmp	DWORD PTR _sptr$50[ebp], 0
	je	SHORT $LN106@ReadScript

; 2938 : 					{
; 2939 : 					// replace the tab char with one of our tabs
; 2940 : 					sptr[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _sptr$50[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 2941 : 					AddStringToBuffer(CTextPtr, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _CTextPtr
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 2942 : 					CTextPtr = sptr + 3;	// Skip the tab values

	mov	ecx, DWORD PTR _sptr$50[ebp]
	add	ecx, 3
	mov	DWORD PTR _CTextPtr, ecx

; 2943 : 					}
; 2944 : 				else

	jmp	SHORT $LN105@ReadScript
$LN106@ReadScript:

; 2945 : 					AddStringToBuffer(CTextPtr, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _CTextPtr
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN105@ReadScript:
	jmp	SHORT $LN103@ReadScript
$LN107@ReadScript:

; 2946 : 				}
; 2947 : 			else if (strcmp(token,"SHOW_RESULT")==0)

	push	OFFSET ??_C@_0M@JJCIBNAA@SHOW_RESULT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN103@ReadScript

; 2948 : 				AddStringToBuffer(CTextPtr, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _CTextPtr
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN103@ReadScript:

; 2949 : //dpc - reversed wind heading to show correctly and consistent with DED
; 2950 : //			if (strcmp(token,"WIND_HEADING")==0)
; 2951 : //  			AddNumberToBuffer(FloatToInt32(((WeatherClass*)realWeather)->WindHeading*RTD),current_line);
; 2952 : 			float reversedWindHeading = ((WeatherClass*)realWeather)->windHeading*RTD + 180.0F;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [ecx+15728]
	mulss	xmm0, DWORD PTR __real@42652ee1
	addss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR _reversedWindHeading$52[ebp], xmm0

; 2953 : 			if (reversedWindHeading > 360.0F) reversedWindHeading -= 360.0F;

	movss	xmm0, DWORD PTR _reversedWindHeading$52[ebp]
	comiss	xmm0, DWORD PTR __real@43b40000
	jbe	SHORT $LN102@ReadScript
	movss	xmm0, DWORD PTR _reversedWindHeading$52[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _reversedWindHeading$52[ebp], xmm0
$LN102@ReadScript:

; 2954 : 			if (strcmp(token,"WIND_HEADING")==0)

	push	OFFSET ??_C@_0N@DBCANENI@WIND_HEADING?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN101@ReadScript

; 2955 : 				AddNumberToBuffer(FloatToInt32(reversedWindHeading),current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _reversedWindHeading$52[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN101@ReadScript:

; 2956 : //end fix
; 2957 : 			else if (strcmp(token,"WIND_SPEED")==0)

	push	OFFSET ??_C@_0L@DFMPPPLF@WIND_SPEED?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN99@ReadScript

; 2958 : 				//AddNumberToBuffer(FloatToInt32(((WeatherClass*)realWeather)->WindSpeed),current_line);
; 2959 : 				//MI fix to show Knots/H instead of KM/H
; 2960 : 				AddNumberToBuffer(FloatToInt32((((WeatherClass*)realWeather)->windSpeed + 0.5F) * 
; 2961 : 				KPH_TO_FPS * FTPSEC_TO_KNOTS),current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+15724]
	addss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3f693e32
	mulss	xmm0, DWORD PTR __real@3f17ac60
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN99@ReadScript:

; 2962 : 			else if (strcmp(token,"TEMPERATURE")==0)

	push	OFFSET ??_C@_0M@MHBLBKPD@TEMPERATURE?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN97@ReadScript

; 2963 : 				AddNumberToBuffer(FloatToInt32(((WeatherClass*)realWeather)->temperature),current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	push	ecx
	movss	xmm0, DWORD PTR [eax+16028]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN97@ReadScript:

; 2964 : 			else if (strcmp(token,"CLOUD_TYPE")==0)

	push	OFFSET ??_C@_0L@JEABLADM@CLOUD_TYPE?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN95@ReadScript

; 2965 : 				//JAM 17Nov03
; 2966 : 				{
; 2967 : 					char szTemp[256];
; 2968 : 
; 2969 : 					if(realWeather->weatherCondition == SUNNY)

	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	cmp	DWORD PTR [edx+15688], 1
	jne	SHORT $LN94@ReadScript

; 2970 : 						sprintf(szTemp,"Sunny ");

	push	OFFSET ??_C@_06BIBOHBLI@Sunny?5?$AA@
	lea	eax, DWORD PTR _szTemp$93[ebp]
	push	eax
	call	_sprintf
	add	esp, 8
	jmp	SHORT $LN88@ReadScript
$LN94@ReadScript:

; 2971 : 					else if(realWeather->weatherCondition == FAIR)

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	cmp	DWORD PTR [ecx+15688], 2
	jne	SHORT $LN92@ReadScript

; 2972 : 						sprintf(szTemp,"Fair ");

	push	OFFSET ??_C@_05LHLBMJMF@Fair?5?$AA@
	lea	edx, DWORD PTR _szTemp$93[ebp]
	push	edx
	call	_sprintf
	add	esp, 8
	jmp	SHORT $LN88@ReadScript
$LN92@ReadScript:

; 2973 : 					else if(realWeather->weatherCondition == POOR)

	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	cmp	DWORD PTR [eax+15688], 3
	jne	SHORT $LN90@ReadScript

; 2974 : 						sprintf(szTemp,"Poor ");

	push	OFFSET ??_C@_05PIGFMJPO@Poor?5?$AA@
	lea	ecx, DWORD PTR _szTemp$93[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
	jmp	SHORT $LN88@ReadScript
$LN90@ReadScript:

; 2975 : 					else if(realWeather->weatherCondition == INCLEMENT)

	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	cmp	DWORD PTR [edx+15688], 4
	jne	SHORT $LN88@ReadScript

; 2976 : 						sprintf(szTemp,"Inclement ");

	push	OFFSET ??_C@_0L@DFEKLGMK@Inclement?5?$AA@
	lea	eax, DWORD PTR _szTemp$93[ebp]
	push	eax
	call	_sprintf
	add	esp, 8
$LN88@ReadScript:

; 2977 : 
; 2978 : 					_tcscat(current_line,szTemp);

	lea	ecx, DWORD PTR _szTemp$93[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
	jmp	$LN1@ReadScript
$LN95@ReadScript:

; 2979 : 
; 2980 : /*				int		cc =	(((WeatherClass*)realWeather)->GetCloudCover(mec->tx,mec->ty) +
; 2981 : 								((WeatherClass*)realWeather)->GetCloudCover(mec->tx-1,mec->ty) +
; 2982 : 								((WeatherClass*)realWeather)->GetCloudCover(mec->tx,mec->ty-1) +
; 2983 : 								((WeatherClass*)realWeather)->GetCloudCover(mec->tx+1,mec->ty) +
; 2984 : 								((WeatherClass*)realWeather)->GetCloudCover(mec->tx,mec->ty+1))/5;
; 2985 : 				if (cc > 4)
; 2986 : 					AddIndexedStringToBuffer(603,current_line);
; 2987 : 				else if (cc > 2)
; 2988 : 					AddIndexedStringToBuffer(602,current_line);
; 2989 : 				else
; 2990 : 					AddIndexedStringToBuffer(600,current_line);
; 2991 : */				}
; 2992 : 
; 2993 : 			else if (strcmp(token,"CLOUD_TYPETXT")==0)

	push	OFFSET ??_C@_0O@EGKEPNOD@CLOUD_TYPETXT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN86@ReadScript

; 2994 : 			{
; 2995 : 				//THW 2003-12-07 Hack to display Cloud Type text and still have tab later
; 2996 : 				AddStringToBuffer("Situation:",current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@DMNMBFBN@Situation?3?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN86@ReadScript:

; 2997 : 			}
; 2998 : 
; 2999 : 			else if (strcmp(token,"CLOUD_BASETXT")==0)

	push	OFFSET ??_C@_0O@CONFGFEI@CLOUD_BASETXT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN84@ReadScript

; 3000 : 			{
; 3001 : 				//THW 2003-12-07 Hack to display Cloud Base text and still have tab later
; 3002 : 				AddStringToBuffer("Cloud Base:",current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@GMCADLIP@Cloud?5Base?3?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN84@ReadScript:

; 3003 : 			}
; 3004 : 
; 3005 : 			else if (strcmp(token,"CLOUD_BASE")==0)

	push	OFFSET ??_C@_0L@OMEKBDDH@CLOUD_BASE?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN82@ReadScript

; 3006 : 			{
; 3007 : 				//JAM 17Nov03
; 3008 : 				//char szTemp[256];
; 3009 : 
; 3010 : 				//sprintf(szTemp,"Clouds:           %d",-realWeather->stratusZ/1000);
; 3011 : 				//_tcscat(current_line,szTemp);
; 3012 : 				AddNumberToBuffer(FloatToInt32(-((WeatherClass*)realWeather)->stratusZ/1000.0f+0.5f),current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+15716]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@447a0000
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN82@ReadScript:

; 3013 : 
; 3014 : 			}
; 3015 : 			else if (strcmp(token,"CON_LAYER")==0)

	push	OFFSET ??_C@_09NEIJCFEG@CON_LAYER?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN80@ReadScript

; 3016 : //				AddNumberToBuffer(((WeatherClass*)realWeather)->contrailLow/1000.f,current_line); // Cobra - contrail not in 100's of feet anymore
; 3017 : 				AddNumberToBuffer(FloatToInt32(-((WeatherClass*)realWeather)->stratus2Z/1000.0f+0.5f),current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+15720]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@447a0000
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN80@ReadScript:

; 3018 : 			else if (strcmp(token,"WAYPOINT_NUM")==0)

	push	OFFSET ??_C@_0N@MPKJONPA@WAYPOINT_NUM?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN78@ReadScript

; 3019 : 				AddNumberToBuffer(mec->curr_data, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	movsx	ecx, WORD PTR [eax+208]
	push	ecx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN78@ReadScript:

; 3020 : 			else if (strcmp(token,"WAYPOINT_ACTION")==0)

	push	OFFSET ??_C@_0BA@EMAJDOKP@WAYPOINT_ACTION?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN76@ReadScript

; 3021 : 			    GetWpActionToBuffer(CWayPoint, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CWayPoint
	push	ecx
	call	?GetWpActionToBuffer@@YAXPAVWayPointClass@@PAD@Z ; GetWpActionToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN76@ReadScript:

; 3022 : 			else if (strcmp(token,"WAYPOINT_TIME")==0)

	push	OFFSET ??_C@_0O@ODIHLF@WAYPOINT_TIME?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN74@ReadScript

; 3023 : 			    GetWpTimeToBuffer(CWayPoint, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CWayPoint
	push	ecx
	call	?GetWpTimeToBuffer@@YAXPAVWayPointClass@@PAD@Z ; GetWpTimeToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN74@ReadScript:

; 3024 : 			else if (strcmp(token,"WAYPOINT_DISTANCE")==0)

	push	OFFSET ??_C@_0BC@JKELBHA@WAYPOINT_DISTANCE?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN72@ReadScript

; 3025 : 			{
; 3026 : 			    _TCHAR		string[32] = {0};

	mov	BYTE PTR _string$105[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _string$105[ebp+1], eax
	mov	DWORD PTR _string$105[ebp+5], eax
	mov	DWORD PTR _string$105[ebp+9], eax
	mov	DWORD PTR _string$105[ebp+13], eax
	mov	DWORD PTR _string$105[ebp+17], eax
	mov	DWORD PTR _string$105[ebp+21], eax
	mov	DWORD PTR _string$105[ebp+25], eax
	mov	WORD PTR _string$105[ebp+29], ax
	mov	BYTE PTR _string$105[ebp+31], al

; 3027 : 			    GetWptDist(CWayPoint, LWayPoint, string);

	lea	ecx, DWORD PTR _string$105[ebp]
	push	ecx
	mov	edx, DWORD PTR _LWayPoint
	push	edx
	mov	eax, DWORD PTR _CWayPoint
	push	eax
	call	?GetWptDist@@YAXPAVWayPointClass@@0PAD@Z ; GetWptDist
	add	esp, 12					; 0000000cH

; 3028 : 			    AddRightJustifiedStringToBrief(string, 40, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	40					; 00000028H
	lea	ecx, DWORD PTR _string$105[ebp]
	push	ecx
	call	?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z ; AddRightJustifiedStringToBrief
	add	esp, 20					; 00000014H
	jmp	$LN1@ReadScript
$LN72@ReadScript:

; 3029 : 			}
; 3030 : 			else if (strcmp(token,"WAYPOINT_HEADING")==0)

	push	OFFSET ??_C@_0BB@LGCEINB@WAYPOINT_HEADING?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN70@ReadScript

; 3031 : 			{
; 3032 : 			    _TCHAR		string[32] = {0};

	mov	BYTE PTR _string$106[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _string$106[ebp+1], eax
	mov	DWORD PTR _string$106[ebp+5], eax
	mov	DWORD PTR _string$106[ebp+9], eax
	mov	DWORD PTR _string$106[ebp+13], eax
	mov	DWORD PTR _string$106[ebp+17], eax
	mov	DWORD PTR _string$106[ebp+21], eax
	mov	DWORD PTR _string$106[ebp+25], eax
	mov	WORD PTR _string$106[ebp+29], ax
	mov	BYTE PTR _string$106[ebp+31], al

; 3033 : 			    GetWpHeading(CWayPoint, LWayPoint, string);

	lea	ecx, DWORD PTR _string$106[ebp]
	push	ecx
	mov	edx, DWORD PTR _LWayPoint
	push	edx
	mov	eax, DWORD PTR _CWayPoint
	push	eax
	call	?GetWpHeading@@YAXPAVWayPointClass@@0PAD@Z ; GetWpHeading
	add	esp, 12					; 0000000cH

; 3034 : 			    
; 3035 : 			    AddRightJustifiedStringToBrief(string, 40, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	40					; 00000028H
	lea	ecx, DWORD PTR _string$106[ebp]
	push	ecx
	call	?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z ; AddRightJustifiedStringToBrief
	add	esp, 20					; 00000014H
	jmp	$LN1@ReadScript
$LN70@ReadScript:

; 3036 : 			}
; 3037 : 			else if (strcmp(token,"WAYPOINT_SPEED")==0)

	push	OFFSET ??_C@_0P@JKFPMDCB@WAYPOINT_SPEED?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN68@ReadScript

; 3038 : 			{
; 3039 : 			    _TCHAR		string[32] = {0};

	mov	BYTE PTR _string$107[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _string$107[ebp+1], eax
	mov	DWORD PTR _string$107[ebp+5], eax
	mov	DWORD PTR _string$107[ebp+9], eax
	mov	DWORD PTR _string$107[ebp+13], eax
	mov	DWORD PTR _string$107[ebp+17], eax
	mov	DWORD PTR _string$107[ebp+21], eax
	mov	DWORD PTR _string$107[ebp+25], eax
	mov	WORD PTR _string$107[ebp+29], ax
	mov	BYTE PTR _string$107[ebp+31], al

; 3040 : 			    GetWptSpeed(CWayPoint, LWayPoint, string);

	lea	ecx, DWORD PTR _string$107[ebp]
	push	ecx
	mov	edx, DWORD PTR _LWayPoint
	push	edx
	mov	eax, DWORD PTR _CWayPoint
	push	eax
	call	?GetWptSpeed@@YAXPAVWayPointClass@@0PAD@Z ; GetWptSpeed
	add	esp, 12					; 0000000cH

; 3041 : 			    
; 3042 : 			    AddRightJustifiedStringToBrief(string, 40, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	40					; 00000028H
	lea	ecx, DWORD PTR _string$107[ebp]
	push	ecx
	call	?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z ; AddRightJustifiedStringToBrief
	add	esp, 20					; 00000014H
	jmp	$LN1@ReadScript
$LN68@ReadScript:

; 3043 : 			}
; 3044 : 			else if (strcmp(token,"WAYPOINT_ALT")==0)

	push	OFFSET ??_C@_0N@BPDNMMEB@WAYPOINT_ALT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN66@ReadScript

; 3045 : 			{
; 3046 : 			    _TCHAR		string[32] = {0};

	mov	BYTE PTR _string$108[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _string$108[ebp+1], eax
	mov	DWORD PTR _string$108[ebp+5], eax
	mov	DWORD PTR _string$108[ebp+9], eax
	mov	DWORD PTR _string$108[ebp+13], eax
	mov	DWORD PTR _string$108[ebp+17], eax
	mov	DWORD PTR _string$108[ebp+21], eax
	mov	DWORD PTR _string$108[ebp+25], eax
	mov	WORD PTR _string$108[ebp+29], ax
	mov	BYTE PTR _string$108[ebp+31], al

; 3047 : 			    int alt = GetWpAlt(CWayPoint, LWayPoint, string);

	lea	ecx, DWORD PTR _string$108[ebp]
	push	ecx
	mov	edx, DWORD PTR _LWayPoint
	push	edx
	mov	eax, DWORD PTR _CWayPoint
	push	eax
	call	?GetWpAlt@@YAHPAVWayPointClass@@0PAD@Z	; GetWpAlt
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _alt$41[ebp], eax

; 3048 : 			    if (alt > 0)

	cmp	DWORD PTR _alt$41[ebp], 0
	jle	SHORT $LN65@ReadScript

; 3049 : 			    {
; 3050 : 				AddRightJustifiedStringToBrief(string, 40, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	40					; 00000028H
	lea	ecx, DWORD PTR _string$108[ebp]
	push	ecx
	call	?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z ; AddRightJustifiedStringToBrief
	add	esp, 20					; 00000014H

; 3051 : 				if (alt < MINIMUM_ASL_ALTITUDE)

	cmp	DWORD PTR _alt$41[ebp], 5000		; 00001388H
	jge	SHORT $LN64@ReadScript

; 3052 : 				    AddIndexedStringToBuffer(1606, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	1606					; 00000646H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 3053 : 				else

	jmp	SHORT $LN63@ReadScript
$LN64@ReadScript:

; 3054 : 				    AddIndexedStringToBuffer(1605, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	1605					; 00000645H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN63@ReadScript:

; 3055 : 			    }
; 3056 : 			    else

	jmp	SHORT $LN62@ReadScript
$LN65@ReadScript:

; 3057 : 			    {
; 3058 : 				AddRightJustifiedStringToBrief(string, 40, current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	40					; 00000028H
	lea	ecx, DWORD PTR _string$108[ebp]
	push	ecx
	call	?AddRightJustifiedStringToBrief@@YAXPADH0PAVC_Window@@0@Z ; AddRightJustifiedStringToBrief
	add	esp, 20					; 00000014H
$LN62@ReadScript:

; 3059 : 			    }

	jmp	$LN1@ReadScript
$LN66@ReadScript:

; 3060 : 			}
; 3061 : 			else if (strcmp(token,"WAYPOINT_CLIMB")==0)

	push	OFFSET ??_C@_0P@COAGPCLP@WAYPOINT_CLIMB?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN60@ReadScript

; 3062 : 				{
; 3063 : 				WayPoint		nw = NULL;

	mov	DWORD PTR _nw$57[ebp], 0

; 3064 : 
; 3065 : 				if (CWayPoint && CWayPoint->GetWPAction() != WP_LAND && CWayPoint->GetWPAction() != WP_REFUEL)

	cmp	DWORD PTR _CWayPoint, 0
	je	SHORT $LN59@ReadScript
	mov	ecx, DWORD PTR _CWayPoint
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	je	SHORT $LN59@ReadScript
	mov	ecx, DWORD PTR _CWayPoint
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	je	SHORT $LN59@ReadScript

; 3066 : 					nw = CWayPoint->GetNextWP();

	mov	ecx, DWORD PTR _CWayPoint
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$57[ebp], eax
$LN59@ReadScript:

; 3067 : 				if (CWayPoint && nw && nw->GetWPAltitude() != CWayPoint->GetWPAltitude())

	cmp	DWORD PTR _CWayPoint, 0
	je	$LN58@ReadScript
	cmp	DWORD PTR _nw$57[ebp], 0
	je	$LN58@ReadScript
	mov	ecx, DWORD PTR _nw$57[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	esi, eax
	mov	ecx, DWORD PTR _CWayPoint
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	cmp	esi, eax
	je	$LN58@ReadScript

; 3068 : 					{
; 3069 : 					if (CWayPoint->GetWPFlags() & WPF_HOLDCURRENT)

	mov	ecx, DWORD PTR _CWayPoint
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN57@ReadScript

; 3070 : 						{
; 3071 : 						AddIndexedStringToBuffer(1600, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	1600					; 00000640H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 3072 : 						AddNumberToBuffer(CWayPoint->GetWPAltitude(), current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _CWayPoint
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 3073 : 						}
; 3074 : 					else

	jmp	SHORT $LN56@ReadScript
$LN57@ReadScript:

; 3075 : 						{
; 3076 : 						if (nw->GetWPAltitude() < CWayPoint->GetWPAltitude())

	mov	ecx, DWORD PTR _nw$57[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	esi, eax
	mov	ecx, DWORD PTR _CWayPoint
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	cmp	esi, eax
	jge	SHORT $LN55@ReadScript

; 3077 : 							AddIndexedStringToBuffer(1602, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	1602					; 00000642H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 3078 : 						else

	jmp	SHORT $LN54@ReadScript
$LN55@ReadScript:

; 3079 : 							AddIndexedStringToBuffer(1601, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	1601					; 00000641H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN54@ReadScript:

; 3080 : 						AddNumberToBuffer(nw->GetWPAltitude(), current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _nw$57[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN56@ReadScript:

; 3081 : 						}
; 3082 : 					}
; 3083 : 				else

	jmp	SHORT $LN53@ReadScript
$LN58@ReadScript:

; 3084 : 					AddIndexedStringToBuffer(1650, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	1650					; 00000672H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8
$LN53@ReadScript:
	jmp	$LN1@ReadScript
$LN60@ReadScript:

; 3085 : 				}
; 3086 : 			else if (strcmp(token,"WAYPOINT_DESC")==0){

	push	OFFSET ??_C@_0O@GKDHIGHD@WAYPOINT_DESC?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN51@ReadScript

; 3087 : 			    GetWpDescription(CWayPoint, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _CWayPoint
	push	edx
	call	?GetWpDescription@@YAXPAVWayPointClass@@PAD@Z ; GetWpDescription
	add	esp, 8
	jmp	$LN1@ReadScript
$LN51@ReadScript:

; 3088 : 			}
; 3089 : 			else if (strcmp(token,"ENEMY_SQUADRONS")==0){				

	push	OFFSET ??_C@_0BA@CDILAEIO@ENEMY_SQUADRONS?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN49@ReadScript

; 3090 : 				Unit				u;
; 3091 : 				GridIndex			x,y;
; 3092 : 				int					got=0;

	mov	DWORD PTR _got$49[ebp], 0

; 3093 : 
; 3094 : 				{
; 3095 : 					VuListIterator		myit(AllAirList);

	mov	ecx, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	ecx
	lea	ecx, DWORD PTR _myit$6[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3096 : 					u = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$6[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _u$68[ebp], eax
$LN48@ReadScript:

; 3097 : 					while (u){

	cmp	DWORD PTR _u$68[ebp], 0
	je	$LN47@ReadScript

; 3098 : 						u->GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$44[ebp]
	push	edx
	lea	eax, DWORD PTR _x$45[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$68[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 3099 : 						if (x == mec->tx && y == mec->ty && u->GetType() == TYPE_SQUADRON){

	movsx	ecx, WORD PTR _x$45[ebp]
	mov	edx, DWORD PTR _mec$[ebp]
	movsx	eax, WORD PTR [edx+184]
	cmp	ecx, eax
	jne	$LN46@ReadScript
	movsx	ecx, WORD PTR _y$44[ebp]
	mov	edx, DWORD PTR _mec$[ebp]
	movsx	eax, WORD PTR [edx+186]
	cmp	ecx, eax
	jne	$LN46@ReadScript
	mov	ecx, DWORD PTR _u$68[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN46@ReadScript

; 3100 : 							CEntity = u;

	mov	edx, DWORD PTR _u$68[ebp]
	mov	DWORD PTR _CEntity, edx

; 3101 : 							ReadScriptedBriefFile ("Squad.b", current_line, win, brief, mec, mec->package_element);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_07CFIKMPDI@Squad?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 3102 : 							if (u->GetSType() == STYPE_UNIT_FIGHTER || u->GetSType() == STYPE_UNIT_FIGHTER_BOMBER)

	mov	ecx, DWORD PTR _u$68[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 8
	je	SHORT $LN44@ReadScript
	mov	ecx, DWORD PTR _u$68[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 9
	jne	SHORT $LN45@ReadScript
$LN44@ReadScript:

; 3103 : 								ESquad = u;

	mov	edx, DWORD PTR _u$68[ebp]
	mov	DWORD PTR _ESquad, edx
$LN45@ReadScript:

; 3104 : 							got++;

	mov	eax, DWORD PTR _got$49[ebp]
	add	eax, 1
	mov	DWORD PTR _got$49[ebp], eax
$LN46@ReadScript:

; 3105 : 						}
; 3106 : 						u = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$6[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _u$68[ebp], eax

; 3107 : 					}

	jmp	$LN48@ReadScript
$LN47@ReadScript:

; 3108 : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$6[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 3109 : 
; 3110 : 				if (!got){

	cmp	DWORD PTR _got$49[ebp], 0
	jne	SHORT $LN43@ReadScript

; 3111 : 					ReadScriptedBriefFile("NoSquad.b", current_line, win, brief, mec, mec->package_element);

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _mec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_09KAILABEB@NoSquad?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H
$LN43@ReadScript:

; 3112 : 				}
; 3113 : 			}

	jmp	$LN1@ReadScript
$LN49@ReadScript:

; 3114 : 			else if (strncmp(token,"ENTITY_NAME",11)==0)

	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@MBMEMPCO@ENTITY_NAME?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN41@ReadScript

; 3115 : 			{
; 3116 : 				_TCHAR	buffer[40];
; 3117 : 				sptr = token + 12;

	lea	edx, DWORD PTR _token$[ebp+12]
	mov	DWORD PTR _sptr$[ebp], edx

; 3118 : 				GetEntityName (CEntity, buffer, sptr[0], sptr[1]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR _buffer$102[ebp]
	push	eax
	mov	ecx, DWORD PTR _CEntity
	push	ecx
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H

; 3119 : 				AddStringToBuffer(buffer, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$102[ebp]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN41@ReadScript:

; 3120 : 			}
; 3121 : 			else if (strcmp(token,"ENTITY_ELEMENT_NAME")==0)

	push	OFFSET ??_C@_0BE@OLKAIAIB@ENTITY_ELEMENT_NAME?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN39@ReadScript

; 3122 : 				{
; 3123 : 				if (CEntity && CEntity->IsObjective())

	cmp	DWORD PTR _CEntity, 0
	je	SHORT $LN38@ReadScript
	mov	edx, DWORD PTR _CEntity
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _CEntity
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN38@ReadScript

; 3124 : 					{
; 3125 : 					FeatureClassDataType	*fc;
; 3126 : 					fc = (FeatureClassDataType*) Falcon4ClassTable[((Objective)CEntity)->GetFeatureID(mec->curr_data)].dataPtr;

	mov	eax, DWORD PTR _mec$[ebp]
	movsx	ecx, WORD PTR [eax+208]
	push	ecx
	mov	ecx, DWORD PTR _CEntity
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	imul	eax, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+eax+77]
	mov	DWORD PTR _fc$22[ebp], eax

; 3127 : 					AddStringToBuffer(fc->Name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fc$22[ebp]
	add	edx, 8
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	SHORT $LN36@ReadScript
$LN38@ReadScript:

; 3128 : 					}
; 3129 : 				else if (CEntity && CEntity->IsUnit())

	cmp	DWORD PTR _CEntity, 0
	je	SHORT $LN36@ReadScript
	mov	eax, DWORD PTR _CEntity
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _CEntity
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN36@ReadScript

; 3130 : 					{
; 3131 : 					VehicleClassDataType	*vc;
; 3132 : 					UnitClassDataType		*uc;
; 3133 : 					uc = ((Unit)CEntity)->GetUnitClassData();

	mov	ecx, DWORD PTR _CEntity
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$20[ebp], eax

; 3134 : 					vc = (VehicleClassDataType*) Falcon4ClassTable[uc->VehicleType[mec->curr_data]].dataPtr;

	mov	ecx, DWORD PTR _mec$[ebp]
	movsx	edx, WORD PTR [ecx+208]
	mov	eax, DWORD PTR _uc$20[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+68]
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$18[ebp], eax

; 3135 : 					AddStringToBuffer(vc->Name, current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vc$18[ebp]
	add	edx, 8
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN36@ReadScript:

; 3136 : 					}
; 3137 : 				}

	jmp	$LN1@ReadScript
$LN39@ReadScript:

; 3138 : 			else if (strcmp(token,"ENTITY_OPERATIONAL")==0)

	push	OFFSET ??_C@_0BD@BEPFECOL@ENTITY_OPERATIONAL?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN34@ReadScript

; 3139 : 				{
; 3140 : 				int		oper;
; 3141 : 				if (CEntity->IsObjective())

	mov	ecx, DWORD PTR _CEntity
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _CEntity
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN33@ReadScript

; 3142 : 					AddNumberToBuffer(((Objective)CEntity)->GetObjectiveStatus(), current_line);

	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _CEntity
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	push	edx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
	jmp	SHORT $LN31@ReadScript
$LN33@ReadScript:

; 3143 : 				else if (CEntity->IsUnit())

	mov	eax, DWORD PTR _CEntity
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _CEntity
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN31@ReadScript

; 3144 : 					{
; 3145 : 					oper = 100 * ((Unit)CEntity)->GetTotalVehicles() / ((Unit)CEntity)->GetFullstrengthVehicles();

	mov	ecx, DWORD PTR _CEntity
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	esi, eax
	imul	esi, 100				; 00000064H
	mov	ecx, DWORD PTR _CEntity
	call	?GetFullstrengthVehicles@UnitClass@@QAEHXZ ; UnitClass::GetFullstrengthVehicles
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	mov	DWORD PTR _oper$16[ebp], eax

; 3146 : 					AddNumberToBuffer(oper, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _oper$16[ebp]
	push	eax
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8
$LN31@ReadScript:

; 3147 : 					}
; 3148 : 				}

	jmp	$LN1@ReadScript
$LN34@ReadScript:

; 3149 : 			else if (strcmp(token,"BEST_FEATURES")==0)

	push	OFFSET ??_C@_0O@CKAKCIEF@BEST_FEATURES?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN29@ReadScript

; 3150 : 				{
; 3151 : 				int		i,j,f,skip;
; 3152 : 				_TCHAR	names[MAX_TARGET_FEATURES][30];
; 3153 : 
; 3154 : 				if (!ptarget || !ptarget->IsObjective())

	cmp	DWORD PTR _ptarget$[ebp], 0
	je	SHORT $LN27@ReadScript
	mov	edx, DWORD PTR _ptarget$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptarget$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	jne	SHORT $LN28@ReadScript
$LN27@ReadScript:

; 3155 : 					continue;

	jmp	$LN617@ReadScript
$LN28@ReadScript:

; 3156 : 				for (i=0; i<MAX_TARGET_FEATURES; i++)

	mov	DWORD PTR _i$60[ebp], 0
	jmp	SHORT $LN26@ReadScript
$LN25@ReadScript:
	mov	eax, DWORD PTR _i$60[ebp]
	add	eax, 1
	mov	DWORD PTR _i$60[ebp], eax
$LN26@ReadScript:
	cmp	DWORD PTR _i$60[ebp], 5
	jge	$LN24@ReadScript

; 3157 : 					{
; 3158 : 					f = mec->package_element->target_features[i];

	mov	ecx, DWORD PTR _mec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$60[ebp]
	movzx	ecx, BYTE PTR [edx+eax+88]
	mov	DWORD PTR _f$47[ebp], ecx

; 3159 : 					if (f < FEATURES_PER_OBJ)

	cmp	DWORD PTR _f$47[ebp], 32		; 00000020H
	jge	$LN18@ReadScript

; 3160 : 						{
; 3161 : 						// KCK: Don't show identical names (i.e. "Runway") twice.
; 3162 : 						FeatureClassDataType	*fc;
; 3163 : 						fc = (FeatureClassDataType*) Falcon4ClassTable[((Objective)ptarget)->GetFeatureID(f)].dataPtr;

	mov	edx, DWORD PTR _f$47[ebp]
	push	edx
	mov	ecx, DWORD PTR _ptarget$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _fc$40[ebp], edx

; 3164 : 						for (j=0,skip=0; j<i; j++)

	mov	DWORD PTR _j$54[ebp], 0
	mov	DWORD PTR _skip$39[ebp], 0
	jmp	SHORT $LN22@ReadScript
$LN21@ReadScript:
	mov	eax, DWORD PTR _j$54[ebp]
	add	eax, 1
	mov	DWORD PTR _j$54[ebp], eax
$LN22@ReadScript:
	mov	ecx, DWORD PTR _j$54[ebp]
	cmp	ecx, DWORD PTR _i$60[ebp]
	jge	SHORT $LN20@ReadScript

; 3165 : 							{
; 3166 : 							if (_tcscmp(fc->Name,names[j]) == 0)

	mov	edx, DWORD PTR _j$54[ebp]
	imul	edx, 30					; 0000001eH
	lea	eax, DWORD PTR _names$88[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _fc$40[ebp]
	add	ecx, 8
	push	ecx
	call	__tcscmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@ReadScript

; 3167 : 								skip = 1;

	mov	DWORD PTR _skip$39[ebp], 1
$LN19@ReadScript:

; 3168 : 							}

	jmp	SHORT $LN21@ReadScript
$LN20@ReadScript:

; 3169 : 						_tcscpy(names[i],fc->Name);

	mov	edx, DWORD PTR _fc$40[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _i$60[ebp]
	imul	eax, 30					; 0000001eH
	lea	ecx, DWORD PTR _names$88[ebp+eax]
	push	ecx
	call	_strcpy
	add	esp, 8

; 3170 : 						if (!skip)

	cmp	DWORD PTR _skip$39[ebp], 0
	jne	SHORT $LN18@ReadScript

; 3171 : 							{
; 3172 : 							CEntity = ptarget;

	mov	edx, DWORD PTR _ptarget$[ebp]
	mov	DWORD PTR _CEntity, edx

; 3173 : 							mec->curr_data = f;

	mov	eax, DWORD PTR _mec$[ebp]
	mov	cx, WORD PTR _f$47[ebp]
	mov	WORD PTR [eax+208], cx

; 3174 : 							ReadScriptedBriefFile ("Feature.b", current_line, win, brief, mec, mec->package_element);

	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_09CMFODKLL@Feature?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H
$LN18@ReadScript:

; 3175 : 							}
; 3176 : 						}
; 3177 : 					}

	jmp	$LN25@ReadScript
$LN24@ReadScript:

; 3178 : 				}
; 3179 : 			else if (strcmp(token,"POTENTIAL_TARGETS")==0)

	jmp	$LN1@ReadScript
$LN29@ReadScript:
	push	OFFSET ??_C@_0BC@GMAGFIAP@POTENTIAL_TARGETS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN16@ReadScript

; 3180 : 				{
; 3181 : 				Objective			o;
; 3182 : 				int					i;
; 3183 : 
; 3184 : 				for (i=0; i<MAX_POTENTIAL_TARGETS; i++)

	mov	DWORD PTR _i$56[ebp], 0
	jmp	SHORT $LN15@ReadScript
$LN14@ReadScript:
	mov	eax, DWORD PTR _i$56[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56[ebp], eax
$LN15@ReadScript:
	cmp	DWORD PTR _i$56[ebp], 5
	jge	SHORT $LN13@ReadScript

; 3185 : 					{
; 3186 : 					o = FindObjective(mec->potential_targets[i]);

	mov	ecx, DWORD PTR _i$56[ebp]
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+128]
	push	eax
	mov	ecx, DWORD PTR [edx+ecx*8+124]
	push	ecx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	DWORD PTR _o$37[ebp], eax

; 3187 : 					if (o)

	cmp	DWORD PTR _o$37[ebp], 0
	je	SHORT $LN12@ReadScript

; 3188 : 						{
; 3189 : 						CEntity = o;

	mov	edx, DWORD PTR _o$37[ebp]
	mov	DWORD PTR _CEntity, edx

; 3190 : 						ReadScriptedBriefFile ("Objectiv.b", current_line, win, brief, mec, mec->package_element);

	mov	eax, DWORD PTR _mec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_0L@MABPEDIO@Objectiv?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H
$LN12@ReadScript:

; 3191 : 						}
; 3192 : 					}

	jmp	SHORT $LN14@ReadScript
$LN13@ReadScript:

; 3193 : 				}
; 3194 : 			else if (strncmp(token,"RELATED_EVENT",13)==0)

	jmp	$LN1@ReadScript
$LN16@ReadScript:
	push	13					; 0000000dH
	push	OFFSET ??_C@_0O@NGEDJDPM@RELATED_EVENT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN10@ReadScript

; 3195 : 				{
; 3196 : 				sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax

; 3197 : 				if (sptr)

	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN9@ReadScript

; 3198 : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN9@ReadScript:

; 3199 : 				i = atoi(sptr) - 1;

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 3200 : 				if (mec->related_events[i])

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mec$[ebp]
	cmp	DWORD PTR [edx+ecx*4+236], 0
	je	SHORT $LN8@ReadScript

; 3201 : 					{
; 3202 : 					AddStringToBuffer(mec->related_events[i], current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mec$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+236]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 3203 : 					AddEOLToBrief(current_line, win, brief);

	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	call	?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z	; AddEOLToBrief
	add	esp, 12					; 0000000cH
$LN8@ReadScript:

; 3204 : 					}
; 3205 : 				}

	jmp	$LN1@ReadScript
$LN10@ReadScript:

; 3206 : 			else if (strcmp(token,"SHOW_PLANNED_OFFENSIVE")==0)

	push	OFFSET ??_C@_0BH@GGCDMBFC@SHOW_PLANNED_OFFENSIVE?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN6@ReadScript

; 3207 : 				{
; 3208 : 				_TCHAR		format[256],time[40]={0},objective[40],total[512];

	mov	BYTE PTR _time$103[ebp], 0
	push	39					; 00000027H
	push	0
	lea	edx, DWORD PTR _time$103[ebp+1]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 3209 : 				Objective	o = (Objective) vuDatabase->Find(TeamInfo[mec->team]->GetGroundAction()->actionObjective);

	mov	eax, DWORD PTR _mec$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _o$14[ebp], eax

; 3210 : 				ReadIndexedString(890, format, 255);

	push	255					; 000000ffH
	lea	ecx, DWORD PTR _format$85[ebp]
	push	ecx
	push	890					; 0000037aH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 3211 : 				GetEntityName(o, objective, 'O', ' ');

	push	32					; 00000020H
	push	79					; 0000004fH
	lea	edx, DWORD PTR _objective$101[ebp]
	push	edx
	mov	eax, DWORD PTR _o$14[ebp]
	push	eax
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H

; 3212 : 				AddTimeToBuffer(TeamInfo[mec->team]->GetGroundAction()->actionTime,time);

	push	1
	lea	ecx, DWORD PTR _time$103[ebp]
	push	ecx
	mov	edx, DWORD PTR _mec$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?AddTimeToBuffer@@YAXKPADH@Z		; AddTimeToBuffer
	add	esp, 12					; 0000000cH

; 3213 : 				ConstructOrderedSentence(512, total, format, time, objective);

	lea	edx, DWORD PTR _objective$101[ebp]
	push	edx
	lea	eax, DWORD PTR _time$103[ebp]
	push	eax
	lea	ecx, DWORD PTR _format$85[ebp]
	push	ecx
	lea	edx, DWORD PTR _total$83[ebp]
	push	edx
	push	512					; 00000200H
	call	?ConstructOrderedSentence@@YAXFPAD0ZZ	; ConstructOrderedSentence
	add	esp, 20					; 00000014H

; 3214 : 				AddStringToBuffer(total, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _total$83[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	$LN1@ReadScript
$LN6@ReadScript:

; 3215 : 				}
; 3216 : 			else if (strcmp(token,"SHOW_PLANNED_DEFENSIVE")==0)

	push	OFFSET ??_C@_0BH@KHEOAGGA@SHOW_PLANNED_DEFENSIVE?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN4@ReadScript

; 3217 : 				{
; 3218 : 				_TCHAR		format[256],time[40]={0},objective[40],total[512];

	mov	BYTE PTR _time$104[ebp], 0
	push	39					; 00000027H
	push	0
	lea	eax, DWORD PTR _time$104[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 3219 : 				Objective	o = (Objective) vuDatabase->Find(TeamInfo[mec->team]->GetGroundAction()->actionObjective);

	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _o$12[ebp], eax

; 3220 : 				ReadIndexedString(891, format, 255);

	push	255					; 000000ffH
	lea	eax, DWORD PTR _format$84[ebp]
	push	eax
	push	891					; 0000037bH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 3221 : 				GetEntityName(o, objective, 'O', ' ');

	push	32					; 00000020H
	push	79					; 0000004fH
	lea	ecx, DWORD PTR _objective$100[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$12[ebp]
	push	edx
	call	?GetEntityName@@YAXPAVCampBaseClass@@PADDD@Z ; GetEntityName
	add	esp, 16					; 00000010H

; 3222 : 				AddTimeToBuffer(TeamInfo[mec->team]->GetGroundAction()->actionTime,time);

	push	1
	lea	eax, DWORD PTR _time$104[ebp]
	push	eax
	mov	ecx, DWORD PTR _mec$[ebp]
	movzx	edx, BYTE PTR [ecx+25]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?AddTimeToBuffer@@YAXKPADH@Z		; AddTimeToBuffer
	add	esp, 12					; 0000000cH

; 3223 : 				ConstructOrderedSentence(512, total, format, time, objective);

	lea	ecx, DWORD PTR _objective$100[ebp]
	push	ecx
	lea	edx, DWORD PTR _time$104[ebp]
	push	edx
	lea	eax, DWORD PTR _format$84[ebp]
	push	eax
	lea	ecx, DWORD PTR _total$82[ebp]
	push	ecx
	push	512					; 00000200H
	call	?ConstructOrderedSentence@@YAXFPAD0ZZ	; ConstructOrderedSentence
	add	esp, 20					; 00000014H

; 3224 : 				AddStringToBuffer(total, current_line);

	mov	edx, DWORD PTR _current_line$[ebp]
	push	edx
	lea	eax, DWORD PTR _total$82[ebp]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
	jmp	SHORT $LN1@ReadScript
$LN4@ReadScript:

; 3225 : 				}
; 3226 : 			//THW 2003-12-07 HTML handler
; 3227 : 			else if (strncmp(token,"<",1)==0)

	push	1
	push	OFFSET ??_C@_01MNNFJEPP@?$DM?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@ReadScript

; 3228 : 				{
; 3229 : 				//if ((g_bBriefHTML) && (filename != ""))
; 3230 : 				if ((g_bBriefHTML) && (!win))

	movzx	edx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	edx, edx
	je	SHORT $LN1@ReadScript
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN1@ReadScript

; 3231 : 					AddStringToBuffer(token, current_line);

	mov	eax, DWORD PTR _current_line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN1@ReadScript:

; 3232 : 				}
; 3233 : 
; 3234 : 			// End active stack section
; 3235 : 			}
; 3236 : 		// End token handler
; 3237 : 		}

	jmp	$LN617@ReadScript
$LN590@ReadScript:

; 3238 : 	CloseCampFile(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 3239 : 	return 1;

	mov	eax, 1
$LN596@ReadScript:

; 3240 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN620@ReadScript:
	DD	$LN254@ReadScript
	DD	$LN246@ReadScript
	DD	$LN253@ReadScript
	DD	$LN247@ReadScript
	DD	$LN243@ReadScript
$LN618@ReadScript:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z$0:
	lea	ecx, DWORD PTR _myit$6[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ENDP ; ReadScriptedBriefFile
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
$T2 = -1716						; size = 4
$T3 = -1712						; size = 4
$T4 = -1708						; size = 4
$T5 = -1704						; size = 4
tv257 = -1700						; size = 4
tv563 = -1696						; size = 4
$T6 = -1692						; size = 4
$T7 = -1688						; size = 4
tv151 = -1684						; size = 4
$T8 = -1680						; size = 4
tv429 = -1676						; size = 4
$T9 = -1672						; size = 4
_done$10 = -1668					; size = 4
$T11 = -1664						; size = 4
_players$12 = -1660					; size = 4
_pn$ = -1656						; size = 4
_i$ = -1652						; size = 4
_ai_data$13 = -1648					; size = 4
_y$ = -1644						; size = 4
_w$ = -1640						; size = 4
_j$ = -1636						; size = 4
_x$ = -1632						; size = 4
_box$14 = -1628						; size = 4
_box$15 = -1624						; size = 4
_width$ = -1620						; size = 4
_theEvent$ = -1616					; size = 4
_flight_ptr$ = -1612					; size = 4
_flight_data$ = -1608					; size = 4
_pilot_data$16 = -1604					; size = 4
_inbox$ = -1600						; size = 4
_eventListBox$ = -1596					; size = 4
_temp_line$17 = -1592					; size = 256
_current_line$ = -1336					; size = 1024
_event_str$18 = -312					; size = 256
_tmp$19 = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_win$ = 8						; size = 4
_brief$ = 12						; size = 4
?BuildDebriefString@@YAHPAVC_Window@@PAD@Z PROC		; BuildDebriefString

; 292  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1704				; 000006a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 293  : 	int				i,j,pn,inbox,width,w,x,y;
; 294  : 	EventElement	*theEvent;
; 295  : 	C_ListBox		*eventListBox = NULL;

	mov	DWORD PTR _eventListBox$[ebp], 0

; 296  : 	FlightDataClass	*flight_data,*flight_ptr;
; 297  : 	_TCHAR			current_line[MAX_STRLEN_PER_PARAGRAPH] = {0};	// Text in current line

	mov	BYTE PTR _current_line$[ebp], 0
	push	1023					; 000003ffH
	push	0
	lea	eax, DWORD PTR _current_line$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 298  : 
; 299  : 	CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 300  : 	flight_data = TheCampaign.MissionEvaluator->player_element;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _flight_data$[ebp], edx

; 301  : 	ShiAssert(flight_data);//Cobra 10/31/04 TJL
; 302  :  	if( !TheCampaign.MissionEvaluator->player_element || // MLR 3/25/2004 - 
; 303  :  	    !TheCampaign.MissionEvaluator->player_pilot )

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN39@BuildDebri
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN40@BuildDebri
$LN39@BuildDebri:

; 304  :  	{
; 305  :  		// this prevents a CTD, but makes the debried window empty
; 306  :  		return 0;

	xor	eax, eax
	jmp	$LN42@BuildDebri
$LN40@BuildDebri:

; 307  :  	}
; 308  : 
; 309  : 	ShiAssert(flight_data->mission != AMIS_TRAINING);
; 310  : 	ShiAssert(TheCampaign.MissionEvaluator->player_pilot);
; 311  : 
; 312  : 	TheCampaign.MissionEvaluator->curr_pilot = TheCampaign.MissionEvaluator->player_pilot;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+212], ecx

; 313  : 	ReadScriptedBriefFile ("header.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_09CINKEAKH@header?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 314  : 	AddHorizontalLineToBrief(win);

	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 315  : 	ReadScriptedBriefFile ("pheader.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@FOPFMLMO@pheader?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 316  : 	flight_ptr = TheCampaign.MissionEvaluator->flight_data;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR _flight_ptr$[ebp], edx
$LN38@BuildDebri:

; 317  : 	while (flight_ptr)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	$LN37@BuildDebri

; 318  : 		{
; 319  : 		ReadScriptedBriefFile ("element.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_ptr);

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@JMOABIKF@element?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 320  : 		// Do Relevent events here
; 321  : 		GetCurrentBriefXY(&x,&y,current_line,win,brief);

	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?GetCurrentBriefXY@@YAXPAH0PADPAVC_Window@@1@Z ; GetCurrentBriefXY
	add	esp, 20					; 00000014H

; 322  : 		inbox = width = 0;

	mov	DWORD PTR _width$[ebp], 0
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _inbox$[ebp], ecx

; 323  : 		theEvent = flight_ptr->root_event;

	mov	edx, DWORD PTR _flight_ptr$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	DWORD PTR _theEvent$[ebp], eax
$LN36@BuildDebri:

; 324  : 		while (theEvent)

	cmp	DWORD PTR _theEvent$[ebp], 0
	je	$LN35@BuildDebri

; 325  : 			{
; 326  : 			if (win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN34@BuildDebri

; 327  : 				{
; 328  : 				if (!inbox)

	cmp	DWORD PTR _inbox$[ebp], 0
	jne	$LN33@BuildDebri

; 329  : 					{
; 330  : 					_TCHAR		tmp[40] = "";

	mov	cl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _tmp$19[ebp], cl
	push	39					; 00000027H
	push	0
	lea	edx, DWORD PTR _tmp$19[ebp+1]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 331  : 					eventListBox = new C_ListBox;

	push	216					; 000000d8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN43@BuildDebri
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0C_ListBox@@QAE@XZ			; C_ListBox::C_ListBox
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN44@BuildDebri
$LN43@BuildDebri:
	mov	DWORD PTR tv151[ebp], 0
$LN44@BuildDebri:
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _eventListBox$[ebp], ecx

; 332  : 					eventListBox->Setup(C_DONT_CARE,0,gMainHandler);

	mov	edx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	push	edx
	push	0
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?Setup@C_ListBox@@QAEXJFPAVC_Handler@@@Z ; C_ListBox::Setup

; 333  : 					eventListBox->SetFont(win->Font_);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx

; 334  : 					eventListBox->SetXY(x-5,y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 335  : 					eventListBox->SetDropDown(BID_DROPDOWN);

	push	50300					; 0000c47cH
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetDropDown@C_ListBox@@QAEXJ@Z		; C_ListBox::SetDropDown

; 336  : 					eventListBox->SetNormColor(CBColor);

	mov	eax, DWORD PTR _CBColor
	push	eax
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetNormColor@C_ListBox@@QAEXK@Z	; C_ListBox::SetNormColor

; 337  : 					eventListBox->SetSelColor(CBColor);

	mov	ecx, DWORD PTR _CBColor
	push	ecx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetSelColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetSelColor

; 338  : 					eventListBox->SetDisColor(CBColor);

	mov	edx, DWORD PTR _CBColor
	push	edx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetDisColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetDisColor

; 339  : 					eventListBox->SetBgColor(RGB(0,0,0));

	push	0
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetBgColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetBgColor

; 340  : 					eventListBox->SetBarColor(RGB(0,80,127));

	push	8343552					; 007f5000H
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetBarColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetBarColor

; 341  : 					eventListBox->SetParent(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 342  : 					eventListBox->SetClient(0);

	push	0
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 343  : 					eventListBox->SetFlagBitOn(C_BIT_USEBGFILL);

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 344  : 					eventListBox->SetUserNumber(_UI95_DELGROUP_SLOT_,_UI95_DELGROUP_ID_);

	push	5551212					; 0054b46cH
	push	7
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber

; 345  : 					eventListBox->AddScrollBar(BID_SCROLLCAP_TOP_OFF,BID_SCROLLCAP_TOP_ON,BID_SCROLLCAP_BOTTOM_OFF,BID_SCROLLCAP_BOTTOM_ON,BID_SCROLL);

	push	-1
	push	50017					; 0000c361H
	push	50015					; 0000c35fH
	push	50016					; 0000c360H
	push	50013					; 0000c35dH
	push	50014					; 0000c35eH
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?AddScrollBar@C_ListBox@@QAEXJJJJJJ@Z	; C_ListBox::AddScrollBar

; 346  : 					inbox++;

	mov	ecx, DWORD PTR _inbox$[ebp]
	add	ecx, 1
	mov	DWORD PTR _inbox$[ebp], ecx

; 347  : 					AddIndexedStringToBuffer(151, tmp);

	lea	edx, DWORD PTR _tmp$19[ebp]
	push	edx
	push	151					; 00000097H
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 348  : 					eventListBox->AddItem(inbox, C_TYPE_ITEM, tmp);

	lea	eax, DWORD PTR _tmp$19[ebp]
	push	eax
	push	50					; 00000032H
	mov	ecx, DWORD PTR _inbox$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem
$LN33@BuildDebri:

; 349  : 					}
; 350  : 				inbox++;

	mov	edx, DWORD PTR _inbox$[ebp]
	add	edx, 1
	mov	DWORD PTR _inbox$[ebp], edx

; 351  : 				eventListBox->AddItem(inbox, C_TYPE_ITEM, theEvent->eventString);

	mov	eax, DWORD PTR _theEvent$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	50					; 00000032H
	mov	ecx, DWORD PTR _inbox$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem

; 352  : 				w = gFontList->StrWidth(win->Font_,theEvent->eventString) + 10;

	mov	edx, DWORD PTR _theEvent$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPAD@Z		; C_Font::StrWidth
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _w$[ebp], eax

; 353  : 				if (w > width)

	mov	edx, DWORD PTR _w$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jle	SHORT $LN32@BuildDebri

; 354  : 					width = w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _width$[ebp], eax
$LN32@BuildDebri:

; 355  : 				}
; 356  : 			else

	jmp	SHORT $LN31@BuildDebri
$LN34@BuildDebri:

; 357  : 				{
; 358  : 				CTextPtr = theEvent->eventString;

	mov	ecx, DWORD PTR _theEvent$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _CTextPtr, ecx

; 359  : 				ReadScriptedBriefFile ("FlEvent.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@CALOFOKN@FlEvent?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H
$LN31@BuildDebri:

; 360  : 				}
; 361  : 			theEvent = theEvent->next;

	mov	ecx, DWORD PTR _theEvent$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR _theEvent$[ebp], edx

; 362  : 			}

	jmp	$LN36@BuildDebri
$LN35@BuildDebri:

; 363  : 		if (eventListBox)

	cmp	DWORD PTR _eventListBox$[ebp], 0
	je	$LN30@BuildDebri

; 364  : 			{
; 365  : 			C_Box *box = new C_Box;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN45@BuildDebri
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0C_Box@@QAE@XZ			; C_Box::C_Box
	mov	DWORD PTR tv257[ebp], eax
	jmp	SHORT $LN46@BuildDebri
$LN45@BuildDebri:
	mov	DWORD PTR tv257[ebp], 0
$LN46@BuildDebri:
	mov	eax, DWORD PTR tv257[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _box$14[ebp], ecx

; 366  : 			eventListBox->SetWH(width,gFontList->GetHeight(win->Font_));

	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx

; 367  : 			eventListBox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	eax, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 368  : 			win->AddControl(eventListBox);

	mov	ecx, DWORD PTR _eventListBox$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _win$[ebp]
	call	?AddControl@C_Window@@QAEXPAVC_Base@@@Z	; C_Window::AddControl

; 369  : 			eventListBox = NULL;

	mov	DWORD PTR _eventListBox$[ebp], 0

; 370  : 			box->Setup(C_DONT_CARE,C_TYPE_VERTICAL);

	push	62					; 0000003eH
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _box$14[ebp]
	call	?Setup@C_Box@@QAEXJF@Z			; C_Box::Setup

; 371  : 			box->SetXYWH(x-6,y,width+1,gFontList->GetHeight(win->Font_));

	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 6
	push	eax
	mov	ecx, DWORD PTR _box$14[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _box$14[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 372  : //			box->SetFlagBitOn(C_BIT_ABSOLUTE);
; 373  : 			box->SetColor(0);

	push	0
	mov	ecx, DWORD PTR _box$14[ebp]
	call	?SetColor@C_Box@@QAEXK@Z		; C_Box::SetColor

; 374  : 			box->SetParent(win);

	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$14[ebp]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 375  : 			box->SetClient(0);

	push	0
	mov	ecx, DWORD PTR _box$14[ebp]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 376  : 			box->SetUserNumber(_UI95_DELGROUP_SLOT_,_UI95_DELGROUP_ID_);

	push	5551212					; 0054b46cH
	push	7
	mov	ecx, DWORD PTR _box$14[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber

; 377  : 			win->AddControl(box);

	mov	edx, DWORD PTR _box$14[ebp]
	push	edx
	mov	ecx, DWORD PTR _win$[ebp]
	call	?AddControl@C_Window@@QAEXPAVC_Base@@@Z	; C_Window::AddControl

; 378  : 			AddEOLToBrief(current_line,win,brief);

	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	call	?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z	; AddEOLToBrief
	add	esp, 12					; 0000000cH
$LN30@BuildDebri:

; 379  : 			}
; 380  : 		flight_ptr = flight_ptr->next_flight;

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR _flight_ptr$[ebp], ecx

; 381  : 		}

	jmp	$LN38@BuildDebri
$LN37@BuildDebri:

; 382  : 	AddHorizontalLineToBrief(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 383  : 	ReadScriptedBriefFile ("flight.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_09ELGDCBBJ@flight?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 384  : 	pn = 0;

	mov	DWORD PTR _pn$[ebp], 0

; 385  : 	TheCampaign.MissionEvaluator->curr_pilot = TheCampaign.MissionEvaluator->FindPilotDataFromAC(flight_data, pn);

	mov	edx, DWORD PTR _pn$[ebp]
	push	edx
	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?FindPilotDataFromAC@MissionEvaluationClass@@QAEPAVPilotDataClass@@PAVFlightDataClass@@H@Z ; MissionEvaluationClass::FindPilotDataFromAC
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	DWORD PTR [ecx+212], eax
$LN29@BuildDebri:

; 386  : 	while (pn < PILOTS_PER_FLIGHT)

	cmp	DWORD PTR _pn$[ebp], 4
	jge	$LN28@BuildDebri

; 387  : 		{
; 388  : 		if (TheCampaign.MissionEvaluator->curr_pilot)

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [edx+212], 0
	je	$LN27@BuildDebri

; 389  : 			{
; 390  : 			// Total ordinance fired by type - build and traverse table
; 391  : 			for (j=0; j<TheCampaign.MissionEvaluator->curr_pilot->weapon_types; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN26@BuildDebri
$LN25@BuildDebri:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN26@BuildDebri:
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [ecx+212]
	movzx	eax, BYTE PTR [edx+81]
	cmp	DWORD PTR _j$[ebp], eax
	jge	$LN27@BuildDebri

; 392  : 				{
; 393  : 				TheCampaign.MissionEvaluator->curr_weapon = j;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	dl, BYTE PTR _j$[ebp]
	mov	BYTE PTR [ecx+211], dl

; 394  : 				ReadScriptedBriefFile ("FOrdnce.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@BDADIECF@FOrdnce?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 395  : 				// Do Relevent events here
; 396  : 				GetCurrentBriefXY(&x,&y,current_line,win,brief);

	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?GetCurrentBriefXY@@YAXPAH0PADPAVC_Window@@1@Z ; GetCurrentBriefXY
	add	esp, 20					; 00000014H

; 397  : 				inbox = width = 0;

	mov	DWORD PTR _width$[ebp], 0
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _inbox$[ebp], ecx

; 398  : 				theEvent = TheCampaign.MissionEvaluator->curr_pilot->weapon_data[j].root_event;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+212]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR [eax+ecx+116]
	mov	DWORD PTR _theEvent$[ebp], edx
$LN23@BuildDebri:

; 399  : 				while (theEvent)

	cmp	DWORD PTR _theEvent$[ebp], 0
	je	$LN22@BuildDebri

; 400  : 					{
; 401  : 					if (win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN21@BuildDebri

; 402  : 						{
; 403  : 						_TCHAR		event_str[256] = {0};

	mov	BYTE PTR _event_str$18[ebp], 0
	push	255					; 000000ffH
	push	0
	lea	eax, DWORD PTR _event_str$18[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 404  : 						_TCHAR		temp_line[256] = {0};

	mov	BYTE PTR _temp_line$17[ebp], 0
	push	255					; 000000ffH
	push	0
	lea	ecx, DWORD PTR _temp_line$17[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 405  : 						if (!inbox)

	cmp	DWORD PTR _inbox$[ebp], 0
	jne	$LN20@BuildDebri

; 406  : 							{
; 407  : 							AddEOLToBrief(current_line,win,brief);

	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	call	?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z	; AddEOLToBrief
	add	esp, 12					; 0000000cH

; 408  : 							CCurrentLine = 0;

	mov	DWORD PTR _CCurrentLine, 0

; 409  : 							CBX = CLineStart = 0;

	mov	DWORD PTR _CLineStart, 0
	mov	dx, WORD PTR _CLineStart
	mov	WORD PTR _CBX, dx

; 410  : 							ReadScriptedBriefFile ("FOrdWeap.db",temp_line,NULL,event_str,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	lea	edx, DWORD PTR _event_str$18[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _temp_line$17[ebp]
	push	eax
	push	OFFSET ??_C@_0M@JBIFENN@FOrdWeap?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 411  : 							eventListBox = new C_ListBox;

	push	216					; 000000d8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN47@BuildDebri
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0C_ListBox@@QAE@XZ			; C_ListBox::C_ListBox
	mov	DWORD PTR tv429[ebp], eax
	jmp	SHORT $LN48@BuildDebri
$LN47@BuildDebri:
	mov	DWORD PTR tv429[ebp], 0
$LN48@BuildDebri:
	mov	ecx, DWORD PTR tv429[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _eventListBox$[ebp], edx

; 412  : 							eventListBox->Setup(C_DONT_CARE,0,gMainHandler);

	mov	eax, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	push	eax
	push	0
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?Setup@C_ListBox@@QAEXJFPAVC_Handler@@@Z ; C_ListBox::Setup

; 413  : 							eventListBox->SetFont(win->Font_);

	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 414  : 							eventListBox->SetXY(x-5,y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, 5
	push	edx
	mov	eax, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 415  : 							eventListBox->SetDropDown(BID_DROPDOWN);

	push	50300					; 0000c47cH
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetDropDown@C_ListBox@@QAEXJ@Z		; C_ListBox::SetDropDown

; 416  : 							eventListBox->SetNormColor(CBColor);

	mov	ecx, DWORD PTR _CBColor
	push	ecx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetNormColor@C_ListBox@@QAEXK@Z	; C_ListBox::SetNormColor

; 417  : 							eventListBox->SetSelColor(CBColor);

	mov	edx, DWORD PTR _CBColor
	push	edx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetSelColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetSelColor

; 418  : 							eventListBox->SetDisColor(CBColor);

	mov	eax, DWORD PTR _CBColor
	push	eax
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetDisColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetDisColor

; 419  : 							eventListBox->SetBgColor(RGB(0,0,0));

	push	0
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetBgColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetBgColor

; 420  : 							eventListBox->SetBarColor(RGB(0,80,127));

	push	8343552					; 007f5000H
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetBarColor@C_ListBox@@QAEXK@Z		; C_ListBox::SetBarColor

; 421  : 							eventListBox->SetParent(win);

	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 422  : 							eventListBox->SetClient(0);

	push	0
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 423  : 							eventListBox->SetFlagBitOn(C_BIT_USEBGFILL);

	push	1073741824				; 40000000H
	mov	edx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 424  : 							eventListBox->SetUserNumber(_UI95_DELGROUP_SLOT_,_UI95_DELGROUP_ID_);

	push	5551212					; 0054b46cH
	push	7
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber

; 425  : 							eventListBox->AddScrollBar(BID_SCROLLCAP_TOP_OFF,BID_SCROLLCAP_TOP_ON,BID_SCROLLCAP_BOTTOM_OFF,BID_SCROLLCAP_BOTTOM_ON,BID_SCROLL);

	push	-1
	push	50017					; 0000c361H
	push	50015					; 0000c35fH
	push	50016					; 0000c360H
	push	50013					; 0000c35dH
	push	50014					; 0000c35eH
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?AddScrollBar@C_ListBox@@QAEXJJJJJJ@Z	; C_ListBox::AddScrollBar

; 426  : 							inbox++;

	mov	eax, DWORD PTR _inbox$[ebp]
	add	eax, 1
	mov	DWORD PTR _inbox$[ebp], eax

; 427  : 							eventListBox->AddItem(inbox, C_TYPE_ITEM, event_str);

	lea	ecx, DWORD PTR _event_str$18[ebp]
	push	ecx
	push	50					; 00000032H
	mov	edx, DWORD PTR _inbox$[ebp]
	push	edx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem

; 428  : 							width = gFontList->StrWidth(win->Font_,event_str) + 30;

	lea	eax, DWORD PTR _event_str$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPAD@Z		; C_Font::StrWidth
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _width$[ebp], eax

; 429  : 							event_str[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	DWORD PTR $T7[ebp], eax
	cmp	DWORD PTR $T7[ebp], 256			; 00000100H
	jae	SHORT $LN49@BuildDebri
	jmp	SHORT $LN50@BuildDebri
$LN49@BuildDebri:
	call	___report_rangecheckfailure
$LN50@BuildDebri:
	mov	ecx, DWORD PTR $T7[ebp]
	mov	BYTE PTR _event_str$18[ebp+ecx], 0
$LN20@BuildDebri:

; 430  : 							}
; 431  : 						inbox++;

	mov	edx, DWORD PTR _inbox$[ebp]
	add	edx, 1
	mov	DWORD PTR _inbox$[ebp], edx

; 432  : 						CTextPtr = theEvent->eventString;

	mov	eax, DWORD PTR _theEvent$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _CTextPtr, eax

; 433  : 						CCurrentLine = 0;

	mov	DWORD PTR _CCurrentLine, 0

; 434  : 						CBX = CLineStart = 0;

	mov	DWORD PTR _CLineStart, 0
	mov	cx, WORD PTR _CLineStart
	mov	WORD PTR _CBX, cx

; 435  : 						ReadScriptedBriefFile ("FOrdEvt.db",temp_line,NULL,event_str,TheCampaign.MissionEvaluator,flight_data);

	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	lea	ecx, DWORD PTR _event_str$18[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _temp_line$17[ebp]
	push	edx
	push	OFFSET ??_C@_0L@NACCMEFJ@FOrdEvt?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 436  : 						AddTabToBrief(x,current_line,win,brief);

	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?AddTabToBrief@@YAXHPADPAVC_Window@@0@Z	; AddTabToBrief
	add	esp, 16					; 00000010H

; 437  : 						eventListBox->AddItem(inbox, C_TYPE_ITEM, event_str);

	lea	ecx, DWORD PTR _event_str$18[ebp]
	push	ecx
	push	50					; 00000032H
	mov	edx, DWORD PTR _inbox$[ebp]
	push	edx
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem

; 438  : 						w = gFontList->StrWidth(win->Font_,event_str) + 10;

	lea	eax, DWORD PTR _event_str$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPAD@Z		; C_Font::StrWidth
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _w$[ebp], eax

; 439  : 						ShiAssert (w < 500);
; 440  : 						if (w > width)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jle	SHORT $LN19@BuildDebri

; 441  : 							width = w;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
$LN19@BuildDebri:

; 442  : 						}
; 443  : 					else

	jmp	$LN18@BuildDebri
$LN21@BuildDebri:

; 444  : 						{
; 445  : 						if (!inbox)

	cmp	DWORD PTR _inbox$[ebp], 0
	jne	SHORT $LN17@BuildDebri

; 446  : 							{
; 447  : 							ReadScriptedBriefFile ("FOrdWeap.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@JBIFENN@FOrdWeap?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 448  : 							_tcscat(brief,"\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$LN17@BuildDebri:

; 449  : 							}
; 450  : 						CTextPtr = theEvent->eventString;

	mov	edx, DWORD PTR _theEvent$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _CTextPtr, edx

; 451  : 						ReadScriptedBriefFile ("FOrdEvt.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@NACCMEFJ@FOrdEvt?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 452  : 						AddEOLToBrief(current_line,NULL,brief);

	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	call	?AddEOLToBrief@@YAXPADPAVC_Window@@0@Z	; AddEOLToBrief
	add	esp, 12					; 0000000cH
$LN18@BuildDebri:

; 453  : 						}
; 454  : 					theEvent = theEvent->next;

	mov	ecx, DWORD PTR _theEvent$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR _theEvent$[ebp], edx

; 455  : 					}

	jmp	$LN23@BuildDebri
$LN22@BuildDebri:

; 456  : 				if (eventListBox)

	cmp	DWORD PTR _eventListBox$[ebp], 0
	je	$LN16@BuildDebri

; 457  : 					{
; 458  : 					C_Box *box = new C_Box;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN51@BuildDebri
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0C_Box@@QAE@XZ			; C_Box::C_Box
	mov	DWORD PTR tv563[ebp], eax
	jmp	SHORT $LN52@BuildDebri
$LN51@BuildDebri:
	mov	DWORD PTR tv563[ebp], 0
$LN52@BuildDebri:
	mov	eax, DWORD PTR tv563[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _box$15[ebp], ecx

; 459  : 					eventListBox->SetWH(width,gFontList->GetHeight(win->Font_));

	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx

; 460  : 					eventListBox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	eax, DWORD PTR _eventListBox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _eventListBox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 					win->AddControl(eventListBox);

	mov	ecx, DWORD PTR _eventListBox$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _win$[ebp]
	call	?AddControl@C_Window@@QAEXPAVC_Base@@@Z	; C_Window::AddControl

; 462  : 					eventListBox = NULL;

	mov	DWORD PTR _eventListBox$[ebp], 0

; 463  : 					box->Setup(C_DONT_CARE,C_TYPE_VERTICAL);

	push	62					; 0000003eH
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _box$15[ebp]
	call	?Setup@C_Box@@QAEXJF@Z			; C_Box::Setup

; 464  : 					box->SetXYWH(x-6,y,width+1,gFontList->GetHeight(win->Font_));

	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 6
	push	eax
	mov	ecx, DWORD PTR _box$15[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _box$15[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 465  : 					box->SetColor(0);

	push	0
	mov	ecx, DWORD PTR _box$15[ebp]
	call	?SetColor@C_Box@@QAEXK@Z		; C_Box::SetColor

; 466  : 					box->SetParent(win);

	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$15[ebp]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 467  : 					box->SetClient(0);

	push	0
	mov	ecx, DWORD PTR _box$15[ebp]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 468  : 					box->SetUserNumber(_UI95_DELGROUP_SLOT_,_UI95_DELGROUP_ID_);

	push	5551212					; 0054b46cH
	push	7
	mov	ecx, DWORD PTR _box$15[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber

; 469  : 					win->AddControl(box);

	mov	edx, DWORD PTR _box$15[ebp]
	push	edx
	mov	ecx, DWORD PTR _win$[ebp]
	call	?AddControl@C_Window@@QAEXPAVC_Base@@@Z	; C_Window::AddControl
$LN16@BuildDebri:

; 470  : 					}
; 471  : 				}

	jmp	$LN25@BuildDebri
$LN27@BuildDebri:

; 472  : 			}
; 473  : 		pn++;

	mov	eax, DWORD PTR _pn$[ebp]
	add	eax, 1
	mov	DWORD PTR _pn$[ebp], eax

; 474  : 		TheCampaign.MissionEvaluator->curr_pilot = TheCampaign.MissionEvaluator->FindPilotDataFromAC(flight_data, pn);

	mov	ecx, DWORD PTR _pn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?FindPilotDataFromAC@MissionEvaluationClass@@QAEPAVPilotDataClass@@PAVFlightDataClass@@H@Z ; MissionEvaluationClass::FindPilotDataFromAC
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	DWORD PTR [ecx+212], eax

; 475  : 		}

	jmp	$LN29@BuildDebri
$LN28@BuildDebri:

; 476  : 	TheCampaign.MissionEvaluator->curr_pilot = NULL;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	DWORD PTR [edx+212], 0

; 477  : 	AddHorizontalLineToBrief(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 478  : 	ReadScriptedBriefFile ("pilot.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	ecx, DWORD PTR _flight_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08MHOPPMNB@pilot?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 479  : 	flight_ptr = TheCampaign.MissionEvaluator->flight_data;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	ecx, DWORD PTR [eax+204]
	mov	DWORD PTR _flight_ptr$[ebp], ecx
$LN15@BuildDebri:

; 480  : 	while (flight_ptr)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	$LN14@BuildDebri

; 481  : 		{
; 482  : 		PilotDataClass	*pilot_data,*ai_data;
; 483  : 		int				done,players;
; 484  : 		// Traverse all pilots (combine player's stats with associated AI's if in the same aircraft)
; 485  : 		for (i=0; i<PILOTS_PER_FLIGHT; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@BuildDebri
$LN12@BuildDebri:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@BuildDebri:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN11@BuildDebri

; 486  : 			{
; 487  : 			done = players = 0;

	mov	DWORD PTR _players$12[ebp], 0
	mov	eax, DWORD PTR _players$12[ebp]
	mov	DWORD PTR _done$10[ebp], eax

; 488  : 			CPilotData = ai_data = NULL;

	mov	DWORD PTR _ai_data$13[ebp], 0
	mov	ecx, DWORD PTR _ai_data$13[ebp]
	mov	DWORD PTR _CPilotData, ecx

; 489  : 			pilot_data = flight_ptr->pilot_list;

	mov	edx, DWORD PTR _flight_ptr$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	DWORD PTR _pilot_data$16[ebp], eax
$LN10@BuildDebri:

; 490  : 			// Fast forward over AI pilots and collect the AI pilot_data for this aircraft.
; 491  : 			while (pilot_data && pilot_data->pilot_slot == pilot_data->aircraft_slot)

	cmp	DWORD PTR _pilot_data$16[ebp], 0
	je	SHORT $LN7@BuildDebri
	mov	ecx, DWORD PTR _pilot_data$16[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	mov	eax, DWORD PTR _pilot_data$16[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	cmp	edx, ecx
	jne	SHORT $LN7@BuildDebri

; 492  : 				{
; 493  : 				if (pilot_data->pilot_slot == i)

	mov	edx, DWORD PTR _pilot_data$16[ebp]
	movzx	eax, BYTE PTR [edx+61]
	cmp	eax, DWORD PTR _i$[ebp]
	jne	SHORT $LN8@BuildDebri

; 494  : 					ai_data = pilot_data;

	mov	ecx, DWORD PTR _pilot_data$16[ebp]
	mov	DWORD PTR _ai_data$13[ebp], ecx
$LN8@BuildDebri:

; 495  : 				pilot_data = pilot_data->next_pilot;

	mov	edx, DWORD PTR _pilot_data$16[ebp]
	mov	eax, DWORD PTR [edx+444]
	mov	DWORD PTR _pilot_data$16[ebp], eax

; 496  : 				}

	jmp	SHORT $LN10@BuildDebri
$LN7@BuildDebri:

; 497  : 			// Find all players who were in this AC first
; 498  : 			while (!done)

	cmp	DWORD PTR _done$10[ebp], 0
	jne	$LN6@BuildDebri
$LN5@BuildDebri:

; 499  : 				{
; 500  : 				while (pilot_data && pilot_data->aircraft_slot != i)

	cmp	DWORD PTR _pilot_data$16[ebp], 0
	je	SHORT $LN4@BuildDebri
	mov	ecx, DWORD PTR _pilot_data$16[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	cmp	edx, DWORD PTR _i$[ebp]
	je	SHORT $LN4@BuildDebri

; 501  : 					pilot_data = pilot_data->next_pilot;

	mov	eax, DWORD PTR _pilot_data$16[ebp]
	mov	ecx, DWORD PTR [eax+444]
	mov	DWORD PTR _pilot_data$16[ebp], ecx
	jmp	SHORT $LN5@BuildDebri
$LN4@BuildDebri:

; 502  : 				if (pilot_data)

	cmp	DWORD PTR _pilot_data$16[ebp], 0
	je	SHORT $LN3@BuildDebri

; 503  : 					{
; 504  : 					// This is a player pilot
; 505  : 					CPilotData = ai_data;

	mov	edx, DWORD PTR _ai_data$13[ebp]
	mov	DWORD PTR _CPilotData, edx

; 506  : 					TheCampaign.MissionEvaluator->curr_pilot = pilot_data;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	ecx, DWORD PTR _pilot_data$16[ebp]
	mov	DWORD PTR [eax+212], ecx

; 507  : 					ReadScriptedBriefFile ("PElement.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_ptr);

	mov	edx, DWORD PTR _flight_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@DGFFLKPN@PElement?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 508  : 					players++;

	mov	ecx, DWORD PTR _players$12[ebp]
	add	ecx, 1
	mov	DWORD PTR _players$12[ebp], ecx

; 509  : 					pilot_data = pilot_data->next_pilot;

	mov	edx, DWORD PTR _pilot_data$16[ebp]
	mov	eax, DWORD PTR [edx+444]
	mov	DWORD PTR _pilot_data$16[ebp], eax

; 510  : 					}
; 511  : 				else

	jmp	SHORT $LN2@BuildDebri
$LN3@BuildDebri:

; 512  : 					done = 1;

	mov	DWORD PTR _done$10[ebp], 1
$LN2@BuildDebri:

; 513  : 				}

	jmp	$LN7@BuildDebri
$LN6@BuildDebri:

; 514  : 			// Now check if a player's been added, and if not do the AI's stats
; 515  : 			if (!players && ai_data)

	cmp	DWORD PTR _players$12[ebp], 0
	jne	SHORT $LN1@BuildDebri
	cmp	DWORD PTR _ai_data$13[ebp], 0
	je	SHORT $LN1@BuildDebri

; 516  : 				{
; 517  : 				TheCampaign.MissionEvaluator->curr_pilot = ai_data;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR _ai_data$13[ebp]
	mov	DWORD PTR [ecx+212], edx

; 518  : 				ReadScriptedBriefFile ("PElement.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_ptr);

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@DGFFLKPN@PElement?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H
$LN1@BuildDebri:

; 519  : 				}
; 520  : 			}

	jmp	$LN12@BuildDebri
$LN11@BuildDebri:

; 521  : 		TheCampaign.MissionEvaluator->curr_pilot = NULL;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	DWORD PTR [edx+212], 0

; 522  : 		flight_ptr = flight_ptr->next_flight;

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR _flight_ptr$[ebp], ecx

; 523  : 		}

	jmp	$LN15@BuildDebri
$LN14@BuildDebri:

; 524  : 	AddHorizontalLineToBrief(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 525  : 	ReadScriptedBriefFile ("results.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@BCEJELHM@results?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 526  : 	AddHorizontalLineToBrief(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 527  : 	ReadScriptedBriefFile ("related.db",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@NHLKLBAI@related?4db?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 528  : 	CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 529  : 
; 530  : 	return 1;

	mov	eax, 1
$LN42@BuildDebri:

; 531  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$0:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$2:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z$3:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1708]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildDebriefString@@YAHPAVC_Window@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildDebriefString@@YAHPAVC_Window@@PAD@Z ENDP		; BuildDebriefString
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_pilots$ = -1052					; size = 4
_fl$1 = -1048						; size = 4
_weaps$ = -1044						; size = 4
_j$ = -1040						; size = 4
_flight_data$ = -1036					; size = 4
_flight_ptr$ = -1032					; size = 4
_current_line$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_win$ = 8						; size = 4
_brief$ = 12						; size = 4
?BuildBriefString@@YAHPAVC_Window@@PAD@Z PROC		; BuildBriefString

; 184  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 1052				; 0000041cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 185  : 	int				j,weaps,pilots;
; 186  : 	FlightDataClass	*flight_data,*flight_ptr;
; 187  : 	_TCHAR			current_line[MAX_STRLEN_PER_PARAGRAPH] = {0};	// Text in current line

	mov	BYTE PTR _current_line$[ebp], 0
	push	1023					; 000003ffH
	push	0
	lea	eax, DWORD PTR _current_line$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 188  : 
; 189  : 	CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 190  : 	ESquad = NULL;

	mov	DWORD PTR _ESquad, 0

; 191  : 	flight_data = TheCampaign.MissionEvaluator->player_element;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _flight_data$[ebp], edx

; 192  : 	ReadScriptedBriefFile ("Header.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_08KPOPBMGJ@Header?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 193  : 	AddHorizontalLineToBrief(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 194  : 	ReadScriptedBriefFile ("Situate.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_09IOMGACNF@Situate?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 195  : 	// Check for mission diverts here
; 196  : 	flight_ptr = TheCampaign.MissionEvaluator->flight_data;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR _flight_ptr$[ebp], eax
$LN25@BuildBrief:

; 197  : 	while (flight_ptr)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	SHORT $LN24@BuildBrief

; 198  : 		{
; 199  : 		ReadScriptedBriefFile("divert.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_ptr);

	mov	ecx, DWORD PTR _flight_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08CALBNDK@divert?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 200  : 		flight_ptr = flight_ptr->next_flight;

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR _flight_ptr$[ebp], ecx

; 201  : 		}

	jmp	SHORT $LN25@BuildBrief
$LN24@BuildBrief:

; 202  : 	if (g_bBriefHTML && (!win))

	movzx	edx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	edx, edx
	je	SHORT $LN23@BuildBrief
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN23@BuildBrief

; 203  : 		AddStringToBuffer("</table>",current_line);

	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN23@BuildBrief:

; 204  : 
; 205  : 	AddHorizontalLineToBrief(win);

	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 206  : 	ReadScriptedBriefFile ("PackHead.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	edx, DWORD PTR _flight_data$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	mov	ecx, DWORD PTR _brief$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@GAFPAEGE@PackHead?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 207  : 	flight_ptr = TheCampaign.MissionEvaluator->flight_data;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR _flight_ptr$[ebp], edx
$LN22@BuildBrief:

; 208  : 	while (flight_ptr)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	SHORT $LN21@BuildBrief

; 209  : 		{
; 210  : 		ReadScriptedBriefFile ("Element.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_ptr);

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_09FDKFKIOG@Element?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 211  : 		flight_ptr = flight_ptr->next_flight;

	mov	edx, DWORD PTR _flight_ptr$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	DWORD PTR _flight_ptr$[ebp], eax

; 212  : 		}

	jmp	SHORT $LN22@BuildBrief
$LN21@BuildBrief:

; 213  : 	if (g_bBriefHTML && (!win))

	movzx	ecx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	ecx, ecx
	je	SHORT $LN20@BuildBrief
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN20@BuildBrief

; 214  : 		AddStringToBuffer("</table>",current_line);

	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN20@BuildBrief:

; 215  : 
; 216  : 	AddHorizontalLineToBrief(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 217  : 	ReadScriptedBriefFile ("Threats.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	ecx, DWORD PTR _flight_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_09KPKCJAOF@Threats?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 218  : 	AddHorizontalLineToBrief(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 219  : 
; 220  : 	if ((TheCampaign.MissionEvaluator) && (TheCampaign.MissionEvaluator->player_element))

	cmp	DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324, 0
	je	$LN17@BuildBrief
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN17@BuildBrief

; 221  : 		{
; 222  : 		Flight			fl;
; 223  : 
; 224  : 		fl = (Flight)FindUnit(TheCampaign.MissionEvaluator->player_element->flight_id);

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	push	edx
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	DWORD PTR _fl$1[ebp], eax

; 225  : 		if (fl)

	cmp	DWORD PTR _fl$1[ebp], 0
	je	SHORT $LN17@BuildBrief

; 226  : 			{
; 227  : 			ReadScriptedBriefFile ("SteerPtH.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@EEOKCHAH@SteerPtH?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 228  : 			CWayPoint = fl->GetFirstUnitWP();

	mov	ecx, DWORD PTR _fl$1[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _CWayPoint, eax

; 229  : 			LWayPoint = NULL;

	mov	DWORD PTR _LWayPoint, 0

; 230  : 			TheCampaign.MissionEvaluator->curr_data = 1;

	mov	edx, 1
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	WORD PTR [eax+208], dx
$LN17@BuildBrief:

; 231  : 			}
; 232  : 		}
; 233  : 	while (CWayPoint)

	cmp	DWORD PTR _CWayPoint, 0
	je	SHORT $LN16@BuildBrief

; 234  : 		{
; 235  : 		ReadScriptedBriefFile ("SteerPt.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	ecx, DWORD PTR _flight_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_09FNCAMDID@SteerPt?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 236  : 		LWayPoint = CWayPoint;

	mov	eax, DWORD PTR _CWayPoint
	mov	DWORD PTR _LWayPoint, eax

; 237  : 		CWayPoint = CWayPoint->GetNextWP();

	mov	ecx, DWORD PTR _CWayPoint
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _CWayPoint, eax

; 238  : 		}

	jmp	SHORT $LN17@BuildBrief
$LN16@BuildBrief:

; 239  : 	
; 240  : 	if (g_bBriefHTML && (!win))

	movzx	ecx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	ecx, ecx
	je	SHORT $LN15@BuildBrief
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN15@BuildBrief

; 241  : 		AddStringToBuffer("</table>",current_line);

	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN15@BuildBrief:

; 242  : 
; 243  : 	AddHorizontalLineToBrief(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 244  : 	ReadScriptedBriefFile ("Loadouth.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	ecx, DWORD PTR _flight_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_0L@MGLGPKDC@Loadouth?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 245  : 	// List the various ordinances of component flights
; 246  : 	flight_ptr = TheCampaign.MissionEvaluator->flight_data;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	ecx, DWORD PTR [eax+204]
	mov	DWORD PTR _flight_ptr$[ebp], ecx
$LN14@BuildBrief:

; 247  : 	while (flight_ptr)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	$LN13@BuildBrief

; 248  : 		{
; 249  : 		TheCampaign.MissionEvaluator->curr_pilot = flight_ptr->pilot_list;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR _flight_ptr$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	DWORD PTR [edx+212], ecx

; 250  : 		weaps = 0;

	mov	DWORD PTR _weaps$[ebp], 0

; 251  : 		pilots = flight_ptr->start_aircraft;

	mov	edx, DWORD PTR _flight_ptr$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	mov	DWORD PTR _pilots$[ebp], eax
$LN12@BuildBrief:

; 252  : 		while (TheCampaign.MissionEvaluator->curr_pilot)

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [ecx+212], 0
	je	SHORT $LN11@BuildBrief

; 253  : 			{
; 254  : 			if (TheCampaign.MissionEvaluator->curr_pilot->weapon_types > weaps)

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+212]
	movzx	ecx, BYTE PTR [eax+81]
	cmp	ecx, DWORD PTR _weaps$[ebp]
	jle	SHORT $LN10@BuildBrief

; 255  : 				weaps = TheCampaign.MissionEvaluator->curr_pilot->weapon_types;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+212]
	movzx	ecx, BYTE PTR [eax+81]
	mov	DWORD PTR _weaps$[ebp], ecx
$LN10@BuildBrief:

; 256  : 			TheCampaign.MissionEvaluator->curr_pilot = TheCampaign.MissionEvaluator->curr_pilot->next_pilot;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+212]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [eax+444]
	mov	DWORD PTR [ecx+212], edx

; 257  : 			}

	jmp	SHORT $LN12@BuildBrief
$LN11@BuildBrief:

; 258  : 		for (TheCampaign.MissionEvaluator->curr_data=0; TheCampaign.MissionEvaluator->curr_data < pilots; TheCampaign.MissionEvaluator->curr_data += 2)

	xor	eax, eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	WORD PTR [ecx+208], ax
	jmp	SHORT $LN9@BuildBrief
$LN8@BuildBrief:
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	movsx	eax, WORD PTR [edx+208]
	add	eax, 2
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	WORD PTR [ecx+208], ax
$LN9@BuildBrief:
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	movsx	eax, WORD PTR [edx+208]
	cmp	eax, DWORD PTR _pilots$[ebp]
	jge	$LN7@BuildBrief

; 259  : 			{
; 260  : 			for (j=0; j<weaps || !j; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@BuildBrief
$LN5@BuildBrief:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN6@BuildBrief:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _weaps$[ebp]
	jl	SHORT $LN3@BuildBrief
	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN4@BuildBrief
$LN3@BuildBrief:

; 261  : 				{
; 262  : 				TheCampaign.MissionEvaluator->curr_pilot = NULL;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	DWORD PTR [eax+212], 0

; 263  : 				TheCampaign.MissionEvaluator->curr_weapon = j;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	dl, BYTE PTR _j$[ebp]
	mov	BYTE PTR [ecx+211], dl

; 264  : 				ReadScriptedBriefFile("Loadout.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_ptr);

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_09DBEEHBDF@Loadout?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 265  : 				}

	jmp	SHORT $LN5@BuildBrief
$LN4@BuildBrief:

; 266  : 			}

	jmp	$LN8@BuildBrief
$LN7@BuildBrief:

; 267  : 		flight_ptr = flight_ptr->next_flight;

	mov	edx, DWORD PTR _flight_ptr$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	DWORD PTR _flight_ptr$[ebp], eax

; 268  : 		}

	jmp	$LN14@BuildBrief
$LN13@BuildBrief:

; 269  : 	if (g_bBriefHTML && (!win))

	movzx	ecx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	ecx, ecx
	je	SHORT $LN2@BuildBrief
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN2@BuildBrief

; 270  : 		AddStringToBuffer("</table>",current_line);

	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN2@BuildBrief:

; 271  : 
; 272  : 	TheCampaign.MissionEvaluator->curr_pilot = NULL;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	DWORD PTR [eax+212], 0

; 273  : 	TheCampaign.MissionEvaluator->curr_data = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	WORD PTR [edx+208], cx

; 274  : 	AddHorizontalLineToBrief(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 275  : 	ReadScriptedBriefFile ("Weather.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	ecx, DWORD PTR _flight_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	edx
	mov	eax, DWORD PTR _brief$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_09EEHEOFJM@Weather?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 276  : 	AddHorizontalLineToBrief(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 277  : 	if (g_bBriefHTML && (!win))

	movzx	ecx, BYTE PTR ?g_bBriefHTML@@3_NA	; g_bBriefHTML
	test	ecx, ecx
	je	SHORT $LN1@BuildBrief
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN1@BuildBrief

; 278  : 		AddStringToBuffer("</table>",current_line);

	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08LHPBPOIK@?$DM?1table?$DO?$AA@
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN1@BuildBrief:

; 279  : 
; 280  : 	ReadScriptedBriefFile ("Support.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_09EPKPDGMH@Support?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 281  : 	AddHorizontalLineToBrief(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 282  : 	ReadScriptedBriefFile ("RoE.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_05NNMLNNPM@RoE?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 283  : 	AddHorizontalLineToBrief(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 284  : 	ReadScriptedBriefFile ("Emerganc.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@IMPHLOC@Emerganc?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 285  : 	AddHorizontalLineToBrief(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?AddHorizontalLineToBrief@@YAXPAVC_Window@@@Z ; AddHorizontalLineToBrief
	add	esp, 4

; 286  : 	ReadScriptedBriefFile ("End.b",current_line,win,brief,TheCampaign.MissionEvaluator,flight_data);

	mov	eax, DWORD PTR _flight_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _brief$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	lea	ecx, DWORD PTR _current_line$[ebp]
	push	ecx
	push	OFFSET ??_C@_05OGPGAODE@End?4b?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 287  : 	CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 288  : 	return 1;

	mov	eax, 1

; 289  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?BuildBriefString@@YAHPAVC_Window@@PAD@Z ENDP		; BuildBriefString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?SetBgColor@C_ListBox@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetBgColor@C_ListBox@@QAEXK@Z PROC			; C_ListBox::SetBgColor, COMDAT
; _this$ = ecx

; 87   : 		void SetBgColor(COLORREF color) { BgColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+156], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBgColor@C_ListBox@@QAEXK@Z ENDP			; C_ListBox::SetBgColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?SetBarColor@C_ListBox@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetBarColor@C_ListBox@@QAEXK@Z PROC			; C_ListBox::SetBarColor, COMDAT
; _this$ = ecx

; 86   : 		void SetBarColor(COLORREF color) { BarColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+152], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBarColor@C_ListBox@@QAEXK@Z ENDP			; C_ListBox::SetBarColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?SetDisColor@C_ListBox@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetDisColor@C_ListBox@@QAEXK@Z PROC			; C_ListBox::SetDisColor, COMDAT
; _this$ = ecx

; 85   : 		void SetDisColor(COLORREF color) { DisColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+148], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDisColor@C_ListBox@@QAEXK@Z ENDP			; C_ListBox::SetDisColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?SetSelColor@C_ListBox@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetSelColor@C_ListBox@@QAEXK@Z PROC			; C_ListBox::SetSelColor, COMDAT
; _this$ = ecx

; 84   : 		void SetSelColor(COLORREF color) { SelColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+144], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSelColor@C_ListBox@@QAEXK@Z ENDP			; C_ListBox::SetSelColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?SetNormColor@C_ListBox@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetNormColor@C_ListBox@@QAEXK@Z PROC			; C_ListBox::SetNormColor, COMDAT
; _this$ = ecx

; 83   : 		void SetNormColor(COLORREF color) { NormalColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+140], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetNormColor@C_ListBox@@QAEXK@Z ENDP			; C_ListBox::SetNormColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetParent@C_Base@@QAEXPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_win$ = 8						; size = 4
?SetParent@C_Base@@QAEXPAVC_Window@@@Z PROC		; C_Base::SetParent, COMDAT
; _this$ = ecx

; 115  : 		void SetParent(C_Window *win)							{ Parent_=win; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetParent@C_Base@@QAEXPAVC_Window@@@Z ENDP		; C_Base::SetParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetClient@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_client$ = 8						; size = 2
?SetClient@C_Base@@QAEXF@Z PROC				; C_Base::SetClient, COMDAT
; _this$ = ecx

; 98   : 		void SetClient(short client)							{ Client_=client; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _client$[ebp]
	mov	WORD PTR [eax+40], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetClient@C_Base@@QAEXF@Z ENDP				; C_Base::SetClient
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_done$ = -288						; size = 4
$T1 = -284						; size = 4
_params$ = -280						; size = 4
_count$ = -276						; size = 4
_addchar$ = -272					; size = 2
_size$ = -268						; size = 4
_index$ = -264						; size = 4
_argstring$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_maxsize$ = 8						; size = 2
_string$ = 12						; size = 4
_format$ = 16						; size = 4
?ConstructOrderedSentence@@YAXFPAD0ZZ PROC		; ConstructOrderedSentence

; 1227 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1228 : 	int			done=0,count=0,index=0,size;

	mov	DWORD PTR _done$[ebp], 0
	mov	DWORD PTR _count$[ebp], 0
	mov	DWORD PTR _index$[ebp], 0

; 1229 : 	va_list		params;
; 1230 : 	_TCHAR		argstring[MAX_STRLEN_PER_TOKEN],addchar[2];
; 1231 : 
; 1232 : 	string[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _string$[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 1233 : 	size = _tcslen(format);

	mov	edx, DWORD PTR _format$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax
$LN7@ConstructO:

; 1234 : 	while (format[index])

	mov	eax, DWORD PTR _format$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN9@ConstructO

; 1235 : 		{
; 1236 : 		if (format[index] == '#')

	mov	edx, DWORD PTR _format$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 35					; 00000023H
	jne	$LN5@ConstructO

; 1237 : 			{
; 1238 : 			// read and add the numbered argument
; 1239 : 			index++;

	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1240 : 			count = format[index] - '0';	// arg #

	mov	edx, DWORD PTR _format$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR [edx]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _count$[ebp], eax

; 1241 : 			va_start( params, format );     // Initialize variable arguments.

	lea	ecx, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _params$[ebp], ecx
$LN4@ConstructO:

; 1242 : 			while (count >= 0)

	cmp	DWORD PTR _count$[ebp], 0
	jl	SHORT $LN3@ConstructO

; 1243 : 				{
; 1244 : 				sprintf(argstring,va_arg( params, _TCHAR*));

	mov	edx, DWORD PTR _params$[ebp]
	add	edx, 4
	mov	DWORD PTR _params$[ebp], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8

; 1245 : 				count--;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 1246 : 				}

	jmp	SHORT $LN4@ConstructO
$LN3@ConstructO:

; 1247 : 			va_end( params );				// Reset variable arguments.

	mov	DWORD PTR _params$[ebp], 0

; 1248 : 			// Check for buffer overflow
; 1249 : 			size -= 2;						// The substitution

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _size$[ebp], ecx

; 1250 : 			ShiAssert(static_cast<short>(size + _tcslen(argstring)) < maxsize);
; 1251 : 			size += _tcslen(argstring);

	lea	edx, DWORD PTR _argstring$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 1252 : 			if (size > maxsize)

	movsx	eax, WORD PTR _maxsize$[ebp]
	cmp	DWORD PTR _size$[ebp], eax
	jle	SHORT $LN2@ConstructO

; 1253 : 				return;

	jmp	SHORT $LN9@ConstructO
$LN2@ConstructO:

; 1254 : 			_tcscat(string,argstring);

	lea	ecx, DWORD PTR _argstring$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 1255 : 			}
; 1256 : 		else

	jmp	SHORT $LN1@ConstructO
$LN5@ConstructO:

; 1257 : 			{
; 1258 : 			// Add the character
; 1259 : 			addchar[0] = format[index];

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _format$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _addchar$[ebp+eax], dl

; 1260 : 			addchar[1] = 0;

	mov	DWORD PTR $T1[ebp], 1
	cmp	DWORD PTR $T1[ebp], 2
	jae	SHORT $LN10@ConstructO
	jmp	SHORT $LN11@ConstructO
$LN10@ConstructO:
	call	___report_rangecheckfailure
$LN11@ConstructO:
	mov	eax, DWORD PTR $T1[ebp]
	mov	BYTE PTR _addchar$[ebp+eax], 0

; 1261 : 			_tcscat(string,addchar);

	lea	ecx, DWORD PTR _addchar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$LN1@ConstructO:

; 1262 : 			}
; 1263 : 		index++;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 1264 : 		}

	jmp	$LN7@ConstructO
$LN9@ConstructO:

; 1265 : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ConstructOrderedSentence@@YAXFPAD0ZZ ENDP		; ConstructOrderedSentence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
$T2 = -344						; size = 4
$T3 = -340						; size = 4
$T4 = -336						; size = 4
$T5 = -332						; size = 4
tv466 = -328						; size = 4
$T6 = -324						; size = 4
tv136 = -320						; size = 4
$T7 = -316						; size = 4
_d$ = -312						; size = 4
$T8 = -308						; size = 4
tv80 = -304						; size = 4
tv92 = -300						; size = 4
$T9 = -296						; size = 4
tv198 = -292						; size = 4
_po$ = -288						; size = 4
_oit$ = -284						; size = 4
_bd$ = -280						; size = 4
_oy$ = -276						; size = 2
_ox$ = -272						; size = 2
_bpo$ = -268						; size = 4
_h$ = -261						; size = 1
_wdstr$ = -260						; size = 41
_wtmp$ = -216						; size = 41
_format$ = -172						; size = 80
_dist$ = -92						; size = 10
_name$ = -80						; size = 61
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 1
_x$ = 12						; size = 2
_y$ = 16						; size = 2
_buffer$ = 20						; size = 4
?AddLocationToBuffer@@YAXDFFPAD@Z PROC			; AddLocationToBuffer

; 985  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddLocationToBuffer@@YAXDFFPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 332				; 0000014cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 986  : 	Objective	po,bpo=NULL;

	mov	DWORD PTR _bpo$[ebp], 0

; 987  : 	float		d,bd=9999.0F;

	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR _bd$[ebp], xmm0

; 988  : 	GridIndex	ox,oy;
; 989  : 	_TCHAR		wdstr[41],wtmp[41],name[61],format[80],dist[10];
; 990  : 	CampaignHeading	h;
; 991  : 	VuListIterator	*oit;
; 992  : 
; 993  : 	if (type == 'G' || type == 'g')

	movsx	eax, BYTE PTR _type$[ebp]
	cmp	eax, 71					; 00000047H
	je	SHORT $LN38@AddLocatio
	movsx	ecx, BYTE PTR _type$[ebp]
	cmp	ecx, 103				; 00000067H
	jne	SHORT $LN39@AddLocatio
$LN38@AddLocatio:

; 994  : 		oit = new VuListIterator(POList);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN42@AddLocatio
	mov	edx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN43@AddLocatio
$LN42@AddLocatio:
	mov	DWORD PTR tv80[ebp], 0
$LN43@AddLocatio:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _oit$[ebp], ecx
	jmp	$LN34@AddLocatio
$LN39@AddLocatio:

; 995  : 	else if (type == 'E' || type == 'e')

	movsx	edx, BYTE PTR _type$[ebp]
	cmp	edx, 69					; 00000045H
	je	SHORT $LN35@AddLocatio
	movsx	eax, BYTE PTR _type$[ebp]
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN36@AddLocatio
$LN35@AddLocatio:

; 996  : 		oit = new VuListIterator(AllObjList);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN44@AddLocatio
	mov	ecx, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	ecx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN45@AddLocatio
$LN44@AddLocatio:
	mov	DWORD PTR tv92[ebp], 0
$LN45@AddLocatio:
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _oit$[ebp], eax

; 997  : 	else

	jmp	SHORT $LN34@AddLocatio
$LN36@AddLocatio:

; 998  : 		oit = new VuListIterator(SOList);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN46@AddLocatio
	mov	ecx, DWORD PTR ?SOList@@3PAVFalconPrivateList@@A ; SOList
	push	ecx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN47@AddLocatio
$LN46@AddLocatio:
	mov	DWORD PTR tv136[ebp], 0
$LN47@AddLocatio:
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _oit$[ebp], eax
$LN34@AddLocatio:

; 999  : 
; 1000 : 	po = GetFirstObjective(oit);

	mov	ecx, DWORD PTR _oit$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _po$[ebp], eax
$LN33@AddLocatio:

; 1001 : 	while (po)

	cmp	DWORD PTR _po$[ebp], 0
	je	$LN32@AddLocatio

; 1002 : 		{
; 1003 : 		po->GetLocation(&ox,&oy);

	lea	edx, DWORD PTR _oy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _po$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1004 : 		d = Distance(x,y,ox,oy);

	movzx	ecx, WORD PTR _oy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ox$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1005 : 		if (d < bd)

	movss	xmm0, DWORD PTR _bd$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN31@AddLocatio

; 1006 : 			{
; 1007 : 			bd = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _bd$[ebp], xmm0

; 1008 : 			bpo = po;

	mov	edx, DWORD PTR _po$[ebp]
	mov	DWORD PTR _bpo$[ebp], edx
$LN31@AddLocatio:

; 1009 : 			}
; 1010 : 		po = GetNextObjective(oit);

	mov	eax, DWORD PTR _oit$[ebp]
	push	eax
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _po$[ebp], eax

; 1011 : 		}

	jmp	$LN33@AddLocatio
$LN32@AddLocatio:

; 1012 : 	if (bpo)

	cmp	DWORD PTR _bpo$[ebp], 0
	je	$LN30@AddLocatio

; 1013 : 		{
; 1014 : 		bpo->GetLocation(&ox,&oy);

	lea	ecx, DWORD PTR _oy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ox$[ebp]
	push	edx
	mov	ecx, DWORD PTR _bpo$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1015 : 		bpo->GetName(name,60,FALSE);

	push	0
	push	60					; 0000003cH
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bpo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _bpo$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 1016 : 		if ((type == 'g' || type == 's') && bd < 2.0F)

	movsx	ecx, BYTE PTR _type$[ebp]
	cmp	ecx, 103				; 00000067H
	je	SHORT $LN28@AddLocatio
	movsx	edx, BYTE PTR _type$[ebp]
	cmp	edx, 115				; 00000073H
	jne	SHORT $LN29@AddLocatio
$LN28@AddLocatio:
	movss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR _bd$[ebp]
	jbe	SHORT $LN29@AddLocatio

; 1017 : 			h = Here;

	mov	BYTE PTR _h$[ebp], 8

; 1018 : 		else

	jmp	SHORT $LN27@AddLocatio
$LN29@AddLocatio:

; 1019 : 			h = DirectionTo(ox,oy,x,y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	movzx	edx, WORD PTR _oy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ox$[ebp]
	push	eax
	call	?DirectionTo@@YAEFFFF@Z			; DirectionTo
	add	esp, 16					; 00000010H
	mov	BYTE PTR _h$[ebp], al
$LN27@AddLocatio:

; 1020 : 		if (h < Here || type == 'T' || type == 't' || type == 'E' || type == 'e')

	movzx	ecx, BYTE PTR _h$[ebp]
	cmp	ecx, 8
	jl	SHORT $LN25@AddLocatio
	movsx	edx, BYTE PTR _type$[ebp]
	cmp	edx, 84					; 00000054H
	je	SHORT $LN25@AddLocatio
	movsx	eax, BYTE PTR _type$[ebp]
	cmp	eax, 116				; 00000074H
	je	SHORT $LN25@AddLocatio
	movsx	ecx, BYTE PTR _type$[ebp]
	cmp	ecx, 69					; 00000045H
	je	SHORT $LN25@AddLocatio
	movsx	edx, BYTE PTR _type$[ebp]
	cmp	edx, 101				; 00000065H
	jne	$LN26@AddLocatio
$LN25@AddLocatio:

; 1021 : 			{
; 1022 : 			ReadIndexedString(30+h,wdstr,40);

	push	40					; 00000028H
	lea	eax, DWORD PTR _wdstr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _h$[ebp]
	add	ecx, 30					; 0000001eH
	push	ecx
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 1023 : 			switch (type)

	movsx	edx, BYTE PTR _type$[ebp]
	mov	DWORD PTR tv198[ebp], edx
	mov	eax, DWORD PTR tv198[ebp]
	sub	eax, 69					; 00000045H
	mov	DWORD PTR tv198[ebp], eax
	cmp	DWORD PTR tv198[ebp], 47		; 0000002fH
	ja	$LN13@AddLocatio
	mov	ecx, DWORD PTR tv198[ebp]
	movzx	edx, BYTE PTR $LN53@AddLocatio[ecx]
	jmp	DWORD PTR $LN55@AddLocatio[edx*4]
$LN22@AddLocatio:

; 1024 : 				{
; 1025 : 				case 'N':
; 1026 : 				case 'n':
; 1027 : 					// Say 'direction of name'
; 1028 : 					if (gLangIDNum == F4LANG_FRENCH && (name[0] == 'A' || name[0] == 'a' || name[0] == 'E' || name[0] == 'e' || name[0] == 'I' || name[0] == 'i' || name[0] == 'O' || name[0] == 'o' || name[0] == 'U' || name[0] == 'u'))

	cmp	DWORD PTR ?gLangIDNum@@3HA, 4		; gLangIDNum
	jne	$LN21@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 65					; 00000041H
	je	$LN20@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 97					; 00000061H
	je	$LN20@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 69					; 00000045H
	je	SHORT $LN20@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 101				; 00000065H
	je	SHORT $LN20@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 73					; 00000049H
	je	SHORT $LN20@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 105				; 00000069H
	je	SHORT $LN20@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 79					; 0000004fH
	je	SHORT $LN20@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 111				; 0000006fH
	je	SHORT $LN20@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 85					; 00000055H
	je	SHORT $LN20@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN21@AddLocatio
$LN20@AddLocatio:

; 1029 : 						ReadIndexedString(3993, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	push	3993					; 00000f99H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 1030 : 					else

	jmp	SHORT $LN19@AddLocatio
$LN21@AddLocatio:

; 1031 : 						ReadIndexedString(53, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	push	53					; 00000035H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN19@AddLocatio:

; 1032 : 					ConstructOrderedSentence(40, wtmp, format, wdstr, name);

	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wdstr$[ebp]
	push	edx
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wtmp$[ebp]
	push	ecx
	push	40					; 00000028H
	call	?ConstructOrderedSentence@@YAXFPAD0ZZ	; ConstructOrderedSentence
	add	esp, 20					; 00000014H

; 1033 : 					break;

	jmp	$LN23@AddLocatio
$LN18@AddLocatio:

; 1034 : 				case 'T':
; 1035 : 				case 't':
; 1036 : 				case 'e':
; 1037 : 				case 'E':
; 1038 : 					// Say 'name'
; 1039 : 					_stprintf(wtmp,name);

	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	lea	eax, DWORD PTR _wtmp$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 1040 : 					break;

	jmp	$LN23@AddLocatio
$LN17@AddLocatio:

; 1041 : 				case 'g':
; 1042 : 				case 's':
; 1043 : 					// Say 'x nm direction of name'
; 1044 : 					bd = bd*GRID_SIZE_FT*FT_TO_NM;

	movss	xmm0, DWORD PTR _bd$[ebp]
	mulss	xmm0, DWORD PTR __real@454cffae
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _bd$[ebp], xmm0

; 1045 : 					_stprintf(dist,"%d",FloatToInt32(bd));

	push	ecx
	movss	xmm0, DWORD PTR _bd$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _dist$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1046 : 					if (gLangIDNum == F4LANG_FRENCH && (name[0] == 'A' || name[0] == 'a' || name[0] == 'E' || name[0] == 'e' || name[0] == 'I' || name[0] == 'i' || name[0] == 'O' || name[0] == 'o' || name[0] == 'U' || name[0] == 'u'))

	cmp	DWORD PTR ?gLangIDNum@@3HA, 4		; gLangIDNum
	jne	$LN16@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 65					; 00000041H
	je	$LN15@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 97					; 00000061H
	je	$LN15@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 69					; 00000045H
	je	SHORT $LN15@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 101				; 00000065H
	je	SHORT $LN15@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 73					; 00000049H
	je	SHORT $LN15@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 105				; 00000069H
	je	SHORT $LN15@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 79					; 0000004fH
	je	SHORT $LN15@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 111				; 0000006fH
	je	SHORT $LN15@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 85					; 00000055H
	je	SHORT $LN15@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 117				; 00000075H
	jne	SHORT $LN16@AddLocatio
$LN15@AddLocatio:

; 1047 : 						ReadIndexedString(3992, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	3992					; 00000f98H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 1048 : 					else

	jmp	SHORT $LN14@AddLocatio
$LN16@AddLocatio:

; 1049 : 						ReadIndexedString(52, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	push	52					; 00000034H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN14@AddLocatio:

; 1050 : 					ConstructOrderedSentence(40,wtmp,  format, dist, wdstr, name);

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wdstr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dist$[ebp]
	push	edx
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wtmp$[ebp]
	push	ecx
	push	40					; 00000028H
	call	?ConstructOrderedSentence@@YAXFPAD0ZZ	; ConstructOrderedSentence
	add	esp, 24					; 00000018H

; 1051 : 					break;

	jmp	$LN23@AddLocatio
$LN13@AddLocatio:

; 1052 : 				default:
; 1053 : 					// Say 'x km direction of name'
; 1054 : 					_stprintf(dist,"%d",FloatToInt32(bd));

	push	ecx
	movss	xmm0, DWORD PTR _bd$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _dist$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1055 : 					if (gLangIDNum == F4LANG_FRENCH && (name[0] == 'A' || name[0] == 'a' || name[0] == 'E' || name[0] == 'e' || name[0] == 'I' || name[0] == 'i' || name[0] == 'O' || name[0] == 'o' || name[0] == 'U' || name[0] == 'u'))

	cmp	DWORD PTR ?gLangIDNum@@3HA, 4		; gLangIDNum
	jne	$LN12@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 65					; 00000041H
	je	$LN11@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 97					; 00000061H
	je	$LN11@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 69					; 00000045H
	je	SHORT $LN11@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 101				; 00000065H
	je	SHORT $LN11@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 73					; 00000049H
	je	SHORT $LN11@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 105				; 00000069H
	je	SHORT $LN11@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 79					; 0000004fH
	je	SHORT $LN11@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 111				; 0000006fH
	je	SHORT $LN11@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 85					; 00000055H
	je	SHORT $LN11@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN12@AddLocatio
$LN11@AddLocatio:

; 1056 : 						ReadIndexedString(3991, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	push	3991					; 00000f97H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 1057 : 					else

	jmp	SHORT $LN10@AddLocatio
$LN12@AddLocatio:

; 1058 : 						ReadIndexedString(51, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	push	51					; 00000033H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN10@AddLocatio:

; 1059 : 					ConstructOrderedSentence(40, wtmp,format, dist, wdstr, name);

	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wdstr$[ebp]
	push	edx
	lea	eax, DWORD PTR _dist$[ebp]
	push	eax
	lea	ecx, DWORD PTR _format$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wtmp$[ebp]
	push	edx
	push	40					; 00000028H
	call	?ConstructOrderedSentence@@YAXFPAD0ZZ	; ConstructOrderedSentence
	add	esp, 24					; 00000018H
$LN23@AddLocatio:

; 1060 : 					break;
; 1061 : 				}
; 1062 : 			}
; 1063 : 		else if (bpo->GetType() == TYPE_CITY || bpo->GetType() == TYPE_TOWN)

	jmp	$LN4@AddLocatio
$LN26@AddLocatio:
	mov	ecx, DWORD PTR _bpo$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 8
	je	SHORT $LN7@AddLocatio
	mov	ecx, DWORD PTR _bpo$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 28					; 0000001cH
	jne	SHORT $LN8@AddLocatio
$LN7@AddLocatio:

; 1064 : 			{
; 1065 : 			if  (type > 'a' && type < 'z')

	movsx	edx, BYTE PTR _type$[ebp]
	cmp	edx, 97					; 00000061H
	jle	SHORT $LN6@AddLocatio
	movsx	eax, BYTE PTR _type$[ebp]
	cmp	eax, 122				; 0000007aH
	jge	SHORT $LN6@AddLocatio

; 1066 : 				{
; 1067 : 				// Say 'over x'
; 1068 : 				ReadIndexedString(56, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	56					; 00000038H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 1069 : 				}
; 1070 : 			else

	jmp	SHORT $LN5@AddLocatio
$LN6@AddLocatio:

; 1071 : 				{
; 1072 : 				// Say 'within x'
; 1073 : 				ReadIndexedString(55, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	push	55					; 00000037H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN5@AddLocatio:

; 1074 : 				}
; 1075 : 			ConstructOrderedSentence(40, wtmp, format, name);

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR _format$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wtmp$[ebp]
	push	edx
	push	40					; 00000028H
	call	?ConstructOrderedSentence@@YAXFPAD0ZZ	; ConstructOrderedSentence
	add	esp, 16					; 00000010H

; 1076 : 			}
; 1077 : 		else

	jmp	$LN4@AddLocatio
$LN8@AddLocatio:

; 1078 : 			{
; 1079 : 			// Just say 'near x'
; 1080 : 			if (gLangIDNum == F4LANG_FRENCH && (name[0] == 'A' || name[0] == 'a' || name[0] == 'E' || name[0] == 'e' || name[0] == 'I' || name[0] == 'i' || name[0] == 'O' || name[0] == 'o' || name[0] == 'U' || name[0] == 'u'))

	cmp	DWORD PTR ?gLangIDNum@@3HA, 4		; gLangIDNum
	jne	$LN3@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 65					; 00000041H
	je	$LN2@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 97					; 00000061H
	je	$LN2@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 69					; 00000045H
	je	SHORT $LN2@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 101				; 00000065H
	je	SHORT $LN2@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 73					; 00000049H
	je	SHORT $LN2@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 105				; 00000069H
	je	SHORT $LN2@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 79					; 0000004fH
	je	SHORT $LN2@AddLocatio
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _name$[ebp+edx]
	cmp	eax, 111				; 0000006fH
	je	SHORT $LN2@AddLocatio
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _name$[ebp+ecx]
	cmp	edx, 85					; 00000055H
	je	SHORT $LN2@AddLocatio
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _name$[ebp+eax]
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN3@AddLocatio
$LN2@AddLocatio:

; 1081 : 				ReadIndexedString(3994, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	push	3994					; 00000f9aH
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 1082 : 			else

	jmp	SHORT $LN1@AddLocatio
$LN3@AddLocatio:

; 1083 : 				ReadIndexedString(54, format, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	push	54					; 00000036H
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH
$LN1@AddLocatio:

; 1084 : 			ConstructOrderedSentence(40, wtmp, format, name);

	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	lea	eax, DWORD PTR _wtmp$[ebp]
	push	eax
	push	40					; 00000028H
	call	?ConstructOrderedSentence@@YAXFPAD0ZZ	; ConstructOrderedSentence
	add	esp, 16					; 00000010H
$LN4@AddLocatio:

; 1085 : 			}
; 1086 : 		AddStringToBuffer(wtmp,buffer);

	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wtmp$[ebp]
	push	edx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8
$LN30@AddLocatio:

; 1087 : 		}
; 1088 : 	delete oit;

	mov	eax, DWORD PTR _oit$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN48@AddLocatio
	push	1
	mov	edx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR tv466[ebp], eax
	jmp	SHORT $LN49@AddLocatio
$LN48@AddLocatio:
	mov	DWORD PTR tv466[ebp], 0
$LN49@AddLocatio:

; 1089 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN55@AddLocatio:
	DD	$LN18@AddLocatio
	DD	$LN22@AddLocatio
	DD	$LN17@AddLocatio
	DD	$LN13@AddLocatio
$LN53@AddLocatio:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddLocationToBuffer@@YAXDFFPAD@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AddLocationToBuffer@@YAXDFFPAD@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AddLocationToBuffer@@YAXDFFPAD@Z$2:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddLocationToBuffer@@YAXDFFPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddLocationToBuffer@@YAXDFFPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddLocationToBuffer@@YAXDFFPAD@Z ENDP			; AddLocationToBuffer
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_tstring$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_time$ = 8						; size = 4
_buffer$ = 12						; size = 4
_seconds$ = 16						; size = 4
?AddTimeToBuffer@@YAXKPADH@Z PROC			; AddTimeToBuffer

; 977  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 978  : 	_TCHAR		tstring[MAX_STRLEN_PER_TOKEN];
; 979  : 
; 980  : 	GetTimeString(time, tstring, seconds);

	mov	eax, DWORD PTR _seconds$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tstring$[ebp]
	push	ecx
	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	call	?GetTimeString@@YAPADKQADH@Z		; GetTimeString
	add	esp, 12					; 0000000cH

; 981  : 	AddStringToBuffer(tstring,buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tstring$[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 982  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddTimeToBuffer@@YAXKPADH@Z ENDP			; AddTimeToBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
tv64 = -40						; size = 4
_string$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_num$ = 8						; size = 4
_decimals$ = 12						; size = 4
_buffer$ = 16						; size = 4
?AddNumberToBuffer@@YAXMHPAD@Z PROC			; AddNumberToBuffer

; 957  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 958  : 	_TCHAR		string[32];
; 959  : 	// Hackish way to do this.. but..
; 960  : 	switch (decimals)

	mov	eax, DWORD PTR _decimals$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN3@AddNumberT
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN1@AddNumberT
	jmp	SHORT $LN2@AddNumberT
$LN3@AddNumberT:

; 961  : 		{
; 962  : 		case 0:
; 963  : 			_stprintf(string, _T("%.0f"), num);

	cvtss2sd xmm0, DWORD PTR _num$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 964  : 			break;

	jmp	SHORT $LN4@AddNumberT
$LN2@AddNumberT:

; 965  : 		case 1:
; 966  : 		default:
; 967  : 			_stprintf(string, _T("%.1f"), num);

	cvtss2sd xmm0, DWORD PTR _num$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GGBPDDBN@?$CF?41f?$AA@
	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 968  : 			break;

	jmp	SHORT $LN4@AddNumberT
$LN1@AddNumberT:

; 969  : 		case 2:
; 970  : 			_stprintf(string, _T("%.2f"), num);

	cvtss2sd xmm0, DWORD PTR _num$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GEFJINEE@?$CF?42f?$AA@
	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN4@AddNumberT:

; 971  : 			break;
; 972  : 		}
; 973  : 	_tcscat(buffer, string);

	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 974  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddNumberToBuffer@@YAXMHPAD@Z ENDP			; AddNumberToBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_string$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_num$ = 8						; size = 4
_buffer$ = 12						; size = 4
?AddNumberToBuffer@@YAXHPAD@Z PROC			; AddNumberToBuffer

; 950  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 951  :     _TCHAR		string[32];
; 952  :     _stprintf(string, _T("%d"), num);

	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 953  :     _tcscat(buffer, string);

	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 954  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddNumberToBuffer@@YAXHPAD@Z ENDP			; AddNumberToBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_wstring$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_sid$ = 8						; size = 4
_buffer$ = 12						; size = 4
?AddIndexedStringToBuffer@@YAXHPAD@Z PROC		; AddIndexedStringToBuffer

; 942  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 943  : 	_TCHAR		wstring[MAX_STRLEN_PER_TOKEN];
; 944  : 
; 945  : 	ReadIndexedString(sid, wstring, MAX_STRLEN_PER_TOKEN);

	push	256					; 00000100H
	lea	eax, DWORD PTR _wstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sid$[ebp]
	push	ecx
	call	?ReadIndexedString@@YAXHPADH@Z		; ReadIndexedString
	add	esp, 12					; 0000000cH

; 946  : 	AddStringToBuffer(wstring,buffer);

	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	lea	eax, DWORD PTR _wstring$[ebp]
	push	eax
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 947  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddIndexedStringToBuffer@@YAXHPAD@Z ENDP		; AddIndexedStringToBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_string$ = 8						; size = 4
_buffer$ = 12						; size = 4
?AddStringToBuffer@@YAXPAD0@Z PROC			; AddStringToBuffer

; 935  : 	{

	push	ebp
	mov	ebp, esp

; 936  :     ShiAssert(string != buffer);
; 937  : 
; 938  : 	_tcscat(buffer, string);

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 939  : 	}

	pop	ebp
	ret	0
?AddStringToBuffer@@YAXPAD0@Z ENDP			; AddStringToBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
$T1 = -1280						; size = 4
$T2 = -1276						; size = 4
$T3 = -1272						; size = 4
_fl$ = -1268						; size = 4
_wpno$4 = -1264						; size = 4
tv69 = -1260						; size = 4
_flight_ptr$ = -1256					; size = 4
_current_line$ = -1252					; size = 1024
_time$5 = -228						; size = 32
_hdg$6 = -196						; size = 32
_distance$7 = -164					; size = 32
_spd$8 = -132						; size = 32
_alt$9 = -100						; size = 32
_action$10 = -68					; size = 32
_desc$11 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_query$ = 8						; size = 4
_data$ = 12						; size = 4
_buffer$ = 16						; size = 4
_len$ = 20						; size = 4
?GetBriefingData@@YAHHHPADH@Z PROC			; GetBriefingData

; 539  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 1280				; 00000500H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 540  : 	FlightDataClass	*flight_ptr;
; 541  : 	Flight fl;
; 542  : 
; 543  : 	_TCHAR current_line[MAX_STRLEN_PER_PARAGRAPH] = {0};

	mov	BYTE PTR _current_line$[ebp], 0
	push	1023					; 000003ffH
	push	0
	lea	eax, DWORD PTR _current_line$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 544  : 	buffer[0] = 0;

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 545  : 	switch (query)

	mov	eax, DWORD PTR _query$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR tv69[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 7
	ja	$LN30@GetBriefin
	mov	edx, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN40@GetBriefin[edx*4]
$LN29@GetBriefin:

; 546  : 		{
; 547  : 		case GBD_PLAYER_ELEMENT:
; 548  : 			if (!TheCampaign.MissionEvaluator->player_element)

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN28@GetBriefin

; 549  : 				return -1;

	or	eax, -1
	jmp	$LN33@GetBriefin
$LN28@GetBriefin:

; 550  : 			if (!TheCampaign.MissionEvaluator->player_pilot)

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN27@GetBriefin

; 551  : 				return -1;

	or	eax, -1
	jmp	$LN33@GetBriefin
$LN27@GetBriefin:

; 552  : 			AddStringToBuffer(TheCampaign.MissionEvaluator->player_element->name, buffer);

	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 553  : 			AddNumberToBuffer(TheCampaign.MissionEvaluator->player_pilot->aircraft_slot+1, buffer);

	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	ecx, DWORD PTR [eax+16]
	movzx	edx, BYTE PTR [ecx+60]
	add	edx, 1
	push	edx
	call	?AddNumberToBuffer@@YAXHPAD@Z		; AddNumberToBuffer
	add	esp, 8

; 554  : 			break;

	jmp	$LN30@GetBriefin
$LN26@GetBriefin:

; 555  : 		case GBD_PLAYER_TASK:
; 556  : 			if (!TheCampaign.MissionEvaluator->player_element)

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN25@GetBriefin

; 557  : 				return -1;

	or	eax, -1
	jmp	$LN33@GetBriefin
$LN25@GetBriefin:

; 558  : 			ReadScriptedBriefFile ("task.gbd",current_line,NULL,buffer,TheCampaign.MissionEvaluator,TheCampaign.MissionEvaluator->player_element);

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _current_line$[ebp]
	push	edx
	push	OFFSET ??_C@_08IFIJADLA@task?4gbd?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 559  : 			break;

	jmp	$LN30@GetBriefin
$LN24@GetBriefin:

; 560  : 		case GBD_PACKAGE_LABEL:
; 561  : 			AddIndexedStringToBuffer(107, buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	107					; 0000006bH
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 562  : 			break;

	jmp	$LN30@GetBriefin
$LN23@GetBriefin:

; 563  : 		case GBD_PACKAGE_MISSION:
; 564  : 			if (!TheCampaign.MissionEvaluator->package_element)

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN22@GetBriefin

; 565  : 				return -1;

	or	eax, -1
	jmp	$LN33@GetBriefin
$LN22@GetBriefin:

; 566  : 			ReadScriptedBriefFile ("mission.gbd",current_line,NULL,buffer,TheCampaign.MissionEvaluator,TheCampaign.MissionEvaluator->package_element);

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _current_line$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@NPHIDLME@mission?4gbd?$AA@
	call	?ReadScriptedBriefFile@@YAHPAD0PAVC_Window@@0PAVMissionEvaluationClass@@PAVFlightDataClass@@@Z ; ReadScriptedBriefFile
	add	esp, 24					; 00000018H

; 567  : 			break;

	jmp	$LN30@GetBriefin
$LN21@GetBriefin:

; 568  : 		case GBD_PACKAGE_ELEMENT_NAME:
; 569  : 			flight_ptr = TheCampaign.MissionEvaluator->flight_data;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR _flight_ptr$[ebp], edx
$LN20@GetBriefin:

; 570  : 			while (flight_ptr && data)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	SHORT $LN19@GetBriefin
	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN19@GetBriefin

; 571  : 				{
; 572  : 				flight_ptr = flight_ptr->next_flight;

	mov	eax, DWORD PTR _flight_ptr$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR _flight_ptr$[ebp], ecx

; 573  : 				data--;

	mov	edx, DWORD PTR _data$[ebp]
	sub	edx, 1
	mov	DWORD PTR _data$[ebp], edx

; 574  : 				}

	jmp	SHORT $LN20@GetBriefin
$LN19@GetBriefin:

; 575  : 			if (flight_ptr)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	SHORT $LN18@GetBriefin

; 576  : 				AddStringToBuffer(flight_ptr->name, buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight_ptr$[ebp]
	push	ecx
	call	?AddStringToBuffer@@YAXPAD0@Z		; AddStringToBuffer
	add	esp, 8

; 577  : 			else

	jmp	SHORT $LN17@GetBriefin
$LN18@GetBriefin:

; 578  : 				return -1;

	or	eax, -1
	jmp	$LN33@GetBriefin
$LN17@GetBriefin:

; 579  : 			break;

	jmp	$LN30@GetBriefin
$LN16@GetBriefin:

; 580  : 		case GBD_PACKAGE_ELEMENT_TASK:
; 581  : 			flight_ptr = TheCampaign.MissionEvaluator->flight_data;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR _flight_ptr$[ebp], eax
$LN15@GetBriefin:

; 582  : 			while (flight_ptr && data)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	SHORT $LN14@GetBriefin
	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN14@GetBriefin

; 583  : 				{
; 584  : 				flight_ptr = flight_ptr->next_flight;

	mov	ecx, DWORD PTR _flight_ptr$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	DWORD PTR _flight_ptr$[ebp], edx

; 585  : 				data--;

	mov	eax, DWORD PTR _data$[ebp]
	sub	eax, 1
	mov	DWORD PTR _data$[ebp], eax

; 586  : 				}

	jmp	SHORT $LN15@GetBriefin
$LN14@GetBriefin:

; 587  : 			if (flight_ptr)

	cmp	DWORD PTR _flight_ptr$[ebp], 0
	je	SHORT $LN13@GetBriefin

; 588  : 				AddIndexedStringToBuffer(300+flight_ptr->mission, buffer);

	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight_ptr$[ebp]
	movzx	eax, BYTE PTR [edx+61]
	add	eax, 300				; 0000012cH
	push	eax
	call	?AddIndexedStringToBuffer@@YAXHPAD@Z	; AddIndexedStringToBuffer
	add	esp, 8

; 589  : 			else

	jmp	SHORT $LN12@GetBriefin
$LN13@GetBriefin:

; 590  : 				return -1;

	or	eax, -1
	jmp	$LN33@GetBriefin
$LN12@GetBriefin:

; 591  : 			break;

	jmp	$LN30@GetBriefin
$LN11@GetBriefin:

; 592  : 		case GBD_PACKAGE_STPTHDR:
; 593  : 			sprintf (buffer, "%3s %8s %3s %3s %4s %4s %s %s",
; 594  : 					 "Wpt", "Time", "Hdg", "Spd", "Alt", "Dist", "", "");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_04MPGECEBJ@Dist?$AA@
	push	OFFSET ??_C@_03PHINJBAN@Alt?$AA@
	push	OFFSET ??_C@_03FCGDEGFM@Spd?$AA@
	push	OFFSET ??_C@_03OFHJMOKN@Hdg?$AA@
	push	OFFSET ??_C@_04OKOFBOPB@Time?$AA@
	push	OFFSET ??_C@_03JHMDMDFK@Wpt?$AA@
	push	OFFSET ??_C@_0BO@DDPJPIDF@?$CF3s?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF4s?5?$CF4s?5?$CFs?5?$CFs?$AA@
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 40					; 00000028H

; 595  : 			break;

	jmp	$LN30@GetBriefin
$LN10@GetBriefin:

; 596  : 		case GBD_PACKAGE_STPT:
; 597  : 		    {
; 598  : 			int wpno = 1;

	mov	DWORD PTR _wpno$4[ebp], 1

; 599  : 			//JPO extra checks.
; 600  : 			ShiAssert(FALSE == F4IsBadReadPtr(TheCampaign.MissionEvaluator, sizeof *TheCampaign.MissionEvaluator));
; 601  : 			ShiAssert(FALSE == F4IsBadReadPtr(TheCampaign.MissionEvaluator->player_element, sizeof *TheCampaign.MissionEvaluator->player_element));
; 602  : 
; 603  : 		    fl = NULL;

	mov	DWORD PTR _fl$[ebp], 0

; 604  : 				if (TheCampaign.MissionEvaluator && TheCampaign.MissionEvaluator->player_element)

	cmp	DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324, 0
	je	SHORT $LN9@GetBriefin
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN9@GetBriefin

; 605  : 					fl = (Flight)FindUnit(TheCampaign.MissionEvaluator->player_element->flight_id);

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR [ecx+40]
	push	eax
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	DWORD PTR _fl$[ebp], eax
$LN9@GetBriefin:

; 606  : 
; 607  : 		    if (fl)

	cmp	DWORD PTR _fl$[ebp], 0
	je	SHORT $LN7@GetBriefin

; 608  : 		    {
; 609  : 			CWayPoint = fl->GetFirstUnitWP();

	mov	ecx, DWORD PTR _fl$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _CWayPoint, eax

; 610  : 			LWayPoint = NULL;

	mov	DWORD PTR _LWayPoint, 0

; 611  : 			TheCampaign.MissionEvaluator->curr_data = 1;

	mov	ecx, 1
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	mov	WORD PTR [edx+208], cx
$LN7@GetBriefin:

; 612  : 		    }
; 613  : 		    while (CWayPoint && data > 0)

	cmp	DWORD PTR _CWayPoint, 0
	je	SHORT $LN6@GetBriefin
	cmp	DWORD PTR _data$[ebp], 0
	jle	SHORT $LN6@GetBriefin

; 614  : 		    {
; 615  : 			data --;

	mov	eax, DWORD PTR _data$[ebp]
	sub	eax, 1
	mov	DWORD PTR _data$[ebp], eax

; 616  : 			wpno ++;

	mov	ecx, DWORD PTR _wpno$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _wpno$4[ebp], ecx

; 617  : 			LWayPoint = CWayPoint;

	mov	edx, DWORD PTR _CWayPoint
	mov	DWORD PTR _LWayPoint, edx

; 618  : 			CWayPoint = CWayPoint->GetNextWP();

	mov	ecx, DWORD PTR _CWayPoint
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _CWayPoint, eax

; 619  : 		    }

	jmp	SHORT $LN7@GetBriefin
$LN6@GetBriefin:

; 620  : 		    if (CWayPoint) {

	cmp	DWORD PTR _CWayPoint, 0
	je	$LN5@GetBriefin

; 621  : 			_TCHAR time[32], action[32], distance[32], hdg[32], spd[32], alt[32], desc[32];
; 622  : 			time[0] = action[0] = distance[0] = hdg[0] = spd[0] = alt[0] = desc[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 32			; 00000020H
	jae	SHORT $LN34@GetBriefin
	jmp	SHORT $LN35@GetBriefin
$LN34@GetBriefin:
	call	___report_rangecheckfailure
$LN35@GetBriefin:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _desc$11[ebp+ecx], 0
	mov	edx, 1
	imul	edx, 0
	mov	BYTE PTR _alt$9[ebp+edx], 0
	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR _spd$8[ebp+eax], 0
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR _hdg$6[ebp+ecx], 0
	mov	edx, 1
	imul	edx, 0
	mov	BYTE PTR _distance$7[ebp+edx], 0
	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR _action$10[ebp+eax], 0
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR _time$5[ebp+ecx], 0

; 623  : 			GetWpActionToBuffer(CWayPoint, action);

	lea	edx, DWORD PTR _action$10[ebp]
	push	edx
	mov	eax, DWORD PTR _CWayPoint
	push	eax
	call	?GetWpActionToBuffer@@YAXPAVWayPointClass@@PAD@Z ; GetWpActionToBuffer
	add	esp, 8

; 624  : 			GetWpTimeToBuffer(CWayPoint, time);

	lea	ecx, DWORD PTR _time$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _CWayPoint
	push	edx
	call	?GetWpTimeToBuffer@@YAXPAVWayPointClass@@PAD@Z ; GetWpTimeToBuffer
	add	esp, 8

; 625  : 			GetWptDist(CWayPoint, LWayPoint, distance);

	lea	eax, DWORD PTR _distance$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _LWayPoint
	push	ecx
	mov	edx, DWORD PTR _CWayPoint
	push	edx
	call	?GetWptDist@@YAXPAVWayPointClass@@0PAD@Z ; GetWptDist
	add	esp, 12					; 0000000cH

; 626  : 			GetWptSpeed(CWayPoint, LWayPoint, spd);

	lea	eax, DWORD PTR _spd$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _LWayPoint
	push	ecx
	mov	edx, DWORD PTR _CWayPoint
	push	edx
	call	?GetWptSpeed@@YAXPAVWayPointClass@@0PAD@Z ; GetWptSpeed
	add	esp, 12					; 0000000cH

; 627  : 			GetWpAlt(CWayPoint, LWayPoint, alt);

	lea	eax, DWORD PTR _alt$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _LWayPoint
	push	ecx
	mov	edx, DWORD PTR _CWayPoint
	push	edx
	call	?GetWpAlt@@YAHPAVWayPointClass@@0PAD@Z	; GetWpAlt
	add	esp, 12					; 0000000cH

; 628  : 			GetWpHeading(CWayPoint, LWayPoint, hdg);

	lea	eax, DWORD PTR _hdg$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _LWayPoint
	push	ecx
	mov	edx, DWORD PTR _CWayPoint
	push	edx
	call	?GetWpHeading@@YAXPAVWayPointClass@@0PAD@Z ; GetWpHeading
	add	esp, 12					; 0000000cH

; 629  : 			GetWpDescription(CWayPoint, desc);

	lea	eax, DWORD PTR _desc$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _CWayPoint
	push	ecx
	call	?GetWpDescription@@YAXPAVWayPointClass@@PAD@Z ; GetWpDescription
	add	esp, 8

; 630  : 			if (action[0] == '-') action[0] = 0;

	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _action$10[ebp+edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN4@GetBriefin
	mov	ecx, 1
	imul	ecx, 0
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 32			; 00000020H
	jae	SHORT $LN36@GetBriefin
	jmp	SHORT $LN37@GetBriefin
$LN36@GetBriefin:
	call	___report_rangecheckfailure
$LN37@GetBriefin:
	mov	edx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _action$10[ebp+edx], 0
$LN4@GetBriefin:

; 631  : 			if (desc[0] == '-') desc[0] = 0;

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _desc$11[ebp+eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN3@GetBriefin
	mov	edx, 1
	imul	edx, 0
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 32			; 00000020H
	jae	SHORT $LN38@GetBriefin
	jmp	SHORT $LN39@GetBriefin
$LN38@GetBriefin:
	call	___report_rangecheckfailure
$LN39@GetBriefin:
	mov	eax, DWORD PTR $T1[ebp]
	mov	BYTE PTR _desc$11[ebp+eax], 0
$LN3@GetBriefin:

; 632  : 			sprintf (buffer, "%3d %8s %3s %3s %5s %4s %s %s",
; 633  : 				wpno, time, hdg, spd, alt, distance, action, desc);

	lea	ecx, DWORD PTR _desc$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _action$10[ebp]
	push	edx
	lea	eax, DWORD PTR _distance$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _alt$9[ebp]
	push	ecx
	lea	edx, DWORD PTR _spd$8[ebp]
	push	edx
	lea	eax, DWORD PTR _hdg$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _time$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _wpno$4[ebp]
	push	edx
	push	OFFSET ??_C@_0BO@PBDJADDD@?$CF3d?5?$CF8s?5?$CF3s?5?$CF3s?5?$CF5s?5?$CF4s?5?$CFs?5?$CFs?$AA@
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 40					; 00000028H

; 634  : 		    }
; 635  : 		    else

	jmp	SHORT $LN30@GetBriefin
$LN5@GetBriefin:

; 636  : 			return -1;

	or	eax, -1
	jmp	SHORT $LN33@GetBriefin
$LN30@GetBriefin:

; 637  : 		    }
; 638  : 		    break;
; 639  : 
; 640  : 		default:
; 641  : 			break;
; 642  : 		}
; 643  : 	buffer[len-1] = 0;

	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx-1], 0

; 644  : 	return 1;

	mov	eax, 1
$LN33@GetBriefin:

; 645  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN40@GetBriefin:
	DD	$LN29@GetBriefin
	DD	$LN26@GetBriefin
	DD	$LN24@GetBriefin
	DD	$LN23@GetBriefin
	DD	$LN21@GetBriefin
	DD	$LN16@GetBriefin
	DD	$LN11@GetBriefin
	DD	$LN10@GetBriefin
?GetBriefingData@@YAHHHPADH@Z ENDP			; GetBriefingData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_brief_string$ = 8					; size = 4
?BuildCampDebrief@@YAXPAD@Z PROC			; BuildCampDebrief

; 173  : 	{

	push	ebp
	mov	ebp, esp

; 174  : 	CBX = CBY = CLineStart = 0;

	mov	DWORD PTR _CLineStart, 0
	mov	ax, WORD PTR _CLineStart
	mov	WORD PTR _CBY, ax
	mov	cx, WORD PTR _CBY
	mov	WORD PTR _CBX, cx

; 175  : 	brief_string[0] = 0;

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _brief_string$[ebp]
	mov	BYTE PTR [eax+edx], 0

; 176  : 	BuildDebriefString (NULL, brief_string);

	mov	ecx, DWORD PTR _brief_string$[ebp]
	push	ecx
	push	0
	call	?BuildDebriefString@@YAHPAVC_Window@@PAD@Z ; BuildDebriefString
	add	esp, 8

; 177  : 
; 178  : #ifdef FUNKY_KEVIN_DEBUG_STUFF
; 179  : 	inMission = 0;
; 180  : #endif
; 181  : 	}

	pop	ebp
	ret	0
?BuildCampDebrief@@YAXPAD@Z ENDP			; BuildCampDebrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_brief_string$ = 8					; size = 4
?BuildCampBrief@@YAXPAD@Z PROC				; BuildCampBrief

; 145  : 	{

	push	ebp
	mov	ebp, esp

; 146  : 	CBX = CBY = CLineStart = 0;

	mov	DWORD PTR _CLineStart, 0
	mov	ax, WORD PTR _CLineStart
	mov	WORD PTR _CBY, ax
	mov	cx, WORD PTR _CBY
	mov	WORD PTR _CBX, cx

; 147  : 	brief_string[0] = 0;

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _brief_string$[ebp]
	mov	BYTE PTR [eax+edx], 0

; 148  : 	BuildBriefString (NULL, brief_string);

	mov	ecx, DWORD PTR _brief_string$[ebp]
	push	ecx
	push	0
	call	?BuildBriefString@@YAHPAVC_Window@@PAD@Z ; BuildBriefString
	add	esp, 8

; 149  : 	}

	pop	ebp
	ret	0
?BuildCampBrief@@YAXPAD@Z ENDP				; BuildCampBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_Leave$ = -4						; size = 4
_win$ = 8						; size = 4
?BuildCampDebrief@@YAXPAVC_Window@@@Z PROC		; BuildCampDebrief

; 152  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 153  : 	CBX = CBY = CLineStart = 0;

	mov	DWORD PTR _CLineStart, 0
	mov	ax, WORD PTR _CLineStart
	mov	WORD PTR _CBY, ax
	mov	cx, WORD PTR _CBY
	mov	WORD PTR _CBX, cx

; 154  : 	F4CSECTIONHANDLE*	Leave;
; 155  : 
; 156  : 	Leave = UI_Enter(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 157  : 	DeleteGroupList(DEBRIEF_WIN);

	push	17000					; 00004268H
	call	?DeleteGroupList@@YAXJ@Z		; DeleteGroupList
	add	esp, 4

; 158  : 	win->ScanClientAreas();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?ScanClientAreas@C_Window@@QAEXXZ	; C_Window::ScanClientAreas

; 159  : 	win->ReverseText = RGB(0,255,0);

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+152], 65280		; 0000ff00H

; 160  : 	win->DisabledText = RGB(230,230,230);

	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+156], 15132390		; 00e6e6e6H

; 161  : 	CBColor = win->NormalText = RGB(230,230,230);

	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+148], 15132390		; 00e6e6e6H
	mov	DWORD PTR _CBColor, 15132390		; 00e6e6e6H

; 162  : 	BuildDebriefString (win, NULL);

	push	0
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?BuildDebriefString@@YAHPAVC_Window@@PAD@Z ; BuildDebriefString
	add	esp, 8

; 163  : 	win->ScanClientAreas();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?ScanClientAreas@C_Window@@QAEXXZ	; C_Window::ScanClientAreas

; 164  : 	win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow

; 165  : 	UI_Leave(Leave);

	mov	ecx, DWORD PTR _Leave$[ebp]
	push	ecx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 166  : 
; 167  : #ifdef FUNKY_KEVIN_DEBUG_STUFF
; 168  : 	inMission = 0;
; 169  : #endif
; 170  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?BuildCampDebrief@@YAXPAVC_Window@@@Z ENDP		; BuildCampDebrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campui\brief.cpp
_TEXT	SEGMENT
_Leave$ = -4						; size = 4
_win$ = 8						; size = 4
?BuildCampBrief@@YAXPAVC_Window@@@Z PROC		; BuildCampBrief

; 118  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 119  : 	CBX = CBY = CLineStart = 0;

	mov	DWORD PTR _CLineStart, 0
	mov	ax, WORD PTR _CLineStart
	mov	WORD PTR _CBY, ax
	mov	cx, WORD PTR _CBY
	mov	WORD PTR _CBX, cx

; 120  : 	F4CSECTIONHANDLE*	Leave;
; 121  : 
; 122  : #ifdef DEBUG
; 123  : 	if (testDebrief)
; 124  : 		{
; 125  : 		C_Window *win2 = gMainHandler->FindWindow(DEBRIEF_WIN);
; 126  : 		BuildCampDebrief (win2);
; 127  : 		return;
; 128  : 		}
; 129  : #endif
; 130  : 
; 131  : 	Leave = UI_Enter(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 132  : 	DeleteGroupList(BRIEF_WIN);

	push	15000					; 00003a98H
	call	?DeleteGroupList@@YAXJ@Z		; DeleteGroupList
	add	esp, 4

; 133  : 	win->ScanClientAreas();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?ScanClientAreas@C_Window@@QAEXXZ	; C_Window::ScanClientAreas

; 134  : 	// KCK HACK: I can't find how to set colors the correct way..
; 135  : 	win->ReverseText = RGB(0,255,0);

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+152], 65280		; 0000ff00H

; 136  : 	win->DisabledText = RGB(230,230,230);

	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+156], 15132390		; 00e6e6e6H

; 137  : 	CBColor = win->NormalText = RGB(230,230,230);

	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+148], 15132390		; 00e6e6e6H
	mov	DWORD PTR _CBColor, 15132390		; 00e6e6e6H

; 138  : 	BuildBriefString (win, NULL);

	push	0
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	call	?BuildBriefString@@YAHPAVC_Window@@PAD@Z ; BuildBriefString
	add	esp, 8

; 139  : 	win->ScanClientAreas();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?ScanClientAreas@C_Window@@QAEXXZ	; C_Window::ScanClientAreas

; 140  : 	win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow

; 141  : 	UI_Leave(Leave);

	mov	ecx, DWORD PTR _Leave$[ebp]
	push	ecx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 142  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?BuildCampBrief@@YAXPAVC_Window@@@Z ENDP		; BuildCampBrief
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ PROC ; FlightClass::GetUnitPackage, COMDAT
; _this$ = ecx

; 216  : 		PackageClass* GetUnitPackage (void)	{ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 			return (PackageClass*)vuDatabase->Find(package); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find

; 218  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ENDP ; FlightClass::GetUnitPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveStatus@ObjectiveClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetObjectiveStatus, COMDAT
; _this$ = ecx

; 270  : 	uchar GetObjectiveStatus (void)							{	return obj_data.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+199]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ PROC ; TeamClass::GetOffensiveAirAction, COMDAT
; _this$ = ecx

; 279  : 	TeamAirActionType *GetOffensiveAirAction (void) { return &offensiveAirAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 316				; 0000013cH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOffensiveAirAction@TeamClass@@QAEPAUTeamAirActionType@@XZ ENDP ; TeamClass::GetOffensiveAirAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ PROC ; TeamClass::GetGroundAction, COMDAT
; _this$ = ecx

; 277  : 	TeamGndActionType *GetGroundAction (void) { return &groundAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 267				; 0000010bH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ENDP ; TeamClass::GetGroundAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ PROC	; UnitClass::GetFirstUnitWP, COMDAT
; _this$ = ecx

; 431  : 	WayPoint GetFirstUnitWP()				{ return wp_list; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ENDP	; UnitClass::GetFirstUnitWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Broken@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Broken@UnitClass@@QBEHXZ PROC				; UnitClass::Broken, COMDAT
; _this$ = ecx

; 320  : 	int Broken () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Broken@UnitClass@@QBEHXZ ENDP				; UnitClass::Broken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampLeaveCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampLeaveCriticalSection@@YAXXZ PROC			; CampLeaveCriticalSection, COMDAT

; 51   : inline void CampLeaveCriticalSection(){ F4LeaveCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampLeaveCriticalSection@@YAXXZ ENDP			; CampLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampEnterCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampEnterCriticalSection@@YAXXZ PROC			; CampEnterCriticalSection, COMDAT

; 50   : inline void CampEnterCriticalSection(){ F4EnterCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampEnterCriticalSection@@YAXXZ ENDP			; CampEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetClass@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClass@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetClass, COMDAT
; _this$ = ecx

; 288  : 	uchar GetClass (void)	const						{	return (EntityType())->classInfo_[VU_CLASS]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClass@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPLocation@WayPointClass@@QBEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetWPLocation@WayPointClass@@QBEXPAF0@Z PROC		; WayPointClass::GetWPLocation, COMDAT
; _this$ = ecx

; 205  : 	void GetWPLocation (GridIndex* x, GridIndex* y) const { *x = GridX; *y = GridY; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetWPLocation@WayPointClass@@QBEXPAF0@Z ENDP		; WayPointClass::GetWPLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPArrivalTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPArrivalTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPArrivalTime, COMDAT
; _this$ = ecx

; 202  : 	CampaignTime GetWPArrivalTime()					{ return Arrive; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPArrivalTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPArrivalTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAltitude@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAltitude@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPAltitude, COMDAT
; _this$ = ecx

; 199  : 	int GetWPAltitude()								{ return (int)(GridZ*GRIDZ_SCALE_FACTOR); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	imul	eax, 10					; 0000000aH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAltitude@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPSpeed@WayPointClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPSpeed@WayPointClass@@QAEMXZ PROC			; WayPointClass::GetWPSpeed, COMDAT
; _this$ = ecx

; 197  : 	float GetWPSpeed (void)							{ return Speed; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPSpeed@WayPointClass@@QAEMXZ ENDP			; WayPointClass::GetWPSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFlags@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFlags@WayPointClass@@QAEKXZ PROC			; WayPointClass::GetWPFlags, COMDAT
; _this$ = ecx

; 173  : 	ulong GetWPFlags (void)							{ return (ulong)Flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFlags@WayPointClass@@QAEKXZ ENDP			; WayPointClass::GetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPRouteAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPRouteAction@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPRouteAction, COMDAT
; _this$ = ecx

; 171  : 	int GetWPRouteAction(void)						{ return (int)RouteAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+25]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPRouteAction@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPRouteAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ PROC ; WayPointClass::GetWPTarget, COMDAT
; _this$ = ecx

; 168  : 	CampEntity GetWPTarget (void)					{ return (CampEntity)vuDatabase->Find(TargetID); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ENDP ; WayPointClass::GetWPTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT ?_tcschr@@YAPADPADI@Z
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 4
?_tcschr@@YAPADPADI@Z PROC				; _tcschr, COMDAT

; 2005 :         {return ((char *)_tcschr((const char *)_S, _C)); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __C$[ebp]
	push	eax
	mov	ecx, DWORD PTR __S$[ebp]
	push	ecx
	call	__tcschr
	add	esp, 8
	pop	ebp
	ret	0
?_tcschr@@YAPADPADI@Z ENDP				; _tcschr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT __tcscmp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcscmp PROC						; COMDAT

; 1651 : _Check_return_ __inline int _tcscmp(_In_ _CPC _s1,_In_ _CPC _s2) {return _mbscmp((_CPUC)_s1,(_CPUC)_s2);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __s1$[ebp]
	push	ecx
	call	__mbscmp
	add	esp, 8
	pop	ebp
	ret	0
__tcscmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT __tcschr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcschr PROC						; COMDAT

; 1479 : __inline _CRPC _tcschr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbschr((_CPUC)_s1,_c);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __c$[ebp]
	push	eax
	mov	ecx, DWORD PTR __s1$[ebp]
	push	ecx
	call	__mbschr
	add	esp, 8
	pop	ebp
	ret	0
__tcschr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 224  : 	{ return (char*)strstr((const char*)_Str, _SubStr); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __SubStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strstr
	add	esp, 8
	pop	ebp
	ret	0
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 218  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strchr
	add	esp, 8
	pop	ebp
	ret	0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
END
