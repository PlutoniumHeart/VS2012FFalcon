; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPLIB\Path.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?AvoidTable@@3PADA				; AvoidTable
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?CostTable@@3PAY07MA				; CostTable
PUBLIC	?ReliefCost@@3PAMA				; ReliefCost
PUBLIC	?QuickSearch@@3HA				; QuickSearch
PUBLIC	?moveAlt@@3HA					; moveAlt
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?CoverValues@@3PAMA				; CoverValues
PUBLIC	?moveTeam@@3HA					; moveTeam
PUBLIC	?moveType@@3HA					; moveType
PUBLIC	?moveFlags@@3HA					; moveFlags
PUBLIC	?maxSearch@@3HA					; maxSearch
PUBLIC	?maxCost@@3MA					; maxCost
_BSS	SEGMENT
?QuickSearch@@3HA DD 01H DUP (?)			; QuickSearch
?moveAlt@@3HA DD 01H DUP (?)				; moveAlt
?moveTeam@@3HA DD 01H DUP (?)				; moveTeam
?moveType@@3HA DD 01H DUP (?)				; moveType
?moveFlags@@3HA DD 01H DUP (?)				; moveFlags
?maxCost@@3MA DD 01H DUP (?)				; maxCost
_BSS	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
_DATA	SEGMENT
?AvoidTable@@3PADA DB 014H				; AvoidTable
	DB	05H
	DB	01H
	ORG $+5
?CostTable@@3PAY07MA DD 042c60000r		; 99	; CostTable
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	040400000r			; 3
	DD	041000000r			; 8
	DD	040c00000r			; 6
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	03fc00000r			; 1.5
	DD	040800000r			; 4
	DD	040400000r			; 3
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	03f800000r			; 1
	DD	040400000r			; 3
	DD	040000000r			; 2
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	03f800000r			; 1
	DD	040400000r			; 3
	DD	040000000r			; 2
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	040000000r			; 2
	DD	040c00000r			; 6
	DD	040800000r			; 4
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	040000000r			; 2
	DD	040c00000r			; 6
	DD	040800000r			; 4
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	042c60000r			; 99
	DD	040000000r			; 2
	DD	040400000r			; 3
	DD	040400000r			; 3
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	042c60000r			; 99
	DD	042c60000r			; 99
?ReliefCost@@3PAMA DD 03f800000r		; 1	; ReliefCost
	DD	03fb47ae1r			; 1.41
	DD	03fdd70a4r			; 1.73
	DD	040000000r			; 2
?CoverValues@@3PAMA DD 000000000r		; 0	; CoverValues
	DD	040000000r			; 2
	DD	03f800000r			; 1
	DD	03fc00000r			; 1.5
	DD	040000000r			; 2
	DD	040400000r			; 3
	DD	040800000r			; 4
	DD	040800000r			; 4
?maxSearch@@3HA DD 07d0H				; maxSearch
_DATA	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ; ObjectiveClass::GetNeighborCost
PUBLIC	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ	; ObjectiveClass::GetObjectiveParent
PUBLIC	?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ ; ObjectiveClass::GetObjectiveParentID
PUBLIC	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ	; ObjectiveClass::GetObjectiveStatus
PUBLIC	?GetCost@BasePathClass@@QAEMXZ			; BasePathClass::GetCost
PUBLIC	??1PathClass@@QAE@XZ				; PathClass::~PathClass
PUBLIC	?GetGridPath@@YAHPAVBasePathClass@@FFFFHHH@Z	; GetGridPath
PUBLIC	?GetPathCost@@YAMFFPAVBasePathClass@@W4MoveType@@H@Z ; GetPathCost
PUBLIC	?GetPathCost@@YAMPAVObjectiveClass@@PAVBasePathClass@@W4MoveType@@H@Z ; GetPathCost
PUBLIC	?GetObjectivePath@@YAHPAVBasePathClass@@PAVObjectiveClass@@1HHH@Z ; GetObjectivePath
PUBLIC	?GetObjectivePath@@YAHPAVBasePathClass@@FFFFHHH@Z ; GetObjectivePath
PUBLIC	?FindLinkPath@@YAHPAVBasePathClass@@PAVObjectiveClass@@1W4MoveType@@@Z ; FindLinkPath
PUBLIC	?GetMovementCost@@YAMFFW4MoveType@@HE@Z		; GetMovementCost
PUBLIC	?debugprintf@@YAXPADZZ				; debugprintf
PUBLIC	?GetNeighborCoord@@YAXPAVAS_DataClass@@PAX1@Z	; GetNeighborCoord
PUBLIC	?GetNeighborObject@@YAXPAVAS_DataClass@@PAX1@Z	; GetNeighborObject
PUBLIC	?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z ; CostToArrive
PUBLIC	?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z ; GetObjectiveMovementCost
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f400000
PUBLIC	__real@3f800000
PUBLIC	__real@3fb47ae1
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@42480000
PUBLIC	__real@42f00000
PUBLIC	__real@437e0000
PUBLIC	__real@437f0000
PUBLIC	__real@bf800000
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__wvsprintfA@12:PROC
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?GetRelief@@YA?AW4ReliefType@@FF@Z:PROC		; GetRelief
EXTRN	?GetCover@@YA?AW4CoverType@@FF@Z:PROC		; GetCover
EXTRN	?GetRoad@@YADFF@Z:PROC				; GetRoad
EXTRN	?GetRail@@YADFF@Z:PROC				; GetRail
EXTRN	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z:PROC ; FindObjective
EXTRN	?IsSecondary@ObjectiveClass@@QAEHXZ:PROC	; ObjectiveClass::IsSecondary
EXTRN	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z:PROC	; ObjectiveClass::GetNeighbor
EXTRN	??1BasePathClass@@QAE@XZ:PROC			; BasePathClass::~BasePathClass
EXTRN	?GetDirection@BasePathClass@@QAEHH@Z:PROC	; BasePathClass::GetDirection
EXTRN	?ClearPath@BasePathClass@@QAEXXZ:PROC		; BasePathClass::ClearPath
EXTRN	??0PathClass@@QAE@XZ:PROC			; PathClass::PathClass
EXTRN	?ASSearch@AS_DataClass@@QAEHPAVBasePathClass@@PAX1P6AXPAV1@11@ZHHM@Z:PROC ; AS_DataClass::ASSearch
EXTRN	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z:PROC	; AS_DataClass::ASFillNode
EXTRN	?GetMaxSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetMaxSpeed
EXTRN	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetFirstUnit
EXTRN	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetNextUnit
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?PackXY@@YAPAXFF@Z:PROC				; PackXY
EXTRN	?UnpackXY@@YAXPAXPAF1@Z:PROC			; UnpackXY
EXTRN	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z:PROC ; FindNearestObjective
EXTRN	?ScoreThreatFast@@YAHFFHE@Z:PROC		; ScoreThreatFast
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?GetGroundRole@@YAHH@Z:PROC			; GetGroundRole
EXTRN	?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z:PROC ; GroundTaskingManagerClass::SendGTMMessage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?Map_Max_X@@3FA:WORD				; Map_Max_X
EXTRN	?Map_Max_Y@@3FA:WORD				; Map_Max_Y
EXTRN	?AllUnitList@@3PAVVuLinkedList@@A:DWORD		; AllUnitList
EXTRN	?ASD@@3PAVAS_DataClass@@A:DWORD			; ASD
EXTRN	?dx@@3PAFA:BYTE					; dx
EXTRN	?dy@@3PAFA:BYTE					; dy
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?OBJ_GROUND_PATH_MAX_SEARCH@@3FA:WORD		; OBJ_GROUND_PATH_MAX_SEARCH
EXTRN	?OBJ_GROUND_PATH_MAX_COST@@3FA:WORD		; OBJ_GROUND_PATH_MAX_COST
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@437e0000
CONST	SEGMENT
__real@437e0000 DD 0437e0000r			; 254
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fb47ae1
CONST	SEGMENT
__real@3fb47ae1 DD 03fb47ae1r			; 1.41
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z$0
__unwindtable$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z$0
__unwindtable$?GetMovementCost@@YAMFFW4MoveType@@HE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMovementCost@@YAMFFW4MoveType@@HE@Z$0
__ehfuncinfo$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetMovementCost@@YAMFFW4MoveType@@HE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetMovementCost@@YAMFFW4MoveType@@HE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_uit$2 = -136						; size = 12
$T3 = -124						; size = 8
$T4 = -116						; size = 8
$T5 = -108						; size = 8
$T6 = -100						; size = 8
tv543 = -92						; size = 4
tv535 = -88						; size = 4
tv527 = -84						; size = 4
tv519 = -80						; size = 4
$T7 = -76						; size = 4
$T8 = -72						; size = 4
_dist$9 = -68						; size = 4
_dy$10 = -64						; size = 4
_dx$11 = -60						; size = 4
_p$ = -56						; size = 4
_mult$ = -52						; size = 4
_opt$ = -48						; size = 4
_u$12 = -44						; size = 4
_cost$ = -40						; size = 4
_n$ = -36						; size = 4
_uy$13 = -32						; size = 2
_ux$14 = -28						; size = 2
_nx$15 = -24						; size = 2
_ny$16 = -20						; size = 2
_assignedEng$17 = -14					; size = 1
_owner$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_o$ = 8							; size = 4
_t$ = 12						; size = 4
_neighbor$ = 16						; size = 4
_type$ = 20						; size = 4
_team$ = 24						; size = 1
_flags$ = 28						; size = 4
?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z PROC ; GetObjectiveMovementCost

; 551  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 552  : 	Objective		n,p;
; 553  : 	costtype		cost,opt,mult = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mult$[ebp], xmm0

; 554  : 	Team			owner;
; 555  : 
; 556  : 	n = o->GetNeighbor(neighbor);

	mov	eax, DWORD PTR _neighbor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _n$[ebp], eax

; 557  : 	if (n)

	cmp	DWORD PTR _n$[ebp], 0
	je	$LN37@GetObjecti

; 558  : 		{
; 559  : 		owner = (Team)n->GetTeam();

	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _owner$[ebp], al

; 560  : 		// Check for allowable movement
; 561  : 		if (!GetRoE(team,owner,ROE_GROUND_MOVE))

	push	2
	movzx	ecx, BYTE PTR _owner$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _team$[ebp]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN36@GetObjecti

; 562  : 			return 255.0F;

	fld	DWORD PTR __real@437f0000
	jmp	$LN38@GetObjecti
$LN36@GetObjecti:

; 563  : 		// Check for enemy movement
; 564  : 		if (!(flags & PATH_BASIC) && GetRoE(team,owner,ROE_GROUND_FIRE))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 64					; 00000040H
	jne	$LN25@GetObjecti
	push	1
	movzx	ecx, BYTE PTR _owner$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _team$[ebp]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN25@GetObjecti

; 565  : 			{
; 566  : 			if (flags & PATH_ENEMYOK)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	$LN34@GetObjecti

; 567  : 				{
; 568  : 				// Double cost if ENEMYCOST is set
; 569  : 				mult = 2.0F;		

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _mult$[ebp], xmm0

; 570  : 				// Not allowed under certain circumstances:
; 571  : 				if (n == t)

	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _t$[ebp]
	jne	SHORT $LN33@GetObjecti
	jmp	$LN26@GetObjecti
$LN33@GetObjecti:

; 572  : 					;		// This is ok.
; 573  : 				else if (n->IsSecondary())

	mov	ecx, DWORD PTR _n$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN31@GetObjecti

; 574  : //					return 255.0F;
; 575  : 					mult = 4.0F;

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _mult$[ebp], xmm0
	jmp	SHORT $LN26@GetObjecti
$LN31@GetObjecti:

; 576  : 				else if (!t)

	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN29@GetObjecti

; 577  : 					return 255.0F;

	fld	DWORD PTR __real@437f0000
	jmp	$LN38@GetObjecti
	jmp	SHORT $LN26@GetObjecti
$LN29@GetObjecti:

; 578  : 				else if (n->GetObjectiveParentID() != t->Id())

	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _t$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ ; ObjectiveClass::GetObjectiveParentID
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@GetObjecti

; 579  : 					{
; 580  : 					p = n->GetObjectiveParent();

	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _p$[ebp], eax

; 581  : 					if (p && p->GetTeam() != team)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN26@GetObjecti
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	movzx	ecx, BYTE PTR _team$[ebp]
	cmp	eax, ecx
	je	SHORT $LN26@GetObjecti

; 582  : //						return 255.0F;
; 583  : 						mult = 4.0F;

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _mult$[ebp], xmm0
$LN26@GetObjecti:

; 584  : 					}
; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN25@GetObjecti
$LN34@GetObjecti:

; 587  : 				return 255.0F;

	fld	DWORD PTR __real@437f0000
	jmp	$LN38@GetObjecti
$LN25@GetObjecti:

; 588  : 			}
; 589  : 		// Check if road movement is allowed
; 590  : 		if (flags & PATH_ROADOK)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 1
	je	SHORT $LN24@GetObjecti

; 591  : 			type = NoMove;				// KCK: I'm using the no-move slot for road movement costs!

	mov	DWORD PTR _type$[ebp], 0
$LN24@GetObjecti:

; 592  : 		if (flags & PATH_RAILOK)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2
	je	SHORT $LN23@GetObjecti

; 593  : 			type = Rail;

	mov	DWORD PTR _type$[ebp], 7
$LN23@GetObjecti:

; 594  : 		cost = o->GetNeighborCost(neighbor,type);

	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _neighbor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ; ObjectiveClass::GetNeighborCost
	fstp	DWORD PTR _cost$[ebp]

; 595  : 		if (flags & PATH_ENEMYCOST && cost < 255.0F)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8
	je	SHORT $LN21@GetObjecti
	movss	xmm0, DWORD PTR __real@437f0000
	comiss	xmm0, DWORD PTR _cost$[ebp]
	jbe	SHORT $LN21@GetObjecti

; 596  : 			{
; 597  : 			cost *= mult;

	movss	xmm0, DWORD PTR _cost$[ebp]
	mulss	xmm0, DWORD PTR _mult$[ebp]
	movss	DWORD PTR _cost$[ebp], xmm0

; 598  : 			if (cost > 254.0F)

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR __real@437e0000
	jbe	SHORT $LN21@GetObjecti

; 599  : 				cost = 254.0F;

	movss	xmm0, DWORD PTR __real@437e0000
	movss	DWORD PTR _cost$[ebp], xmm0
$LN21@GetObjecti:

; 600  : 			}
; 601  : 		// RV - Biker - Search for engineers then build pontoon bridge
; 602  : 		if ((MOVE_GROUND(type) || type == NoMove) && n->GetType() == TYPE_BRIDGE && !n->GetObjectiveStatus() && !(flags & PATH_ENGINEER)) 

	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN19@GetObjecti
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN19@GetObjecti
	cmp	DWORD PTR _type$[ebp], 3
	je	SHORT $LN19@GetObjecti
	cmp	DWORD PTR _type$[ebp], 0
	jne	$LN20@GetObjecti
$LN19@GetObjecti:
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 6
	jne	$LN20@GetObjecti
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	test	edx, edx
	jne	$LN20@GetObjecti
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	jne	$LN20@GetObjecti

; 603  : 			{
; 604  : 			// Bridge is broke, can't go here.
; 605  : 			// But let's send engineers, if we havn't already
; 606  : 			//GridIndex		ox,oy;
; 607  : 			//o->GetLocation(&ox,&oy);
; 608  : 
; 609  : 			// RV - Biker - Loop through ground units to find engineer battalion assigned for repair
; 610  : 			VuListIterator	uit(AllUnitList);

	mov	ecx, DWORD PTR ?AllUnitList@@3PAVVuLinkedList@@A ; AllUnitList
	push	ecx
	lea	ecx, DWORD PTR _uit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 611  : 			Unit u = GetFirstUnit(&uit);

	lea	edx, DWORD PTR _uit$2[ebp]
	push	edx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$12[ebp], eax

; 612  : 			GridIndex ux = 0, uy = 0;

	xor	eax, eax
	mov	WORD PTR _ux$14[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _uy$13[ebp], cx

; 613  : 			GridIndex nx = 0, ny = 0;

	xor	edx, edx
	mov	WORD PTR _nx$15[ebp], dx
	xor	eax, eax
	mov	WORD PTR _ny$16[ebp], ax

; 614  : 			bool assignedEng = false;

	mov	BYTE PTR _assignedEng$17[ebp], 0

; 615  : 
; 616  : 			n->GetLocation(&nx,&ny);

	lea	ecx, DWORD PTR _ny$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _nx$15[ebp]
	push	edx
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN41@GetObjecti:

; 617  : 
; 618  : 			while (u) 

	cmp	DWORD PTR _u$12[ebp], 0
	je	$LN17@GetObjecti

; 619  : 			{
; 620  : 				if (u->IsBrigade() || u->GetDomain() != DOMAIN_LAND || u->GetTeam() != o->GetTeam()) 

	mov	eax, DWORD PTR _u$12[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$12[ebp]
	mov	eax, DWORD PTR [edx+244]
	call	eax
	test	eax, eax
	jne	SHORT $LN15@GetObjecti
	mov	ecx, DWORD PTR _u$12[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN15@GetObjecti
	mov	edx, DWORD PTR _u$12[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$12[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN16@GetObjecti
$LN15@GetObjecti:

; 621  : 				{
; 622  : 					u = GetNextUnit(&uit);

	lea	edx, DWORD PTR _uit$2[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$12[ebp], eax

; 623  : 					continue;

	jmp	SHORT $LN41@GetObjecti
$LN16@GetObjecti:

; 624  : 				}
; 625  : 
; 626  : 				u->GetLocation(&ux, &uy);

	lea	eax, DWORD PTR _uy$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _ux$14[ebp]
	push	ecx
	mov	ecx, DWORD PTR _u$12[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 627  : 				float dx = float(ux-nx);

	movsx	edx, WORD PTR _ux$14[ebp]
	movsx	eax, WORD PTR _nx$15[ebp]
	sub	edx, eax
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _dx$11[ebp], xmm0

; 628  : 				float dy = float(uy-ny);

	movsx	ecx, WORD PTR _uy$13[ebp]
	movsx	edx, WORD PTR _ny$16[ebp]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _dy$10[ebp], xmm0

; 629  : 
; 630  : 				float dist = sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$11[ebp]
	mulss	xmm0, DWORD PTR _dx$11[ebp]
	movss	xmm1, DWORD PTR _dy$10[ebp]
	mulss	xmm1, DWORD PTR _dy$10[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$9[ebp]

; 631  : 
; 632  : 				// RV - Biker - Check for engineer type maybe we need some more check
; 633  : 				if (u->GetSType() == STYPE_UNIT_ENGINEER || u->GetSType() == STYPE_WHEELED_ENGINEER) 

	mov	ecx, DWORD PTR _u$12[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 5
	je	SHORT $LN13@GetObjecti
	mov	ecx, DWORD PTR _u$12[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN12@GetObjecti
$LN13@GetObjecti:

; 634  : 				{
; 635  : 					if (dist <= 1.0f && u->GetTeam() == n->GetTeam()) 

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _dist$9[ebp]
	jb	SHORT $LN12@GetObjecti
	mov	edx, DWORD PTR _u$12[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$12[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN12@GetObjecti

; 636  : 					{
; 637  : 						assignedEng = true;

	mov	BYTE PTR _assignedEng$17[ebp], 1

; 638  : 						break;

	jmp	SHORT $LN17@GetObjecti
$LN12@GetObjecti:

; 639  : 					}
; 640  : 				}
; 641  : 				u = GetNextUnit(&uit);

	lea	edx, DWORD PTR _uit$2[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$12[ebp], eax

; 642  : 			}

	jmp	$LN41@GetObjecti
$LN17@GetObjecti:

; 643  : 
; 644  : 			// RV - Biker - We already have engineers here no need to send message	
; 645  : 			if (assignedEng) 

	movzx	eax, BYTE PTR _assignedEng$17[ebp]
	test	eax, eax
	je	SHORT $LN11@GetObjecti

; 646  : 			{
; 647  : 				return 5.0f;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR $T8[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	fld	DWORD PTR $T8[ebp]
	jmp	$LN38@GetObjecti

; 648  : 			}
; 649  : 			else 

	jmp	SHORT $LN10@GetObjecti
$LN11@GetObjecti:

; 650  : 			{
; 651  : 				//TeamInfo[moveTeam]->gtm->SendGTMMessage(o->Id(),FalconGndTaskingMessage::gtmEngineerRequest,ox,oy,o->Id());
; 652  : 				TeamInfo[moveTeam]->gtm->SendGTMMessage(n->Id(),FalconGndTaskingMessage::gtmEngineerRequest,nx,ny,n->Id());

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _n$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	movzx	ecx, WORD PTR _ny$16[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$15[ebp]
	push	edx
	push	1
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR ?moveTeam@@3HA		; moveTeam
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	ecx, DWORD PTR [ecx+880]
	call	?SendGTMMessage@GroundTaskingManagerClass@@QAEXVVU_ID@@FFF0@Z ; GroundTaskingManagerClass::SendGTMMessage

; 653  : 			return 255.0F;

	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T7[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	fld	DWORD PTR $T7[ebp]
	jmp	$LN38@GetObjecti
$LN10@GetObjecti:

; 654  : 			}
; 655  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 656  : 		else

	jmp	SHORT $LN5@GetObjecti
$LN20@GetObjecti:

; 657  : 			{
; 658  : 			// Check for ground movement options
; 659  : 			if (flags & PATH_ROADOK)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 1
	je	SHORT $LN7@GetObjecti

; 660  : 				{
; 661  : 				opt = o->GetNeighborCost(neighbor,NoMove) * mult;

	push	0
	mov	eax, DWORD PTR _neighbor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ; ObjectiveClass::GetNeighborCost
	fstp	DWORD PTR tv519[ebp]
	movss	xmm0, DWORD PTR tv519[ebp]
	mulss	xmm0, DWORD PTR _mult$[ebp]
	movss	DWORD PTR _opt$[ebp], xmm0

; 662  : 				if (opt < cost)

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR _opt$[ebp]
	jbe	SHORT $LN7@GetObjecti

; 663  : 					cost = opt;

	movss	xmm0, DWORD PTR _opt$[ebp]
	movss	DWORD PTR _cost$[ebp], xmm0
$LN7@GetObjecti:

; 664  : 				}
; 665  : 			if (flags & PATH_RAILOK)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN5@GetObjecti

; 666  : 				{
; 667  : 				opt = o->GetNeighborCost(neighbor,Rail) * mult;

	push	7
	mov	edx, DWORD PTR _neighbor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ; ObjectiveClass::GetNeighborCost
	fstp	DWORD PTR tv527[ebp]
	movss	xmm0, DWORD PTR tv527[ebp]
	mulss	xmm0, DWORD PTR _mult$[ebp]
	movss	DWORD PTR _opt$[ebp], xmm0

; 668  : 				if (opt < cost)

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR _opt$[ebp]
	jbe	SHORT $LN5@GetObjecti

; 669  : 					cost = opt;

	movss	xmm0, DWORD PTR _opt$[ebp]
	movss	DWORD PTR _cost$[ebp], xmm0
$LN5@GetObjecti:

; 670  : 				}
; 671  : 			}
; 672  : 		if (flags & PATH_AIRBORNE)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN3@GetObjecti

; 673  : 			{
; 674  : 			opt = o->GetNeighborCost(neighbor,LowAir) * mult;

	push	4
	mov	ecx, DWORD PTR _neighbor$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ; ObjectiveClass::GetNeighborCost
	fstp	DWORD PTR tv535[ebp]
	movss	xmm0, DWORD PTR tv535[ebp]
	mulss	xmm0, DWORD PTR _mult$[ebp]
	movss	DWORD PTR _opt$[ebp], xmm0

; 675  : 			if (opt < cost)

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR _opt$[ebp]
	jbe	SHORT $LN3@GetObjecti

; 676  : 				cost = opt;

	movss	xmm0, DWORD PTR _opt$[ebp]
	movss	DWORD PTR _cost$[ebp], xmm0
$LN3@GetObjecti:

; 677  : 			}
; 678  : 		if (flags & PATH_MARINE)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN1@GetObjecti

; 679  : 			{
; 680  : 			opt = o->GetNeighborCost(neighbor,Naval) * mult;

	push	6
	mov	eax, DWORD PTR _neighbor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ; ObjectiveClass::GetNeighborCost
	fstp	DWORD PTR tv543[ebp]
	movss	xmm0, DWORD PTR tv543[ebp]
	mulss	xmm0, DWORD PTR _mult$[ebp]
	movss	DWORD PTR _opt$[ebp], xmm0

; 681  : 			if (opt < cost)

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR _opt$[ebp]
	jbe	SHORT $LN1@GetObjecti

; 682  : 				cost = opt;

	movss	xmm0, DWORD PTR _opt$[ebp]
	movss	DWORD PTR _cost$[ebp], xmm0
$LN1@GetObjecti:

; 683  : 			}
; 684  : 		return cost;

	fld	DWORD PTR _cost$[ebp]
	jmp	SHORT $LN38@GetObjecti
$LN37@GetObjecti:

; 685  : 		}
; 686  : 	return (costtype)(255);

	fld	DWORD PTR __real@437f0000
$LN38@GetObjecti:

; 687  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z$0:
	lea	ecx, DWORD PTR _uit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z ENDP ; GetObjectiveMovementCost
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
$T2 = -108						; size = 4
tv215 = -104						; size = 4
$T3 = -100						; size = 4
$T4 = -96						; size = 4
tv219 = -92						; size = 4
$T5 = -88						; size = 4
_o$ = -84						; size = 4
_flags$ = -80						; size = 4
_path$ = -76						; size = 60
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_orders$ = 12						; size = 4
_x$ = 16						; size = 2
_y$ = 20						; size = 2
_t$ = 24						; size = 4
?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z PROC ; CostToArrive

; 248  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 249  : 	Objective		o;
; 250  : 	PathClass		path;

	lea	ecx, DWORD PTR _path$[ebp]
	call	??0PathClass@@QAE@XZ			; PathClass::PathClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 251  : 	int				flags = 0;

	mov	DWORD PTR _flags$[ebp], 0

; 252  : 
; 253  : 	// Movement options
; 254  : 	if (GetGroundRole(orders) == GRO_ATTACK)

	mov	eax, DWORD PTR _orders$[ebp]
	push	eax
	call	?GetGroundRole@@YAHH@Z			; GetGroundRole
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN7@CostToArri

; 255  : 		flags |= PATH_ENEMYOK; // | PATH_ENEMYCOST;

	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, 4
	mov	DWORD PTR _flags$[ebp], ecx
$LN7@CostToArri:

; 256  : 	if (u->GetSType() == STYPE_UNIT_AIRMOBILE)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN6@CostToArri

; 257  : 		flags |= PATH_AIRBORNE;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _flags$[ebp], eax
$LN6@CostToArri:

; 258  : 	if (u->GetSType() == STYPE_UNIT_MARINE)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 8
	jne	SHORT $LN5@CostToArri

; 259  : 		flags |= PATH_MARINE;

	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, 32					; 00000020H
	mov	DWORD PTR _flags$[ebp], edx
$LN5@CostToArri:

; 260  : 
; 261  : 	o = FindNearestObjective (x,y,NULL);

	push	0
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$[ebp], eax

; 262  : 	if (!o || !t || o==t)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN3@CostToArri
	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN3@CostToArri
	mov	edx, DWORD PTR _o$[ebp]
	cmp	edx, DWORD PTR _t$[ebp]
	jne	SHORT $LN4@CostToArri
$LN3@CostToArri:

; 263  : 		return 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T4[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1PathClass@@QAE@XZ
	fld	DWORD PTR $T4[ebp]
	jmp	$LN8@CostToArri
$LN4@CostToArri:

; 264  : 
; 265  : 	moveTeam = u->GetTeam();

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	DWORD PTR ?moveTeam@@3HA, ecx		; moveTeam

; 266  : 	moveType = u->GetMovementType();

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+228]
	call	edx
	mov	DWORD PTR ?moveType@@3HA, eax		; moveType

; 267  : 	moveFlags = flags;

	mov	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR ?moveFlags@@3HA, eax		; moveFlags

; 268  : 
; 269  : 	if (moveType == NoMove)

	cmp	DWORD PTR ?moveType@@3HA, 0		; moveType
	jne	SHORT $LN2@CostToArri

; 270  : 		return -1;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1PathClass@@QAE@XZ
	fld	DWORD PTR $T2[ebp]
	jmp	$LN8@CostToArri
$LN2@CostToArri:

; 271  : 
; 272  : #ifdef CAMPTOOL
; 273  : 	if (ShowSearch)
; 274  : //		DColor = (DColor+1)%16;
; 275  : DColor = Blue;
; 276  : #endif
; 277  : 
; 278  : 	if (ASD->ASSearch(&path, o, t, GetNeighborObject, RETURN_EMPTY_ON_FAIL, OBJ_GROUND_PATH_MAX_SEARCH, (costtype) OBJ_GROUND_PATH_MAX_COST) < 1)

	movsx	ecx, WORD PTR ?OBJ_GROUND_PATH_MAX_COST@@3FA ; OBJ_GROUND_PATH_MAX_COST
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movsx	edx, WORD PTR ?OBJ_GROUND_PATH_MAX_SEARCH@@3FA ; OBJ_GROUND_PATH_MAX_SEARCH
	push	edx
	push	0
	push	OFFSET ?GetNeighborObject@@YAXPAVAS_DataClass@@PAX1@Z ; GetNeighborObject
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?ASD@@3PAVAS_DataClass@@A ; ASD
	call	?ASSearch@AS_DataClass@@QAEHPAVBasePathClass@@PAX1P6AXPAV1@11@ZHHM@Z ; AS_DataClass::ASSearch
	cmp	eax, 1
	jge	SHORT $LN1@CostToArri

; 279  : 		return OBJ_GROUND_PATH_MAX_COST;

	movsx	eax, WORD PTR ?OBJ_GROUND_PATH_MAX_COST@@3FA ; OBJ_GROUND_PATH_MAX_COST
	cvtsi2ss xmm0, eax
	movss	DWORD PTR $T5[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1PathClass@@QAE@XZ
	fld	DWORD PTR $T5[ebp]
	jmp	SHORT $LN8@CostToArri
$LN1@CostToArri:

; 280  : 
; 281  : 	return path.GetCost() * 10.0f / u->GetMaxSpeed();

	lea	ecx, DWORD PTR _path$[ebp]
	call	?GetCost@BasePathClass@@QAEMXZ		; BasePathClass::GetCost
	fstp	DWORD PTR tv215[ebp]
	movss	xmm0, DWORD PTR tv215[ebp]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _u$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	call	?GetMaxSpeed@UnitClass@@QBEHXZ		; UnitClass::GetMaxSpeed
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv219[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR $T3[ebp], xmm1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1PathClass@@QAE@XZ
	fld	DWORD PTR $T3[ebp]
$LN8@CostToArri:

; 282  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z$0:
	lea	ecx, DWORD PTR _path$[ebp]
	jmp	??1PathClass@@QAE@XZ
__ehhandler$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CostToArrive@@YAMPAVUnitClass@@HFFPAVObjectiveClass@@@Z ENDP ; CostToArrive
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_left$ = -40						; size = 4
_n$ = -36						; size = 4
_t$ = -32						; size = 4
_o$ = -28						; size = 4
_cost$ = -24						; size = 4
_c$ = -20						; size = 4
_nx$ = -16						; size = 2
_ny$ = -12						; size = 2
_tx$ = -8						; size = 2
_ty$ = -4						; size = 2
_asd$ = 8						; size = 4
_ov$ = 12						; size = 4
_tv$ = 16						; size = 4
?GetNeighborObject@@YAXPAVAS_DataClass@@PAX1@Z PROC	; GetNeighborObject

; 690  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 691  : 	costtype    cost,left;
; 692  : 	int         c=0;

	mov	DWORD PTR _c$[ebp], 0

; 693  : 	Objective   n,o,t;             
; 694  : 	GridIndex   nx,ny,tx,ty;
; 695  : 
; 696  : 	o = (Objective)ov;

	mov	eax, DWORD PTR _ov$[ebp]
	mov	DWORD PTR _o$[ebp], eax

; 697  : 	t = (Objective)tv;

	mov	ecx, DWORD PTR _tv$[ebp]
	mov	DWORD PTR _t$[ebp], ecx

; 698  : 	t->GetLocation(&tx, &ty);

	lea	edx, DWORD PTR _ty$[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN7@GetNeighbo:

; 699  : 	while (c<o->static_data.links)

	mov	ecx, DWORD PTR _o$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	cmp	DWORD PTR _c$[ebp], edx
	jge	$LN6@GetNeighbo

; 700  : 		{
; 701  : 		cost = GetObjectiveMovementCost(o,t,c,(MoveType)moveType,(Team)moveTeam,moveFlags);

	mov	eax, DWORD PTR ?moveFlags@@3HA		; moveFlags
	push	eax
	movzx	ecx, BYTE PTR ?moveTeam@@3HA
	push	ecx
	mov	edx, DWORD PTR ?moveType@@3HA		; moveType
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z ; GetObjectiveMovementCost
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _cost$[ebp]

; 702  : 		if (cost < 255)

	movss	xmm0, DWORD PTR __real@437f0000
	comiss	xmm0, DWORD PTR _cost$[ebp]
	jbe	SHORT $LN5@GetNeighbo

; 703  : 			{
; 704  : 			n = o->GetNeighbor(c);

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _n$[ebp], eax

; 705  : 			n->GetLocation(&nx,&ny);

	lea	ecx, DWORD PTR _ny$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 706  : #ifdef CAMPTOOL
; 707  : 			if (ShowSearch)
; 708  : 				ShowLink (NULL, o, n, DColor);
; 709  : #endif
; 710  : 			left = Distance(nx,ny,tx,ty);

	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _left$[ebp]

; 711  : 			asd->ASFillNode(c, &cost, &left, (char)c, n);

	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	lea	eax, DWORD PTR _left$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cost$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode

; 712  : 			}
; 713  : 		else

	jmp	SHORT $LN4@GetNeighbo
$LN5@GetNeighbo:

; 714  : 			{
; 715  : 			asd->ASFillNode(c, &cost, &cost, -1, NULL);

	push	0
	push	-1
	lea	eax, DWORD PTR _cost$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cost$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode
$LN4@GetNeighbo:

; 716  : 			}
; 717  : 		c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax

; 718  : 		}

	jmp	$LN7@GetNeighbo
$LN6@GetNeighbo:

; 719  : 	for (;c<MAX_NEIGHBORS;c++)

	jmp	SHORT $LN3@GetNeighbo
$LN2@GetNeighbo:
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN3@GetNeighbo:
	cmp	DWORD PTR _c$[ebp], 8
	jge	SHORT $LN1@GetNeighbo

; 720  : 		{
; 721  : 		asd->ASFillNode(c, &cost, &cost, -1, NULL);

	push	0
	push	-1
	lea	edx, DWORD PTR _cost$[ebp]
	push	edx
	lea	eax, DWORD PTR _cost$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode

; 722  : 		continue;

	jmp	SHORT $LN2@GetNeighbo

; 723  : 		}

	jmp	SHORT $LN2@GetNeighbo
$LN1@GetNeighbo:

; 724  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNeighborObject@@YAXPAVAS_DataClass@@PAX1@Z ENDP	; GetNeighborObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_n$ = -56						; size = 4
_left$ = -52						; size = 4
_leftmod$ = -48						; size = 4
_step$ = -44						; size = 4
_cost$ = -40						; size = 4
_hcost$1 = -36						; size = 4
_tcost$2 = -32						; size = 4
_d$ = -28						; size = 4
_oy$ = -24						; size = 2
_ox$ = -20						; size = 2
_ty$ = -16						; size = 2
_tx$ = -12						; size = 2
_x$ = -8						; size = 2
_y$ = -4						; size = 2
_asd$ = 8						; size = 4
_o$ = 12						; size = 4
_t$ = 16						; size = 4
?GetNeighborCoord@@YAXPAVAS_DataClass@@PAX1@Z PROC	; GetNeighborCoord

; 439  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 440  : 	int         d,step=1;

	mov	DWORD PTR _step$[ebp], 1

; 441  : 	GridIndex   ox,oy,tx,ty,x,y;
; 442  : 	costtype    cost,left;
; 443  : 	void*       n;
; 444  : 	float		leftmod=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _leftmod$[ebp], xmm0

; 445  : 
; 446  : 	UnpackXY(o, &ox, &oy);

	lea	eax, DWORD PTR _oy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ox$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	?UnpackXY@@YAXPAXPAF1@Z			; UnpackXY
	add	esp, 12					; 0000000cH

; 447  : 	UnpackXY(t, &tx, &ty);

	lea	eax, DWORD PTR _ty$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	call	?UnpackXY@@YAXPAXPAF1@Z			; UnpackXY
	add	esp, 12					; 0000000cH

; 448  : 	if (QuickSearch)

	cmp	DWORD PTR ?QuickSearch@@3HA, 0		; QuickSearch
	je	SHORT $LN26@GetNeighbo

; 449  : 		step = QuickSearch;

	mov	eax, DWORD PTR ?QuickSearch@@3HA	; QuickSearch
	mov	DWORD PTR _step$[ebp], eax
$LN26@GetNeighbo:

; 450  : 	if (MOVE_AIR(moveType))

	cmp	DWORD PTR ?moveType@@3HA, 5		; moveType
	je	SHORT $LN24@GetNeighbo
	cmp	DWORD PTR ?moveType@@3HA, 4		; moveType
	jne	SHORT $LN25@GetNeighbo
$LN24@GetNeighbo:

; 451  : 		leftmod = 4.0f;

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _leftmod$[ebp], xmm0
	jmp	SHORT $LN20@GetNeighbo
$LN25@GetNeighbo:

; 452  : 	else if (MOVE_GROUND(moveType) && moveFlags & PATH_ROADOK)

	cmp	DWORD PTR ?moveType@@3HA, 1		; moveType
	je	SHORT $LN21@GetNeighbo
	cmp	DWORD PTR ?moveType@@3HA, 2		; moveType
	je	SHORT $LN21@GetNeighbo
	cmp	DWORD PTR ?moveType@@3HA, 3		; moveType
	jne	SHORT $LN22@GetNeighbo
$LN21@GetNeighbo:
	mov	ecx, DWORD PTR ?moveFlags@@3HA		; moveFlags
	and	ecx, 1
	je	SHORT $LN22@GetNeighbo

; 453  : 		leftmod = 0.75f;

	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _leftmod$[ebp], xmm0

; 454  : 	else

	jmp	SHORT $LN20@GetNeighbo
$LN22@GetNeighbo:

; 455  : 		leftmod = 3.0f;

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _leftmod$[ebp], xmm0
$LN20@GetNeighbo:

; 456  : 
; 457  : #ifdef CAMPTOOL
; 458  : 	if (ShowSearch && MOVE_AIR(moveType))
; 459  : 		ShowWP (NULL, ox, oy, DColor);
; 460  : #endif
; 461  : 
; 462  : 	for (d=0; d<Here; d++)

	mov	DWORD PTR _d$[ebp], 0
	jmp	SHORT $LN19@GetNeighbo
$LN18@GetNeighbo:
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, 1
	mov	DWORD PTR _d$[ebp], edx
$LN19@GetNeighbo:
	cmp	DWORD PTR _d$[ebp], 8
	jge	$LN17@GetNeighbo

; 463  : 		{
; 464  : 		x = (GridIndex)(ox + step*dx[d]);

	movsx	eax, WORD PTR _ox$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	movsx	edx, WORD PTR ?dx@@3PAFA[ecx*2]
	imul	edx, DWORD PTR _step$[ebp]
	add	eax, edx
	mov	WORD PTR _x$[ebp], ax

; 465  : 		y = (GridIndex)(oy + step*dy[d]);

	movsx	eax, WORD PTR _oy$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	movsx	edx, WORD PTR ?dy@@3PAFA[ecx*2]
	imul	edx, DWORD PTR _step$[ebp]
	add	eax, edx
	mov	WORD PTR _y$[ebp], ax

; 466  : 
; 467  : 		if (x < 0 || x >= Map_Max_X || y < 0 || y >= Map_Max_Y)

	movsx	eax, WORD PTR _x$[ebp]
	test	eax, eax
	jl	SHORT $LN15@GetNeighbo
	movsx	ecx, WORD PTR _x$[ebp]
	movsx	edx, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	cmp	ecx, edx
	jge	SHORT $LN15@GetNeighbo
	movsx	eax, WORD PTR _y$[ebp]
	test	eax, eax
	jl	SHORT $LN15@GetNeighbo
	movsx	ecx, WORD PTR _y$[ebp]
	movsx	edx, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	cmp	ecx, edx
	jl	SHORT $LN16@GetNeighbo
$LN15@GetNeighbo:

; 468  : 			{
; 469  : 			asd->ASFillNode(d, &cost, &cost, -1, NULL); 

	push	0
	push	-1
	lea	eax, DWORD PTR _cost$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cost$[ebp]
	push	ecx
	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode

; 470  : 			continue;

	jmp	$LN18@GetNeighbo
$LN16@GetNeighbo:

; 471  : 			}
; 472  : 
; 473  : 		cost = GetMovementCost(x,y,(MoveType)moveType,moveFlags,(CampaignHeading)d);

	movzx	eax, BYTE PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?moveFlags@@3HA		; moveFlags
	push	ecx
	mov	edx, DWORD PTR ?moveType@@3HA		; moveType
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetMovementCost@@YAMFFW4MoveType@@HE@Z	; GetMovementCost
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _cost$[ebp]

; 474  : 		if (MOVE_AIR(moveType) && !(moveFlags & PATH_BASIC))

	cmp	DWORD PTR ?moveType@@3HA, 5		; moveType
	je	SHORT $LN13@GetNeighbo
	cmp	DWORD PTR ?moveType@@3HA, 4		; moveType
	jne	$LN14@GetNeighbo
$LN13@GetNeighbo:
	mov	edx, DWORD PTR ?moveFlags@@3HA		; moveFlags
	and	edx, 64					; 00000040H
	jne	$LN14@GetNeighbo

; 475  : 			{
; 476  : 			// Add cost for air threats
; 477  : 			// Essentially, tcost is 0-100. This translates into # of km out of our
; 478  : 			// way we're willing to go to avoid this threat.
; 479  : 			costtype hcost=0.0F,tcost;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hcost$1[ebp], xmm0

; 480  : #ifdef DEBUG
; 481  : 			static float max_dif=-100.0F,min_dif=100.0F;
; 482  : #endif
; 483  : 			
; 484  : 			tcost = (float)ScoreThreatFast(x, y, moveAlt, (Team)moveTeam);

	movzx	eax, BYTE PTR ?moveTeam@@3HA
	push	eax
	mov	ecx, DWORD PTR ?moveAlt@@3HA		; moveAlt
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _tcost$2[ebp], xmm0

; 485  : 			if (tcost > hcost)

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	comiss	xmm0, DWORD PTR _hcost$1[ebp]
	jbe	SHORT $LN12@GetNeighbo

; 486  : 				hcost = tcost;

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	movss	DWORD PTR _hcost$1[ebp], xmm0
$LN12@GetNeighbo:

; 487  : 			tcost = (float)ScoreThreatFast((GridIndex)(x-MAP_RATIO), y, moveAlt, (Team)moveTeam);

	movzx	ecx, BYTE PTR ?moveTeam@@3HA
	push	ecx
	mov	edx, DWORD PTR ?moveAlt@@3HA		; moveAlt
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movsx	ecx, WORD PTR _x$[ebp]
	sub	ecx, 6
	push	ecx
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _tcost$2[ebp], xmm0

; 488  : 			if (tcost > hcost)

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	comiss	xmm0, DWORD PTR _hcost$1[ebp]
	jbe	SHORT $LN11@GetNeighbo

; 489  : 				hcost = tcost;

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	movss	DWORD PTR _hcost$1[ebp], xmm0
$LN11@GetNeighbo:

; 490  : 			tcost = (float)ScoreThreatFast(x, (GridIndex)(y-MAP_RATIO), moveAlt, (Team)moveTeam);

	movzx	edx, BYTE PTR ?moveTeam@@3HA
	push	edx
	mov	eax, DWORD PTR ?moveAlt@@3HA		; moveAlt
	push	eax
	movsx	ecx, WORD PTR _y$[ebp]
	sub	ecx, 6
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _tcost$2[ebp], xmm0

; 491  : 			if (tcost > hcost)

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	comiss	xmm0, DWORD PTR _hcost$1[ebp]
	jbe	SHORT $LN10@GetNeighbo

; 492  : 				hcost = tcost;

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	movss	DWORD PTR _hcost$1[ebp], xmm0
$LN10@GetNeighbo:

; 493  : 			tcost = (float)ScoreThreatFast((GridIndex)(x+MAP_RATIO), y, moveAlt, (Team)moveTeam);

	movzx	eax, BYTE PTR ?moveTeam@@3HA
	push	eax
	mov	ecx, DWORD PTR ?moveAlt@@3HA		; moveAlt
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movsx	eax, WORD PTR _x$[ebp]
	add	eax, 6
	push	eax
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _tcost$2[ebp], xmm0

; 494  : 			if (tcost > hcost)

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	comiss	xmm0, DWORD PTR _hcost$1[ebp]
	jbe	SHORT $LN9@GetNeighbo

; 495  : 				hcost = tcost;

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	movss	DWORD PTR _hcost$1[ebp], xmm0
$LN9@GetNeighbo:

; 496  : 			tcost = (float)ScoreThreatFast(x, (GridIndex)(y+MAP_RATIO), moveAlt, (Team)moveTeam);

	movzx	ecx, BYTE PTR ?moveTeam@@3HA
	push	ecx
	mov	edx, DWORD PTR ?moveAlt@@3HA		; moveAlt
	push	edx
	movsx	eax, WORD PTR _y$[ebp]
	add	eax, 6
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?ScoreThreatFast@@YAHFFHE@Z		; ScoreThreatFast
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _tcost$2[ebp], xmm0

; 497  : 			if (tcost > hcost)

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	comiss	xmm0, DWORD PTR _hcost$1[ebp]
	jbe	SHORT $LN8@GetNeighbo

; 498  : 				hcost = tcost;

	movss	xmm0, DWORD PTR _tcost$2[ebp]
	movss	DWORD PTR _hcost$1[ebp], xmm0
$LN8@GetNeighbo:

; 499  : 
; 500  : #ifdef DEBUG
; 501  : 			tcost = (float)ScoreThreatFast(x, y, moveAlt, moveTeam)
; 502  : 				+ (float)ScoreThreatFast((GridIndex)(x-MAP_RATIO), y, moveAlt, (Team)moveTeam)
; 503  : 				+ (float)ScoreThreatFast(x, (GridIndex)(y-MAP_RATIO), moveAlt, (Team)moveTeam)
; 504  : 				+ (float)ScoreThreatFast((GridIndex)(x+MAP_RATIO), y, moveAlt, (Team)moveTeam)
; 505  : 				+ (float)ScoreThreatFast(x, (GridIndex)(y+MAP_RATIO), moveAlt, (Team)moveTeam);
; 506  : 			tcost /= 5.0F;
; 507  : 			if (hcost - tcost > max_dif)
; 508  : 				max_dif = hcost - tcost;
; 509  : 			if (hcost - tcost < min_dif)
; 510  : 				min_dif = hcost - tcost;
; 511  : #endif
; 512  : 			
; 513  : 			if (hcost > 120.0F)

	movss	xmm0, DWORD PTR _hcost$1[ebp]
	comiss	xmm0, DWORD PTR __real@42f00000
	jbe	SHORT $LN7@GetNeighbo

; 514  : 				{
; 515  : 				// Illegal Move
; 516  : 				asd->ASFillNode(d, &cost, &cost, -1, NULL);

	push	0
	push	-1
	lea	edx, DWORD PTR _cost$[ebp]
	push	edx
	lea	eax, DWORD PTR _cost$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode

; 517  : 				continue;

	jmp	$LN18@GetNeighbo
$LN7@GetNeighbo:

; 518  : 				}
; 519  : 			cost = cost * step + hcost/2.0F;

	cvtsi2ss xmm0, DWORD PTR _step$[ebp]
	mulss	xmm0, DWORD PTR _cost$[ebp]
	movss	xmm1, DWORD PTR _hcost$1[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR _cost$[ebp], xmm0

; 520  : 			}
; 521  : 		else

	jmp	SHORT $LN5@GetNeighbo
$LN14@GetNeighbo:

; 522  : 			{
; 523  : 			// Just check for illegal moves
; 524  : 			ShiAssert (step == 1);
; 525  : 			if (cost>MAX_COST)

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN5@GetNeighbo

; 526  : 				{
; 527  : 				asd->ASFillNode(d, &cost, &cost, -1, NULL);

	push	0
	push	-1
	lea	edx, DWORD PTR _cost$[ebp]
	push	edx
	lea	eax, DWORD PTR _cost$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode

; 528  : 				continue;

	jmp	$LN18@GetNeighbo
$LN5@GetNeighbo:

; 529  : 				}
; 530  : 			}
; 531  : 
; 532  : 		left = Distance(x,y,tx,ty);

	movzx	edx, WORD PTR _ty$[ebp]
	push	edx
	movzx	eax, WORD PTR _tx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _left$[ebp]

; 533  : 		if (left < QuickSearch)

	cvtsi2ss xmm0, DWORD PTR ?QuickSearch@@3HA	; QuickSearch
	comiss	xmm0, DWORD PTR _left$[ebp]
	jbe	SHORT $LN4@GetNeighbo

; 534  : 			{
; 535  : 			// This is close enough
; 536  : 			x = tx;

	mov	ax, WORD PTR _tx$[ebp]
	mov	WORD PTR _x$[ebp], ax

; 537  : 			y = ty;

	mov	cx, WORD PTR _ty$[ebp]
	mov	WORD PTR _y$[ebp], cx
$LN4@GetNeighbo:

; 538  : 			}
; 539  : 		n = PackXY(x, y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?PackXY@@YAPAXFF@Z			; PackXY
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax

; 540  : 		left *= leftmod;

	movss	xmm0, DWORD PTR _left$[ebp]
	mulss	xmm0, DWORD PTR _leftmod$[ebp]
	movss	DWORD PTR _left$[ebp], xmm0

; 541  : 		asd->ASFillNode(d, &cost, &left, (char)d, n);

	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _d$[ebp]
	push	edx
	lea	eax, DWORD PTR _left$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cost$[ebp]
	push	ecx
	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode

; 542  : 		}

	jmp	$LN18@GetNeighbo
$LN17@GetNeighbo:

; 543  : 	for (;d<MAX_NEIGHBORS;d++)

	jmp	SHORT $LN3@GetNeighbo
$LN2@GetNeighbo:
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 1
	mov	DWORD PTR _d$[ebp], eax
$LN3@GetNeighbo:
	cmp	DWORD PTR _d$[ebp], 8
	jge	SHORT $LN1@GetNeighbo

; 544  : 		{
; 545  : 		asd->ASFillNode(d, &cost, &cost, -1, NULL);

	push	0
	push	-1
	lea	ecx, DWORD PTR _cost$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cost$[ebp]
	push	edx
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _asd$[ebp]
	call	?ASFillNode@AS_DataClass@@QAEXHPAM0DPAX@Z ; AS_DataClass::ASFillNode

; 546  : 		continue;

	jmp	SHORT $LN2@GetNeighbo

; 547  : 		}

	jmp	SHORT $LN2@GetNeighbo
$LN1@GetNeighbo:

; 548  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNeighborCoord@@YAXPAVAS_DataClass@@PAX1@Z ENDP	; GetNeighborCoord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_ap$ = -264						; size = 4
_dbgBuffer$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_dbgFormat$ = 8						; size = 4
?debugprintf@@YAXPADZZ PROC				; debugprintf

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 31   :     char  dbgBuffer[256];
; 32   :     va_list ap;
; 33   : 
; 34   :     va_start(ap, dbgFormat);

	lea	eax, DWORD PTR _dbgFormat$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 35   : 
; 36   :     wvsprintf(dbgBuffer, dbgFormat, ap);

	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dbgFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _dbgBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__wvsprintfA@12

; 37   :     OutputDebugString(dbgBuffer);

	lea	ecx, DWORD PTR _dbgBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__OutputDebugStringA@4

; 38   : #ifdef DEBUGSTDOUTALSO
; 39   : 	printf(dbgBuffer);
; 40   : #endif
; 41   :     va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 42   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?debugprintf@@YAXPADZZ ENDP				; debugprintf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_uit$2 = -64						; size = 12
_dist$3 = -52						; size = 4
_dy$4 = -48						; size = 4
_dx$5 = -44						; size = 4
tv71 = -40						; size = 4
_u$6 = -36						; size = 4
_cost$ = -32						; size = 4
_o$ = -28						; size = 4
_uy$7 = -24						; size = 2
_ux$8 = -20						; size = 2
_assignedEng$9 = -13					; size = 1
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_move$ = 16						; size = 4
_flags$ = 20						; size = 4
_h$ = 24						; size = 1
?GetMovementCost@@YAMFFW4MoveType@@HE@Z PROC		; GetMovementCost

; 288  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetMovementCost@@YAMFFW4MoveType@@HE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 289  : 	float          cost;
; 290  : 	Objective		o;
; 291  : 
; 292  : 	cost = CostTable[GetCover(x,y)][move];

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	shl	eax, 5
	mov	edx, DWORD PTR _move$[ebp]
	movss	xmm0, DWORD PTR ?CostTable@@3PAY07MA[eax+edx*4]
	movss	DWORD PTR _cost$[ebp], xmm0

; 293  : 	switch (move)

	mov	eax, DWORD PTR _move$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 6
	ja	$LN2@GetMovemen
	mov	edx, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN40@GetMovemen[edx*4]
$LN32@GetMovemen:

; 294  : 		{
; 295  : 		case Foot:
; 296  :   		case Wheeled:
; 297  : 		case Tracked:
; 298  : 			if (GetRoad(x,y) && !(h & 0x01)) {

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetRoad@@YADFF@Z			; GetRoad
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	$LN16@GetMovemen
	movzx	eax, BYTE PTR _h$[ebp]
	and	eax, 1
	jne	$LN16@GetMovemen

; 299  : 				// It's a bridge or port, check if intact
; 300  : 				if (cost > MAX_COST) {

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	$LN30@GetMovemen

; 301  : 					o = FindNearestObjective(x,y,NULL);

	push	0
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$[ebp], eax

; 302  : 
; 303  : 					// RV - Biker - Loop through ground units to find engineer battalion assigned for repair
; 304  : 					VuListIterator	uit(AllUnitList);

	mov	eax, DWORD PTR ?AllUnitList@@3PAVVuLinkedList@@A ; AllUnitList
	push	eax
	lea	ecx, DWORD PTR _uit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 305  : 					Unit u = GetFirstUnit(&uit);

	lea	ecx, DWORD PTR _uit$2[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$6[ebp], eax

; 306  : 					GridIndex ux = 0, uy = 0;

	xor	edx, edx
	mov	WORD PTR _ux$8[ebp], dx
	xor	eax, eax
	mov	WORD PTR _uy$7[ebp], ax

; 307  : 					bool assignedEng = false;

	mov	BYTE PTR _assignedEng$9[ebp], 0
$LN38@GetMovemen:

; 308  : 
; 309  : 					while (u) {

	cmp	DWORD PTR _u$6[ebp], 0
	je	$LN28@GetMovemen

; 310  : 						if (u->IsBrigade() || u->GetDomain() != DOMAIN_LAND || u->GetTeam() != o->GetTeam()) {

	mov	ecx, DWORD PTR _u$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$6[ebp]
	mov	eax, DWORD PTR [edx+244]
	call	eax
	test	eax, eax
	jne	SHORT $LN26@GetMovemen
	mov	ecx, DWORD PTR _u$6[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN26@GetMovemen
	mov	edx, DWORD PTR _u$6[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$6[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN27@GetMovemen
$LN26@GetMovemen:

; 311  : 							u = GetNextUnit(&uit);

	lea	edx, DWORD PTR _uit$2[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$6[ebp], eax

; 312  : 							continue;

	jmp	SHORT $LN38@GetMovemen
$LN27@GetMovemen:

; 313  : 						}
; 314  : 
; 315  : 						u->GetLocation(&ux, &uy);

	lea	eax, DWORD PTR _uy$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _ux$8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _u$6[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 316  : 						float dx = float(ux-x);

	movsx	edx, WORD PTR _ux$8[ebp]
	movsx	eax, WORD PTR _x$[ebp]
	sub	edx, eax
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _dx$5[ebp], xmm0

; 317  : 						float dy = float(uy-y);

	movsx	ecx, WORD PTR _uy$7[ebp]
	movsx	edx, WORD PTR _y$[ebp]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _dy$4[ebp], xmm0

; 318  : 
; 319  : 						float dist = sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$5[ebp]
	mulss	xmm0, DWORD PTR _dx$5[ebp]
	movss	xmm1, DWORD PTR _dy$4[ebp]
	mulss	xmm1, DWORD PTR _dy$4[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$3[ebp]

; 320  : 
; 321  : 						// RV - Biker - Check for engineer type maybe we need some more check
; 322  : 						if (u->GetSType() == STYPE_UNIT_ENGINEER || u->GetSType() == STYPE_WHEELED_ENGINEER) {

	mov	ecx, DWORD PTR _u$6[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 5
	je	SHORT $LN24@GetMovemen
	mov	ecx, DWORD PTR _u$6[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN23@GetMovemen
$LN24@GetMovemen:

; 323  : 							if (dist <= 1.0f && u->GetTeam() == o->GetTeam()) {

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _dist$3[ebp]
	jb	SHORT $LN23@GetMovemen
	mov	edx, DWORD PTR _u$6[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$6[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN23@GetMovemen

; 324  : 								assignedEng = true;

	mov	BYTE PTR _assignedEng$9[ebp], 1

; 325  : 								break;

	jmp	SHORT $LN28@GetMovemen
$LN23@GetMovemen:

; 326  : 							}
; 327  : 						}
; 328  : 						u = GetNextUnit(&uit);

	lea	edx, DWORD PTR _uit$2[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$6[ebp], eax

; 329  : 					}

	jmp	$LN38@GetMovemen
$LN28@GetMovemen:

; 330  : 
; 331  : 					if (o && (o->GetType() == TYPE_PORT || (o->GetType() == TYPE_BRIDGE && (o->GetObjectiveStatus() > 0 || flags & PATH_ENGINEER))))

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN22@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 19					; 00000013H
	je	SHORT $LN20@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 6
	jne	SHORT $LN22@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	test	edx, edx
	jg	SHORT $LN20@GetMovemen
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN22@GetMovemen
$LN20@GetMovemen:

; 332  : 						cost = 0.5F;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cost$[ebp], xmm0
$LN22@GetMovemen:

; 333  : 					if (o && o->GetType() == TYPE_BRIDGE && o->GetObjectiveStatus() < 30 && assignedEng )

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN19@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 6
	jne	SHORT $LN19@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	cmp	edx, 30					; 0000001eH
	jge	SHORT $LN19@GetMovemen
	movzx	eax, BYTE PTR _assignedEng$9[ebp]
	test	eax, eax
	je	SHORT $LN19@GetMovemen

; 334  : 						cost = 5.0F;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _cost$[ebp], xmm0
$LN19@GetMovemen:

; 335  : 					}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	SHORT $LN16@GetMovemen
$LN30@GetMovemen:

; 336  : 				else if (flags & PATH_ROADOK && GetRoad((GridIndex)(x-dx[h]),(GridIndex)(y-dy[h])))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1
	je	SHORT $LN17@GetMovemen
	movsx	edx, WORD PTR _y$[ebp]
	movzx	eax, BYTE PTR _h$[ebp]
	movsx	ecx, WORD PTR ?dy@@3PAFA[eax*2]
	sub	edx, ecx
	push	edx
	movsx	edx, WORD PTR _x$[ebp]
	movzx	eax, BYTE PTR _h$[ebp]
	movsx	ecx, WORD PTR ?dx@@3PAFA[eax*2]
	sub	edx, ecx
	push	edx
	call	?GetRoad@@YADFF@Z			; GetRoad
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN17@GetMovemen

; 337  : 					cost = 0.5F;						// Use roads when we're allowed to

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cost$[ebp], xmm0

; 338  : 				else					

	jmp	SHORT $LN16@GetMovemen
$LN17@GetMovemen:

; 339  : 					cost *= 0.5F;						// Otherwise, lesser bonus		

	movss	xmm0, DWORD PTR _cost$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cost$[ebp], xmm0
$LN16@GetMovemen:

; 340  : 				}
; 341  :   			cost *= ReliefCost[GetRelief(x,y)];

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetRelief@@YA?AW4ReliefType@@FF@Z	; GetRelief
	add	esp, 8
	movss	xmm0, DWORD PTR _cost$[ebp]
	mulss	xmm0, DWORD PTR ?ReliefCost@@3PAMA[eax*4]
	movss	DWORD PTR _cost$[ebp], xmm0

; 342  :   			break;

	jmp	$LN33@GetMovemen
$LN15@GetMovemen:

; 343  : 		case LowAir:
; 344  :   			cost *= ReliefCost[GetRelief(x,y)];			// This only makes since for helecopters

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?GetRelief@@YA?AW4ReliefType@@FF@Z	; GetRelief
	add	esp, 8
	movss	xmm0, DWORD PTR _cost$[ebp]
	mulss	xmm0, DWORD PTR ?ReliefCost@@3PAMA[eax*4]
	movss	DWORD PTR _cost$[ebp], xmm0

; 345  :   			break;

	jmp	$LN33@GetMovemen
$LN14@GetMovemen:

; 346  : 		case Rail:
; 347  : 			if (GetRail(x,y))

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GetRail@@YADFF@Z			; GetRail
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	je	$LN7@GetMovemen

; 348  : 				{
; 349  : 				if (cost > MAX_COST)					// It's a bridge, check if intact

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN12@GetMovemen

; 350  : 					{
; 351  : 					o = FindNearestObjective(x,y,NULL);

	push	0
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$[ebp], eax

; 352  : 					if (o->GetType() == TYPE_PORT || (o->GetType() == TYPE_BRIDGE && (o->GetObjectiveStatus() > 0 || flags & PATH_ENGINEER)))

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 19					; 00000013H
	je	SHORT $LN9@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 6
	jne	SHORT $LN11@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	test	edx, edx
	jg	SHORT $LN9@GetMovemen
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN11@GetMovemen
$LN9@GetMovemen:

; 353  : 						cost = 0.5F;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cost$[ebp], xmm0
$LN11@GetMovemen:

; 354  : 					}

	jmp	SHORT $LN7@GetMovemen
$LN12@GetMovemen:

; 355  : 				else if (flags & PATH_RAILOK && GetRail((GridIndex)(x-dx[h]),(GridIndex)(y-dy[h])))	// Use rails when we're allowed to

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN7@GetMovemen
	movsx	edx, WORD PTR _y$[ebp]
	movzx	eax, BYTE PTR _h$[ebp]
	movsx	ecx, WORD PTR ?dy@@3PAFA[eax*2]
	sub	edx, ecx
	push	edx
	movsx	edx, WORD PTR _x$[ebp]
	movzx	eax, BYTE PTR _h$[ebp]
	movsx	ecx, WORD PTR ?dx@@3PAFA[eax*2]
	sub	edx, ecx
	push	edx
	call	?GetRail@@YADFF@Z			; GetRail
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@GetMovemen

; 356  : 					cost = 0.5F;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cost$[ebp], xmm0
$LN7@GetMovemen:

; 357  : 				}
; 358  : 			break;

	jmp	SHORT $LN33@GetMovemen
$LN6@GetMovemen:

; 359  : 		case Naval:
; 360  : 			if (cost > MAX_COST)

	movss	xmm0, DWORD PTR _cost$[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN4@GetMovemen

; 361  : 				{
; 362  : 				o = FindNearestObjective(x,y,NULL);

	push	0
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$[ebp], eax

; 363  : 				if (o && (o->GetType() == TYPE_PORT || o->GetType() == TYPE_BEACH) && o->GetObjectiveStatus() > 0)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN4@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 19					; 00000013H
	je	SHORT $LN3@GetMovemen
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 4
	jne	SHORT $LN4@GetMovemen
$LN3@GetMovemen:
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	ecx, al
	test	ecx, ecx
	jle	SHORT $LN4@GetMovemen

; 364  : 					cost = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cost$[ebp], xmm0
$LN4@GetMovemen:
$LN2@GetMovemen:
$LN33@GetMovemen:

; 365  : 				}
; 366  : 			break;
; 367  : 		case Air:
; 368  : 		default:
; 369  : 			break;
; 370  : 		}
; 371  : 	if (h & 0x01)

	movzx	edx, BYTE PTR _h$[ebp]
	and	edx, 1
	je	SHORT $LN1@GetMovemen

; 372  : 		cost *= 1.41F;

	movss	xmm0, DWORD PTR _cost$[ebp]
	mulss	xmm0, DWORD PTR __real@3fb47ae1
	movss	DWORD PTR _cost$[ebp], xmm0
$LN1@GetMovemen:

; 373  : 	return cost;

	fld	DWORD PTR _cost$[ebp]

; 374  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN40@GetMovemen:
	DD	$LN32@GetMovemen
	DD	$LN32@GetMovemen
	DD	$LN32@GetMovemen
	DD	$LN15@GetMovemen
	DD	$LN2@GetMovemen
	DD	$LN6@GetMovemen
	DD	$LN14@GetMovemen
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetMovementCost@@YAMFFW4MoveType@@HE@Z$0:
	lea	ecx, DWORD PTR _uit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?GetMovementCost@@YAMFFW4MoveType@@HE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetMovementCost@@YAMFFW4MoveType@@HE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetMovementCost@@YAMFFW4MoveType@@HE@Z ENDP		; GetMovementCost
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_o$ = -32						; size = 4
_t$ = -28						; size = 4
tv176 = -24						; size = 4
tv166 = -20						; size = 4
_tx$ = -16						; size = 2
_ty$ = -12						; size = 2
_ox$ = -8						; size = 2
_oy$ = -4						; size = 2
_p$ = 8							; size = 4
_O1$ = 12						; size = 4
_O2$ = 16						; size = 4
_mt$ = 20						; size = 4
?FindLinkPath@@YAHPAVBasePathClass@@PAVObjectiveClass@@1W4MoveType@@@Z PROC ; FindLinkPath

; 217  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 218  : 	void*       o;
; 219  : 	void*		t;
; 220  : 	GridIndex   ox,oy,tx,ty;
; 221  : 
; 222  : 	O1->GetLocation(&ox, &oy);

	lea	eax, DWORD PTR _oy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ox$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _O1$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 223  : 	O2->GetLocation(&tx, &ty);

	lea	edx, DWORD PTR _ty$[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _O2$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 224  : 	o = PackXY(ox, oy);

	movzx	ecx, WORD PTR _oy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ox$[ebp]
	push	edx
	call	?PackXY@@YAPAXFF@Z			; PackXY
	add	esp, 8
	mov	DWORD PTR _o$[ebp], eax

; 225  : 	t = PackXY(tx, ty);

	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	call	?PackXY@@YAPAXFF@Z			; PackXY
	add	esp, 8
	mov	DWORD PTR _t$[ebp], eax

; 226  : 	if (mt == NoMove)

	cmp	DWORD PTR _mt$[ebp], 0
	jne	SHORT $LN4@FindLinkPa

; 227  : 		{
; 228  : 		moveType = Wheeled;

	mov	DWORD PTR ?moveType@@3HA, 2		; moveType

; 229  : 		moveFlags = PATH_ROADOK | PATH_BASIC;

	mov	DWORD PTR ?moveFlags@@3HA, 65		; moveFlags, 00000041H

; 230  : 		}
; 231  : 	else

	jmp	SHORT $LN3@FindLinkPa
$LN4@FindLinkPa:

; 232  : 		{
; 233  : 		moveType = mt;

	mov	edx, DWORD PTR _mt$[ebp]
	mov	DWORD PTR ?moveType@@3HA, edx		; moveType

; 234  : 		moveFlags = PATH_BASIC;

	mov	DWORD PTR ?moveFlags@@3HA, 64		; moveFlags, 00000040H
$LN3@FindLinkPa:

; 235  : 		}
; 236  : 	moveTeam = 0;

	mov	DWORD PTR ?moveTeam@@3HA, 0		; moveTeam

; 237  : 	if (GetMovementCost(ox,oy,(MoveType)moveType,moveFlags,Here) > MAX_COST ||
; 238  : 		GetMovementCost(tx,ty,(MoveType)moveType,moveFlags,Here) > MAX_COST)

	push	8
	mov	eax, DWORD PTR ?moveFlags@@3HA		; moveFlags
	push	eax
	mov	ecx, DWORD PTR ?moveType@@3HA		; moveType
	push	ecx
	movzx	edx, WORD PTR _oy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ox$[ebp]
	push	eax
	call	?GetMovementCost@@YAMFFW4MoveType@@HE@Z	; GetMovementCost
	add	esp, 20					; 00000014H
	fstp	DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR tv166[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	ja	SHORT $LN1@FindLinkPa
	push	8
	mov	ecx, DWORD PTR ?moveFlags@@3HA		; moveFlags
	push	ecx
	mov	edx, DWORD PTR ?moveType@@3HA		; moveType
	push	edx
	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	call	?GetMovementCost@@YAMFFW4MoveType@@HE@Z	; GetMovementCost
	add	esp, 20					; 00000014H
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN2@FindLinkPa
$LN1@FindLinkPa:

; 239  : 		{
; 240  : 		p->ClearPath();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?ClearPath@BasePathClass@@QAEXXZ	; BasePathClass::ClearPath

; 241  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN5@FindLinkPa
$LN2@FindLinkPa:

; 242  : 		}
; 243  : 	return ASD->ASSearch(p, o, t, GetNeighborCoord, 0, maxSearch, maxCost);

	push	ecx
	movss	xmm0, DWORD PTR ?maxCost@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?maxSearch@@3HA		; maxSearch
	push	edx
	push	0
	push	OFFSET ?GetNeighborCoord@@YAXPAVAS_DataClass@@PAX1@Z ; GetNeighborCoord
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?ASD@@3PAVAS_DataClass@@A ; ASD
	call	?ASSearch@AS_DataClass@@QAEHPAVBasePathClass@@PAX1P6AXPAV1@11@ZHHM@Z ; AS_DataClass::ASSearch
$LN5@FindLinkPa:

; 244  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?FindLinkPath@@YAHPAVBasePathClass@@PAVObjectiveClass@@1W4MoveType@@@Z ENDP ; FindLinkPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_o$ = -8						; size = 4
_t$ = -4						; size = 4
_p$ = 8							; size = 4
_x$ = 12						; size = 2
_y$ = 16						; size = 2
_xx$ = 20						; size = 2
_yy$ = 24						; size = 2
_type$ = 28						; size = 4
_who$ = 32						; size = 4
_flags$ = 36						; size = 4
?GetObjectivePath@@YAHPAVBasePathClass@@FFFFHHH@Z PROC	; GetObjectivePath

; 207  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 208  : 	Objective   o,t;
; 209  : 
; 210  : 	o = FindNearestObjective(x,y,NULL);

	push	0
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$[ebp], eax

; 211  : 	t = FindNearestObjective(xx,yy,NULL);

	push	0
	movzx	edx, WORD PTR _yy$[ebp]
	push	edx
	movzx	eax, WORD PTR _xx$[ebp]
	push	eax
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t$[ebp], eax

; 212  : 	return GetObjectivePath(p,o,t,type,who,flags);

	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _who$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?GetObjectivePath@@YAHPAVBasePathClass@@PAVObjectiveClass@@1HHH@Z ; GetObjectivePath
	add	esp, 24					; 00000018H

; 213  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectivePath@@YAHPAVBasePathClass@@FFFFHHH@Z ENDP	; GetObjectivePath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_p$ = 8							; size = 4
_o$ = 12						; size = 4
_t$ = 16						; size = 4
_type$ = 20						; size = 4
_who$ = 24						; size = 4
_flags$ = 28						; size = 4
?GetObjectivePath@@YAHPAVBasePathClass@@PAVObjectiveClass@@1HHH@Z PROC ; GetObjectivePath

; 179  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 180  : 	int retval;
; 181  : 	moveTeam = who;

	mov	eax, DWORD PTR _who$[ebp]
	mov	DWORD PTR ?moveTeam@@3HA, eax		; moveTeam

; 182  : 	moveType = type;

	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR ?moveType@@3HA, ecx		; moveType

; 183  : 	moveFlags = flags;

	mov	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR ?moveFlags@@3HA, edx		; moveFlags

; 184  : 
; 185  : 	if (type == NoMove && o != t)

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN1@GetObjecti
	mov	eax, DWORD PTR _o$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	je	SHORT $LN1@GetObjecti

; 186  : 		return -1;

	or	eax, -1
	jmp	SHORT $LN2@GetObjecti
$LN1@GetObjecti:

; 187  : 
; 188  : #ifdef CAMPTOOL
; 189  : 	if (ShowSearch)
; 190  : //		DColor = (DColor+1)%16;
; 191  : DColor = Blue;
; 192  : #endif
; 193  : 
; 194  : // Debug stuff
; 195  : //ulong	time,newtime;
; 196  : //GridIndex	x,y,xx,yy;
; 197  : //time = GetTickCount();
; 198  : 	retval = ASD->ASSearch(p, o, t, GetNeighborObject, RETURN_PARTIAL_ON_FAIL | RETURN_PARTIAL_ON_MAX, maxSearch, maxCost);

	push	ecx
	movss	xmm0, DWORD PTR ?maxCost@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?maxSearch@@3HA		; maxSearch
	push	ecx
	push	3
	push	OFFSET ?GetNeighborObject@@YAXPAVAS_DataClass@@PAX1@Z ; GetNeighborObject
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?ASD@@3PAVAS_DataClass@@A ; ASD
	call	?ASSearch@AS_DataClass@@QAEHPAVBasePathClass@@PAX1P6AXPAV1@11@ZHHM@Z ; AS_DataClass::ASSearch
	mov	DWORD PTR _retval$[ebp], eax

; 199  : //newtime = GetTickCount();
; 200  : //o->GetLocation(&x,&y);
; 201  : //t->GetLocation(&xx,&yy);
; 202  : //MonoPrint("Finding Obj Path: %d,%d -> %d,%d   Time: %d (Result: %d, cost: %f)\n",x,y,xx,yy,newtime-time,retval,p->GetCost());
; 203  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN2@GetObjecti:

; 204  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectivePath@@YAHPAVBasePathClass@@PAVObjectiveClass@@1HHH@Z ENDP ; GetObjectivePath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
tv88 = -16						; size = 4
_cost$ = -12						; size = 4
_d$ = -8						; size = 4
_i$ = -4						; size = 4
_o$ = 8							; size = 4
_path$ = 12						; size = 4
_mt$ = 16						; size = 4
_flags$ = 20						; size = 4
?GetPathCost@@YAMPAVObjectiveClass@@PAVBasePathClass@@W4MoveType@@H@Z PROC ; GetPathCost

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 163  : 	costtype    cost=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cost$[ebp], xmm0

; 164  : 	int			d,i=0;

	mov	DWORD PTR _i$[ebp], 0

; 165  : 
; 166  : 	d = path->GetDirection(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	call	?GetDirection@BasePathClass@@QAEHH@Z	; BasePathClass::GetDirection
	mov	DWORD PTR _d$[ebp], eax
$LN2@GetPathCos:

; 167  : 	while (d != Here)

	cmp	DWORD PTR _d$[ebp], 8
	je	SHORT $LN1@GetPathCos

; 168  : 		{
; 169  : 		cost += o->GetNeighborCost(d,mt);

	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ; ObjectiveClass::GetNeighborCost
	fstp	DWORD PTR tv88[ebp]
	movss	xmm0, DWORD PTR tv88[ebp]
	addss	xmm0, DWORD PTR _cost$[ebp]
	movss	DWORD PTR _cost$[ebp], xmm0

; 170  : 		o = o->GetNeighbor(d);

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _o$[ebp], eax

; 171  : 		i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 172  : 		d = path->GetDirection(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _path$[ebp]
	call	?GetDirection@BasePathClass@@QAEHH@Z	; BasePathClass::GetDirection
	mov	DWORD PTR _d$[ebp], eax

; 173  : 		}

	jmp	SHORT $LN2@GetPathCos
$LN1@GetPathCos:

; 174  : 	return cost;

	fld	DWORD PTR _cost$[ebp]

; 175  : 	flags;
; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPathCost@@YAMPAVObjectiveClass@@PAVBasePathClass@@W4MoveType@@H@Z ENDP ; GetPathCost
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
tv139 = -16						; size = 4
_cost$ = -12						; size = 4
_i$ = -8						; size = 4
_d$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_path$ = 16						; size = 4
_mt$ = 20						; size = 4
_flags$ = 24						; size = 4
?GetPathCost@@YAMFFPAVBasePathClass@@W4MoveType@@H@Z PROC ; GetPathCost

; 145  :    {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 146  :    costtype		cost=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cost$[ebp], xmm0

; 147  :    int			d,i=0;

	mov	DWORD PTR _i$[ebp], 0

; 148  : 
; 149  : 	d = path->GetDirection(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	call	?GetDirection@BasePathClass@@QAEHH@Z	; BasePathClass::GetDirection
	mov	DWORD PTR _d$[ebp], eax
$LN2@GetPathCos:

; 150  :    while (d != Here)

	cmp	DWORD PTR _d$[ebp], 8
	je	SHORT $LN1@GetPathCos

; 151  :       {
; 152  :       x += dx[d];

	mov	ecx, DWORD PTR _d$[ebp]
	movsx	edx, WORD PTR ?dx@@3PAFA[ecx*2]
	movsx	eax, WORD PTR _x$[ebp]
	add	eax, edx
	mov	WORD PTR _x$[ebp], ax

; 153  :       y += dy[d];

	mov	ecx, DWORD PTR _d$[ebp]
	movsx	edx, WORD PTR ?dy@@3PAFA[ecx*2]
	movsx	eax, WORD PTR _y$[ebp]
	add	eax, edx
	mov	WORD PTR _y$[ebp], ax

; 154  :       cost += GetMovementCost(x, y, mt, flags, (CampaignHeading)d);

	movzx	ecx, BYTE PTR _d$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GetMovementCost@@YAMFFW4MoveType@@HE@Z	; GetMovementCost
	add	esp, 20					; 00000014H
	fstp	DWORD PTR tv139[ebp]
	movss	xmm0, DWORD PTR tv139[ebp]
	addss	xmm0, DWORD PTR _cost$[ebp]
	movss	DWORD PTR _cost$[ebp], xmm0

; 155  : 	  i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 156  : 	  d = path->GetDirection(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _path$[ebp]
	call	?GetDirection@BasePathClass@@QAEHH@Z	; BasePathClass::GetDirection
	mov	DWORD PTR _d$[ebp], eax

; 157  :       }

	jmp	SHORT $LN2@GetPathCos
$LN1@GetPathCos:

; 158  :    return cost;

	fld	DWORD PTR _cost$[ebp]

; 159  :    }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPathCost@@YAMFFPAVBasePathClass@@W4MoveType@@H@Z ENDP ; GetPathCost
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\path.cpp
_TEXT	SEGMENT
_retval$ = -16						; size = 4
_o$ = -12						; size = 4
_t$ = -8						; size = 4
tv153 = -4						; size = 4
_p$ = 8							; size = 4
_x$ = 12						; size = 2
_y$ = 16						; size = 2
_xx$ = 20						; size = 2
_yy$ = 24						; size = 2
_type$ = 28						; size = 4
_who$ = 32						; size = 4
_flags$ = 36						; size = 4
?GetGridPath@@YAHPAVBasePathClass@@FFFFHHH@Z PROC	; GetGridPath

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 103  : 	void*       o;
; 104  : 	void*		t;
; 105  : 	int			retval;
; 106  : 
; 107  : 	moveTeam = who;

	mov	eax, DWORD PTR _who$[ebp]
	mov	DWORD PTR ?moveTeam@@3HA, eax		; moveTeam

; 108  : 	moveType = type;

	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR ?moveType@@3HA, ecx		; moveType

; 109  : 	moveFlags = flags;

	mov	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR ?moveFlags@@3HA, edx		; moveFlags

; 110  : 
; 111  : #ifdef CAMPTOOL
; 112  : 	if (ShowSearch)
; 113  : 		DColor = (DColor+1)%16;
; 114  : //DColor = Blue;
; 115  : #endif
; 116  : 
; 117  : 	// Should be able to drop this. Assume not true in future.
; 118  : 	if (x<0 || y <0 || xx<0 || yy<0 || x>=Map_Max_X || y>=Map_Max_Y || xx>=Map_Max_X || yy>=Map_Max_Y)

	movsx	eax, WORD PTR _x$[ebp]
	test	eax, eax
	jl	SHORT $LN2@GetGridPat
	movsx	ecx, WORD PTR _y$[ebp]
	test	ecx, ecx
	jl	SHORT $LN2@GetGridPat
	movsx	edx, WORD PTR _xx$[ebp]
	test	edx, edx
	jl	SHORT $LN2@GetGridPat
	movsx	eax, WORD PTR _yy$[ebp]
	test	eax, eax
	jl	SHORT $LN2@GetGridPat
	movsx	ecx, WORD PTR _x$[ebp]
	movsx	edx, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	cmp	ecx, edx
	jge	SHORT $LN2@GetGridPat
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	cmp	eax, ecx
	jge	SHORT $LN2@GetGridPat
	movsx	edx, WORD PTR _xx$[ebp]
	movsx	eax, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	cmp	edx, eax
	jge	SHORT $LN2@GetGridPat
	movsx	ecx, WORD PTR _yy$[ebp]
	movsx	edx, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	cmp	ecx, edx
	jl	SHORT $LN3@GetGridPat
$LN2@GetGridPat:

; 119  : 		{
; 120  : 		p->ClearPath();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?ClearPath@BasePathClass@@QAEXXZ	; BasePathClass::ClearPath

; 121  : 		return -1;

	or	eax, -1
	jmp	$LN4@GetGridPat
$LN3@GetGridPat:

; 122  : 		}
; 123  : 	if (GetMovementCost(xx,yy,(MoveType)moveType,moveFlags,Here) > MAX_COST)

	push	8
	mov	eax, DWORD PTR ?moveFlags@@3HA		; moveFlags
	push	eax
	mov	ecx, DWORD PTR ?moveType@@3HA		; moveType
	push	ecx
	movzx	edx, WORD PTR _yy$[ebp]
	push	edx
	movzx	eax, WORD PTR _xx$[ebp]
	push	eax
	call	?GetMovementCost@@YAMFFW4MoveType@@HE@Z	; GetMovementCost
	add	esp, 20					; 00000014H
	fstp	DWORD PTR tv153[ebp]
	movss	xmm0, DWORD PTR tv153[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN1@GetGridPat

; 124  : 		{
; 125  : 		p->ClearPath();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?ClearPath@BasePathClass@@QAEXXZ	; BasePathClass::ClearPath

; 126  : 		return -1;

	or	eax, -1
	jmp	SHORT $LN4@GetGridPat
$LN1@GetGridPat:

; 127  : 		}
; 128  : 
; 129  : 	o = PackXY(x, y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?PackXY@@YAPAXFF@Z			; PackXY
	add	esp, 8
	mov	DWORD PTR _o$[ebp], eax

; 130  : 	t = PackXY(xx, yy);

	movzx	eax, WORD PTR _yy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _xx$[ebp]
	push	ecx
	call	?PackXY@@YAPAXFF@Z			; PackXY
	add	esp, 8
	mov	DWORD PTR _t$[ebp], eax

; 131  : // Debug stuff
; 132  : //ulong	time,newtime;
; 133  : //time = GetTickCount();
; 134  : 	retval = ASD->ASSearch(p, o, t, GetNeighborCoord, RETURN_PARTIAL_ON_FAIL | RETURN_PARTIAL_ON_MAX, maxSearch, maxCost);

	push	ecx
	movss	xmm0, DWORD PTR ?maxCost@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?maxSearch@@3HA		; maxSearch
	push	edx
	push	3
	push	OFFSET ?GetNeighborCoord@@YAXPAVAS_DataClass@@PAX1@Z ; GetNeighborCoord
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?ASD@@3PAVAS_DataClass@@A ; ASD
	call	?ASSearch@AS_DataClass@@QAEHPAVBasePathClass@@PAX1P6AXPAV1@11@ZHHM@Z ; AS_DataClass::ASSearch
	mov	DWORD PTR _retval$[ebp], eax

; 135  : //newtime = GetTickCount();
; 136  : //MonoPrint("Finding Grid Path: %d,%d -> %d,%d   Time to find: %d (Result: %d)\n",x,y,xx,yy,newtime-time,retval);
; 137  : #ifdef CAMPTOOL
; 138  : 	if (ShowSearch && MOVE_AIR(moveType))
; 139  : 		Sleep(5000);
; 140  : #endif
; 141  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN4@GetGridPat:

; 142  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGridPath@@YAHPAVBasePathClass@@FFFFHHH@Z ENDP	; GetGridPath
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1PathClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PathClass@@QAE@XZ PROC				; PathClass::~PathClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BasePathClass@@QAE@XZ		; BasePathClass::~BasePathClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1PathClass@@QAE@XZ ENDP				; PathClass::~PathClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\asearch.h
;	COMDAT ?GetCost@BasePathClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCost@BasePathClass@@QAEMXZ PROC			; BasePathClass::GetCost, COMDAT
; _this$ = ecx

; 79   : 		costtype GetCost (void)					{ return cost; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCost@BasePathClass@@QAEMXZ ENDP			; BasePathClass::GetCost
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveStatus@ObjectiveClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetObjectiveStatus, COMDAT
; _this$ = ecx

; 270  : 	uchar GetObjectiveStatus (void)							{	return obj_data.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+199]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ PROC ; ObjectiveClass::GetObjectiveParentID, COMDAT
; _this$ = ecx

; 266  : 	VU_ID GetObjectiveParentID(void)						{ 	return static_data.parent; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	mov	edx, DWORD PTR [eax+220]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ ENDP ; ObjectiveClass::GetObjectiveParentID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ PROC	; ObjectiveClass::GetObjectiveParent, COMDAT
; _this$ = ecx

; 263  : 	Objective GetObjectiveParent(void)						{ 	return FindObjective(static_data.parent); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR [eax+216]
	push	edx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ENDP	; ObjectiveClass::GetObjectiveParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z
_TEXT	SEGMENT
tv77 = -12						; size = 4
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_t$ = 12						; size = 4
?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z PROC ; ObjectiveClass::GetNeighborCost, COMDAT
; _this$ = ecx

; 261  : 	float GetNeighborCost (int n, MoveType t)				{ 	return link_data[n].costs[t]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	add	edx, eax
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	mov	DWORD PTR tv76[ebp], ecx
	fild	DWORD PTR tv76[ebp]
	fstp	DWORD PTR tv77[ebp]
	fld	DWORD PTR tv77[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNeighborCost@ObjectiveClass@@QAEMHW4MoveType@@@Z ENDP ; ObjectiveClass::GetNeighborCost
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
END
