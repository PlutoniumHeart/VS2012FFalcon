; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPLIB\Vehicle.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	?GetVehicleName@@YAPADF@Z			; GetVehicleName
PUBLIC	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
PUBLIC	?CalculateVehicleHitChance@@YAHHH@Z		; CalculateVehicleHitChance
PUBLIC	?GetAproxVehicleCombatStrength@@YAHHHH@Z	; GetAproxVehicleCombatStrength
PUBLIC	?CalculateVehicleCombatStrength@@YAHHH@Z	; CalculateVehicleCombatStrength
PUBLIC	?GetAproxVehicleRange@@YAHHH@Z			; GetAproxVehicleRange
PUBLIC	?CalculateVehicleRange@@YAHHH@Z			; CalculateVehicleRange
PUBLIC	?GetVehicleDetectionRange@@YAHHH@Z		; GetVehicleDetectionRange
PUBLIC	?GetBestVehicleWeapon@@YAHHPAEW4MoveType@@HPAH@Z ; GetBestVehicleWeapon
PUBLIC	?GetVehicleWeapon@@YAHHH@Z			; GetVehicleWeapon
PUBLIC	?GetVehicleWeapons@@YAHHH@Z			; GetVehicleWeapons
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
EXTRN	?GetWeaponRange@@YAHHH@Z:PROC			; GetWeaponRange
EXTRN	?GetWeaponHitChance@@YAHHH@Z:PROC		; GetWeaponHitChance
EXTRN	?GetWeaponScore@@YAHHHH@Z:PROC			; GetWeaponScore
EXTRN	?GetWeaponScore@@YAHHPAEHH@Z:PROC		; GetWeaponScore
EXTRN	?GetListEntryWeapon@@YAHHH@Z:PROC		; GetListEntryWeapon
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_vc$ = -4						; size = 4
_vid$ = 8						; size = 4
_hp$ = 12						; size = 4
?GetVehicleWeapons@@YAHHH@Z PROC			; GetVehicleWeapons

; 227  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 228  : 	VehicleClassDataType*	vc;
; 229  : 
; 230  : 	vc = (VehicleClassDataType*) Falcon4ClassTable[vid].dataPtr;

	mov	eax, DWORD PTR _vid$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _vc$[ebp], edx

; 231  : 	ShiAssert (vc);
; 232  : 	return vc->Weapons[hp];

	mov	eax, DWORD PTR _vc$[ebp]
	add	eax, DWORD PTR _hp$[ebp]
	movzx	eax, BYTE PTR [eax+130]

; 233  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleWeapons@@YAHHH@Z ENDP			; GetVehicleWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_vc$ = -4						; size = 4
_vid$ = 8						; size = 4
_hp$ = 12						; size = 4
?GetVehicleWeapon@@YAHHH@Z PROC				; GetVehicleWeapon

; 218  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 219  : 	VehicleClassDataType*	vc;
; 220  : 
; 221  : 	vc = (VehicleClassDataType*) Falcon4ClassTable[vid].dataPtr;

	mov	eax, DWORD PTR _vid$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _vc$[ebp], edx

; 222  : 	ShiAssert (vc);
; 223  : 	return vc->Weapon[hp];

	mov	eax, DWORD PTR _hp$[ebp]
	mov	ecx, DWORD PTR _vc$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+98]

; 224  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleWeapon@@YAHHH@Z ENDP				; GetVehicleWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_ws$ = -32						; size = 4
_bhp$ = -28						; size = 4
_str$ = -24						; size = 4
_bw$ = -20						; size = 4
_bs$ = -16						; size = 4
_w$ = -12						; size = 4
_vc$ = -8						; size = 4
_i$ = -4						; size = 4
_id$ = 8						; size = 4
_dam$ = 12						; size = 4
_m$ = 16						; size = 4
_range$ = 20						; size = 4
_hard_point$ = 24					; size = 4
?GetBestVehicleWeapon@@YAHHPAEW4MoveType@@HPAH@Z PROC	; GetBestVehicleWeapon

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 190  : 	int			i,str,bs,w,ws,bw=-1,bhp=-1;

	mov	DWORD PTR _bw$[ebp], -1
	mov	DWORD PTR _bhp$[ebp], -1

; 191  : 	VehicleClassDataType*	vc;
; 192  : 
; 193  : 	vc = (VehicleClassDataType*) Falcon4ClassTable[id].dataPtr;

	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _vc$[ebp], edx

; 194  : 	if (!vc)

	cmp	DWORD PTR _vc$[ebp], 0
	jne	SHORT $LN6@GetBestVeh

; 195  : 		return 0;

	xor	eax, eax
	jmp	$LN7@GetBestVeh
$LN6@GetBestVeh:

; 196  : 	bw = bs = 0;

	mov	DWORD PTR _bs$[ebp], 0
	mov	eax, DWORD PTR _bs$[ebp]
	mov	DWORD PTR _bw$[ebp], eax

; 197  : 	for (i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetBestVeh
$LN4@GetBestVeh:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@GetBestVeh:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN3@GetBestVeh

; 198  : 		{
; 199  : 		w = vc->Weapon[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vc$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+98]
	mov	DWORD PTR _w$[ebp], ecx

; 200  : 		ws = vc->Weapons[i];

	mov	edx, DWORD PTR _vc$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+130]
	mov	DWORD PTR _ws$[ebp], eax

; 201  : 		ShiAssert (ws < 255)
; 202  : 		if (w && ws)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN2@GetBestVeh
	cmp	DWORD PTR _ws$[ebp], 0
	je	SHORT $LN2@GetBestVeh

; 203  : 			{
; 204  : 			str = GetWeaponScore (w, dam, m, range);

	mov	ecx, DWORD PTR _range$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _dam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	?GetWeaponScore@@YAHHPAEHH@Z		; GetWeaponScore
	add	esp, 16					; 00000010H
	mov	DWORD PTR _str$[ebp], eax

; 205  : 			if (str > bs)

	mov	edx, DWORD PTR _str$[ebp]
	cmp	edx, DWORD PTR _bs$[ebp]
	jle	SHORT $LN2@GetBestVeh

; 206  : 				{
; 207  : 				bw = w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _bw$[ebp], eax

; 208  : 				bs = str;

	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR _bs$[ebp], ecx

; 209  : 				bhp = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _bhp$[ebp], edx
$LN2@GetBestVeh:

; 210  : 				}
; 211  : 			}
; 212  : 		}

	jmp	SHORT $LN4@GetBestVeh
$LN3@GetBestVeh:

; 213  : 	*hard_point = bhp;

	mov	eax, DWORD PTR _hard_point$[ebp]
	mov	ecx, DWORD PTR _bhp$[ebp]
	mov	DWORD PTR [eax], ecx

; 214  : 	return bw;

	mov	eax, DWORD PTR _bw$[ebp]
$LN7@GetBestVeh:

; 215  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBestVehicleWeapon@@YAHHPAEW4MoveType@@HPAH@Z ENDP	; GetBestVehicleWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_vc$ = -4						; size = 4
_id$ = 8						; size = 4
_mt$ = 12						; size = 4
?GetVehicleDetectionRange@@YAHHH@Z PROC			; GetVehicleDetectionRange

; 179  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 180  : 	VehicleClassDataType*	vc;
; 181  : 
; 182  : 	vc = (VehicleClassDataType*) Falcon4ClassTable[id].dataPtr;

	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _vc$[ebp], edx

; 183  : 	if (!vc)

	cmp	DWORD PTR _vc$[ebp], 0
	jne	SHORT $LN1@GetVehicle

; 184  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@GetVehicle
$LN1@GetVehicle:

; 185  : 	return vc->Detection[mt];

	mov	eax, DWORD PTR _vc$[ebp]
	add	eax, DWORD PTR _mt$[ebp]
	movzx	eax, BYTE PTR [eax+90]
$LN2@GetVehicle:

; 186  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleDetectionRange@@YAHHH@Z ENDP			; GetVehicleDetectionRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_wl$ = -28						; size = 4
_j$ = -24						; size = 4
_vc$ = -20						; size = 4
_br$ = -16						; size = 4
_rng$ = -12						; size = 4
_wid$ = -8						; size = 4
_i$ = -4						; size = 4
_id$ = 8						; size = 4
_mt$ = 12						; size = 4
?CalculateVehicleRange@@YAHHH@Z PROC			; CalculateVehicleRange

; 140  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 141  : 	int							i,j,rng,wid,wl,br=0;

	mov	DWORD PTR _br$[ebp], 0

; 142  : 	VehicleClassDataType*	vc;
; 143  : 
; 144  : 	vc = GetVehicleClassData(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 145  : 	if (!vc)

	cmp	DWORD PTR _vc$[ebp], 0
	jne	SHORT $LN13@CalculateV

; 146  : 		return 0;

	xor	eax, eax
	jmp	$LN14@CalculateV
$LN13@CalculateV:

; 147  : 	for (i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@CalculateV
$LN11@CalculateV:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@CalculateV:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN10@CalculateV

; 148  : 		{
; 149  : 		wid = vc->Weapon[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vc$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+98]
	mov	DWORD PTR _wid$[ebp], ecx

; 150  : 		if (wid && vc->Weapons[i])

	cmp	DWORD PTR _wid$[ebp], 0
	je	$LN9@CalculateV
	mov	edx, DWORD PTR _vc$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+130]
	test	eax, eax
	je	$LN9@CalculateV

; 151  : 			{
; 152  : 			if (vc->Weapons[i] == 255)

	mov	ecx, DWORD PTR _vc$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+130]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN8@CalculateV

; 153  : 				{
; 154  : 				// We've got to check every weapon in the list
; 155  : 				wl = wid;

	mov	eax, DWORD PTR _wid$[ebp]
	mov	DWORD PTR _wl$[ebp], eax

; 156  : 				for (j=0; j<MAX_WEAPONS_IN_LIST; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@CalculateV
$LN6@CalculateV:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@CalculateV:
	cmp	DWORD PTR _j$[ebp], 64			; 00000040H
	jge	SHORT $LN5@CalculateV

; 157  : 					{
; 158  : 					wid = GetListEntryWeapon(wl,j);

	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _wl$[ebp]
	push	eax
	call	?GetListEntryWeapon@@YAHHH@Z		; GetListEntryWeapon
	add	esp, 8
	mov	DWORD PTR _wid$[ebp], eax

; 159  : 					if (wid > 0)

	cmp	DWORD PTR _wid$[ebp], 0
	jle	SHORT $LN4@CalculateV

; 160  : 						{
; 161  : 						rng = GetWeaponRange(wid, mt);

	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wid$[ebp]
	push	edx
	call	?GetWeaponRange@@YAHHH@Z		; GetWeaponRange
	add	esp, 8
	mov	DWORD PTR _rng$[ebp], eax

; 162  : 						if (rng > br)

	mov	eax, DWORD PTR _rng$[ebp]
	cmp	eax, DWORD PTR _br$[ebp]
	jle	SHORT $LN4@CalculateV

; 163  : 							br = rng;

	mov	ecx, DWORD PTR _rng$[ebp]
	mov	DWORD PTR _br$[ebp], ecx
$LN4@CalculateV:

; 164  : 						}
; 165  : 					}

	jmp	SHORT $LN6@CalculateV
$LN5@CalculateV:

; 166  : 				}
; 167  : 			else

	jmp	SHORT $LN9@CalculateV
$LN8@CalculateV:

; 168  : 				{
; 169  : 				rng = GetWeaponRange(wid, mt);

	mov	edx, DWORD PTR _mt$[ebp]
	push	edx
	mov	eax, DWORD PTR _wid$[ebp]
	push	eax
	call	?GetWeaponRange@@YAHHH@Z		; GetWeaponRange
	add	esp, 8
	mov	DWORD PTR _rng$[ebp], eax

; 170  : 				if (rng > br)

	mov	ecx, DWORD PTR _rng$[ebp]
	cmp	ecx, DWORD PTR _br$[ebp]
	jle	SHORT $LN9@CalculateV

; 171  : 					br = rng;

	mov	edx, DWORD PTR _rng$[ebp]
	mov	DWORD PTR _br$[ebp], edx
$LN9@CalculateV:

; 172  : 				}
; 173  : 			}
; 174  : 		}

	jmp	$LN11@CalculateV
$LN10@CalculateV:

; 175  : 	return br;

	mov	eax, DWORD PTR _br$[ebp]
$LN14@CalculateV:

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateVehicleRange@@YAHHH@Z ENDP			; CalculateVehicleRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_vc$ = -4						; size = 4
_id$ = 8						; size = 4
_mt$ = 12						; size = 4
?GetAproxVehicleRange@@YAHHH@Z PROC			; GetAproxVehicleRange

; 129  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 130  : 	VehicleClassDataType*	vc;
; 131  : 
; 132  : 	vc = GetVehicleClassData(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 133  : 	if (!vc)

	cmp	DWORD PTR _vc$[ebp], 0
	jne	SHORT $LN1@GetAproxVe

; 134  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@GetAproxVe
$LN1@GetAproxVe:

; 135  : 	return vc->Range[mt];

	mov	ecx, DWORD PTR _vc$[ebp]
	add	ecx, DWORD PTR _mt$[ebp]
	movzx	eax, BYTE PTR [ecx+82]
$LN2@GetAproxVe:

; 136  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAproxVehicleRange@@YAHHH@Z ENDP			; GetAproxVehicleRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_wl$ = -28						; size = 4
_j$ = -24						; size = 4
_vc$ = -20						; size = 4
_bs$ = -16						; size = 4
_str$ = -12						; size = 4
_wid$ = -8						; size = 4
_i$ = -4						; size = 4
_id$ = 8						; size = 4
_mt$ = 12						; size = 4
?CalculateVehicleCombatStrength@@YAHHH@Z PROC		; CalculateVehicleCombatStrength

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 93   : 	int							i,j,str,wid,wl,bs=0;

	mov	DWORD PTR _bs$[ebp], 0

; 94   : 	VehicleClassDataType*	vc;
; 95   : 
; 96   : 	vc = GetVehicleClassData(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 97   : 	if (!vc)

	cmp	DWORD PTR _vc$[ebp], 0
	jne	SHORT $LN12@CalculateV

; 98   : 		return 0;

	xor	eax, eax
	jmp	$LN13@CalculateV
$LN12@CalculateV:

; 99   : 	for (i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@CalculateV
$LN10@CalculateV:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@CalculateV:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN9@CalculateV

; 100  : 		{
; 101  : 		wid = vc->Weapon[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vc$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+98]
	mov	DWORD PTR _wid$[ebp], ecx

; 102  : 		if (wid && vc->Weapons[i])

	cmp	DWORD PTR _wid$[ebp], 0
	je	$LN8@CalculateV
	mov	edx, DWORD PTR _vc$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+130]
	test	eax, eax
	je	$LN8@CalculateV

; 103  : 			{
; 104  : 			if (vc->Weapons[i] == 255)

	mov	ecx, DWORD PTR _vc$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+130]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN7@CalculateV

; 105  : 				{
; 106  : 				// Find the best weapon in the list
; 107  : 				wl = wid;

	mov	eax, DWORD PTR _wid$[ebp]
	mov	DWORD PTR _wl$[ebp], eax

; 108  : 				for (j=0; j<MAX_WEAPONS_IN_LIST; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@CalculateV
$LN5@CalculateV:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN6@CalculateV:
	cmp	DWORD PTR _j$[ebp], 64			; 00000040H
	jge	SHORT $LN7@CalculateV

; 109  : 					{
; 110  : 					wid = GetListEntryWeapon(wl,j);

	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _wl$[ebp]
	push	eax
	call	?GetListEntryWeapon@@YAHHH@Z		; GetListEntryWeapon
	add	esp, 8
	mov	DWORD PTR _wid$[ebp], eax

; 111  : 					if (wid > 0)

	cmp	DWORD PTR _wid$[ebp], 0
	jle	SHORT $LN3@CalculateV

; 112  : 						{
; 113  : 						str = GetWeaponScore(wid,mt,0);

	push	0
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wid$[ebp]
	push	edx
	call	?GetWeaponScore@@YAHHHH@Z		; GetWeaponScore
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _str$[ebp], eax

; 114  : 						if (str > bs)

	mov	eax, DWORD PTR _str$[ebp]
	cmp	eax, DWORD PTR _bs$[ebp]
	jle	SHORT $LN3@CalculateV

; 115  : 							bs = str;

	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR _bs$[ebp], ecx
$LN3@CalculateV:

; 116  : 						}
; 117  : 					}

	jmp	SHORT $LN5@CalculateV
$LN7@CalculateV:

; 118  : 				}
; 119  : 			str = GetWeaponScore(wid,mt,0);

	push	0
	mov	edx, DWORD PTR _mt$[ebp]
	push	edx
	mov	eax, DWORD PTR _wid$[ebp]
	push	eax
	call	?GetWeaponScore@@YAHHHH@Z		; GetWeaponScore
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _str$[ebp], eax

; 120  : 			if (str > bs)

	mov	ecx, DWORD PTR _str$[ebp]
	cmp	ecx, DWORD PTR _bs$[ebp]
	jle	SHORT $LN8@CalculateV

; 121  : 				bs = str;

	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR _bs$[ebp], edx
$LN8@CalculateV:

; 122  : 			}
; 123  : 		}

	jmp	$LN10@CalculateV
$LN9@CalculateV:

; 124  : 	return bs;

	mov	eax, DWORD PTR _bs$[ebp]
$LN13@CalculateV:

; 125  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateVehicleCombatStrength@@YAHHH@Z ENDP		; CalculateVehicleCombatStrength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_vc$ = -4						; size = 4
_id$ = 8						; size = 4
_mt$ = 12						; size = 4
_range$ = 16						; size = 4
?GetAproxVehicleCombatStrength@@YAHHHH@Z PROC		; GetAproxVehicleCombatStrength

; 81   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 82   : 	VehicleClassDataType*	vc;
; 83   : 
; 84   : 	vc = GetVehicleClassData(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 85   : 	if (vc && vc->Range[mt] >= range)

	cmp	DWORD PTR _vc$[ebp], 0
	je	SHORT $LN1@GetAproxVe
	mov	ecx, DWORD PTR _vc$[ebp]
	add	ecx, DWORD PTR _mt$[ebp]
	movzx	edx, BYTE PTR [ecx+82]
	cmp	edx, DWORD PTR _range$[ebp]
	jl	SHORT $LN1@GetAproxVe

; 86   : 		return vc->Strength[mt];

	mov	eax, DWORD PTR _vc$[ebp]
	add	eax, DWORD PTR _mt$[ebp]
	movzx	eax, BYTE PTR [eax+74]
	jmp	SHORT $LN2@GetAproxVe
$LN1@GetAproxVe:

; 87   : 	return 0;

	xor	eax, eax
$LN2@GetAproxVe:

; 88   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAproxVehicleCombatStrength@@YAHHHH@Z ENDP		; GetAproxVehicleCombatStrength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_wl$ = -28						; size = 4
_j$ = -24						; size = 4
_vc$ = -20						; size = 4
_bc$ = -16						; size = 4
_hc$ = -12						; size = 4
_wid$ = -8						; size = 4
_i$ = -4						; size = 4
_id$ = 8						; size = 4
_mt$ = 12						; size = 4
?CalculateVehicleHitChance@@YAHHH@Z PROC		; CalculateVehicleHitChance

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 42   : 	int							i,hc,bc=0,wid,wl,j;

	mov	DWORD PTR _bc$[ebp], 0

; 43   : 	VehicleClassDataType*	vc;
; 44   : 
; 45   : 	vc = GetVehicleClassData(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 46   : 	if (!vc)

	cmp	DWORD PTR _vc$[ebp], 0
	jne	SHORT $LN13@CalculateV

; 47   : 		return 0;

	xor	eax, eax
	jmp	$LN14@CalculateV
$LN13@CalculateV:

; 48   : 	for (i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@CalculateV
$LN11@CalculateV:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@CalculateV:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN10@CalculateV

; 49   : 	{
; 50   : 		wid = vc->Weapon[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vc$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+98]
	mov	DWORD PTR _wid$[ebp], ecx

; 51   : 		if (wid && vc->Weapons[i])

	cmp	DWORD PTR _wid$[ebp], 0
	je	$LN9@CalculateV
	mov	edx, DWORD PTR _vc$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+130]
	test	eax, eax
	je	$LN9@CalculateV

; 52   : 		{
; 53   : 			if (vc->Weapons[i] == 255)

	mov	ecx, DWORD PTR _vc$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+130]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN8@CalculateV

; 54   : 			{
; 55   : 				// We've got to check every weapon in the list
; 56   : 				wl = wid;

	mov	eax, DWORD PTR _wid$[ebp]
	mov	DWORD PTR _wl$[ebp], eax

; 57   : 				for (j=0; j<MAX_WEAPONS_IN_LIST; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@CalculateV
$LN6@CalculateV:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@CalculateV:
	cmp	DWORD PTR _j$[ebp], 64			; 00000040H
	jge	SHORT $LN5@CalculateV

; 58   : 				{
; 59   : 					wid = GetListEntryWeapon(wl,j);

	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _wl$[ebp]
	push	eax
	call	?GetListEntryWeapon@@YAHHH@Z		; GetListEntryWeapon
	add	esp, 8
	mov	DWORD PTR _wid$[ebp], eax

; 60   : 					if (wid > 0)

	cmp	DWORD PTR _wid$[ebp], 0
	jle	SHORT $LN4@CalculateV

; 61   : 					{
; 62   : 						hc = GetWeaponHitChance(wid,mt);

	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wid$[ebp]
	push	edx
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	mov	DWORD PTR _hc$[ebp], eax

; 63   : 						if (hc > bc)

	mov	eax, DWORD PTR _hc$[ebp]
	cmp	eax, DWORD PTR _bc$[ebp]
	jle	SHORT $LN4@CalculateV

; 64   : 							bc = hc;

	mov	ecx, DWORD PTR _hc$[ebp]
	mov	DWORD PTR _bc$[ebp], ecx
$LN4@CalculateV:

; 65   : 					}
; 66   : 				}

	jmp	SHORT $LN6@CalculateV
$LN5@CalculateV:

; 67   : 			}
; 68   : 			else

	jmp	SHORT $LN9@CalculateV
$LN8@CalculateV:

; 69   : 			{
; 70   : 				hc = GetWeaponHitChance(wid,mt);

	mov	edx, DWORD PTR _mt$[ebp]
	push	edx
	mov	eax, DWORD PTR _wid$[ebp]
	push	eax
	call	?GetWeaponHitChance@@YAHHH@Z		; GetWeaponHitChance
	add	esp, 8
	mov	DWORD PTR _hc$[ebp], eax

; 71   : 				if (hc > bc)

	mov	ecx, DWORD PTR _hc$[ebp]
	cmp	ecx, DWORD PTR _bc$[ebp]
	jle	SHORT $LN9@CalculateV

; 72   : 					bc = hc;

	mov	edx, DWORD PTR _hc$[ebp]
	mov	DWORD PTR _bc$[ebp], edx
$LN9@CalculateV:

; 73   : 			}
; 74   : 		}
; 75   : 	}

	jmp	$LN11@CalculateV
$LN10@CalculateV:

; 76   : 	return bc;

	mov	eax, DWORD PTR _bc$[ebp]
$LN14@CalculateV:

; 77   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateVehicleHitChance@@YAHHH@Z ENDP		; CalculateVehicleHitChance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_index$ = 8						; size = 4
?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z PROC ; GetVehicleClassData

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   : 	return  (VehicleClassDataType*) Falcon4ClassTable[index].dataPtr;

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [ecx+eax+77]

; 37   : }

	pop	ebp
	ret	0
?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ENDP ; GetVehicleClassData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\vehicle.cpp
_TEXT	SEGMENT
_vc$ = -4						; size = 4
_vid$ = 8						; size = 2
?GetVehicleName@@YAPADF@Z PROC				; GetVehicleName

; 25   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 26   : 	VehicleClassDataType*	vc;
; 27   : 
; 28   : 	vc = (VehicleClassDataType*) Falcon4ClassTable[vid].dataPtr;

	movsx	eax, WORD PTR _vid$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _vc$[ebp], edx

; 29   : 	if (!vc)

	cmp	DWORD PTR _vc$[ebp], 0
	jne	SHORT $LN1@GetVehicle

; 30   : 		return "None";

	mov	eax, OFFSET ??_C@_04OHJIHAFH@None?$AA@
	jmp	SHORT $LN2@GetVehicle
$LN1@GetVehicle:

; 31   : 	return vc->Name;

	mov	eax, DWORD PTR _vc$[ebp]
	add	eax, 8
$LN2@GetVehicle:

; 32   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleName@@YAPADF@Z ENDP				; GetVehicleName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
