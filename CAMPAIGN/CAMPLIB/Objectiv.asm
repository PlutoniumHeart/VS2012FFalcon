; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPLIB\Objectiv.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ; VuEntity::SetSendCreate
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ		; VuEntity::VuState
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::get
PUBLIC	?IsSimBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsSimBase
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsMover@FalconEntity@@UAEHXZ			; FalconEntity::IsMover
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsExploding@FalconEntity@@UAEHXZ		; FalconEntity::IsExploding
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?IsSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsSPJamming
PUBLIC	?IsAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsAreaJamming
PUBLIC	?HasSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasSPJamming
PUBLIC	?HasAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasAreaJamming
PUBLIC	?GetRCSFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetRCSFactor
PUBLIC	?GetIRFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetIRFactor
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ	; WayPointClass::GetWPTargetID
PUBLIC	?GetWPTargetBuilding@WayPointClass@@QAEEXZ	; WayPointClass::GetWPTargetBuilding
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
PUBLIC	?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ	; CampBaseClass::GetDeagOwner
PUBLIC	?CollectWeapons@CampBaseClass@@UAEHPAEW4MoveType@@QAFQAEH@Z ; CampBaseClass::CollectWeapons
PUBLIC	?GetDivisionName@CampBaseClass@@UAEPADPADHH@Z	; CampBaseClass::GetDivisionName
PUBLIC	?GetCampID@CampBaseClass@@UAEFXZ		; CampBaseClass::GetCampID
PUBLIC	?GetTeam@CampBaseClass@@UAEEXZ			; CampBaseClass::GetTeam
PUBLIC	?GetCountry@CampBaseClass@@UAEEXZ		; CampBaseClass::GetCountry
PUBLIC	?StepRadar@CampBaseClass@@UAEHHHM@Z		; CampBaseClass::StepRadar
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?GetMissilesFlying@CampBaseClass@@UAEHXZ	; CampBaseClass::GetMissilesFlying
PUBLIC	?IsCampBase@CampBaseClass@@UAE_NXZ		; CampBaseClass::IsCampBase
PUBLIC	?IsEmitting@CampBaseClass@@UAEHXZ		; CampBaseClass::IsEmitting
PUBLIC	?IsAwake@CampBaseClass@@QAEHXZ			; CampBaseClass::IsAwake
PUBLIC	?InSimLists@CampBaseClass@@QAEHXZ		; CampBaseClass::InSimLists
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z	; CampBaseClass::HasEntity
PUBLIC	?HasDelta@CampBaseClass@@QAEHXZ			; CampBaseClass::HasDelta
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	??0SimInitDataClass@@QAE@XZ			; SimInitDataClass::SimInitDataClass
PUBLIC	?CampEnterCriticalSection@@YAXXZ		; CampEnterCriticalSection
PUBLIC	?CampLeaveCriticalSection@@YAXXZ		; CampLeaveCriticalSection
PUBLIC	?IsOnline@CampaignClass@@QAEHXZ			; CampaignClass::IsOnline
PUBLIC	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ		; UnitClass::GetTargetID
PUBLIC	??_GATCBrain@@QAEPAXI@Z				; ATCBrain::`scalar deleting destructor'
PUBLIC	?GetNumberOfArcs@RadarRangeClass@@QAEHXZ	; RadarRangeClass::GetNumberOfArcs
PUBLIC	?GetArcRatio@RadarRangeClass@@QAEMH@Z		; RadarRangeClass::GetArcRatio
PUBLIC	?GetArcRange@RadarRangeClass@@QAEMH@Z		; RadarRangeClass::GetArcRange
PUBLIC	?GetArcAngle@RadarRangeClass@@QAEXHPAM0@Z	; RadarRangeClass::GetArcAngle
PUBLIC	??0CampObjectiveStaticDataType@@QAE@XZ		; CampObjectiveStaticDataType::CampObjectiveStaticDataType
PUBLIC	??0CampObjectiveLinkDataType@@QAE@XZ		; CampObjectiveLinkDataType::CampObjectiveLinkDataType
PUBLIC	??0ObjectiveClass@@QAE@H@Z			; ObjectiveClass::ObjectiveClass
PUBLIC	??0ObjectiveClass@@QAE@PAPAEPAJ@Z		; ObjectiveClass::ObjectiveClass
PUBLIC	??1ObjectiveClass@@UAE@XZ			; ObjectiveClass::~ObjectiveClass
PUBLIC	?SaveSize@ObjectiveClass@@UAEHXZ		; ObjectiveClass::SaveSize
PUBLIC	?SaveSize@ObjectiveClass@@UAEHH@Z		; ObjectiveClass::SaveSize
PUBLIC	?Save@ObjectiveClass@@UAEHPAPAE@Z		; ObjectiveClass::Save
PUBLIC	?Save@ObjectiveClass@@UAEHPAPAEH@Z		; ObjectiveClass::Save
PUBLIC	?UpdateFromData@ObjectiveClass@@QAEXPAPAEPAJ@Z	; ObjectiveClass::UpdateFromData
PUBLIC	?GetVt@ObjectiveClass@@UBEMXZ			; ObjectiveClass::GetVt
PUBLIC	?GetKias@ObjectiveClass@@UBEMXZ			; ObjectiveClass::GetKias
PUBLIC	?Handle@ObjectiveClass@@UAEHPAVVuFullUpdateEvent@@@Z ; ObjectiveClass::Handle
PUBLIC	?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z ; ObjectiveClass::SendDeaggregateData
PUBLIC	?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z ; ObjectiveClass::RecordCurrentState
PUBLIC	?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z ; ObjectiveClass::Deaggregate
PUBLIC	?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z ; ObjectiveClass::Reaggregate
PUBLIC	?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z ; ObjectiveClass::TransferOwnership
PUBLIC	?Wake@ObjectiveClass@@UAEHXZ			; ObjectiveClass::Wake
PUBLIC	?Sleep@ObjectiveClass@@UAEHXZ			; ObjectiveClass::Sleep
PUBLIC	?InsertInSimLists@ObjectiveClass@@UAEXMM@Z	; ObjectiveClass::InsertInSimLists
PUBLIC	?RemoveFromSimLists@ObjectiveClass@@UAEXXZ	; ObjectiveClass::RemoveFromSimLists
PUBLIC	?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z	; ObjectiveClass::DeaggregateFromData
PUBLIC	?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z	; ObjectiveClass::ReaggregateFromData
PUBLIC	?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z ; ObjectiveClass::TransferOwnershipFromData
PUBLIC	?GetMovementType@ObjectiveClass@@UAE?AW4MoveType@@XZ ; ObjectiveClass::GetMovementType
PUBLIC	?ApplyDamage@ObjectiveClass@@UAEHPAVFalconCampWeaponsFire@@E@Z ; ObjectiveClass::ApplyDamage
PUBLIC	?ApplyDamage@ObjectiveClass@@UAEHW4DamageDataType@@PAHHF@Z ; ObjectiveClass::ApplyDamage
PUBLIC	?DecodeDamageData@ObjectiveClass@@UAEHPAEPAVUnitClass@@PAVFalconDeathMessage@@@Z ; ObjectiveClass::DecodeDamageData
PUBLIC	?GetDamageModifiers@ObjectiveClass@@UAEPAEXZ	; ObjectiveClass::GetDamageModifiers
PUBLIC	?GetName@ObjectiveClass@@UAEPADPADHH@Z		; ObjectiveClass::GetName
PUBLIC	?GetFullName@ObjectiveClass@@UAEPADPADHH@Z	; ObjectiveClass::GetFullName
PUBLIC	?GetHitChance@ObjectiveClass@@UAEHHH@Z		; ObjectiveClass::GetHitChance
PUBLIC	?GetAproxHitChance@ObjectiveClass@@UAEHHH@Z	; ObjectiveClass::GetAproxHitChance
PUBLIC	?GetCombatStrength@ObjectiveClass@@UAEHHH@Z	; ObjectiveClass::GetCombatStrength
PUBLIC	?GetAproxCombatStrength@ObjectiveClass@@UAEHHH@Z ; ObjectiveClass::GetAproxCombatStrength
PUBLIC	?GetWeaponRange@ObjectiveClass@@UAEHHPAVFalconEntity@@@Z ; ObjectiveClass::GetWeaponRange
PUBLIC	?GetAproxWeaponRange@ObjectiveClass@@UAEHH@Z	; ObjectiveClass::GetAproxWeaponRange
PUBLIC	?GetDetectionRange@ObjectiveClass@@UAEHH@Z	; ObjectiveClass::GetDetectionRange
PUBLIC	?GetElectronicDetectionRange@ObjectiveClass@@UAEHH@Z ; ObjectiveClass::GetElectronicDetectionRange
PUBLIC	?CanDetect@ObjectiveClass@@UAEHPAVFalconEntity@@@Z ; ObjectiveClass::CanDetect
PUBLIC	?OnGround@ObjectiveClass@@UAEHXZ		; ObjectiveClass::OnGround
PUBLIC	?GetRadarMode@ObjectiveClass@@UAEHXZ		; ObjectiveClass::GetRadarMode
PUBLIC	?GetRadarType@ObjectiveClass@@UAEHXZ		; ObjectiveClass::GetRadarType
PUBLIC	?GetNumberOfArcs@ObjectiveClass@@UAEHXZ		; ObjectiveClass::GetNumberOfArcs
PUBLIC	?GetArcRatio@ObjectiveClass@@UAEMH@Z		; ObjectiveClass::GetArcRatio
PUBLIC	?GetArcRange@ObjectiveClass@@UAEMH@Z		; ObjectiveClass::GetArcRange
PUBLIC	?GetArcAngle@ObjectiveClass@@UAEXHPAM0@Z	; ObjectiveClass::GetArcAngle
PUBLIC	?SiteCanDetect@ObjectiveClass@@QAEHPAVFalconEntity@@@Z ; ObjectiveClass::SiteCanDetect
PUBLIC	?GetSiteRange@ObjectiveClass@@QAEMPAVFalconEntity@@@Z ; ObjectiveClass::GetSiteRange
PUBLIC	?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z ; ObjectiveClass::SendObjMessage
PUBLIC	?DisposeObjective@ObjectiveClass@@QAEXXZ	; ObjectiveClass::DisposeObjective
PUBLIC	?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z ; ObjectiveClass::AddObjectiveNeighbor
PUBLIC	?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z ; ObjectiveClass::RemoveObjectiveNeighbor
PUBLIC	?SetNeighborCosts@ObjectiveClass@@QAEXHQAE@Z	; ObjectiveClass::SetNeighborCosts
PUBLIC	?IsObjective@ObjectiveClass@@UAEHXZ		; ObjectiveClass::IsObjective
PUBLIC	?IsFrontline@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsFrontline
PUBLIC	?IsSecondline@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsSecondline
PUBLIC	?IsPrimary@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsPrimary
PUBLIC	?IsSecondary@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsSecondary
PUBLIC	?IsSupplySource@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsSupplySource
PUBLIC	?HasRadarRanges@ObjectiveClass@@QAEHXZ		; ObjectiveClass::HasRadarRanges
PUBLIC	?UpdateObjectiveLists@ObjectiveClass@@QAEXXZ	; ObjectiveClass::UpdateObjectiveLists
PUBLIC	?Repair@ObjectiveClass@@QAEXXZ			; ObjectiveClass::Repair
PUBLIC	?SetManual@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetManual
PUBLIC	?SetJammed@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetJammed
PUBLIC	?SetSamSite@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetSamSite
PUBLIC	?SetArtillerySite@ObjectiveClass@@QAEXH@Z	; ObjectiveClass::SetArtillerySite
PUBLIC	?SetAmbushCAPSite@ObjectiveClass@@QAEXH@Z	; ObjectiveClass::SetAmbushCAPSite
PUBLIC	?SetBorderSite@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetBorderSite
PUBLIC	?SetMountainSite@ObjectiveClass@@QAEXH@Z	; ObjectiveClass::SetMountainSite
PUBLIC	?SetCommandoSite@ObjectiveClass@@QAEXH@Z	; ObjectiveClass::SetCommandoSite
PUBLIC	?SetFlatSite@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetFlatSite
PUBLIC	?SetRadarSite@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetRadarSite
PUBLIC	?SetAbandoned@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetAbandoned
PUBLIC	?SetNeedRepair@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::SetNeedRepair
PUBLIC	?MakeObjectiveDirty@ObjectiveClass@@QAEXW4Dirty_Objective@@W4Dirtyness@@@Z ; ObjectiveClass::MakeObjectiveDirty
PUBLIC	?WriteDirty@ObjectiveClass@@QAEXPAPAE@Z		; ObjectiveClass::WriteDirty
PUBLIC	?ReadDirty@ObjectiveClass@@QAEXPAPAEPAJ@Z	; ObjectiveClass::ReadDirty
PUBLIC	?SetOwner@ObjectiveClass@@UAEXE@Z		; ObjectiveClass::SetOwner
PUBLIC	?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ; ObjectiveClass::SetObjectiveParent
PUBLIC	?SetObjectiveNameID@ObjectiveClass@@QAEXF@Z	; ObjectiveClass::SetObjectiveNameID
PUBLIC	?SetObjectiveName@ObjectiveClass@@QAEXPAD@Z	; ObjectiveClass::SetObjectiveName
PUBLIC	?SetObjectiveScore@ObjectiveClass@@QAEXF@Z	; ObjectiveClass::SetObjectiveScore
PUBLIC	?SetObjectiveRepairTime@ObjectiveClass@@QAEXK@Z	; ObjectiveClass::SetObjectiveRepairTime
PUBLIC	?SetObjectiveStatus@ObjectiveClass@@QAEXE@Z	; ObjectiveClass::SetObjectiveStatus
PUBLIC	?SetObjectiveType@ObjectiveClass@@QAEXE@Z	; ObjectiveClass::SetObjectiveType
PUBLIC	?SetObjectiveSType@ObjectiveClass@@QAEXE@Z	; ObjectiveClass::SetObjectiveSType
PUBLIC	?SetObjectiveClass@ObjectiveClass@@QAEXH@Z	; ObjectiveClass::SetObjectiveClass
PUBLIC	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z	; ObjectiveClass::SetFeatureStatus
PUBLIC	?SetFeatureStatus@ObjectiveClass@@QAEXHHH@Z	; ObjectiveClass::SetFeatureStatus
PUBLIC	?GetNeighborId@ObjectiveClass@@QAE?AVVU_ID@@H@Z	; ObjectiveClass::GetNeighborId
PUBLIC	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z	; ObjectiveClass::GetNeighbor
PUBLIC	?GetObjectiveOldown@ObjectiveClass@@QAEEXZ	; ObjectiveClass::GetObjectiveOldown
PUBLIC	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ	; ObjectiveClass::GetObjectiveParent
PUBLIC	?GetObjectiveSecondary@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveSecondary
PUBLIC	?GetObjectivePrimary@ObjectiveClass@@QAEPAV1@XZ	; ObjectiveClass::GetObjectivePrimary
PUBLIC	?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ ; ObjectiveClass::GetObjectiveParentID
PUBLIC	?GetObjectiveNameID@ObjectiveClass@@QAEHXZ	; ObjectiveClass::GetObjectiveNameID
PUBLIC	?GetObjectivePriority@ObjectiveClass@@QAEFXZ	; ObjectiveClass::GetObjectivePriority
PUBLIC	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ	; ObjectiveClass::GetObjectiveStatus
PUBLIC	?GetObjectiveScore@ObjectiveClass@@QAEHXZ	; ObjectiveClass::GetObjectiveScore
PUBLIC	?GetObjectiveRepairTime@ObjectiveClass@@QAEKXZ	; ObjectiveClass::GetObjectiveRepairTime
PUBLIC	?GetObjectiveDataRate@ObjectiveClass@@QAEFXZ	; ObjectiveClass::GetObjectiveDataRate
PUBLIC	?GetAdjustedDataRate@ObjectiveClass@@QAEFXZ	; ObjectiveClass::GetAdjustedDataRate
PUBLIC	?GetTotalFeatures@ObjectiveClass@@QAEFXZ	; ObjectiveClass::GetTotalFeatures
PUBLIC	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureStatus
PUBLIC	?GetFeatureValue@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureValue
PUBLIC	?GetFeatureRepairTime@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureRepairTime
PUBLIC	?GetFeatureID@ObjectiveClass@@QAEHH@Z		; ObjectiveClass::GetFeatureID
PUBLIC	?GetFeatureOffset@ObjectiveClass@@QAEHHPAM00@Z	; ObjectiveClass::GetFeatureOffset
PUBLIC	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
PUBLIC	?GetExpectedStatus@ObjectiveClass@@QAEEH@Z	; ObjectiveClass::GetExpectedStatus
PUBLIC	?GetRepairTime@ObjectiveClass@@QAEHH@Z		; ObjectiveClass::GetRepairTime
PUBLIC	?GetBestTarget@ObjectiveClass@@QAEEXZ		; ObjectiveClass::GetBestTarget
PUBLIC	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ	; ObjectiveClass::ResetObjectiveStatus
PUBLIC	?RepairFeature@ObjectiveClass@@QAEXH@Z		; ObjectiveClass::RepairFeature
PUBLIC	?RecalculateParent@ObjectiveClass@@QAEXXZ	; ObjectiveClass::RecalculateParent
PUBLIC	??_GObjectiveClass@@UAEPAXI@Z			; ObjectiveClass::`scalar deleting destructor'
PUBLIC	?NewObjective@@YAPAVObjectiveClass@@XZ		; NewObjective
PUBLIC	?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z	; NewObjective
PUBLIC	?LoadBaseObjectives@@YAHPAD@Z			; LoadBaseObjectives
PUBLIC	?LoadObjectiveDeltas@@YAHPAD@Z			; LoadObjectiveDeltas
PUBLIC	?SaveBaseObjectives@@YAXPAD@Z			; SaveBaseObjectives
PUBLIC	?SaveObjectiveDeltas@@YAXPAD@Z			; SaveObjectiveDeltas
PUBLIC	?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z	; BestRepairFeature
PUBLIC	?BestTargetFeature@@YAHPAVObjectiveClass@@QAE@Z	; BestTargetFeature
PUBLIC	?RepairObjectives@@YAXXZ			; RepairObjectives
PUBLIC	?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z ; GetChildObjectives
PUBLIC	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
PUBLIC	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
PUBLIC	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuGridIterator@@@Z ; GetFirstObjective
PUBLIC	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuGridIterator@@@Z ; GetNextObjective
PUBLIC	?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z ; CaptureObjective
PUBLIC	?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z ; EncodeObjectiveDeltas
PUBLIC	?DecodeObjectiveDeltas@@YAHPAPAEPAJPAVFalconSessionEntity@@@Z ; DecodeObjectiveDeltas
PUBLIC	?GetSlot@SimBaseClass@@QAEHXZ			; SimBaseClass::GetSlot
PUBLIC	?Status@SimBaseClass@@QBEHXZ			; SimBaseClass::Status
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?AddChildObjectives@@YAXPAVObjectiveClass@@0PAVFalconPrivateList@@HHH@Z ; AddChildObjectives
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	??_7ObjectiveClass@@6B@				; ObjectiveClass::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_07JKKEGLBA@?$CFs?5d?8?$CFs?$AA@		; `string'
PUBLIC	??_C@_08GEODDHCD@?$CFs?5de?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_03GJLPFLNF@obj?$AA@			; `string'
PUBLIC	??_C@_0N@IJKHBDDD@Objectiv?4cpp?$AA@		; `string'
PUBLIC	??_C@_0CK@KOLCPHPM@?$CFs?5?$CFd?3?5error?5creating?5object?5fro@ ; `string'
PUBLIC	??_C@_03PHDMHGFL@obd?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ObjectiveClass@@6B@			; ObjectiveClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectiveClass@@@8			; ObjectiveClass `RTTI Type Descriptor'
PUBLIC	??_R3ObjectiveClass@@8				; ObjectiveClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectiveClass@@8				; ObjectiveClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectiveClass@@8			; ObjectiveClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CampBaseClass@@8			; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCampBaseClass@@@8			; CampBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3CampBaseClass@@8				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CampBaseClass@@8				; CampBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8ef998
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40100000
PUBLIC	__real@40c90fdb
PUBLIC	__real@42c80000
PUBLIC	__real@451c4000
PUBLIC	__real@454cffae
PUBLIC	__real@459c4000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	___iob_func:PROC
EXTRN	_fprintf:PROC
EXTRN	_fwrite:PROC
EXTRN	__snprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?SetEntityType@VuEntity@@QAEXG@Z:PROC		; VuEntity::SetEntityType
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?InsertionCallback@VuEntity@@MAEHXZ:PROC	; VuEntity::InsertionCallback
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Register@VuCollection@@QAEXXZ:PROC		; VuCollection::Register
EXTRN	?Unregister@VuCollection@@QAEXXZ:PROC		; VuCollection::Unregister
EXTRN	?ForcedInsert@VuCollection@@QAEHPAVVuEntity@@@Z:PROC ; VuCollection::ForcedInsert
EXTRN	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Remove
EXTRN	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z:PROC	; VuCollection::Find
EXTRN	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC	; VuDatabase::Insert
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	??1VuGridIterator@@UAE@XZ:PROC			; VuGridIterator::~VuGridIterator
EXTRN	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetFirst
EXTRN	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetNext
EXTRN	?Save@FalconEntity@@UAEHPAU_iobuf@@@Z:PROC	; FalconEntity::Save
EXTRN	?CleanupData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::CleanupData
EXTRN	?RemovalCallback@FalconEntity@@UAEHXZ:PROC	; FalconEntity::RemovalCallback
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?MakeDirty@FalconEntity@@QAEXW4Dirty_Class@@W4Dirtyness@@@Z:PROC ; FalconEntity::MakeDirty
EXTRN	??0TailInsertList@@QAE@PAVVuFilter@@@Z:PROC	; TailInsertList::TailInsertList
EXTRN	?ForcedInsert@TailInsertList@@QAEHPAVVuEntity@@@Z:PROC ; TailInsertList::ForcedInsert
EXTRN	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z:PROC	; FalconPrivateList::FalconPrivateList
EXTRN	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z:PROC ; FalconPrivateList::ForcedInsert
EXTRN	?Camp_GetCurrentTime@@YAKXZ:PROC		; Camp_GetCurrentTime
EXTRN	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z:PROC	; OpenCampFile
EXTRN	__ismbclower:PROC
EXTRN	?GetWeaponStrength@@YAHH@Z:PROC			; GetWeaponStrength
EXTRN	?GetWeaponHitChance@@YAHHHH@Z:PROC		; GetWeaponHitChance
EXTRN	?GetWeaponDamageType@@YAHH@Z:PROC		; GetWeaponDamageType
EXTRN	?GetWeaponFlags@@YAHH@Z:PROC			; GetWeaponFlags
EXTRN	?GetClassID@@YAHEEEEEEEE@Z:PROC			; GetClassID
EXTRN	?MapVisId@@YAKK@Z:PROC				; MapVisId
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z:PROC	; GetIdFromNamespace
EXTRN	?GetTeam@@YAEE@Z:PROC				; GetTeam
EXTRN	?SetOwner@CampBaseClass@@UAEXE@Z:PROC		; CampBaseClass::SetOwner
EXTRN	?SetComponents@CampBaseClass@@QAEXPAVTailInsertList@@@Z:PROC ; CampBaseClass::SetComponents
EXTRN	?SetDeagOwner@CampBaseClass@@QAEXVVU_ID@@@Z:PROC ; CampBaseClass::SetDeagOwner
EXTRN	??0CampBaseClass@@QAE@GK@Z:PROC			; CampBaseClass::CampBaseClass
EXTRN	??0CampBaseClass@@QAE@PAPAEPAJ@Z:PROC		; CampBaseClass::CampBaseClass
EXTRN	??1CampBaseClass@@UAE@XZ:PROC			; CampBaseClass::~CampBaseClass
EXTRN	?InitData@CampBaseClass@@UAEXXZ:PROC		; CampBaseClass::InitData
EXTRN	?SaveSize@CampBaseClass@@UAEHXZ:PROC		; CampBaseClass::SaveSize
EXTRN	?Save@CampBaseClass@@UAEHPAPAE@Z:PROC		; CampBaseClass::Save
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z:PROC	; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Remove@CampBaseClass@@QAEHXZ:PROC		; CampBaseClass::Remove
EXTRN	?SetAggregate@CampBaseClass@@QAEX_N@Z:PROC	; CampBaseClass::SetAggregate
EXTRN	?SetTacan@CampBaseClass@@QAEXH@Z:PROC		; CampBaseClass::SetTacan
EXTRN	?SetAwake@CampBaseClass@@QAEXH@Z:PROC		; CampBaseClass::SetAwake
EXTRN	?SetDelta@CampBaseClass@@QAEXH@Z:PROC		; CampBaseClass::SetDelta
EXTRN	?SetInSimLists@CampBaseClass@@QAEXH@Z:PROC	; CampBaseClass::SetInSimLists
EXTRN	?GetEntityClass@@YAFPAVVuEntity@@@Z:PROC	; GetEntityClass
EXTRN	?GetVisualDetectionRange@@YAHH@Z:PROC		; GetVisualDetectionRange
EXTRN	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z:PROC ; GetVehicleClassData
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?CloseCampFile@@YAXPAU_iobuf@@@Z:PROC		; CloseCampFile
EXTRN	?ReadCampFile@@YA?AUCampaignData@@PAD0@Z:PROC	; ReadCampFile
EXTRN	??0FalconCampEventMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconCampEventMessage::FalconCampEventMessage
EXTRN	?SendCampUIMessage@@YAXPAVFalconCampEventMessage@@@Z:PROC ; SendCampUIMessage
EXTRN	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ:PROC ; UnitClass::GetUnitClassData
EXTRN	?GetVehicleID@UnitClass@@QAEFH@Z:PROC		; UnitClass::GetVehicleID
EXTRN	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ:PROC ; UnitClass::GetCurrentUnitWP
EXTRN	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetFirstUnit
EXTRN	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetNextUnit
EXTRN	??0ATCBrain@@QAE@PAVObjectiveClass@@@Z:PROC	; ATCBrain::ATCBrain
EXTRN	??1ATCBrain@@QAE@XZ:PROC			; ATCBrain::~ATCBrain
EXTRN	?CanDetect@RadarRangeClass@@QAEHMMM@Z:PROC	; RadarRangeClass::CanDetect
EXTRN	?GetRadarRange@RadarRangeClass@@QAEMMMM@Z:PROC	; RadarRangeClass::GetRadarRange
EXTRN	??0FalconObjectiveMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconObjectiveMessage::FalconObjectiveMessage
EXTRN	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z:PROC ; FindObjective
EXTRN	??_EObjectiveClass@@UAEPAXI@Z:PROC		; ObjectiveClass::`vector deleting destructor'
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?DistSqu@@YAMMMMM@Z:PROC			; DistSqu
EXTRN	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z:PROC ; GetFeatureClassData
EXTRN	?GetFeatureRepairTime@@YAHH@Z:PROC		; GetFeatureRepairTime
EXTRN	?ReadNameString@@YAPADHPADI@Z:PROC		; ReadNameString
EXTRN	?AddName@@YAHPAD@Z:PROC				; AddName
EXTRN	?SetName@@YAHHPAD@Z:PROC			; SetName
EXTRN	?AddObjectToSim@@YAPAVSimBaseClass@@PAVSimInitDataClass@@H@Z:PROC ; AddObjectToSim
EXTRN	?SetRemoveSilentFlag@SimBaseClass@@QAEXXZ:PROC	; SimBaseClass::SetRemoveSilentFlag
EXTRN	?GetTTRelations@@YAHEE@Z:PROC			; GetTTRelations
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0FalconCampDataMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconCampDataMessage::FalconCampDataMessage
EXTRN	??0FalconSimCampMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconSimCampMessage::FalconSimCampMessage
EXTRN	?GetECMFlight@FlightClass@@QAEPAV1@XZ:PROC	; FlightClass::GetECMFlight
EXTRN	?CancelFlight@@YAXPAVFlightClass@@@Z:PROC	; CancelFlight
EXTRN	?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z:PROC ; AirTaskingManagerClass::SendATMMessage
EXTRN	?CheckHeaderStatus@@YAHPAVCampBaseClass@@H@Z:PROC ; CheckHeaderStatus
EXTRN	_LZSS_Compress:PROC
EXTRN	_LZSS_Expand:PROC
EXTRN	?InSessionBubble@FalconSessionEntity@@QAEHPAVFalconEntity@@M@Z:PROC ; FalconSessionEntity::InSessionBubble
EXTRN	?AddToCampFeatList@SimulationDriver@@QAEXPAVVuEntity@@@Z:PROC ; SimulationDriver::AddToCampFeatList
EXTRN	?RemoveFromCampFeatList@SimulationDriver@@QAEXPAVVuEntity@@@Z:PROC ; SimulationDriver::RemoveFromCampFeatList
EXTRN	?WakeCampaignBase@SimulationDriver@@QAEXHPAVCampBaseClass@@PAVTailInsertList@@@Z:PROC ; SimulationDriver::WakeCampaignBase
EXTRN	?SleepCampaignFlight@SimulationDriver@@QAEXPAVTailInsertList@@@Z:PROC ; SimulationDriver::SleepCampaignFlight
EXTRN	??0SimFeatureFilter@@QAE@XZ:PROC		; SimFeatureFilter::SimFeatureFilter
EXTRN	??1SimFeatureFilter@@UAE@XZ:PROC		; SimFeatureFilter::~SimFeatureFilter
EXTRN	?CleanupLinkedPersistantObjects@@YAXPAVFalconEntity@@HHH@Z:PROC ; CleanupLinkedPersistantObjects
EXTRN	?AddRunwayCraters@@YAXPAVObjectiveClass@@HH@Z:PROC ; AddRunwayCraters
EXTRN	?AddMissCraters@@YAXPAVFalconEntity@@H@Z:PROC	; AddMissCraters
EXTRN	?GetMEA@TMap@@QAEMMM@Z:PROC			; TMap::GetMEA
EXTRN	?ReadVersionNumber@@YAHPAD@Z:PROC		; ReadVersionNumber
EXTRN	?EvaluateKill@@YAXPAVFalconDeathMessage@@PAVSimBaseClass@@PAVCampBaseClass@@12@Z:PROC ; EvaluateKill
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?FeatureEntryDataTable@@3PAUFeatureEntry@@A:DWORD ; FeatureEntryDataTable
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?PtHeaderDataTable@@3PAUPtHeaderDataType@@A:DWORD ; PtHeaderDataTable
EXTRN	?DDP@@3PAUDirtyDataClassType@@A:DWORD		; DDP
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gDamageStatusBuffer@@3PAEA:BYTE		; gDamageStatusBuffer
EXTRN	?gDamageStatusPtr@@3PAEA:DWORD			; gDamageStatusPtr
EXTRN	?ObjectiveNS@@3VIdNamespace@@A:BYTE		; ObjectiveNS
EXTRN	?CampSearch@@3PAEA:BYTE				; CampSearch
EXTRN	?campCritical@@3PAUF4CSECTIONHANDLE@@A:DWORD	; campCritical
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?gCampDataVersion@@3HA:DWORD			; gCampDataVersion
EXTRN	?AllObjFilter@@3VObjFilter@@A:QWORD		; AllObjFilter
EXTRN	?AllUnitList@@3PAVVuLinkedList@@A:DWORD		; AllUnitList
EXTRN	?AllObjList@@3PAVVuLinkedList@@A:DWORD		; AllObjList
EXTRN	?AllCampList@@3PAVVuLinkedList@@A:DWORD		; AllCampList
EXTRN	?POList@@3PAVFalconPrivateOrderedList@@A:DWORD	; POList
EXTRN	?deaggregatedEntities@@3PAVVuHashTable@@A:DWORD	; deaggregatedEntities
EXTRN	?RealUnitProxList@@3PAVVuGridTree@@A:DWORD	; RealUnitProxList
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?PRIMARY_OBJ_PRIORITY@@3FA:WORD			; PRIMARY_OBJ_PRIORITY
EXTRN	?SECONDARY_OBJ_PRIORITY@@3FA:WORD		; SECONDARY_OBJ_PRIORITY
EXTRN	?MINIMUM_STRENGTH@@3FA:WORD			; MINIMUM_STRENGTH
EXTRN	?MAX_DAMAGE_TRIES@@3FA:WORD			; MAX_DAMAGE_TRIES
EXTRN	?REAGREGATION_RATIO@@3MA:DWORD			; REAGREGATION_RATIO
EXTRN	?ObjectiveStr@@3PAY0BE@DA:BYTE			; ObjectiveStr
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gLangIDNum@@3HA:DWORD				; gLangIDNum
EXTRN	?TheMap@@3VTMap@@A:BYTE				; TheMap
EXTRN	?RepairObjective@@3HA:DWORD			; RepairObjective
EXTRN	?DestroyObjective@@3HA:DWORD			; DestroyObjective
EXTRN	?AwakeCampaignEntities@@3HA:DWORD		; AwakeCampaignEntities
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@454cffae
CONST	SEGMENT
__real@454cffae DD 0454cffaer			; 3279.98
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40100000
CONST	SEGMENT
__real@40100000 DD 040100000r			; 2.25
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c8ef998
CONST	SEGMENT
__real@3c8ef998 DD 03c8ef998r			; 0.017453
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CampBaseClass@@8
rdata$r	SEGMENT
??_R2CampBaseClass@@8 DD FLAT:??_R1A@?0A@EA@CampBaseClass@@8 ; CampBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CampBaseClass@@8
rdata$r	SEGMENT
??_R3CampBaseClass@@8 DD 00H				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCampBaseClass@@@8
_DATA	SEGMENT
??_R0?AVCampBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; CampBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCampBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CampBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CampBaseClass@@8 DD FLAT:??_R0?AVCampBaseClass@@@8 ; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ObjectiveClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectiveClass@@8 DD FLAT:??_R0?AVObjectiveClass@@@8 ; ObjectiveClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectiveClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectiveClass@@8
rdata$r	SEGMENT
??_R2ObjectiveClass@@8 DD FLAT:??_R1A@?0A@EA@ObjectiveClass@@8 ; ObjectiveClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectiveClass@@8
rdata$r	SEGMENT
??_R3ObjectiveClass@@8 DD 00H				; ObjectiveClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ObjectiveClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectiveClass@@@8
_DATA	SEGMENT
??_R0?AVObjectiveClass@@@8 DD FLAT:??_7type_info@@6B@	; ObjectiveClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectiveClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectiveClass@@6B@
rdata$r	SEGMENT
??_R4ObjectiveClass@@6B@ DD 00H				; ObjectiveClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectiveClass@@@8
	DD	FLAT:??_R3ObjectiveClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHDMHGFL@obd?$AA@
CONST	SEGMENT
??_C@_03PHDMHGFL@obd?$AA@ DB 'obd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KOLCPHPM@?$CFs?5?$CFd?3?5error?5creating?5object?5fro@
CONST	SEGMENT
??_C@_0CK@KOLCPHPM@?$CFs?5?$CFd?3?5error?5creating?5object?5fro@ DB '%s %'
	DB	'd: error creating object from stream', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJKHBDDD@Objectiv?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@IJKHBDDD@Objectiv?4cpp?$AA@ DB 'Objectiv.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJLPFLNF@obj?$AA@
CONST	SEGMENT
??_C@_03GJLPFLNF@obj?$AA@ DB 'obj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEODDHCD@?$CFs?5de?5?$CFs?$AA@
CONST	SEGMENT
??_C@_08GEODDHCD@?$CFs?5de?5?$CFs?$AA@ DB '%s de %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKKEGLBA@?$CFs?5d?8?$CFs?$AA@
CONST	SEGMENT
??_C@_07JKKEGLBA@?$CFs?5d?8?$CFs?$AA@ DB '%s d''%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7ObjectiveClass@@6B@
CONST	SEGMENT
??_7ObjectiveClass@@6B@ DD FLAT:??_R4ObjectiveClass@@6B@ ; ObjectiveClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@ObjectiveClass@@UAEHXZ
	DD	FLAT:?Save@FalconEntity@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@ObjectiveClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@ObjectiveClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EObjectiveClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@VuEntity@@MAEHXZ
	DD	FLAT:?RemovalCallback@FalconEntity@@UAEHXZ
	DD	FLAT:?InitData@CampBaseClass@@UAEXXZ
	DD	FLAT:?CleanupData@FalconEntity@@UAEXXZ
	DD	FLAT:?IsSimBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?IsCampBase@CampBaseClass@@UAE_NXZ
	DD	FLAT:?Wake@ObjectiveClass@@UAEHXZ
	DD	FLAT:?Sleep@ObjectiveClass@@UAEHXZ
	DD	FLAT:?GetCampID@CampBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@ObjectiveClass@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@ObjectiveClass@@UAEHXZ
	DD	FLAT:?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@FalconEntity@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@FalconEntity@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@CampBaseClass@@UAEHXZ
	DD	FLAT:?GetVt@ObjectiveClass@@UBEMXZ
	DD	FLAT:?GetKias@ObjectiveClass@@UBEMXZ
	DD	FLAT:?GetMovementType@ObjectiveClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@ObjectiveClass@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?GetRCSFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetIRFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetRadarType@ObjectiveClass@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@ObjectiveClass@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?SetOwner@ObjectiveClass@@UAEXE@Z
	DD	FLAT:?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z
	DD	FLAT:?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z
	DD	FLAT:?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?InsertInSimLists@ObjectiveClass@@UAEXMM@Z
	DD	FLAT:?RemoveFromSimLists@ObjectiveClass@@UAEXXZ
	DD	FLAT:?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	DD	FLAT:?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	DD	FLAT:?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z
	DD	FLAT:?ApplyDamage@ObjectiveClass@@UAEHW4DamageDataType@@PAHHF@Z
	DD	FLAT:?ApplyDamage@ObjectiveClass@@UAEHPAVFalconCampWeaponsFire@@E@Z
	DD	FLAT:?DecodeDamageData@ObjectiveClass@@UAEHPAEPAVUnitClass@@PAVFalconDeathMessage@@@Z
	DD	FLAT:?CollectWeapons@CampBaseClass@@UAEHPAEW4MoveType@@QAFQAEH@Z
	DD	FLAT:?GetName@ObjectiveClass@@UAEPADPADHH@Z
	DD	FLAT:?GetFullName@ObjectiveClass@@UAEPADPADHH@Z
	DD	FLAT:?GetDivisionName@CampBaseClass@@UAEPADPADHH@Z
	DD	FLAT:?GetHitChance@ObjectiveClass@@UAEHHH@Z
	DD	FLAT:?GetAproxHitChance@ObjectiveClass@@UAEHHH@Z
	DD	FLAT:?GetCombatStrength@ObjectiveClass@@UAEHHH@Z
	DD	FLAT:?GetAproxCombatStrength@ObjectiveClass@@UAEHHH@Z
	DD	FLAT:?GetWeaponRange@ObjectiveClass@@UAEHHPAVFalconEntity@@@Z
	DD	FLAT:?GetAproxWeaponRange@ObjectiveClass@@UAEHH@Z
	DD	FLAT:?GetDetectionRange@ObjectiveClass@@UAEHH@Z
	DD	FLAT:?GetElectronicDetectionRange@ObjectiveClass@@UAEHH@Z
	DD	FLAT:?CanDetect@ObjectiveClass@@UAEHPAVFalconEntity@@@Z
	DD	FLAT:?StepRadar@CampBaseClass@@UAEHHHM@Z
	DD	FLAT:?GetNumberOfArcs@ObjectiveClass@@UAEHXZ
	DD	FLAT:?GetArcRatio@ObjectiveClass@@UAEMH@Z
	DD	FLAT:?GetArcRange@ObjectiveClass@@UAEMH@Z
	DD	FLAT:?GetArcAngle@ObjectiveClass@@UAEXHPAM0@Z
	DD	FLAT:?GetMissilesFlying@CampBaseClass@@UAEHXZ
	DD	FLAT:?SaveSize@ObjectiveClass@@UAEHH@Z
	DD	FLAT:?Save@ObjectiveClass@@UAEHPAPAEH@Z
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z$0
__unwindtable$?RepairObjectives@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RepairObjectives@@YAXXZ$0
__unwindtable$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z$0
__unwindtable$?LoadObjectiveDeltas@@YAHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadObjectiveDeltas@@YAHPAD@Z$0
__unwindtable$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z$0
__unwindtable$?NewObjective@@YAPAVObjectiveClass@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewObjective@@YAPAVObjectiveClass@@XZ$0
__unwindtable$?RecalculateParent@ObjectiveClass@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RecalculateParent@ObjectiveClass@@QAEXXZ$0
__unwindtable$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z$0
__unwindtable$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z$0
__unwindtable$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z$0
__unwindtable$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z$0
__unwindtable$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z$0
__unwindtable$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$0
__unwindtable$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z$0
__unwindtable$??1ObjectiveClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ObjectiveClass@@UAE@XZ$0
__unwindtable$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z$1
__unwindtable$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z$1
__unwindtable$?SaveBaseObjectives@@YAXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveBaseObjectives@@YAXPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveBaseObjectives@@YAXPAD@Z$1
__unwindtable$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z$1
__unwindtable$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$1
__unwindtable$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$1
__unwindtable$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z$1
__unwindtable$??0ObjectiveClass@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectiveClass@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ObjectiveClass@@QAE@H@Z$1
__unwindtable$??0ObjectiveClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectiveClass@@QAE@PAPAEPAJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ObjectiveClass@@QAE@PAPAEPAJ@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0ObjectiveClass@@QAE@PAPAEPAJ@Z$2
__ehfuncinfo$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RepairObjectives@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RepairObjectives@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SaveBaseObjectives@@YAXPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SaveBaseObjectives@@YAXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?LoadObjectiveDeltas@@YAHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadObjectiveDeltas@@YAHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?NewObjective@@YAPAVObjectiveClass@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewObjective@@YAPAVObjectiveClass@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RecalculateParent@ObjectiveClass@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RecalculateParent@ObjectiveClass@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1ObjectiveClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ObjectiveClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0ObjectiveClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ObjectiveClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0ObjectiveClass@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ObjectiveClass@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 8
$T2 = -16						; size = 8
_i$ = -8						; size = 4
_n$ = -4						; size = 4
_o$ = 8							; size = 4
_p$ = 12						; size = 4
_list$ = 16						; size = 4
_maxdist$ = 20						; size = 4
_level$ = 24						; size = 4
_flags$ = 28						; size = 4
?AddChildObjectives@@YAXPAVObjectiveClass@@0PAVFalconPrivateList@@HHH@Z PROC ; AddChildObjectives

; 2759 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2760 : 	Objective	n;
; 2761 : 	int			i;
; 2762 : 
; 2763 : 	o->SetObjectiveScore((short)level);

	movzx	eax, WORD PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetObjectiveScore@ObjectiveClass@@QAEXF@Z ; ObjectiveClass::SetObjectiveScore

; 2764 : 	if (!CampSearch[o->GetCampID()])

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	movzx	edx, BYTE PTR ?CampSearch@@3PAEA[ecx]
	test	edx, edx
	jne	SHORT $LN10@AddChildOb

; 2765 : 		list->ForcedInsert(o);

	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert
$LN10@AddChildOb:

; 2766 : 	CampSearch[o->GetCampID()] = 1;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	mov	BYTE PTR ?CampSearch@@3PAEA[ecx], 1

; 2767 : 	if (!maxdist)

	cmp	DWORD PTR _maxdist$[ebp], 0
	jne	SHORT $LN9@AddChildOb

; 2768 : 		return;

	jmp	$LN11@AddChildOb
$LN9@AddChildOb:

; 2769 : 	for (i=0; i<o->static_data.links; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@AddChildOb
$LN7@AddChildOb:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@AddChildOb:
	mov	eax, DWORD PTR _o$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN11@AddChildOb

; 2770 : 	{
; 2771 : 		n = o->GetNeighbor(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _n$[ebp], eax

; 2772 : 		if (!n || (CampSearch[n->GetCampID()] && n->GetObjectiveScore() <= level+1))

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN4@AddChildOb
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	movzx	edx, BYTE PTR ?CampSearch@@3PAEA[ecx]
	test	edx, edx
	je	SHORT $LN5@AddChildOb
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetObjectiveScore@ObjectiveClass@@QAEHXZ ; ObjectiveClass::GetObjectiveScore
	mov	ecx, DWORD PTR _level$[ebp]
	add	ecx, 1
	cmp	eax, ecx
	jg	SHORT $LN5@AddChildOb
$LN4@AddChildOb:

; 2773 : 			continue;

	jmp	SHORT $LN7@AddChildOb
$LN5@AddChildOb:

; 2774 : 		if (flags & FIND_THISOBJONLY && n->GetObjectiveParentID() != p->Id())

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 256				; 00000100H
	je	SHORT $LN3@AddChildOb
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ ; ObjectiveClass::GetObjectiveParentID
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@AddChildOb

; 2775 : 			continue;

	jmp	$LN7@AddChildOb
$LN3@AddChildOb:

; 2776 : 		if (flags & FIND_STANDARDONLY && n->IsSecondary())

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN2@AddChildOb
	mov	ecx, DWORD PTR _n$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN2@AddChildOb

; 2777 : 			continue;

	jmp	$LN7@AddChildOb
$LN2@AddChildOb:

; 2778 : 		if (flags & FIND_FINDFRIENDLY && !GetRoE(o->GetTeam(),n->GetTeam(),ROE_GROUND_MOVE))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@AddChildOb
	push	2
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@AddChildOb

; 2779 : 			continue;

	jmp	$LN7@AddChildOb
$LN1@AddChildOb:

; 2780 : 		AddChildObjectives(n, p, list, maxdist-1, level+1, flags);

	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _level$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _maxdist$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	?AddChildObjectives@@YAXPAVObjectiveClass@@0PAVFalconPrivateList@@HHH@Z ; AddChildObjectives
	add	esp, 24					; 00000018H

; 2781 : 	}

	jmp	$LN7@AddChildOb
$LN11@AddChildOb:

; 2782 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddChildObjectives@@YAXPAVObjectiveClass@@0PAVFalconPrivateList@@HHH@Z ENDP ; AddChildObjectives
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Status@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Status@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::Status, COMDAT
; _this$ = ecx

; 192  : 	int Status() const { return specialData.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+176]
	mov	esp, ebp
	pop	ebp
	ret	0
?Status@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::Status
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetSlot@SimBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSlot@SimBaseClass@@QAEHXZ PROC			; SimBaseClass::GetSlot, COMDAT
; _this$ = ecx

; 155  : 	int GetSlot () { return slotNumber;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+236]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSlot@SimBaseClass@@QAEHXZ ENDP			; SimBaseClass::GetSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_vuid$ = -36						; size = 8
$T1 = -28						; size = 4
_bufhead$ = -24						; size = 4
$T2 = -20						; size = 4
_o$ = -16						; size = 4
_size$ = -12						; size = 4
_buf$ = -8						; size = 4
_count$ = -4						; size = 2
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
___formal$ = 16						; size = 4
?DecodeObjectiveDeltas@@YAHPAPAEPAJPAVFalconSessionEntity@@@Z PROC ; DecodeObjectiveDeltas

; 2999 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 3000 : 	long            size;
; 3001 : 	short			count;
; 3002 : 	VU_ID			vuid;

	lea	ecx, DWORD PTR _vuid$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 3003 : 	Objective		o;
; 3004 : 	VU_BYTE			*buf,*bufhead;
; 3005 : 
; 3006 : 	memcpychk(&count, stream, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 3007 : 	memcpychk(&size, stream, sizeof(long), rem);  

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 3008 : 
; 3009 : 	buf = new VU_BYTE[size];

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _buf$[ebp], ecx

; 3010 : 	bufhead = buf;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _bufhead$[ebp], edx

; 3011 : 	if (LZSS_Expand(*stream, rem[0], buf, size) < 0){

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_LZSS_Expand
	add	esp, 16					; 00000010H

; 3012 : //		char err[200];
; 3013 : //		sprintf(err, "%s %d: error expanding data", __FILE__, __LINE__);
; 3014 : //		throw std::InvalidBufferException(err);
; 3015 : 	}
; 3016 : 	//our new buffer is size size
; 3017 : 	rem[0] = size;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+ecx], eax
$LN4@DecodeObje:

; 3018 : 
; 3019 : 	while (count) {

	movsx	ecx, WORD PTR _count$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@DecodeObje

; 3020 : 		
; 3021 : 		memcpychk(&vuid, &buf, sizeof(VU_ID), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	8
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vuid$[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 3022 : 		o = FindObjective(vuid);

	mov	edx, DWORD PTR _vuid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _vuid$[ebp]
	push	eax
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	DWORD PTR _o$[ebp], eax

; 3023 : 
; 3024 : 		ShiAssert (o);
; 3025 : 
; 3026 : 		if (o) {

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN2@DecodeObje

; 3027 : 			o->UpdateFromData(&buf, rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?UpdateFromData@ObjectiveClass@@QAEXPAPAEPAJ@Z ; ObjectiveClass::UpdateFromData

; 3028 : 			count --;

	mov	ax, WORD PTR _count$[ebp]
	sub	ax, 1
	mov	WORD PTR _count$[ebp], ax

; 3029 : 		}
; 3030 : 		else {

	jmp	SHORT $LN1@DecodeObje
$LN2@DecodeObje:

; 3031 : 			count = 0;

	xor	ecx, ecx
	mov	WORD PTR _count$[ebp], cx
$LN1@DecodeObje:

; 3032 : 		}
; 3033 : 	}

	jmp	SHORT $LN4@DecodeObje
$LN3@DecodeObje:

; 3034 : 	delete bufhead;

	mov	edx, DWORD PTR _bufhead$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 3035 : 	return 0;

	xor	eax, eax

; 3036 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecodeObjectiveDeltas@@YAHPAPAEPAJPAVFalconSessionEntity@@@Z ENDP ; DecodeObjectiveDeltas
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -128						; size = 12
_myit$3 = -116						; size = 12
$T4 = -104						; size = 8
$T5 = -96						; size = 8
$T6 = -88						; size = 8
$T7 = -80						; size = 8
_vuid$ = -72						; size = 8
_ownerid$ = -64						; size = 8
_newsize$ = -56						; size = 4
$T8 = -52						; size = 4
$T9 = -48						; size = 4
$T10 = -44						; size = 4
_bufhead$ = -40						; size = 4
_size$ = -36						; size = 4
_buf$ = -32						; size = 4
_sptr$ = -28						; size = 4
_o$ = -24						; size = 4
_ent$ = -20						; size = 4
_count$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_owner$ = 12						; size = 4
?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z PROC ; EncodeObjectiveDeltas

; 2927 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2928 : 	long            size=0,newsize;

	mov	DWORD PTR _size$[ebp], 0

; 2929 : 	short			count=0;

	xor	eax, eax
	mov	WORD PTR _count$[ebp], ax

; 2930 : 	Objective		o;
; 2931 : 	CampEntity		ent;
; 2932 : 	VU_BYTE			*buf,*sptr,*bufhead;
; 2933 : 	VU_ID			vuid,ownerid;

	lea	ecx, DWORD PTR _vuid$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	lea	ecx, DWORD PTR _ownerid$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 2934 : 
; 2935 : 	if (owner){

	cmp	DWORD PTR _owner$[ebp], 0
	je	SHORT $LN11@EncodeObje

; 2936 : 		ownerid = owner->Id();

	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _owner$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _ownerid$[ebp], edx
	mov	DWORD PTR _ownerid$[ebp+4], eax
$LN11@EncodeObje:

; 2937 : 	}
; 2938 : 
; 2939 : 	// Count size of dirty objectives changable data
; 2940 : 	{
; 2941 : 		// Use AllCamp iterator - just in case we don't have an ObjList (Dogfight)
; 2942 : 		VuListIterator	myit(AllCampList);

	mov	ecx, DWORD PTR ?AllCampList@@3PAVVuLinkedList@@A ; AllCampList
	push	ecx
	lea	ecx, DWORD PTR _myit$3[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2943 : 		ent = (CampEntity) myit.GetFirst();	

	lea	ecx, DWORD PTR _myit$3[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _ent$[ebp], eax
$LN10@EncodeObje:

; 2944 : 		while (ent){

	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN9@EncodeObje

; 2945 : 			if (
; 2946 : 				(ent->EntityType())->classInfo_[VU_CLASS] == CLASS_OBJECTIVE && 
; 2947 : 				(!owner || ent->OwnerId() == ownerid)
; 2948 : 			){

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 4
	jne	SHORT $LN8@EncodeObje
	cmp	DWORD PTR _owner$[ebp], 0
	je	SHORT $LN7@EncodeObje
	lea	ecx, DWORD PTR _ownerid$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@EncodeObje
$LN7@EncodeObje:

; 2949 : 				o = (Objective)ent;

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	DWORD PTR _o$[ebp], ecx

; 2950 : 				if (o->HasDelta())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?HasDelta@CampBaseClass@@QAEHXZ		; CampBaseClass::HasDelta
	test	eax, eax
	je	SHORT $LN8@EncodeObje

; 2951 : 				{
; 2952 : 					size += sizeof(VU_ID) + o->SaveSize(1);

	push	1
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+452]
	call	edx
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _size$[ebp], edx

; 2953 : 					count++;

	mov	ax, WORD PTR _count$[ebp]
	add	ax, 1
	mov	WORD PTR _count$[ebp], ax
$LN8@EncodeObje:

; 2954 : 				}
; 2955 : 			}
; 2956 : 			ent = (CampEntity) myit.GetNext();

	lea	ecx, DWORD PTR _myit$3[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _ent$[ebp], eax

; 2957 : 		}

	jmp	$LN10@EncodeObje
$LN9@EncodeObje:

; 2958 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$3[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 2959 : 
; 2960 : 	buf = new VU_BYTE[size+1];

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 1
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR _buf$[ebp], edx

; 2961 : 	bufhead = buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _bufhead$[ebp], eax

; 2962 : 
; 2963 : 	// Encode the data
; 2964 : 	{
; 2965 : 		VuListIterator	myit(AllObjList);

	mov	ecx, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	ecx
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2966 : 		ent = (CampEntity) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _ent$[ebp], eax
$LN5@EncodeObje:

; 2967 : 		while (ent) 

	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN4@EncodeObje

; 2968 : 		{
; 2969 : 			if (
; 2970 : 				(ent->EntityType())->classInfo_[VU_CLASS] == CLASS_OBJECTIVE &&
; 2971 : 				(!owner || ent->OwnerId() == ownerid)
; 2972 : 			){

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 4
	jne	SHORT $LN3@EncodeObje
	cmp	DWORD PTR _owner$[ebp], 0
	je	SHORT $LN2@EncodeObje
	lea	ecx, DWORD PTR _ownerid$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@EncodeObje
$LN2@EncodeObje:

; 2973 : 				o = (Objective)ent;

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	DWORD PTR _o$[ebp], ecx

; 2974 : 				if (o->HasDelta())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?HasDelta@CampBaseClass@@QAEHXZ		; CampBaseClass::HasDelta
	test	eax, eax
	je	SHORT $LN3@EncodeObje

; 2975 : 				{
; 2976 : 					vuid = o->Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vuid$[ebp], ecx
	mov	DWORD PTR _vuid$[ebp+4], edx

; 2977 : 					memcpy(buf, &vuid, sizeof(VU_ID));							buf += sizeof(VU_ID);		

	push	8
	lea	eax, DWORD PTR _vuid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, 8
	mov	DWORD PTR _buf$[ebp], edx

; 2978 : 					o->Save(&buf,1);

	push	1
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+456]
	call	eax
$LN3@EncodeObje:

; 2979 : 				}
; 2980 : 			}
; 2981 : 			ent = (CampEntity) myit.GetNext();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _ent$[ebp], eax

; 2982 : 		}

	jmp	$LN5@EncodeObje
$LN4@EncodeObje:

; 2983 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 2984 : 
; 2985 : 	// Compress it and return
; 2986 : 	*stream = new VU_BYTE[size + sizeof(short) + sizeof(long) + MAX_POSSIBLE_OVERWRITE];

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 106				; 0000006aH
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx], eax

; 2987 : 	sptr = *stream;

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _sptr$[ebp], edx

; 2988 : 	memcpy(sptr, &count, sizeof(short));			sptr += sizeof(short);

	push	2
	lea	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 2989 : 	memcpy(sptr, &size, sizeof(long));				sptr += sizeof(long);

	push	4
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _sptr$[ebp], edx

; 2990 : 	buf = bufhead;

	mov	eax, DWORD PTR _bufhead$[ebp]
	mov	DWORD PTR _buf$[ebp], eax

; 2991 : 	newsize = LZSS_Compress(buf, sptr, size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_LZSS_Compress
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newsize$[ebp], eax

; 2992 : 	delete bufhead;

	mov	ecx, DWORD PTR _bufhead$[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, DWORD PTR $T8[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2993 : 
; 2994 : 	return newsize + sizeof(short) + sizeof(long);

	mov	eax, DWORD PTR _newsize$[ebp]
	add	eax, 6

; 2995 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z$0:
	lea	ecx, DWORD PTR _myit$3[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z$1:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z ENDP ; EncodeObjectiveDeltas
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_fit$ = -136						; size = 60
$T2 = -76						; size = 8
$T3 = -68						; size = 8
$T4 = -60						; size = 8
_vuid$ = -52						; size = 8
$T5 = -44						; size = 4
tv160 = -40						; size = 4
$T6 = -36						; size = 4
tv156 = -32						; size = 4
_f$7 = -28						; size = 4
_unit$ = -24						; size = 4
_newEvent$ = -20					; size = 4
_newown$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_co$ = 8						; size = 4
_who$ = 12						; size = 1
_u$ = 16						; size = 4
?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z PROC ; CaptureObjective

; 2860 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2861 : 	FalconCampEventMessage	*newEvent;
; 2862 : 	VU_ID					vuid;

	lea	ecx, DWORD PTR _vuid$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 2863 : 	Team					newown;
; 2864 : 	Unit					unit;
; 2865 : #ifdef VU_GRID_TREE_Y_MAJOR
; 2866 : 	VuGridIterator			fit(RealUnitProxList,co->YPos(),co->XPos(),5000.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _co$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _co$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	eax
	lea	ecx, DWORD PTR _fit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2867 : #else
; 2868 : 	VuGridIterator			fit(RealUnitProxList,co->XPos(),co->YPos(),5000.0F);
; 2869 : #endif
; 2870 : 
; 2871 : 	if (u){

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN13@CaptureObj

; 2872 : 		vuid = u->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _u$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _vuid$[ebp], edx
	mov	DWORD PTR _vuid$[ebp+4], eax

; 2873 : 	}
; 2874 : 	else{

	jmp	SHORT $LN12@CaptureObj
$LN13@CaptureObj:

; 2875 : 		vuid = co->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _co$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _vuid$[ebp], edx
	mov	DWORD PTR _vuid$[ebp+4], eax
$LN12@CaptureObj:

; 2876 : 	}
; 2877 : 
; 2878 : 	newEvent = new FalconCampEventMessage(vuid, FalconLocalGame);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN18@CaptureObj
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@CaptureObj
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN17@CaptureObj
$LN16@CaptureObj:
	mov	DWORD PTR tv156[ebp], 0
$LN17@CaptureObj:
	push	1
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	mov	eax, DWORD PTR _vuid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _vuid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0FalconCampEventMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconCampEventMessage::FalconCampEventMessage
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN19@CaptureObj
$LN18@CaptureObj:
	mov	DWORD PTR tv160[ebp], 0
$LN19@CaptureObj:
	mov	edx, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR _newEvent$[ebp], eax

; 2879 : 	if (!GetRoE(GetTeam(who),GetTeam(co->GetObjectiveOldown()),ROE_GROUND_CAPTURE))

	push	3
	mov	ecx, DWORD PTR _co$[ebp]
	call	?GetObjectiveOldown@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveOldown
	movzx	ecx, al
	push	ecx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	movzx	edx, al
	push	edx
	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	movzx	ecx, al
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN11@CaptureObj

; 2880 : 	{
; 2881 : 		newown = ::GetTeam(co->GetObjectiveOldown());

	mov	ecx, DWORD PTR _co$[ebp]
	call	?GetObjectiveOldown@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveOldown
	movzx	edx, al
	push	edx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	mov	BYTE PTR _newown$[ebp], al

; 2882 : 		newEvent->dataBlock.data.formatId = 1831;

	mov	eax, 1831				; 00000727H
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+56], ax

; 2883 : 	}
; 2884 : 	else

	jmp	SHORT $LN10@CaptureObj
$LN11@CaptureObj:

; 2885 : 	{
; 2886 : 		newown = ::GetTeam(who);

	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	mov	BYTE PTR _newown$[ebp], al

; 2887 : 		newEvent->dataBlock.data.formatId = 1830;

	mov	eax, 1830				; 00000726H
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+56], ax
$LN10@CaptureObj:

; 2888 : 	}
; 2889 : 	co->SetDelta(1);

	push	1
	mov	ecx, DWORD PTR _co$[ebp]
	call	?SetDelta@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetDelta

; 2890 : 	co->SendObjMessage(vuid,FalconObjectiveMessage::objCaptured,newown,0,0);

	push	0
	push	0
	movzx	dx, BYTE PTR _newown$[ebp]
	movzx	eax, dx
	push	eax
	push	0
	mov	ecx, DWORD PTR _vuid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _vuid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _co$[ebp]
	call	?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z ; ObjectiveClass::SendObjMessage

; 2891 : 	newEvent->dataBlock.team = GetTeam(who);

	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	BYTE PTR [ecx+53], al

; 2892 : 	newEvent->dataBlock.eventType = FalconCampEventMessage::objectiveCaptured;

	mov	edx, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [edx+48], 8

; 2893 : 	co->GetLocation(&newEvent->dataBlock.data.xLoc,&newEvent->dataBlock.data.yLoc);

	mov	eax, DWORD PTR _newEvent$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _newEvent$[ebp]
	add	ecx, 58					; 0000003aH
	push	ecx
	mov	ecx, DWORD PTR _co$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2894 : 	newEvent->dataBlock.data.vuIds[0] = co->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _co$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	imul	eax, 0
	mov	esi, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [esi+eax+64], ecx
	mov	DWORD PTR [esi+eax+68], edx

; 2895 : 	newEvent->dataBlock.data.owners[0] = who;

	movzx	cx, BYTE PTR _who$[ebp]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [eax+edx+80], cx

; 2896 : 	newEvent->dataBlock.data.owners[1] = newown;

	movzx	cx, BYTE PTR _newown$[ebp]
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [eax+edx+80], cx

; 2897 : 	SendCampUIMessage(newEvent);

	mov	ecx, DWORD PTR _newEvent$[ebp]
	push	ecx
	call	?SendCampUIMessage@@YAXPAVFalconCampEventMessage@@@Z ; SendCampUIMessage
	add	esp, 4

; 2898 : 
; 2899 : 	// sfr: we should check if this is an airbase.
; 2900 : 	if ((co->GetType() == TYPE_AIRBASE) || (co->GetType() == TYPE_AIRSTRIP)){

	mov	ecx, DWORD PTR _co$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN8@CaptureObj
	mov	ecx, DWORD PTR _co$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 2
	jne	$LN5@CaptureObj
$LN8@CaptureObj:

; 2901 : 		// if it is, we should remove all flights belonging to it which hav not taken off
; 2902 : 		// Now remove any enemy flights which are based here and have not taken off yet
; 2903 : 		for (unit = (Unit) fit.GetFirst(); (unit != NULL); unit = (Unit) fit.GetNext()){

	lea	ecx, DWORD PTR _fit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _unit$[ebp], eax
	jmp	SHORT $LN7@CaptureObj
$LN6@CaptureObj:
	lea	ecx, DWORD PTR _fit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _unit$[ebp], eax
$LN7@CaptureObj:
	cmp	DWORD PTR _unit$[ebp], 0
	je	$LN5@CaptureObj

; 2904 : 			FlightClass *f;
; 2905 : 			if ((unit == NULL) || (!unit->IsFlight())){

	cmp	DWORD PTR _unit$[ebp], 0
	je	SHORT $LN3@CaptureObj
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@CaptureObj
$LN3@CaptureObj:

; 2906 : 				continue;

	jmp	SHORT $LN6@CaptureObj
$LN4@CaptureObj:

; 2907 : 			}
; 2908 : 			f = (FlightClass*)unit;

	mov	ecx, DWORD PTR _unit$[ebp]
	mov	DWORD PTR _f$7[ebp], ecx

; 2909 : 			if (
; 2910 : 				(GetRoE(newown,unit->GetTeam(),ROE_GROUND_CAPTURE) == ROE_ALLOWED) &&
; 2911 : 				(f->GetUnitAirbase() == co) && 
; 2912 : 				((f->GetCurrentUnitWP() == NULL) || (f->GetCurrentUnitWP()->GetWPAction() == WP_TAKEOFF)) &&
; 2913 : 				(f->IsAggregate())
; 2914 : 			){

	push	3
	mov	edx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	movzx	ecx, BYTE PTR _newown$[ebp]
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN2@CaptureObj
	mov	edx, DWORD PTR _f$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$7[ebp]
	mov	edx, DWORD PTR [eax+704]
	call	edx
	cmp	eax, DWORD PTR _co$[ebp]
	jne	SHORT $LN2@CaptureObj
	mov	ecx, DWORD PTR _f$7[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	test	eax, eax
	je	SHORT $LN1@CaptureObj
	mov	ecx, DWORD PTR _f$7[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	ecx, eax
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	SHORT $LN2@CaptureObj
$LN1@CaptureObj:
	mov	ecx, DWORD PTR _f$7[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN2@CaptureObj

; 2915 : 				//sfr: placed CancelFlight back and agged check
; 2916 : 				CancelFlight((Flight)unit);

	mov	eax, DWORD PTR _unit$[ebp]
	push	eax
	call	?CancelFlight@@YAXPAVFlightClass@@@Z	; CancelFlight
	add	esp, 4
$LN2@CaptureObj:

; 2917 : 			}
; 2918 : 		}	

	jmp	$LN6@CaptureObj
$LN5@CaptureObj:

; 2919 : 	}
; 2920 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z$0:
	lea	ecx, DWORD PTR _fit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__unwindfunclet$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CaptureObjective@@YAXPAVObjectiveClass@@EPAVUnitClass@@@Z ENDP ; CaptureObjective
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_e$ = -4						; size = 4
_l$ = 8							; size = 4
?GetNextObjective@@YAPAVObjectiveClass@@PAVVuGridIterator@@@Z PROC ; GetNextObjective

; 2842 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2843 : 	VuEntity*	e;
; 2844 : 
; 2845 : 	e = l->GetNext();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax
$LN3@GetNextObj:

; 2846 : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetNextObj

; 2847 : 	{
; 2848 : 		if (GetEntityClass(e) == CLASS_OBJECTIVE)

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	movsx	ecx, ax
	cmp	ecx, 4
	jne	SHORT $LN1@GetNextObj

; 2849 : 			return (Objective)e;

	mov	eax, DWORD PTR _e$[ebp]
	jmp	SHORT $LN4@GetNextObj
$LN1@GetNextObj:

; 2850 : 		e = l->GetNext();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 2851 : 	}

	jmp	SHORT $LN3@GetNextObj
$LN2@GetNextObj:

; 2852 : 	return NULL;

	xor	eax, eax
$LN4@GetNextObj:

; 2853 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextObjective@@YAPAVObjectiveClass@@PAVVuGridIterator@@@Z ENDP ; GetNextObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_e$ = -4						; size = 4
_l$ = 8							; size = 4
?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuGridIterator@@@Z PROC ; GetFirstObjective

; 2828 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2829 : 	VuEntity*	e;
; 2830 : 
; 2831 : 	e = l->GetFirst();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN3@GetFirstOb:

; 2832 : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetFirstOb

; 2833 : 	{
; 2834 : 		if (GetEntityClass(e) == CLASS_OBJECTIVE)

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	movsx	ecx, ax
	cmp	ecx, 4
	jne	SHORT $LN1@GetFirstOb

; 2835 : 			return (Objective)e;

	mov	eax, DWORD PTR _e$[ebp]
	jmp	SHORT $LN4@GetFirstOb
$LN1@GetFirstOb:

; 2836 : 		e = l->GetNext();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 2837 : 	}

	jmp	SHORT $LN3@GetFirstOb
$LN2@GetFirstOb:

; 2838 : 	return NULL;

	xor	eax, eax
$LN4@GetFirstOb:

; 2839 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuGridIterator@@@Z ENDP ; GetFirstObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_e$ = -4						; size = 4
_l$ = 8							; size = 4
?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z PROC ; GetNextObjective

; 2814 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2815 : 	VuEntity*	e;
; 2816 : 
; 2817 : 	e = l->GetNext();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax
$LN3@GetNextObj:

; 2818 : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetNextObj

; 2819 : 	{
; 2820 : 		if (GetEntityClass(e) == CLASS_OBJECTIVE)

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	movsx	ecx, ax
	cmp	ecx, 4
	jne	SHORT $LN1@GetNextObj

; 2821 : 			return (Objective)e;

	mov	eax, DWORD PTR _e$[ebp]
	jmp	SHORT $LN4@GetNextObj
$LN1@GetNextObj:

; 2822 : 		e = l->GetNext();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 2823 : 	}

	jmp	SHORT $LN3@GetNextObj
$LN2@GetNextObj:

; 2824 : 	return NULL;

	xor	eax, eax
$LN4@GetNextObj:

; 2825 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ENDP ; GetNextObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_e$ = -4						; size = 4
_l$ = 8							; size = 4
?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z PROC ; GetFirstObjective

; 2800 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2801 : 	VuEntity*	e;
; 2802 : 
; 2803 : 	e = l->GetFirst();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN3@GetFirstOb:

; 2804 : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetFirstOb

; 2805 : 	{
; 2806 : 		if (GetEntityClass(e) == CLASS_OBJECTIVE)

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	movsx	ecx, ax
	cmp	ecx, 4
	jne	SHORT $LN1@GetFirstOb

; 2807 : 			return (Objective)e;

	mov	eax, DWORD PTR _e$[ebp]
	jmp	SHORT $LN4@GetFirstOb
$LN1@GetFirstOb:

; 2808 : 		e = l->GetNext();

	mov	ecx, DWORD PTR _l$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 2809 : 	}

	jmp	SHORT $LN3@GetFirstOb
$LN2@GetFirstOb:

; 2810 : 	return NULL;

	xor	eax, eax
$LN4@GetFirstOb:

; 2811 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ENDP ; GetFirstObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv80 = -24						; size = 4
$T3 = -20						; size = 4
_list$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_o$ = 8							; size = 4
_maxdist$ = 12						; size = 4
_flags$ = 16						; size = 4
?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z PROC ; GetChildObjectives

; 2785 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2786 : 	F4PFList	list;
; 2787 : 
; 2788 : 	if (!o)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN2@GetChildOb

; 2789 : 		return NULL;

	xor	eax, eax
	jmp	$LN3@GetChildOb
$LN2@GetChildOb:

; 2790 : 	memset(CampSearch,0,MAX_CAMP_ENTITIES);

	push	28000					; 00006d60H
	push	0
	push	OFFSET ?CampSearch@@3PAEA		; CampSearch
	call	_memset
	add	esp, 12					; 0000000cH

; 2791 : 	list = new FalconPrivateList(&AllObjFilter);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@GetChildOb
	push	OFFSET ?AllObjFilter@@3VObjFilter@@A	; AllObjFilter
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z ; FalconPrivateList::FalconPrivateList
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN6@GetChildOb
$LN5@GetChildOb:
	mov	DWORD PTR tv80[ebp], 0
$LN6@GetChildOb:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _list$[ebp], ecx

; 2792 : 	if (!list)

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN1@GetChildOb

; 2793 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetChildOb
$LN1@GetChildOb:

; 2794 : 	list->Register();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Register@VuCollection@@QAEXXZ		; VuCollection::Register

; 2795 : 	AddChildObjectives(o,o,list,maxdist,0,flags);

	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _maxdist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	call	?AddChildObjectives@@YAXPAVObjectiveClass@@0PAVFalconPrivateList@@HHH@Z ; AddChildObjectives
	add	esp, 24					; 00000018H

; 2796 : 	return list;

	mov	eax, DWORD PTR _list$[ebp]
$LN3@GetChildOb:

; 2797 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetChildObjectives@@YAPAVFalconPrivateList@@PAVObjectiveClass@@HH@Z ENDP ; GetChildObjectives
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$ = -28						; size = 12
_o$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?RepairObjectives@@YAXXZ PROC				; RepairObjectives

; 2747 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RepairObjectives@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2748 : 	Objective      o;
; 2749 : 	VuListIterator	myit(AllObjList);

	mov	eax, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2750 : 	o = GetFirstObjective(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN2@RepairObje:

; 2751 : 	while (o != NULL){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN1@RepairObje

; 2752 : 		o->Repair();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?Repair@ObjectiveClass@@QAEXXZ		; ObjectiveClass::Repair

; 2753 : 		o = GetNextObjective(&myit);

	lea	edx, DWORD PTR _myit$[ebp]
	push	edx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 2754 : 	}

	jmp	SHORT $LN2@RepairObje
$LN1@RepairObje:

; 2755 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RepairObjectives@@YAXXZ$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?RepairObjectives@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RepairObjectives@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RepairObjectives@@YAXXZ ENDP				; RepairObjectives
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_s$ = -20						; size = 4
_bf$ = -16						; size = 4
_best$ = -12						; size = 4
_score$ = -8						; size = 4
_f$ = -4						; size = 4
_o$ = 8							; size = 4
_targeted$ = 12						; size = 4
?BestTargetFeature@@YAHPAVObjectiveClass@@QAE@Z PROC	; BestTargetFeature

; 2723 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2724 : 	int					score,best=0;

	mov	DWORD PTR _best$[ebp], 0

; 2725 : 	int					s,f,bf=0;

	mov	DWORD PTR _bf$[ebp], 0

; 2726 : 
; 2727 : 	// Find 'quickest fix'. That is, the feature which will give us the most operational
; 2728 : 	// percentage in the shortest time.
; 2729 : 	for (f=0; f<o->GetTotalFeatures(); f++)

	mov	DWORD PTR _f$[ebp], 0
	jmp	SHORT $LN5@BestTarget
$LN4@BestTarget:
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
$LN5@BestTarget:
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetTotalFeatures@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetTotalFeatures
	movsx	ecx, ax
	cmp	DWORD PTR _f$[ebp], ecx
	jge	SHORT $LN3@BestTarget

; 2730 : 	{
; 2731 : 		s = o->GetFeatureStatus(f);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	mov	DWORD PTR _s$[ebp], eax

; 2732 : 		if (s != VIS_DESTROYED && targeted && !targeted[f])

	cmp	DWORD PTR _s$[ebp], 3
	je	SHORT $LN2@BestTarget
	cmp	DWORD PTR _targeted$[ebp], 0
	je	SHORT $LN2@BestTarget
	mov	eax, DWORD PTR _targeted$[ebp]
	add	eax, DWORD PTR _f$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@BestTarget

; 2733 : 		{
; 2734 : 			score = o->GetFeatureValue(f);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	mov	DWORD PTR _score$[ebp], eax

; 2735 : 			if (score > best)

	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR _best$[ebp]
	jle	SHORT $LN2@BestTarget

; 2736 : 			{
; 2737 : 				best = score;

	mov	ecx, DWORD PTR _score$[ebp]
	mov	DWORD PTR _best$[ebp], ecx

; 2738 : 				bf = f;

	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _bf$[ebp], edx
$LN2@BestTarget:

; 2739 : 			}
; 2740 : 		}
; 2741 : 	}

	jmp	SHORT $LN4@BestTarget
$LN3@BestTarget:

; 2742 : 	return bf;

	mov	eax, DWORD PTR _bf$[ebp]

; 2743 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?BestTargetFeature@@YAHPAVObjectiveClass@@QAE@Z ENDP	; BestTargetFeature
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_uit$ = -100						; size = 12
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_v$ = -80						; size = 4
_dist$4 = -76						; size = 4
_bf$ = -72						; size = 4
_best$ = -68						; size = 4
_score$ = -64						; size = 4
_s$ = -60						; size = 4
_dy$5 = -56						; size = 4
_dx$6 = -52						; size = 4
_bt$ = -48						; size = 4
_t$ = -44						; size = 4
_f$ = -40						; size = 4
_u$ = -36						; size = 4
_oy$ = -32						; size = 2
_uy$ = -28						; size = 2
_ox$ = -24						; size = 2
_ux$ = -20						; size = 2
_assignedEng$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_o$ = 8							; size = 4
_hours$ = 12						; size = 4
?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z PROC	; BestRepairFeature

; 2647 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2648 : 	int	score, best = 0;

	mov	DWORD PTR _best$[ebp], 0

; 2649 : 	int	s, v, t, bt = 9999, f, bf = -1;

	mov	DWORD PTR _bt$[ebp], 9999		; 0000270fH
	mov	DWORD PTR _bf$[ebp], -1

; 2650 : 
; 2651 : 	bool assignedEng = false;

	mov	BYTE PTR _assignedEng$[ebp], 0

; 2652 : 
; 2653 : 	GridIndex ux = 0, uy = 0;

	xor	eax, eax
	mov	WORD PTR _ux$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _uy$[ebp], cx

; 2654 : 	GridIndex ox = 0, oy = 0;

	xor	edx, edx
	mov	WORD PTR _ox$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _oy$[ebp], ax

; 2655 : 	
; 2656 : 	VuListIterator	uit(AllUnitList);

	mov	ecx, DWORD PTR ?AllUnitList@@3PAVVuLinkedList@@A ; AllUnitList
	push	ecx
	lea	ecx, DWORD PTR _uit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2657 : 	Unit u;
; 2658 : 
; 2659 : 	// RV - Biker - Where is the object
; 2660 : 	o->GetLocation(&ox, &oy);

	lea	edx, DWORD PTR _oy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2661 : 	
; 2662 : 	// RV - Biker - Loop through ground units to find engineer battalion assigned for repair
; 2663 : 	u = GetFirstUnit(&uit);

	lea	ecx, DWORD PTR _uit$[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN20@BestRepair:

; 2664 : 	while (u) {

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN15@BestRepair

; 2665 : 		if (u->IsBrigade() || u->GetDomain() != DOMAIN_LAND || u->GetTeam() != o->GetTeam()) {

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax+244]
	call	edx
	test	eax, eax
	jne	SHORT $LN13@BestRepair
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 3
	jne	SHORT $LN13@BestRepair
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN14@BestRepair
$LN13@BestRepair:

; 2666 : 			u = GetNextUnit(&uit);

	lea	edx, DWORD PTR _uit$[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 2667 : 			continue;

	jmp	SHORT $LN20@BestRepair
$LN14@BestRepair:

; 2668 : 		}
; 2669 : 
; 2670 : 		u->GetLocation(&ux, &uy);

	lea	eax, DWORD PTR _uy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ux$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2671 : 		float dx = float(ux-ox);

	movsx	edx, WORD PTR _ux$[ebp]
	movsx	eax, WORD PTR _ox$[ebp]
	sub	edx, eax
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _dx$6[ebp], xmm0

; 2672 : 		float dy = float(uy-oy);

	movsx	ecx, WORD PTR _uy$[ebp]
	movsx	edx, WORD PTR _oy$[ebp]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _dy$5[ebp], xmm0

; 2673 : 
; 2674 : 		float dist = sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$6[ebp]
	mulss	xmm0, DWORD PTR _dx$6[ebp]
	movss	xmm1, DWORD PTR _dy$5[ebp]
	mulss	xmm1, DWORD PTR _dy$5[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$4[ebp]

; 2675 : 
; 2676 : 		// RV - Biker - Check for engineer type maybe we need some more check
; 2677 : 		if (u->GetSType() == STYPE_UNIT_ENGINEER || u->GetSType() == STYPE_WHEELED_ENGINEER) {

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 5
	je	SHORT $LN11@BestRepair
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN9@BestRepair
$LN11@BestRepair:

; 2678 : 			if (dist < 1.0f)

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _dist$4[ebp]
	jbe	SHORT $LN10@BestRepair

; 2679 : 				assignedEng = TRUE;

	mov	BYTE PTR _assignedEng$[ebp], 1

; 2680 : 			else

	jmp	SHORT $LN9@BestRepair
$LN10@BestRepair:

; 2681 : 				assignedEng = FALSE;

	mov	BYTE PTR _assignedEng$[ebp], 0
$LN9@BestRepair:

; 2682 : 		}
; 2683 : 		u = GetNextUnit(&uit);

	lea	edx, DWORD PTR _uit$[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 2684 : 	}

	jmp	$LN20@BestRepair
$LN15@BestRepair:

; 2685 : 
; 2686 : 	// Find 'quickest fix'. That is, the feature which will give us the most operational
; 2687 : 	// percentage in the shortest time.
; 2688 : 	for (f=0; f<o->GetTotalFeatures(); f++)

	mov	DWORD PTR _f$[ebp], 0
	jmp	SHORT $LN8@BestRepair
$LN7@BestRepair:
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
$LN8@BestRepair:
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetTotalFeatures@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetTotalFeatures
	movsx	ecx, ax
	cmp	DWORD PTR _f$[ebp], ecx
	jge	$LN6@BestRepair

; 2689 : 	{
; 2690 : 		s = o->GetFeatureStatus(f);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	mov	DWORD PTR _s$[ebp], eax

; 2691 : 		if (s != VIS_NORMAL && s != VIS_REPAIRED)

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@BestRepair
	cmp	DWORD PTR _s$[ebp], 1
	je	SHORT $LN2@BestRepair

; 2692 : 		{
; 2693 : 			v = o->GetFeatureValue(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	mov	DWORD PTR _v$[ebp], eax

; 2694 : 
; 2695 : 			// RV - Biker - If we have a engineer battalion assigned repair time is one fourth
; 2696 : 			if (assignedEng)

	movzx	ecx, BYTE PTR _assignedEng$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@BestRepair

; 2697 : 				t = int(o->GetFeatureRepairTime(f)/4);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetFeatureRepairTime@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureRepairTime
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _t$[ebp], eax

; 2698 : 			else

	jmp	SHORT $LN3@BestRepair
$LN4@BestRepair:

; 2699 : 				t = o->GetFeatureRepairTime(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetFeatureRepairTime@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureRepairTime
	mov	DWORD PTR _t$[ebp], eax
$LN3@BestRepair:

; 2700 : 
; 2701 : 			score = (v*100)/(t+1);

	mov	eax, DWORD PTR _v$[ebp]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	cdq
	idiv	ecx
	mov	DWORD PTR _score$[ebp], eax

; 2702 : 			if (score > best) {

	mov	edx, DWORD PTR _score$[ebp]
	cmp	edx, DWORD PTR _best$[ebp]
	jle	SHORT $LN2@BestRepair

; 2703 : 				best = score;

	mov	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _best$[ebp], eax

; 2704 : 				bf = f;

	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _bf$[ebp], ecx

; 2705 : 				bt = t;

	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _bt$[ebp], edx
$LN2@BestRepair:

; 2706 : 			}
; 2707 : 		}
; 2708 : 		//		if (s != VIS_DESTROYED && !o->GetFeatureID(f))
; 2709 : 		//			o->SetFeatureStatus(f,VIS_DESTROYED);
; 2710 : 	}

	jmp	$LN7@BestRepair
$LN6@BestRepair:

; 2711 : 	// 2001-03-12 MODIFIED BY S.G. SO IT DOESN'T WAIT ONE MORE HOUR BEFORE FINISHING THE REPAIR
; 2712 : 	// 2001-03-13 REINSTATED BECAUSE THE DATA FILE ISN'T ADJUSTED FOR IT YET,
; 2713 : 	if (bt < *hours)

	mov	eax, DWORD PTR _hours$[ebp]
	mov	ecx, DWORD PTR _bt$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN1@BestRepair

; 2714 : 	//	if (bt <= *hours)
; 2715 : 	{
; 2716 : 		*hours -= bt;

	mov	edx, DWORD PTR _hours$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _bt$[ebp]
	mov	ecx, DWORD PTR _hours$[ebp]
	mov	DWORD PTR [ecx], eax

; 2717 : 		return bf;

	mov	edx, DWORD PTR _bf$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN17@BestRepair
$LN1@BestRepair:

; 2718 : 	}
; 2719 : 	return -1;

	mov	DWORD PTR $T2[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _uit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]
$LN17@BestRepair:

; 2720 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z$0:
	lea	ecx, DWORD PTR _uit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z ENDP	; BestRepairFeature
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
_cbuffer$ = -12						; size = 4
_csize$ = -8						; size = 4
_fp$ = -4						; size = 4
_savefile$ = 8						; size = 4
?SaveObjectiveDeltas@@YAXPAD@Z PROC			; SaveObjectiveDeltas

; 2630 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2631 : 	long		csize;
; 2632 : 	uchar		*cbuffer;
; 2633 : 	FILE		*fp;
; 2634 : 
; 2635 : 	if ((fp = OpenCampFile (savefile, "obd", "wb")) == NULL)

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	push	OFFSET ??_C@_03PHDMHGFL@obd?$AA@
	mov	eax, DWORD PTR _savefile$[ebp]
	push	eax
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN1@SaveObject

; 2636 : 		return;

	jmp	SHORT $LN2@SaveObject
$LN1@SaveObject:

; 2637 : 
; 2638 : 	csize = EncodeObjectiveDeltas(&cbuffer, NULL);

	push	0
	lea	ecx, DWORD PTR _cbuffer$[ebp]
	push	ecx
	call	?EncodeObjectiveDeltas@@YAHPAPAEPAVFalconSessionEntity@@@Z ; EncodeObjectiveDeltas
	add	esp, 8
	mov	DWORD PTR _csize$[ebp], eax

; 2639 : 
; 2640 : 	fwrite(&csize, sizeof(long), 1, fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	lea	eax, DWORD PTR _csize$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 2641 : 	fwrite(cbuffer, csize, 1, fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _csize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbuffer$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 2642 : 	delete cbuffer;

	mov	ecx, DWORD PTR _cbuffer$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2643 : 	CloseCampFile(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4
$LN2@SaveObject:

; 2644 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveObjectiveDeltas@@YAXPAD@Z ENDP			; SaveObjectiveDeltas
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -88						; size = 12
_myit$3 = -76						; size = 12
$T4 = -64						; size = 4
$T5 = -60						; size = 4
$T6 = -56						; size = 4
$T7 = -52						; size = 4
_newsize$ = -48						; size = 4
_cbuffer$ = -44						; size = 4
_buffer$ = -40						; size = 4
_bufptr$ = -36						; size = 4
_fp$ = -32						; size = 4
_size$ = -28						; size = 4
_o$ = -24						; size = 4
_type$ = -20						; size = 2
_num$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_scenario$ = 8						; size = 4
?SaveBaseObjectives@@YAXPAD@Z PROC			; SaveBaseObjectives

; 2576 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SaveBaseObjectives@@YAXPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2577 : 	FILE			*fp;
; 2578 : 	short			num=0,type;

	xor	eax, eax
	mov	WORD PTR _num$[ebp], ax

; 2579 : 	long            size=0,newsize;

	mov	DWORD PTR _size$[ebp], 0

; 2580 : 	Objective		o;
; 2581 : 	uchar           *buffer,*cbuffer,*bufptr;
; 2582 : 
; 2583 : 	if ((fp = OpenCampFile (scenario, "obj", "wb")) == NULL){

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	push	OFFSET ??_C@_03GJLPFLNF@obj?$AA@
	mov	ecx, DWORD PTR _scenario$[ebp]
	push	ecx
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN5@SaveBaseOb

; 2584 : 		return;

	jmp	$LN6@SaveBaseOb
$LN5@SaveBaseOb:

; 2585 : 	}
; 2586 : 
; 2587 : 	// Count # of objectives
; 2588 : 	{
; 2589 : 		VuListIterator	myit(AllObjList);

	mov	edx, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	edx
	lea	ecx, DWORD PTR _myit$3[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2590 : 		o = GetFirstObjective(&myit);

	lea	eax, DWORD PTR _myit$3[ebp]
	push	eax
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN4@SaveBaseOb:

; 2591 : 		while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN3@SaveBaseOb

; 2592 : 			num++;

	mov	cx, WORD PTR _num$[ebp]
	add	cx, 1
	mov	WORD PTR _num$[ebp], cx

; 2593 : 			size += o->SaveSize() + sizeof(short);

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	mov	DWORD PTR _size$[ebp], edx

; 2594 : 			o = GetNextObjective(&myit);

	lea	eax, DWORD PTR _myit$3[ebp]
	push	eax
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 2595 : 		}

	jmp	SHORT $LN4@SaveBaseOb
$LN3@SaveBaseOb:

; 2596 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$3[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 2597 : 
; 2598 : 	// Save Number of Objectives and sizes
; 2599 : 	fwrite(&num,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 2600 : 	fwrite(&size, sizeof(long),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 2601 : 
; 2602 : 	buffer = new uchar[size];

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR _buffer$[ebp], eax

; 2603 : 	cbuffer = new uchar[size + MAX_POSSIBLE_OVERWRITE];

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _cbuffer$[ebp], edx

; 2604 : 	bufptr = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _bufptr$[ebp], eax

; 2605 : 
; 2606 : 	// Now save
; 2607 : 	{
; 2608 : 		VuListIterator	myit(AllObjList);

	mov	ecx, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	ecx
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2609 : 		o = GetFirstObjective(&myit);

	lea	edx, DWORD PTR _myit$2[ebp]
	push	edx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN2@SaveBaseOb:

; 2610 : 		while (o)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN1@SaveBaseOb

; 2611 : 		{
; 2612 : 			type = o->Type();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	WORD PTR _type$[ebp], ax

; 2613 : 			memcpy(bufptr, &type, sizeof(short));			bufptr += sizeof(short);

	push	2
	lea	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufptr$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _bufptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _bufptr$[ebp], edx

; 2614 : 			o->Save(&bufptr);

	lea	eax, DWORD PTR _bufptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 2615 : 			// Clear dirty flag
; 2616 : 			o->SetDelta(0);		

	push	0
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetDelta@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetDelta

; 2617 : 			o = GetNextObjective(&myit);

	lea	ecx, DWORD PTR _myit$2[ebp]
	push	ecx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 2618 : 		}

	jmp	SHORT $LN2@SaveBaseOb
$LN1@SaveBaseOb:

; 2619 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 2620 : 
; 2621 : 	newsize = LZSS_Compress(buffer, cbuffer, size);

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_LZSS_Compress
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newsize$[ebp], eax

; 2622 : 	fwrite(&newsize, sizeof(long),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	lea	eax, DWORD PTR _newsize$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 2623 : 	fwrite(cbuffer, newsize, 1, fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _newsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbuffer$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 2624 : 	CloseCampFile(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 2625 : 	delete [] buffer;

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2626 : 	delete [] cbuffer;

	mov	ecx, DWORD PTR _cbuffer$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@SaveBaseOb:

; 2627 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SaveBaseObjectives@@YAXPAD@Z$0:
	lea	ecx, DWORD PTR _myit$3[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?SaveBaseObjectives@@YAXPAD@Z$1:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?SaveBaseObjectives@@YAXPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SaveBaseObjectives@@YAXPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SaveBaseObjectives@@YAXPAD@Z ENDP			; SaveBaseObjectives
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -64						; size = 12
$T3 = -52						; size = 8
_cd$ = -44						; size = 8
_csize$ = -36						; size = 4
$T4 = -32						; size = 4
$T5 = -28						; size = 4
_data_ptr$ = -24					; size = 4
_rem$ = -20						; size = 4
_o$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_savefile$ = 8						; size = 4
?LoadObjectiveDeltas@@YAHPAD@Z PROC			; LoadObjectiveDeltas

; 2539 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadObjectiveDeltas@@YAHPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2540 : 	long		csize;
; 2541 : 	uchar		/* *data,*/ *data_ptr;
; 2542 : 
; 2543 : 	if (strcmp(savefile,TheCampaign.Scenario) == 0)

	push	OFFSET ?TheCampaign@@3VCampaignClass@@A+142
	mov	eax, DWORD PTR _savefile$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@LoadObject

; 2544 : 	{
; 2545 : 		// KCK Temporary: Reset dirty flags and return;
; 2546 : 		if (!AllObjList){

	cmp	DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A, 0 ; AllObjList
	jne	SHORT $LN4@LoadObject

; 2547 : 			return 1;		// InstantAction/DogFight

	mov	eax, 1
	jmp	$LN6@LoadObject
$LN4@LoadObject:

; 2548 : 		}
; 2549 : 
; 2550 : 		Objective		o;
; 2551 : 		VuListIterator	myit(AllObjList);

	mov	ecx, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	ecx
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2552 : 		o = GetFirstObjective(&myit);

	lea	edx, DWORD PTR _myit$2[ebp]
	push	edx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$6[ebp], eax
$LN3@LoadObject:

; 2553 : 		while (o){

	cmp	DWORD PTR _o$6[ebp], 0
	je	SHORT $LN2@LoadObject

; 2554 : 			o->SetDelta(0);

	push	0
	mov	ecx, DWORD PTR _o$6[ebp]
	call	?SetDelta@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetDelta

; 2555 : 			o = GetNextObjective(&myit);

	lea	eax, DWORD PTR _myit$2[ebp]
	push	eax
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$6[ebp], eax

; 2556 : 		}

	jmp	SHORT $LN3@LoadObject
$LN2@LoadObject:

; 2557 : 		return 1;

	mov	DWORD PTR $T5[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T5[ebp]
	jmp	SHORT $LN6@LoadObject
$LN5@LoadObject:

; 2558 : 	}
; 2559 : 
; 2560 : 	CampaignData cd = ReadCampFile (savefile, "obd");

	push	OFFSET ??_C@_03PHDMHGFL@obd?$AA@
	mov	ecx, DWORD PTR _savefile$[ebp]
	push	ecx
	call	?ReadCampFile@@YA?AUCampaignData@@PAD0@Z ; ReadCampFile
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _cd$[ebp], edx
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR _cd$[ebp+4], eax

; 2561 : 	if (cd.dataSize == -1){

	cmp	DWORD PTR _cd$[ebp], -1
	jne	SHORT $LN1@LoadObject

; 2562 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN6@LoadObject
$LN1@LoadObject:

; 2563 : 	}
; 2564 : 
; 2565 : 	data_ptr = (uchar*)cd.data;

	mov	ecx, DWORD PTR _cd$[ebp+4]
	mov	DWORD PTR _data_ptr$[ebp], ecx

; 2566 : 	long rem = cd.dataSize;

	mov	edx, DWORD PTR _cd$[ebp]
	mov	DWORD PTR _rem$[ebp], edx

; 2567 : 
; 2568 : 	memcpychk(&csize, &data_ptr, sizeof(long), &rem);

	lea	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _data_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _csize$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 2569 : 	
; 2570 : 	DecodeObjectiveDeltas(&data_ptr, &rem, NULL);

	push	0
	lea	eax, DWORD PTR _rem$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data_ptr$[ebp]
	push	ecx
	call	?DecodeObjectiveDeltas@@YAHPAPAEPAJPAVFalconSessionEntity@@@Z ; DecodeObjectiveDeltas
	add	esp, 12					; 0000000cH

; 2571 : 	delete cd.data;

	mov	edx, DWORD PTR _cd$[ebp+4]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2572 : 	return 1;

	mov	eax, 1
$LN6@LoadObject:

; 2573 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadObjectiveDeltas@@YAHPAD@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?LoadObjectiveDeltas@@YAHPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadObjectiveDeltas@@YAHPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadObjectiveDeltas@@YAHPAD@Z ENDP			; LoadObjectiveDeltas
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -76						; size = 8
_cd$ = -68						; size = 8
_newsize$ = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
_old_version$ = -44					; size = 4
_o$ = -40						; size = 4
_bufptr$ = -36						; size = 4
_tSize$ = -32						; size = 4
_size$ = -28						; size = 4
_buffer$ = -24						; size = 4
_data_ptr$ = -20					; size = 4
_rem$ = -16						; size = 4
_type$ = -12						; size = 2
_num$ = -8						; size = 2
_i$ = -4						; size = 2
_scenario$ = 8						; size = 4
?LoadBaseObjectives@@YAHPAD@Z PROC			; LoadBaseObjectives

; 2479 : int LoadBaseObjectives(char* scenario){

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 2480 : 	int	old_version;
; 2481 : 	Objective   o;
; 2482 : 	short       num,i,type;
; 2483 : 	long		size,newsize;
; 2484 : 	uchar		*buffer,*bufptr;
; 2485 : 	uchar		/* *data,*/*data_ptr;
; 2486 : 
; 2487 : 	old_version = gCampDataVersion;

	mov	eax, DWORD PTR ?gCampDataVersion@@3HA	; gCampDataVersion
	mov	DWORD PTR _old_version$[ebp], eax

; 2488 : 
; 2489 : 	CampaignData cd = ReadCampFile (scenario, "obj");

	push	OFFSET ??_C@_03GJLPFLNF@obj?$AA@
	mov	ecx, DWORD PTR _scenario$[ebp]
	push	ecx
	call	?ReadCampFile@@YA?AUCampaignData@@PAD0@Z ; ReadCampFile
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _cd$[ebp], edx
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR _cd$[ebp+4], eax

; 2490 : 	if (cd.dataSize == -1 ){

	cmp	DWORD PTR _cd$[ebp], -1
	jne	SHORT $LN7@LoadBaseOb

; 2491 : 		gCampDataVersion = old_version;

	mov	ecx, DWORD PTR _old_version$[ebp]
	mov	DWORD PTR ?gCampDataVersion@@3HA, ecx	; gCampDataVersion

; 2492 : 		return 0;

	xor	eax, eax
	jmp	$LN8@LoadBaseOb
$LN7@LoadBaseOb:

; 2493 : 	}
; 2494 : 
; 2495 : 	gCampDataVersion = ReadVersionNumber(scenario);

	mov	edx, DWORD PTR _scenario$[ebp]
	push	edx
	call	?ReadVersionNumber@@YAHPAD@Z		; ReadVersionNumber
	add	esp, 4
	mov	DWORD PTR ?gCampDataVersion@@3HA, eax	; gCampDataVersion

; 2496 : 
; 2497 : 	// Read Number of Objectives..
; 2498 : 
; 2499 : 	data_ptr = (uchar*)cd.data;

	mov	eax, DWORD PTR _cd$[ebp+4]
	mov	DWORD PTR _data_ptr$[ebp], eax

; 2500 : 	long rem = cd.dataSize;

	mov	ecx, DWORD PTR _cd$[ebp]
	mov	DWORD PTR _rem$[ebp], ecx

; 2501 : 
; 2502 : 	memcpychk(&num, &data_ptr, sizeof(short), &rem);

	lea	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	2
	lea	eax, DWORD PTR _data_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 2503 : 	memcpychk(&size, &data_ptr, sizeof(long), &rem);

	lea	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	4
	lea	eax, DWORD PTR _data_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 2504 : 	memcpychk(&newsize, &data_ptr, sizeof(long), &rem);

	lea	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	4
	lea	eax, DWORD PTR _data_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 2505 : 	
; 2506 : 	long tSize = size + MAX_POSSIBLE_OVERWRITE;

	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 100				; 00000064H
	mov	DWORD PTR _tSize$[ebp], edx

; 2507 : 	buffer = new uchar[tSize];

	mov	eax, DWORD PTR _tSize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _buffer$[ebp], ecx

; 2508 : 
; 2509 : 	if (LZSS_Expand(data_ptr, rem, buffer, size) < 0){

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data_ptr$[ebp]
	push	edx
	call	_LZSS_Expand
	add	esp, 16					; 00000010H

; 2510 : //		char err[200];
; 2511 : //		sprintf(err, "%s %d: error expanding buffer", __FILE__, __LINE__);
; 2512 : //		throw std::InvalidBufferException(err);
; 2513 : 	}
; 2514 : 
; 2515 : 	//now we have the uncompressed buffer, of size tSize
; 2516 : 	bufptr = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _bufptr$[ebp], eax

; 2517 : 	rem = tSize;

	mov	ecx, DWORD PTR _tSize$[ebp]
	mov	DWORD PTR _rem$[ebp], ecx

; 2518 : 
; 2519 : 	for (i=0; i<num; i++) {

	xor	edx, edx
	mov	WORD PTR _i$[ebp], dx
	jmp	SHORT $LN5@LoadBaseOb
$LN4@LoadBaseOb:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN5@LoadBaseOb:
	movsx	ecx, WORD PTR _i$[ebp]
	movsx	edx, WORD PTR _num$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN3@LoadBaseOb

; 2520 : 		memcpychk(&type, &bufptr, sizeof(short), &rem);

	lea	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _bufptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _type$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 2521 : 		o = NewObjective(type, &bufptr, &rem);

	lea	eax, DWORD PTR _rem$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bufptr$[ebp]
	push	ecx
	movzx	edx, WORD PTR _type$[ebp]
	push	edx
	call	?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z ; NewObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _o$[ebp], eax

; 2522 : 		if (o == NULL){

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN2@LoadBaseOb

; 2523 : 			fprintf(stderr, "%s %d: error creating object from stream\n", __FILE__, __LINE__);

	push	2523					; 000009dbH
	push	OFFSET ??_C@_0N@IJKHBDDD@Objectiv?4cpp?$AA@
	push	OFFSET ??_C@_0CK@KOLCPHPM@?$CFs?5?$CFd?3?5error?5creating?5object?5fro@
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 1
	add	eax, ecx
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 2524 : 		}
; 2525 : 		else{

	jmp	SHORT $LN1@LoadBaseOb
$LN2@LoadBaseOb:

; 2526 : 			o->SetAggregate(1);

	push	1
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetAggregate@CampBaseClass@@QAEX_N@Z	; CampBaseClass::SetAggregate
$LN1@LoadBaseOb:

; 2527 : 		}
; 2528 : 	}

	jmp	SHORT $LN4@LoadBaseOb
$LN3@LoadBaseOb:

; 2529 : 
; 2530 : 	delete [] buffer;

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2531 : 	delete cd.data;

	mov	ecx, DWORD PTR _cd$[ebp+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2532 : 
; 2533 : 	gCampDataVersion = old_version;

	mov	eax, DWORD PTR _old_version$[ebp]
	mov	DWORD PTR ?gCampDataVersion@@3HA, eax	; gCampDataVersion

; 2534 : 
; 2535 : 	return 1;

	mov	eax, 1
$LN8@LoadBaseOb:

; 2536 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LoadBaseObjectives@@YAHPAD@Z ENDP			; LoadBaseObjectives
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
tv75 = -28						; size = 4
$T3 = -24						; size = 4
_o$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tid$ = 8						; size = 2
_stream$ = 12						; size = 4
_rem$ = 16						; size = 4
?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z PROC	; NewObjective

; 2445 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2446 : 	Objective   o;
; 2447 : 	int			i;
; 2448 : 
; 2449 : 	if (tid == 0) {

	movsx	eax, WORD PTR _tid$[ebp]
	test	eax, eax
	jne	SHORT $LN12@NewObjecti

; 2450 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@NewObjecti
$LN12@NewObjecti:

; 2451 : 	}
; 2452 : 
; 2453 : 	CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 2454 : 	o = new ObjectiveClass(stream, rem);

	push	244					; 000000f4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN15@NewObjecti
	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0ObjectiveClass@@QAE@PAPAEPAJ@Z	; ObjectiveClass::ObjectiveClass
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN16@NewObjecti
$LN15@NewObjecti:
	mov	DWORD PTR tv75[ebp], 0
$LN16@NewObjecti:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _o$[ebp], ecx

; 2455 : 	if (RepairObjective){		// Activated by command line parameter '-repair',	

	cmp	DWORD PTR ?RepairObjective@@3HA, 0	; RepairObjective
	je	SHORT $LN11@NewObjecti

; 2456 : 		for (i=0; i<o->GetTotalFeatures(); i++)	{

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@NewObjecti
$LN9@NewObjecti:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@NewObjecti:
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetTotalFeatures@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetTotalFeatures
	cwde
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN8@NewObjecti

; 2457 : 			if (o->GetFeatureID(i)){

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	test	eax, eax
	je	SHORT $LN7@NewObjecti

; 2458 : 				o->SetFeatureStatus(i,VIS_NORMAL);

	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ; ObjectiveClass::SetFeatureStatus

; 2459 : 			}
; 2460 : 			else{

	jmp	SHORT $LN6@NewObjecti
$LN7@NewObjecti:

; 2461 : 				o->SetFeatureStatus(i,VIS_DESTROYED);

	push	3
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ; ObjectiveClass::SetFeatureStatus
$LN6@NewObjecti:

; 2462 : 			}
; 2463 : 		}

	jmp	SHORT $LN9@NewObjecti
$LN8@NewObjecti:

; 2464 : 	}
; 2465 : 	else if (DestroyObjective)//activated by commandline parameter '-armageddon'

	jmp	SHORT $LN5@NewObjecti
$LN11@NewObjecti:
	cmp	DWORD PTR ?DestroyObjective@@3HA, 0	; DestroyObjective
	je	SHORT $LN5@NewObjecti

; 2466 : 	{
; 2467 : 		for (i=0; i<o->GetTotalFeatures(); i++)	{

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@NewObjecti
$LN2@NewObjecti:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@NewObjecti:
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetTotalFeatures@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetTotalFeatures
	movsx	edx, ax
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN5@NewObjecti

; 2468 : 			o->SetFeatureStatus(i,VIS_DESTROYED);

	push	3
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ; ObjectiveClass::SetFeatureStatus

; 2469 : 		}

	jmp	SHORT $LN2@NewObjecti
$LN5@NewObjecti:

; 2470 : 	}
; 2471 : 	CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 2472 : 
; 2473 : 	// these will be read from the other side as well
; 2474 : 	o->SetSendCreate(VuEntity::VU_SC_DONT_SEND);

	push	0
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ; VuEntity::SetSendCreate

; 2475 : 	vuDatabase->/*Silent*/Insert(o);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 2476 : 	return o;

	mov	eax, DWORD PTR _o$[ebp]
$LN13@NewObjecti:

; 2477 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewObjective@@YAPAVObjectiveClass@@FPAPAEPAJ@Z ENDP	; NewObjective
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
tv139 = -48						; size = 4
$T2 = -44						; size = 4
_ret$ = -40						; size = 4
$T3 = -36						; size = 4
tv83 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
_cid$ = -20						; size = 4
_o$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?NewObjective@@YAPAVObjectiveClass@@XZ PROC		; NewObjective

; 2406 : Objective NewObjective (void){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewObjective@@YAPAVObjectiveClass@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2407 : 	Objective   o;
; 2408 : 	int			cid;
; 2409 : 
; 2410 : 	cid = GetClassID(DOMAIN_LAND, CLASS_OBJECTIVE, TYPE_CITY, 1, 0, 0, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	1
	push	8
	push	4
	push	3
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	mov	DWORD PTR _cid$[ebp], eax

; 2411 : 	if (!cid){

	cmp	DWORD PTR _cid$[ebp], 0
	jne	SHORT $LN2@NewObjecti

; 2412 : 		return NULL;

	xor	eax, eax
	jmp	$LN3@NewObjecti
$LN2@NewObjecti:

; 2413 : 	}
; 2414 : 	cid += VU_LAST_ENTITY_TYPE;

	mov	eax, DWORD PTR _cid$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _cid$[ebp], eax

; 2415 : 
; 2416 : 	//VuEnterCriticalSection();
; 2417 : 	//lastVolatileId = vuAssignmentId;
; 2418 : 	//vuAssignmentId = lastObjectiveId;
; 2419 : 	//vuLowWrapNumber = FIRST_OBJECTIVE_VU_ID_NUMBER;
; 2420 : 	//vuHighWrapNumber = LAST_OBJECTIVE_VU_ID_NUMBER;
; 2421 : 
; 2422 : 	o = new ObjectiveClass(cid);

	push	244					; 000000f4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN5@NewObjecti
	mov	ecx, DWORD PTR _cid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0ObjectiveClass@@QAE@H@Z		; ObjectiveClass::ObjectiveClass
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN6@NewObjecti
$LN5@NewObjecti:
	mov	DWORD PTR tv83[ebp], 0
$LN6@NewObjecti:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _o$[ebp], eax

; 2423 : 	// these will be read from the other side as well
; 2424 : 	o->SetSendCreate(VuEntity::VU_SC_DONT_SEND);

	push	0
	mov	ecx, DWORD PTR _o$[ebp]
	call	?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ; VuEntity::SetSendCreate

; 2425 : 	VU_ERRCODE ret = vuDatabase->/*Silent*/Insert(
; 2426 : 		o/*, lastObjectiveId+1, FIRST_OBJECTIVE_VU_ID_NUMBER, LAST_OBJECTIVE_VU_ID_NUMBER*/
; 2427 : 	);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert
	mov	DWORD PTR _ret$[ebp], eax

; 2428 : 
; 2429 : 	if (ret != VU_SUCCESS){

	cmp	DWORD PTR _ret$[ebp], 1
	je	SHORT $LN1@NewObjecti

; 2430 : 		delete o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN7@NewObjecti
	push	1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN8@NewObjecti
$LN7@NewObjecti:
	mov	DWORD PTR tv139[ebp], 0
$LN8@NewObjecti:

; 2431 : 		o = NULL;

	mov	DWORD PTR _o$[ebp], 0
$LN1@NewObjecti:

; 2432 : 	}
; 2433 : 
; 2434 : 
; 2435 : 	//lastObjectiveId = vuAssignmentId;
; 2436 : 	//vuAssignmentId = lastVolatileId;
; 2437 : 	//vuLowWrapNumber = FIRST_VOLATILE_VU_ID_NUMBER;
; 2438 : 	//vuHighWrapNumber = LAST_VOLATILE_VU_ID_NUMBER;
; 2439 : 	//VuExitCriticalSection();
; 2440 : 
; 2441 : 	return o;

	mov	eax, DWORD PTR _o$[ebp]
$LN3@NewObjecti:

; 2442 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewObjective@@YAPAVObjectiveClass@@XZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewObjective@@YAPAVObjectiveClass@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewObjective@@YAPAVObjectiveClass@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewObjective@@YAPAVObjectiveClass@@XZ ENDP		; NewObjective
; Function compile flags: /Odtp
;	COMDAT ??_GObjectiveClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectiveClass@@UAEPAXI@Z PROC			; ObjectiveClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectiveClass@@UAE@XZ		; ObjectiveClass::~ObjectiveClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectiveClass@@UAEPAXI@Z ENDP			; ObjectiveClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -104						; size = 12
$T3 = -92						; size = 8
$T4 = -84						; size = 8
$T5 = -76						; size = 8
tv354 = -68						; size = 4
_bp$ = -64						; size = 4
_j$ = -60						; size = 4
_bd$ = -56						; size = 4
_i$ = -52						; size = 4
_s$ = -48						; size = 4
_d$ = -44						; size = 4
_n$ = -40						; size = 4
_this$ = -36						; size = 4
_X$ = -32						; size = 2
_Y$ = -28						; size = 2
_x$ = -24						; size = 2
_y$ = -20						; size = 2
_who$ = -14						; size = 1
_own$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
?RecalculateParent@ObjectiveClass@@QAEXXZ PROC		; ObjectiveClass::RecalculateParent
; _this$ = ecx

; 2287 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RecalculateParent@ObjectiveClass@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2288 : 	Objective	n,s=NULL,bp=NULL;

	mov	DWORD PTR _s$[ebp], 0
	mov	DWORD PTR _bp$[ebp], 0

; 2289 : 	Int32		i,j,d,bd=9999;

	mov	DWORD PTR _bd$[ebp], 9999		; 0000270fH

; 2290 : 	Team		who,own;
; 2291 : 	GridIndex	x,y,X,Y;
; 2292 : 	//	POData		pod=NULL;
; 2293 : 	//	SOData		sod=NULL;
; 2294 : 
; 2295 : 	if (!this)

	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN24@Recalculat

; 2296 : 		return;

	jmp	$LN25@Recalculat
$LN24@Recalculat:

; 2297 : 	if (IsPrimary()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPrimary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsPrimary
	test	eax, eax
	je	SHORT $LN23@Recalculat

; 2298 : 		// Primary Objective, no parent
; 2299 : 		SetObjectiveParent(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ; ObjectiveClass::SetObjectiveParent
	jmp	$LN1@Recalculat
$LN23@Recalculat:

; 2300 : 	}
; 2301 : 	else if (IsSecondary())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	$LN21@Recalculat

; 2302 : 	{
; 2303 : 		// Secondary Objective. Find closest Primary (Modify distances by relations && scores)
; 2304 : 		GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2305 : 		own = GetTeam();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _own$[ebp], al

; 2306 : 		{
; 2307 : 			VuListIterator	myit(POList);

	mov	ecx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	ecx
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2308 : 			n = GetFirstObjective(&myit);

	lea	edx, DWORD PTR _myit$2[ebp]
	push	edx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax
$LN20@Recalculat:

; 2309 : 			while (n != NULL)

	cmp	DWORD PTR _n$[ebp], 0
	je	$LN19@Recalculat

; 2310 : 			{		
; 2311 : 				n->GetLocation(&X,&Y);

	lea	eax, DWORD PTR _Y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _X$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 2312 : 				who = n->GetTeam();

	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	mov	BYTE PTR _who$[ebp], al

; 2313 : 				d = FloatToInt32(Distance(X,Y,x,y));

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	movzx	edx, WORD PTR _Y$[ebp]
	push	edx
	movzx	eax, WORD PTR _X$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 2314 : 				if (GetTTRelations(who,own) == Allied)

	movzx	ecx, BYTE PTR _own$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN18@Recalculat

; 2315 : 					d /= 2;

	mov	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _d$[ebp], eax
	jmp	SHORT $LN15@Recalculat
$LN18@Recalculat:

; 2316 : 				else if (GetTTRelations(who,own) == War)

	movzx	eax, BYTE PTR _own$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 5
	jne	SHORT $LN16@Recalculat

; 2317 : 					d *= 2;

	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 1
	mov	DWORD PTR _d$[ebp], edx

; 2318 : 				else

	jmp	SHORT $LN15@Recalculat
$LN16@Recalculat:

; 2319 : 					d = 9999;

	mov	DWORD PTR _d$[ebp], 9999		; 0000270fH
$LN15@Recalculat:

; 2320 : 				d = FloatToInt32((float)d/(n->GetObjectivePriority()/100.0F));

	cvtsi2ss xmm0, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR tv354[ebp]
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 2321 : 				if (d<bd)

	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR _bd$[ebp]
	jge	SHORT $LN14@Recalculat

; 2322 : 				{
; 2323 : 					s = n;

	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _s$[ebp], edx

; 2324 : 					bd = d;

	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _bd$[ebp], eax
$LN14@Recalculat:

; 2325 : 				}
; 2326 : 				n = GetNextObjective(&myit);

	lea	ecx, DWORD PTR _myit$2[ebp]
	push	ecx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax

; 2327 : 			}

	jmp	$LN20@Recalculat
$LN19@Recalculat:

; 2328 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 2329 : 		if (s){

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN13@Recalculat

; 2330 : 			SetObjectiveParent(s->Id());

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ; ObjectiveClass::SetObjectiveParent

; 2331 : 			//			pod = GetPOData(s);
; 2332 : 			//			if (pod)
; 2333 : 			//				pod->children++;
; 2334 : 		}
; 2335 : 		else{

	jmp	SHORT $LN12@Recalculat
$LN13@Recalculat:

; 2336 : 			SetObjectiveParent(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ; ObjectiveClass::SetObjectiveParent
$LN12@Recalculat:

; 2337 : 		}
; 2338 : 		// Set frontline flags for us and our PO, if any.
; 2339 : 		//		if (IsNearfront())
; 2340 : 		//			{
; 2341 : 		//			sod = GetSOData(this);
; 2342 : 		//			if (sod)
; 2343 : 		//				sod->flags |= GTMOBJ_FRONTLINE;
; 2344 : 		//			if (pod)
; 2345 : 		//				pod->flags |= GTMOBJ_FRONTLINE;
; 2346 : 		//			}
; 2347 : 	}
; 2348 : 	else

	jmp	$LN1@Recalculat
$LN21@Recalculat:

; 2349 : 	{
; 2350 : 		// Everything else. Find best Secondary for parent
; 2351 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN10@Recalculat:

; 2352 : 		while (i<static_data.links)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+225]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN9@Recalculat

; 2353 : 		{
; 2354 : 			n = GetNeighbor(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _n$[ebp], eax

; 2355 : 			if (n && n->IsSecondary())

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN8@Recalculat
	mov	ecx, DWORD PTR _n$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN8@Recalculat

; 2356 : 			{
; 2357 : 				SetObjectiveParent(n->Id());

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _n$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ; ObjectiveClass::SetObjectiveParent

; 2358 : 				// KCK WARNING: Am I using this?
; 2359 : 				//				sod = GetSOData(n);
; 2360 : 				//				if (sod)
; 2361 : 				//					sod->children++;
; 2362 : 				return;

	jmp	$LN25@Recalculat
$LN8@Recalculat:

; 2363 : 			}
; 2364 : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 2365 : 		}

	jmp	SHORT $LN10@Recalculat
$LN9@Recalculat:

; 2366 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 2367 : 		bd = 0;

	mov	DWORD PTR _bd$[ebp], 0
$LN7@Recalculat:

; 2368 : 		while (i<static_data.links)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	cmp	DWORD PTR _i$[ebp], edx
	jge	$LN6@Recalculat

; 2369 : 		{
; 2370 : 			n = GetNeighbor(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _n$[ebp], eax

; 2371 : 			j = 0;

	mov	DWORD PTR _j$[ebp], 0
$LN5@Recalculat:

; 2372 : 			while	(n && j<n->static_data.links)

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN4@Recalculat
	mov	ecx, DWORD PTR _n$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $LN4@Recalculat

; 2373 : 			{
; 2374 : 				s = n->GetNeighbor(j);

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _s$[ebp], eax

; 2375 : 				if (s && s->IsSecondary() && s->GetObjectivePriority() > bd)

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN3@Recalculat
	mov	ecx, DWORD PTR _s$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN3@Recalculat
	mov	ecx, DWORD PTR _s$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	movsx	ecx, ax
	cmp	ecx, DWORD PTR _bd$[ebp]
	jle	SHORT $LN3@Recalculat

; 2376 : 				{
; 2377 : 					bp = s;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _bp$[ebp], edx

; 2378 : 					bd = s->GetObjectivePriority();

	mov	ecx, DWORD PTR _s$[ebp]
	call	?GetObjectivePriority@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetObjectivePriority
	cwde
	mov	DWORD PTR _bd$[ebp], eax
$LN3@Recalculat:

; 2379 : 				}
; 2380 : 				j++;

	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 2381 : 			}

	jmp	SHORT $LN5@Recalculat
$LN4@Recalculat:

; 2382 : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2383 : 		}

	jmp	$LN7@Recalculat
$LN6@Recalculat:

; 2384 : 		if (bp)

	cmp	DWORD PTR _bp$[ebp], 0
	je	SHORT $LN2@Recalculat

; 2385 : 		{
; 2386 : 			SetObjectiveParent(bp->Id());

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _bp$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ; ObjectiveClass::SetObjectiveParent

; 2387 : 			// KCK WARNING: Am I using this?
; 2388 : 			//			sod = GetSOData(bp);
; 2389 : 			//			if (sod)
; 2390 : 			//				sod->children++;
; 2391 : 		}
; 2392 : 		else

	jmp	SHORT $LN1@Recalculat
$LN2@Recalculat:

; 2393 : 			SetObjectiveParent(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ; ObjectiveClass::SetObjectiveParent
$LN1@Recalculat:
$LN25@Recalculat:

; 2394 : 	}
; 2395 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RecalculateParent@ObjectiveClass@@QAEXXZ$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?RecalculateParent@ObjectiveClass@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RecalculateParent@ObjectiveClass@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RecalculateParent@ObjectiveClass@@QAEXXZ ENDP		; ObjectiveClass::RecalculateParent
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?RepairFeature@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::RepairFeature
; _this$ = ecx

; 2266 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2267 : 	int		cur;
; 2268 : 
; 2269 : 	cur = GetFeatureStatus(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	mov	DWORD PTR _cur$[ebp], eax

; 2270 : 	if (cur == VIS_DAMAGED || cur == VIS_DESTROYED)

	cmp	DWORD PTR _cur$[ebp], 2
	je	SHORT $LN2@RepairFeat
	cmp	DWORD PTR _cur$[ebp], 3
	jne	SHORT $LN4@RepairFeat
$LN2@RepairFeat:

; 2271 : 	{
; 2272 : 		SetFeatureStatus(f,VIS_REPAIRED);

	push	1
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ; ObjectiveClass::SetFeatureStatus

; 2273 : 		if (Falcon4ClassTable[GetFeatureID(f)].vuClassData.classInfo_[VU_TYPE] == TYPE_RUNWAY) // (IS_RUNWAY)

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	imul	eax, 81					; 00000051H
	add	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 11					; 0000000bH
	jne	SHORT $LN4@RepairFeat

; 2274 : 			CleanupLinkedPersistantObjects (this, f, MapVisId(VIS_RWYPATCH), 1);

	push	1
	push	853					; 00000355H
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CleanupLinkedPersistantObjects@@YAXPAVFalconEntity@@HHH@Z ; CleanupLinkedPersistantObjects
	add	esp, 16					; 00000010H
$LN4@RepairFeat:

; 2275 : 	}
; 2276 : 	// KCK: Used to go from destroyed to damaged. This seems a little weird now that I think about it,
; 2277 : 	// except for the case of runways... 
; 2278 : 	//	if (cur == VIS_DESTROYED)
; 2279 : 	//		{
; 2280 : 	//		SetFeatureStatus(f,VIS_DAMAGED);
; 2281 : 	//		if (Falcon4ClassTable[GetFeatureID(f)].vuClassData.classInfo_[VU_TYPE] == TYPE_RUNWAY) // (IS_RUNWAY)
; 2282 : 	//			CleanupLinkedPersistantObjects (this, f, VIS_RWYPATCH, 2);
; 2283 : 	//		}
; 2284 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RepairFeature@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::RepairFeature
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_oc$1 = -32						; size = 4
_max$2 = -28						; size = 4
_inactive$3 = -24					; size = 4
_runways$4 = -20					; size = 4
_index$5 = -16						; size = 4
_this$ = -12						; size = 4
_f$ = -8						; size = 4
_s$ = -4						; size = 4
?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ PROC	; ObjectiveClass::ResetObjectiveStatus
; _this$ = ecx

; 2146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 2147 : 	int					f,s;
; 2148 : 
; 2149 : 	s = 100;

	mov	DWORD PTR _s$[ebp], 100			; 00000064H

; 2150 : 	// Airbases use their own (slightly different) version of determining status:
; 2151 : 	if (GetType() == TYPE_AIRBASE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 1
	jne	$LN24@ResetObjec

; 2152 : 	{
; 2153 : 		// AIRBASE version
; 2154 : 		for (f=0; s && f<static_data.class_data->Features; f++)

	mov	DWORD PTR _f$[ebp], 0
	jmp	SHORT $LN23@ResetObjec
$LN22@ResetObjec:
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 1
	mov	DWORD PTR _f$[ebp], ecx
$LN23@ResetObjec:
	cmp	DWORD PTR _s$[ebp], 0
	je	$LN21@ResetObjec
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movzx	ecx, BYTE PTR [eax+50]
	cmp	DWORD PTR _f$[ebp], ecx
	jge	SHORT $LN21@ResetObjec

; 2155 : 		{
; 2156 : 			// Only adjust status for non-runways
; 2157 : 			if (Falcon4ClassTable[GetFeatureID(f)].vuClassData.classInfo_[VU_TYPE] != TYPE_RUNWAY) // (IS_RUNWAY)

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	imul	eax, 81					; 00000051H
	add	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 11					; 0000000bH
	je	SHORT $LN20@ResetObjec

; 2158 : 			{
; 2159 : 				if (GetFeatureStatus(f) == VIS_DAMAGED)

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 2
	jne	SHORT $LN19@ResetObjec

; 2160 : 					s -= GetFeatureValue(f)/2;

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, eax
	mov	DWORD PTR _s$[ebp], edx
$LN19@ResetObjec:

; 2161 : 				if (GetFeatureStatus(f) == VIS_DESTROYED)

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	jne	SHORT $LN20@ResetObjec

; 2162 : 					s -= GetFeatureValue(f);

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, eax
	mov	DWORD PTR _s$[ebp], edx
$LN20@ResetObjec:

; 2163 : 			}
; 2164 : 		}

	jmp	$LN22@ResetObjec
$LN21@ResetObjec:

; 2165 : 		if (s <= 0)

	cmp	DWORD PTR _s$[ebp], 0
	jg	SHORT $LN17@ResetObjec

; 2166 : 			s = 0;

	mov	DWORD PTR _s$[ebp], 0

; 2167 : 		else

	jmp	$LN16@ResetObjec
$LN17@ResetObjec:

; 2168 : 		{
; 2169 : 			// Make sure we're below our maximum for # of active runways
; 2170 : 			int					index,runways=0,inactive=0,max;

	mov	DWORD PTR _runways$4[ebp], 0
	mov	DWORD PTR _inactive$3[ebp], 0

; 2171 : 			ObjClassDataType	*oc = GetObjectiveClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
	mov	DWORD PTR _oc$1[ebp], eax

; 2172 : 			index = oc->PtDataIndex; 

	mov	eax, DWORD PTR _oc$1[ebp]
	movsx	ecx, WORD PTR [eax+26]
	mov	DWORD PTR _index$5[ebp], ecx
$LN15@ResetObjec:

; 2173 : 			while (index)

	cmp	DWORD PTR _index$5[ebp], 0
	je	SHORT $LN14@ResetObjec

; 2174 : 			{
; 2175 : 				if (PtHeaderDataTable[index].type == RunwayPt)

	mov	edx, DWORD PTR _index$5[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movzx	ecx, BYTE PTR [eax+edx+2]
	cmp	ecx, 1
	jne	SHORT $LN13@ResetObjec

; 2176 : 				{
; 2177 : 					runways++;

	mov	edx, DWORD PTR _runways$4[ebp]
	add	edx, 1
	mov	DWORD PTR _runways$4[ebp], edx

; 2178 : 					if (CheckHeaderStatus (this, index) == VIS_DESTROYED)

	mov	eax, DWORD PTR _index$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CheckHeaderStatus@@YAHPAVCampBaseClass@@H@Z ; CheckHeaderStatus
	add	esp, 8
	cmp	eax, 3
	jne	SHORT $LN13@ResetObjec

; 2179 : 						inactive++;

	mov	edx, DWORD PTR _inactive$3[ebp]
	add	edx, 1
	mov	DWORD PTR _inactive$3[ebp], edx
$LN13@ResetObjec:

; 2180 : 				}
; 2181 : 				index = PtHeaderDataTable[index].nextHeader;

	mov	eax, DWORD PTR _index$5[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movsx	edx, WORD PTR [ecx+eax+26]
	mov	DWORD PTR _index$5[ebp], edx

; 2182 : 			}

	jmp	SHORT $LN15@ResetObjec
$LN14@ResetObjec:

; 2183 : 			if (!runways)

	cmp	DWORD PTR _runways$4[ebp], 0
	jne	SHORT $LN11@ResetObjec

; 2184 : 				max = 0;

	mov	DWORD PTR _max$2[ebp], 0

; 2185 : 			else

	jmp	SHORT $LN10@ResetObjec
$LN11@ResetObjec:

; 2186 : 				max = ((runways-inactive)*100) / runways;

	mov	eax, DWORD PTR _runways$4[ebp]
	sub	eax, DWORD PTR _inactive$3[ebp]
	imul	eax, 100				; 00000064H
	cdq
	idiv	DWORD PTR _runways$4[ebp]
	mov	DWORD PTR _max$2[ebp], eax
$LN10@ResetObjec:

; 2187 : 			if (s > max)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _max$2[ebp]
	jle	SHORT $LN16@ResetObjec

; 2188 : 				s = max;

	mov	ecx, DWORD PTR _max$2[ebp]
	mov	DWORD PTR _s$[ebp], ecx
$LN16@ResetObjec:

; 2189 : 		}
; 2190 : 	}
; 2191 : 	else

	jmp	$LN8@ResetObjec
$LN24@ResetObjec:

; 2192 : 	{
; 2193 : 		for (f=0; s>0 && f<static_data.class_data->Features; f++)

	mov	DWORD PTR _f$[ebp], 0
	jmp	SHORT $LN7@ResetObjec
$LN6@ResetObjec:
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, 1
	mov	DWORD PTR _f$[ebp], edx
$LN7@ResetObjec:
	cmp	DWORD PTR _s$[ebp], 0
	jle	SHORT $LN5@ResetObjec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	cmp	DWORD PTR _f$[ebp], edx
	jge	SHORT $LN5@ResetObjec

; 2194 : 		{
; 2195 : 			if (GetFeatureStatus(f) == VIS_DAMAGED)

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 2
	jne	SHORT $LN4@ResetObjec

; 2196 : 				s -= GetFeatureValue(f)/2;

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, eax
	mov	DWORD PTR _s$[ebp], edx
$LN4@ResetObjec:

; 2197 : 			if (GetFeatureStatus(f) == VIS_DESTROYED)

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	jne	SHORT $LN3@ResetObjec

; 2198 : 				s -= GetFeatureValue(f);

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, eax
	mov	DWORD PTR _s$[ebp], edx
$LN3@ResetObjec:

; 2199 : 		}

	jmp	SHORT $LN6@ResetObjec
$LN5@ResetObjec:

; 2200 : 		if (s < 0)

	cmp	DWORD PTR _s$[ebp], 0
	jge	SHORT $LN8@ResetObjec

; 2201 : 			s = 0;

	mov	DWORD PTR _s$[ebp], 0
$LN8@ResetObjec:

; 2202 : 	}
; 2203 : 
; 2204 : 	if (s != obj_data.status)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+199]
	cmp	DWORD PTR _s$[ebp], ecx
	je	SHORT $LN25@ResetObjec

; 2205 : 	{
; 2206 : 		SetObjectiveStatus ((uchar)s);

	movzx	edx, BYTE PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveStatus@ObjectiveClass@@QAEXE@Z ; ObjectiveClass::SetObjectiveStatus
$LN25@ResetObjec:

; 2207 : 	}
; 2208 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ENDP	; ObjectiveClass::ResetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_f$ = -20						; size = 4
_bv$ = -16						; size = 4
_v$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?GetBestTarget@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetBestTarget
; _this$ = ecx

; 2245 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2246 : 	int		i,v,bv=0,f=0;

	mov	DWORD PTR _bv$[ebp], 0
	mov	DWORD PTR _f$[ebp], 0

; 2247 : 
; 2248 : 	for (i=0; i<static_data.class_data->Features; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetBestTar
$LN3@GetBestTar:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetBestTar:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	eax, BYTE PTR [edx+50]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@GetBestTar

; 2249 : 	{
; 2250 : 		v = GetFeatureValue(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	mov	DWORD PTR _v$[ebp], eax

; 2251 : 		if (v > bv && GetFeatureStatus(i) != VIS_DESTROYED)

	mov	edx, DWORD PTR _v$[ebp]
	cmp	edx, DWORD PTR _bv$[ebp]
	jle	SHORT $LN1@GetBestTar
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	je	SHORT $LN1@GetBestTar

; 2252 : 		{
; 2253 : 			bv = v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _bv$[ebp], ecx

; 2254 : 			f = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _f$[ebp], edx
$LN1@GetBestTar:

; 2255 : 		}
; 2256 : 	}

	jmp	SHORT $LN3@GetBestTar
$LN2@GetBestTar:

; 2257 : 	return (uchar)f;

	mov	al, BYTE PTR _f$[ebp]

; 2258 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBestTarget@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetBestTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_hours$ = -16						; size = 4
_f$ = -12						; size = 4
_s$ = -8						; size = 4
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?GetRepairTime@ObjectiveClass@@QAEHH@Z PROC		; ObjectiveClass::GetRepairTime
; _this$ = ecx

; 2229 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2230 : 	int		s,hours=2400,f;

	mov	DWORD PTR _hours$[ebp], 2400		; 00000960H

; 2231 : 
; 2232 : 	ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 2233 : 	s = GetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	eax, al
	mov	DWORD PTR _s$[ebp], eax
$LN3@GetRepairT:

; 2234 : 	while (s < status)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR _status$[ebp]
	jge	SHORT $LN2@GetRepairT

; 2235 : 	{
; 2236 : 		f = BestRepairFeature(this,&hours);

	lea	edx, DWORD PTR _hours$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z ; BestRepairFeature
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax

; 2237 : 		if (f < 0)

	cmp	DWORD PTR _f$[ebp], 0
	jge	SHORT $LN1@GetRepairT

; 2238 : 			break;

	jmp	SHORT $LN2@GetRepairT
$LN1@GetRepairT:

; 2239 : 		s += GetFeatureValue(f)/2;

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 2240 : 	}

	jmp	SHORT $LN3@GetRepairT
$LN2@GetRepairT:

; 2241 : 	return 2400-hours;

	mov	eax, 2400				; 00000960H
	sub	eax, DWORD PTR _hours$[ebp]

; 2242 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetRepairTime@ObjectiveClass@@QAEHH@Z ENDP		; ObjectiveClass::GetRepairTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_bf$ = -12						; size = 4
_s$ = -8						; size = 4
_this$ = -4						; size = 4
_hours$ = 8						; size = 4
?GetExpectedStatus@ObjectiveClass@@QAEEH@Z PROC		; ObjectiveClass::GetExpectedStatus
; _this$ = ecx

; 2211 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2212 : 	int		bf,s;
; 2213 : 
; 2214 : 	s = GetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	eax, al
	mov	DWORD PTR _s$[ebp], eax

; 2215 : 	hours += ((Camp_GetCurrentTime() - GetObjectiveRepairTime())/CampaignHours);

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveRepairTime@ObjectiveClass@@QAEKXZ ; ObjectiveClass::GetObjectiveRepairTime
	sub	esi, eax
	mov	eax, esi
	xor	edx, edx
	mov	ecx, 3600000				; 0036ee80H
	div	ecx
	add	eax, DWORD PTR _hours$[ebp]
	mov	DWORD PTR _hours$[ebp], eax

; 2216 : 	bf = BestRepairFeature(this,&hours);

	lea	edx, DWORD PTR _hours$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z ; BestRepairFeature
	add	esp, 8
	mov	DWORD PTR _bf$[ebp], eax
$LN3@GetExpecte:

; 2217 : 	while (bf > -1)

	cmp	DWORD PTR _bf$[ebp], -1
	jle	SHORT $LN2@GetExpecte

; 2218 : 	{
; 2219 : 		s += GetFeatureValue(bf)/2;

	mov	ecx, DWORD PTR _bf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureValue@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureValue
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 2220 : 		bf = BestRepairFeature(this,&hours);

	lea	edx, DWORD PTR _hours$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z ; BestRepairFeature
	add	esp, 8
	mov	DWORD PTR _bf$[ebp], eax

; 2221 : 	}

	jmp	SHORT $LN3@GetExpecte
$LN2@GetExpecte:

; 2222 : 	if (s > 100)

	cmp	DWORD PTR _s$[ebp], 100			; 00000064H
	jle	SHORT $LN1@GetExpecte

; 2223 : 		s = 100;

	mov	DWORD PTR _s$[ebp], 100			; 00000064H
$LN1@GetExpecte:

; 2224 : 	return (uchar)s;

	mov	al, BYTE PTR _s$[ebp]

; 2225 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetExpectedStatus@ObjectiveClass@@QAEEH@Z ENDP		; ObjectiveClass::GetExpectedStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ PROC ; ObjectiveClass::GetObjectiveClassData
; _this$ = ecx

; 2261 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2262 : 	return static_data.class_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+232]

; 2263 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ENDP ; ObjectiveClass::GetObjectiveClassData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?GetFeatureOffset@ObjectiveClass@@QAEHHPAM00@Z PROC	; ObjectiveClass::GetFeatureOffset
; _this$ = ecx

; 2132 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2133 : 	if (f<0)

	cmp	DWORD PTR _f$[ebp], 0
	jge	SHORT $LN3@GetFeature

; 2134 : 		return 0;

	xor	eax, eax
	jmp	$LN4@GetFeature
$LN3@GetFeature:

; 2135 : 	if (f>255) // FRB - garbage check

	cmp	DWORD PTR _f$[ebp], 255			; 000000ffH
	jle	SHORT $LN2@GetFeature

; 2136 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN2@GetFeature:

; 2137 : 	if (!static_data.class_data)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN1@GetFeature

; 2138 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN1@GetFeature:

; 2139 : 	*x = FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Offset.x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	add	eax, DWORD PTR _f$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	mov	eax, DWORD PTR [edx+eax+16]
	mov	DWORD PTR [ecx], eax

; 2140 : 	*y = FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Offset.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	add	eax, DWORD PTR _f$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	mov	eax, DWORD PTR [edx+eax+20]
	mov	DWORD PTR [ecx], eax

; 2141 : 	*z = FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Offset.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	add	eax, DWORD PTR _f$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	mov	eax, DWORD PTR [edx+eax+24]
	mov	DWORD PTR [ecx], eax

; 2142 : 	return 1;

	mov	eax, 1
$LN4@GetFeature:

; 2143 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetFeatureOffset@ObjectiveClass@@QAEHHPAM00@Z ENDP	; ObjectiveClass::GetFeatureOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?GetFeatureID@ObjectiveClass@@QAEHH@Z PROC		; ObjectiveClass::GetFeatureID
; _this$ = ecx

; 2121 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2122 : 	if (f<0)

	cmp	DWORD PTR _f$[ebp], 0
	jge	SHORT $LN3@GetFeature

; 2123 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN3@GetFeature:

; 2124 : 	if (f>255) // FRB - garbage check

	cmp	DWORD PTR _f$[ebp], 255			; 000000ffH
	jle	SHORT $LN2@GetFeature

; 2125 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN2@GetFeature:

; 2126 : 	if (!static_data.class_data)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN1@GetFeature

; 2127 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN1@GetFeature:

; 2128 : 	return FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Index;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	add	eax, DWORD PTR _f$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movsx	eax, WORD PTR [ecx+eax]
$LN4@GetFeature:

; 2129 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureID@ObjectiveClass@@QAEHH@Z ENDP		; ObjectiveClass::GetFeatureID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?GetFeatureRepairTime@ObjectiveClass@@QAEHH@Z PROC	; ObjectiveClass::GetFeatureRepairTime
; _this$ = ecx

; 2110 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2111 : 	if (f<0)

	cmp	DWORD PTR _f$[ebp], 0
	jge	SHORT $LN3@GetFeature

; 2112 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN3@GetFeature:

; 2113 : 	if (f>255) // FRB - garbage check

	cmp	DWORD PTR _f$[ebp], 255			; 000000ffH
	jle	SHORT $LN2@GetFeature

; 2114 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN2@GetFeature:

; 2115 : 	if (!static_data.class_data)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN1@GetFeature

; 2116 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN1@GetFeature:

; 2117 : 	return ::GetFeatureRepairTime(FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Index);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	add	eax, DWORD PTR _f$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movsx	edx, WORD PTR [ecx+eax]
	push	edx
	call	?GetFeatureRepairTime@@YAHH@Z		; GetFeatureRepairTime
	add	esp, 4
$LN4@GetFeature:

; 2118 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureRepairTime@ObjectiveClass@@QAEHH@Z ENDP	; ObjectiveClass::GetFeatureRepairTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?GetFeatureValue@ObjectiveClass@@QAEHH@Z PROC		; ObjectiveClass::GetFeatureValue
; _this$ = ecx

; 2099 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2100 : 	if (f<0)

	cmp	DWORD PTR _f$[ebp], 0
	jge	SHORT $LN3@GetFeature

; 2101 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN3@GetFeature:

; 2102 : 	if (f>255) // FRB - garbage check

	cmp	DWORD PTR _f$[ebp], 255			; 000000ffH
	jle	SHORT $LN2@GetFeature

; 2103 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN2@GetFeature:

; 2104 : 	if (!static_data.class_data)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN1@GetFeature

; 2105 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN1@GetFeature:

; 2106 : 	return FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Value;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	add	eax, DWORD PTR _f$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movzx	eax, BYTE PTR [ecx+eax+12]
$LN4@GetFeature:

; 2107 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureValue@ObjectiveClass@@QAEHH@Z ENDP		; ObjectiveClass::GetFeatureValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?GetFeatureStatus@ObjectiveClass@@QAEHH@Z PROC		; ObjectiveClass::GetFeatureStatus
; _this$ = ecx

; 2085 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2086 : 	int		i = f/4;

	mov	eax, DWORD PTR _f$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _i$[ebp], eax

; 2087 : 	f -= i*4;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _f$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _f$[ebp], ecx

; 2088 : 	//if (f<=0)Cobra Put this back to below. This breaks damage stuff
; 2089 : 	if (f<0)

	jns	SHORT $LN3@GetFeature

; 2090 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN3@GetFeature:

; 2091 : 	if (f>255) // FRB - garbage check

	cmp	DWORD PTR _f$[ebp], 255			; 000000ffH
	jle	SHORT $LN2@GetFeature

; 2092 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN2@GetFeature:

; 2093 : 	if (!obj_data.fstatus)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+204], 0
	jne	SHORT $LN1@GetFeature

; 2094 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@GetFeature
$LN1@GetFeature:

; 2095 : 	return (obj_data.fstatus[i] >> (f*2)) & 0x03;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 1
	sar	eax, cl
	and	eax, 3
$LN4@GetFeature:

; 2096 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ENDP		; ObjectiveClass::GetFeatureStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetTotalFeatures@ObjectiveClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTotalFeatures@ObjectiveClass@@QAEFXZ PROC		; ObjectiveClass::GetTotalFeatures, COMDAT
; _this$ = ecx

; 278  : 	short GetTotalFeatures (void)							{	return static_data.class_data->Features; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	ax, BYTE PTR [ecx+50]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTotalFeatures@ObjectiveClass@@QAEFXZ ENDP		; ObjectiveClass::GetTotalFeatures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_almost$ = -8						; size = 4
_this$ = -4						; size = 4
?GetAdjustedDataRate@ObjectiveClass@@QAEFXZ PROC	; ObjectiveClass::GetAdjustedDataRate
; _this$ = ecx

; 2072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2073 : 	int						almost;
; 2074 : 
; 2075 : 	if (!static_data.class_data)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN2@GetAdjuste

; 2076 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@GetAdjuste
$LN2@GetAdjuste:

; 2077 : 
; 2078 : 	if (!static_data.class_data->DataRate)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+22]
	test	eax, eax
	jne	SHORT $LN1@GetAdjuste

; 2079 : 		static_data.class_data->DataRate = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	eax, 1
	mov	WORD PTR [edx+22], ax
$LN1@GetAdjuste:

; 2080 : 	almost = (100 / static_data.class_data->DataRate) - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	ecx, WORD PTR [edx+22]
	mov	eax, 100				; 00000064H
	cdq
	idiv	ecx
	sub	eax, 1
	mov	DWORD PTR _almost$[ebp], eax

; 2081 : 	return (short)((GetObjectiveStatus()+almost) * static_data.class_data->DataRate / 100);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	eax, al
	add	eax, DWORD PTR _almost$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+232]
	movsx	edx, WORD PTR [ecx+22]
	imul	eax, edx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
$LN3@GetAdjuste:

; 2082 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAdjustedDataRate@ObjectiveClass@@QAEFXZ ENDP	; ObjectiveClass::GetAdjustedDataRate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveDataRate@ObjectiveClass@@QAEFXZ PROC	; ObjectiveClass::GetObjectiveDataRate
; _this$ = ecx

; 2065 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2066 : 	if (!static_data.class_data)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN1@GetObjecti

; 2067 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@GetObjecti
$LN1@GetObjecti:

; 2068 : 	return (short)(static_data.class_data->DataRate*GetObjectiveStatus()/100);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	esi, WORD PTR [edx+22]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	eax, al
	imul	eax, esi
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
$LN2@GetObjecti:

; 2069 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveDataRate@ObjectiveClass@@QAEFXZ ENDP	; ObjectiveClass::GetObjectiveDataRate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveRepairTime@ObjectiveClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveRepairTime@ObjectiveClass@@QAEKXZ PROC	; ObjectiveClass::GetObjectiveRepairTime, COMDAT
; _this$ = ecx

; 272  : 	CampaignTime GetObjectiveRepairTime (void)				{	return obj_data.last_repair; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+184]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveRepairTime@ObjectiveClass@@QAEKXZ ENDP	; ObjectiveClass::GetObjectiveRepairTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveScore@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveScore@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::GetObjectiveScore, COMDAT
; _this$ = ecx

; 271  : 	int GetObjectiveScore (void)							{	return obj_data.aiscore; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+188]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveScore@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::GetObjectiveScore
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveStatus@ObjectiveClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetObjectiveStatus, COMDAT
; _this$ = ecx

; 270  : 	uchar GetObjectiveStatus (void)							{	return obj_data.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+199]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectivePriority@ObjectiveClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectivePriority@ObjectiveClass@@QAEFXZ PROC	; ObjectiveClass::GetObjectivePriority, COMDAT
; _this$ = ecx

; 269  : 	short GetObjectivePriority (void)						{	return obj_data.priority; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ax, BYTE PTR [eax+200]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectivePriority@ObjectiveClass@@QAEFXZ ENDP	; ObjectiveClass::GetObjectivePriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveNameID@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveNameID@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::GetObjectiveNameID, COMDAT
; _this$ = ecx

; 267  : 	int GetObjectiveNameID(void)							{ 	return static_data.nameid; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+212]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveNameID@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::GetObjectiveNameID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ PROC ; ObjectiveClass::GetObjectiveParentID, COMDAT
; _this$ = ecx

; 266  : 	VU_ID GetObjectiveParentID(void)						{ 	return static_data.parent; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	mov	edx, DWORD PTR [eax+220]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetObjectiveParentID@ObjectiveClass@@QAE?AVVU_ID@@XZ ENDP ; ObjectiveClass::GetObjectiveParentID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_so$1 = -8						; size = 4
_this$ = -4						; size = 4
?GetObjectivePrimary@ObjectiveClass@@QAEPAV1@XZ PROC	; ObjectiveClass::GetObjectivePrimary
; _this$ = ecx

; 2003 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2004 : 	if (IsPrimary())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPrimary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsPrimary
	test	eax, eax
	je	SHORT $LN5@GetObjecti

; 2005 : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN6@GetObjecti
	jmp	SHORT $LN4@GetObjecti
$LN5@GetObjecti:

; 2006 : 	else if (IsSecondary())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN3@GetObjecti

; 2007 : 		return (Objective) vuDatabase->Find(static_data.parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR [eax+216]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	jmp	SHORT $LN6@GetObjecti

; 2008 : 	else

	jmp	SHORT $LN4@GetObjecti
$LN3@GetObjecti:

; 2009 : 	{
; 2010 : 		Objective so = (Objective) vuDatabase->Find(static_data.parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR [eax+216]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _so$1[ebp], eax

; 2011 : 		if (so)

	cmp	DWORD PTR _so$1[ebp], 0
	je	SHORT $LN4@GetObjecti

; 2012 : 			return so->GetObjectivePrimary();

	mov	ecx, DWORD PTR _so$1[ebp]
	call	?GetObjectivePrimary@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectivePrimary
	jmp	SHORT $LN6@GetObjecti
$LN4@GetObjecti:

; 2013 : 	}
; 2014 : 	return NULL;

	xor	eax, eax
$LN6@GetObjecti:

; 2015 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectivePrimary@ObjectiveClass@@QAEPAV1@XZ ENDP	; ObjectiveClass::GetObjectivePrimary
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveSecondary@ObjectiveClass@@QAEPAV1@XZ PROC	; ObjectiveClass::GetObjectiveSecondary
; _this$ = ecx

; 1995 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1996 : 	if (IsSecondary())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSecondary@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondary
	test	eax, eax
	je	SHORT $LN2@GetObjecti

; 1997 : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@GetObjecti

; 1998 : 	else

	jmp	SHORT $LN3@GetObjecti
$LN2@GetObjecti:

; 1999 : 		return (Objective) vuDatabase->Find(static_data.parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR [eax+216]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
$LN3@GetObjecti:

; 2000 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveSecondary@ObjectiveClass@@QAEPAV1@XZ ENDP	; ObjectiveClass::GetObjectiveSecondary
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ PROC	; ObjectiveClass::GetObjectiveParent, COMDAT
; _this$ = ecx

; 263  : 	Objective GetObjectiveParent(void)						{ 	return FindObjective(static_data.parent); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR [eax+216]
	push	edx
	call	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ; FindObjective
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ENDP	; ObjectiveClass::GetObjectiveParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveOldown@ObjectiveClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveOldown@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetObjectiveOldown, COMDAT
; _this$ = ecx

; 262  : 	Control GetObjectiveOldown (void)						{	return static_data.first_owner; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+224]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveOldown@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetObjectiveOldown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z PROC		; ObjectiveClass::GetNeighbor
; _this$ = ecx

; 1980 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1981 : 	Objective	n;
; 1982 : 
; 1983 : 	if (num >= static_data.links)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	cmp	DWORD PTR _num$[ebp], ecx
	jl	SHORT $LN2@GetNeighbo

; 1984 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetNeighbo
$LN2@GetNeighbo:

; 1985 : 	n = (Objective) vuDatabase->Find(link_data[num].id);

	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	mov	eax, DWORD PTR [ecx+edx+12]
	push	eax
	mov	ecx, DWORD PTR [ecx+edx+8]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _n$[ebp], eax

; 1986 : 	if (!n)

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN1@GetNeighbo

; 1987 : 	{
; 1988 : 		// Better axe this, since we couldn't find it.
; 1989 : 		RemoveObjectiveNeighbor(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z ; ObjectiveClass::RemoveObjectiveNeighbor
$LN1@GetNeighbo:

; 1990 : 	}
; 1991 : 	return n;

	mov	eax, DWORD PTR _n$[ebp]
$LN3@GetNeighbo:

; 1992 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ENDP		; ObjectiveClass::GetNeighbor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetNeighborId@ObjectiveClass@@QAE?AVVU_ID@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_n$ = 12						; size = 4
?GetNeighborId@ObjectiveClass@@QAE?AVVU_ID@@H@Z PROC	; ObjectiveClass::GetNeighborId, COMDAT
; _this$ = ecx

; 259  : 	VU_ID GetNeighborId (int n)								{	return link_data[n].id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	ecx, DWORD PTR [edx+eax+8]
	mov	edx, DWORD PTR [edx+eax+12]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNeighborId@ObjectiveClass@@QAE?AVVU_ID@@H@Z ENDP	; ObjectiveClass::GetNeighborId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_f$ = 8							; size = 4
_n$ = 12						; size = 4
_from$ = 16						; size = 4
?SetFeatureStatus@ObjectiveClass@@QAEXHHH@Z PROC	; ObjectiveClass::SetFeatureStatus
; _this$ = ecx

; 2043 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2044 : 	int		i = f/4;

	mov	eax, DWORD PTR _f$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _i$[ebp], eax

; 2045 : 
; 2046 : 	if (GetFeatureStatus(f) == n)

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, DWORD PTR _n$[ebp]
	jne	SHORT $LN5@SetFeature

; 2047 : 		return;

	jmp	$LN6@SetFeature
$LN5@SetFeature:

; 2048 : 
; 2049 : 	// Check for critical links and set those features accordingly.
; 2050 : 	if (n == VIS_DESTROYED || n == VIS_REPAIRED)

	cmp	DWORD PTR _n$[ebp], 3
	je	SHORT $LN3@SetFeature
	cmp	DWORD PTR _n$[ebp], 1
	jne	$LN4@SetFeature
$LN3@SetFeature:

; 2051 : 	{
; 2052 : 		if (from != f-1 && (FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Flags & FEAT_PREV_CRIT))

	mov	ecx, DWORD PTR _f$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _from$[ebp], ecx
	je	SHORT $LN2@SetFeature
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movsx	ecx, WORD PTR [eax+52]
	add	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movzx	eax, WORD PTR [edx+ecx+2]
	and	eax, 1
	je	SHORT $LN2@SetFeature

; 2053 : 			SetFeatureStatus (f-1, n, f);

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHHH@Z ; ObjectiveClass::SetFeatureStatus
$LN2@SetFeature:

; 2054 : 		if (from != f+1 && (FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Flags & FEAT_NEXT_CRIT))

	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 1
	cmp	DWORD PTR _from$[ebp], ecx
	je	SHORT $LN4@SetFeature
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movsx	ecx, WORD PTR [eax+52]
	add	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movzx	eax, WORD PTR [edx+ecx+2]
	and	eax, 2
	je	SHORT $LN4@SetFeature

; 2055 : 			SetFeatureStatus (f+1, n, f);

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHHH@Z ; ObjectiveClass::SetFeatureStatus
$LN4@SetFeature:

; 2056 : 	}
; 2057 : 
; 2058 : 	f -= i*4;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _f$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _f$[ebp], edx

; 2059 : 	obj_data.fstatus[i] = (uchar)((obj_data.fstatus[i] & ~(3<<(f*2))) | (n << (f*2)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 1
	mov	edx, 3
	shl	edx, cl
	not	edx
	and	eax, edx
	mov	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _n$[ebp]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 2060 : 	ResetObjectiveStatus ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 2061 : 	SetDelta(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetDelta
$LN6@SetFeature:

; 2062 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetFeatureStatus@ObjectiveClass@@QAEXHHH@Z ENDP	; ObjectiveClass::SetFeatureStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_f$ = 8							; size = 4
_n$ = 12						; size = 4
?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z PROC		; ObjectiveClass::SetFeatureStatus
; _this$ = ecx

; 2018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2019 : 	int		i = f/4;

	mov	eax, DWORD PTR _f$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _i$[ebp], eax

; 2020 : 
; 2021 : 	if (GetFeatureStatus(f) == n)

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, DWORD PTR _n$[ebp]
	jne	SHORT $LN5@SetFeature

; 2022 : 		return;

	jmp	$LN6@SetFeature
$LN5@SetFeature:

; 2023 : 
; 2024 : 	// Check for critical links and set those features accordingly. NOTE: repair accross critical links too..
; 2025 : 	if (n == VIS_DESTROYED || n == VIS_REPAIRED)

	cmp	DWORD PTR _n$[ebp], 3
	je	SHORT $LN3@SetFeature
	cmp	DWORD PTR _n$[ebp], 1
	jne	SHORT $LN4@SetFeature
$LN3@SetFeature:

; 2026 : 	{
; 2027 : 		if (FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Flags & FEAT_PREV_CRIT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	add	eax, DWORD PTR _f$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movzx	edx, WORD PTR [ecx+eax+2]
	and	edx, 1
	je	SHORT $LN2@SetFeature

; 2028 : 			SetFeatureStatus (f-1, n, f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHHH@Z ; ObjectiveClass::SetFeatureStatus
$LN2@SetFeature:

; 2029 : 		if (FeatureEntryDataTable[static_data.class_data->FirstFeature+f].Flags & FEAT_NEXT_CRIT)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movsx	edx, WORD PTR [ecx+52]
	add	edx, DWORD PTR _f$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movzx	ecx, WORD PTR [eax+edx+2]
	and	ecx, 2
	je	SHORT $LN4@SetFeature

; 2030 : 			SetFeatureStatus (f+1, n, f);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHHH@Z ; ObjectiveClass::SetFeatureStatus
$LN4@SetFeature:

; 2031 : 	}
; 2032 : 
; 2033 : 	f -= i*4;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _f$[ebp]
	sub	eax, edx
	mov	DWORD PTR _f$[ebp], eax

; 2034 : 	obj_data.fstatus[i] = (uchar)((obj_data.fstatus[i] & ~(3<<(f*2))) | (n << (f*2)));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 1
	mov	eax, 3
	shl	eax, cl
	not	eax
	and	edx, eax
	mov	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+204]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+ecx], dl

; 2035 : 	//MakeObjectiveDirty (DIRTY_STATUS, DDP[9].priority);
; 2036 : 	MakeObjectiveDirty (DIRTY_STATUS, SEND_NOW);

	push	65536					; 00010000H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeObjectiveDirty@ObjectiveClass@@QAEXW4Dirty_Objective@@W4Dirtyness@@@Z ; ObjectiveClass::MakeObjectiveDirty

; 2037 : 	SetDelta(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetDelta
$LN6@SetFeature:

; 2038 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ENDP		; ObjectiveClass::SetFeatureStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_nsize$ = -8						; size = 4
_this$ = -4						; size = 4
_dindex$ = 8						; size = 4
?SetObjectiveClass@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetObjectiveClass
; _this$ = ecx

; 1640 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1641 : 	int		nsize;
; 1642 : 
; 1643 : 	SetEntityType((ushort)dindex);

	movzx	eax, WORD PTR _dindex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEntityType@VuEntity@@QAEXG@Z	; VuEntity::SetEntityType

; 1644 : 	static_data.class_data = (ObjClassDataType*)Falcon4ClassTable[dindex - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	ecx, DWORD PTR _dindex$[ebp]
	sub	ecx, 100				; 00000064H
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, DWORD PTR [eax+ecx+77]
	mov	DWORD PTR [edx+232], ecx

; 1645 : 	if (obj_data.fstatus)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+204], 0
	je	SHORT $LN1@SetObjecti

; 1646 : 		delete [] obj_data.fstatus;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@SetObjecti:

; 1647 : 	nsize = ((static_data.class_data->Features*2)+7)/8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	lea	eax, DWORD PTR [edx+edx+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _nsize$[ebp], eax

; 1648 : #ifdef USE_SH_POOLS
; 1649 : 	obj_data.fstatus = (uchar *)MemAllocPtr(gObjMemPool, sizeof(uchar)*nsize, 0 );
; 1650 : #else
; 1651 : 	obj_data.fstatus = new uchar[nsize];

	mov	eax, DWORD PTR _nsize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+204], edx

; 1652 : #endif
; 1653 : 	memset(obj_data.fstatus,0,nsize);

	mov	eax, DWORD PTR _nsize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1654 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveClass@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetObjectiveClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_dindex$ = -12						; size = 4
_this$ = -8						; size = 4
_type$ = -2						; size = 1
_stype$ = -1						; size = 1
_s$ = 8							; size = 1
?SetObjectiveSType@ObjectiveClass@@QAEXE@Z PROC		; ObjectiveClass::SetObjectiveSType
; _this$ = ecx

; 1755 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1756 : 	uchar	type,stype;
; 1757 : 	int	dindex;
; 1758 : 
; 1759 : 	type = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	mov	BYTE PTR _type$[ebp], al

; 1760 : 	stype = s;						// Try for a real objective

	mov	al, BYTE PTR _s$[ebp]
	mov	BYTE PTR _stype$[ebp], al

; 1761 : 	dindex = GetClassID(DOMAIN_LAND, CLASS_OBJECTIVE, type, stype, 0, 0, 0, 0);

	push	0
	push	0
	push	0
	push	0
	movzx	ecx, BYTE PTR _stype$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	push	4
	push	3
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	mov	DWORD PTR _dindex$[ebp], eax

; 1762 : 	if (!dindex)

	cmp	DWORD PTR _dindex$[ebp], 0
	jne	SHORT $LN1@SetObjecti

; 1763 : 		return;

	jmp	SHORT $LN2@SetObjecti
$LN1@SetObjecti:

; 1764 : 	SetObjectiveClass(dindex + VU_LAST_ENTITY_TYPE);

	mov	eax, DWORD PTR _dindex$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveClass@ObjectiveClass@@QAEXH@Z ; ObjectiveClass::SetObjectiveClass

; 1765 : 	UpdateObjectiveLists();   

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateObjectiveLists@ObjectiveClass@@QAEXXZ ; ObjectiveClass::UpdateObjectiveLists
$LN2@SetObjecti:

; 1766 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveSType@ObjectiveClass@@QAEXE@Z ENDP		; ObjectiveClass::SetObjectiveSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_dindex$ = -8						; size = 4
_type$ = -2						; size = 1
_stype$ = -1						; size = 1
_t$ = 8							; size = 1
?SetObjectiveType@ObjectiveClass@@QAEXE@Z PROC		; ObjectiveClass::SetObjectiveType
; _this$ = ecx

; 1741 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1742 : 	uchar	type,stype;
; 1743 : 	int	dindex;
; 1744 : 
; 1745 : 	type = t;

	mov	al, BYTE PTR _t$[ebp]
	mov	BYTE PTR _type$[ebp], al

; 1746 : 	stype = 1;						// Try for a real objective

	mov	BYTE PTR _stype$[ebp], 1

; 1747 : 	dindex = GetClassID(DOMAIN_LAND, CLASS_OBJECTIVE, type, stype, 0, 0, 0, 0);

	push	0
	push	0
	push	0
	push	0
	movzx	ecx, BYTE PTR _stype$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	push	4
	push	3
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	mov	DWORD PTR _dindex$[ebp], eax

; 1748 : 	if (!dindex)

	cmp	DWORD PTR _dindex$[ebp], 0
	jne	SHORT $LN1@SetObjecti

; 1749 : 		return;

	jmp	SHORT $LN2@SetObjecti
$LN1@SetObjecti:

; 1750 : 	SetObjectiveClass(dindex + VU_LAST_ENTITY_TYPE);

	mov	eax, DWORD PTR _dindex$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveClass@ObjectiveClass@@QAEXH@Z ; ObjectiveClass::SetObjectiveClass

; 1751 : 	UpdateObjectiveLists();   

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateObjectiveLists@ObjectiveClass@@QAEXXZ ; ObjectiveClass::UpdateObjectiveLists
$LN2@SetObjecti:

; 1752 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveType@ObjectiveClass@@QAEXE@Z ENDP		; ObjectiveClass::SetObjectiveType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?SetObjectiveStatus@ObjectiveClass@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 1
?SetObjectiveStatus@ObjectiveClass@@QAEXE@Z PROC	; ObjectiveClass::SetObjectiveStatus, COMDAT
; _this$ = ecx

; 247  : 	void SetObjectiveStatus (uchar s)						{	if (obj_data.status > s) obj_data.last_repair = Camp_GetCurrentTime(); obj_data.status = s; MakeObjectiveDirty (DIRTY_STATUS, DDP[180].priority); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+199]
	movzx	edx, BYTE PTR _s$[ebp]
	cmp	ecx, edx
	jle	SHORT $LN1@SetObjecti
	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+184], eax
$LN1@SetObjecti:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _s$[ebp]
	mov	BYTE PTR [edx+199], al
	mov	ecx, 4
	imul	ecx, 180				; 000000b4H
	mov	edx, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeObjectiveDirty@ObjectiveClass@@QAEXW4Dirty_Objective@@W4Dirtyness@@@Z ; ObjectiveClass::MakeObjectiveDirty
	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveStatus@ObjectiveClass@@QAEXE@Z ENDP	; ObjectiveClass::SetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?SetObjectiveRepairTime@ObjectiveClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetObjectiveRepairTime@ObjectiveClass@@QAEXK@Z PROC	; ObjectiveClass::SetObjectiveRepairTime, COMDAT
; _this$ = ecx

; 243  : 	void SetObjectiveRepairTime (CampaignTime t)			{	obj_data.last_repair = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+184], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveRepairTime@ObjectiveClass@@QAEXK@Z ENDP	; ObjectiveClass::SetObjectiveRepairTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?SetObjectiveScore@ObjectiveClass@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_score$ = 8						; size = 2
?SetObjectiveScore@ObjectiveClass@@QAEXF@Z PROC		; ObjectiveClass::SetObjectiveScore, COMDAT
; _this$ = ecx

; 242  : 	void SetObjectiveScore (short score)					{ 	obj_data.aiscore = score; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _score$[ebp]
	mov	WORD PTR [eax+188], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveScore@ObjectiveClass@@QAEXF@Z ENDP		; ObjectiveClass::SetObjectiveScore
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nid$ = -4						; size = 4
_name$ = 8						; size = 4
?SetObjectiveName@ObjectiveClass@@QAEXPAD@Z PROC	; ObjectiveClass::SetObjectiveName
; _this$ = ecx

; 1769 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1770 : 	int			nid;
; 1771 : 
; 1772 : 	nid = GetObjectiveNameID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveNameID@ObjectiveClass@@QAEHXZ ; ObjectiveClass::GetObjectiveNameID
	mov	DWORD PTR _nid$[ebp], eax

; 1773 : 	if (name == NULL || name[0] == 0 || name[0] == '0')

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN4@SetObjecti
	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _name$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN4@SetObjecti
	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _name$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN5@SetObjecti
$LN4@SetObjecti:

; 1774 : 	{
; 1775 : 		if (!nid)

	cmp	DWORD PTR _nid$[ebp], 0
	jne	SHORT $LN3@SetObjecti

; 1776 : 			return;

	jmp	SHORT $LN6@SetObjecti
$LN3@SetObjecti:

; 1777 : 		SetObjectiveNameID(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveNameID@ObjectiveClass@@QAEXF@Z ; ObjectiveClass::SetObjectiveNameID

; 1778 : 		return;

	jmp	SHORT $LN6@SetObjecti
$LN5@SetObjecti:

; 1779 : 	}
; 1780 : 	if (nid == 0)

	cmp	DWORD PTR _nid$[ebp], 0
	jne	SHORT $LN2@SetObjecti

; 1781 : 	{
; 1782 : 		nid = AddName(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?AddName@@YAHPAD@Z			; AddName
	add	esp, 4
	mov	DWORD PTR _nid$[ebp], eax

; 1783 : 		SetObjectiveNameID((short)nid);

	movzx	ecx, WORD PTR _nid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveNameID@ObjectiveClass@@QAEXF@Z ; ObjectiveClass::SetObjectiveNameID

; 1784 : 	}
; 1785 : 	else

	jmp	SHORT $LN6@SetObjecti
$LN2@SetObjecti:

; 1786 : 		SetName(nid,name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _nid$[ebp]
	push	eax
	call	?SetName@@YAHHPAD@Z			; SetName
	add	esp, 8
$LN6@SetObjecti:

; 1787 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveName@ObjectiveClass@@QAEXPAD@Z ENDP	; ObjectiveClass::SetObjectiveName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?SetObjectiveNameID@ObjectiveClass@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 2
?SetObjectiveNameID@ObjectiveClass@@QAEXF@Z PROC	; ObjectiveClass::SetObjectiveNameID, COMDAT
; _this$ = ecx

; 239  : 	void SetObjectiveNameID(short n)						{ 	static_data.nameid = n; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _n$[ebp]
	mov	WORD PTR [eax+212], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetObjectiveNameID@ObjectiveClass@@QAEXF@Z ENDP	; ObjectiveClass::SetObjectiveNameID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 8
?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z PROC	; ObjectiveClass::SetObjectiveParent, COMDAT
; _this$ = ecx

; 238  : 	void SetObjectiveParent(VU_ID p)						{ 	static_data.parent = p; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+216], ecx
	mov	edx, DWORD PTR _p$[ebp+4]
	mov	DWORD PTR [eax+220], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetObjectiveParent@ObjectiveClass@@QAEXVVU_ID@@@Z ENDP	; ObjectiveClass::SetObjectiveParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?SetOwner@ObjectiveClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 1
?SetOwner@ObjectiveClass@@UAEXE@Z PROC			; ObjectiveClass::SetOwner, COMDAT
; _this$ = ecx

; 236  : 	virtual void SetOwner (Control c)						{	CampBaseClass::SetOwner(c); SetDelta(1); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOwner@CampBaseClass@@UAEXE@Z	; CampBaseClass::SetOwner
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetDelta
	mov	esp, ebp
	pop	ebp
	ret	4
?SetOwner@ObjectiveClass@@UAEXE@Z ENDP			; ObjectiveClass::SetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_stp$ = -16						; size = 4
_size$1 = -12						; size = 4
_this$ = -8						; size = 4
_bits$ = -1						; size = 1
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
?ReadDirty@ObjectiveClass@@QAEXPAPAEPAJ@Z PROC		; ObjectiveClass::ReadDirty
; _this$ = ecx

; 3110 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3111 : 
; 3112 : 	unsigned char *stp, bits;
; 3113 : 
; 3114 : 	//get bitfield
; 3115 : 	memcpychk(&bits, stream, sizeof(VU_BYTE), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bits$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 3116 : 
; 3117 : 	if (bits & DIRTY_STATUS) {

	movzx	eax, BYTE PTR _bits$[ebp]
	and	eax, 1
	je	SHORT $LN2@ReadDirty

; 3118 : 		memcpychk(&obj_data.status, stream, sizeof(unsigned char), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 199				; 000000c7H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 3119 : 		
; 3120 : 		int size = ((static_data.class_data->Features*2)+7)/8;		

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	eax, BYTE PTR [edx+50]
	lea	eax, DWORD PTR [eax+eax+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _size$1[ebp], eax

; 3121 : 		stp = obj_data.fstatus;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR _stp$[ebp], edx

; 3122 : 
; 3123 : //		for (num = 0; num < size; num ++){
; 3124 : 			memcpychk(stp, stream, sizeof(unsigned char)*size, rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _stp$[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN2@ReadDirty:

; 3125 : //			stp += sizeof (unsigned char);
; 3126 : //		}
; 3127 : 	}
; 3128 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ReadDirty@ObjectiveClass@@QAEXPAPAEPAJ@Z ENDP		; ObjectiveClass::ReadDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_start$ = -20						; size = 4
_stp$ = -16						; size = 4
_this$ = -12						; size = 4
_ptr$ = -8						; size = 4
_size$ = -4						; size = 2
_stream$ = 8						; size = 4
?WriteDirty@ObjectiveClass@@QAEXPAPAE@Z PROC		; ObjectiveClass::WriteDirty
; _this$ = ecx

; 3061 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3062 : 	short
; 3063 : 			size;
; 3064 : 
; 3065 : 	unsigned char
; 3066 : 			*start,
; 3067 : 			*stp,
; 3068 : 			*ptr;
; 3069 : 
; 3070 : 	start = *stream;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx

; 3071 : 	ptr = start;

	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _ptr$[ebp], edx

; 3072 : 
; 3073 : 	//	MonoPrint ("OB %08x\n", dirty_objective);
; 3074 : 
; 3075 : 	// Encode it up
; 3076 : 
; 3077 : 	*ptr = (unsigned char) dirty_objective;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+208]
	mov	BYTE PTR [eax], dl

; 3078 : 	ptr += sizeof (unsigned char);

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax

; 3079 : 
; 3080 : 	if (dirty_objective & DIRTY_STATUS)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	and	edx, 1
	je	SHORT $LN3@WriteDirty

; 3081 : 	{
; 3082 : 		*(uchar*)ptr = obj_data.status;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+199]
	mov	BYTE PTR [eax], dl

; 3083 : 		ptr += sizeof (uchar);

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax

; 3084 : 
; 3085 : 		size = (short)(((static_data.class_data->Features*2)+7)/8);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	eax, BYTE PTR [edx+50]
	lea	eax, DWORD PTR [eax+eax+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	WORD PTR _size$[ebp], ax

; 3086 : 
; 3087 : 		stp = obj_data.fstatus;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR _stp$[ebp], edx
$LN2@WriteDirty:

; 3088 : 
; 3089 : 		while (size)

	movsx	eax, WORD PTR _size$[ebp]
	test	eax, eax
	je	SHORT $LN3@WriteDirty

; 3090 : 		{
; 3091 : 			*(unsigned char*)ptr = *stp;

	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR _stp$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al

; 3092 : 			size --;

	mov	cx, WORD PTR _size$[ebp]
	sub	cx, 1
	mov	WORD PTR _size$[ebp], cx

; 3093 : 			ptr += sizeof (uchar);

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _ptr$[ebp], edx

; 3094 : 			stp += sizeof (uchar);

	mov	eax, DWORD PTR _stp$[ebp]
	add	eax, 1
	mov	DWORD PTR _stp$[ebp], eax

; 3095 : 		}

	jmp	SHORT $LN2@WriteDirty
$LN3@WriteDirty:

; 3096 : 	}
; 3097 : 
; 3098 : 	dirty_objective = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+208], 0

; 3099 : 
; 3100 : 	*stream = ptr;

	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [edx], eax

; 3101 : 
; 3102 : 	//MonoPrint ("(%d)", *stream - start);
; 3103 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?WriteDirty@ObjectiveClass@@QAEXPAPAE@Z ENDP		; ObjectiveClass::WriteDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
_score$ = 12						; size = 4
?MakeObjectiveDirty@ObjectiveClass@@QAEXW4Dirty_Objective@@W4Dirtyness@@@Z PROC ; ObjectiveClass::MakeObjectiveDirty
; _this$ = ecx

; 3043 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3044 : 	if (!IsLocal() || (VuState() != VU_MEM_ACTIVE)){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@MakeObject
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	je	SHORT $LN3@MakeObject
$LN2@MakeObject:

; 3045 : 		return;

	jmp	SHORT $LN4@MakeObject
$LN3@MakeObject:

; 3046 : 	}
; 3047 : 
; 3048 : 	if (!IsAggregate() && (score != SEND_RELIABLEANDOOB)){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN1@MakeObject
	cmp	DWORD PTR _score$[ebp], 268435456	; 10000000H
	je	SHORT $LN1@MakeObject

; 3049 : 		score = static_cast<Dirtyness>(score << 4);

	mov	ecx, DWORD PTR _score$[ebp]
	shl	ecx, 4
	mov	DWORD PTR _score$[ebp], ecx
$LN1@MakeObject:

; 3050 : 	}
; 3051 : 
; 3052 : 	dirty_objective |= bits;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	or	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+208], eax

; 3053 : 	MakeDirty (DIRTY_OBJECTIVE, score);

	mov	edx, DWORD PTR _score$[ebp]
	push	edx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeDirty@FalconEntity@@QAEXW4Dirty_Class@@W4Dirtyness@@@Z ; FalconEntity::MakeDirty
$LN4@MakeObject:

; 3054 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?MakeObjectiveDirty@ObjectiveClass@@QAEXW4Dirty_Objective@@W4Dirtyness@@@Z ENDP ; ObjectiveClass::MakeObjectiveDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
?SetNeedRepair@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetNeedRepair
; _this$ = ecx

; 1968 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1969 : 	obj_data.obj_flags |= O_NEED_REPAIR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 131072				; 00020000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1970 : 	if (!r)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN2@SetNeedRep

; 1971 : 		obj_data.obj_flags ^= O_NEED_REPAIR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 131072				; 00020000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetNeedRep:

; 1972 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNeedRepair@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetNeedRepair
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetAbandoned@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetAbandoned
; _this$ = ecx

; 1961 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1962 : 	obj_data.obj_flags |= O_ABANDONED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 1048576				; 00100000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1963 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN2@SetAbandon

; 1964 : 		obj_data.obj_flags ^= O_ABANDONED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 1048576				; 00100000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetAbandon:

; 1965 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAbandoned@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetAbandoned
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
?SetRadarSite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetRadarSite
; _this$ = ecx

; 1954 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1955 : 	obj_data.obj_flags |= O_RADAR_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1956 : 	if (!r)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN2@SetRadarSi

; 1957 : 		obj_data.obj_flags ^= O_RADAR_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetRadarSi:

; 1958 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarSite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetRadarSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetFlatSite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetFlatSite
; _this$ = ecx

; 1947 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1948 : 	obj_data.obj_flags |= O_FLAT_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 32768				; 00008000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1949 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN2@SetFlatSit

; 1950 : 		obj_data.obj_flags ^= O_FLAT_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 32768				; 00008000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetFlatSit:

; 1951 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlatSite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetFlatSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 4
?SetCommandoSite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetCommandoSite
; _this$ = ecx

; 1940 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1941 : 	obj_data.obj_flags |= O_COMMANDO_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 16384				; 00004000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1942 : 	if (!c)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN2@SetCommand

; 1943 : 		obj_data.obj_flags ^= O_COMMANDO_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 16384				; 00004000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetCommand:

; 1944 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCommandoSite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetCommandoSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetMountainSite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetMountainSite
; _this$ = ecx

; 1933 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1934 : 	obj_data.obj_flags |= O_MOUNTAIN_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 512				; 00000200H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1935 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN2@SetMountai

; 1936 : 		obj_data.obj_flags ^= O_MOUNTAIN_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 512				; 00000200H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetMountai:

; 1937 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetMountainSite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetMountainSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetBorderSite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetBorderSite
; _this$ = ecx

; 1926 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 	obj_data.obj_flags |= O_BORDER_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1928 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN2@SetBorderS

; 1929 : 		obj_data.obj_flags ^= O_BORDER_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetBorderS:

; 1930 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetBorderSite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetBorderSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetAmbushCAPSite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetAmbushCAPSite
; _this$ = ecx

; 1919 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1920 : 	obj_data.obj_flags |= O_AMBUSHCAP_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1921 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN2@SetAmbushC

; 1922 : 		obj_data.obj_flags ^= O_AMBUSHCAP_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetAmbushC:

; 1923 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAmbushCAPSite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetAmbushCAPSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetArtillerySite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetArtillerySite
; _this$ = ecx

; 1912 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1913 : 	obj_data.obj_flags |= O_ARTILLERY_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1914 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN2@SetArtille

; 1915 : 		obj_data.obj_flags ^= O_ARTILLERY_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetArtille:

; 1916 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetArtillerySite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetArtillerySite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetSamSite@ObjectiveClass@@QAEXH@Z PROC		; ObjectiveClass::SetSamSite
; _this$ = ecx

; 1905 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1906 : 	obj_data.obj_flags |= O_SAM_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1907 : 	if (!s)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN2@SetSamSite

; 1908 : 		obj_data.obj_flags ^= O_SAM_SITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetSamSite:

; 1909 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSamSite@ObjectiveClass@@QAEXH@Z ENDP		; ObjectiveClass::SetSamSite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_j$ = 8							; size = 4
?SetJammed@ObjectiveClass@@QAEXH@Z PROC			; ObjectiveClass::SetJammed
; _this$ = ecx

; 1898 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1899 : 	obj_data.obj_flags |= O_JAMMED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1900 : 	if (!j)

	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN2@SetJammed

; 1901 : 		obj_data.obj_flags ^= O_JAMMED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetJammed:

; 1902 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetJammed@ObjectiveClass@@QAEXH@Z ENDP			; ObjectiveClass::SetJammed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetManual@ObjectiveClass@@QAEXH@Z PROC			; ObjectiveClass::SetManual
; _this$ = ecx

; 1891 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1892 : 	obj_data.obj_flags |= O_MANUAL_SET;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 1893 : 	if (!s)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN2@SetManual

; 1894 : 		obj_data.obj_flags ^= O_MANUAL_SET;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN2@SetManual:

; 1895 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetManual@ObjectiveClass@@QAEXH@Z ENDP			; ObjectiveClass::SetManual
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_repair$ = -16						; size = 4
_time$ = -12						; size = 4
_bf$ = -8						; size = 4
_this$ = -4						; size = 4
?Repair@ObjectiveClass@@QAEXXZ PROC			; ObjectiveClass::Repair
; _this$ = ecx

; 1342 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1343 : 	int				repair,bf;
; 1344 : 	CampaignTime	time;
; 1345 : 
; 1346 : 	if (GetObjectiveStatus() != 100)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	eax, al
	cmp	eax, 100				; 00000064H
	je	SHORT $LN2@Repair

; 1347 : 	{
; 1348 : 		time = Camp_GetCurrentTime() - GetObjectiveRepairTime();

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveRepairTime@ObjectiveClass@@QAEKXZ ; ObjectiveClass::GetObjectiveRepairTime
	sub	esi, eax
	mov	DWORD PTR _time$[ebp], esi

; 1349 : 		repair = time/CampaignHours;

	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 3600000				; 0036ee80H
	div	ecx
	mov	DWORD PTR _repair$[ebp], eax

; 1350 : 		bf = BestRepairFeature(this, &repair);

	lea	edx, DWORD PTR _repair$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?BestRepairFeature@@YAHPAVObjectiveClass@@PAH@Z ; BestRepairFeature
	add	esp, 8
	mov	DWORD PTR _bf$[ebp], eax

; 1351 : 
; 1352 : 		// JB 000811
; 1353 : 		// Repair one feature at a time and reset the repair time
; 1354 : 		// only after something has been fixed.
; 1355 : 		/*//-		while (bf > -1)
; 1356 : 		  {
; 1357 : 		  RepairFeature(bf);
; 1358 : 		  bf = BestRepairFeature(this, &repair);
; 1359 : 		  }
; 1360 : 		//-*/
; 1361 : 		if (bf > -1)

	cmp	DWORD PTR _bf$[ebp], -1
	jle	SHORT $LN2@Repair

; 1362 : 		{
; 1363 : 			RepairFeature(bf);

	mov	ecx, DWORD PTR _bf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RepairFeature@ObjectiveClass@@QAEXH@Z	; ObjectiveClass::RepairFeature

; 1364 : 			SetObjectiveRepairTime(Camp_GetCurrentTime());

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveRepairTime@ObjectiveClass@@QAEXK@Z ; ObjectiveClass::SetObjectiveRepairTime
$LN2@Repair:

; 1365 : 		}
; 1366 : 	}
; 1367 : 	// SetObjectiveRepairTime(Camp_GetCurrentTime()); //-
; 1368 : 	// JB 000811
; 1369 : 
; 1370 : 	ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 1371 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?Repair@ObjectiveClass@@QAEXXZ ENDP			; ObjectiveClass::Repair
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateObjectiveLists@ObjectiveClass@@QAEXXZ PROC	; ObjectiveClass::UpdateObjectiveLists
; _this$ = ecx

; 1976 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1977 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateObjectiveLists@ObjectiveClass@@QAEXXZ ENDP	; ObjectiveClass::UpdateObjectiveLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasRadarRanges@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::HasRadarRanges
; _this$ = ecx

; 1883 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1884 : 	if (static_data.radar_data)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+228], 0
	je	SHORT $LN1@HasRadarRa

; 1885 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN2@HasRadarRa
$LN1@HasRadarRa:

; 1886 : 
; 1887 : 	return 0;

	xor	eax, eax
$LN2@HasRadarRa:

; 1888 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasRadarRanges@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::HasRadarRanges
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSupplySource@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsSupplySource
; _this$ = ecx

; 1872 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1873 : 	if (GetType() == TYPE_CITY || GetType() == TYPE_PORT || GetType() == TYPE_DEPOT || GetType() == TYPE_ARMYBASE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 8
	je	SHORT $LN2@IsSupplySo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 19					; 00000013H
	je	SHORT $LN2@IsSupplySo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN2@IsSupplySo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 3
	jne	SHORT $LN3@IsSupplySo
$LN2@IsSupplySo:

; 1874 : 	{
; 1875 : 		if (!IsFrontline() && !IsSecondline()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	jne	SHORT $LN3@IsSupplySo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSecondline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSecondline
	test	eax, eax
	jne	SHORT $LN3@IsSupplySo

; 1876 : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN4@IsSupplySo
$LN3@IsSupplySo:

; 1877 : 		}
; 1878 : 	}
; 1879 : 	return 0;

	xor	eax, eax
$LN4@IsSupplySo:

; 1880 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSupplySource@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsSupplySource
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSecondary@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsSecondary
; _this$ = ecx

; 1864 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1865 : 	// Only cities and towns can be secondary objectives, and ALL automatically are
; 1866 : 	if ((GetType() == TYPE_CITY || GetType() == TYPE_TOWN) && obj_data.priority > SECONDARY_OBJ_PRIORITY)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 8
	je	SHORT $LN1@IsSecondar
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 28					; 0000001cH
	jne	SHORT $LN2@IsSecondar
$LN1@IsSecondar:
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+200]
	movsx	ecx, WORD PTR ?SECONDARY_OBJ_PRIORITY@@3FA ; SECONDARY_OBJ_PRIORITY
	cmp	eax, ecx
	jle	SHORT $LN2@IsSecondar

; 1867 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN3@IsSecondar
$LN2@IsSecondar:

; 1868 : 	return 0;

	xor	eax, eax
$LN3@IsSecondar:

; 1869 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSecondary@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsSecondary
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPrimary@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::IsPrimary
; _this$ = ecx

; 1857 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1858 : 	if (GetType() == TYPE_CITY && obj_data.priority > PRIMARY_OBJ_PRIORITY)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 8
	jne	SHORT $LN1@IsPrimary
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+200]
	movsx	eax, WORD PTR ?PRIMARY_OBJ_PRIORITY@@3FA ; PRIMARY_OBJ_PRIORITY
	cmp	edx, eax
	jle	SHORT $LN1@IsPrimary

; 1859 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN2@IsPrimary
$LN1@IsPrimary:

; 1860 : 	return 0;

	xor	eax, eax
$LN2@IsPrimary:

; 1861 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsPrimary@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::IsPrimary
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsSecondline@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSecondline@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsSecondline, COMDAT
; _this$ = ecx

; 187  : 	int IsSecondline (void)									{ return (int)(O_SECONDLINE & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSecondline@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsSecondline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsFrontline@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFrontline@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsFrontline, COMDAT
; _this$ = ecx

; 186  : 	int IsFrontline (void)									{ return (int)(O_FRONTLINE & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFrontline@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsFrontline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsObjective@ObjectiveClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@ObjectiveClass@@UAEHXZ PROC		; ObjectiveClass::IsObjective, COMDAT
; _this$ = ecx

; 185  : 	virtual int IsObjective (void)							{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@ObjectiveClass@@UAEHXZ ENDP		; ObjectiveClass::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_j$ = -4						; size = 4
_num$ = 8						; size = 4
_c$ = 12						; size = 4
?SetNeighborCosts@ObjectiveClass@@QAEXHQAE@Z PROC	; ObjectiveClass::SetNeighborCosts
; _this$ = ecx

; 1700 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1701 : 	int		j;
; 1702 : 
; 1703 : 	if (num >= static_data.links)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	cmp	DWORD PTR _num$[ebp], ecx
	jl	SHORT $LN6@SetNeighbo

; 1704 : 		return;

	jmp	SHORT $LN7@SetNeighbo
$LN6@SetNeighbo:

; 1705 : 
; 1706 : 	for (j=0; j<MOVEMENT_TYPES; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN5@SetNeighbo
$LN4@SetNeighbo:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN5@SetNeighbo:
	cmp	DWORD PTR _j$[ebp], 8
	jge	SHORT $LN7@SetNeighbo

; 1707 : 	{
; 1708 : 		if (c[j] < 255)

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $LN2@SetNeighbo

; 1709 : 			link_data[num].costs[j] = (uchar) c[j];

	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+236]
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 1710 : 		else

	jmp	SHORT $LN1@SetNeighbo
$LN2@SetNeighbo:

; 1711 : 			link_data[num].costs[j] = 255;

	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+236]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	BYTE PTR [edx+ecx], 255			; 000000ffH
$LN1@SetNeighbo:

; 1712 : 	}

	jmp	SHORT $LN4@SetNeighbo
$LN7@SetNeighbo:

; 1713 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetNeighborCosts@ObjectiveClass@@QAEXHQAE@Z ENDP	; ObjectiveClass::SetNeighborCosts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
tv94 = -36						; size = 4
$T4 = -32						; size = 4
_tmp_link$ = -28					; size = 4
$T5 = -24						; size = 4
_this$ = -20						; size = 4
_nn$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 4
?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z PROC	; ObjectiveClass::RemoveObjectiveNeighbor
; _this$ = ecx

; 1716 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1717 : 	CampObjectiveLinkDataType*	tmp_link;
; 1718 : 	int		nn;
; 1719 : 
; 1720 : 	if (n >= static_data.links)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	cmp	DWORD PTR _n$[ebp], ecx
	jl	SHORT $LN6@RemoveObje

; 1721 : 		return;

	jmp	$LN7@RemoveObje
$LN6@RemoveObje:

; 1722 : 
; 1723 : 	static_data.links--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+225]
	sub	al, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+225], al

; 1724 : 	tmp_link = link_data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	mov	DWORD PTR _tmp_link$[ebp], eax

; 1725 : #ifdef USE_SH_POOLS
; 1726 : 	link_data = (CampObjectiveLinkDataType *)MemAllocPtr(gObjMemPool, sizeof(CampObjectiveLinkDataType)*static_data.links, 0 );
; 1727 : #else
; 1728 : 	link_data = new CampObjectiveLinkDataType[static_data.links];

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	mov	DWORD PTR $T4[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN9@RemoveObje
	push	OFFSET ??0CampObjectiveLinkDataType@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN10@RemoveObje
$LN9@RemoveObje:
	mov	DWORD PTR tv94[ebp], 0
$LN10@RemoveObje:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+236], edx

; 1729 : #endif
; 1730 : 	for (nn = 0; nn<static_data.links+1; nn++)

	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN5@RemoveObje
$LN4@RemoveObje:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN5@RemoveObje:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	add	edx, 1
	cmp	DWORD PTR _nn$[ebp], edx
	jge	SHORT $LN3@RemoveObje

; 1731 : 	{
; 1732 : 		if (nn < n)

	mov	eax, DWORD PTR _nn$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN2@RemoveObje

; 1733 : 			memcpy (&link_data[nn], &tmp_link[nn], sizeof(CampObjectiveLinkDataType));

	push	16					; 00000010H
	mov	ecx, DWORD PTR _nn$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _tmp_link$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nn$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+236]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@RemoveObje:

; 1734 : 		if (nn > n)

	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR _n$[ebp]
	jle	SHORT $LN1@RemoveObje

; 1735 : 			memcpy (&link_data[nn-1], &tmp_link[nn], sizeof(CampObjectiveLinkDataType));

	push	16					; 00000010H
	mov	edx, DWORD PTR _nn$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _tmp_link$[ebp]
	push	edx
	mov	eax, DWORD PTR _nn$[ebp]
	sub	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+236]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@RemoveObje:

; 1736 : 	}

	jmp	SHORT $LN4@RemoveObje
$LN3@RemoveObje:

; 1737 : 	delete [] tmp_link;

	mov	edx, DWORD PTR _tmp_link$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN7@RemoveObje:

; 1738 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z ENDP	; ObjectiveClass::RemoveObjectiveNeighbor
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 8
$T3 = -48						; size = 4
$T4 = -44						; size = 4
_tmp_link$ = -40					; size = 4
tv143 = -36						; size = 4
$T5 = -32						; size = 4
_n$ = -28						; size = 4
$T6 = -24						; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_o$ = 8							; size = 4
_c$ = 12						; size = 4
?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z PROC ; ObjectiveClass::AddObjectiveNeighbor
; _this$ = ecx

; 1669 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1670 : 	int			i;
; 1671 : 	Objective	n;
; 1672 : 	CampObjectiveLinkDataType*	tmp_link;
; 1673 : 
; 1674 : 	// Find if it exists first
; 1675 : 	for (i=0; i < static_data.links; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@AddObjecti
$LN3@AddObjecti:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@AddObjecti:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN2@AddObjecti

; 1676 : 	{
; 1677 : 		n = (Objective)(vuDatabase->Find(link_data[i].id));

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	ecx, DWORD PTR [edx+eax+12]
	push	ecx
	mov	edx, DWORD PTR [edx+eax+8]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _n$[ebp], eax

; 1678 : 		if (n && n == o)

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN1@AddObjecti
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _o$[ebp]
	jne	SHORT $LN1@AddObjecti

; 1679 : 		{
; 1680 : 			SetNeighborCosts(i,c);

	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNeighborCosts@ObjectiveClass@@QAEXHQAE@Z ; ObjectiveClass::SetNeighborCosts

; 1681 : 			return;

	jmp	$LN5@AddObjecti
$LN1@AddObjecti:

; 1682 : 		}
; 1683 : 	}

	jmp	SHORT $LN3@AddObjecti
$LN2@AddObjecti:

; 1684 : 
; 1685 : 	// Otherwise, add a new one
; 1686 : 	static_data.links++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+225]
	add	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+225], cl

; 1687 : 	tmp_link = link_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	mov	DWORD PTR _tmp_link$[ebp], ecx

; 1688 : #ifdef USE_SH_POOLS
; 1689 : 	link_data = (CampObjectiveLinkDataType *)MemAllocPtr(gObjMemPool, sizeof(CampObjectiveLinkDataType)*static_data.links, 0 );
; 1690 : #else
; 1691 : 	link_data = new CampObjectiveLinkDataType[static_data.links];

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+225]
	mov	DWORD PTR $T5[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN7@AddObjecti
	push	OFFSET ??0CampObjectiveLinkDataType@@QAE@XZ
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN8@AddObjecti
$LN7@AddObjecti:
	mov	DWORD PTR tv143[ebp], 0
$LN8@AddObjecti:
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+236], edx

; 1692 : #endif
; 1693 : 	memcpy (link_data, tmp_link, (static_data.links-1)*sizeof(CampObjectiveLinkDataType));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	sub	ecx, 1
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _tmp_link$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1694 : 	delete [] tmp_link;

	mov	edx, DWORD PTR _tmp_link$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1695 : 	link_data[static_data.links-1].id = o->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [ecx+225]
	sub	ecx, 1
	shl	ecx, 4
	mov	esi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [esi+236]
	mov	DWORD PTR [esi+ecx+8], edx
	mov	DWORD PTR [esi+ecx+12], eax

; 1696 : 	SetNeighborCosts(i,c);

	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNeighborCosts@ObjectiveClass@@QAEXHQAE@Z ; ObjectiveClass::SetNeighborCosts
$LN5@AddObjecti:

; 1697 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z$0:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddObjectiveNeighbor@ObjectiveClass@@QAEXPAV1@QAE@Z ENDP ; ObjectiveClass::AddObjectiveNeighbor
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -32						; size = 8
$T2 = -24						; size = 8
_no$ = -16						; size = 4
_this$ = -12						; size = 4
_n$ = -8						; size = 4
_on$ = -4						; size = 4
?DisposeObjective@ObjectiveClass@@QAEXXZ PROC		; ObjectiveClass::DisposeObjective
; _this$ = ecx

; 1839 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1840 : 	Objective 		no;
; 1841 : 	int				n,on;
; 1842 : 
; 1843 : 	// Kill links _from_ linked objectives. Our links will die when we do.
; 1844 : 	for (n=0; n<static_data.links; n++)

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN7@DisposeObj
$LN6@DisposeObj:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN7@DisposeObj:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	cmp	DWORD PTR _n$[ebp], edx
	jge	SHORT $LN5@DisposeObj

; 1845 : 	{
; 1846 : 		no = GetNeighbor(n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _no$[ebp], eax

; 1847 : 		for (on=0; on<no->static_data.links; on++)

	mov	DWORD PTR _on$[ebp], 0
	jmp	SHORT $LN4@DisposeObj
$LN3@DisposeObj:
	mov	ecx, DWORD PTR _on$[ebp]
	add	ecx, 1
	mov	DWORD PTR _on$[ebp], ecx
$LN4@DisposeObj:
	mov	edx, DWORD PTR _no$[ebp]
	movzx	eax, BYTE PTR [edx+225]
	cmp	DWORD PTR _on$[ebp], eax
	jge	SHORT $LN2@DisposeObj

; 1848 : 		{
; 1849 : 			if (no->GetNeighborId(on) == Id())

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	edx, DWORD PTR _on$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _no$[ebp]
	call	?GetNeighborId@ObjectiveClass@@QAE?AVVU_ID@@H@Z ; ObjectiveClass::GetNeighborId
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DisposeObj

; 1850 : 				no->RemoveObjectiveNeighbor(on);

	mov	edx, DWORD PTR _on$[ebp]
	push	edx
	mov	ecx, DWORD PTR _no$[ebp]
	call	?RemoveObjectiveNeighbor@ObjectiveClass@@QAEXH@Z ; ObjectiveClass::RemoveObjectiveNeighbor
$LN1@DisposeObj:

; 1851 : 		}

	jmp	SHORT $LN3@DisposeObj
$LN2@DisposeObj:

; 1852 : 	}

	jmp	$LN6@DisposeObj
$LN5@DisposeObj:

; 1853 : 	Remove();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@CampBaseClass@@QAEHXZ		; CampBaseClass::Remove

; 1854 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisposeObjective@ObjectiveClass@@QAEXXZ ENDP		; ObjectiveClass::DisposeObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 8
$T3 = -36						; size = 4
_this$ = -32						; size = 4
tv130 = -28						; size = 4
$T4 = -24						; size = 4
tv87 = -20						; size = 4
_message$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_from$ = 8						; size = 8
_mes$ = 16						; size = 2
_d1$ = 20						; size = 2
_d2$ = 24						; size = 2
_d3$ = 28						; size = 2
?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z PROC	; ObjectiveClass::SendObjMessage
; _this$ = ecx

; 1657 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1658 : 	FalconObjectiveMessage	*message = new FalconObjectiveMessage(Id(), FalconLocalGame);

	push	74					; 0000004aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN5@SendObjMes
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@SendObjMes
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN4@SendObjMes
$LN3@SendObjMes:
	mov	DWORD PTR tv87[ebp], 0
$LN4@SendObjMes:
	push	1
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0FalconObjectiveMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconObjectiveMessage::FalconObjectiveMessage
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN6@SendObjMes
$LN5@SendObjMes:
	mov	DWORD PTR tv130[ebp], 0
$LN6@SendObjMes:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _message$[ebp], ecx

; 1659 : 
; 1660 : 	message->dataBlock.from = from;

	mov	edx, DWORD PTR _message$[ebp]
	mov	eax, DWORD PTR _from$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _from$[ebp+4]
	mov	DWORD PTR [edx+52], ecx

; 1661 : 	message->dataBlock.message = mes;

	movsx	edx, WORD PTR _mes$[ebp]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+64], edx

; 1662 : 	message->dataBlock.data1 = d1;

	mov	ecx, DWORD PTR _message$[ebp]
	mov	dx, WORD PTR _d1$[ebp]
	mov	WORD PTR [ecx+68], dx

; 1663 : 	message->dataBlock.data2 = d2;

	mov	eax, DWORD PTR _message$[ebp]
	mov	cx, WORD PTR _d2$[ebp]
	mov	WORD PTR [eax+70], cx

; 1664 : 	message->dataBlock.data3 = d3;

	mov	edx, DWORD PTR _message$[ebp]
	mov	ax, WORD PTR _d3$[ebp]
	mov	WORD PTR [edx+72], ax

; 1665 : 	FalconSendMessage(message,TRUE);

	push	1
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1666 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendObjMessage@ObjectiveClass@@QAEXVVU_ID@@FFFF@Z ENDP	; ObjectiveClass::SendObjMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_dx$ = -48						; size = 4
_dy$ = -44						; size = 4
tv175 = -40						; size = 4
tv191 = -36						; size = 4
tv171 = -32						; size = 4
tv167 = -28						; size = 4
tv189 = -24						; size = 4
tv163 = -20						; size = 4
tv159 = -16						; size = 4
tv187 = -12						; size = 4
tv155 = -8						; size = 4
_this$ = -4						; size = 4
_ent$ = 8						; size = 4
?GetSiteRange@ObjectiveClass@@QAEMPAVFalconEntity@@@Z PROC ; ObjectiveClass::GetSiteRange
; _this$ = ecx

; 1629 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 1630 : 	float		dx,dy;
; 1631 : 
; 1632 : 	if (!HasRadarRanges())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasRadarRanges@ObjectiveClass@@QAEHXZ	; ObjectiveClass::HasRadarRanges
	test	eax, eax
	jne	SHORT $LN1@GetSiteRan

; 1633 : 		return 0.0F;

	fldz
	jmp	$LN2@GetSiteRan
$LN1@GetSiteRan:

; 1634 : 	dx = ent->XPos()-XPos();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR tv155[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR tv187[ebp]
	subss	xmm0, DWORD PTR tv159[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1635 : 	dy = ent->YPos()-YPos();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv167[ebp]
	movss	xmm0, DWORD PTR tv189[ebp]
	subss	xmm0, DWORD PTR tv167[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1636 : 	return static_data.radar_data->GetRadarRange(dx,dy,ent->ZPos()-ZPos());

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv171[ebp]
	movss	xmm0, DWORD PTR tv171[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv175[ebp]
	movss	xmm0, DWORD PTR tv191[ebp]
	subss	xmm0, DWORD PTR tv175[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	call	?GetRadarRange@RadarRangeClass@@QAEMMMM@Z ; RadarRangeClass::GetRadarRange
$LN2@GetSiteRan:

; 1637 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSiteRange@ObjectiveClass@@QAEMPAVFalconEntity@@@Z ENDP ; ObjectiveClass::GetSiteRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
tv204 = -52						; size = 4
tv219 = -48						; size = 4
tv200 = -44						; size = 4
_uc$1 = -40						; size = 4
tv189 = -36						; size = 4
tv217 = -32						; size = 4
tv185 = -28						; size = 4
tv181 = -24						; size = 4
tv215 = -20						; size = 4
tv177 = -16						; size = 4
_dx$ = -12						; size = 4
_dy$ = -8						; size = 4
_this$ = -4						; size = 4
_ent$ = 8						; size = 4
?SiteCanDetect@ObjectiveClass@@QAEHPAVFalconEntity@@@Z PROC ; ObjectiveClass::SiteCanDetect
; _this$ = ecx

; 1608 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 1609 : 	float		dx,dy;
; 1610 : 
; 1611 : 	if (!HasRadarRanges())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasRadarRanges@ObjectiveClass@@QAEHXZ	; ObjectiveClass::HasRadarRanges
	test	eax, eax
	jne	SHORT $LN3@SiteCanDet

; 1612 : 		return 0;

	xor	eax, eax
	jmp	$LN4@SiteCanDet
$LN3@SiteCanDet:

; 1613 : 	dx = ent->XPos()-XPos();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv177[ebp]
	movss	xmm0, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv215[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv181[ebp]
	movss	xmm0, DWORD PTR tv215[ebp]
	subss	xmm0, DWORD PTR tv181[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1614 : 	dy = ent->YPos()-YPos();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv185[ebp]
	movss	xmm0, DWORD PTR tv185[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv217[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv189[ebp]
	movss	xmm0, DWORD PTR tv217[ebp]
	subss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1615 : 	// Stealth aircraft act as if they're flying at double their range
; 1616 : 	if (ent->IsFlight())

	mov	eax, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN1@SiteCanDet

; 1617 : 	{
; 1618 : 		UnitClassDataType	*uc = ((Flight)ent)->GetUnitClassData();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$1[ebp], eax

; 1619 : 		if (uc->Flags & VEH_STEALTH)

	mov	ecx, DWORD PTR _uc$1[ebp]
	movzx	edx, WORD PTR [ecx+228]
	and	edx, 32					; 00000020H
	je	SHORT $LN1@SiteCanDet

; 1620 : 		{
; 1621 : 			dx *= 2.0F;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _dx$[ebp], xmm0

; 1622 : 			dy *= 2.0F;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _dy$[ebp], xmm0
$LN1@SiteCanDet:

; 1623 : 		}
; 1624 : 	}
; 1625 : 	return static_data.radar_data->CanDetect(dx,dy,ent->ZPos()-ZPos());

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv204[ebp]
	movss	xmm0, DWORD PTR tv219[ebp]
	subss	xmm0, DWORD PTR tv204[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	call	?CanDetect@RadarRangeClass@@QAEHMMM@Z	; RadarRangeClass::CanDetect
$LN4@SiteCanDet:

; 1626 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SiteCanDetect@ObjectiveClass@@QAEHPAVFalconEntity@@@Z ENDP ; ObjectiveClass::SiteCanDetect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_anum$ = 8						; size = 4
_a1$ = 12						; size = 4
_a2$ = 16						; size = 4
?GetArcAngle@ObjectiveClass@@UAEXHPAM0@Z PROC		; ObjectiveClass::GetArcAngle
; _this$ = ecx

; 1597 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1598 : 	if (!HasRadarRanges())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasRadarRanges@ObjectiveClass@@QAEHXZ	; ObjectiveClass::HasRadarRanges
	test	eax, eax
	jne	SHORT $LN1@GetArcAngl

; 1599 : 	{
; 1600 : 		*a1 = 0.0F;

	mov	eax, DWORD PTR _a1$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1601 : 		*a2 = 2.0F*PI;

	mov	ecx, DWORD PTR _a2$[ebp]
	movss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR [ecx], xmm0

; 1602 : 		return;

	jmp	SHORT $LN2@GetArcAngl
$LN1@GetArcAngl:

; 1603 : 	}
; 1604 : 	static_data.radar_data->GetArcAngle(anum, a1, a2);

	mov	edx, DWORD PTR _a2$[ebp]
	push	edx
	mov	eax, DWORD PTR _a1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _anum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+228]
	call	?GetArcAngle@RadarRangeClass@@QAEXHPAM0@Z ; RadarRangeClass::GetArcAngle
$LN2@GetArcAngl:

; 1605 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetArcAngle@ObjectiveClass@@UAEXHPAM0@Z ENDP		; ObjectiveClass::GetArcAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_anum$ = 8						; size = 4
?GetArcRange@ObjectiveClass@@UAEMH@Z PROC		; ObjectiveClass::GetArcRange
; _this$ = ecx

; 1590 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1591 : 	if (!HasRadarRanges())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasRadarRanges@ObjectiveClass@@QAEHXZ	; ObjectiveClass::HasRadarRanges
	test	eax, eax
	jne	SHORT $LN1@GetArcRang

; 1592 : 		return 0.0F;

	fldz
	jmp	SHORT $LN2@GetArcRang
$LN1@GetArcRang:

; 1593 : 	return static_data.radar_data->GetArcRange(anum);

	mov	eax, DWORD PTR _anum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+228]
	call	?GetArcRange@RadarRangeClass@@QAEMH@Z	; RadarRangeClass::GetArcRange
$LN2@GetArcRang:

; 1594 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetArcRange@ObjectiveClass@@UAEMH@Z ENDP		; ObjectiveClass::GetArcRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_anum$ = 8						; size = 4
?GetArcRatio@ObjectiveClass@@UAEMH@Z PROC		; ObjectiveClass::GetArcRatio
; _this$ = ecx

; 1583 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1584 : 	if (!HasRadarRanges())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasRadarRanges@ObjectiveClass@@QAEHXZ	; ObjectiveClass::HasRadarRanges
	test	eax, eax
	jne	SHORT $LN1@GetArcRati

; 1585 : 		return 0.0F;

	fldz
	jmp	SHORT $LN2@GetArcRati
$LN1@GetArcRati:

; 1586 : 	return static_data.radar_data->GetArcRatio(anum);

	mov	eax, DWORD PTR _anum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+228]
	call	?GetArcRatio@RadarRangeClass@@QAEMH@Z	; RadarRangeClass::GetArcRatio
$LN2@GetArcRati:

; 1587 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetArcRatio@ObjectiveClass@@UAEMH@Z ENDP		; ObjectiveClass::GetArcRatio
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumberOfArcs@ObjectiveClass@@UAEHXZ PROC		; ObjectiveClass::GetNumberOfArcs
; _this$ = ecx

; 1576 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1577 : 	if (!HasRadarRanges())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasRadarRanges@ObjectiveClass@@QAEHXZ	; ObjectiveClass::HasRadarRanges
	test	eax, eax
	jne	SHORT $LN1@GetNumberO

; 1578 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN2@GetNumberO
$LN1@GetNumberO:

; 1579 : 	return static_data.radar_data->GetNumberOfArcs();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	call	?GetNumberOfArcs@RadarRangeClass@@QAEHXZ ; RadarRangeClass::GetNumberOfArcs
$LN2@GetNumberO:

; 1580 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfArcs@ObjectiveClass@@UAEHXZ ENDP		; ObjectiveClass::GetNumberOfArcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_data$ = -4						; size = 4
?GetRadarType@ObjectiveClass@@UAEHXZ PROC		; ObjectiveClass::GetRadarType
; _this$ = ecx

; 1565 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1566 : 	ObjClassDataType *data = GetObjectiveClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
	mov	DWORD PTR _data$[ebp], eax

; 1567 : 	ShiAssert( data );
; 1568 : 	if (data->RadarFeature < 255) {

	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+51]
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $LN2@GetRadarTy

; 1569 : 		return GetFeatureClassData(GetFeatureID(data->RadarFeature))->RadarType;

	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+51]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	movsx	eax, WORD PTR [eax+36]
	jmp	SHORT $LN3@GetRadarTy

; 1570 : 	} else {

	jmp	SHORT $LN3@GetRadarTy
$LN2@GetRadarTy:

; 1571 : 		return RDR_NO_RADAR;

	xor	eax, eax
$LN3@GetRadarTy:

; 1572 : 	}
; 1573 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarType@ObjectiveClass@@UAEHXZ ENDP		; ObjectiveClass::GetRadarType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@ObjectiveClass@@UAEHXZ PROC		; ObjectiveClass::GetRadarMode
; _this$ = ecx

; 1557 : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 	if (IsEmitting()) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	je	SHORT $LN2@GetRadarMo

; 1559 : 		return FEC_RADAR_SEARCH_100;

	mov	eax, 1
	jmp	SHORT $LN3@GetRadarMo

; 1560 : 	else 

	jmp	SHORT $LN3@GetRadarMo
$LN2@GetRadarMo:

; 1561 : 		return FEC_RADAR_OFF; 

	xor	eax, eax
$LN3@GetRadarMo:

; 1562 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@ObjectiveClass@@UAEHXZ ENDP		; ObjectiveClass::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?OnGround@ObjectiveClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnGround@ObjectiveClass@@UAEHXZ PROC			; ObjectiveClass::OnGround, COMDAT
; _this$ = ecx

; 166  :     virtual int OnGround (void)								{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@ObjectiveClass@@UAEHXZ ENDP			; ObjectiveClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_dx$ = -80						; size = 4
_dy$ = -76						; size = 4
tv447 = -72						; size = 4
tv466 = -68						; size = 4
tv435 = -64						; size = 4
_uc$1 = -60						; size = 4
tv420 = -56						; size = 4
tv464 = -52						; size = 4
tv416 = -48						; size = 4
tv412 = -44						; size = 4
tv462 = -40						; size = 4
tv408 = -36						; size = 4
_AGLz$2 = -32						; size = 4
_ds$ = -28						; size = 4
_jammerRange$3 = -24					; size = 4
_mt$ = -20						; size = 4
_ecmFlight$4 = -16					; size = 4
_mrs$ = -12						; size = 4
_this$ = -8						; size = 4
_vdr$ = -4						; size = 4
_ent$ = 8						; size = 4
?CanDetect@ObjectiveClass@@UAEHPAVFalconEntity@@@Z PROC	; ObjectiveClass::CanDetect
; _this$ = ecx

; 1463 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 1464 : 	float			ds,mrs,vdr,dx,dy;
; 1465 : 	MoveType		mt;
; 1466 : 
; 1467 : 	mt = ent->GetMovementType();

	mov	eax, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	DWORD PTR _mt$[ebp], eax

; 1468 : 	ds = DistSqu(XPos(),YPos(),ent->XPos(),ent->YPos());

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?DistSqu@@YAMMMMM@Z			; DistSqu
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _ds$[ebp]

; 1469 : 	mrs = (float)(GetDetectionRange(mt) * KM_TO_FT);

	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+416]
	call	edx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@454cffae
	movss	DWORD PTR _mrs$[ebp], xmm0

; 1470 : 	mrs *= mrs;

	movss	xmm0, DWORD PTR _mrs$[ebp]
	mulss	xmm0, DWORD PTR _mrs$[ebp]
	movss	DWORD PTR _mrs$[ebp], xmm0

; 1471 : 	if (ds > mrs)

	movss	xmm0, DWORD PTR _ds$[ebp]
	comiss	xmm0, DWORD PTR _mrs$[ebp]
	jbe	SHORT $LN18@CanDetect

; 1472 : 		return 0;

	xor	eax, eax
	jmp	$LN19@CanDetect
$LN18@CanDetect:

; 1473 : 
; 1474 : 	// Additional detection requirements against aircraft
; 1475 : 	if (mt == LowAir || mt == Air)

	cmp	DWORD PTR _mt$[ebp], 4
	je	SHORT $LN16@CanDetect
	cmp	DWORD PTR _mt$[ebp], 5
	jne	$LN17@CanDetect
$LN16@CanDetect:

; 1476 : 	{
; 1477 : 		// 2001-04-22 ADDED BY S.G. OBJECTIVES NEEDS TO BE AFFECTED BY SOJ AS MUCH AS UNITS
; 1478 : 		if (ent->IsFlight()) {

	mov	eax, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN8@CanDetect

; 1479 : 			Flight	ecmFlight = ((FlightClass *)ent)->GetECMFlight();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetECMFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetECMFlight
	mov	DWORD PTR _ecmFlight$4[ebp], eax

; 1480 : 			if (((FlightClass *)ent)->HasAreaJamming())

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+280]
	call	eax
	test	eax, eax
	je	SHORT $LN14@CanDetect

; 1481 : 				ecmFlight = (FlightClass *)ent;

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	DWORD PTR _ecmFlight$4[ebp], ecx
	jmp	SHORT $LN11@CanDetect
$LN14@CanDetect:

; 1482 : 			else if (ecmFlight) {

	cmp	DWORD PTR _ecmFlight$4[ebp], 0
	je	SHORT $LN11@CanDetect

; 1483 : 				if (!ecmFlight->IsAreaJamming())

	mov	edx, DWORD PTR _ecmFlight$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ecmFlight$4[ebp]
	mov	edx, DWORD PTR [eax+272]
	call	edx
	test	eax, eax
	jne	SHORT $LN11@CanDetect

; 1484 : 					ecmFlight = NULL;

	mov	DWORD PTR _ecmFlight$4[ebp], 0
$LN11@CanDetect:

; 1485 : 			}
; 1486 : 
; 1487 : 			if (ecmFlight) {

	cmp	DWORD PTR _ecmFlight$4[ebp], 0
	je	$LN8@CanDetect

; 1488 : 				// Now, here's what we need to do:
; 1489 : 				// 1. For now jamming power has 360 degrees coverage
; 1490 : 				// 2. The radar range will be reduced by the ratio of its normal range and the jammer's range to the radar to the power of two
; 1491 : 				// 3. The jammer is dropping the radar gain, effectively dropping its detection distance
; 1492 : 				// 4. If the flight is outside this new range, it's not detected.
; 1493 : 
; 1494 : 				// Get the range of the SOJ to the radar
; 1495 : 				float jammerRange = DistSqu(ecmFlight->XPos(),ecmFlight->YPos(),XPos(),YPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ecmFlight$4[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ecmFlight$4[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?DistSqu@@YAMMMMM@Z			; DistSqu
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _jammerRange$3[ebp]

; 1496 : 
; 1497 : 				// If the SOJ is within the radar normal range, 'adjust' it. If this is now less that ds (our range to the radar), return 0.
; 1498 : 				// SOJ can jamm even if outside the detection range of the radar
; 1499 : 				if (jammerRange < mrs * 2.25f) {

	movss	xmm0, DWORD PTR _mrs$[ebp]
	mulss	xmm0, DWORD PTR __real@40100000
	comiss	xmm0, DWORD PTR _jammerRange$3[ebp]
	jbe	$LN8@CanDetect

; 1500 : 					jammerRange = jammerRange / (mrs * 2.25f); // No need to check for zero because jammerRange has to be LESS than mrs to go in

	movss	xmm0, DWORD PTR _mrs$[ebp]
	mulss	xmm0, DWORD PTR __real@40100000
	movss	xmm1, DWORD PTR _jammerRange$3[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _jammerRange$3[ebp], xmm1

; 1501 : 					mrs *= jammerRange * jammerRange;

	movss	xmm0, DWORD PTR _jammerRange$3[ebp]
	mulss	xmm0, DWORD PTR _jammerRange$3[ebp]
	mulss	xmm0, DWORD PTR _mrs$[ebp]
	movss	DWORD PTR _mrs$[ebp], xmm0

; 1502 : 					if (ds > mrs) {

	movss	xmm0, DWORD PTR _ds$[ebp]
	comiss	xmm0, DWORD PTR _mrs$[ebp]
	jbe	SHORT $LN8@CanDetect

; 1503 : 						// The radar is being jammed, check if visual detection will do
; 1504 : 						vdr = (float)GetVisualDetectionRange(mt) * KM_TO_FT;

	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	call	?GetVisualDetectionRange@@YAHH@Z	; GetVisualDetectionRange
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@454cffae
	movss	DWORD PTR _vdr$[ebp], xmm0

; 1505 : 						vdr *= vdr;

	movss	xmm0, DWORD PTR _vdr$[ebp]
	mulss	xmm0, DWORD PTR _vdr$[ebp]
	movss	DWORD PTR _vdr$[ebp], xmm0

; 1506 : 						if (ds < vdr)

	movss	xmm0, DWORD PTR _vdr$[ebp]
	comiss	xmm0, DWORD PTR _ds$[ebp]
	jbe	SHORT $LN7@CanDetect

; 1507 : 							return 1;

	mov	eax, 1
	jmp	$LN19@CanDetect
$LN7@CanDetect:

; 1508 : 						// Nope, then it's not detected.
; 1509 : 						return 0;

	xor	eax, eax
	jmp	$LN19@CanDetect
$LN8@CanDetect:

; 1510 : 					}
; 1511 : 				}
; 1512 : 			}
; 1513 : 		}
; 1514 : 		// END OF ADDED SECTION
; 1515 : 		if (!HasRadarRanges())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasRadarRanges@ObjectiveClass@@QAEHXZ	; ObjectiveClass::HasRadarRanges
	test	eax, eax
	jne	SHORT $LN6@CanDetect

; 1516 : 		{
; 1517 : 			// Only check vs visual detection range
; 1518 : 			// 2001-03-16 MODIFIED BY S.G. LOOKS LIKE THEY FORGOT GetVisualDetectionRange IS IN KILOMETERS AND NOT FEET
; 1519 : 			//			vdr = (float)GetVisualDetectionRange(mt);
; 1520 : 			vdr = (float)GetVisualDetectionRange(mt) * KM_TO_FT;

	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	call	?GetVisualDetectionRange@@YAHH@Z	; GetVisualDetectionRange
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@454cffae
	movss	DWORD PTR _vdr$[ebp], xmm0

; 1521 : 			vdr *= vdr;

	movss	xmm0, DWORD PTR _vdr$[ebp]
	mulss	xmm0, DWORD PTR _vdr$[ebp]
	movss	DWORD PTR _vdr$[ebp], xmm0

; 1522 : 			if (ds < vdr)

	movss	xmm0, DWORD PTR _vdr$[ebp]
	comiss	xmm0, DWORD PTR _ds$[ebp]
	jbe	SHORT $LN5@CanDetect

; 1523 : 				return 1;

	mov	eax, 1
	jmp	$LN19@CanDetect
$LN5@CanDetect:

; 1524 : 			return 0;

	xor	eax, eax
	jmp	$LN19@CanDetect
$LN6@CanDetect:

; 1525 : 		}
; 1526 : 		dx = ent->XPos()-XPos();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv408[ebp]
	movss	xmm0, DWORD PTR tv408[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv462[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv412[ebp]
	movss	xmm0, DWORD PTR tv462[ebp]
	subss	xmm0, DWORD PTR tv412[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1527 : 		dy = ent->YPos()-YPos();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv416[ebp]
	movss	xmm0, DWORD PTR tv416[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv464[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv420[ebp]
	movss	xmm0, DWORD PTR tv464[ebp]
	subss	xmm0, DWORD PTR tv420[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1528 : 		// Stealth aircraft act as if they're flying at double their range
; 1529 : 		if (ent->IsFlight())

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN3@CanDetect

; 1530 : 		{
; 1531 : 			UnitClassDataType	*uc = ((Flight)ent)->GetUnitClassData();

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$1[ebp], eax

; 1532 : 			if (uc->Flags & VEH_STEALTH)

	mov	eax, DWORD PTR _uc$1[ebp]
	movzx	ecx, WORD PTR [eax+228]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@CanDetect

; 1533 : 			{
; 1534 : 				// 2001-04-29 MODIFIED BY S.G. IF IT'S A STEALTH AND IT GOT HERE, IT WASN'T DETECTED VISUALLY SO ABORT RIGHT NOW
; 1535 : 				//				dx *= 2.0F;
; 1536 : 				//				dy *= 2.0F;
; 1537 : 				vdr = (float)GetVisualDetectionRange(mt) * KM_TO_FT;

	mov	edx, DWORD PTR _mt$[ebp]
	push	edx
	call	?GetVisualDetectionRange@@YAHH@Z	; GetVisualDetectionRange
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@454cffae
	movss	DWORD PTR _vdr$[ebp], xmm0

; 1538 : 				vdr *= vdr;

	movss	xmm0, DWORD PTR _vdr$[ebp]
	mulss	xmm0, DWORD PTR _vdr$[ebp]
	movss	DWORD PTR _vdr$[ebp], xmm0

; 1539 : 				if (ds < vdr)

	movss	xmm0, DWORD PTR _vdr$[ebp]
	comiss	xmm0, DWORD PTR _ds$[ebp]
	jbe	SHORT $LN2@CanDetect

; 1540 : 					return 1;

	mov	eax, 1
	jmp	$LN19@CanDetect
$LN2@CanDetect:

; 1541 : 				return 0;

	xor	eax, eax
	jmp	$LN19@CanDetect
$LN3@CanDetect:

; 1542 : 			}
; 1543 : 		}
; 1544 : 		// 2001-04-06 MODIFIED BY S.G. NEED TO ACCOMODATE FOR THE OBJECTIVE'S MSL ALTITUDE SINCE ZPos IS 0 FOR OBJECTIVE...
; 1545 : 		//		return static_data.radar_data->CanDetect(dx,dy,ent->ZPos()-ZPos());
; 1546 : 		ShiAssert(ZPos() == 0.0f);	// Warn if the objective ZPos is something else than 0
; 1547 : 		float AGLz = ent->ZPos() + TheMap.GetMEA(XPos(), YPos());

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv435[ebp]
	movss	xmm0, DWORD PTR tv435[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv466[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	fstp	DWORD PTR tv447[ebp]
	movss	xmm0, DWORD PTR tv466[ebp]
	addss	xmm0, DWORD PTR tv447[ebp]
	movss	DWORD PTR _AGLz$2[ebp], xmm0

; 1548 : 		if (AGLz > 0.0f)

	movss	xmm0, DWORD PTR _AGLz$2[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@CanDetect

; 1549 : 			return 0; // Can't see very well if our target is lower than us...

	xor	eax, eax
	jmp	SHORT $LN19@CanDetect
$LN1@CanDetect:

; 1550 : 
; 1551 : 		return static_data.radar_data->CanDetect(dx,dy,AGLz); // GetMEA returns a positive number that we must substract from our target altitude

	push	ecx
	movss	xmm0, DWORD PTR _AGLz$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	call	?CanDetect@RadarRangeClass@@QAEHMMM@Z	; RadarRangeClass::CanDetect
	jmp	SHORT $LN19@CanDetect
$LN17@CanDetect:

; 1552 : 	}
; 1553 : 	return 1;

	mov	eax, 1
$LN19@CanDetect:

; 1554 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CanDetect@ObjectiveClass@@UAEHPAVFalconEntity@@@Z ENDP	; ObjectiveClass::CanDetect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mt$ = 8						; size = 4
?GetElectronicDetectionRange@ObjectiveClass@@UAEHH@Z PROC ; ObjectiveClass::GetElectronicDetectionRange
; _this$ = ecx

; 1450 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1451 : 	if (static_data.class_data->RadarFeature < 255 && GetFeatureStatus(static_data.class_data->RadarFeature) != VIS_DESTROYED)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+51]
	cmp	edx, 255				; 000000ffH
	jge	SHORT $LN2@GetElectro
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+51]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	je	SHORT $LN2@GetElectro

; 1452 : 		// 2001-04-21 MODIFIED BY S.G. ABOVE 250 HAS A NEW MEANING SO USE THE UNIT ELECTRONIC DETECTION RANGE INSTEAD...
; 1453 : 		//		return static_data.class_data->Detection[mt];
; 1454 : 	{
; 1455 : 		if (static_data.class_data->Detection[mt] > 250)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	edx, DWORD PTR _mt$[ebp]
	movzx	eax, BYTE PTR [ecx+edx+28]
	cmp	eax, 250				; 000000faH
	jle	SHORT $LN1@GetElectro

; 1456 : 			return 250 + (static_data.class_data->Detection[mt] - 250) * 50;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR _mt$[ebp]
	movzx	eax, BYTE PTR [edx+eax+28]
	sub	eax, 250				; 000000faH
	imul	eax, 50					; 00000032H
	add	eax, 250				; 000000faH
	jmp	SHORT $LN3@GetElectro
$LN1@GetElectro:

; 1457 : 		return static_data.class_data->Detection[mt];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR _mt$[ebp]
	movzx	eax, BYTE PTR [edx+eax+28]
	jmp	SHORT $LN3@GetElectro
$LN2@GetElectro:

; 1458 : 	}
; 1459 : 	return 0;

	xor	eax, eax
$LN3@GetElectro:

; 1460 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetElectronicDetectionRange@ObjectiveClass@@UAEHH@Z ENDP ; ObjectiveClass::GetElectronicDetectionRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_oc$ = -12						; size = 4
_this$ = -8						; size = 4
_dr$ = -4						; size = 4
_mt$ = 8						; size = 4
?GetDetectionRange@ObjectiveClass@@UAEHH@Z PROC		; ObjectiveClass::GetDetectionRange
; _this$ = ecx

; 1431 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1432 : 	ObjClassDataType*		oc = GetObjectiveClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
	mov	DWORD PTR _oc$[ebp], eax

; 1433 : 	int						dr=0;

	mov	DWORD PTR _dr$[ebp], 0

; 1434 : 
; 1435 : 	ShiAssert (oc);
; 1436 : 	if (IsEmitting() && oc->RadarFeature < 255 && GetFeatureStatus(oc->RadarFeature) != VIS_DESTROYED)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	je	SHORT $LN3@GetDetecti
	mov	ecx, DWORD PTR _oc$[ebp]
	movzx	edx, BYTE PTR [ecx+51]
	cmp	edx, 255				; 000000ffH
	jge	SHORT $LN3@GetDetecti
	mov	eax, DWORD PTR _oc$[ebp]
	movzx	ecx, BYTE PTR [eax+51]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	je	SHORT $LN3@GetDetecti

; 1437 : 		// 2001-04-21 MODIFIED BY S.G. ABOVE 250 HAS A NEW MEANING SO USE THE UNIT ELECTRONIC DETECTION RANGE INSTEAD...
; 1438 : 		//		dr = oc->Detection[mt];
; 1439 : 	{
; 1440 : 		if ((dr = oc->Detection[mt]) > 250)

	mov	edx, DWORD PTR _oc$[ebp]
	add	edx, DWORD PTR _mt$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	mov	DWORD PTR _dr$[ebp], eax
	cmp	DWORD PTR _dr$[ebp], 250		; 000000faH
	jle	SHORT $LN3@GetDetecti

; 1441 : 			dr = 250 + (oc->Detection[mt] - 250) * 50;

	mov	ecx, DWORD PTR _oc$[ebp]
	add	ecx, DWORD PTR _mt$[ebp]
	movzx	edx, BYTE PTR [ecx+28]
	sub	edx, 250				; 000000faH
	imul	edx, 50					; 00000032H
	add	edx, 250				; 000000faH
	mov	DWORD PTR _dr$[ebp], edx
$LN3@GetDetecti:

; 1442 : 	}
; 1443 : 	// END OF MODIFIED SECTION
; 1444 : 	if (!dr)

	cmp	DWORD PTR _dr$[ebp], 0
	jne	SHORT $LN1@GetDetecti

; 1445 : 		dr = GetVisualDetectionRange(mt);

	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	call	?GetVisualDetectionRange@@YAHH@Z	; GetVisualDetectionRange
	add	esp, 4
	mov	DWORD PTR _dr$[ebp], eax
$LN1@GetDetecti:

; 1446 : 	return dr;

	mov	eax, DWORD PTR _dr$[ebp]

; 1447 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDetectionRange@ObjectiveClass@@UAEHH@Z ENDP		; ObjectiveClass::GetDetectionRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetAproxWeaponRange@ObjectiveClass@@UAEHH@Z PROC	; ObjectiveClass::GetAproxWeaponRange
; _this$ = ecx

; 1425 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1426 : 	// Commented out body removed ny leonr
; 1427 : 	return 0;

	xor	eax, eax

; 1428 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAproxWeaponRange@ObjectiveClass@@UAEHH@Z ENDP	; ObjectiveClass::GetAproxWeaponRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
_target$ = 12						; size = 4
?GetWeaponRange@ObjectiveClass@@UAEHHPAVFalconEntity@@@Z PROC ; ObjectiveClass::GetWeaponRange
; _this$ = ecx

; 1417 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1418 : 	// Commented out body removed ny leonr
; 1419 : 	return 0;

	xor	eax, eax

; 1420 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetWeaponRange@ObjectiveClass@@UAEHHPAVFalconEntity@@@Z ENDP ; ObjectiveClass::GetWeaponRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetAproxCombatStrength@ObjectiveClass@@UAEHHH@Z PROC	; ObjectiveClass::GetAproxCombatStrength
; _this$ = ecx

; 1410 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1411 : 	// Commented out body removed ny leonr
; 1412 : 	return 0;

	xor	eax, eax

; 1413 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetAproxCombatStrength@ObjectiveClass@@UAEHHH@Z ENDP	; ObjectiveClass::GetAproxCombatStrength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetCombatStrength@ObjectiveClass@@UAEHHH@Z PROC	; ObjectiveClass::GetCombatStrength
; _this$ = ecx

; 1402 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1403 : 	return 0;

	xor	eax, eax

; 1404 : 	// Commented out body removed ny leonr
; 1405 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetCombatStrength@ObjectiveClass@@UAEHHH@Z ENDP	; ObjectiveClass::GetCombatStrength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetAproxHitChance@ObjectiveClass@@UAEHHH@Z PROC	; ObjectiveClass::GetAproxHitChance
; _this$ = ecx

; 1394 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1395 : 	return 0;

	xor	eax, eax

; 1396 : 	// Commented out body removed ny leonr
; 1397 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetAproxHitChance@ObjectiveClass@@UAEHHH@Z ENDP	; ObjectiveClass::GetAproxHitChance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetHitChance@ObjectiveClass@@UAEHHH@Z PROC		; ObjectiveClass::GetHitChance
; _this$ = ecx

; 1386 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 : 	return 0;

	xor	eax, eax

; 1388 : 	// Commented out body removed ny leonr
; 1389 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetHitChance@ObjectiveClass@@UAEHHH@Z ENDP		; ObjectiveClass::GetHitChance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_size$ = 12						; size = 4
_object$ = 16						; size = 4
?GetFullName@ObjectiveClass@@UAEPADPADHH@Z PROC		; ObjectiveClass::GetFullName
; _this$ = ecx

; 1834 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1835 : 	return GetName(name, size, object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 1836 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetFullName@ObjectiveClass@@UAEPADPADHH@Z ENDP		; ObjectiveClass::GetFullName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_p$ = -180						; size = 4
_nid$ = -176						; size = 4
_pnid$ = -172						; size = 4
_this$ = -168						; size = 4
_buffer$ = -164						; size = 80
_namestr$1 = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_size$ = 12						; size = 4
_mode$ = 16						; size = 4
?GetName@ObjectiveClass@@UAEPADPADHH@Z PROC		; ObjectiveClass::GetName
; _this$ = ecx

; 1790 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1791 : 	int			nid,pnid = 0;

	mov	DWORD PTR _pnid$[ebp], 0

; 1792 : 	Objective	p;
; 1793 : 	_TCHAR		buffer[80];
; 1794 : 
; 1795 : 	nid = GetObjectiveNameID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveNameID@ObjectiveClass@@QAEHXZ ; ObjectiveClass::GetObjectiveNameID
	mov	DWORD PTR _nid$[ebp], eax

; 1796 : 	if (nid == 0)

	cmp	DWORD PTR _nid$[ebp], 0
	jne	$LN13@GetName

; 1797 : 	{
; 1798 : 		p = GetObjectiveParent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveParent@ObjectiveClass@@QAEPAV1@XZ ; ObjectiveClass::GetObjectiveParent
	mov	DWORD PTR _p$[ebp], eax

; 1799 : 		if (p)

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN12@GetName

; 1800 : 		{
; 1801 : 			pnid = p->GetObjectiveNameID();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?GetObjectiveNameID@ObjectiveClass@@QAEHXZ ; ObjectiveClass::GetObjectiveNameID
	mov	DWORD PTR _pnid$[ebp], eax

; 1802 : 			if (gLangIDNum == F4LANG_FRENCH)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 4		; gLangIDNum
	jne	$LN11@GetName

; 1803 : 			{
; 1804 : 				_TCHAR		namestr[80];
; 1805 : 				ReadNameString(pnid,namestr,79);

	push	79					; 0000004fH
	lea	eax, DWORD PTR _namestr$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pnid$[ebp]
	push	ecx
	call	?ReadNameString@@YAPADHPADI@Z		; ReadNameString
	add	esp, 12					; 0000000cH

; 1806 : 				if (namestr[0] == 'A' || namestr[0] == 'a' || namestr[0] == 'E' || namestr[0] == 'e' ||
; 1807 : 								namestr[0] == 'I' || namestr[0] == 'i' || namestr[0] == 'O' || namestr[0] == 'o' ||
; 1808 : 								namestr[0] == 'U' || namestr[0] == 'u')

	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _namestr$1[ebp+edx]
	cmp	eax, 65					; 00000041H
	je	$LN9@GetName
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _namestr$1[ebp+ecx]
	cmp	edx, 97					; 00000061H
	je	$LN9@GetName
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _namestr$1[ebp+eax]
	cmp	ecx, 69					; 00000045H
	je	SHORT $LN9@GetName
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _namestr$1[ebp+edx]
	cmp	eax, 101				; 00000065H
	je	SHORT $LN9@GetName
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _namestr$1[ebp+ecx]
	cmp	edx, 73					; 00000049H
	je	SHORT $LN9@GetName
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _namestr$1[ebp+eax]
	cmp	ecx, 105				; 00000069H
	je	SHORT $LN9@GetName
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _namestr$1[ebp+edx]
	cmp	eax, 79					; 0000004fH
	je	SHORT $LN9@GetName
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _namestr$1[ebp+ecx]
	cmp	edx, 111				; 0000006fH
	je	SHORT $LN9@GetName
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _namestr$1[ebp+eax]
	cmp	ecx, 85					; 00000055H
	je	SHORT $LN9@GetName
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _namestr$1[ebp+edx]
	cmp	eax, 117				; 00000075H
	jne	SHORT $LN10@GetName
$LN9@GetName:

; 1809 : 					_sntprintf(name,size,"%s d'%s",ObjectiveStr[GetType()],namestr);

	lea	ecx, DWORD PTR _namestr$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	imul	edx, 20					; 00000014H
	add	edx, OFFSET ?ObjectiveStr@@3PAY0BE@DA	; ObjectiveStr
	push	edx
	push	OFFSET ??_C@_07JKKEGLBA@?$CFs?5d?8?$CFs?$AA@
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 20					; 00000014H

; 1810 : 				else

	jmp	SHORT $LN8@GetName
$LN10@GetName:

; 1811 : 					_sntprintf(name,size,"%s de %s",ObjectiveStr[GetType()],namestr);

	lea	edx, DWORD PTR _namestr$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	imul	eax, 20					; 00000014H
	add	eax, OFFSET ?ObjectiveStr@@3PAY0BE@DA	; ObjectiveStr
	push	eax
	push	OFFSET ??_C@_08GEODDHCD@?$CFs?5de?5?$CFs?$AA@
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	__snprintf
	add	esp, 20					; 00000014H
$LN8@GetName:
	jmp	$LN7@GetName
$LN11@GetName:

; 1812 : 			}
; 1813 : 			else if (gLangIDNum == F4LANG_ITALIAN || gLangIDNum == F4LANG_SPANISH || gLangIDNum == F4LANG_PORTUGESE)

	cmp	DWORD PTR ?gLangIDNum@@3HA, 6		; gLangIDNum
	je	SHORT $LN5@GetName
	cmp	DWORD PTR ?gLangIDNum@@3HA, 5		; gLangIDNum
	je	SHORT $LN5@GetName
	cmp	DWORD PTR ?gLangIDNum@@3HA, 7		; gLangIDNum
	jne	SHORT $LN6@GetName
$LN5@GetName:

; 1814 : 				_sntprintf(name,size,"%s %s",ObjectiveStr[GetType()],ReadNameString(pnid,buffer,79));

	push	79					; 0000004fH
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pnid$[ebp]
	push	ecx
	call	?ReadNameString@@YAPADHPADI@Z		; ReadNameString
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	imul	edx, 20					; 00000014H
	add	edx, OFFSET ?ObjectiveStr@@3PAY0BE@DA	; ObjectiveStr
	push	edx
	push	OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 20					; 00000014H

; 1815 : 			else

	jmp	SHORT $LN7@GetName
$LN6@GetName:

; 1816 : 				_sntprintf(name,size,"%s %s",ReadNameString(pnid,buffer,79),ObjectiveStr[GetType()]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	imul	edx, 20					; 00000014H
	add	edx, OFFSET ?ObjectiveStr@@3PAY0BE@DA	; ObjectiveStr
	push	edx
	push	79					; 0000004fH
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pnid$[ebp]
	push	ecx
	call	?ReadNameString@@YAPADHPADI@Z		; ReadNameString
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	__snprintf
	add	esp, 20					; 00000014H
$LN7@GetName:

; 1817 : 		}
; 1818 : 		else

	jmp	SHORT $LN3@GetName
$LN12@GetName:

; 1819 : 			_sntprintf(name,size,"%s",ReadNameString(nid,buffer,79));

	push	79					; 0000004fH
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nid$[ebp]
	push	edx
	call	?ReadNameString@@YAPADHPADI@Z		; ReadNameString
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 16					; 00000010H
$LN3@GetName:

; 1820 : 	}
; 1821 : 	else

	jmp	SHORT $LN2@GetName
$LN13@GetName:

; 1822 : 		_sntprintf(name,size,"%s",ReadNameString(nid,buffer,79));

	push	79					; 0000004fH
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _nid$[ebp]
	push	eax
	call	?ReadNameString@@YAPADHPADI@Z		; ReadNameString
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	__snprintf
	add	esp, 16					; 00000010H
$LN2@GetName:

; 1823 : 
; 1824 : 	if (mode && _istlower(name[0]))

	cmp	DWORD PTR _mode$[ebp], 0
	je	SHORT $LN1@GetName
	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _name$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	push	edx
	call	__ismbclower
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@GetName

; 1825 : 		name[0] = (char)_toupper(name[0]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _name$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	sub	edx, 32					; 00000020H
	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _name$[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN1@GetName:

; 1826 : 
; 1827 : 	// _sntprintf should do this for us, but for some reason it sometimes doesn't
; 1828 : 	name[size-1] = 0;

	mov	edx, DWORD PTR _name$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx-1], 0

; 1829 : 
; 1830 : 	return name;

	mov	eax, DWORD PTR _name$[ebp]

; 1831 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetName@ObjectiveClass@@UAEPADPADHH@Z ENDP		; ObjectiveClass::GetName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_oc$ = -4						; size = 4
?GetDamageModifiers@ObjectiveClass@@UAEPAEXZ PROC	; ObjectiveClass::GetDamageModifiers
; _this$ = ecx

; 1374 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1375 : 	ObjClassDataType*	oc;
; 1376 : 
; 1377 : 	oc = GetObjectiveClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
	mov	DWORD PTR _oc$[ebp], eax

; 1378 : 	if (!oc)

	cmp	DWORD PTR _oc$[ebp], 0
	jne	SHORT $LN1@GetDamageM

; 1379 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@GetDamageM
$LN1@GetDamageM:

; 1380 : 	return oc->DamageMod;

	mov	eax, DWORD PTR _oc$[ebp]
	add	eax, 36					; 00000024H
$LN2@GetDamageM:

; 1381 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDamageModifiers@ObjectiveClass@@UAEPAEXZ ENDP	; ObjectiveClass::GetDamageModifiers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -40						; size = 8
_fc$2 = -32						; size = 4
_lost$ = -28						; size = 4
_islocal$ = -24						; size = 4
_s$ = -20						; size = 4
_i$ = -16						; size = 4
_f$ = -12						; size = 4
_this$ = -8						; size = 4
_addcrater$ = -2					; size = 1
_size$ = -1						; size = 1
_data$ = 8						; size = 4
_shooter$ = 12						; size = 4
_dtm$ = 16						; size = 4
?DecodeDamageData@ObjectiveClass@@UAEHPAEPAVUnitClass@@PAVFalconDeathMessage@@@Z PROC ; ObjectiveClass::DecodeDamageData
; _this$ = ecx

; 1274 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 	int		lost,f,i,s,islocal = IsLocal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	mov	DWORD PTR _islocal$[ebp], eax

; 1276 : 	uchar	size,addcrater;
; 1277 : 
; 1278 : 	lost = *data;		data++;

	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _lost$[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax

; 1279 : 	for (i=0; i<lost; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@DecodeDama
$LN15@DecodeDama:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN16@DecodeDama:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _lost$[ebp]
	jge	$LN14@DecodeDama

; 1280 : 	{
; 1281 : 		// Score each hit, for mission evaluator
; 1282 : 		f = *data;		data++;

	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _f$[ebp], ecx
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx

; 1283 : 		s = *data;		data++;

	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx

; 1284 : 		// Record status only for remote entities
; 1285 : 		if (!islocal)

	cmp	DWORD PTR _islocal$[ebp], 0
	jne	SHORT $LN13@DecodeDama

; 1286 : 			SetFeatureStatus(f,s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ; ObjectiveClass::SetFeatureStatus
$LN13@DecodeDama:

; 1287 : 		// Add runway craters
; 1288 : 		if (Falcon4ClassTable[GetFeatureID(f)].vuClassData.classInfo_[VU_TYPE] == TYPE_RUNWAY) // (IS_RUNWAY)

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	imul	eax, 81					; 00000051H
	add	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 11					; 0000000bH
	jne	SHORT $LN12@DecodeDama

; 1289 : 		{
; 1290 : 			if (s == VIS_DESTROYED)

	cmp	DWORD PTR _s$[ebp], 3
	jne	SHORT $LN11@DecodeDama

; 1291 : 				AddRunwayCraters (this, f, 8);

	push	8
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AddRunwayCraters@@YAXPAVObjectiveClass@@HH@Z ; AddRunwayCraters
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN12@DecodeDama
$LN11@DecodeDama:

; 1292 : 			else if (s == VIS_DAMAGED)

	cmp	DWORD PTR _s$[ebp], 2
	jne	SHORT $LN12@DecodeDama

; 1293 : 				AddRunwayCraters (this, f, 4);

	push	4
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AddRunwayCraters@@YAXPAVObjectiveClass@@HH@Z ; AddRunwayCraters
	add	esp, 12					; 0000000cH
$LN12@DecodeDama:

; 1294 : 		}
; 1295 : 		// Generate a death message if we or the shooter is a member of the package 
; 1296 : 		if (dtm)

	cmp	DWORD PTR _dtm$[ebp], 0
	je	SHORT $LN8@DecodeDama

; 1297 : 		{
; 1298 : 			FeatureClassDataType*	fc;
; 1299 : 			fc = GetFeatureClassData(GetFeatureID(f));

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$2[ebp], eax

; 1300 : 			dtm->dataBlock.dPilotID = 255;

	mov	edx, DWORD PTR _dtm$[ebp]
	mov	BYTE PTR [edx+66], 255			; 000000ffH

; 1301 : 			dtm->dataBlock.dIndex = (ushort)(fc->Index + VU_LAST_ENTITY_TYPE);

	mov	eax, DWORD PTR _fc$2[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, 100				; 00000064H
	mov	edx, DWORD PTR _dtm$[ebp]
	mov	WORD PTR [edx+67], cx

; 1302 : 			// Update squadron and pilot statistics
; 1303 : 			EvaluateKill(dtm,NULL,shooter,NULL,this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _dtm$[ebp]
	push	edx
	call	?EvaluateKill@@YAXPAVFalconDeathMessage@@PAVSimBaseClass@@PAVCampBaseClass@@12@Z ; EvaluateKill
	add	esp, 20					; 00000014H
	jmp	SHORT $LN7@DecodeDama
$LN8@DecodeDama:

; 1304 : 		}
; 1305 : 		else if (shooter->IsFlight())

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN7@DecodeDama

; 1306 : 			EvaluateKill(dtm,NULL,shooter,NULL,this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _shooter$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _dtm$[ebp]
	push	eax
	call	?EvaluateKill@@YAXPAVFalconDeathMessage@@PAVSimBaseClass@@PAVCampBaseClass@@12@Z ; EvaluateKill
	add	esp, 20					; 00000014H
$LN7@DecodeDama:

; 1307 : 	}

	jmp	$LN15@DecodeDama
$LN14@DecodeDama:

; 1308 : 
; 1309 : 	// Add any necessary craters
; 1310 : 	addcrater = *data;	data++;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _addcrater$[ebp], dl
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax

; 1311 : 	AddMissCraters (this, addcrater);

	movzx	ecx, BYTE PTR _addcrater$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?AddMissCraters@@YAXPAVFalconEntity@@H@Z ; AddMissCraters
	add	esp, 8

; 1312 : 
; 1313 : 	// Record the current state of all features, for consistancy
; 1314 : 	// (this is admittidly redundant, but could help avoid problems with missed messages)
; 1315 : 	if (!islocal)

	cmp	DWORD PTR _islocal$[ebp], 0
	jne	SHORT $LN5@DecodeDama

; 1316 : 	{
; 1317 : 		size = *data;		data++;

	mov	eax, DWORD PTR _data$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _size$[ebp], cl
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx

; 1318 : 		ShiAssert (size == (static_data.class_data->Features+3)/4);
; 1319 : 		memcpy(obj_data.fstatus,data,size);				data += size;

	movzx	eax, BYTE PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR _size$[ebp]
	add	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], ecx
$LN5@DecodeDama:

; 1320 : 	}
; 1321 : 
; 1322 : 	// Reset objective status upon losses
; 1323 : 	if (lost)

	cmp	DWORD PTR _lost$[ebp], 0
	je	$LN4@DecodeDama

; 1324 : 	{
; 1325 : 		if (GetObjectiveStatus() == 100)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	cmp	edx, 100				; 00000064H
	jne	SHORT $LN3@DecodeDama

; 1326 : 			SetObjectiveRepairTime(Camp_GetCurrentTime());

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveRepairTime@ObjectiveClass@@QAEXK@Z ; ObjectiveClass::SetObjectiveRepairTime
$LN3@DecodeDama:

; 1327 : 		// Reset local status
; 1328 : 		ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 1329 : 		// The local entity sends atm a message if there's a chance we lost a runway
; 1330 : 		// 2001-08-01 MODIFIED BY S.G. ARMYBASE SHOULD BE DEALT WITH TOO SINCE THEY CARRY CHOPPERS
; 1331 : 		//		if (islocal && GetType() == TYPE_AIRBASE && GetObjectiveStatus() < 51)
; 1332 : 		if (islocal && (GetType() == TYPE_AIRBASE || GetType() == TYPE_ARMYBASE) && GetObjectiveStatus() < 51)

	cmp	DWORD PTR _islocal$[ebp], 0
	je	$LN4@DecodeDama
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 1
	je	SHORT $LN1@DecodeDama
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN4@DecodeDama
$LN1@DecodeDama:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	edx, al
	cmp	edx, 51					; 00000033H
	jge	SHORT $LN4@DecodeDama

; 1333 : 			TeamInfo[GetTeam()]->atm->SendATMMessage(Id(), GetTeam(), FalconAirTaskingMessage::atmZapAirbase, 0, 0, NULL, 0);

	push	0
	push	0
	push	0
	push	0
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	edx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	mov	ecx, DWORD PTR [edx+876]
	call	?SendATMMessage@AirTaskingManagerClass@@QAEXVVU_ID@@EFFFPAXH@Z ; AirTaskingManagerClass::SendATMMessage
$LN4@DecodeDama:

; 1334 : 	}
; 1335 : 
; 1336 : 	ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 1337 : 
; 1338 : 	return lost;

	mov	eax, DWORD PTR _lost$[ebp]

; 1339 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DecodeDamageData@ObjectiveClass@@UAEHPAEPAVUnitClass@@PAVFalconDeathMessage@@@Z ENDP ; ObjectiveClass::DecodeDamageData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this_pass$ = -32					; size = 4
_lost$ = -28						; size = 4
_count$ = -24						; size = 4
_hp$ = -20						; size = 4
_s$ = -16						; size = 4
_fc$ = -12						; size = 4
_fid$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
_str$ = 12						; size = 4
_f$ = 16						; size = 4
_flags$ = 20						; size = 2
?ApplyDamage@ObjectiveClass@@UAEHW4DamageDataType@@PAHHF@Z PROC ; ObjectiveClass::ApplyDamage
; _this$ = ecx

; 1205 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1206 : 	int						fid,hp,lost=0,count=0,s,this_pass;

	mov	DWORD PTR _lost$[ebp], 0
	mov	DWORD PTR _count$[ebp], 0
$LN23@ApplyDamag:

; 1207 : 	FeatureClassDataType*	fc;
; 1208 : 
; 1209 : 	while (*str > 0 && count < MAX_DAMAGE_TRIES)

	mov	eax, DWORD PTR _str$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	$LN22@ApplyDamag
	movsx	ecx, WORD PTR ?MAX_DAMAGE_TRIES@@3FA	; MAX_DAMAGE_TRIES
	cmp	DWORD PTR _count$[ebp], ecx
	jge	$LN22@ApplyDamag

; 1210 : 	{
; 1211 : 		count++;

	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 1212 : 		if (f >= static_data.class_data->Features || f < 0 || GetFeatureStatus(f) == VIS_DESTROYED || !GetFeatureID(f))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	cmp	DWORD PTR _f$[ebp], edx
	jge	SHORT $LN20@ApplyDamag
	cmp	DWORD PTR _f$[ebp], 0
	jl	SHORT $LN20@ApplyDamag
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	je	SHORT $LN20@ApplyDamag
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	test	eax, eax
	jne	SHORT $LN21@ApplyDamag
$LN20@ApplyDamag:

; 1213 : 		{
; 1214 : 			// Find something to bomb
; 1215 : 			for (fid=0,f=255; fid < static_data.class_data->Features && f >= static_data.class_data->Features ; fid++)

	mov	DWORD PTR _fid$[ebp], 0
	mov	DWORD PTR _f$[ebp], 255			; 000000ffH
	jmp	SHORT $LN19@ApplyDamag
$LN18@ApplyDamag:
	mov	edx, DWORD PTR _fid$[ebp]
	add	edx, 1
	mov	DWORD PTR _fid$[ebp], edx
$LN19@ApplyDamag:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	cmp	DWORD PTR _fid$[ebp], edx
	jge	SHORT $LN17@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	cmp	DWORD PTR _f$[ebp], edx
	jl	SHORT $LN17@ApplyDamag

; 1216 : 			{
; 1217 : 				if (GetFeatureStatus(fid) != VIS_DESTROYED && GetFeatureClassData(GetFeatureID(fid))->DamageMod[d] > 0)

	mov	eax, DWORD PTR _fid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	je	SHORT $LN16@ApplyDamag
	mov	ecx, DWORD PTR _fid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	edx, DWORD PTR _d$[ebp]
	movzx	eax, BYTE PTR [eax+edx+46]
	test	eax, eax
	jle	SHORT $LN16@ApplyDamag

; 1218 : 					f = fid;

	mov	ecx, DWORD PTR _fid$[ebp]
	mov	DWORD PTR _f$[ebp], ecx
$LN16@ApplyDamag:

; 1219 : 			}

	jmp	SHORT $LN18@ApplyDamag
$LN17@ApplyDamag:

; 1220 : 			continue;			// Force another pass;

	jmp	$LN23@ApplyDamag
$LN21@ApplyDamag:

; 1221 : 		}
; 1222 : 		fid = GetFeatureID(f);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	mov	DWORD PTR _fid$[ebp], eax

; 1223 : 		fc = GetFeatureClassData(fid);

	mov	eax, DWORD PTR _fid$[ebp]
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$[ebp], eax

; 1224 : 		if (fc && fc->DamageMod[d] > 0)

	cmp	DWORD PTR _fc$[ebp], 0
	je	$LN15@ApplyDamag
	mov	ecx, DWORD PTR _fc$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	movzx	edx, BYTE PTR [ecx+46]
	test	edx, edx
	jle	$LN15@ApplyDamag

; 1225 : 		{
; 1226 : 			hp = fc->HitPoints * 100 / fc->DamageMod[d];

	mov	eax, DWORD PTR _fc$[ebp]
	movsx	eax, WORD PTR [eax+28]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _fc$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	movzx	ecx, BYTE PTR [ecx+46]
	cdq
	idiv	ecx
	mov	DWORD PTR _hp$[ebp], eax

; 1227 : 			// Check if high explosive damage will do more
; 1228 : 			if ((flags & WEAP_AREA) && fc->DamageMod[HighExplosiveDam] > fc->DamageMod[d])

	movsx	edx, WORD PTR _flags$[ebp]
	and	edx, 8
	je	SHORT $LN14@ApplyDamag
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _fc$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+46]
	mov	eax, DWORD PTR _fc$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	movzx	ecx, BYTE PTR [eax+46]
	cmp	edx, ecx
	jle	SHORT $LN14@ApplyDamag

; 1229 : 				hp = fc->HitPoints * 100 / fc->DamageMod[HighExplosiveDam];

	mov	edx, DWORD PTR _fc$[ebp]
	movsx	eax, WORD PTR [edx+28]
	imul	eax, 100				; 00000064H
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _fc$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+46]
	cdq
	idiv	ecx
	mov	DWORD PTR _hp$[ebp], eax
$LN14@ApplyDamag:

; 1230 : 			s = GetFeatureStatus(f);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	mov	DWORD PTR _s$[ebp], eax

; 1231 : 			if (s == VIS_DAMAGED)

	cmp	DWORD PTR _s$[ebp], 2
	jne	SHORT $LN13@ApplyDamag

; 1232 : 				hp /= 2;							// Feature is already damaged

	mov	eax, DWORD PTR _hp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _hp$[ebp], eax
$LN13@ApplyDamag:

; 1233 : 			this_pass = 1;

	mov	DWORD PTR _this_pass$[ebp], 1

; 1234 : 
; 1235 : 			//if (s != VIS_DESTROYED && *str > rand()%hp)
; 1236 : 			if (s != VIS_DESTROYED && (hp == 0 || *str > rand()%hp)) // JB 010401 CTD

	cmp	DWORD PTR _s$[ebp], 3
	je	SHORT $LN12@ApplyDamag
	cmp	DWORD PTR _hp$[ebp], 0
	je	SHORT $LN11@ApplyDamag
	call	_rand
	cdq
	idiv	DWORD PTR _hp$[ebp]
	mov	eax, DWORD PTR _str$[ebp]
	cmp	DWORD PTR [eax], edx
	jle	SHORT $LN12@ApplyDamag
$LN11@ApplyDamag:

; 1237 : 				s = VIS_DESTROYED;

	mov	DWORD PTR _s$[ebp], 3
	jmp	SHORT $LN10@ApplyDamag
$LN12@ApplyDamag:

; 1238 : 			//else if (s != VIS_DESTROYED && s != VIS_DAMAGED && *str > rand()%(hp/2))
; 1239 : 			else if (s != VIS_DESTROYED && s != VIS_DAMAGED && (hp < 2 || *str > rand()%(hp/2))) // JB 010401 CTD

	cmp	DWORD PTR _s$[ebp], 3
	je	SHORT $LN9@ApplyDamag
	cmp	DWORD PTR _s$[ebp], 2
	je	SHORT $LN9@ApplyDamag
	cmp	DWORD PTR _hp$[ebp], 2
	jl	SHORT $LN8@ApplyDamag
	call	_rand
	mov	ecx, eax
	mov	eax, DWORD PTR _hp$[ebp]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	mov	eax, ecx
	cdq
	idiv	esi
	mov	eax, DWORD PTR _str$[ebp]
	cmp	DWORD PTR [eax], edx
	jle	SHORT $LN9@ApplyDamag
$LN8@ApplyDamag:

; 1240 : 				s = VIS_DAMAGED;

	mov	DWORD PTR _s$[ebp], 2

; 1241 : 			else

	jmp	SHORT $LN10@ApplyDamag
$LN9@ApplyDamag:

; 1242 : 			{
; 1243 : 				count = MAX_DAMAGE_TRIES;			// Stop applying damage, since we can't hurt our target

	movsx	ecx, WORD PTR ?MAX_DAMAGE_TRIES@@3FA	; MAX_DAMAGE_TRIES
	mov	DWORD PTR _count$[ebp], ecx

; 1244 : 				this_pass = 0;						// Didn't actually kill this

	mov	DWORD PTR _this_pass$[ebp], 0

; 1245 : 				return lost;

	mov	eax, DWORD PTR _lost$[ebp]
	jmp	$LN24@ApplyDamag
$LN10@ApplyDamag:

; 1246 : 			}
; 1247 : 			if (this_pass)

	cmp	DWORD PTR _this_pass$[ebp], 0
	je	SHORT $LN6@ApplyDamag

; 1248 : 			{
; 1249 : 				SetFeatureStatus(f,s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ; ObjectiveClass::SetFeatureStatus

; 1250 : 				*gDamageStatusPtr = (uchar)f;		gDamageStatusPtr++;

	mov	ecx, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	mov	dl, BYTE PTR _f$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	add	eax, 1
	mov	DWORD PTR ?gDamageStatusPtr@@3PAEA, eax	; gDamageStatusPtr

; 1251 : 				*gDamageStatusPtr = (uchar)s;		gDamageStatusPtr++;

	mov	ecx, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	mov	dl, BYTE PTR _s$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	add	eax, 1
	mov	DWORD PTR ?gDamageStatusPtr@@3PAEA, eax	; gDamageStatusPtr

; 1252 : 				gDamageStatusBuffer[0]++;

	mov	ecx, 1
	imul	ecx, 0
	mov	dl, BYTE PTR ?gDamageStatusBuffer@@3PAEA[ecx]
	add	dl, 1
	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR ?gDamageStatusBuffer@@3PAEA[eax], dl

; 1253 : 				lost++;

	mov	ecx, DWORD PTR _lost$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lost$[ebp], ecx
$LN6@ApplyDamag:

; 1254 : 			}
; 1255 : 			if (!(flags & WEAP_AREA))				// Not area effect weapon, only get one kill per shot

	movsx	edx, WORD PTR _flags$[ebp]
	and	edx, 8
	jne	SHORT $LN5@ApplyDamag

; 1256 : 				*str = 0;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN4@ApplyDamag
$LN5@ApplyDamag:

; 1257 : 			else if (*str > MINIMUM_STRENGTH*2)		// Otherwise halve our strength and keep applying damage

	movsx	ecx, WORD PTR ?MINIMUM_STRENGTH@@3FA	; MINIMUM_STRENGTH
	shl	ecx, 1
	mov	edx, DWORD PTR _str$[ebp]
	cmp	DWORD PTR [edx], ecx
	jle	SHORT $LN3@ApplyDamag

; 1258 : 				*str /= 2;							// NOTE: This doesn't guarentee nearest adjacent feature

	mov	eax, DWORD PTR _str$[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [ecx], eax

; 1259 : 			else

	jmp	SHORT $LN4@ApplyDamag
$LN3@ApplyDamag:

; 1260 : 				count = MAX_DAMAGE_TRIES;

	movsx	edx, WORD PTR ?MAX_DAMAGE_TRIES@@3FA	; MAX_DAMAGE_TRIES
	mov	DWORD PTR _count$[ebp], edx
$LN4@ApplyDamag:

; 1261 : 		}
; 1262 : 		else

	jmp	SHORT $LN1@ApplyDamag
$LN15@ApplyDamag:

; 1263 : 			f = rand()%static_data.class_data->Features;

	call	_rand
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	ecx, BYTE PTR [edx+50]
	cdq
	idiv	ecx
	mov	DWORD PTR _f$[ebp], edx
$LN1@ApplyDamag:

; 1264 : 	}

	jmp	$LN23@ApplyDamag
$LN22@ApplyDamag:

; 1265 : 
; 1266 : 	ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 1267 : 
; 1268 : 	return lost;

	mov	eax, DWORD PTR _lost$[ebp]
$LN24@ApplyDamag:

; 1269 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ApplyDamage@ObjectiveClass@@UAEHW4DamageDataType@@PAHHF@Z ENDP ; ObjectiveClass::ApplyDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -100						; size = 8
$T2 = -92						; size = 8
$T3 = -84						; size = 4
_flags$ = -80						; size = 4
_strength$ = -76					; size = 4
_range$ = -72						; size = 4
_dt$ = -68						; size = 4
_totalShots$ = -64					; size = 4
tv256 = -60						; size = 4
$T4 = -56						; size = 4
_shot$ = -52						; size = 4
_w$5 = -48						; size = 4
_losses$ = -44						; size = 4
_str$ = -40						; size = 4
_hc$ = -36						; size = 4
_this$ = -32						; size = 4
_shooter$ = -28						; size = 4
_i$ = -24						; size = 4
_sx$ = -20						; size = 2
_sy$ = -16						; size = 2
_tx$ = -12						; size = 2
_ty$ = -8						; size = 2
_size$ = -2						; size = 1
_addcrater$ = -1					; size = 1
_cwfm$ = 8						; size = 4
_bonusToHit$ = 12					; size = 1
?ApplyDamage@ObjectiveClass@@UAEHPAVFalconCampWeaponsFire@@E@Z PROC ; ObjectiveClass::ApplyDamage
; _this$ = ecx

; 1100 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	DWORD PTR _this$[ebp], ecx

; 1101 : 	Int32			i,hc,range,shot,losses=0,totalShots=0;

	mov	DWORD PTR _losses$[ebp], 0
	mov	DWORD PTR _totalShots$[ebp], 0

; 1102 : 	GridIndex		sx,sy,tx,ty;
; 1103 : 	int				str=0,strength,flags;

	mov	DWORD PTR _str$[ebp], 0

; 1104 : 	DamType			dt;
; 1105 : 	Unit			shooter = (Unit)vuDatabase->Find(cwfm->dataBlock.shooterID);

	mov	eax, DWORD PTR _cwfm$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR [eax+48]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _shooter$[ebp], eax

; 1106 : 	uchar			size,addcrater=0;

	mov	BYTE PTR _addcrater$[ebp], 0

; 1107 : 
; 1108 : 	if (!IsLocal())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@ApplyDamag

; 1109 : 		return 0;

	xor	eax, eax
	jmp	$LN16@ApplyDamag
$LN15@ApplyDamag:

; 1110 : 
; 1111 : 	if (!shooter)

	cmp	DWORD PTR _shooter$[ebp], 0
	jne	SHORT $LN14@ApplyDamag

; 1112 : 		return 0;

	xor	eax, eax
	jmp	$LN16@ApplyDamag
$LN14@ApplyDamag:

; 1113 : 
; 1114 : 	ShiAssert(IsAggregate())
; 1115 : 
; 1116 : 			gDamageStatusPtr = gDamageStatusBuffer + 1;

	mov	DWORD PTR ?gDamageStatusPtr@@3PAEA, OFFSET ?gDamageStatusBuffer@@3PAEA+1 ; gDamageStatusPtr

; 1117 : 	gDamageStatusBuffer[0] = 0;

	mov	ecx, 1
	imul	ecx, 0
	mov	DWORD PTR $T4[ebp], ecx
	cmp	DWORD PTR $T4[ebp], 256			; 00000100H
	jae	SHORT $LN18@ApplyDamag
	jmp	SHORT $LN19@ApplyDamag
$LN18@ApplyDamag:
	call	___report_rangecheckfailure
$LN19@ApplyDamag:
	mov	edx, DWORD PTR $T4[ebp]
	mov	BYTE PTR ?gDamageStatusBuffer@@3PAEA[edx], 0

; 1118 : 	shooter->GetLocation(&sx,&sy);

	lea	eax, DWORD PTR _sy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1119 : 	GetLocation(&tx,&ty);

	lea	edx, DWORD PTR _ty$[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1120 : 	range = FloatToInt32(Distance(sx,sy,tx,ty));

	movzx	ecx, WORD PTR _ty$[ebp]
	push	ecx
	movzx	edx, WORD PTR _tx$[ebp]
	push	edx
	movzx	eax, WORD PTR _sy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _sx$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _range$[ebp], eax

; 1121 : 
; 1122 : 	// Unit type specific stuff
; 1123 : 	if (shooter->IsFlight() && cwfm->dataBlock.dPilotId == 255)

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN12@ApplyDamag
	mov	eax, DWORD PTR _cwfm$[ebp]
	movzx	ecx, BYTE PTR [eax+89]
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $LN12@ApplyDamag

; 1124 : 	{
; 1125 : 		WayPoint		w = shooter->GetCurrentUnitWP();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$5[ebp], eax

; 1126 : 		// If we're attacking our pre-assigned WP target, check for a specific feature ID
; 1127 : 		if (w && w->GetWPTargetID() == shooter->GetTargetID())

	cmp	DWORD PTR _w$5[ebp], 0
	je	SHORT $LN12@ApplyDamag
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@ApplyDamag

; 1128 : 			cwfm->dataBlock.dPilotId = w->GetWPTargetBuilding();

	mov	ecx, DWORD PTR _w$5[ebp]
	call	?GetWPTargetBuilding@WayPointClass@@QAEEXZ ; WayPointClass::GetWPTargetBuilding
	mov	edx, DWORD PTR _cwfm$[ebp]
	mov	BYTE PTR [edx+89], al
$LN12@ApplyDamag:

; 1129 : 	}
; 1130 : 
; 1131 : 	for (i=0; i<MAX_TYPES_PER_CAMP_FIRE_MESSAGE && cwfm->dataBlock.weapon[i] && cwfm->dataBlock.shots[i]; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@ApplyDamag
$LN10@ApplyDamag:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@ApplyDamag:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN9@ApplyDamag
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cwfm$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+64]
	test	eax, eax
	je	$LN9@ApplyDamag
	mov	ecx, DWORD PTR _cwfm$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+80]
	test	edx, edx
	je	$LN9@ApplyDamag

; 1132 : 	{
; 1133 : 		hc = GetWeaponHitChance(cwfm->dataBlock.weapon[i], NoMove, range) + bonusToHit;

	mov	eax, DWORD PTR _range$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cwfm$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+64]
	push	eax
	call	?GetWeaponHitChance@@YAHHHH@Z		; GetWeaponHitChance
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR _bonusToHit$[ebp]
	add	eax, ecx
	mov	DWORD PTR _hc$[ebp], eax

; 1134 : 
; 1135 : 		// Flight's get bonuses to hit based on vehicle type (ground vehicles should too -
; 1136 : 		// but at this point, we don't really know which vehicle shot which weapon)
; 1137 : 
; 1138 : 		// A.S. removed, as objectives have no defensive bonus
; 1139 : 		//Cobra Let's put this back for now
; 1140 : 		//if (!CampBugFixes)
; 1141 : 		//{
; 1142 : 		if (shooter->IsFlight())

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN8@ApplyDamag

; 1143 : 			hc += GetVehicleClassData(shooter->GetVehicleID(0))->HitChance[NoMove];

	push	0
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	ecx, 1
	imul	ecx, 0
	movzx	edx, BYTE PTR [eax+ecx+66]
	add	edx, DWORD PTR _hc$[ebp]
	mov	DWORD PTR _hc$[ebp], edx
$LN8@ApplyDamag:

; 1144 : 		//}
; 1145 : 		// end removed
; 1146 : 
; 1147 : 		// HARMs will snap to current radar feature, if we're emitting
; 1148 : 		if ((WeaponDataTable[cwfm->dataBlock.weapon[i]].GuidanceFlags & WEAP_ANTIRADATION) && IsEmitting())

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cwfm$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+64]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	ecx, WORD PTR [eax+edx+42]
	and	ecx, 1
	je	SHORT $LN7@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+216]
	call	edx
	test	eax, eax
	je	SHORT $LN7@ApplyDamag

; 1149 : 			cwfm->dataBlock.dPilotId = static_data.class_data->RadarFeature;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	edx, DWORD PTR _cwfm$[ebp]
	mov	al, BYTE PTR [ecx+51]
	mov	BYTE PTR [edx+89], al
$LN7@ApplyDamag:

; 1150 : 
; 1151 : 		// Tally the losses
; 1152 : 		strength = GetWeaponStrength(cwfm->dataBlock.weapon[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cwfm$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+64]
	push	eax
	call	?GetWeaponStrength@@YAHH@Z		; GetWeaponStrength
	add	esp, 4
	mov	DWORD PTR _strength$[ebp], eax

; 1153 : 		str = 0;

	mov	DWORD PTR _str$[ebp], 0

; 1154 : 		dt = (DamType)GetWeaponDamageType(cwfm->dataBlock.weapon[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cwfm$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+64]
	push	eax
	call	?GetWeaponDamageType@@YAHH@Z		; GetWeaponDamageType
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1155 : 		if (dt == NuclearDam)

	cmp	DWORD PTR _dt$[ebp], 9
	jne	SHORT $LN6@ApplyDamag

; 1156 : 			hc = max(95,hc); // minimum of 95% hitchance for nukes.

	cmp	DWORD PTR _hc$[ebp], 95			; 0000005fH
	jge	SHORT $LN20@ApplyDamag
	mov	DWORD PTR tv256[ebp], 95		; 0000005fH
	jmp	SHORT $LN21@ApplyDamag
$LN20@ApplyDamag:
	mov	ecx, DWORD PTR _hc$[ebp]
	mov	DWORD PTR tv256[ebp], ecx
$LN21@ApplyDamag:
	mov	edx, DWORD PTR tv256[ebp]
	mov	DWORD PTR _hc$[ebp], edx
$LN6@ApplyDamag:

; 1157 : 		flags = GetWeaponFlags(cwfm->dataBlock.weapon[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cwfm$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+64]
	push	edx
	call	?GetWeaponFlags@@YAHH@Z			; GetWeaponFlags
	add	esp, 4
	mov	DWORD PTR _flags$[ebp], eax

; 1158 : 		shot = 0;

	mov	DWORD PTR _shot$[ebp], 0

; 1159 : 		totalShots += cwfm->dataBlock.shots[i];

	mov	eax, DWORD PTR _cwfm$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	add	ecx, DWORD PTR _totalShots$[ebp]
	mov	DWORD PTR _totalShots$[ebp], ecx
$LN5@ApplyDamag:

; 1160 : 		while (cwfm->dataBlock.shots[i] - shot>0)

	mov	edx, DWORD PTR _cwfm$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+80]
	sub	eax, DWORD PTR _shot$[ebp]
	test	eax, eax
	jle	$LN4@ApplyDamag

; 1161 : 		{
; 1162 : 			if (rand()%100 < hc)

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, DWORD PTR _hc$[ebp]
	jge	SHORT $LN3@ApplyDamag

; 1163 : 			{
; 1164 : 				str += strength;

	mov	edx, DWORD PTR _str$[ebp]
	add	edx, DWORD PTR _strength$[ebp]
	mov	DWORD PTR _str$[ebp], edx

; 1165 : 				losses += ApplyDamage(dt, &str, cwfm->dataBlock.dPilotId, (short)flags);

	movzx	eax, WORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cwfm$[ebp]
	movzx	edx, BYTE PTR [ecx+89]
	push	edx
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+364]
	call	edx
	add	eax, DWORD PTR _losses$[ebp]
	mov	DWORD PTR _losses$[ebp], eax
	jmp	SHORT $LN1@ApplyDamag
$LN3@ApplyDamag:

; 1166 : 			}
; 1167 : 			else if (shooter->IsFlight() && addcrater < 3)

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN1@ApplyDamag
	movzx	ecx, BYTE PTR _addcrater$[ebp]
	cmp	ecx, 3
	jge	SHORT $LN1@ApplyDamag

; 1168 : 			{
; 1169 : 				// Add a few craters if it's an air attack
; 1170 : 				addcrater++;	

	mov	dl, BYTE PTR _addcrater$[ebp]
	add	dl, 1
	mov	BYTE PTR _addcrater$[ebp], dl
$LN1@ApplyDamag:

; 1171 : 			}
; 1172 : 			shot += 1 + (rand()%(losses+1));		// Random stray shots - let's be nice

	call	_rand
	mov	ecx, DWORD PTR _losses$[ebp]
	add	ecx, 1
	cdq
	idiv	ecx
	mov	eax, DWORD PTR _shot$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _shot$[ebp], ecx

; 1173 : 		}

	jmp	$LN5@ApplyDamag
$LN4@ApplyDamag:

; 1174 : 	}

	jmp	$LN10@ApplyDamag
$LN9@ApplyDamag:

; 1175 : 
; 1176 : #ifdef KEEP_STATISTICS
; 1177 : 	if (shooter->IsFlight())
; 1178 : 	{
; 1179 : 		AS_Kills += losses;
; 1180 : 		AS_Shots += totalShots;
; 1181 : 	}
; 1182 : #endif
; 1183 : 
; 1184 : 	// Record # of craters to add
; 1185 : 	*gDamageStatusPtr = addcrater;								gDamageStatusPtr++;

	mov	edx, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	mov	al, BYTE PTR _addcrater$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	add	ecx, 1
	mov	DWORD PTR ?gDamageStatusPtr@@3PAEA, ecx	; gDamageStatusPtr

; 1186 : 
; 1187 : 	// Record the final state, to keep remote entities consitant
; 1188 : 	size = (uchar)((static_data.class_data->Features+3)/4);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movzx	eax, BYTE PTR [eax+50]
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	BYTE PTR _size$[ebp], al

; 1189 : 	*gDamageStatusPtr = size;									gDamageStatusPtr++;

	mov	ecx, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	mov	dl, BYTE PTR _size$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	add	eax, 1
	mov	DWORD PTR ?gDamageStatusPtr@@3PAEA, eax	; gDamageStatusPtr

; 1190 : 	memcpy(gDamageStatusPtr,obj_data.fstatus,size);				gDamageStatusPtr += size;

	movzx	ecx, BYTE PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	mov	ecx, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR _size$[ebp]
	add	edx, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	mov	DWORD PTR ?gDamageStatusPtr@@3PAEA, edx	; gDamageStatusPtr

; 1191 : 
; 1192 : 	// Copy the data into the message
; 1193 : 	cwfm->dataBlock.size = (ushort)(gDamageStatusPtr - gDamageStatusBuffer);

	mov	eax, DWORD PTR ?gDamageStatusPtr@@3PAEA	; gDamageStatusPtr
	sub	eax, OFFSET ?gDamageStatusBuffer@@3PAEA
	mov	ecx, DWORD PTR _cwfm$[ebp]
	mov	WORD PTR [ecx+90], ax

; 1194 : 	cwfm->dataBlock.data = new uchar[cwfm->dataBlock.size];

	mov	edx, DWORD PTR _cwfm$[ebp]
	movzx	eax, WORD PTR [edx+90]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _cwfm$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+92], edx

; 1195 : 	memcpy (cwfm->dataBlock.data,gDamageStatusBuffer,cwfm->dataBlock.size);

	mov	eax, DWORD PTR _cwfm$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	push	ecx
	push	OFFSET ?gDamageStatusBuffer@@3PAEA
	mov	edx, DWORD PTR _cwfm$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1196 : 
; 1197 : 	// Send the weapon fire message (with target's post-damage status)
; 1198 : 	FalconSendMessage(cwfm,FALSE);

	push	0
	mov	ecx, DWORD PTR _cwfm$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1199 : 
; 1200 : 	return losses;

	mov	eax, DWORD PTR _losses$[ebp]
$LN16@ApplyDamag:

; 1201 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ApplyDamage@ObjectiveClass@@UAEHPAVFalconCampWeaponsFire@@E@Z ENDP ; ObjectiveClass::ApplyDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetMovementType@ObjectiveClass@@UAE?AW4MoveType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMovementType@ObjectiveClass@@UAE?AW4MoveType@@XZ PROC ; ObjectiveClass::GetMovementType, COMDAT
; _this$ = ecx

; 150  : 	virtual MoveType GetMovementType (void)					{	return NoMove; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovementType@ObjectiveClass@@UAE?AW4MoveType@@XZ ENDP ; ObjectiveClass::GetMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -68						; size = 12
$T3 = -56						; size = 8
$T4 = -48						; size = 8
$T5 = -40						; size = 8
_vuid$ = -32						; size = 8
_feature$6 = -24					; size = 4
_this$ = -20						; size = 4
_len$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z PROC ; ObjectiveClass::TransferOwnershipFromData
; _this$ = ecx

; 1048 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1049 : 	if (IsAggregate() || IsLocal() || !data){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN8@TransferOw
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@TransferOw
	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN9@TransferOw
$LN8@TransferOw:

; 1050 : 		return;

	jmp	$LN10@TransferOw
$LN9@TransferOw:

; 1051 : 	}
; 1052 : 
; 1053 : 	VU_ID					vuid;

	lea	ecx, DWORD PTR _vuid$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1054 : 	uchar					len;
; 1055 : 
; 1056 : 	// Change the owner of the deaggregated entities
; 1057 : 	SetDeagOwner (*(VU_ID*)data);									data += sizeof(VU_ID);

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDeagOwner@CampBaseClass@@QAEXVVU_ID@@@Z ; CampBaseClass::SetDeagOwner
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 8
	mov	DWORD PTR _data$[ebp], ecx

; 1058 : 	//memcpy(&deag_owner, data, sizeof(VU_ID));						data += sizeof(VU_ID);
; 1059 : 	memcpy(&len, data, sizeof(uchar));								data += sizeof(uchar);

	push	1
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx

; 1060 : 	memcpy(obj_data.fstatus, data, len);							data += len;

	movzx	edx, BYTE PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	eax, BYTE PTR _len$[ebp]
	add	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], eax

; 1061 : 
; 1062 : #ifdef DEAG_DEBUG
; 1063 : 	//	MonoPrint ("Transfering ownership of remote objective #%d - new owner is %d!\n",GetCampID(),deag_owner.creator_.value_);
; 1064 : #endif
; 1065 : 
; 1066 : 	// Change ownership locally
; 1067 : 	if (GetComponents())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	SHORT $LN7@TransferOw

; 1068 : 	{
; 1069 : 		VuEntity*		feature;
; 1070 : 		VuListIterator	myit(GetComponents());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1071 : 
; 1072 : 		feature = myit.GetFirst();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _feature$6[ebp], eax
$LN6@TransferOw:

; 1073 : 		while (feature)

	cmp	DWORD PTR _feature$6[ebp], 0
	je	SHORT $LN5@TransferOw

; 1074 : 		{
; 1075 : 			((SimBaseClass*)feature)->ChangeOwner(GetDeagOwner());

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ ; CampBaseClass::GetDeagOwner
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _feature$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _feature$6[ebp]
	mov	eax, DWORD PTR [edx+328]
	call	eax

; 1076 : 			feature = myit.GetNext();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _feature$6[ebp], eax

; 1077 : 		}

	jmp	SHORT $LN6@TransferOw
$LN5@TransferOw:

; 1078 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN7@TransferOw:

; 1079 : 
; 1080 : 	// Update our local wake status
; 1081 : 	if (IsAwake() && !FalconLocalSession->InSessionBubble(this, REAGREGATION_RATIO)){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN4@TransferOw
	push	ecx
	movss	xmm0, DWORD PTR ?REAGREGATION_RATIO@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?InSessionBubble@FalconSessionEntity@@QAEHPAVFalconEntity@@M@Z ; FalconSessionEntity::InSessionBubble
	test	eax, eax
	jne	SHORT $LN4@TransferOw

; 1082 : 		Sleep();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+108]
	call	edx

; 1083 : 	}
; 1084 : 	else if (

	jmp	SHORT $LN2@TransferOw
$LN4@TransferOw:

; 1085 : 		!IsAwake() && (
; 1086 : 			GetDeagOwner() == FalconLocalSession->Id() || FalconLocalSession->InSessionBubble(this,1.0F)>0
; 1087 : 		)
; 1088 : 	){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	jne	SHORT $LN2@TransferOw
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ ; CampBaseClass::GetDeagOwner
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@TransferOw
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?InSessionBubble@FalconSessionEntity@@QAEHPAVFalconEntity@@M@Z ; FalconSessionEntity::InSessionBubble
	test	eax, eax
	jle	SHORT $LN2@TransferOw
$LN1@TransferOw:

; 1089 : 		Wake();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
$LN2@TransferOw:
$LN10@TransferOw:

; 1090 : 	}
; 1091 : 	return;
; 1092 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TransferOwnershipFromData@ObjectiveClass@@UAEXPAEJ@Z ENDP ; ObjectiveClass::TransferOwnershipFromData
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -52						; size = 12
tv195 = -40						; size = 4
$T3 = -36						; size = 4
_nextFeature$4 = -32					; size = 4
$T5 = -28						; size = 4
_feature$6 = -24					; size = 4
_this$ = -20						; size = 4
_len$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z PROC	; ObjectiveClass::ReaggregateFromData
; _this$ = ecx

; 999  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1000 : 	if (IsLocal() || IsAggregate())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@Reaggregat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN7@Reaggregat
$LN6@Reaggregat:

; 1001 : 		return;

	jmp	$LN8@Reaggregat
$LN7@Reaggregat:

; 1002 : 
; 1003 : #ifdef DEAG_DEBUG
; 1004 : 	MonoPrint ("Got remote reaggregation message for Objective #%d!\n",GetCampID());
; 1005 : #endif
; 1006 : 
; 1007 : 	ShiAssert( !FalconLocalGame->IsLocal() );
; 1008 : 
; 1009 : 	// Get current status 
; 1010 : 	uchar	len;
; 1011 : 	memcpy(&len, data, sizeof(uchar));							data += sizeof(uchar);

	push	1
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax

; 1012 : 	memcpy(obj_data.fstatus, data, len);						data += len;

	movzx	ecx, BYTE PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR _len$[ebp]
	add	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], edx

; 1013 : 
; 1014 : 	if (IsAwake())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN5@Reaggregat

; 1015 : 		Sleep();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN5@Reaggregat:

; 1016 : 
; 1017 : 	if (GetComponents())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	$LN4@Reaggregat

; 1018 : 	{
; 1019 : 		CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 1020 : 		{
; 1021 : 			// destroy iterator before components
; 1022 : 			VuEntity *feature, *nextFeature;
; 1023 : 			VuListIterator	myit(GetComponents());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1024 : 			for (

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _feature$6[ebp], eax

; 1025 : 				feature = myit.GetFirst();
; 1026 : 				feature != NULL;

	jmp	SHORT $LN3@Reaggregat
$LN2@Reaggregat:

; 1027 : 				feature = nextFeature
; 1028 : 			){

	mov	ecx, DWORD PTR _nextFeature$4[ebp]
	mov	DWORD PTR _feature$6[ebp], ecx
$LN3@Reaggregat:
	cmp	DWORD PTR _feature$6[ebp], 0
	je	SHORT $LN1@Reaggregat

; 1029 : 				nextFeature = myit.GetNext();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nextFeature$4[ebp], eax

; 1030 : 				((SimBaseClass*)feature)->SetRemoveSilentFlag();

	mov	ecx, DWORD PTR _feature$6[ebp]
	call	?SetRemoveSilentFlag@SimBaseClass@@QAEXXZ ; SimBaseClass::SetRemoveSilentFlag

; 1031 : 			}

	jmp	SHORT $LN2@Reaggregat
$LN1@Reaggregat:

; 1032 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 1033 : 		GetComponents()->Unregister();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	ecx, eax
	call	?Unregister@VuCollection@@QAEXXZ	; VuCollection::Unregister

; 1034 : 		delete GetComponents();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN10@Reaggregat
	push	1
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN11@Reaggregat
$LN10@Reaggregat:
	mov	DWORD PTR tv195[ebp], 0
$LN11@Reaggregat:

; 1035 : 		SetComponents (NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetComponents@CampBaseClass@@QAEXPAVTailInsertList@@@Z ; CampBaseClass::SetComponents

; 1036 : 		CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection
$LN4@Reaggregat:

; 1037 : 	}
; 1038 : 	SetAggregate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAggregate@CampBaseClass@@QAEX_N@Z	; CampBaseClass::SetAggregate

; 1039 : 
; 1040 : #if USE_VU_COLL_FOR_CAMPAIGN
; 1041 : 	deaggregatedEntities->Remove(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?deaggregatedEntities@@3PAVVuHashTable@@A ; deaggregatedEntities
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove
$LN8@Reaggregat:

; 1042 : #else
; 1043 : 	deaggregatedMap->remove(this->Id());
; 1044 : #endif
; 1045 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z ENDP	; ObjectiveClass::ReaggregateFromData
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -308						; size = 8
$T3 = -300						; size = 8
$T4 = -292						; size = 8
_z$ = -284						; size = 4
_creator$ = -280					; size = 4
$T5 = -276						; size = 4
$T6 = -272						; size = 4
_x$ = -268						; size = 4
_y$ = -264						; size = 4
tv527 = -260						; size = 4
tv523 = -256						; size = 4
_vuid$ = -252						; size = 8
_classID$ = -244					; size = 4
tv154 = -240						; size = 4
_fc$ = -236						; size = 4
_added$ = -232						; size = 4
$T7 = -228						; size = 4
tv94 = -224						; size = 4
_newObject$ = -220					; size = 4
_filter$ = -216						; size = 4
_fid$ = -212						; size = 4
_session$ = -208					; size = 4
_f$ = -204						; size = 4
_features$ = -198					; size = 1
_len$ = -197						; size = 1
_rem$ = -196						; size = 4
_value$ = -189						; size = 1
_this$ = -188						; size = 4
_simdata$ = -184					; size = 168
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z PROC	; ObjectiveClass::DeaggregateFromData
; _this$ = ecx

; 884  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 296				; 00000128H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 885  : 	if (IsLocal() || !IsAggregate() || FalconLocalGame->IsLocal()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@Deaggregat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN10@Deaggregat
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@Deaggregat
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN15@Deaggregat
$LN14@Deaggregat:
	mov	DWORD PTR tv94[ebp], 0
$LN15@Deaggregat:
	mov	ecx, DWORD PTR tv94[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@Deaggregat
$LN10@Deaggregat:

; 886  : 		return;

	jmp	$LN12@Deaggregat
$LN11@Deaggregat:

; 887  : 	}
; 888  : 	
; 889  : 	//we use this for size tracking	
; 890  : 	long *rem = &size;

	lea	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _rem$[ebp], eax

; 891  : 
; 892  : 	int						f,fid,classID,added=0;

	mov	DWORD PTR _added$[ebp], 0

; 893  : 	SimInitDataClass		simdata;

	lea	ecx, DWORD PTR _simdata$[ebp]
	call	??0SimInitDataClass@@QAE@XZ

; 894  : 	SimBaseClass*			newObject;
; 895  : 	FalconSessionEntity*	session;
; 896  : 	VU_ID					vuid;

	lea	ecx, DWORD PTR _vuid$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 897  : 	uchar					len,features,value;
; 898  : 	FeatureClassDataType*	fc;
; 899  : 	float					x,y,z;
; 900  : 	SimFeatureFilter		filter;

	lea	ecx, DWORD PTR _filter$[ebp]
	call	??0SimFeatureFilter@@QAE@XZ		; SimFeatureFilter::SimFeatureFilter
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 901  : 	ulong					creator;
; 902  : 
; 903  : 	SetComponents (new TailInsertList(&filter));

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN16@Deaggregat
	lea	ecx, DWORD PTR _filter$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0TailInsertList@@QAE@PAVVuFilter@@@Z	; TailInsertList::TailInsertList
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN17@Deaggregat
$LN16@Deaggregat:
	mov	DWORD PTR tv154[ebp], 0
$LN17@Deaggregat:
	mov	edx, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetComponents@CampBaseClass@@QAEXPAVTailInsertList@@@Z ; CampBaseClass::SetComponents

; 904  : 	GetComponents()->Register();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	ecx, eax
	call	?Register@VuCollection@@QAEXXZ		; VuCollection::Register

; 905  : 
; 906  : 	vuid.num_ = VU_SESSION_ENTITY_ID;

	mov	DWORD PTR _vuid$[ebp], 3

; 907  : 	memcpychk(&vuid.creator_, &data, sizeof(VU_SESSION_ID), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	lea	eax, DWORD PTR _vuid$[ebp+4]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 908  : 	memcpychk(&creator, &data, sizeof(VU_SESSION_ID), rem);	   

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	lea	eax, DWORD PTR _creator$[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 909  : 	memcpychk(&obj_data.obj_flags, &data, sizeof(short), rem);   

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	2
	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 192				; 000000c0H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 910  : 	memcpychk(&len, &data, sizeof(uchar), rem);				   

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 911  : 	memcpychk(obj_data.fstatus, &data, len, rem);				   

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 912  : 	memcpychk(&features, &data, sizeof(uchar), rem);			   

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _features$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 913  : 
; 914  : 	if ((session = (FalconSessionEntity*) vuDatabase->Find(vuid)) == NULL){

	mov	eax, DWORD PTR _vuid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _vuid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _session$[ebp], eax
	cmp	DWORD PTR _session$[ebp], 0
	jne	SHORT $LN9@Deaggregat

; 915  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _filter$[ebp]
	call	??1SimFeatureFilter@@UAE@XZ		; SimFeatureFilter::~SimFeatureFilter
	jmp	$LN12@Deaggregat
$LN9@Deaggregat:

; 916  : 	}
; 917  : 	
; 918  : 	// Set the owner of the newly created deaggregated entities
; 919  : 	SetDeagOwner (session->Id());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDeagOwner@CampBaseClass@@QAEXVVU_ID@@@Z ; CampBaseClass::SetDeagOwner

; 920  : 	simdata.forcedId.creator_ = creator;

	mov	eax, DWORD PTR _creator$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _simdata$[ebp+20], ecx

; 921  : 
; 922  : 	SetAggregate(false);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAggregate@CampBaseClass@@QAEX_N@Z	; CampBaseClass::SetAggregate

; 923  : 
; 924  : 	// Set up the init data structure.
; 925  : 	memset(simdata.weapon,0,sizeof(short)*HARDPOINT_MAX);

	push	32					; 00000020H
	push	0
	lea	edx, DWORD PTR _simdata$[ebp+96]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 926  : 	memset(simdata.weapons,0,sizeof(unsigned char)*HARDPOINT_MAX);

	push	16					; 00000010H
	push	0
	lea	eax, DWORD PTR _simdata$[ebp+128]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 927  : 	simdata.vehicleInUnit = 255;

	mov	ecx, 255				; 000000ffH
	mov	WORD PTR _simdata$[ebp+42], cx

; 928  : 	simdata.playerSlot = 255;

	mov	edx, 255				; 000000ffH
	mov	WORD PTR _simdata$[ebp+40], dx

; 929  : 	simdata.skill = 0;

	xor	eax, eax
	mov	WORD PTR _simdata$[ebp+44], ax

; 930  : 	simdata.fuel = 0;

	mov	DWORD PTR _simdata$[ebp+72], 0

; 931  : 	simdata.waypointList = NULL;

	mov	DWORD PTR _simdata$[ebp+160], 0

; 932  : 	simdata.currentWaypoint = 0;

	mov	DWORD PTR _simdata$[ebp+148], 0

; 933  : 	simdata.numWaypoints = 0;

	mov	DWORD PTR _simdata$[ebp+144], 0

; 934  : 	simdata.createType = SimInitDataClass::CampaignFeature;

	mov	DWORD PTR _simdata$[ebp], 8

; 935  : 	simdata.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _simdata$[ebp+64], xmm0

; 936  : 	simdata.side = GetOwner();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	ecx, al
	mov	DWORD PTR _simdata$[ebp+52], ecx

; 937  : 	simdata.campBase = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _simdata$[ebp+12], edx

; 938  : 	simdata.createFlags = SIDC_SILENT_INSERT | SIDC_FORCE_ID;

	mov	DWORD PTR _simdata$[ebp+4], 5

; 939  : 	if (session != FalconLocalSession) {

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	DWORD PTR _session$[ebp], eax
	je	SHORT $LN8@Deaggregat

; 940  : 		simdata.createFlags |= SIDC_REMOTE_OWNER;

	mov	eax, DWORD PTR _simdata$[ebp+4]
	or	eax, 2
	mov	DWORD PTR _simdata$[ebp+4], eax

; 941  : 		simdata.owner = session;

	mov	ecx, DWORD PTR _session$[ebp]
	mov	DWORD PTR _simdata$[ebp+8], ecx
$LN8@Deaggregat:

; 942  : 	}
; 943  : 	fid = static_data.class_data->FirstFeature;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movsx	ecx, WORD PTR [eax+52]
	mov	DWORD PTR _fid$[ebp], ecx

; 944  : 	for (f=0; f<features; f++,fid++) {

	mov	DWORD PTR _f$[ebp], 0
	jmp	SHORT $LN7@Deaggregat
$LN6@Deaggregat:
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, 1
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR _fid$[ebp]
	add	eax, 1
	mov	DWORD PTR _fid$[ebp], eax
$LN7@Deaggregat:
	movzx	ecx, BYTE PTR _features$[ebp]
	cmp	DWORD PTR _f$[ebp], ecx
	jge	$LN5@Deaggregat

; 945  : 		memcpychk(&value, &data, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 946  : 		simdata.campSlot = (Int32) value;

	movzx	edx, BYTE PTR _value$[ebp]
	mov	DWORD PTR _simdata$[ebp+32], edx

; 947  : 		if (simdata.campSlot == 255)

	cmp	DWORD PTR _simdata$[ebp+32], 255	; 000000ffH
	jne	SHORT $LN4@Deaggregat

; 948  : 			continue;

	jmp	SHORT $LN6@Deaggregat
$LN4@Deaggregat:

; 949  : 
; 950  : 		ShiAssert( simdata.campSlot == f );
; 951  : 		classID = GetFeatureID(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	mov	DWORD PTR _classID$[ebp], eax

; 952  : 		fc = GetFeatureClassData (classID);

	mov	ecx, DWORD PTR _classID$[ebp]
	push	ecx
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$[ebp], eax

; 953  : 		simdata.descriptionIndex = classID + VU_LAST_ENTITY_TYPE;

	mov	edx, DWORD PTR _classID$[ebp]
	add	edx, 100				; 00000064H
	mov	DWORD PTR _simdata$[ebp+28], edx

; 954  : 		simdata.flags = fc->Flags;

	mov	eax, DWORD PTR _fc$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _simdata$[ebp+76], ecx

; 955  : 		simdata.specialFlags = FeatureEntryDataTable[fid].Flags;

	mov	edx, DWORD PTR _fid$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movzx	ecx, WORD PTR [eax+edx+2]
	mov	DWORD PTR _simdata$[ebp+80], ecx

; 956  : 		GetFeatureOffset(simdata.campSlot, &y, &x, &z);

	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _simdata$[ebp+32]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureOffset@ObjectiveClass@@QAEHHPAM00@Z ; ObjectiveClass::GetFeatureOffset

; 957  : 		simdata.x = XPos() + x;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv523[ebp]
	movss	xmm0, DWORD PTR tv523[ebp]
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _simdata$[ebp+56], xmm0

; 958  : 		simdata.y = YPos() + y;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv527[ebp]
	movss	xmm0, DWORD PTR tv527[ebp]
	addss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _simdata$[ebp+60], xmm0

; 959  : 		simdata.heading = (float)(FeatureEntryDataTable[fid].Facing) * DEG_TO_RADIANS;

	mov	eax, DWORD PTR _fid$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movsx	edx, WORD PTR [ecx+eax+28]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3c8ef998
	movss	DWORD PTR _simdata$[ebp+68], xmm0

; 960  : 		simdata.displayPriority = fc->Priority;

	mov	eax, DWORD PTR _fc$[ebp]
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR _simdata$[ebp+164], cl

; 961  : 
; 962  : 		memcpychk(&value, &data, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 963  : 		simdata.status = (Int32) value;

	movzx	edx, BYTE PTR _value$[ebp]
	mov	DWORD PTR _simdata$[ebp+48], edx

; 964  : 		memcpychk(&simdata.forcedId.num_, &data, sizeof(VU_ID_NUMBER), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _simdata$[ebp+16]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 965  : 		newObject = AddObjectToSim (&simdata, 0);

	push	0
	lea	eax, DWORD PTR _simdata$[ebp]
	push	eax
	call	?AddObjectToSim@@YAPAVSimBaseClass@@PAVSimInitDataClass@@H@Z ; AddObjectToSim
	add	esp, 8
	mov	DWORD PTR _newObject$[ebp], eax

; 966  : 		if (newObject)

	cmp	DWORD PTR _newObject$[ebp], 0
	je	SHORT $LN3@Deaggregat

; 967  : 		{
; 968  : 			GetComponents()->ForcedInsert(newObject);

	mov	ecx, DWORD PTR _newObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	ecx, eax
	call	?ForcedInsert@TailInsertList@@QAEHPAVVuEntity@@@Z ; TailInsertList::ForcedInsert

; 969  : 			added++;

	mov	edx, DWORD PTR _added$[ebp]
	add	edx, 1
	mov	DWORD PTR _added$[ebp], edx
$LN3@Deaggregat:

; 970  : 		}
; 971  : 	}

	jmp	$LN6@Deaggregat
$LN5@Deaggregat:

; 972  : 
; 973  : 	// Update our local wake status
; 974  : #if NEW_WAKE
; 975  : 	if (OwnerId() == vuLocalSessionEntity->OwnerId()){

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Deaggregat

; 976  : 		Wake();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax

; 977  : 	}
; 978  : 	else{

	jmp	SHORT $LN1@Deaggregat
$LN2@Deaggregat:

; 979  : 		SetAwake(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAwake@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAwake
$LN1@Deaggregat:

; 980  : 	}
; 981  : #else
; 982  : 	if ((session == FalconLocalSession) || (FalconLocalSession->InSessionBubble(this,1.0F)>0)){
; 983  : 		Wake();
; 984  : 	}
; 985  : 	else{
; 986  : 		SetAwake(0);
; 987  : 	}
; 988  : #endif
; 989  : 
; 990  : 	//finally insert it at deagg list
; 991  : #if USE_VU_COLL_FOR_CAMPAIGN
; 992  : 	deaggregatedEntities->ForcedInsert(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?deaggregatedEntities@@3PAVVuHashTable@@A ; deaggregatedEntities
	call	?ForcedInsert@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::ForcedInsert

; 993  : #else
; 994  : 	deaggregatedMap->insert(CampBaseBin(this));
; 995  : #endif
; 996  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _filter$[ebp]
	call	??1SimFeatureFilter@@UAE@XZ		; SimFeatureFilter::~SimFeatureFilter
$LN12@Deaggregat:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z$0:
	lea	ecx, DWORD PTR _filter$[ebp]
	jmp	??1SimFeatureFilter@@UAE@XZ		; SimFeatureFilter::~SimFeatureFilter
__unwindfunclet$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z$1:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DeaggregateFromData@ObjectiveClass@@UAEXPAEJ@Z ENDP	; ObjectiveClass::DeaggregateFromData
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveFromSimLists@ObjectiveClass@@UAEXXZ PROC		; ObjectiveClass::RemoveFromSimLists
; _this$ = ecx

; 875  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 	if (!InSimLists())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InSimLists@CampBaseClass@@QAEHXZ	; CampBaseClass::InSimLists
	test	eax, eax
	jne	SHORT $LN1@RemoveFrom

; 877  : 		return;

	jmp	SHORT $LN2@RemoveFrom
$LN1@RemoveFrom:

; 878  : 
; 879  : 	SetInSimLists(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInSimLists@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetInSimLists

; 880  : 	SimDriver.RemoveFromCampFeatList(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?RemoveFromCampFeatList@SimulationDriver@@QAEXPAVVuEntity@@@Z ; SimulationDriver::RemoveFromCampFeatList
$LN2@RemoveFrom:

; 881  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveFromSimLists@ObjectiveClass@@UAEXXZ ENDP		; ObjectiveClass::RemoveFromSimLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cameraX$ = 8						; size = 4
_cameraY$ = 12						; size = 4
?InsertInSimLists@ObjectiveClass@@UAEXMM@Z PROC		; ObjectiveClass::InsertInSimLists
; _this$ = ecx

; 857  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 858  : 	//	SetChecked(1);
; 859  : 
; 860  : 	// This case is for the destructor's sleep call.
; 861  : 	// Basically, we're going away, so don't put us in any lists.
; 862  : 	if (VuState() > VU_MEM_ACTIVE){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	jle	SHORT $LN2@InsertInSi

; 863  : 		return;

	jmp	SHORT $LN3@InsertInSi
$LN2@InsertInSi:

; 864  : 	}
; 865  : 
; 866  : 	if (InSimLists())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InSimLists@CampBaseClass@@QAEHXZ	; CampBaseClass::InSimLists
	test	eax, eax
	je	SHORT $LN1@InsertInSi

; 867  : 		return;

	jmp	SHORT $LN3@InsertInSi
$LN1@InsertInSi:

; 868  : 
; 869  : 	SetInSimLists(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInSimLists@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetInSimLists

; 870  : 	SimDriver.AddToCampFeatList(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?AddToCampFeatList@SimulationDriver@@QAEXPAVVuEntity@@@Z ; SimulationDriver::AddToCampFeatList
$LN3@InsertInSi:

; 871  : 	cameraX;cameraY;
; 872  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?InsertInSimLists@ObjectiveClass@@UAEXMM@Z ENDP		; ObjectiveClass::InsertInSimLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Sleep@ObjectiveClass@@UAEHXZ PROC			; ObjectiveClass::Sleep
; _this$ = ecx

; 841  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 842  : 	//	OTWDriver.LockObject ();
; 843  : 	// 2002-04-14 put back in by MN - we need to sleep our features, and this does it, 
; 844  : 	//while a more general function name could have been chosen ;)
; 845  : 	SimDriver.SleepCampaignFlight(GetComponents()); //2002-02-11 REMOVED BY S.G. MPS original Cut and paste bug from UnitClass. Objectives have no flights!

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?SleepCampaignFlight@SimulationDriver@@QAEXPAVTailInsertList@@@Z ; SimulationDriver::SleepCampaignFlight

; 846  : 
; 847  : 	SetAwake(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAwake@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAwake

; 848  : 	AwakeCampaignEntities--;

	mov	eax, DWORD PTR ?AwakeCampaignEntities@@3HA ; AwakeCampaignEntities
	sub	eax, 1
	mov	DWORD PTR ?AwakeCampaignEntities@@3HA, eax ; AwakeCampaignEntities

; 849  : 
; 850  : 	//	InsertInSimLists(XPos(),YPos());
; 851  : 	//	OTWDriver.UnLockObject ();
; 852  : 
; 853  : 	return 1;

	mov	eax, 1

; 854  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep@ObjectiveClass@@UAEHXZ ENDP			; ObjectiveClass::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wake@ObjectiveClass@@UAEHXZ PROC			; ObjectiveClass::Wake
; _this$ = ecx

; 818  : int ObjectiveClass::Wake(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 819  : 	// sfr: in MP we need to run entities even if we are not in game
; 820  : #if !NEW_WAKE
; 821  : 	if (!OTWDriver.IsActive()){
; 822  : 		return 0;
; 823  : 	}
; 824  : #endif
; 825  : 
; 826  : 	if (GetComponents ()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	SHORT $LN2@Wake

; 827  : 		SetAwake(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAwake@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAwake

; 828  : 		SimDriver.WakeCampaignBase(FALSE, this, GetComponents());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?WakeCampaignBase@SimulationDriver@@QAEXHPAVCampBaseClass@@PAVTailInsertList@@@Z ; SimulationDriver::WakeCampaignBase

; 829  : 	}
; 830  : 	else {

	jmp	SHORT $LN1@Wake
$LN2@Wake:

; 831  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@Wake
$LN1@Wake:

; 832  : 	}
; 833  : 
; 834  : 	AwakeCampaignEntities++;

	mov	ecx, DWORD PTR ?AwakeCampaignEntities@@3HA ; AwakeCampaignEntities
	add	ecx, 1
	mov	DWORD PTR ?AwakeCampaignEntities@@3HA, ecx ; AwakeCampaignEntities

; 835  : 	//	RemoveFromSimLists();
; 836  : 
; 837  : 	return 1;

	mov	eax, 1
$LN3@Wake:

; 838  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Wake@ObjectiveClass@@UAEHXZ ENDP			; ObjectiveClass::Wake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -72						; size = 8
$T3 = -64						; size = 8
_vuid$4 = -56						; size = 8
$T5 = -48						; size = 4
$T6 = -44						; size = 4
tv156 = -40						; size = 4
$T7 = -36						; size = 4
tv145 = -32						; size = 4
_msg$8 = -28						; size = 4
_dataptr$9 = -24					; size = 4
_this$ = -20						; size = 4
_len$10 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_session$ = 8						; size = 4
?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z PROC ; ObjectiveClass::TransferOwnership
; _this$ = ecx

; 776  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 	if (IsAggregate() || !IsLocal())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN6@TransferOw
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@TransferOw
$LN6@TransferOw:

; 778  : 		return 0;

	xor	eax, eax
	jmp	$LN8@TransferOw
$LN7@TransferOw:

; 779  : 
; 780  : #ifdef DEAG_DEBUG
; 781  : 	MonoPrint ("Transfering ownership of objective #%d! - owner is: %d\n",GetCampID(), session->Id().creator_.value_);
; 782  : #endif
; 783  : 
; 784  : 	ShiAssert ( FalconLocalGame->IsLocal() );
; 785  : 
; 786  : 	// Send the transfer owenership message
; 787  : 	if (TheCampaign.IsOnline())

	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?IsOnline@CampaignClass@@QAEHXZ		; CampaignClass::IsOnline
	test	eax, eax
	je	$LN5@TransferOw

; 788  : 	{
; 789  : 		uchar	len = (uchar)(((static_data.class_data->Features*2)+7)/8);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	eax, BYTE PTR [edx+50]
	lea	eax, DWORD PTR [eax+eax+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	BYTE PTR _len$10[ebp], al

; 790  : 		FalconCampDataMessage *msg = new FalconCampDataMessage(Id(), FalconLocalGame);

	push	58					; 0000003aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN12@TransferOw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@TransferOw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN11@TransferOw
$LN10@TransferOw:
	mov	DWORD PTR tv145[ebp], 0
$LN11@TransferOw:
	push	1
	mov	edx, DWORD PTR tv145[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconCampDataMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconCampDataMessage::FalconCampDataMessage
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN13@TransferOw
$LN12@TransferOw:
	mov	DWORD PTR tv156[ebp], 0
$LN13@TransferOw:
	mov	eax, DWORD PTR tv156[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _msg$8[ebp], ecx

; 791  : 		msg->dataBlock.type = FalconCampDataMessage::campDeaggregateStatusChangeData;

	mov	edx, DWORD PTR _msg$8[ebp]
	mov	DWORD PTR [edx+48], 0

; 792  : 		msg->dataBlock.size = (ushort)(sizeof(VU_ID) + len + sizeof(uchar));

	movzx	eax, BYTE PTR _len$10[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _msg$8[ebp]
	mov	WORD PTR [ecx+52], ax

; 793  : 		msg->dataBlock.data = new uchar[msg->dataBlock.size];

	mov	edx, DWORD PTR _msg$8[ebp]
	movzx	eax, WORD PTR [edx+52]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR _msg$8[ebp]
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [ecx+54], edx

; 794  : 		uchar	*dataptr = msg->dataBlock.data;

	mov	eax, DWORD PTR _msg$8[ebp]
	mov	ecx, DWORD PTR [eax+54]
	mov	DWORD PTR _dataptr$9[ebp], ecx

; 795  : 		VU_ID	vuid = session->Id();

	lea	edx, DWORD PTR _vuid$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id

; 796  : 		memcpy(dataptr, &vuid, sizeof(VU_ID));							dataptr += sizeof(VU_ID);

	push	8
	lea	eax, DWORD PTR _vuid$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataptr$9[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _dataptr$9[ebp]
	add	edx, 8
	mov	DWORD PTR _dataptr$9[ebp], edx

; 797  : 		memcpy(dataptr, &len, sizeof(uchar));							dataptr += sizeof(uchar);

	push	1
	lea	eax, DWORD PTR _len$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataptr$9[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _dataptr$9[ebp]
	add	edx, 1
	mov	DWORD PTR _dataptr$9[ebp], edx

; 798  : 		memcpy(dataptr, obj_data.fstatus, len);							dataptr += len;

	movzx	eax, BYTE PTR _len$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	mov	eax, DWORD PTR _dataptr$9[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR _len$10[ebp]
	add	ecx, DWORD PTR _dataptr$9[ebp]
	mov	DWORD PTR _dataptr$9[ebp], ecx

; 799  : 		FalconSendMessage(msg,TRUE);

	push	1
	mov	edx, DWORD PTR _msg$8[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN5@TransferOw:

; 800  : 	}
; 801  : 
; 802  : 	// Change the owner of the deaggregated entities
; 803  : 	SetDeagOwner (session->Id());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDeagOwner@CampBaseClass@@QAEXVVU_ID@@@Z ; CampBaseClass::SetDeagOwner

; 804  : 
; 805  : 	// Record current state of components && change ownership locally
; 806  : 	RecordCurrentState(session, FALSE);

	push	0
	mov	eax, DWORD PTR _session$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+328]
	call	eax

; 807  : 
; 808  : 	// Update our local wake status
; 809  : 	if (IsAwake() && !FalconLocalSession->InSessionBubble(this, REAGREGATION_RATIO)){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN4@TransferOw
	push	ecx
	movss	xmm0, DWORD PTR ?REAGREGATION_RATIO@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?InSessionBubble@FalconSessionEntity@@QAEHPAVFalconEntity@@M@Z ; FalconSessionEntity::InSessionBubble
	test	eax, eax
	jne	SHORT $LN4@TransferOw

; 810  : 		Sleep();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+108]
	call	edx
	jmp	SHORT $LN2@TransferOw
$LN4@TransferOw:

; 811  : 	}
; 812  : 	else if (!IsAwake() && (session == FalconLocalSession || FalconLocalSession->InSessionBubble(this,1.0F)>0)){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	jne	SHORT $LN2@TransferOw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	DWORD PTR _session$[ebp], eax
	je	SHORT $LN1@TransferOw
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?InSessionBubble@FalconSessionEntity@@QAEHPAVFalconEntity@@M@Z ; FalconSessionEntity::InSessionBubble
	test	eax, eax
	jle	SHORT $LN2@TransferOw
$LN1@TransferOw:

; 813  : 		Wake();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
$LN2@TransferOw:

; 814  : 	}
; 815  : 	return 1;

	mov	eax, 1
$LN8@TransferOw:

; 816  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TransferOwnership@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z ENDP ; ObjectiveClass::TransferOwnership
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -96						; size = 12
$T3 = -84						; size = 8
$T4 = -76						; size = 8
$T5 = -68						; size = 4
$T6 = -64						; size = 4
tv192 = -60						; size = 4
$T7 = -56						; size = 4
_next$8 = -52						; size = 4
tv244 = -48						; size = 4
$T9 = -44						; size = 4
tv233 = -40						; size = 4
$T10 = -36						; size = 4
_feature$11 = -32					; size = 4
_dataptr$12 = -28					; size = 4
_msg$13 = -24						; size = 4
_this$ = -20						; size = 4
_len$14 = -13						; size = 1
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z PROC ; ObjectiveClass::Reaggregate
; _this$ = ecx

; 718  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 719  : 	if (IsAggregate() || !IsLocal())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN6@Reaggregat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@Reaggregat
$LN6@Reaggregat:

; 720  : 		return 0;

	xor	eax, eax
	jmp	$LN8@Reaggregat
$LN7@Reaggregat:

; 721  : 
; 722  : 	// Record current state of components
; 723  : 	RecordCurrentState(NULL, TRUE);

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+328]
	call	eax

; 724  : 
; 725  : 	if (IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN5@Reaggregat

; 726  : 		Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN5@Reaggregat:

; 727  : 	}
; 728  : 
; 729  : 	// No one is looking at this thing - Time to reaggregate
; 730  : 	if (GetComponents()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	$LN4@Reaggregat

; 731  : 		CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 732  : 		{
; 733  : 			// this iterator needs to be destroyed before the list, otherwise we CTD
; 734  : 			VuListIterator	myit(GetComponents());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 735  : 			VuEntity *feature = myit.GetFirst();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _feature$11[ebp], eax
$LN3@Reaggregat:

; 736  : 			while (feature){

	cmp	DWORD PTR _feature$11[ebp], 0
	je	SHORT $LN2@Reaggregat

; 737  : 				VuEntity *next = myit.GetNext();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _next$8[ebp], eax

; 738  : 				// OW FIXME: this seals the feature memory leak but I dunno if this breaks Multiplay
; 739  : 				((SimBaseClass*)feature)->SetRemoveSilentFlag();

	mov	ecx, DWORD PTR _feature$11[ebp]
	call	?SetRemoveSilentFlag@SimBaseClass@@QAEXXZ ; SimBaseClass::SetRemoveSilentFlag

; 740  : 				feature = next;

	mov	ecx, DWORD PTR _next$8[ebp]
	mov	DWORD PTR _feature$11[ebp], ecx

; 741  : 			}

	jmp	SHORT $LN3@Reaggregat
$LN2@Reaggregat:

; 742  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 743  : 		GetComponents()->Unregister();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	ecx, eax
	call	?Unregister@VuCollection@@QAEXXZ	; VuCollection::Unregister

; 744  : 		delete GetComponents();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	DWORD PTR $T7[ebp], eax
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T10[ebp], edx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN10@Reaggregat
	push	1
	mov	eax, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv192[ebp], eax
	jmp	SHORT $LN11@Reaggregat
$LN10@Reaggregat:
	mov	DWORD PTR tv192[ebp], 0
$LN11@Reaggregat:

; 745  : 		SetComponents (NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetComponents@CampBaseClass@@QAEXPAVTailInsertList@@@Z ; CampBaseClass::SetComponents

; 746  : 		CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection
$LN4@Reaggregat:

; 747  : 	}
; 748  : 
; 749  : 	if (TheCampaign.IsOnline()){

	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?IsOnline@CampaignClass@@QAEHXZ		; CampaignClass::IsOnline
	test	eax, eax
	je	$LN1@Reaggregat

; 750  : 		// Send Reaggregation data to everyone in the group
; 751  : 		uchar	len = (uchar)(((static_data.class_data->Features*2)+7)/8);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	eax, BYTE PTR [edx+50]
	lea	eax, DWORD PTR [eax+eax+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	BYTE PTR _len$14[ebp], al

; 752  : 		uchar	*dataptr;
; 753  : 		FalconSimCampMessage *msg = new FalconSimCampMessage(Id(), FalconLocalGame);

	push	66					; 00000042H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN14@Reaggregat
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Reaggregat
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv233[ebp], eax
	jmp	SHORT $LN13@Reaggregat
$LN12@Reaggregat:
	mov	DWORD PTR tv233[ebp], 0
$LN13@Reaggregat:
	push	1
	mov	edx, DWORD PTR tv233[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0FalconSimCampMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconSimCampMessage::FalconSimCampMessage
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN15@Reaggregat
$LN14@Reaggregat:
	mov	DWORD PTR tv244[ebp], 0
$LN15@Reaggregat:
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _msg$13[ebp], ecx

; 754  : 		msg->dataBlock.message = FalconSimCampMessage::simcampReaggregateFromData;

	mov	edx, DWORD PTR _msg$13[ebp]
	mov	DWORD PTR [edx+56], 3

; 755  : 		msg->dataBlock.from = GetDeagOwner();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ ; CampBaseClass::GetDeagOwner
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$13[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 756  : 		msg->dataBlock.size = (ushort)(len + sizeof(uchar));

	movzx	ecx, BYTE PTR _len$14[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _msg$13[ebp]
	mov	WORD PTR [edx+60], cx

; 757  : 		msg->dataBlock.data = new uchar[msg->dataBlock.size];

	mov	eax, DWORD PTR _msg$13[ebp]
	movzx	ecx, WORD PTR [eax+60]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	edx, DWORD PTR _msg$13[ebp]
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR [edx+62], eax

; 758  : 		dataptr = msg->dataBlock.data;

	mov	ecx, DWORD PTR _msg$13[ebp]
	mov	edx, DWORD PTR [ecx+62]
	mov	DWORD PTR _dataptr$12[ebp], edx

; 759  : 		memcpy(dataptr, &len, sizeof(uchar));							dataptr += sizeof(uchar);

	push	1
	lea	eax, DWORD PTR _len$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataptr$12[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _dataptr$12[ebp]
	add	edx, 1
	mov	DWORD PTR _dataptr$12[ebp], edx

; 760  : 		memcpy(dataptr, obj_data.fstatus, len);							dataptr += len;

	movzx	eax, BYTE PTR _len$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	mov	eax, DWORD PTR _dataptr$12[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR _len$14[ebp]
	add	ecx, DWORD PTR _dataptr$12[ebp]
	mov	DWORD PTR _dataptr$12[ebp], ecx

; 761  : 		FalconSendMessage(msg,TRUE);

	push	1
	mov	edx, DWORD PTR _msg$13[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN1@Reaggregat:

; 762  : 	}
; 763  : 
; 764  : 	SetAggregate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAggregate@CampBaseClass@@QAEX_N@Z	; CampBaseClass::SetAggregate

; 765  : 
; 766  : #if USE_VU_COLL_FOR_CAMPAIGN
; 767  : 	deaggregatedEntities->Remove(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?deaggregatedEntities@@3PAVVuHashTable@@A ; deaggregatedEntities
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove

; 768  : #else
; 769  : 	deaggregatedMap->remove(this->Id());
; 770  : #endif
; 771  : 
; 772  : 	return 1;

	mov	eax, 1
$LN8@Reaggregat:

; 773  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$1:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Reaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z ENDP ; ObjectiveClass::Reaggregate
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -284						; size = 8
$T3 = -276						; size = 8
$T4 = -268						; size = 8
_z$ = -260						; size = 4
$T5 = -256						; size = 4
tv469 = -252						; size = 4
$T6 = -248						; size = 4
tv465 = -244						; size = 4
_y$ = -240						; size = 4
_x$ = -236						; size = 4
_oc$ = -232						; size = 4
tv154 = -228						; size = 4
$T7 = -224						; size = 4
_newObject$ = -220					; size = 4
tv325 = -216						; size = 4
_added$ = -212						; size = 4
_filter$ = -208						; size = 4
_fid$ = -204						; size = 4
_fc$ = -200						; size = 4
_classID$ = -196					; size = 2
_f$ = -192						; size = 4
_this$ = -188						; size = 4
_simdata$ = -184					; size = 168
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_session$ = 8						; size = 4
?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z PROC ; ObjectiveClass::Deaggregate
; _this$ = ecx

; 582  : int ObjectiveClass::Deaggregate(FalconSessionEntity *session){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 272				; 00000110H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (!IsLocal() || !IsAggregate()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@Deaggregat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN13@Deaggregat
$LN12@Deaggregat:

; 584  : 		return 0;

	xor	eax, eax
	jmp	$LN14@Deaggregat
$LN13@Deaggregat:

; 585  : 	}
; 586  : 
; 587  : 	ShiAssert( FalconLocalGame->IsLocal() );
; 588  : 
; 589  : 	int						f,fid,added=0;

	mov	DWORD PTR _added$[ebp], 0

; 590  : 	VehicleID				classID;
; 591  : 	float					x,y,z;
; 592  : 	SimInitDataClass		simdata;

	lea	ecx, DWORD PTR _simdata$[ebp]
	call	??0SimInitDataClass@@QAE@XZ

; 593  : 	FeatureClassDataType*	fc;
; 594  : 	ObjClassDataType*		oc;
; 595  : 	SimBaseClass*			newObject;
; 596  : 	//	FalconCampDataMessage	*msg = NULL;
; 597  : 	//	uchar					value,*ddptr = NULL;
; 598  : 	SimFeatureFilter		filter;

	lea	ecx, DWORD PTR _filter$[ebp]
	call	??0SimFeatureFilter@@QAE@XZ		; SimFeatureFilter::SimFeatureFilter
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 599  : 
; 600  : 	memset(&simdata, 0, sizeof(simdata));

	push	168					; 000000a8H
	push	0
	lea	ecx, DWORD PTR _simdata$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 601  : 
; 602  : 	SetAggregate(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAggregate@CampBaseClass@@QAEX_N@Z	; CampBaseClass::SetAggregate

; 603  : 
; 604  : 	// Set the owner of the newly created deaggregated entities
; 605  : 	SetDeagOwner (session->Id());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDeagOwner@CampBaseClass@@QAEXVVU_ID@@@Z ; CampBaseClass::SetDeagOwner

; 606  : 
; 607  : 	SetComponents (new TailInsertList(&filter));

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN16@Deaggregat
	lea	eax, DWORD PTR _filter$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0TailInsertList@@QAE@PAVVuFilter@@@Z	; TailInsertList::TailInsertList
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN17@Deaggregat
$LN16@Deaggregat:
	mov	DWORD PTR tv154[ebp], 0
$LN17@Deaggregat:
	mov	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetComponents@CampBaseClass@@QAEXPAVTailInsertList@@@Z ; CampBaseClass::SetComponents

; 608  : 	GetComponents()->Register();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	ecx, eax
	call	?Register@VuCollection@@QAEXXZ		; VuCollection::Register

; 609  : 
; 610  : 	// Set up the init data structure.
; 611  : 	oc = GetObjectiveClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
	mov	DWORD PTR _oc$[ebp], eax

; 612  : 
; 613  : 	ShiAssert ( static_data.class_data == oc );
; 614  : 
; 615  : 	memset(simdata.weapon,0,sizeof(short)*HARDPOINT_MAX);

	push	32					; 00000020H
	push	0
	lea	eax, DWORD PTR _simdata$[ebp+96]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 616  : 	memset(simdata.weapons,0,sizeof(unsigned char)*HARDPOINT_MAX);

	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _simdata$[ebp+128]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 617  : 	simdata.vehicleInUnit = 255;

	mov	edx, 255				; 000000ffH
	mov	WORD PTR _simdata$[ebp+42], dx

; 618  : 	simdata.playerSlot = 255;

	mov	eax, 255				; 000000ffH
	mov	WORD PTR _simdata$[ebp+40], ax

; 619  : 	simdata.skill = 0;

	xor	ecx, ecx
	mov	WORD PTR _simdata$[ebp+44], cx

; 620  : 	simdata.fuel = 0;

	mov	DWORD PTR _simdata$[ebp+72], 0

; 621  : 	simdata.waypointList = NULL;

	mov	DWORD PTR _simdata$[ebp+160], 0

; 622  : 	simdata.currentWaypoint = 0;

	mov	DWORD PTR _simdata$[ebp+148], 0

; 623  : 	simdata.numWaypoints = 0;

	mov	DWORD PTR _simdata$[ebp+144], 0

; 624  : 	simdata.createType = SimInitDataClass::CampaignFeature;

	mov	DWORD PTR _simdata$[ebp], 8

; 625  : 	simdata.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _simdata$[ebp+64], xmm0

; 626  : 	simdata.side = GetOwner();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	mov	DWORD PTR _simdata$[ebp+52], edx

; 627  : 	simdata.campBase = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _simdata$[ebp+12], eax

; 628  : 	simdata.createFlags = SIDC_SILENT_INSERT;

	mov	DWORD PTR _simdata$[ebp+4], 1

; 629  : 	if (session != FalconLocalSession){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	DWORD PTR _session$[ebp], eax
	je	SHORT $LN11@Deaggregat

; 630  : 		simdata.createFlags |= SIDC_REMOTE_OWNER;

	mov	ecx, DWORD PTR _simdata$[ebp+4]
	or	ecx, 2
	mov	DWORD PTR _simdata$[ebp+4], ecx

; 631  : 		simdata.owner = session;

	mov	edx, DWORD PTR _session$[ebp]
	mov	DWORD PTR _simdata$[ebp+8], edx
$LN11@Deaggregat:

; 632  : 	}
; 633  : 	fid = oc->FirstFeature;

	mov	eax, DWORD PTR _oc$[ebp]
	movsx	ecx, WORD PTR [eax+52]
	mov	DWORD PTR _fid$[ebp], ecx

; 634  : 
; 635  : 	for (f=0; f<oc->Features; f++,fid++)

	mov	DWORD PTR _f$[ebp], 0
	jmp	SHORT $LN10@Deaggregat
$LN9@Deaggregat:
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, 1
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR _fid$[ebp]
	add	eax, 1
	mov	DWORD PTR _fid$[ebp], eax
$LN10@Deaggregat:
	mov	ecx, DWORD PTR _oc$[ebp]
	movzx	edx, BYTE PTR [ecx+50]
	cmp	DWORD PTR _f$[ebp], edx
	jge	$LN8@Deaggregat

; 636  : 	{
; 637  : 		classID = (short)GetFeatureID(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	mov	WORD PTR _classID$[ebp], ax

; 638  : 		if (classID){

	movsx	ecx, WORD PTR _classID$[ebp]
	test	ecx, ecx
	je	$LN4@Deaggregat

; 639  : 			fc = GetFeatureClassData (classID);

	movsx	edx, WORD PTR _classID$[ebp]
	push	edx
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$[ebp], eax

; 640  : 			if (!fc || fc->Flags & FEAT_VIRTUAL)

	cmp	DWORD PTR _fc$[ebp], 0
	je	SHORT $LN5@Deaggregat
	mov	eax, DWORD PTR _fc$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	and	ecx, 2
	je	SHORT $LN6@Deaggregat
$LN5@Deaggregat:

; 641  : 			{
; 642  : 				// || fc->Priority > PlayerOptions.BuildingDetailLevel())
; 643  : 				continue;

	jmp	$LN9@Deaggregat
$LN6@Deaggregat:

; 644  : 			}
; 645  : 			simdata.campSlot = f;

	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _simdata$[ebp+32], edx

; 646  : 			simdata.status = GetFeatureStatus(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	mov	DWORD PTR _simdata$[ebp+48], eax

; 647  : 			simdata.descriptionIndex = classID + VU_LAST_ENTITY_TYPE;

	movsx	ecx, WORD PTR _classID$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR _simdata$[ebp+28], ecx

; 648  : 			simdata.flags = fc->Flags;

	mov	edx, DWORD PTR _fc$[ebp]
	movzx	eax, WORD PTR [edx+6]
	mov	DWORD PTR _simdata$[ebp+76], eax

; 649  : 			simdata.specialFlags = FeatureEntryDataTable[fid].Flags;

	mov	ecx, DWORD PTR _fid$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movzx	eax, WORD PTR [edx+ecx+2]
	mov	DWORD PTR _simdata$[ebp+80], eax

; 650  : 			GetFeatureOffset(f, &y, &x, &z);

	lea	ecx, DWORD PTR _z$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureOffset@ObjectiveClass@@QAEHHPAM00@Z ; ObjectiveClass::GetFeatureOffset

; 651  : 			simdata.x = XPos() + x;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv465[ebp]
	movss	xmm0, DWORD PTR tv465[ebp]
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _simdata$[ebp+56], xmm0

; 652  : 			simdata.y = YPos() + y;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv469[ebp]
	movss	xmm0, DWORD PTR tv469[ebp]
	addss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _simdata$[ebp+60], xmm0

; 653  : 			simdata.heading = (float)(FeatureEntryDataTable[fid].Facing) * DEG_TO_RADIANS;

	mov	edx, DWORD PTR _fid$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR ?FeatureEntryDataTable@@3PAUFeatureEntry@@A ; FeatureEntryDataTable
	movsx	ecx, WORD PTR [eax+edx+28]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3c8ef998
	movss	DWORD PTR _simdata$[ebp+68], xmm0

; 654  : 			simdata.displayPriority = fc->Priority;

	mov	edx, DWORD PTR _fc$[ebp]
	mov	al, BYTE PTR [edx+4]
	mov	BYTE PTR _simdata$[ebp+164], al

; 655  : 			newObject = AddObjectToSim(&simdata, 0);

	push	0
	lea	ecx, DWORD PTR _simdata$[ebp]
	push	ecx
	call	?AddObjectToSim@@YAPAVSimBaseClass@@PAVSimInitDataClass@@H@Z ; AddObjectToSim
	add	esp, 8
	mov	DWORD PTR _newObject$[ebp], eax

; 656  : 			if (newObject){

	cmp	DWORD PTR _newObject$[ebp], 0
	je	SHORT $LN4@Deaggregat

; 657  : 				GetComponents()->ForcedInsert(newObject);

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	mov	ecx, eax
	call	?ForcedInsert@TailInsertList@@QAEHPAVVuEntity@@@Z ; TailInsertList::ForcedInsert

; 658  : 				added++;

	mov	eax, DWORD PTR _added$[ebp]
	add	eax, 1
	mov	DWORD PTR _added$[ebp], eax
$LN4@Deaggregat:

; 659  : 			}
; 660  : 		}
; 661  : 	}

	jmp	$LN9@Deaggregat
$LN8@Deaggregat:

; 662  : 
; 663  : 	if (TheCampaign.IsOnline()){

	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?IsOnline@CampaignClass@@QAEHXZ		; CampaignClass::IsOnline
	test	eax, eax
	je	SHORT $LN3@Deaggregat

; 664  : 		SendDeaggregateData(FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@Deaggregat
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv325[ebp], eax
	jmp	SHORT $LN19@Deaggregat
$LN18@Deaggregat:
	mov	DWORD PTR tv325[ebp], 0
$LN19@Deaggregat:
	mov	edx, DWORD PTR tv325[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+324]
	call	eax
$LN3@Deaggregat:

; 665  : 	}
; 666  : 
; 667  : #if NEW_WAKE
; 668  : 	if (OwnerId() == vuLocalSessionEntity->OwnerId()){

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	push	eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Deaggregat

; 669  : 		Wake();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax

; 670  : 	}
; 671  : 	else{

	jmp	SHORT $LN1@Deaggregat
$LN2@Deaggregat:

; 672  : 		SetAwake(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAwake@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAwake
$LN1@Deaggregat:

; 673  : 	}
; 674  : #else
; 675  : 	if (session == FalconLocalSession || FalconLocalSession->InSessionBubble(this,1.0F)>0){
; 676  : 		Wake();
; 677  : 	}
; 678  : 	else{
; 679  : 		SetAwake(0);
; 680  : 	}
; 681  : #endif
; 682  : 
; 683  : 
; 684  : #if USE_VU_COLL_FOR_CAMPAIGN
; 685  : 	deaggregatedEntities->ForcedInsert(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?deaggregatedEntities@@3PAVVuHashTable@@A ; deaggregatedEntities
	call	?ForcedInsert@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::ForcedInsert

; 686  : #else
; 687  : 	deaggregatedMap->insert(CampBaseBin(this));
; 688  : #endif
; 689  : 
; 690  : 	return 1;

	mov	DWORD PTR $T6[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _filter$[ebp]
	call	??1SimFeatureFilter@@UAE@XZ		; SimFeatureFilter::~SimFeatureFilter
	mov	eax, DWORD PTR $T6[ebp]
$LN14@Deaggregat:

; 691  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$0:
	lea	ecx, DWORD PTR _filter$[ebp]
	jmp	??1SimFeatureFilter@@UAE@XZ		; SimFeatureFilter::~SimFeatureFilter
__unwindfunclet$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z$1:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-276]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Deaggregate@ObjectiveClass@@UAEHPAVFalconSessionEntity@@@Z ENDP ; ObjectiveClass::Deaggregate
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$2 = -48						; size = 12
$T3 = -36						; size = 8
_next$4 = -28						; size = 4
_f$5 = -24						; size = 4
_this$ = -20						; size = 4
_feature$6 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_session$ = 8						; size = 4
___formal$ = 12						; size = 4
?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z PROC ; ObjectiveClass::RecordCurrentState
; _this$ = ecx

; 695  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 696  : 	// Record current state of components
; 697  : 	if (GetComponents()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	$LN6@RecordCurr

; 698  : 		VuEntity *feature, *next;
; 699  : 		int				f;
; 700  : 		VuListIterator	myit(GetComponents());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 701  : 		for (feature = myit.GetFirst(); feature != NULL; feature = next){

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _feature$6[ebp], eax
	jmp	SHORT $LN5@RecordCurr
$LN4@RecordCurr:
	mov	eax, DWORD PTR _next$4[ebp]
	mov	DWORD PTR _feature$6[ebp], eax
$LN5@RecordCurr:
	cmp	DWORD PTR _feature$6[ebp], 0
	je	SHORT $LN3@RecordCurr

; 702  : 			next = myit.GetNext();

	lea	ecx, DWORD PTR _myit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _next$4[ebp], eax

; 703  : 			f = ((SimBaseClass*)feature)->GetSlot();

	mov	ecx, DWORD PTR _feature$6[ebp]
	call	?GetSlot@SimBaseClass@@QAEHXZ		; SimBaseClass::GetSlot
	mov	DWORD PTR _f$5[ebp], eax

; 704  : 			if (GetFeatureID(f) == feature->Type() - VU_LAST_ENTITY_TYPE){

	mov	ecx, DWORD PTR _f$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	mov	esi, eax
	mov	ecx, DWORD PTR _feature$6[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	sub	edx, 100				; 00000064H
	cmp	esi, edx
	jne	SHORT $LN2@RecordCurr

; 705  : 				SetFeatureStatus(f, ((SimBaseClass*)feature)->Status() & VIS_TYPE_MASK);

	mov	ecx, DWORD PTR _feature$6[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	push	eax
	mov	eax, DWORD PTR _f$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFeatureStatus@ObjectiveClass@@QAEXHH@Z ; ObjectiveClass::SetFeatureStatus
$LN2@RecordCurr:

; 706  : 			}
; 707  : 			if (session){

	cmp	DWORD PTR _session$[ebp], 0
	je	SHORT $LN1@RecordCurr

; 708  : 				((SimBaseClass*)feature)->ChangeOwner(session->Id());

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _feature$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _feature$6[ebp]
	mov	eax, DWORD PTR [edx+328]
	call	eax
$LN1@RecordCurr:

; 709  : 			}
; 710  : 		}

	jmp	$LN4@RecordCurr
$LN3@RecordCurr:

; 711  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN6@RecordCurr:

; 712  : 	ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 713  : 	return 0;

	xor	eax, eax

; 714  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RecordCurrentState@ObjectiveClass@@UAEHPAVFalconSessionEntity@@H@Z ENDP ; ObjectiveClass::RecordCurrentState
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_myit$ = -124						; size = 12
$T2 = -112						; size = 8
$T3 = -104						; size = 8
$T4 = -96						; size = 8
$T5 = -88						; size = 8
_tempId$ = -80						; size = 8
_num$6 = -72						; size = 4
$T7 = -68						; size = 4
$T8 = -64						; size = 4
_fc$ = -60						; size = 4
_classID$ = -56						; size = 4
_fid$ = -52						; size = 4
tv144 = -48						; size = 4
$T9 = -44						; size = 4
_feature$ = -40						; size = 4
_f$ = -36						; size = 4
_msg$ = -32						; size = 4
_totalsize$ = -28					; size = 4
_this$ = -24						; size = 4
_ddptr$ = -20						; size = 4
_len$ = -14						; size = 1
_value$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_target$ = 8						; size = 4
?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z PROC ; ObjectiveClass::SendDeaggregateData
; _this$ = ecx

; 504  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 505  : 	if (IsAggregate())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN11@SendDeaggr

; 506  : 		return;

	jmp	$LN12@SendDeaggr
$LN11@SendDeaggr:

; 507  : 
; 508  : 	uchar			len,value;
; 509  : 	int				totalsize,fid,f,classID;
; 510  : 	uchar			*ddptr = NULL;

	mov	DWORD PTR _ddptr$[ebp], 0

; 511  : 	FalconSimCampMessage	*msg;
; 512  : 	SimBaseClass			*feature;
; 513  : 	FeatureClassDataType*	fc;
; 514  : 
; 515  : 	if (!GetComponents())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	jne	SHORT $LN10@SendDeaggr

; 516  : 		return;

	jmp	$LN12@SendDeaggr
$LN10@SendDeaggr:

; 517  : 
; 518  : 	len = (uchar)(((static_data.class_data->Features*2)+7)/8);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	lea	eax, DWORD PTR [edx+edx+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	BYTE PTR _len$[ebp], al

; 519  : 	totalsize =  sizeof(uchar)+sizeof(uchar)+sizeof(VU_ID_NUMBER);

	mov	DWORD PTR _totalsize$[ebp], 6

; 520  : 	totalsize *= static_data.class_data->Features;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	imul	edx, DWORD PTR _totalsize$[ebp]
	mov	DWORD PTR _totalsize$[ebp], edx

; 521  : 	totalsize += sizeof(VU_SESSION_ID) + sizeof(VU_SESSION_ID) + sizeof(short) + sizeof(uchar) + len + sizeof(uchar);

	movzx	eax, BYTE PTR _len$[ebp]
	mov	ecx, DWORD PTR _totalsize$[ebp]
	lea	edx, DWORD PTR [ecx+eax+12]
	mov	DWORD PTR _totalsize$[ebp], edx

; 522  : 
; 523  : 	msg = new FalconSimCampMessage(Id(), target);

	push	66					; 00000042H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN14@SendDeaggr
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0FalconSimCampMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconSimCampMessage::FalconSimCampMessage
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN15@SendDeaggr
$LN14@SendDeaggr:
	mov	DWORD PTR tv144[ebp], 0
$LN15@SendDeaggr:
	mov	ecx, DWORD PTR tv144[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _msg$[ebp], edx

; 524  : 	msg->dataBlock.message = FalconSimCampMessage::simcampDeaggregateFromData;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+56], 4

; 525  : 	msg->dataBlock.from = GetDeagOwner();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ ; CampBaseClass::GetDeagOwner
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax

; 526  : 	msg->dataBlock.size = (unsigned short)totalsize;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	ax, WORD PTR _totalsize$[ebp]
	mov	WORD PTR [edx+60], ax

; 527  : 	msg->dataBlock.data = new uchar[totalsize];

	mov	ecx, DWORD PTR _totalsize$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR [edx+62], eax

; 528  : 	ddptr = msg->dataBlock.data;

	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+62]
	mov	DWORD PTR _ddptr$[ebp], edx

; 529  : 	VU_ID tempId = GetDeagOwner();

	lea	eax, DWORD PTR _tempId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ ; CampBaseClass::GetDeagOwner

; 530  : 	// pass some status stuff along, so we're on the same page.
; 531  : 	memcpy(ddptr, &(tempId.creator_), sizeof(VU_SESSION_ID));					ddptr += sizeof(VU_SESSION_ID);

	push	4
	lea	ecx, DWORD PTR _tempId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ddptr$[ebp], eax

; 532  : 	tempId = FalconLocalSession->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _tempId$[ebp], edx
	mov	DWORD PTR _tempId$[ebp+4], eax

; 533  : 	memcpy(ddptr, &(tempId.creator_), sizeof(VU_SESSION_ID));	ddptr += sizeof(VU_SESSION_ID);

	push	4
	lea	ecx, DWORD PTR _tempId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ddptr$[ebp], eax

; 534  : 	memcpy(ddptr, &obj_data.obj_flags, sizeof(short));							ddptr += sizeof(short);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _ddptr$[ebp], eax

; 535  : 	memcpy(ddptr, &len, sizeof(uchar));											ddptr += sizeof(uchar);

	push	1
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ddptr$[ebp], eax

; 536  : 	memcpy(ddptr, obj_data.fstatus, len);										ddptr += len;

	movzx	ecx, BYTE PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	mov	ecx, DWORD PTR _ddptr$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR _len$[ebp]
	add	edx, DWORD PTR _ddptr$[ebp]
	mov	DWORD PTR _ddptr$[ebp], edx

; 537  : 	memcpy(ddptr, &static_data.class_data->Features, sizeof(uchar));			ddptr += sizeof(uchar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	add	ecx, 50					; 00000032H
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ddptr$[ebp], eax

; 538  : 
; 539  : 	//MonoPrint ("Features %08x:%08x = %d\n", Id(), static_data.class_data->Features);
; 540  : 
; 541  : 	fid = static_data.class_data->FirstFeature;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movsx	eax, WORD PTR [edx+52]
	mov	DWORD PTR _fid$[ebp], eax

; 542  : 	VuListIterator			myit(GetComponents());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 543  : 	feature = (SimBaseClass*) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _feature$[ebp], eax

; 544  : 	for (f=0; f<static_data.class_data->Features; f++,fid++)

	mov	DWORD PTR _f$[ebp], 0
	jmp	SHORT $LN9@SendDeaggr
$LN8@SendDeaggr:
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 1
	mov	DWORD PTR _f$[ebp], ecx
	mov	edx, DWORD PTR _fid$[ebp]
	add	edx, 1
	mov	DWORD PTR _fid$[ebp], edx
$LN9@SendDeaggr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	cmp	DWORD PTR _f$[ebp], edx
	jge	$LN7@SendDeaggr

; 545  : 	{
; 546  : 		if (feature)

	cmp	DWORD PTR _feature$[ebp], 0
	je	$LN6@SendDeaggr

; 547  : 		{
; 548  : 			classID = GetFeatureID(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	mov	DWORD PTR _classID$[ebp], eax

; 549  : 			if (classID)

	cmp	DWORD PTR _classID$[ebp], 0
	je	$LN5@SendDeaggr

; 550  : 			{
; 551  : 				fc = GetFeatureClassData (classID);

	mov	ecx, DWORD PTR _classID$[ebp]
	push	ecx
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$[ebp], eax

; 552  : 				if (!fc || fc->Flags & FEAT_VIRTUAL)

	cmp	DWORD PTR _fc$[ebp], 0
	je	SHORT $LN3@SendDeaggr
	mov	edx, DWORD PTR _fc$[ebp]
	movzx	eax, WORD PTR [edx+6]
	and	eax, 2
	je	SHORT $LN4@SendDeaggr
$LN3@SendDeaggr:

; 553  : 				{
; 554  : 					// Gotta notify the remote machine that this is virtual.
; 555  : 					value = 255;

	mov	BYTE PTR _value$[ebp], 255		; 000000ffH

; 556  : 					memcpy(ddptr, &value, sizeof(uchar));							ddptr += sizeof(uchar);

	push	1
	lea	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ddptr$[ebp], eax

; 557  : 				}
; 558  : 				else

	jmp	SHORT $LN5@SendDeaggr
$LN4@SendDeaggr:

; 559  : 				{
; 560  : 					// Find the correct feature from our component list
; 561  : 					ShiAssert (feature->GetSlot() == f);
; 562  : 					value = (uchar)f;

	mov	cl, BYTE PTR _f$[ebp]
	mov	BYTE PTR _value$[ebp], cl

; 563  : 					memcpy(ddptr, &value, sizeof(uchar));							ddptr += sizeof(uchar);

	push	1
	lea	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ddptr$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ddptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ddptr$[ebp], ecx

; 564  : 					value = (uchar)feature->Status();

	mov	ecx, DWORD PTR _feature$[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	mov	BYTE PTR _value$[ebp], al

; 565  : 					memcpy(ddptr, &value, sizeof(uchar));							ddptr += sizeof(uchar);

	push	1
	lea	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ddptr$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ddptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ddptr$[ebp], ecx

; 566  : 					VU_ID_NUMBER num = feature->Id().num_;

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _feature$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _num$6[ebp], eax

; 567  : 					memcpy(ddptr, &num, sizeof(VU_ID_NUMBER));		ddptr += sizeof(VU_ID_NUMBER);

	push	4
	lea	ecx, DWORD PTR _num$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ddptr$[ebp], eax

; 568  : 					feature = (SimBaseClass*) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _feature$[ebp], eax
$LN5@SendDeaggr:

; 569  : 				}
; 570  : 			}
; 571  : 		}
; 572  : 		else

	jmp	SHORT $LN1@SendDeaggr
$LN6@SendDeaggr:

; 573  : 		{
; 574  : 			value = 255;

	mov	BYTE PTR _value$[ebp], 255		; 000000ffH

; 575  : 			memcpy(ddptr, &value, sizeof(uchar));							ddptr += sizeof(uchar);

	push	1
	lea	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ddptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ddptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ddptr$[ebp], eax
$LN1@SendDeaggr:

; 576  : 		}
; 577  : 	}

	jmp	$LN8@SendDeaggr
$LN7@SendDeaggr:

; 578  : 	// Send Deaggregation data to everyone in the group
; 579  : 	FalconSendMessage(msg,TRUE);

	push	1
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 580  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN12@SendDeaggr:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z$1:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendDeaggregateData@ObjectiveClass@@UAEXPAVVuTargetEntity@@@Z ENDP ; ObjectiveClass::SendDeaggregateData
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_tmp_ent$ = -8						; size = 4
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@ObjectiveClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC ; ObjectiveClass::Handle
; _this$ = ecx

; 484  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 	// copy data from temp entity to current entity
; 486  : 	Objective tmp_ent = (Objective)(event->expandedData_.get());

	mov	ecx, DWORD PTR _event$[ebp]
	add	ecx, 48					; 00000030H
	call	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::get
	mov	DWORD PTR _tmp_ent$[ebp], eax

; 487  : 
; 488  : 	ShiAssert ( !IsLocal() );
; 489  : 
; 490  : 	memcpy(&obj_data.last_repair, &tmp_ent->obj_data.last_repair, sizeof(CampaignTime));

	push	4
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 491  : 	memcpy(&obj_data.obj_flags, &tmp_ent->obj_data.obj_flags, sizeof(short));				

	push	2
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 192				; 000000c0H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 492  : 	memcpy(&obj_data.supply, &tmp_ent->obj_data.supply, sizeof(uchar));				

	push	1
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 196				; 000000c4H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 493  : 	memcpy(&obj_data.fuel, &tmp_ent->obj_data.fuel, sizeof(uchar));					

	push	1
	mov	eax, DWORD PTR _tmp_ent$[ebp]
	add	eax, 197				; 000000c5H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 197				; 000000c5H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 494  : 	memcpy(&obj_data.losses, &tmp_ent->obj_data.losses, sizeof(uchar));				

	push	1
	mov	edx, DWORD PTR _tmp_ent$[ebp]
	add	edx, 198				; 000000c6H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 198				; 000000c6H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 495  : 	memcpy(&obj_data.priority, &tmp_ent->obj_data.priority, sizeof(uchar));			

	push	1
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	add	ecx, 200				; 000000c8H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 200				; 000000c8H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 496  : 
; 497  : 	return CampBaseClass::Handle(event);

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@CampBaseClass@@UAEHPAVVuFullUpdateEvent@@@Z ; CampBaseClass::Handle

; 498  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@ObjectiveClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP ; ObjectiveClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetKias@ObjectiveClass@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetKias@ObjectiveClass@@UBEMXZ PROC			; ObjectiveClass::GetKias, COMDAT
; _this$ = ecx

; 127  : 	virtual float GetKias() const { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKias@ObjectiveClass@@UBEMXZ ENDP			; ObjectiveClass::GetKias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetVt@ObjectiveClass@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVt@ObjectiveClass@@UBEMXZ PROC			; ObjectiveClass::GetVt, COMDAT
; _this$ = ecx

; 126  : 	virtual float GetVt() const { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVt@ObjectiveClass@@UBEMXZ ENDP			; ObjectiveClass::GetVt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
_owner$ = -2						; size = 1
_len$ = -1						; size = 1
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
?UpdateFromData@ObjectiveClass@@QAEXPAPAEPAJ@Z PROC	; ObjectiveClass::UpdateFromData
; _this$ = ecx

; 456  : void ObjectiveClass::UpdateFromData (VU_BYTE **stream, long *rem){

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 457  : 	uchar		len;
; 458  : 	uchar		owner;
; 459  : 
; 460  : 	memcpychk(&obj_data.last_repair, stream, sizeof(CampaignTime), rem);	

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 184				; 000000b8H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 461  : 	memcpychk(&owner, stream, sizeof(uchar), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _owner$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 462  : 	SetOwner(owner);

	movzx	eax, BYTE PTR _owner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+320]
	call	eax

; 463  : 	memcpychk(&obj_data.supply, stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 464  : 	memcpychk(&obj_data.fuel, stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 197				; 000000c5H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 465  : 	memcpychk(&obj_data.losses, stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 198				; 000000c6H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 466  : 	memcpychk(&len, stream, sizeof(uchar), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 467  : #ifdef USE_SH_POOLS
; 468  : 	obj_data.fstatus = (uchar *)MemAllocPtr(gObjMemPool, sizeof(uchar)*len, 0 );
; 469  : #else
; 470  : 	obj_data.fstatus = new uchar[len];

	movzx	ecx, BYTE PTR _len$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+204], eax

; 471  : #endif
; 472  : 	if (gCampDataVersion < 64) {

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 64	; gCampDataVersion, 00000040H
	jge	SHORT $LN2@UpdateFrom

; 473  : 		memcpychk(obj_data.fstatus, stream, 1, rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 474  : 		memset(obj_data.fstatus+1, 0, len-1);

	movzx	edx, BYTE PTR _len$[ebp]
	sub	edx, 1
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	add	ecx, 1
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 475  : 	}
; 476  : 	else {

	jmp	SHORT $LN1@UpdateFrom
$LN2@UpdateFrom:

; 477  : 		memcpychk(obj_data.fstatus, stream, len, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	movzx	eax, BYTE PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN1@UpdateFrom:

; 478  : 	}
; 479  : 	ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 480  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateFromData@ObjectiveClass@@QAEXPAPAEPAJ@Z ENDP	; ObjectiveClass::UpdateFromData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_owner$ = -2						; size = 1
_len$ = -1						; size = 1
_stream$ = 8						; size = 4
_update$ = 12						; size = 4
?Save@ObjectiveClass@@UAEHPAPAEH@Z PROC			; ObjectiveClass::Save
; _this$ = ecx

; 441  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 442  : 	uchar		len = (uchar)(((static_data.class_data->Features*2)+7)/8);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	lea	eax, DWORD PTR [edx+edx+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	BYTE PTR _len$[ebp], al

; 443  : 	uchar		owner = GetOwner();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	BYTE PTR _owner$[ebp], al

; 444  : 
; 445  : 	memcpy(*stream, &obj_data.last_repair, sizeof(CampaignTime));	*stream += sizeof(CampaignTime);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 446  : 	memcpy(*stream, &owner, sizeof(uchar));							*stream += sizeof(uchar);		

	push	1
	lea	eax, DWORD PTR _owner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 447  : 	memcpy(*stream, &obj_data.supply, sizeof(uchar));				*stream += sizeof(uchar);		

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 448  : 	memcpy(*stream, &obj_data.fuel, sizeof(uchar));					*stream += sizeof(uchar);		

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 197				; 000000c5H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 449  : 	memcpy(*stream, &obj_data.losses, sizeof(uchar));				*stream += sizeof(uchar);		

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 198				; 000000c6H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 450  : 	memcpy(*stream, &len, sizeof(uchar));							*stream += sizeof(uchar);		

	push	1
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 451  : 	memcpy(*stream, obj_data.fstatus, len);							*stream += len;	

	movzx	eax, BYTE PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR _len$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], edx

; 452  : 
; 453  : 	return ObjectiveClass::SaveSize(update);

	mov	edx, DWORD PTR _update$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@ObjectiveClass@@UAEHH@Z	; ObjectiveClass::SaveSize

; 454  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Save@ObjectiveClass@@UAEHPAPAEH@Z ENDP			; ObjectiveClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_len$ = -16						; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
_num$ = -1						; size = 1
_stream$ = 8						; size = 4
?Save@ObjectiveClass@@UAEHPAPAE@Z PROC			; ObjectiveClass::Save
; _this$ = ecx

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 	int len,i;
; 387  : 	uchar	num=0;

	mov	BYTE PTR _num$[ebp], 0

; 388  : 
; 389  : 	CampBaseClass::Save(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@CampBaseClass@@UAEHPAPAE@Z	; CampBaseClass::Save

; 390  : 
; 391  : 	if (!IsAggregate())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate

; 392  : 	{
; 393  : 		// KCK TODO: We need to send the deaggregated data as well!
; 394  : 	}
; 395  : 
; 396  : 	memcpy(*stream, &obj_data.last_repair, sizeof(CampaignTime));	*stream += sizeof(CampaignTime);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 397  : 	memcpy(*stream, &obj_data.obj_flags, sizeof(ulong));			*stream += sizeof(ulong);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 398  : 	memcpy(*stream, &obj_data.supply, sizeof(uchar));				*stream += sizeof(uchar);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 399  : 	memcpy(*stream, &obj_data.fuel, sizeof(uchar));					*stream += sizeof(uchar);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 197				; 000000c5H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 400  : 	memcpy(*stream, &obj_data.losses, sizeof(uchar));				*stream += sizeof(uchar);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 198				; 000000c6H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 401  : 	len = ((static_data.class_data->Features*2)+7)/8;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	eax, BYTE PTR [edx+50]
	lea	eax, DWORD PTR [eax+eax+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _len$[ebp], eax

; 402  : 	memcpy(*stream, &len, sizeof(uchar));							*stream += sizeof(uchar);

	push	1
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 403  : 	memcpy(*stream, obj_data.fstatus, len);							*stream += len;

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 404  : 	memcpy(*stream, &obj_data.priority, sizeof(uchar));				*stream += sizeof(uchar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 405  : 	memcpy(*stream, &static_data.nameid, sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 212				; 000000d4H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 406  : #ifdef CAMPTOOL
; 407  : 	if (gRenameIds)
; 408  : 		static_data.parent.num_ = RenameTable[static_data.parent.num_];
; 409  : #endif
; 410  : 	memcpy(*stream, &static_data.parent, sizeof(VU_ID));			*stream += sizeof(VU_ID);

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 216				; 000000d8H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 411  : 	memcpy(*stream, &static_data.first_owner, sizeof(Control));		*stream += sizeof(Control);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 412  : 	memcpy(*stream, &static_data.links, sizeof(uchar));				*stream += sizeof(uchar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 225				; 000000e1H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 413  : 
; 414  : 	for (i=0; i<static_data.links; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Save
$LN4@Save:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@Save:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN3@Save

; 415  : 	{
; 416  : #ifdef CAMPTOOL
; 417  : 		if (gRenameIds)
; 418  : 			link_data[i].id.num_ = RenameTable[link_data[i].id.num_];
; 419  : #endif
; 420  : 		memcpy(*stream, &link_data[i], sizeof(CampObjectiveLinkDataType));	*stream += sizeof(CampObjectiveLinkDataType);

	push	16					; 00000010H
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+236]
	push	eax
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 421  : 	}

	jmp	SHORT $LN4@Save
$LN3@Save:

; 422  : 
; 423  : 	if (static_data.radar_data)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	je	SHORT $LN2@Save

; 424  : 	{
; 425  : 		// We have radar data
; 426  : 		num = 1;

	mov	BYTE PTR _num$[ebp], 1

; 427  : 		memcpy(*stream, &num, sizeof(uchar));						*stream += sizeof(uchar);

	push	1
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 428  : 		memcpy(*stream, static_data.radar_data, sizeof(RadarRangeClass));	*stream += sizeof(RadarRangeClass);

	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 429  : 	}
; 430  : 	else

	jmp	SHORT $LN1@Save
$LN2@Save:

; 431  : 	{
; 432  : 		// We don't have radar data
; 433  : 		num = 0;

	mov	BYTE PTR _num$[ebp], 0

; 434  : 		memcpy(*stream, &num, sizeof(uchar));						*stream += sizeof(uchar);

	push	1
	lea	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@Save:

; 435  : 	}
; 436  : 
; 437  : 	return ObjectiveClass::SaveSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@ObjectiveClass@@UAEHXZ	; ObjectiveClass::SaveSize

; 438  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@ObjectiveClass@@UAEHPAPAE@Z ENDP			; ObjectiveClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SaveSize@ObjectiveClass@@UAEHH@Z PROC			; ObjectiveClass::SaveSize
; _this$ = ecx

; 374  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 	return sizeof(CampaignTime)
; 376  : 			+ sizeof(uchar)
; 377  : 			+ sizeof(uchar)
; 378  : 			+ sizeof(uchar)
; 379  : 			+ sizeof(uchar)
; 380  : 			+ sizeof(uchar)
; 381  : 			+ ((static_data.class_data->Features*2)+7)/8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	edx, BYTE PTR [ecx+50]
	lea	eax, DWORD PTR [edx+edx+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 9

; 382  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SaveSize@ObjectiveClass@@UAEHH@Z ENDP			; ObjectiveClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
?SaveSize@ObjectiveClass@@UAEHXZ PROC			; ObjectiveClass::SaveSize
; _this$ = ecx

; 351  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 352  : 	int	size = CampBaseClass::SaveSize()
; 353  : 			+ sizeof(CampaignTime)
; 354  : 			+ sizeof(ulong)
; 355  : 			+ sizeof(uchar)
; 356  : 			+ sizeof(uchar)
; 357  : 			+ sizeof(uchar)
; 358  : 			+ sizeof(uchar)
; 359  : 			+ ((static_data.class_data->Features*2)+7)/8
; 360  : 			+ sizeof(uchar)
; 361  : 			+ sizeof(short)
; 362  : 			+ sizeof(VU_ID)
; 363  : 			+ sizeof(Control)
; 364  : 			+ sizeof(uchar)
; 365  : 			+ sizeof(uchar)
; 366  : 			+ static_data.links * sizeof(CampObjectiveLinkDataType);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@CampBaseClass@@UAEHXZ		; CampBaseClass::SaveSize
	mov	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movzx	edx, BYTE PTR [eax+50]
	lea	eax, DWORD PTR [edx+edx+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [ecx+eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+225]
	shl	edx, 4
	lea	eax, DWORD PTR [eax+edx+14]
	mov	DWORD PTR _size$[ebp], eax

; 367  : 	if (static_data.radar_data)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	je	SHORT $LN1@SaveSize

; 368  : 		size += sizeof(RadarRangeClass);

	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _size$[ebp], edx
$LN1@SaveSize:

; 369  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 370  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@ObjectiveClass@@UAEHXZ ENDP			; ObjectiveClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
tv92 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ObjectiveClass@@UAE@XZ PROC				; ObjectiveClass::~ObjectiveClass
; _this$ = ecx

; 334  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1ObjectiveClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ObjectiveClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 335  : 	delete [] obj_data.fstatus;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 336  : 	delete [] link_data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 337  : 	if (static_data.radar_data)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	je	SHORT $LN2@ObjectiveC

; 338  : 		delete static_data.radar_data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@ObjectiveC:

; 339  : 	if(brain)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+240], 0
	je	SHORT $LN3@ObjectiveC

; 340  : 	{
; 341  : 		delete brain;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T6[ebp], edx
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN5@ObjectiveC
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	call	??_GATCBrain@@QAEPAXI@Z
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN6@ObjectiveC
$LN5@ObjectiveC:
	mov	DWORD PTR tv92[ebp], 0
$LN6@ObjectiveC:

; 342  : 		brain = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0
$LN3@ObjectiveC:

; 343  : 	}
; 344  : #ifdef DEBUG_COUNT
; 345  : 	myolist.DelObj(Id().num_);
; 346  : 	gObjectiveCount--;
; 347  : #endif
; 348  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CampBaseClass@@UAE@XZ		; CampBaseClass::~CampBaseClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1ObjectiveClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampBaseClass@@UAE@XZ		; CampBaseClass::~CampBaseClass
__ehhandler$??1ObjectiveClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1ObjectiveClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1ObjectiveClass@@UAE@XZ ENDP				; ObjectiveClass::~ObjectiveClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -80						; size = 8
$T3 = -72						; size = 4
$T4 = -68						; size = 4
$T5 = -64						; size = 4
$T6 = -60						; size = 4
$T7 = -56						; size = 4
tv415 = -52						; size = 4
tv388 = -48						; size = 4
tv372 = -44						; size = 4
$T8 = -40						; size = 4
tv294 = -36						; size = 4
$T9 = -32						; size = 4
$T10 = -28						; size = 4
_this$ = -24						; size = 4
_temp$11 = -20						; size = 2
_i$ = -15						; size = 1
_size$ = -14						; size = 1
_nsize$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0ObjectiveClass@@QAE@PAPAEPAJ@Z PROC			; ObjectiveClass::ObjectiveClass
; _this$ = ecx

; 184  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectiveClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampBaseClass@@QAE@PAPAEPAJ@Z	; CampBaseClass::CampBaseClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7ObjectiveClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??0CampObjectiveStaticDataType@@QAE@XZ

; 185  : 	uchar	size,nsize,i;
; 186  : 
; 187  : 	dirty_objective = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+208], 0

; 188  : 	static_data.class_data = (ObjClassDataType*)Falcon4ClassTable[share_.entityType_ - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	sub	edx, 100				; 00000064H
	imul	edx, 81					; 00000051H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+edx+77]
	mov	DWORD PTR [eax+232], edx

; 189  : 
; 190  : //#ifdef CAMPTOOL
; 191  : //	if (gRenameIds)	{
; 192  : //		VU_ID		new_id = FalconNullId;
; 193  : //
; 194  : //		// Rename this ID
; 195  : //		for (new_id.num_ = FIRST_OBJECTIVE_VU_ID_NUMBER; new_id.num_ < LAST_OBJECTIVE_VU_ID_NUMBER; new_id.num_++) {
; 196  : //			if (!vuDatabase->Find(new_id))	{
; 197  : //				RenameTable[share_.id_.num_] = new_id.num_;
; 198  : //				share_.id_ = new_id;
; 199  : //				break;
; 200  : //			}
; 201  : //		}
; 202  : //	}
; 203  : //#endif
; 204  : 
; 205  : 	ShiAssert(static_data.class_data);
; 206  : 	if (!static_data.class_data) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN22@ObjectiveC

; 207  : 		obj_data.fstatus = new uchar[0];

	push	0
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [ecx+204], edx

; 208  : 		SetObjectiveType(TYPE_TOWN);

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectiveType@ObjectiveClass@@QAEXE@Z ; ObjectiveClass::SetObjectiveType
$LN22@ObjectiveC:

; 209  : 	}
; 210  : 
; 211  : 	memcpychk(&obj_data.last_repair, stream, sizeof(CampaignTime), rem);	

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 184				; 000000b8H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 212  : 	if (gCampDataVersion > 1) {

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 1	; gCampDataVersion
	jle	SHORT $LN21@ObjectiveC

; 213  : 		memcpychk(&obj_data.obj_flags, stream, sizeof(ulong), rem);		

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 214  : 	}
; 215  : 	else {

	jmp	SHORT $LN20@ObjectiveC
$LN21@ObjectiveC:

; 216  : 		short		temp;
; 217  : 		memcpychk(&temp, stream, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _temp$11[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 218  : 		obj_data.obj_flags = temp;

	movsx	eax, WORD PTR _temp$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], eax
$LN20@ObjectiveC:

; 219  : 	}
; 220  : 	memcpychk(&obj_data.supply, stream, sizeof(uchar), rem);				

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 221  : 	memcpychk(&obj_data.fuel, stream, sizeof(uchar), rem);					

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 197				; 000000c5H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 222  : 	memcpychk(&obj_data.losses, stream, sizeof(uchar), rem);				

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 198				; 000000c6H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 223  : 	memcpychk(&size, stream, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 224  : 	nsize = (uchar)(((static_data.class_data->Features*2)+7)/8);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movzx	ecx, BYTE PTR [eax+50]
	lea	eax, DWORD PTR [ecx+ecx+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	BYTE PTR _nsize$[ebp], al

; 225  : #ifdef USE_SH_POOLS
; 226  : 	obj_data.fstatus = (uchar *)MemAllocPtr(gObjMemPool, sizeof(uchar)*nsize, 0 );
; 227  : #else
; 228  : 	obj_data.fstatus = new uchar[nsize];

	movzx	edx, BYTE PTR _nsize$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+204], ecx

; 229  : #endif
; 230  : 	if (nsize == size) {

	movzx	edx, BYTE PTR _nsize$[ebp]
	movzx	eax, BYTE PTR _size$[ebp]
	cmp	edx, eax
	jne	SHORT $LN19@ObjectiveC

; 231  : 		// Newer class same size
; 232  : 		memcpychk(obj_data.fstatus, stream, size, rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
	jmp	$LN18@ObjectiveC
$LN19@ObjectiveC:

; 233  : 	}
; 234  : 	else if (nsize > size) {

	movzx	eax, BYTE PTR _nsize$[ebp]
	movzx	ecx, BYTE PTR _size$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN17@ObjectiveC

; 235  : 		// Newer class data is larger - copy what we have, other is zeroed
; 236  : 		memset(obj_data.fstatus, 0, nsize);

	movzx	edx, BYTE PTR _nsize$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 237  : 		memcpychk(obj_data.fstatus, stream, size, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	movzx	eax, BYTE PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 238  : 	}
; 239  : 	else {

	jmp	SHORT $LN18@ObjectiveC
$LN17@ObjectiveC:

; 240  : 		// Newer class data is smaller - copy enough to fill, increment pointer correctly
; 241  : 		//sfr: yeah, helluva hack... correcting, dont CHANGE
; 242  : 		memcpychk(obj_data.fstatus, stream, nsize, rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _nsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 243  : 		//we skip next bytes because of the way they made this, which is stupid(check orignal source)
; 244  : 		*stream += (size - nsize);

	movzx	eax, BYTE PTR _size$[ebp]
	movzx	ecx, BYTE PTR _nsize$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _stream$[ebp]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 245  : 		rem[0] -= (size - nsize);

	mov	edx, 4
	imul	edx, 0
	movzx	eax, BYTE PTR _size$[ebp]
	movzx	ecx, BYTE PTR _nsize$[ebp]
	sub	eax, ecx
	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	sub	edx, eax
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [ecx+eax], edx
$LN18@ObjectiveC:

; 246  : 	}
; 247  : 	memcpychk(&obj_data.priority, stream, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 248  : 	obj_data.status = 100; // JPO init

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+199], 100			; 00000064H

; 249  : 
; 250  : 	memcpychk(&static_data.nameid, stream, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 251  : 	memcpychk(&static_data.parent, stream, sizeof(VU_ID), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 216				; 000000d8H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 252  : #ifdef DEBUG
; 253  : 	static_data.parent.num_ &= 0x0000ffff;
; 254  : #endif
; 255  : 	memcpychk(&static_data.first_owner, stream, sizeof(Control), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 224				; 000000e0H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 256  : 	memcpychk(&static_data.links, stream, sizeof(uchar), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 225				; 000000e1H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 257  : 	if (static_data.links){

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	test	ecx, ecx
	je	SHORT $LN15@ObjectiveC

; 258  : #ifdef USE_SH_POOLS
; 259  : 		link_data = (CampObjectiveLinkDataType *)MemAllocPtr(gObjMemPool, sizeof(CampObjectiveLinkDataType)*static_data.links, 0 );
; 260  : #else
; 261  : 		link_data = new CampObjectiveLinkDataType[static_data.links];

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+225]
	mov	DWORD PTR $T9[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN25@ObjectiveC
	push	OFFSET ??0CampObjectiveLinkDataType@@QAE@XZ
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T10[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR tv294[ebp], edx
	jmp	SHORT $LN26@ObjectiveC
$LN25@ObjectiveC:
	mov	DWORD PTR tv294[ebp], 0
$LN26@ObjectiveC:
	mov	eax, DWORD PTR tv294[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [ecx+236], edx

; 262  : #endif
; 263  : 	}
; 264  : 	else{

	jmp	SHORT $LN14@ObjectiveC
$LN15@ObjectiveC:

; 265  : 		link_data = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 0
$LN14@ObjectiveC:

; 266  : 	}
; 267  : 	
; 268  : 	for (i=0; i<static_data.links; i++)	{

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $LN13@ObjectiveC
$LN12@ObjectiveC:
	mov	cl, BYTE PTR _i$[ebp]
	add	cl, 1
	mov	BYTE PTR _i$[ebp], cl
$LN13@ObjectiveC:
	movzx	edx, BYTE PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	cmp	edx, ecx
	jge	SHORT $LN11@ObjectiveC

; 269  : 		memcpychk(&link_data[i], stream, sizeof(CampObjectiveLinkDataType), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+236]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 270  : #ifdef DEBUG
; 271  : 		link_data[i].id.num_ &= 0x0000ffff;
; 272  : #endif
; 273  : 	}

	jmp	SHORT $LN12@ObjectiveC
$LN11@ObjectiveC:

; 274  : 	// Read Radar data
; 275  : 	if (gCampDataVersion >= 20){

	cmp	DWORD PTR ?gCampDataVersion@@3HA, 20	; gCampDataVersion, 00000014H
	jl	SHORT $LN10@ObjectiveC

; 276  : 		memcpychk(&i, stream, sizeof(uchar), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _i$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 277  : 
; 278  : 		if (i) {

	movzx	eax, BYTE PTR _i$[ebp]
	test	eax, eax
	je	SHORT $LN9@ObjectiveC

; 279  : #ifdef USE_SH_POOLS
; 280  : 			static_data.radar_data = (RadarRangeClass *)MemAllocPtr(gObjMemPool, sizeof(RadarRangeClass), 0 );
; 281  : #else
; 282  : 			static_data.radar_data = new RadarRangeClass;

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+228], edx

; 283  : #endif
; 284  : 			memcpychk(static_data.radar_data, stream, sizeof(RadarRangeClass), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 285  : 		}
; 286  : 		else{

	jmp	SHORT $LN8@ObjectiveC
$LN9@ObjectiveC:

; 287  : 			static_data.radar_data = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], 0
$LN8@ObjectiveC:

; 288  : 		}
; 289  : 	}
; 290  : 	else {

	jmp	SHORT $LN7@ObjectiveC
$LN10@ObjectiveC:

; 291  : 		static_data.radar_data = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], 0
$LN7@ObjectiveC:

; 292  : 	}
; 293  : 	
; 294  : 	obj_data.aiscore = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+188], ax

; 295  : 	ResetObjectiveStatus();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectiveStatus@ObjectiveClass@@QAEXXZ ; ObjectiveClass::ResetObjectiveStatus

; 296  : 
; 297  : 	if ((GetType() == TYPE_AIRBASE) || (GetType() == TYPE_AIRSTRIP)) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN5@ObjectiveC
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 2
	jne	SHORT $LN6@ObjectiveC
$LN5@ObjectiveC:

; 298  : 		if (GetType() == TYPE_AIRBASE) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN4@ObjectiveC

; 299  : 			SetTacan(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTacan@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetTacan
$LN4@ObjectiveC:

; 300  : 		}
; 301  : 		brain = new ATCBrain(this);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN27@ObjectiveC
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0ATCBrain@@QAE@PAVObjectiveClass@@@Z	; ATCBrain::ATCBrain
	mov	DWORD PTR tv372[ebp], eax
	jmp	SHORT $LN28@ObjectiveC
$LN27@ObjectiveC:
	mov	DWORD PTR tv372[ebp], 0
$LN28@ObjectiveC:
	mov	eax, DWORD PTR tv372[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+240], edx

; 302  : 	}
; 303  : 	else {

	jmp	SHORT $LN3@ObjectiveC
$LN6@ObjectiveC:

; 304  : 		brain = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0
$LN3@ObjectiveC:

; 305  : 	}
; 306  : 
; 307  : 	// Set the owner to the game master.
; 308  : 	if (!FalconLocalGame->IsLocal()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN29@ObjectiveC
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv388[ebp], eax
	jmp	SHORT $LN30@ObjectiveC
$LN29@ObjectiveC:
	mov	DWORD PTR tv388[ebp], 0
$LN30@ObjectiveC:
	mov	ecx, DWORD PTR tv388[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@ObjectiveC

; 309  : 		share_.ownerId_ = FalconLocalGame->OwnerId();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@ObjectiveC
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv415[ebp], eax
	jmp	SHORT $LN32@ObjectiveC
$LN31@ObjectiveC:
	mov	DWORD PTR tv415[ebp], 0
$LN32@ObjectiveC:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv415[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
	mov	DWORD PTR [ecx+24], eax
$LN2@ObjectiveC:

; 310  : 	}
; 311  : 
; 312  : 	if (!static_data.class_data->Features) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	movzx	ecx, BYTE PTR [eax+50]
	test	ecx, ecx
	jne	SHORT $LN23@ObjectiveC

; 313  : 		// Since there's nothing to do in this case, might as well mark us as awake and save the Sim time...
; 314  : 		SetAggregate(false);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAggregate@CampBaseClass@@QAEX_N@Z	; CampBaseClass::SetAggregate

; 315  : 		SetAwake(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAwake@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAwake
$LN23@ObjectiveC:

; 316  : 	}
; 317  : 
; 318  : #ifdef DEBUG
; 319  : 	// Clear out objectives owned by non-existant teams
; 320  : 	// KCK NOTE: This doesn't work in multi-player remote, as we often don't have teams at this point
; 321  : 	if (FalconLocalGame && FalconLocalGame->IsLocal()) {
; 322  : 		if (!TeamInfo[GetObjectiveOldown()])
; 323  : 			SetObjectiveOldown(GetOwner());
; 324  : 	}
; 325  : #endif
; 326  : 
; 327  : #ifdef DEBUG_COUNT
; 328  : 	gObjectiveCount++;
; 329  : 	myolist.AddObj(Id().num_);
; 330  : #endif
; 331  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0ObjectiveClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampBaseClass@@UAE@XZ		; CampBaseClass::~CampBaseClass
__unwindfunclet$??0ObjectiveClass@@QAE@PAPAEPAJ@Z$1:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$??0ObjectiveClass@@QAE@PAPAEPAJ@Z$2:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0ObjectiveClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectiveClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectiveClass@@QAE@PAPAEPAJ@Z ENDP			; ObjectiveClass::ObjectiveClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\objectiv.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 4
$T3 = -32						; size = 4
tv203 = -28						; size = 4
$T4 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_typeindex$ = 8						; size = 4
??0ObjectiveClass@@QAE@H@Z PROC				; ObjectiveClass::ObjectiveClass
; _this$ = ecx

; 135  : ObjectiveClass::ObjectiveClass (int typeindex) : CampBaseClass(typeindex, GetIdFromNamespace(ObjectiveNS)){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectiveClass@@QAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?ObjectiveNS@@3VIdNamespace@@A	; ObjectiveNS
	call	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z ; GetIdFromNamespace
	add	esp, 4
	push	eax
	movzx	eax, WORD PTR _typeindex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CampBaseClass@@QAE@GK@Z		; CampBaseClass::CampBaseClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectiveClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??0CampObjectiveStaticDataType@@QAE@XZ

; 136  : 	int			size;
; 137  : 
; 138  : 	dirty_objective = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+208], 0

; 139  : 	static_data.first_owner = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+224], 0

; 140  : 	static_data.nameid = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+212], cx

; 141  : 	static_data.class_data = (ObjClassDataType*)Falcon4ClassTable[typeindex - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	eax, DWORD PTR _typeindex$[ebp]
	sub	eax, 100				; 00000064H
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+eax+77]
	mov	DWORD PTR [ecx+232], eax

; 142  : 	static_data.links = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+225], 0

; 143  : 	static_data.radar_data = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], 0

; 144  : 	obj_data.priority = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+200], 10			; 0000000aH

; 145  : 	obj_data.status = 100;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+199], 100			; 00000064H

; 146  : 	obj_data.obj_flags = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], 0

; 147  : 	obj_data.fuel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+197], 0

; 148  : 	obj_data.supply = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+196], 0

; 149  : 	obj_data.losses = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+198], 0

; 150  : 	obj_data.last_repair = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+184], 0

; 151  : 	size = ((static_data.class_data->Features*2)+7)/8;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	movzx	eax, BYTE PTR [edx+50]
	lea	eax, DWORD PTR [eax+eax+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _size$[ebp], eax

; 152  : #ifdef USE_SH_POOLS
; 153  : 	obj_data.fstatus = (uchar *)MemAllocPtr(gObjMemPool, sizeof(uchar)*size, 0 );
; 154  : #else
; 155  : 	obj_data.fstatus = new uchar[size];

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+204], eax

; 156  : #endif
; 157  : 	memset(obj_data.fstatus,0,size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 158  : 	//	for (i=0; i<size; i++)
; 159  : 	//		obj_data.fstatus[i] = 0xFF;
; 160  : 
; 161  : 	link_data = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+236], 0

; 162  : 
; 163  : 	if (GetType() == TYPE_AIRBASE ||
; 164  : 					GetType() == TYPE_AIRSTRIP)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN3@ObjectiveC
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 2
	jne	SHORT $LN4@ObjectiveC
$LN3@ObjectiveC:

; 165  : 	{
; 166  : 
; 167  : 		if (GetType() == TYPE_AIRBASE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN2@ObjectiveC

; 168  : 		{
; 169  : 			SetTacan(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTacan@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetTacan
$LN2@ObjectiveC:

; 170  : 		}
; 171  : 		brain = new ATCBrain(this);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN7@ObjectiveC
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0ATCBrain@@QAE@PAVObjectiveClass@@@Z	; ATCBrain::ATCBrain
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN8@ObjectiveC
$LN7@ObjectiveC:
	mov	DWORD PTR tv203[ebp], 0
$LN8@ObjectiveC:
	mov	eax, DWORD PTR tv203[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+240], edx

; 172  : 	}
; 173  : 	else

	jmp	SHORT $LN5@ObjectiveC
$LN4@ObjectiveC:

; 174  : 	{
; 175  : 		brain = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0
$LN5@ObjectiveC:

; 176  : 	}
; 177  : #ifdef DEBUG_COUNT
; 178  : 	myolist.AddObj(Id().num_);
; 179  : 	gObjectiveCount++;
; 180  : #endif
; 181  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0ObjectiveClass@@QAE@H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CampBaseClass@@UAE@XZ		; CampBaseClass::~CampBaseClass
__unwindfunclet$??0ObjectiveClass@@QAE@H@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0ObjectiveClass@@QAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectiveClass@@QAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectiveClass@@QAE@H@Z ENDP				; ObjectiveClass::ObjectiveClass
; Function compile flags: /Odtp
;	COMDAT ??0CampObjectiveLinkDataType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CampObjectiveLinkDataType@@QAE@XZ PROC		; CampObjectiveLinkDataType::CampObjectiveLinkDataType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CampObjectiveLinkDataType@@QAE@XZ ENDP		; CampObjectiveLinkDataType::CampObjectiveLinkDataType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0CampObjectiveStaticDataType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CampObjectiveStaticDataType@@QAE@XZ PROC		; CampObjectiveStaticDataType::CampObjectiveStaticDataType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CampObjectiveStaticDataType@@QAE@XZ ENDP		; CampObjectiveStaticDataType::CampObjectiveStaticDataType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\cmpradar.h
;	COMDAT ?GetArcAngle@RadarRangeClass@@QAEXHPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_anum$ = 8						; size = 4
_a1$ = 12						; size = 4
_a2$ = 16						; size = 4
?GetArcAngle@RadarRangeClass@@QAEXHPAM0@Z PROC		; RadarRangeClass::GetArcAngle, COMDAT
; _this$ = ecx

; 27   : 		void GetArcAngle (int anum, float* a1, float *a2)	{ *a1 = anum * (360/NUM_RADAR_ARCS) * DTR;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _anum$[ebp]
	imul	eax, 45					; 0000002dH
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	ecx, DWORD PTR _a1$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 28   : 															  *a2 = (anum+1) * (360/NUM_RADAR_ARCS) * DTR; };

	mov	edx, DWORD PTR _anum$[ebp]
	add	edx, 1
	imul	edx, 45					; 0000002dH
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _a2$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetArcAngle@RadarRangeClass@@QAEXHPAM0@Z ENDP		; RadarRangeClass::GetArcAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\cmpradar.h
;	COMDAT ?GetArcRange@RadarRangeClass@@QAEMH@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_anum$ = 8						; size = 4
?GetArcRange@RadarRangeClass@@QAEMH@Z PROC		; RadarRangeClass::GetArcRange, COMDAT
; _this$ = ecx

; 24   : 		float GetArcRange (int anum)						{ return detect_ratio[anum] != 0.0f ? ALT_FOR_RANGE_DETERMINATION/detect_ratio[anum] : 0.0f; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _anum$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@GetArcRang
	mov	edx, DWORD PTR _anum$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@451c4000
	divss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv72[ebp], xmm0
	jmp	SHORT $LN4@GetArcRang
$LN3@GetArcRang:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv72[ebp], xmm0
$LN4@GetArcRang:
	fld	DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetArcRange@RadarRangeClass@@QAEMH@Z ENDP		; RadarRangeClass::GetArcRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\cmpradar.h
;	COMDAT ?GetArcRatio@RadarRangeClass@@QAEMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_anum$ = 8						; size = 4
?GetArcRatio@RadarRangeClass@@QAEMH@Z PROC		; RadarRangeClass::GetArcRatio, COMDAT
; _this$ = ecx

; 21   : 		float GetArcRatio (int anum)						{ return detect_ratio[anum]; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _anum$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax*4]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetArcRatio@RadarRangeClass@@QAEMH@Z ENDP		; RadarRangeClass::GetArcRatio
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\cmpradar.h
;	COMDAT ?GetNumberOfArcs@RadarRangeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumberOfArcs@RadarRangeClass@@QAEHXZ PROC		; RadarRangeClass::GetNumberOfArcs, COMDAT
; _this$ = ecx

; 20   : 		int GetNumberOfArcs (void)							{ return NUM_RADAR_ARCS; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfArcs@RadarRangeClass@@QAEHXZ ENDP		; RadarRangeClass::GetNumberOfArcs
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GATCBrain@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GATCBrain@@QAEPAXI@Z PROC				; ATCBrain::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ATCBrain@@QAE@XZ			; ATCBrain::~ATCBrain
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GATCBrain@@QAEPAXI@Z ENDP				; ATCBrain::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ PROC		; UnitClass::GetTargetID, COMDAT
; _this$ = ecx

; 367  : 	VU_ID GetTargetID (void)						{ return target_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR [eax+216]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ ENDP		; UnitClass::GetTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\cmpclass.h
;	COMDAT ?IsOnline@CampaignClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOnline@CampaignClass@@QAEHXZ PROC			; CampaignClass::IsOnline, COMDAT
; _this$ = ecx

; 181  : 	int IsOnline (void)										{ return Flags & CAMP_ONLINE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	and	eax, 512				; 00000200H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOnline@CampaignClass@@QAEHXZ ENDP			; CampaignClass::IsOnline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampLeaveCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampLeaveCriticalSection@@YAXXZ PROC			; CampLeaveCriticalSection, COMDAT

; 51   : inline void CampLeaveCriticalSection(){ F4LeaveCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampLeaveCriticalSection@@YAXXZ ENDP			; CampLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampEnterCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampEnterCriticalSection@@YAXXZ PROC			; CampEnterCriticalSection, COMDAT

; 50   : inline void CampEnterCriticalSection(){ F4EnterCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampEnterCriticalSection@@YAXXZ ENDP			; CampEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0SimInitDataClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SimInitDataClass@@QAE@XZ PROC			; SimInitDataClass::SimInitDataClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SimInitDataClass@@QAE@XZ ENDP			; SimInitDataClass::SimInitDataClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?HasDelta@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasDelta@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::HasDelta, COMDAT
; _this$ = ecx

; 284  : 	int HasDelta (void)							{	return local_flags & CBC_HAS_DELTA; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?HasDelta@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::HasDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z PROC	; CampBaseClass::HasEntity, COMDAT
; _this$ = ecx

; 281  : 	virtual int HasEntity(VuEntity *e) const    {   

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 		return ((components && (components->Find(e) != NULL)) || (this == e)); 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN3@HasEntity
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z ; VuCollection::Find
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	je	SHORT $LN4@HasEntity
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN5@HasEntity
$LN4@HasEntity:
	mov	DWORD PTR tv81[ebp], 1
$LN5@HasEntity:
	mov	eax, DWORD PTR tv81[ebp]

; 283  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z ENDP	; CampBaseClass::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?InSimLists@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InSimLists@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::InSimLists, COMDAT
; _this$ = ecx

; 275  : 	int InSimLists (void)						{	return local_flags & CBC_IN_SIM_LIST; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?InSimLists@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::InSimLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAwake@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 273  : 	int IsAwake (void)							{	return local_flags & CBC_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsEmitting@CampBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@CampBaseClass@@UAEHXZ PROC			; CampBaseClass::IsEmitting, COMDAT
; _this$ = ecx

; 269  : 	virtual int IsEmitting (void)				{	return base_flags & CBC_EMITTING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+150]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@CampBaseClass@@UAEHXZ ENDP			; CampBaseClass::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsCampBase@CampBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@CampBaseClass@@UAE_NXZ PROC			; CampBaseClass::IsCampBase, COMDAT
; _this$ = ecx

; 268  : 	virtual bool IsCampBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@CampBaseClass@@UAE_NXZ ENDP			; CampBaseClass::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetMissilesFlying@CampBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMissilesFlying@CampBaseClass@@UAEHXZ PROC		; CampBaseClass::GetMissilesFlying, COMDAT
; _this$ = ecx

; 249  : 	virtual int GetMissilesFlying (void)				{ return 0; } // MLR 10/3/2004 - finishing what //me123 started

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMissilesFlying@CampBaseClass@@UAEHXZ ENDP		; CampBaseClass::GetMissilesFlying
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?StepRadar@CampBaseClass@@UAEHHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_d$ = 12						; size = 4
_range$ = 16						; size = 4
?StepRadar@CampBaseClass@@UAEHHHM@Z PROC		; CampBaseClass::StepRadar, COMDAT
; _this$ = ecx

; 240  : 	virtual int StepRadar (int t,int d, float range)								{	return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StepRadar@CampBaseClass@@UAEHHHM@Z ENDP		; CampBaseClass::StepRadar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCountry@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 239  : 	virtual uchar GetCountry (void)								{	return owner; }		// New FalcEnt friendly form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetTeam@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetTeam, COMDAT
; _this$ = ecx

; 238  : 	virtual uchar GetTeam (void)								{	return ::GetTeam(owner); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+154]
	push	ecx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCampID@CampBaseClass@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampID@CampBaseClass@@UAEFXZ PROC			; CampBaseClass::GetCampID, COMDAT
; _this$ = ecx

; 237  : 	virtual short GetCampID (void)								{	return camp_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+152]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampID@CampBaseClass@@UAEFXZ ENDP			; CampBaseClass::GetCampID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDivisionName@CampBaseClass@@UAEPADPADHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?GetDivisionName@CampBaseClass@@UAEPADPADHH@Z PROC	; CampBaseClass::GetDivisionName, COMDAT
; _this$ = ecx

; 226  : 	virtual _TCHAR* GetDivisionName (_TCHAR*, int, int)			{	return "None"; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_04OHJIHAFH@None?$AA@
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetDivisionName@CampBaseClass@@UAEPADPADHH@Z ENDP	; CampBaseClass::GetDivisionName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?CollectWeapons@CampBaseClass@@UAEHPAEW4MoveType@@QAFQAEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?CollectWeapons@CampBaseClass@@UAEHPAEW4MoveType@@QAFQAEH@Z PROC ; CampBaseClass::CollectWeapons, COMDAT
; _this$ = ecx

; 223  : 	virtual int CollectWeapons(uchar*, MoveType, short [], uchar [], int)	{	return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?CollectWeapons@CampBaseClass@@UAEHPAEW4MoveType@@QAFQAEH@Z ENDP ; CampBaseClass::CollectWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ PROC	; CampBaseClass::GetDeagOwner, COMDAT
; _this$ = ecx

; 142  : 	VU_ID GetDeagOwner() const					{	return deag_owner; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [eax+168]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDeagOwner@CampBaseClass@@QBE?AVVU_ID@@XZ ENDP	; CampBaseClass::GetDeagOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ PROC ; CampBaseClass::GetComponents, COMDAT
; _this$ = ecx

; 141  : 	TailInsertList *GetComponents() const		{	return components; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+160]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ENDP ; CampBaseClass::GetComponents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTargetBuilding@WayPointClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPTargetBuilding@WayPointClass@@QAEEXZ PROC		; WayPointClass::GetWPTargetBuilding, COMDAT
; _this$ = ecx

; 169  : 	uchar GetWPTargetBuilding (void)				{ return TargetBuilding; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+27]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPTargetBuilding@WayPointClass@@QAEEXZ ENDP		; WayPointClass::GetWPTargetBuilding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ PROC	; WayPointClass::GetWPTargetID, COMDAT
; _this$ = ecx

; 167  : 	VU_ID GetWPTargetID (void)						{ return TargetID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ENDP	; WayPointClass::GetWPTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetIRFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIRFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetIRFactor, COMDAT
; _this$ = ecx

; 164  : 	virtual float GetIRFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRCSFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRCSFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetRCSFactor, COMDAT
; _this$ = ecx

; 163  : 	virtual float GetRCSFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::HasAreaJamming, COMDAT
; _this$ = ecx

; 162  : 	virtual int HasAreaJamming (void)			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::HasAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::HasSPJamming, COMDAT
; _this$ = ecx

; 161  : 	virtual int HasSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::HasSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsAreaJamming, COMDAT
; _this$ = ecx

; 160  : 	virtual int IsAreaJamming (void)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSPJamming, COMDAT
; _this$ = ecx

; 159  : 	virtual int IsSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsExploding@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsExploding@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsExploding, COMDAT
; _this$ = ecx

; 143  : 	virtual int IsExploding (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMover@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMover, COMDAT
; _this$ = ecx

; 134  : 	virtual int IsMover (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSimBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsSimBase, COMDAT
; _this$ = ecx

; 98   : 	virtual bool IsSimBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC	; VuBin<VuEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP	; VuBin<VuEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ PROC		; VuEntity::VuState, COMDAT
; _this$ = ecx

; 153  : 	VU_MEM VuState() const    { return vuState_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ ENDP		; VuEntity::VuState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z PROC	; VuEntity::SetSendCreate, COMDAT
; _this$ = ecx

; 148  : 	void SetSendCreate(VU_SEND_TYPE sc) { share_.flags_.breakdown_.sendCreate_ = sc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sc$[ebp]
	and	eax, 3
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -193				; ffffff3fH
	or	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ENDP	; VuEntity::SetSendCreate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
