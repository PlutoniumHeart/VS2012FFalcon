; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPLIB\Find.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?MaxAltAtLevel@@3PAHA				; MaxAltAtLevel
PUBLIC	?MinAltAtLevel@@3PAHA				; MinAltAtLevel
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?OffsetToMiddle@@3MA				; OffsetToMiddle
PUBLIC	?LevelIncrement@@3PAHA				; LevelIncrement
PUBLIC	?IncrementMax@@3PAHA				; IncrementMax
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
_DATA	SEGMENT
?MaxAltAtLevel@@3PAHA DD 063H				; MaxAltAtLevel
	DD	01387H
	DD	04e1fH
	DD	09c3fH
	DD	01869fH
?MinAltAtLevel@@3PAHA DD 00H				; MinAltAtLevel
	DD	064H
	DD	01388H
	DD	04e20H
	DD	09c40H
?OffsetToMiddle@@3MA DD 044ccffaer		; 1639.99 ; OffsetToMiddle
?LevelIncrement@@3PAHA DD 00H				; LevelIncrement
	DD	00H
	DD	03e8H
	DD	07d0H
	DD	09c4H
?IncrementMax@@3PAHA DD 00H				; IncrementMax
	DD	01H
	DD	08H
	DD	08H
	DD	08H
_DATA	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
PUBLIC	_atanf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?GetUserData@ListElementClass@@QAEPAXXZ		; ListElementClass::GetUserData
PUBLIC	?GetNext@ListElementClass@@QAEPAV1@XZ		; ListElementClass::GetNext
PUBLIC	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
PUBLIC	?GetUnitByXY@@YAPAVUnitClass@@FF@Z		; GetUnitByXY
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z	; FindObjective
PUBLIC	?IsFrontline@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsFrontline
PUBLIC	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ	; ObjectiveClass::GetObjectiveStatus
PUBLIC	?Moving@UnitClass@@QBEHXZ			; UnitClass::Moving
PUBLIC	?DistSqu@@YAHFFFF@Z				; DistSqu
PUBLIC	?Distance@@YAMFFFF@Z				; Distance
PUBLIC	?Distance@@YAMMMMM@Z				; Distance
PUBLIC	?DistSqu@@YAMMMMM@Z				; DistSqu
PUBLIC	?DistanceToFront@@YAMFF@Z			; DistanceToFront
PUBLIC	?DirectionToFront@@YAMFF@Z			; DirectionToFront
PUBLIC	?DirectionTowardFriendly@@YAMFFH@Z		; DirectionTowardFriendly
PUBLIC	?GetBearingDeg@@YAHMMMM@Z			; GetBearingDeg
PUBLIC	?GetRangeFt@@YAHMMMM@Z				; GetRangeFt
PUBLIC	?PackXY@@YAPAXFF@Z				; PackXY
PUBLIC	?UnpackXY@@YAXPAXPAF1@Z				; UnpackXY
PUBLIC	?TimeToArrive@@YAKMM@Z				; TimeToArrive
PUBLIC	?Trim@@YAXPAF0@Z				; Trim
PUBLIC	?AngleTo@@YAMFFFF@Z				; AngleTo
PUBLIC	?DirectionTo@@YAEFFFF@Z				; DirectionTo
PUBLIC	?DirectionTo@@YAEFFFFFF@Z			; DirectionTo
PUBLIC	?OctantTo@@YAHFFFF@Z				; OctantTo
PUBLIC	?OctantTo@@YAHMMMM@Z				; OctantTo
PUBLIC	?TimeBetween@@YAKFFFFH@Z			; TimeBetween
PUBLIC	?TimeBetweenO@@YAKPAVObjectiveClass@@0H@Z	; TimeBetweenO
PUBLIC	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z		; FindUnit
PUBLIC	?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z	; FindEntity
PUBLIC	?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z	; GetEntityByCampID
PUBLIC	?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z ; FindNearestSupplySource
PUBLIC	?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z	; FindNearestEnemyUnit
PUBLIC	?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z	; FindNearestRealUnit
PUBLIC	?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z ; FindNearestUnit
PUBLIC	?FindNearestUnit@@YAPAVUnitClass@@FFPAM@Z	; FindNearestUnit
PUBLIC	?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z ; FindUnitByXY
PUBLIC	?GetUnitByXY@@YAPAVUnitClass@@FFH@Z		; GetUnitByXY
PUBLIC	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
PUBLIC	?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z ; FindNearestObjective
PUBLIC	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
PUBLIC	?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z	; FindNearestAirbase
PUBLIC	?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z	; FindNearbyAirbase
PUBLIC	?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z ; FindNearestFriendlyAirbase
PUBLIC	?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z ; FindNearestFriendlyRunway
PUBLIC	?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z ; FindNearestFriendlyObjective
PUBLIC	?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z ; FindNearestFriendlyObjective
PUBLIC	?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z ; FindNearestFriendlyPowerStation
PUBLIC	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z	; GetObjectiveByXY
PUBLIC	?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z	; AnalyseThreats
PUBLIC	?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z ; CollectThreatsFast
PUBLIC	?ScoreThreatFast@@YAHFFHE@Z			; ScoreThreatFast
PUBLIC	?GridToSim@@YAMF@Z				; GridToSim
PUBLIC	?SimToGrid@@YAFM@Z				; SimToGrid
PUBLIC	?ConvertGridToSim@@YAXFFPAUvector@@@Z		; ConvertGridToSim
PUBLIC	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z		; ConvertSimToGrid
PUBLIC	?AltToMoveType@@YA?AW4MoveType@@H@Z		; AltToMoveType
PUBLIC	?GetAltitudeLevel@@YAHH@Z			; GetAltitudeLevel
PUBLIC	?GetAltitudeFromLevel@@YAHHH@Z			; GetAltitudeFromLevel
PUBLIC	?TimeTo@@YAKFFFFH@Z				; TimeTo
PUBLIC	?FillDistanceList@@YAXPAVListClass@@EHH@Z	; FillDistanceList
PUBLIC	?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z ; FindPlayer
PUBLIC	?FindPlayer@@YAPAVFalconSessionEntity@@VVU_ID@@E@Z ; FindPlayer
PUBLIC	?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z ; FindPlayer
PUBLIC	?FindPlayer@@YAPAVFalconSessionEntity@@VVU_ID@@EE@Z ; FindPlayer
PUBLIC	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
PUBLIC	?GetAircraftNum@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetAircraftNum
PUBLIC	?GetPilotSlot@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetPilotSlot
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@399edbf9
PUBLIC	__real@3dcccccd
PUBLIC	__real@3ec48e8a
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3fa2f1aa
PUBLIC	__real@3ff33333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@3ffe666666666666
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@42652ee1
PUBLIC	__real@437a0000
PUBLIC	__real@4479c000
PUBLIC	__real@454cffae
PUBLIC	__real@4a5bba00
PUBLIC	__real@7f7fffff
PUBLIC	__real@8000000000000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atan:PROC
EXTRN	_memset:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Remove
EXTRN	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z:PROC	; VuCollection::Find
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	??1VuGridIterator@@UAE@XZ:PROC			; VuGridIterator::~VuGridIterator
EXTRN	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetFirst
EXTRN	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetNext
EXTRN	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z:PROC ; VuSessionsIterator::VuSessionsIterator
EXTRN	??1VuSessionsIterator@@UAE@XZ:PROC		; VuSessionsIterator::~VuSessionsIterator
EXTRN	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetFirst
EXTRN	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetNext
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z:PROC	; FalconPrivateList::FalconPrivateList
EXTRN	??1FalconPrivateList@@UAE@XZ:PROC		; FalconPrivateList::~FalconPrivateList
EXTRN	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z:PROC ; FalconPrivateList::ForcedInsert
EXTRN	?GetOwner@@YAEPAEFF@Z:PROC			; GetOwner
EXTRN	?InsertNewElementAtEnd@ListClass@@QAEXFPAXE@Z:PROC ; ListClass::InsertNewElementAtEnd
EXTRN	?Purge@ListClass@@QAEXXZ:PROC			; ListClass::Purge
EXTRN	?GetEntityClass@@YAFPAVVuEntity@@@Z:PROC	; GetEntityClass
EXTRN	?NumOperableRunways@ATCBrain@@QAEHXZ:PROC	; ATCBrain::NumOperableRunways
EXTRN	?IsSupplySource@ObjectiveClass@@QAEHXZ:PROC	; ObjectiveClass::IsSupplySource
EXTRN	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z:PROC	; ObjectiveClass::GetNeighbor
EXTRN	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetFirstObjective
EXTRN	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetNextObjective
EXTRN	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetFirstUnit
EXTRN	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetNextUnit
EXTRN	?GetTTRelations@@YAHEE@Z:PROC			; GetTTRelations
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z:PROC ; GetObjectiveMovementCost
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?Map_Max_X@@3FA:WORD				; Map_Max_X
EXTRN	?Map_Max_Y@@3FA:WORD				; Map_Max_Y
EXTRN	?MRX@@3HA:DWORD					; MRX
EXTRN	?VisualDetectionRange@@3PAHA:BYTE		; VisualDetectionRange
EXTRN	?CampSearch@@3PAEA:BYTE				; CampSearch
EXTRN	?AllObjFilter@@3VObjFilter@@A:QWORD		; AllObjFilter
EXTRN	?AllUnitList@@3PAVVuLinkedList@@A:DWORD		; AllUnitList
EXTRN	?AllObjList@@3PAVVuLinkedList@@A:DWORD		; AllObjList
EXTRN	?AllCampList@@3PAVVuLinkedList@@A:DWORD		; AllCampList
EXTRN	?FrontList@@3PAVFalconPrivateList@@A:DWORD	; FrontList
EXTRN	?AirDefenseList@@3PAVFalconPrivateList@@A:DWORD	; AirDefenseList
EXTRN	?EmitterList@@3PAVFalconPrivateList@@A:DWORD	; EmitterList
EXTRN	?ObjProxList@@3PAVVuGridTree@@A:DWORD		; ObjProxList
EXTRN	?RealUnitProxList@@3PAVVuGridTree@@A:DWORD	; RealUnitProxList
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?LOW_ALTITUDE_CUTOFF@@3FA:WORD			; LOW_ALTITUDE_CUTOFF
EXTRN	?MAX_GROUND_SEARCH@@3FA:WORD			; MAX_GROUND_SEARCH
EXTRN	?MAX_AIR_SEARCH@@3FA:WORD			; MAX_AIR_SEARCH
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@4a5bba00
CONST	SEGMENT
__real@4a5bba00 DD 04a5bba00r			; 3.6e+006
CONST	ENDS
;	COMDAT __real@454cffae
CONST	SEGMENT
__real@454cffae DD 0454cffaer			; 3279.98
CONST	ENDS
;	COMDAT __real@4479c000
CONST	SEGMENT
__real@4479c000 DD 04479c000r			; 999
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ffe666666666666
CONST	SEGMENT
__real@3ffe666666666666 DQ 03ffe666666666666r	; 1.9
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff33333
CONST	SEGMENT
__real@3ff33333 DD 03ff33333r			; 1.9
CONST	ENDS
;	COMDAT __real@3fa2f1aa
CONST	SEGMENT
__real@3fa2f1aa DD 03fa2f1aar			; 1.273
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3ec48e8a
CONST	SEGMENT
__real@3ec48e8a DD 03ec48e8ar			; 0.3839
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@399edbf9
CONST	SEGMENT
__real@399edbf9 DD 0399edbf9r			; 0.000303
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z$0
__unwindtable$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z$0
__unwindtable$?FillDistanceList@@YAXPAVListClass@@EHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillDistanceList@@YAXPAVListClass@@EHH@Z$0
__unwindtable$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z$0
__unwindtable$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z$0
__unwindtable$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z$0
__unwindtable$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z$0
__unwindtable$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z$0
__unwindtable$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z$0
__unwindtable$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z$0
__unwindtable$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z$0
__unwindtable$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z$0
__unwindtable$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z$0
__unwindtable$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z$0
__unwindtable$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z$0
__unwindtable$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z$0
__unwindtable$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z$0
__unwindtable$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z$0
__unwindtable$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z$0
__unwindtable$?DirectionTowardFriendly@@YAMFFH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DirectionTowardFriendly@@YAMFFH@Z$0
__unwindtable$?DirectionToFront@@YAMFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DirectionToFront@@YAMFF@Z$0
__unwindtable$?DistanceToFront@@YAMFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DistanceToFront@@YAMFF@Z$0
__unwindtable$?GetUnitByXY@@YAPAVUnitClass@@FF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUnitByXY@@YAPAVUnitClass@@FF@Z$0
__unwindtable$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z$1
__unwindtable$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z$1
__ehfuncinfo$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FillDistanceList@@YAXPAVListClass@@EHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FillDistanceList@@YAXPAVListClass@@EHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DirectionTowardFriendly@@YAMFFH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DirectionTowardFriendly@@YAMFFH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DirectionToFront@@YAMFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DirectionToFront@@YAMFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DistanceToFront@@YAMFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DistanceToFront@@YAMFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetUnitByXY@@YAPAVUnitClass@@FF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUnitByXY@@YAPAVUnitClass@@FF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPilotSlot@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPilotSlot@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetPilotSlot, COMDAT
; _this$ = ecx

; 146  : 	uchar GetPilotSlot (void) const               { return pilotSlot; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+512]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPilotSlot@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetPilotSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetAircraftNum@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAircraftNum@FalconSessionEntity@@QBEEXZ PROC	; FalconSessionEntity::GetAircraftNum, COMDAT
; _this$ = ecx

; 145  : 	uchar GetAircraftNum (void) const             { return aircraftNum; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+511]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAircraftNum@FalconSessionEntity@@QBEEXZ ENDP	; FalconSessionEntity::GetAircraftNum
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ PROC ; FalconSessionEntity::GetPlayerFlightID, COMDAT
; _this$ = ecx

; 134  : 	VU_ID GetPlayerFlightID(void) const           { return playerFlight; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+460]
	mov	edx, DWORD PTR [eax+464]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ENDP ; FalconSessionEntity::GetPlayerFlightID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_flight$ = -4						; size = 4
_flightID$ = 8						; size = 8
_planeNum$ = 16						; size = 1
_pilotSlot$ = 20					; size = 1
?FindPlayer@@YAPAVFalconSessionEntity@@VVU_ID@@EE@Z PROC ; FindPlayer

; 1382 : FalconSessionEntity* FindPlayer(VU_ID flightID, uchar planeNum, uchar pilotSlot){

	push	ebp
	mov	ebp, esp
	push	ecx

; 1383 : 	Flight flight = (Flight) vuDatabase->Find(flightID);

	mov	eax, DWORD PTR _flightID$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _flightID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$[ebp], eax

; 1384 : 	return FindPlayer(flight, planeNum, pilotSlot);

	movzx	edx, BYTE PTR _pilotSlot$[ebp]
	push	edx
	movzx	eax, BYTE PTR _planeNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z ; FindPlayer
	add	esp, 12					; 0000000cH

; 1385 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindPlayer@@YAPAVFalconSessionEntity@@VVU_ID@@EE@Z ENDP ; FindPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_sessionWalker$2 = -52					; size = 12
$T3 = -40						; size = 8
$T4 = -32						; size = 8
$T5 = -24						; size = 4
tv82 = -20						; size = 4
_curSession$6 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
_planeNum$ = 12						; size = 1
_pilotSlot$ = 16					; size = 1
?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z PROC ; FindPlayer

; 1362 : FalconSessionEntity* FindPlayer(Flight flight, uchar planeNum, uchar pilotSlot){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1363 : 	if(flight){

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN4@FindPlayer

; 1364 : 		VuSessionsIterator	sessionWalker(FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@FindPlayer
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@FindPlayer
$LN7@FindPlayer:
	mov	DWORD PTR tv82[ebp], 0
$LN8@FindPlayer:
	mov	ecx, DWORD PTR tv82[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z ; VuSessionsIterator::VuSessionsIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1365 : 		FalconSessionEntity *curSession;
; 1366 : 
; 1367 : 		curSession = (FalconSessionEntity*)sessionWalker.GetFirst();

	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetFirst
	mov	DWORD PTR _curSession$6[ebp], eax
$LN3@FindPlayer:

; 1368 : 		while (curSession){

	cmp	DWORD PTR _curSession$6[ebp], 0
	je	SHORT $LN2@FindPlayer

; 1369 : 			if (
; 1370 : 				curSession->GetPlayerFlightID() == flight->Id() &&
; 1371 : 				curSession->GetAircraftNum() == planeNum && 
; 1372 : 				curSession->GetPilotSlot() == pilotSlot
; 1373 : 			){

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _curSession$6[ebp]
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FindPlayer
	mov	ecx, DWORD PTR _curSession$6[ebp]
	call	?GetAircraftNum@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetAircraftNum
	movzx	edx, al
	movzx	eax, BYTE PTR _planeNum$[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@FindPlayer
	mov	ecx, DWORD PTR _curSession$6[ebp]
	call	?GetPilotSlot@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetPilotSlot
	movzx	ecx, al
	movzx	edx, BYTE PTR _pilotSlot$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1@FindPlayer

; 1374 : 				return (curSession);

	mov	eax, DWORD PTR _curSession$6[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
	mov	eax, DWORD PTR $T5[ebp]
	jmp	SHORT $LN5@FindPlayer
$LN1@FindPlayer:

; 1375 : 			}
; 1376 : 			curSession = (FalconSessionEntity*)sessionWalker.GetNext();

	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _curSession$6[ebp], eax

; 1377 : 		}

	jmp	SHORT $LN3@FindPlayer
$LN2@FindPlayer:

; 1378 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
$LN4@FindPlayer:

; 1379 : 	return(NULL);

	xor	eax, eax
$LN5@FindPlayer:

; 1380 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z$0:
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	jmp	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
__ehhandler$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@EE@Z ENDP ; FindPlayer
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_flight$ = -4						; size = 4
_flightID$ = 8						; size = 8
_planeNum$ = 16						; size = 1
?FindPlayer@@YAPAVFalconSessionEntity@@VVU_ID@@E@Z PROC	; FindPlayer

; 1357 : FalconSessionEntity* FindPlayer(VU_ID flightID, uchar planeNum){

	push	ebp
	mov	ebp, esp
	push	ecx

; 1358 : 	Flight flight = (Flight) vuDatabase->Find(flightID);

	mov	eax, DWORD PTR _flightID$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _flightID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$[ebp], eax

; 1359 : 	return FindPlayer(flight,planeNum);

	movzx	edx, BYTE PTR _planeNum$[ebp]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z ; FindPlayer
	add	esp, 8

; 1360 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindPlayer@@YAPAVFalconSessionEntity@@VVU_ID@@E@Z ENDP	; FindPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_sessionWalker$2 = -52					; size = 12
$T3 = -40						; size = 8
$T4 = -32						; size = 8
$T5 = -24						; size = 4
tv82 = -20						; size = 4
_curSession$6 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
_planeNum$ = 12						; size = 1
?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z PROC ; FindPlayer

; 1341 : FalconSessionEntity* FindPlayer(Flight flight, uchar planeNum){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1342 : 	if(flight){

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN4@FindPlayer

; 1343 : 		VuSessionsIterator	sessionWalker(FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@FindPlayer
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@FindPlayer
$LN7@FindPlayer:
	mov	DWORD PTR tv82[ebp], 0
$LN8@FindPlayer:
	mov	ecx, DWORD PTR tv82[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z ; VuSessionsIterator::VuSessionsIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1344 : 		FalconSessionEntity *curSession;
; 1345 : 
; 1346 : 		curSession = (FalconSessionEntity*)sessionWalker.GetFirst();

	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetFirst
	mov	DWORD PTR _curSession$6[ebp], eax
$LN3@FindPlayer:

; 1347 : 		while (curSession){

	cmp	DWORD PTR _curSession$6[ebp], 0
	je	SHORT $LN2@FindPlayer

; 1348 : 			if (curSession->GetPlayerFlightID() == flight->Id() && curSession->GetAircraftNum() == planeNum){

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _curSession$6[ebp]
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FindPlayer
	mov	ecx, DWORD PTR _curSession$6[ebp]
	call	?GetAircraftNum@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetAircraftNum
	movzx	edx, al
	movzx	eax, BYTE PTR _planeNum$[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@FindPlayer

; 1349 : 				return (curSession);

	mov	ecx, DWORD PTR _curSession$6[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
	mov	eax, DWORD PTR $T5[ebp]
	jmp	SHORT $LN5@FindPlayer
$LN1@FindPlayer:

; 1350 : 			}
; 1351 : 			curSession = (FalconSessionEntity*)sessionWalker.GetNext();

	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _curSession$6[ebp], eax

; 1352 : 		}

	jmp	SHORT $LN3@FindPlayer
$LN2@FindPlayer:

; 1353 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
$LN4@FindPlayer:

; 1354 : 	return(NULL);

	xor	eax, eax
$LN5@FindPlayer:

; 1355 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z$0:
	lea	ecx, DWORD PTR _sessionWalker$2[ebp]
	jmp	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
__ehhandler$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPlayer@@YAPAVFalconSessionEntity@@PAVFlightClass@@E@Z ENDP ; FindPlayer
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit1$ = -68						; size = 12
tv217 = -56						; size = 4
_loc$ = -52						; size = 4
_d$ = -48						; size = 4
_good$ = -44						; size = 4
_lp$ = -40						; size = 4
_o$ = -36						; size = 4
_lx$ = -32						; size = 2
_ly$ = -28						; size = 2
_x$ = -24						; size = 2
_y$ = -20						; size = 2
_own$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_list$ = 8						; size = 4
_who$ = 12						; size = 1
_i$ = 16						; size = 4
_j$ = 20						; size = 4
?FillDistanceList@@YAXPAVListClass@@EHH@Z PROC		; FillDistanceList

; 1297 : void FillDistanceList (List list, Team who, int  i, int j){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FillDistanceList@@YAXPAVListClass@@EHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1298 : 	Objective   o;
; 1299 : 	float       d;
; 1300 : 	int         good;
; 1301 : 	Team        own;
; 1302 : 	GridIndex   x,y,lx,ly;
; 1303 : 	void*			loc;
; 1304 : 	ListNode		lp;
; 1305 : 
; 1306 : 	list->Purge();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Purge@ListClass@@QAEXXZ		; ListClass::Purge

; 1307 : 
; 1308 : 	VuListIterator	myit1(AllObjList);

	mov	eax, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	eax
	lea	ecx, DWORD PTR _myit1$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1309 : 	o = GetFirstObjective(&myit1);

	lea	ecx, DWORD PTR _myit1$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN11@FillDistan:

; 1310 : 	while (o != NULL){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN10@FillDistan

; 1311 : 		good = 0;

	mov	DWORD PTR _good$[ebp], 0

; 1312 : 		o->GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1313 : 		own = o->GetTeam();

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _own$[ebp], al

; 1314 : 		if (GetTTRelations(who,own) == Allied || !own){

	movzx	ecx, BYTE PTR _own$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 1
	je	SHORT $LN8@FillDistan
	movzx	eax, BYTE PTR _own$[ebp]
	test	eax, eax
	jne	$LN3@FillDistan
$LN8@FillDistan:

; 1315 : 			if (o->IsFrontline())

	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	je	SHORT $LN7@FillDistan

; 1316 : 				d = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _d$[ebp], xmm0

; 1317 : 			else

	jmp	SHORT $LN6@FillDistan
$LN7@FillDistan:

; 1318 : 				d = DistanceToFront(x,y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?DistanceToFront@@YAMFF@Z		; DistanceToFront
	add	esp, 8
	fstp	DWORD PTR _d$[ebp]
$LN6@FillDistan:

; 1319 : 			if (d > (float)i && d < (float)j){

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR _d$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN3@FillDistan
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	$LN3@FillDistan

; 1320 : 				good = 1;

	mov	DWORD PTR _good$[ebp], 1

; 1321 : 				lp = list->GetFirstElement();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ; ListClass::GetFirstElement
	mov	DWORD PTR _lp$[ebp], eax
$LN4@FillDistan:

; 1322 : 				while (lp && good){

	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN3@FillDistan
	cmp	DWORD PTR _good$[ebp], 0
	je	SHORT $LN3@FillDistan

; 1323 : 					loc = lp->GetUserData();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetUserData@ListElementClass@@QAEPAXXZ	; ListElementClass::GetUserData
	mov	DWORD PTR _loc$[ebp], eax

; 1324 : 					UnpackXY (loc, &lx, &ly);

	lea	eax, DWORD PTR _ly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loc$[ebp]
	push	edx
	call	?UnpackXY@@YAXPAXPAF1@Z			; UnpackXY
	add	esp, 12					; 0000000cH

; 1325 : 					if (Distance(x,y,lx,ly) < i*1.5)

	movzx	eax, WORD PTR _ly$[ebp]
	push	eax
	movzx	ecx, WORD PTR _lx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv217[ebp]
	movss	xmm0, DWORD PTR tv217[ebp]
	cvtss2sd xmm0, xmm0
	cvtsi2sd xmm1, DWORD PTR _i$[ebp]
	mulsd	xmm1, QWORD PTR __real@3ff8000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN2@FillDistan

; 1326 : 						good = 0;

	mov	DWORD PTR _good$[ebp], 0
$LN2@FillDistan:

; 1327 : 					lp = lp->GetNext();

	mov	ecx, DWORD PTR _lp$[ebp]
	call	?GetNext@ListElementClass@@QAEPAV1@XZ	; ListElementClass::GetNext
	mov	DWORD PTR _lp$[ebp], eax

; 1328 : 				}

	jmp	SHORT $LN4@FillDistan
$LN3@FillDistan:

; 1329 : 			}
; 1330 : 		}
; 1331 : 
; 1332 : 		if (good){

	cmp	DWORD PTR _good$[ebp], 0
	je	SHORT $LN1@FillDistan

; 1333 : 			o->GetLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1334 : 			loc = PackXY(x,y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?PackXY@@YAPAXFF@Z			; PackXY
	add	esp, 8
	mov	DWORD PTR _loc$[ebp], eax

; 1335 : 			list->InsertNewElementAtEnd((short)FloatToInt32(DistanceToFront(x,y)), loc, 0);

	push	0
	mov	edx, DWORD PTR _loc$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?DistanceToFront@@YAMFF@Z		; DistanceToFront
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	call	?InsertNewElementAtEnd@ListClass@@QAEXFPAXE@Z ; ListClass::InsertNewElementAtEnd
$LN1@FillDistan:

; 1336 : 		}
; 1337 : 		o = GetNextObjective(&myit1);

	lea	edx, DWORD PTR _myit1$[ebp]
	push	edx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 1338 : 	}

	jmp	$LN11@FillDistan
$LN10@FillDistan:

; 1339 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit1$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FillDistanceList@@YAXPAVListClass@@EHH@Z$0:
	lea	ecx, DWORD PTR _myit1$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FillDistanceList@@YAXPAVListClass@@EHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FillDistanceList@@YAXPAVListClass@@EHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FillDistanceList@@YAXPAVListClass@@EHH@Z ENDP		; FillDistanceList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_tx$ = 16						; size = 2
_ty$ = 20						; size = 2
_speed$ = 24						; size = 4
?TimeTo@@YAKFFFFH@Z PROC				; TimeTo

; 437  : CampaignTime TimeTo (GridIndex x, GridIndex y, GridIndex tx, GridIndex ty, int speed){

	push	ebp
	mov	ebp, esp

; 438  : 	return TimeToArrive(Distance(x,y,tx,ty),(float)speed);

	cvtsi2ss xmm0, DWORD PTR _speed$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?TimeToArrive@@YAKMM@Z			; TimeToArrive
	add	esp, 8

; 439  : }

	pop	ebp
	ret	0
?TimeTo@@YAKFFFFH@Z ENDP				; TimeTo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_level$ = 8						; size = 4
_seed$ = 12						; size = 4
?GetAltitudeFromLevel@@YAHHH@Z PROC			; GetAltitudeFromLevel

; 410  : int GetAltitudeFromLevel(int level, int seed){

	push	ebp
	mov	ebp, esp

; 411  : 	// This is a no-brainer.
; 412  : 	if (!level){

	cmp	DWORD PTR _level$[ebp], 0
	jne	SHORT $LN2@GetAltitud

; 413  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@GetAltitud
$LN2@GetAltitud:

; 414  : 	}
; 415  : 
; 416  : 	// Just in case this was set already (ie: a mission replan)
; 417  : 	// Kinda hackish - I should really fix this eventually
; 418  : 	if (level >= ALT_LEVELS){

	cmp	DWORD PTR _level$[ebp], 5
	jl	SHORT $LN1@GetAltitud

; 419  : 		return level*GRIDZ_SCALE_FACTOR;

	mov	eax, DWORD PTR _level$[ebp]
	imul	eax, 10					; 0000000aH
	jmp	SHORT $LN3@GetAltitud
$LN1@GetAltitud:

; 420  : 	}
; 421  : 
; 422  : 	return MinAltAtLevel[level] + LevelIncrement[level]*(seed%IncrementMax[level]);

	mov	ecx, DWORD PTR _level$[ebp]
	mov	eax, DWORD PTR _seed$[ebp]
	cdq
	idiv	DWORD PTR ?IncrementMax@@3PAHA[ecx*4]
	mov	eax, DWORD PTR _level$[ebp]
	mov	ecx, edx
	imul	ecx, DWORD PTR ?LevelIncrement@@3PAHA[eax*4]
	mov	edx, DWORD PTR _level$[ebp]
	add	ecx, DWORD PTR ?MinAltAtLevel@@3PAHA[edx*4]
	mov	eax, ecx
$LN3@GetAltitud:

; 423  : }

	pop	ebp
	ret	0
?GetAltitudeFromLevel@@YAHHH@Z ENDP			; GetAltitudeFromLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
_alt$ = 8						; size = 4
?GetAltitudeLevel@@YAHH@Z PROC				; GetAltitudeLevel

; 399  : int GetAltitudeLevel (int alt){

	push	ebp
	mov	ebp, esp
	push	ecx

; 400  : 	int i;
; 401  : 	for (i=0; i<ALT_LEVELS; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetAltitud
$LN3@GetAltitud:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetAltitud:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN2@GetAltitud

; 402  : 		if (alt < MaxAltAtLevel[i]){

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _alt$[ebp]
	cmp	edx, DWORD PTR ?MaxAltAtLevel@@3PAHA[ecx*4]
	jge	SHORT $LN1@GetAltitud

; 403  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@GetAltitud
$LN1@GetAltitud:

; 404  : 		}
; 405  : 	}

	jmp	SHORT $LN3@GetAltitud
$LN2@GetAltitud:

; 406  : 	ShiWarning("Altitude To High");
; 407  : 	return ALT_LEVELS-1;

	mov	eax, 4
$LN5@GetAltitud:

; 408  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAltitudeLevel@@YAHH@Z ENDP				; GetAltitudeLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_alt$ = 8						; size = 4
?AltToMoveType@@YA?AW4MoveType@@H@Z PROC		; AltToMoveType

; 389  : MoveType AltToMoveType (int alt){

	push	ebp
	mov	ebp, esp

; 390  : 	if (alt >= LOW_ALTITUDE_CUTOFF){

	movsx	eax, WORD PTR ?LOW_ALTITUDE_CUTOFF@@3FA	; LOW_ALTITUDE_CUTOFF
	cmp	DWORD PTR _alt$[ebp], eax
	jl	SHORT $LN2@AltToMoveT

; 391  : 		return Air;

	mov	eax, 5
	jmp	SHORT $LN3@AltToMoveT
$LN2@AltToMoveT:

; 392  : 	}
; 393  : 	if (alt > 0){

	cmp	DWORD PTR _alt$[ebp], 0
	jle	SHORT $LN1@AltToMoveT

; 394  : 		return LowAir;

	mov	eax, 4
	jmp	SHORT $LN3@AltToMoveT
$LN1@AltToMoveT:

; 395  : 	}
; 396  : 	return Wheeled;				// Default movement type

	mov	eax, 2
$LN3@AltToMoveT:

; 397  : }

	pop	ebp
	ret	0
?AltToMoveType@@YA?AW4MoveType@@H@Z ENDP		; AltToMoveType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z PROC		; ConvertSimToGrid

; 384  : void ConvertSimToGrid(vector *pos, GridIndex *x, GridIndex *y){

	push	ebp
	mov	ebp, esp

; 385  : 	*x = SimToGrid(pos->y);

	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx], ax

; 386  : 	*y = SimToGrid(pos->x);

	mov	edx, DWORD PTR _pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, DWORD PTR _y$[ebp]
	mov	WORD PTR [ecx], ax

; 387  : }

	pop	ebp
	ret	0
?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z ENDP		; ConvertSimToGrid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_pos$ = 16						; size = 4
?ConvertGridToSim@@YAXFFPAUvector@@@Z PROC		; ConvertGridToSim

; 378  : void ConvertGridToSim(GridIndex x, GridIndex y, vector *pos){

	push	ebp
	mov	ebp, esp

; 379  : 	pos->x = GridToSim(y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	call	?GridToSim@@YAMF@Z			; GridToSim
	add	esp, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	fstp	DWORD PTR [ecx]

; 380  : 	pos->y = GridToSim(x);

	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GridToSim@@YAMF@Z			; GridToSim
	add	esp, 4
	mov	eax, DWORD PTR _pos$[ebp]
	fstp	DWORD PTR [eax+4]

; 381  : }

	pop	ebp
	ret	0
?ConvertGridToSim@@YAXFFPAUvector@@@Z ENDP		; ConvertGridToSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SimToGrid@@YAFM@Z PROC					; SimToGrid

; 367  : GridIndex SimToGrid(float x){

	push	ebp
	mov	ebp, esp

; 368  : 	// sfr: added fast float function
; 369  : 	return (GridIndex)FloatToInt32(x/GRID_SIZE_FT);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@454cffae
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4

; 370  : }

	pop	ebp
	ret	0
?SimToGrid@@YAFM@Z ENDP					; SimToGrid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
tv70 = -4						; size = 4
_x$ = 8							; size = 2
?GridToSim@@YAMF@Z PROC					; GridToSim

; 363  : float GridToSim(GridIndex x){

	push	ebp
	mov	ebp, esp
	push	ecx

; 364  : 	return (float)(x*GRID_SIZE_FT)+OffsetToMiddle;

	movsx	eax, WORD PTR _x$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@454cffae
	addss	xmm0, DWORD PTR ?OffsetToMiddle@@3MA
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 365  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GridToSim@@YAMF@Z ENDP					; GridToSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
tv94 = -20						; size = 4
_ix$ = -16						; size = 4
_i$ = -12						; size = 4
_score$ = -8						; size = 4
_own$ = -1						; size = 1
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_altlevel$ = 16						; size = 4
_who$ = 20						; size = 1
?ScoreThreatFast@@YAHFFHE@Z PROC			; ScoreThreatFast

; 1026 : int ScoreThreatFast(GridIndex X, GridIndex Y, int altlevel, Team who){

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi

; 1027 : 	int		i,ix,score = 0;

	mov	DWORD PTR _score$[ebp], 0

; 1028 : 	Team	own;
; 1029 : 
; 1030 : 	// Check vs territory ownership
; 1031 : 	own = GetOwner(TheCampaign.CampMapData,X,Y);

	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+296
	push	edx
	call	?GetOwner@@YAEPAEFF@Z			; GetOwner
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _own$[ebp], al

; 1032 : 	if (!GetRoE(who,own,ROE_AIR_OVERFLY)){

	push	7
	movzx	eax, BYTE PTR _own$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@ScoreThrea

; 1033 : 		return 32000;

	mov	eax, 32000				; 00007d00H
	jmp	$LN16@ScoreThrea
$LN15@ScoreThrea:

; 1034 : 	}
; 1035 : 	if (!TheCampaign.SamMapData || !TheCampaign.RadarMapData){

	cmp	DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300, 0
	je	SHORT $LN13@ScoreThrea
	cmp	DWORD PTR ?TheCampaign@@3VCampaignClass@@A+304, 0
	jne	SHORT $LN14@ScoreThrea
$LN13@ScoreThrea:

; 1036 : 		return 0;

	xor	eax, eax
	jmp	$LN16@ScoreThrea
$LN14@ScoreThrea:

; 1037 : 	}
; 1038 : 
; 1039 : 	// Find our indexes
; 1040 : 	i = (Y/MAP_RATIO)*MRX + (X/MAP_RATIO);

	movsx	eax, WORD PTR _Y$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, eax
	imul	ecx, DWORD PTR ?MRX@@3HA		; MRX
	movsx	eax, WORD PTR _X$[ebp]
	cdq
	mov	esi, 6
	idiv	esi
	add	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx

; 1041 : 	if (i < 0 || i > TheCampaign.SamMapSize){

	js	SHORT $LN11@ScoreThrea
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+288
	jle	SHORT $LN12@ScoreThrea
$LN11@ScoreThrea:

; 1042 : 		return 100;			// Off the map

	mov	eax, 100				; 00000064H
	jmp	$LN16@ScoreThrea
$LN12@ScoreThrea:

; 1043 : 	}
; 1044 : 	if (who == FalconLocalSession->GetTeam()){

	movzx	esi, BYTE PTR _who$[ebp]
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN10@ScoreThrea

; 1045 : 		ix = 4;

	mov	DWORD PTR _ix$[ebp], 4

; 1046 : 	}
; 1047 : 	else {

	jmp	SHORT $LN9@ScoreThrea
$LN10@ScoreThrea:

; 1048 : 		ix = 0;

	mov	DWORD PTR _ix$[ebp], 0
$LN9@ScoreThrea:

; 1049 : 	}
; 1050 : 	
; 1051 : 	// Now check vs threat at each altitude level
; 1052 : 	switch (altlevel){

	mov	ecx, DWORD PTR _altlevel$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	cmp	DWORD PTR tv94[ebp], 4
	ja	$LN2@ScoreThrea
	mov	edx, DWORD PTR tv94[ebp]
	jmp	DWORD PTR $LN18@ScoreThrea[edx*4]
$LN6@ScoreThrea:

; 1053 : 		case GroundAltitude:
; 1054 : 			return 0;

	xor	eax, eax
	jmp	$LN16@ScoreThrea
$LN5@ScoreThrea:

; 1055 : 		case LowAltitude:
; 1056 : 			score = ((TheCampaign.SamMapData[i] >> ix) & 0x03) * 28;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _ix$[ebp]
	sar	edx, cl
	and	edx, 3
	imul	edx, 28					; 0000001cH
	mov	DWORD PTR _score$[ebp], edx

; 1057 : 			score += ((TheCampaign.SamMapData[i] >> (ix+2)) & 0x03) * 2;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _ix$[ebp]
	add	ecx, 2
	sar	edx, cl
	and	edx, 3
	mov	eax, DWORD PTR _score$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _score$[ebp], ecx

; 1058 : 			//score += ((TheCampaign.RadarMapData[i] >> ix) & 0x03) * 3;
; 1059 : 			if (own && own != 0xF && GetRoE(who,own,ROE_AIR_FIRE))

	movzx	edx, BYTE PTR _own$[ebp]
	test	edx, edx
	je	SHORT $LN4@ScoreThrea
	movzx	eax, BYTE PTR _own$[ebp]
	cmp	eax, 15					; 0000000fH
	je	SHORT $LN4@ScoreThrea
	push	5
	movzx	ecx, BYTE PTR _own$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@ScoreThrea

; 1060 : 				score += 10;		// 'General' threat for flying over enemy territory

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _score$[ebp], eax
$LN4@ScoreThrea:

; 1061 : 			break;

	jmp	SHORT $LN7@ScoreThrea
$LN3@ScoreThrea:

; 1062 : 		case MediumAltitude:
; 1063 : 			score = ((TheCampaign.SamMapData[i] >> ix) & 0x03) * 10;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _ix$[ebp]
	sar	edx, cl
	and	edx, 3
	imul	edx, 10					; 0000000aH
	mov	DWORD PTR _score$[ebp], edx

; 1064 : 			score += ((TheCampaign.SamMapData[i] >> (ix+2)) & 0x03) * 23;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _ix$[ebp]
	add	ecx, 2
	sar	edx, cl
	and	edx, 3
	imul	edx, 23					; 00000017H
	add	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], edx

; 1065 : 			//score += ((TheCampaign.RadarMapData[i] >> ix) & 0x03) * 1;
; 1066 : 			//score += ((TheCampaign.RadarMapData[i] >> (ix+2)) & 0x03) * 2;
; 1067 : 			break;

	jmp	SHORT $LN7@ScoreThrea
$LN2@ScoreThrea:

; 1068 : 		case HighAltitude:
; 1069 : 		default:
; 1070 : 			score = ((TheCampaign.SamMapData[i] >> (ix+2)) & 0x03) * 30;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _ix$[ebp]
	add	ecx, 2
	sar	edx, cl
	and	edx, 3
	imul	edx, 30					; 0000001eH
	mov	DWORD PTR _score$[ebp], edx

; 1071 : 			//score += ((TheCampaign.RadarMapData[i] >> (ix+2)) & 0x03) * 3;
; 1072 : 			break;

	jmp	SHORT $LN7@ScoreThrea
$LN1@ScoreThrea:

; 1073 : 		case VeryHighAltitude:
; 1074 : 			score = ((TheCampaign.SamMapData[i] >> (ix+2)) & 0x03) * 15;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+300
	add	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _ix$[ebp]
	add	ecx, 2
	sar	edx, cl
	and	edx, 3
	imul	edx, 15					; 0000000fH
	mov	DWORD PTR _score$[ebp], edx
$LN7@ScoreThrea:

; 1075 : 			//score += ((TheCampaign.RadarMapData[i] >> (ix+2)) & 0x03) * 3;
; 1076 : 			break;
; 1077 : 	}
; 1078 : 	return score;

	mov	eax, DWORD PTR _score$[ebp]
$LN16@ScoreThrea:

; 1079 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@ScoreThrea:
	DD	$LN6@ScoreThrea
	DD	$LN5@ScoreThrea
	DD	$LN3@ScoreThrea
	DD	$LN2@ScoreThrea
	DD	$LN1@ScoreThrea
?ScoreThreatFast@@YAHFFHE@Z ENDP			; ScoreThreatFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
$T2 = -116						; size = 4
$T3 = -112						; size = 4
tv267 = -108						; size = 4
$T4 = -104						; size = 4
$T5 = -100						; size = 4
tv95 = -96						; size = 4
$T6 = -92						; size = 4
tv139 = -88						; size = 4
_mt$ = -84						; size = 4
_x$ = -80						; size = 2
_y$ = -76						; size = 2
$T7 = -72						; size = 4
_myit$ = -68						; size = 4
_pass$ = -64						; size = 4
_retval$ = -60						; size = 4
_d$ = -56						; size = 4
_e$ = -52						; size = 4
_tteam$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_altlevel$ = 16						; size = 4
_who$ = 20						; size = 1
_flags$ = 24						; size = 4
_foundlist$ = 28					; size = 4
?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z PROC ; CollectThreatsFast

; 1226 : int CollectThreatsFast(GridIndex X, GridIndex Y, int altlevel, Team who, int flags, F4PFList foundlist){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1227 : 	ShiAssert(FALSE == F4IsBadReadPtr(foundlist, sizeof *foundlist));
; 1228 : 	if (F4IsBadReadPtr(foundlist, sizeof *foundlist)) // JB 010304 CTD

	push	24					; 00000018H
	mov	eax, DWORD PTR _foundlist$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN22@CollectThr

; 1229 : 		return 0; // JB 010304 CTD

	xor	eax, eax
	jmp	$LN23@CollectThr
$LN22@CollectThr:

; 1230 : 
; 1231 : 	Int32		d,retval=0,pass=0;

	mov	DWORD PTR _retval$[ebp], 0
	mov	DWORD PTR _pass$[ebp], 0

; 1232 : 	MoveType	mt;
; 1233 : 	GridIndex   x,y;
; 1234 : 	CampEntity	e;
; 1235 : 	int		tteam[NUM_TEAMS];
; 1236 : 	VuListIterator* myit;
; 1237 : 
; 1238 : 	if (altlevel < HighAltitude){

	cmp	DWORD PTR _altlevel$[ebp], 3
	jge	SHORT $LN21@CollectThr

; 1239 : 		mt = LowAir;

	mov	DWORD PTR _mt$[ebp], 4

; 1240 : 	}
; 1241 : 	else {

	jmp	SHORT $LN20@CollectThr
$LN21@CollectThr:

; 1242 : 		mt = Air;

	mov	DWORD PTR _mt$[ebp], 5
$LN20@CollectThr:

; 1243 : 	}
; 1244 : 
; 1245 : 	// Set up roe checks
; 1246 : 	for (d=0; d<NUM_TEAMS && TeamInfo[d]; d++){

	mov	DWORD PTR _d$[ebp], 0
	jmp	SHORT $LN19@CollectThr
$LN18@CollectThr:
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, 1
	mov	DWORD PTR _d$[ebp], edx
$LN19@CollectThr:
	cmp	DWORD PTR _d$[ebp], 8
	jge	SHORT $LN17@CollectThr
	mov	eax, DWORD PTR _d$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	je	SHORT $LN17@CollectThr

; 1247 : 		tteam[d] = GetRoE((uchar)d,who,ROE_AIR_ENGAGE);

	push	4
	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _d$[ebp]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _tteam$[ebp+ecx*4], eax

; 1248 : 	}

	jmp	SHORT $LN18@CollectThr
$LN17@CollectThr:

; 1249 : 
; 1250 : 	// Check lists
; 1251 : 	while (pass < 2){

	cmp	DWORD PTR _pass$[ebp], 2
	jge	$LN15@CollectThr

; 1252 : 		if (!pass){

	cmp	DWORD PTR _pass$[ebp], 0
	jne	SHORT $LN14@CollectThr

; 1253 : 			myit = new VuListIterator(AirDefenseList);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN25@CollectThr
	mov	edx, DWORD PTR ?AirDefenseList@@3PAVFalconPrivateList@@A ; AirDefenseList
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN26@CollectThr
$LN25@CollectThr:
	mov	DWORD PTR tv95[ebp], 0
$LN26@CollectThr:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _myit$[ebp], ecx

; 1254 : 		}
; 1255 : 		else{

	jmp	SHORT $LN13@CollectThr
$LN14@CollectThr:

; 1256 : 			myit = new VuListIterator(EmitterList);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN27@CollectThr
	mov	edx, DWORD PTR ?EmitterList@@3PAVFalconPrivateList@@A ; EmitterList
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN28@CollectThr
$LN27@CollectThr:
	mov	DWORD PTR tv139[ebp], 0
$LN28@CollectThr:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _myit$[ebp], ecx
$LN13@CollectThr:

; 1257 : 		}
; 1258 : 
; 1259 : 		for (e = (CampEntity) myit->GetFirst(); e; e = (CampEntity) myit->GetNext()){

	mov	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
	jmp	SHORT $LN12@CollectThr
$LN11@CollectThr:
	mov	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax
$LN12@CollectThr:
	cmp	DWORD PTR _e$[ebp], 0
	je	$LN10@CollectThr

; 1260 : 			if (e == NULL || e->GetTeam() < 0 || e->GetTeam() >= NUM_TEAMS){

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN8@CollectThr
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	test	eax, eax
	jl	SHORT $LN8@CollectThr
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	ecx, 8
	jl	SHORT $LN9@CollectThr
$LN8@CollectThr:

; 1261 : 				continue; // something bogus

	jmp	SHORT $LN11@CollectThr
$LN9@CollectThr:

; 1262 : 			}
; 1263 : 			if (tteam[e->GetTeam()] == ROE_NOT_ALLOWED){

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	DWORD PTR _tteam$[ebp+eax*4], 0
	jne	SHORT $LN7@CollectThr

; 1264 : 				// not enemy
; 1265 : 				continue;

	jmp	SHORT $LN11@CollectThr
$LN7@CollectThr:

; 1266 : 			}
; 1267 : 
; 1268 : 		    if (
; 1269 : 				(!e->IsUnit() || !((Unit)e)->Moving()) && 
; 1270 : #if VU_ALL_FILTERED
; 1271 : 				!foundlist->Find(e)
; 1272 : #else
; 1273 : 				!foundlist->Find(e->Id())
; 1274 : #endif
; 1275 : 			){

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN5@CollectThr
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	jne	$LN2@CollectThr
$LN5@CollectThr:
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _foundlist$[ebp]
	call	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z ; VuCollection::Find
	movzx	edx, al
	test	edx, edx
	jne	$LN2@CollectThr

; 1276 : 				e->GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1277 : 				d = FloatToInt32(Distance(X,Y,x,y));

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 1278 : 				if (e->GetAproxHitChance(mt,d) > 0){

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+396]
	call	edx
	test	eax, eax
	jle	SHORT $LN4@CollectThr

; 1279 : 					foundlist->ForcedInsert(e);

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _foundlist$[ebp]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert

; 1280 : 					retval |= NEED_SEAD;

	mov	ecx, DWORD PTR _retval$[ebp]
	or	ecx, 1
	mov	DWORD PTR _retval$[ebp], ecx
	jmp	SHORT $LN2@CollectThr
$LN4@CollectThr:

; 1281 : 				}
; 1282 : 				else if (!(flags & FIND_NODETECT) && e->GetDetectionRange(mt) > d){

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 8
	jne	SHORT $LN2@CollectThr
	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+416]
	call	eax
	cmp	eax, DWORD PTR _d$[ebp]
	jle	SHORT $LN2@CollectThr

; 1283 : 					foundlist->ForcedInsert(e);

	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _foundlist$[ebp]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert

; 1284 : 					retval |= NEED_ECM;

	mov	edx, DWORD PTR _retval$[ebp]
	or	edx, 2
	mov	DWORD PTR _retval$[ebp], edx
$LN2@CollectThr:

; 1285 : 				}
; 1286 : 		    }
; 1287 : 		}

	jmp	$LN11@CollectThr
$LN10@CollectThr:

; 1288 : 		delete myit;

	mov	eax, DWORD PTR _myit$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN29@CollectThr
	push	1
	mov	edx, DWORD PTR $T7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR tv267[ebp], eax
	jmp	SHORT $LN30@CollectThr
$LN29@CollectThr:
	mov	DWORD PTR tv267[ebp], 0
$LN30@CollectThr:

; 1289 : 		if (flags & FIND_NODETECT){

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8
	je	SHORT $LN1@CollectThr

; 1290 : 			pass = 10;		// Skip detector pass, essentially

	mov	DWORD PTR _pass$[ebp], 10		; 0000000aH
$LN1@CollectThr:

; 1291 : 		}
; 1292 : 		pass++;

	mov	ecx, DWORD PTR _pass$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pass$[ebp], ecx

; 1293 : 	}

	jmp	$LN17@CollectThr
$LN15@CollectThr:

; 1294 : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN23@CollectThr:

; 1295 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z$0:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CollectThreatsFast@@YAHFFHEHPAVFalconPrivateList@@@Z ENDP ; CollectThreatsFast
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -120						; size = 60
$T2 = -60						; size = 4
_x$ = -56						; size = 2
_y$ = -52						; size = 2
_da$ = -48						; size = 4
_threats$ = -44						; size = 4
_af$ = -40						; size = 4
_d$ = -36						; size = 4
_e$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_mt$ = 16						; size = 4
_alt$ = 20						; size = 4
_roe_check$ = 24					; size = 4
_who$ = 28						; size = 1
_flags$ = 32						; size = 4
?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z PROC		; AnalyseThreats

; 1081 : int AnalyseThreats(GridIndex X, GridIndex Y, MoveType mt, int alt, int roe_check, Team who, int flags){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1082 : 	Int32		d,da;
; 1083 : 	int			threats=0;

	mov	DWORD PTR _threats$[ebp], 0

; 1084 : 	float		af;
; 1085 : 	GridIndex   x,y;
; 1086 : 	CampEntity	e;
; 1087 : 
; 1088 : 	::vector p;
; 1089 : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 1090 : 
; 1091 : #ifdef VU_GRID_TREE_Y_MAJOR
; 1092 : 	VuGridIterator	myit(RealUnitProxList, p.y, p.x, (BIG_SCALAR)GridToSim(MAX_AIR_SEARCH));

	movzx	eax, WORD PTR ?MAX_AIR_SEARCH@@3FA	; MAX_AIR_SEARCH
	push	eax
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	ecx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1093 : #else
; 1094 : 	VuGridIterator	myit(RealUnitProxList, p.x, p.y, (BIG_SCALAR)GridToSim(MAX_AIR_SEARCH));
; 1095 : #endif
; 1096 : 
; 1097 : 	af = alt * 0.000303F * 3;	// Convert feet to km * 3 (weight altitude heavy)

	cvtsi2ss xmm0, DWORD PTR _alt$[ebp]
	mulss	xmm0, DWORD PTR __real@399edbf9
	mulss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _af$[ebp], xmm0

; 1098 : 	af = af*af;						// square it

	movss	xmm0, DWORD PTR _af$[ebp]
	mulss	xmm0, DWORD PTR _af$[ebp]
	movss	DWORD PTR _af$[ebp], xmm0

; 1099 : 	e = (CampEntity) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN18@AnalyseThr:

; 1100 : 	while (e){

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN13@AnalyseThr

; 1101 : 		e->GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1102 : 		d = da = FloatToInt32(Distance(X,Y,x,y));

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _da$[ebp], eax
	mov	edx, DWORD PTR _da$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 1103 : 
; 1104 : 		if (flags & FIND_CAUTIOUS){

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN12@AnalyseThr

; 1105 : 			d = da = FloatToInt32(0.8F * d);

	cvtsi2ss xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _da$[ebp], eax
	mov	ecx, DWORD PTR _da$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
$LN12@AnalyseThr:

; 1106 : 		}
; 1107 : 
; 1108 : 		if (e->GetDetectionRange(mt) > d && GetRoE(e->GetTeam(),who,roe_check)){

	mov	edx, DWORD PTR _mt$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+416]
	call	eax
	cmp	eax, DWORD PTR _d$[ebp]
	jle	$LN1@AnalyseThr
	mov	ecx, DWORD PTR _roe_check$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN1@AnalyseThr

; 1109 : 			if (
; 1110 : 				e->IsUnit() && !(flags & FIND_NOAIR && e->GetDomain() == DOMAIN_AIR) &&
; 1111 : 				!(flags & FIND_NOMOVERS && ((Unit)e)->Moving())
; 1112 : 			){

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	SHORT $LN10@AnalyseThr
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN9@AnalyseThr
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 2
	je	SHORT $LN10@AnalyseThr
$LN9@AnalyseThr:
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN8@AnalyseThr
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	jne	SHORT $LN10@AnalyseThr
$LN8@AnalyseThr:

; 1113 : 				d = d;		// placeholder. This unit is valid

	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _d$[ebp], eax
	jmp	SHORT $LN5@AnalyseThr
$LN10@AnalyseThr:

; 1114 : 			}
; 1115 : 			else if (e->IsObjective() && ((Objective)e)->GetObjectiveStatus() > 30){

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN6@AnalyseThr
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ; ObjectiveClass::GetObjectiveStatus
	movzx	ecx, al
	cmp	ecx, 30					; 0000001eH
	jle	SHORT $LN6@AnalyseThr

; 1116 : 				d = d;		// placeholder. This objective is valid

	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 1117 : 			}
; 1118 : 			else {

	jmp	SHORT $LN5@AnalyseThr
$LN6@AnalyseThr:

; 1119 : 				// Continue looking...
; 1120 : 				e = (CampEntity) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 1121 : 				continue;

	jmp	$LN18@AnalyseThr
$LN5@AnalyseThr:

; 1122 : 			}
; 1123 : 			
; 1124 : 			if (af > 1.0F){

	movss	xmm0, DWORD PTR _af$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN4@AnalyseThr

; 1125 : 				da = FloatToInt32((float)sqrt((float)(d*d) + af));

	mov	eax, DWORD PTR _d$[ebp]
	imul	eax, DWORD PTR _d$[ebp]
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _af$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _da$[ebp], eax
$LN4@AnalyseThr:

; 1126 : 			}
; 1127 : 
; 1128 : 			if (e->GetAproxCombatStrength(mt,da)){

	mov	ecx, DWORD PTR _da$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mt$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+404]
	call	eax
	test	eax, eax
	je	SHORT $LN3@AnalyseThr

; 1129 : 				threats += 4;

	mov	ecx, DWORD PTR _threats$[ebp]
	add	ecx, 4
	mov	DWORD PTR _threats$[ebp], ecx
	jmp	SHORT $LN1@AnalyseThr
$LN3@AnalyseThr:

; 1130 : 			}
; 1131 : 			else if (d > VisualDetectionRange[mt] && !(flags & FIND_NODETECT)){

	mov	edx, DWORD PTR _mt$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR ?VisualDetectionRange@@3PAHA[edx*4]
	jle	SHORT $LN1@AnalyseThr
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 8
	jne	SHORT $LN1@AnalyseThr

; 1132 : 				threats++;

	mov	edx, DWORD PTR _threats$[ebp]
	add	edx, 1
	mov	DWORD PTR _threats$[ebp], edx
$LN1@AnalyseThr:

; 1133 : 			}
; 1134 : 		}
; 1135 : 		e = (CampEntity) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 1136 : 	}

	jmp	$LN18@AnalyseThr
$LN13@AnalyseThr:

; 1137 : 	return threats;

	mov	eax, DWORD PTR _threats$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 1138 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AnalyseThreats@@YAHFFW4MoveType@@HHEH@Z ENDP		; AnalyseThreats
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -108						; size = 60
$T2 = -48						; size = 4
$T3 = -44						; size = 4
_x$ = -40						; size = 2
_y$ = -36						; size = 2
_o$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z PROC	; GetObjectiveByXY

; 1002 : Objective GetObjectiveByXY(GridIndex X, GridIndex Y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1003 : 	::vector p;
; 1004 : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 1005 : #ifdef VU_GRID_TREE_Y_MAJOR
; 1006 : 	VuGridIterator	myit(ObjProxList, p.y, p.x, (BIG_SCALAR)GridToSim(1));	

	push	1
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1007 : #else
; 1008 : 	VuGridIterator	myit(ObjProxList, p.x, p.y, (BIG_SCALAR)GridToSim(1));
; 1009 : #endif
; 1010 : 	Objective o;
; 1011 : 	GridIndex x, y;
; 1012 : 
; 1013 : 	o = (Objective) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN3@GetObjecti:

; 1014 : 	while (o != NULL){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN2@GetObjecti

; 1015 : 		o->GetLocation(&x, &y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1016 : 		if (x == X && y == Y){

	movsx	eax, WORD PTR _x$[ebp]
	movsx	ecx, WORD PTR _X$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@GetObjecti
	movsx	edx, WORD PTR _y$[ebp]
	movsx	eax, WORD PTR _Y$[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@GetObjecti

; 1017 : 			return o;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN4@GetObjecti
$LN1@GetObjecti:

; 1018 : 		}
; 1019 : 		o = (Objective) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 1020 : 	}

	jmp	SHORT $LN3@GetObjecti
$LN2@GetObjecti:

; 1021 : 	return NULL;

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]
$LN4@GetObjecti:

; 1022 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z ENDP	; GetObjectiveByXY
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -52						; size = 12
$T2 = -40						; size = 4
_bo$ = -36						; size = 4
_bd$ = -32						; size = 4
_d$ = -28						; size = 4
_o$ = -24						; size = 4
_tx$ = -20						; size = 2
_ty$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_l$ = 8							; size = 4
_who$ = 12						; size = 1
_x$ = 16						; size = 2
_y$ = 20						; size = 2
?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z PROC ; FindNearestFriendlyPowerStation

; 978  : Objective FindNearestFriendlyPowerStation(VuFilteredList* l, Team who, GridIndex x, GridIndex y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 979  :     Objective	o,bo=NULL;

	mov	DWORD PTR _bo$[ebp], 0

; 980  :     GridIndex	tx,ty;
; 981  :     Int32		d,bd=999;

	mov	DWORD PTR _bd$[ebp], 999		; 000003e7H

; 982  :     
; 983  : 	VuListIterator myit(l);

	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 984  :     for (o = GetFirstObjective(&myit); o; o = GetNextObjective(&myit)){

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
	jmp	SHORT $LN7@FindNeares
$LN6@FindNeares:
	lea	edx, DWORD PTR _myit$[ebp]
	push	edx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN7@FindNeares:
	cmp	DWORD PTR _o$[ebp], 0
	je	$LN5@FindNeares

; 985  : 		if (GetTTRelations(o->GetTeam(),who) <= Neutral){

	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 3
	jg	SHORT $LN1@FindNeares

; 986  : 			if (
; 987  : 				o->GetType () == TYPE_NUCLEAR ||
; 988  : 				o->GetType () == TYPE_POWERPLANT
; 989  : 			){

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 17					; 00000011H
	je	SHORT $LN2@FindNeares
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 20					; 00000014H
	jne	SHORT $LN1@FindNeares
$LN2@FindNeares:

; 990  : 				o->GetLocation(&tx,&ty);

	lea	ecx, DWORD PTR _ty$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 991  : 				d = FloatToInt32(Distance(x,y,tx,ty));

	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 992  : 				if (d < bd){

	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR _bd$[ebp]
	jge	SHORT $LN1@FindNeares

; 993  : 					bd = d;

	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _bd$[ebp], edx

; 994  : 					bo = o;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR _bo$[ebp], eax
$LN1@FindNeares:

; 995  : 				}
; 996  : 			}
; 997  : 		}
; 998  :     }

	jmp	$LN6@FindNeares
$LN5@FindNeares:

; 999  :     return bo;

	mov	ecx, DWORD PTR _bo$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]

; 1000 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestFriendlyPowerStation@@YAPAVObjectiveClass@@PAVVuLinkedList@@EFF@Z ENDP ; FindNearestFriendlyPowerStation
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -124						; size = 60
$T2 = -64						; size = 4
_bo$ = -60						; size = 4
_bd$ = -56						; size = 4
_d$ = -52						; size = 4
_ox$ = -48						; size = 2
_oy$ = -44						; size = 2
_tx$ = -40						; size = 2
_ty$ = -36						; size = 2
_o$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_who$ = 8						; size = 1
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_flags$ = 20						; size = 4
?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z PROC ; FindNearestFriendlyObjective

; 910  : Objective FindNearestFriendlyObjective(Team who, GridIndex *x, GridIndex *y, int flags){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 911  : 	Objective	o,bo=NULL;

	mov	DWORD PTR _bo$[ebp], 0

; 912  : 	GridIndex	ox,oy,tx,ty;
; 913  : 	Int32		d,bd=999;

	mov	DWORD PTR _bd$[ebp], 999		; 000003e7H

; 914  : 
; 915  : 	::vector p;
; 916  : 	ConvertGridToSim(*x, *y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 917  : 
; 918  : #ifdef VU_GRID_TREE_Y_MAJOR
; 919  : 	VuGridIterator	myit(ObjProxList, p.y, p.x, (BIG_SCALAR)GridToSim(MAX_GROUND_SEARCH));

	movzx	edx, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	push	edx
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 920  : #else
; 921  : 	VuGridIterator	myit(ObjProxList, p.x, p.y, (BIG_SCALAR)GridToSim(MAX_GROUND_SEARCH));
; 922  : #endif
; 923  : 
; 924  : 	ox = *x;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _ox$[ebp], dx

; 925  : 	oy = *y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _oy$[ebp], cx

; 926  : 	o = (Objective) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN9@FindNeares:

; 927  : 	while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN4@FindNeares

; 928  : 		if (GetTTRelations(o->GetTeam(),who) <= Neutral){

	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 3
	jg	$LN1@FindNeares

; 929  : 			if (flags & FF_SECONDLINE && o->IsFrontline()){

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 1
	je	SHORT $LN2@FindNeares
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	je	SHORT $LN2@FindNeares

; 930  : 				o = (Objective) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 931  : 				continue;

	jmp	SHORT $LN9@FindNeares
$LN2@FindNeares:

; 932  : 			}
; 933  : 			o->GetLocation(&tx,&ty);

	lea	eax, DWORD PTR _ty$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 934  : 			d = FloatToInt32(Distance(ox,oy,tx,ty));

	movzx	edx, WORD PTR _ty$[ebp]
	push	edx
	movzx	eax, WORD PTR _tx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _oy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ox$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 935  : 			if (d < bd){

	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR _bd$[ebp]
	jge	SHORT $LN1@FindNeares

; 936  : 				bd = d;

	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _bd$[ebp], ecx

; 937  : 				bo = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _bo$[ebp], edx

; 938  : 				*x = tx;

	mov	eax, DWORD PTR _x$[ebp]
	mov	cx, WORD PTR _tx$[ebp]
	mov	WORD PTR [eax], cx

; 939  : 				*y = ty;

	mov	edx, DWORD PTR _y$[ebp]
	mov	ax, WORD PTR _ty$[ebp]
	mov	WORD PTR [edx], ax
$LN1@FindNeares:

; 940  : 			}
; 941  : 		}
; 942  : 		o = (Objective) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 943  : 	}

	jmp	$LN9@FindNeares
$LN4@FindNeares:

; 944  : 	return bo;

	mov	ecx, DWORD PTR _bo$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 945  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@EPAF0H@Z ENDP ; FindNearestFriendlyObjective
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -60						; size = 12
$T2 = -48						; size = 4
_bo$ = -44						; size = 4
_bd$ = -40						; size = 4
_d$ = -36						; size = 4
_o$ = -32						; size = 4
_ox$ = -28						; size = 2
_oy$ = -24						; size = 2
_ty$ = -20						; size = 2
_tx$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_l$ = 8							; size = 4
_who$ = 12						; size = 1
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_flags$ = 24						; size = 4
?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z PROC ; FindNearestFriendlyObjective

; 948  : Objective FindNearestFriendlyObjective(VuFilteredList* l, Team who, GridIndex *x, GridIndex *y, int flags){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 949  : 	Objective	o, bo=NULL;

	mov	DWORD PTR _bo$[ebp], 0

; 950  : 	GridIndex	ox, oy, tx, ty;
; 951  : 	Int32		d, bd=999;

	mov	DWORD PTR _bd$[ebp], 999		; 000003e7H

; 952  : 	ox = *x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _ox$[ebp], cx

; 953  : 	oy = *y;

	mov	edx, DWORD PTR _y$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _oy$[ebp], ax

; 954  : 
; 955  : 	VuListIterator	myit(l);

	mov	ecx, DWORD PTR _l$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 956  : 	o = GetFirstObjective(&myit);

	lea	edx, DWORD PTR _myit$[ebp]
	push	edx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN9@FindNeares:

; 957  : 	while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN4@FindNeares

; 958  : 		if (GetTTRelations(o->GetTeam(),who) <= Neutral){

	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 3
	jg	$LN1@FindNeares

; 959  : 			if (flags & FF_SECONDLINE && o->IsFrontline()){

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 1
	je	SHORT $LN2@FindNeares
	mov	ecx, DWORD PTR _o$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	je	SHORT $LN2@FindNeares

; 960  : 				o = GetNextObjective(&myit);

	lea	eax, DWORD PTR _myit$[ebp]
	push	eax
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 961  : 				continue;

	jmp	SHORT $LN9@FindNeares
$LN2@FindNeares:

; 962  : 			}
; 963  : 			o->GetLocation(&tx,&ty);

	lea	ecx, DWORD PTR _ty$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 964  : 			d = FloatToInt32(Distance(ox,oy,tx,ty));

	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _oy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ox$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 965  : 			if (d < bd){

	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR _bd$[ebp]
	jge	SHORT $LN1@FindNeares

; 966  : 				bd = d;

	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _bd$[ebp], edx

; 967  : 				bo = o;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR _bo$[ebp], eax

; 968  : 				*x = tx;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	dx, WORD PTR _tx$[ebp]
	mov	WORD PTR [ecx], dx

; 969  : 				*y = ty;

	mov	eax, DWORD PTR _y$[ebp]
	mov	cx, WORD PTR _ty$[ebp]
	mov	WORD PTR [eax], cx
$LN1@FindNeares:

; 970  : 			}
; 971  : 		}
; 972  : 		o = GetNextObjective(&myit);

	lea	edx, DWORD PTR _myit$[ebp]
	push	edx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 973  : 	}

	jmp	$LN9@FindNeares
$LN4@FindNeares:

; 974  : 	return bo;

	mov	eax, DWORD PTR _bo$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]

; 975  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestFriendlyObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@EPAF1H@Z ENDP ; FindNearestFriendlyObjective
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -116						; size = 60
$T2 = -56						; size = 4
_n$ = -52						; size = 4
_d$ = -48						; size = 4
_nd$ = -44						; size = 4
_y$ = -40						; size = 2
_x$ = -36						; size = 2
_o$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_who$ = 8						; size = 1
_X$ = 12						; size = 2
_Y$ = 16						; size = 2
?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z PROC ; FindNearestFriendlyRunway

; 872  : Objective FindNearestFriendlyRunway(Team who, GridIndex X, GridIndex Y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 873  : 	::vector p;
; 874  : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 875  : 
; 876  : #ifdef VU_GRID_TREE_Y_MAJOR
; 877  : 	VuGridIterator	myit(ObjProxList, p.y, p.x, (BIG_SCALAR)GridToSim(100));

	push	100					; 00000064H
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 878  : #else
; 879  : 	VuGridIterator	myit(ObjProxList, p.x, p.y, (BIG_SCALAR)GridToSim(100));
; 880  : #endif
; 881  : 
; 882  : 	int         d,nd;
; 883  : 	Objective   o,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 884  : 	GridIndex   x,y;
; 885  : 	
; 886  : 	nd =  32800000; //100 km (in ft)

	mov	DWORD PTR _nd$[ebp], 32800000		; 01f47d00H

; 887  : 	o = (Objective) myit.GetFirst ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN6@FindNeares:

; 888  : 	
; 889  : 	while (o != NULL){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN5@FindNeares

; 890  : 		if (GetTTRelations(o->GetTeam(),who) <= Neutral){

	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 3
	jg	SHORT $LN1@FindNeares

; 891  : 			if(
; 892  : 				(o->GetType () == TYPE_AIRBASE) ||
; 893  : 				(o->GetType () == TYPE_AIRSTRIP)
; 894  : 			){

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	je	SHORT $LN2@FindNeares
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN1@FindNeares
$LN2@FindNeares:

; 895  : 				o->GetLocation (&x, &y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 896  : 				d = FloatToInt32(Distance (X, Y, x, y));

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 897  : 				if (d < nd){

	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR _nd$[ebp]
	jge	SHORT $LN1@FindNeares

; 898  : 					n = o;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 899  : 					nd = d;

	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _nd$[ebp], edx
$LN1@FindNeares:

; 900  : 				}
; 901  : 			}
; 902  : 		}
; 903  : 		o = (Objective) myit.GetNext ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 904  : 	}

	jmp	$LN6@FindNeares
$LN5@FindNeares:

; 905  : 	
; 906  : 	return n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 907  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z ENDP ; FindNearestFriendlyRunway
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -52						; size = 12
$T2 = -40						; size = 4
_n$ = -36						; size = 4
_nd$ = -32						; size = 4
_d$ = -28						; size = 4
_o$ = -24						; size = 4
_x$ = -20						; size = 2
_y$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_who$ = 8						; size = 1
_X$ = 12						; size = 2
_Y$ = 16						; size = 2
?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z PROC ; FindNearestFriendlyAirbase

; 844  : Objective FindNearestFriendlyAirbase (Team who, GridIndex X, GridIndex Y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 845  : 	int         d,nd;
; 846  : 	Objective   o,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 847  : 	GridIndex   x,y;
; 848  : 	
; 849  : 	nd =  9999; //100 km (in ft)

	mov	DWORD PTR _nd$[ebp], 9999		; 0000270fH

; 850  : 
; 851  : 	VuListIterator	myit(AllObjList);

	mov	eax, DWORD PTR ?AllObjList@@3PAVVuLinkedList@@A ; AllObjList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 852  : 	o = (Objective) myit.GetFirst ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN4@FindNeares:

; 853  : 	while (o != NULL){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN3@FindNeares

; 854  : 		if ( 
; 855  : 			(GetTTRelations(o->GetTeam(),who) <= Neutral) && 
; 856  : 			o->GetType () == TYPE_AIRBASE && 
; 857  : 			o->brain && o->brain->NumOperableRunways() // JB 010729 CTD
; 858  : 		){

	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 3
	jg	SHORT $LN1@FindNeares
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN1@FindNeares
	mov	edx, DWORD PTR _o$[ebp]
	cmp	DWORD PTR [edx+240], 0
	je	SHORT $LN1@FindNeares
	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	?NumOperableRunways@ATCBrain@@QAEHXZ	; ATCBrain::NumOperableRunways
	test	eax, eax
	je	SHORT $LN1@FindNeares

; 859  : 			o->GetLocation (&x, &y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 860  : 			d = FloatToInt32 (Distance (X, Y, x, y));

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	movzx	edx, WORD PTR _Y$[ebp]
	push	edx
	movzx	eax, WORD PTR _X$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 861  : 			if (d < nd){

	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR _nd$[ebp]
	jge	SHORT $LN1@FindNeares

; 862  : 				n = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 863  : 				nd = d;

	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _nd$[ebp], eax
$LN1@FindNeares:

; 864  : 			}
; 865  : 		}
; 866  : 		o = (Objective) myit.GetNext ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 867  : 	}

	jmp	$LN4@FindNeares
$LN3@FindNeares:

; 868  : 	
; 869  : 	return n;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]

; 870  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z ENDP ; FindNearestFriendlyAirbase
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -116						; size = 60
$T2 = -56						; size = 4
_n$ = -52						; size = 4
_d$ = -48						; size = 4
_nd$ = -44						; size = 4
_y$ = -40						; size = 2
_x$ = -36						; size = 2
_o$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z PROC	; FindNearbyAirbase

; 809  : Objective FindNearbyAirbase(GridIndex X, GridIndex Y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 810  : 	::vector p;
; 811  : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 812  : 
; 813  : 	// sfr: from 5 to 9 because of seoul airbase
; 814  : #ifdef VU_GRID_TREE_Y_MAJOR
; 815  : 	VuGridIterator	myit(ObjProxList, p.y, p.x, (BIG_SCALAR)GridToSim(5));

	push	5
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 816  : #else
; 817  : 	VuGridIterator	myit(ObjProxList, p.x, p.y, (BIG_SCALAR)GridToSim(5));
; 818  : #endif
; 819  : 
; 820  : 	int         d,nd;
; 821  : 	Objective   o,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 822  : 	GridIndex   x,y;
; 823  : 	
; 824  : 	nd = 9999;

	mov	DWORD PTR _nd$[ebp], 9999		; 0000270fH

; 825  : 	o = (Objective) myit.GetFirst ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN5@FindNearby:

; 826  : 
; 827  : 	while (o != NULL){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN4@FindNearby

; 828  : 		if (
; 829  : 			(o->GetType() == TYPE_AIRBASE) ||
; 830  : 			(o->GetType() == TYPE_AIRSTRIP)
; 831  : 		){

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	je	SHORT $LN2@FindNearby
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN1@FindNearby
$LN2@FindNearby:

; 832  : 			o->GetLocation (&x, &y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 833  : 			d = FloatToInt32(Distance (X, Y, x, y));

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 834  : 			if (d < nd)	{

	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR _nd$[ebp]
	jge	SHORT $LN1@FindNearby

; 835  : 				n = o;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 836  : 				nd = d;

	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _nd$[ebp], edx
$LN1@FindNearby:

; 837  : 			}
; 838  : 		}
; 839  : 		o = (Objective) myit.GetNext ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 840  : 	}

	jmp	$LN5@FindNearby
$LN4@FindNearby:

; 841  : 	return n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 842  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z ENDP	; FindNearbyAirbase
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -116						; size = 60
$T2 = -56						; size = 4
_n$ = -52						; size = 4
_d$ = -48						; size = 4
_nd$ = -44						; size = 4
_y$ = -40						; size = 2
_x$ = -36						; size = 2
_o$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z PROC	; FindNearestAirbase

; 773  : Objective FindNearestAirbase(GridIndex X, GridIndex Y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 774  : 	::vector p;
; 775  : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 776  : 
; 777  : #ifdef VU_GRID_TREE_Y_MAJOR
; 778  : 	VuGridIterator	myit(ObjProxList, p.y, p.x, (BIG_SCALAR)GridToSim(100));

	push	100					; 00000064H
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 779  : #else
; 780  : 	VuGridIterator	myit(ObjProxList, p.x, p.y, (BIG_SCALAR)GridToSim(100));
; 781  : #endif
; 782  : 
; 783  : 	int         d,nd;
; 784  : 	Objective   o,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 785  : 	GridIndex   x,y;
; 786  : 	
; 787  : 	nd = 9999;

	mov	DWORD PTR _nd$[ebp], 9999		; 0000270fH

; 788  : 	o = (Objective) myit.GetFirst ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN5@FindNeares:

; 789  : 
; 790  : 	while (o != NULL){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN4@FindNeares

; 791  : 		if (
; 792  : 			(o->GetType () == TYPE_AIRBASE) ||
; 793  : 			(o->GetType () == TYPE_AIRSTRIP)
; 794  : 		){

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	je	SHORT $LN2@FindNeares
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN1@FindNeares
$LN2@FindNeares:

; 795  : 			o->GetLocation (&x, &y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 796  : 
; 797  : 			d = FloatToInt32 (Distance (X, Y, x, y));

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 798  : 			if (d < nd){

	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR _nd$[ebp]
	jge	SHORT $LN1@FindNeares

; 799  : 				n = o;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 800  : 				nd = d;

	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _nd$[ebp], edx
$LN1@FindNeares:

; 801  : 			}
; 802  : 		}
; 803  : 		o = (Objective) myit.GetNext ();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 804  : 	}

	jmp	$LN5@FindNeares
$LN4@FindNeares:

; 805  : 
; 806  : 	return n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 807  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestAirbase@@YAPAVObjectiveClass@@FF@Z ENDP	; FindNearestAirbase
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_last$ = 16						; size = 4
?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z PROC ; FindNearestObjective

; 769  : Objective FindNearestObjective(GridIndex X, GridIndex Y, float *last){

	push	ebp
	mov	ebp, esp

; 770  : 	return FindNearestObjective (X,Y,last,MAX_GROUND_SEARCH);

	movzx	eax, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	push	eax
	mov	ecx, DWORD PTR _last$[ebp]
	push	ecx
	movzx	edx, WORD PTR _Y$[ebp]
	push	edx
	movzx	eax, WORD PTR _X$[ebp]
	push	eax
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H

; 771  : }

	pop	ebp
	ret	0
?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ENDP ; FindNearestObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -56						; size = 12
$T2 = -44						; size = 4
_n$ = -40						; size = 4
_lds$ = -36						; size = 4
_nds$ = -32						; size = 4
_ds$ = -28						; size = 4
_o$ = -24						; size = 4
_x$ = -20						; size = 2
_y$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_l$ = 8							; size = 4
_X$ = 12						; size = 2
_Y$ = 16						; size = 2
_last$ = 20						; size = 4
?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z PROC ; FindNearestObjective

; 702  : Objective FindNearestObjective(VuFilteredList* l, GridIndex X, GridIndex Y, float *last){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 703  : 	float		ds, nds=FLT_MAX, lds;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _nds$[ebp], xmm0

; 704  : 	Objective   o,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 705  : 	GridIndex   x,y;
; 706  : 
; 707  : 	if (last == NULL || *last < 0){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN6@FindNeares
	mov	eax, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN7@FindNeares
$LN6@FindNeares:

; 708  : 		lds = -1;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _lds$[ebp], xmm0

; 709  : 	}
; 710  : 	else{

	jmp	SHORT $LN5@FindNeares
$LN7@FindNeares:

; 711  : 		lds = (float)(*last * *last);

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _lds$[ebp], xmm0
$LN5@FindNeares:

; 712  : 	}
; 713  : 
; 714  : 	VuListIterator	myit(l);

	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 715  : 	o = GetFirstObjective(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN4@FindNeares:

; 716  : 	while (o != NULL){		

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN3@FindNeares

; 717  : 		o->GetLocation(&x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 718  : 		ds = (float) DistSqu(X, Y, x, y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _ds$[ebp], xmm0

; 719  : 		if (ds>lds && ds<nds){

	movss	xmm0, DWORD PTR _ds$[ebp]
	comiss	xmm0, DWORD PTR _lds$[ebp]
	jbe	SHORT $LN2@FindNeares
	movss	xmm0, DWORD PTR _nds$[ebp]
	comiss	xmm0, DWORD PTR _ds$[ebp]
	jbe	SHORT $LN2@FindNeares

; 720  : 			n = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 721  : 			nds = ds;

	movss	xmm0, DWORD PTR _ds$[ebp]
	movss	DWORD PTR _nds$[ebp], xmm0
$LN2@FindNeares:

; 722  : 		}
; 723  : 		o = GetNextObjective(&myit);

	lea	eax, DWORD PTR _myit$[ebp]
	push	eax
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 724  : 	}

	jmp	SHORT $LN4@FindNeares
$LN3@FindNeares:

; 725  : 
; 726  : 	if (last != NULL){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN1@FindNeares

; 727  : 		*last = (float)sqrt(nds);

	push	ecx
	movss	xmm0, DWORD PTR _nds$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	ecx, DWORD PTR _last$[ebp]
	fstp	DWORD PTR [ecx]
$LN1@FindNeares:

; 728  : 	}
; 729  : 	return n;

	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]

; 730  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestObjective@@YAPAVObjectiveClass@@PAVVuLinkedList@@FFPAM@Z ENDP ; FindNearestObjective
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -120						; size = 60
$T2 = -60						; size = 4
_lds$ = -56						; size = 4
_n$ = -52						; size = 4
_ds$ = -48						; size = 4
_x$ = -44						; size = 2
_y$ = -40						; size = 2
_nds$ = -36						; size = 4
_o$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_last$ = 16						; size = 4
_maxdist$ = 20						; size = 2
?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z PROC ; FindNearestObjective

; 732  : Objective FindNearestObjective(GridIndex X, GridIndex Y, float *last, GridIndex maxdist){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 733  : 	::vector p;
; 734  : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 735  : 
; 736  : #ifdef VU_GRID_TREE_Y_MAJOR
; 737  : 	VuGridIterator	myit(ObjProxList, p.y, p.x, (BIG_SCALAR)GridToSim(maxdist));

	movzx	eax, WORD PTR _maxdist$[ebp]
	push	eax
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	ecx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 738  : #else
; 739  : 	VuGridIterator	myit(ObjProxList, p.x, p.y, (BIG_SCALAR)GridToSim(maxdist));
; 740  : #endif
; 741  : 
; 742  : 	float		ds,lds,nds=FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _nds$[ebp], xmm0

; 743  : 	Objective   o,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 744  : 	GridIndex   x,y;
; 745  : 
; 746  : 	if (last == NULL || *last < 0){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN6@FindNeares
	mov	edx, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN7@FindNeares
$LN6@FindNeares:

; 747  : 		lds = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _lds$[ebp], xmm0

; 748  : 	}
; 749  : 	else {

	jmp	SHORT $LN5@FindNeares
$LN7@FindNeares:

; 750  : 		lds = (float)(*last * *last) + 0.1F;

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _lds$[ebp], xmm0
$LN5@FindNeares:

; 751  : 	}
; 752  : 
; 753  : 	o = (Objective) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN4@FindNeares:

; 754  : 	while (o != NULL){		

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN3@FindNeares

; 755  : 		o->GetLocation(&x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 756  : 		ds = (float) DistSqu(X, Y, x, y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _ds$[ebp], xmm0

; 757  : 		if (ds>lds && ds<nds){

	movss	xmm0, DWORD PTR _ds$[ebp]
	comiss	xmm0, DWORD PTR _lds$[ebp]
	jbe	SHORT $LN2@FindNeares
	movss	xmm0, DWORD PTR _nds$[ebp]
	comiss	xmm0, DWORD PTR _ds$[ebp]
	jbe	SHORT $LN2@FindNeares

; 758  : 			n = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 759  : 			nds = ds;

	movss	xmm0, DWORD PTR _ds$[ebp]
	movss	DWORD PTR _nds$[ebp], xmm0
$LN2@FindNeares:

; 760  : 		}
; 761  : 		o = (Objective) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 762  : 	}

	jmp	SHORT $LN4@FindNeares
$LN3@FindNeares:

; 763  : 	if (last != NULL){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN1@FindNeares

; 764  : 		*last = (float)sqrt(nds);

	push	ecx
	movss	xmm0, DWORD PTR _nds$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _last$[ebp]
	fstp	DWORD PTR [eax]
$LN1@FindNeares:

; 765  : 	}
; 766  : 	return n;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 767  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ENDP ; FindNearestObjective
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_domain$ = 16						; size = 4
?GetUnitByXY@@YAPAVUnitClass@@FFH@Z PROC		; GetUnitByXY

; 681  : Unit GetUnitByXY(GridIndex X, GridIndex Y, int domain){

	push	ebp
	mov	ebp, esp

; 682  : 	return FindUnitByXY(AllUnitList, X, Y, domain);

	mov	eax, DWORD PTR _domain$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR ?AllUnitList@@3PAVVuLinkedList@@A ; AllUnitList
	push	eax
	call	?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z ; FindUnitByXY
	add	esp, 16					; 00000010H

; 683  : }

	pop	ebp
	ret	0
?GetUnitByXY@@YAPAVUnitClass@@FFH@Z ENDP		; GetUnitByXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -44						; size = 12
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_u$ = -24						; size = 4
_y$ = -20						; size = 2
_x$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_l$ = 8							; size = 4
_X$ = 12						; size = 2
_Y$ = 16						; size = 2
_domain$ = 20						; size = 4
?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z PROC ; FindUnitByXY

; 664  : Unit FindUnitByXY(VuFilteredList* l, GridIndex X, GridIndex Y, int domain){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 665  : 	Unit        u;
; 666  : 	GridIndex   x,y;
; 667  : 
; 668  : 	VuListIterator	myit(l);

	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 669  : 	u = GetFirstUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN4@FindUnitBy:

; 670  : 	while (u != NULL){

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN3@FindUnitBy

; 671  : 		u->GetLocation(&x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 672  : 		if (x == X && y == Y && (u->GetDomain() == domain || domain < 1)){

	movsx	ecx, WORD PTR _x$[ebp]
	movsx	edx, WORD PTR _X$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@FindUnitBy
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR _Y$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@FindUnitBy
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, DWORD PTR _domain$[ebp]
	je	SHORT $LN1@FindUnitBy
	cmp	DWORD PTR _domain$[ebp], 1
	jge	SHORT $LN2@FindUnitBy
$LN1@FindUnitBy:

; 673  : 			return u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN5@FindUnitBy
$LN2@FindUnitBy:

; 674  : 		}
; 675  : 		u = GetNextUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 676  : 	}

	jmp	SHORT $LN4@FindUnitBy
$LN3@FindUnitBy:

; 677  : 	return NULL;

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]
$LN5@FindUnitBy:

; 678  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindUnitByXY@@YAPAVUnitClass@@PAVVuLinkedList@@FFH@Z ENDP ; FindUnitByXY
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_last$ = 16						; size = 4
?FindNearestUnit@@YAPAVUnitClass@@FFPAM@Z PROC		; FindNearestUnit

; 660  : Unit FindNearestUnit(GridIndex X, GridIndex Y, float *last){

	push	ebp
	mov	ebp, esp

; 661  : 	return FindNearestUnit(AllUnitList, X, Y, last);

	mov	eax, DWORD PTR _last$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR ?AllUnitList@@3PAVVuLinkedList@@A ; AllUnitList
	push	eax
	call	?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z ; FindNearestUnit
	add	esp, 16					; 00000010H

; 662  : }

	pop	ebp
	ret	0
?FindNearestUnit@@YAPAVUnitClass@@FFPAM@Z ENDP		; FindNearestUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -56						; size = 12
$T2 = -44						; size = 4
_n$ = -40						; size = 4
_lds$ = -36						; size = 4
_nds$ = -32						; size = 4
_ds$ = -28						; size = 4
_u$ = -24						; size = 4
_y$ = -20						; size = 2
_x$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_l$ = 8							; size = 4
_X$ = 12						; size = 2
_Y$ = 16						; size = 2
_last$ = 20						; size = 4
?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z PROC ; FindNearestUnit

; 629  : Unit FindNearestUnit(VuFilteredList* l, GridIndex X, GridIndex Y, float *last){	

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 630  : 	Unit        u,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 631  : 	GridIndex   x,y;
; 632  : 	float		ds,nds=FLT_MAX,lds;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _nds$[ebp], xmm0

; 633  : 
; 634  : 	if (last == NULL || *last < 0){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN6@FindNeares
	mov	eax, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN7@FindNeares
$LN6@FindNeares:

; 635  : 		lds = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _lds$[ebp], xmm0

; 636  : 	}
; 637  : 	else{

	jmp	SHORT $LN5@FindNeares
$LN7@FindNeares:

; 638  : 		lds = (float)(*last * *last) + 0.1F;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _lds$[ebp], xmm0
$LN5@FindNeares:

; 639  : 	}
; 640  : 
; 641  : 	VuListIterator	myit(l);

	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 642  : 	u = GetFirstUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN4@FindNeares:

; 643  : 	while (u != NULL){

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN3@FindNeares

; 644  : 		u->GetLocation(&x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 645  : 		ds = (float)DistSqu(X,Y,x,y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _ds$[ebp], xmm0

; 646  : 		if (ds>lds && ds<nds && x>=0 && y>=0){

	movss	xmm0, DWORD PTR _ds$[ebp]
	comiss	xmm0, DWORD PTR _lds$[ebp]
	jbe	SHORT $LN2@FindNeares
	movss	xmm0, DWORD PTR _nds$[ebp]
	comiss	xmm0, DWORD PTR _ds$[ebp]
	jbe	SHORT $LN2@FindNeares
	movsx	edx, WORD PTR _x$[ebp]
	test	edx, edx
	jl	SHORT $LN2@FindNeares
	movsx	eax, WORD PTR _y$[ebp]
	test	eax, eax
	jl	SHORT $LN2@FindNeares

; 647  : 			n = u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 648  : 			nds = ds;

	movss	xmm0, DWORD PTR _ds$[ebp]
	movss	DWORD PTR _nds$[ebp], xmm0
$LN2@FindNeares:

; 649  : 		}
; 650  : 		u = GetNextUnit(&myit);

	lea	edx, DWORD PTR _myit$[ebp]
	push	edx
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 651  : 	}

	jmp	$LN4@FindNeares
$LN3@FindNeares:

; 652  : 
; 653  : 	if (last != NULL){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN1@FindNeares

; 654  : 		*last = (float)sqrt(nds);

	push	ecx
	movss	xmm0, DWORD PTR _nds$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _last$[ebp]
	fstp	DWORD PTR [eax]
$LN1@FindNeares:

; 655  : 	}
; 656  : 	return n;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]

; 657  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestUnit@@YAPAVUnitClass@@PAVVuLinkedList@@FFPAM@Z ENDP ; FindNearestUnit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -124						; size = 60
$T2 = -64						; size = 4
_lds$ = -60						; size = 4
_n$ = -56						; size = 4
_ds$ = -52						; size = 4
_y$ = -48						; size = 2
_x$ = -44						; size = 2
_nds$ = -40						; size = 4
_u$ = -36						; size = 4
_max_dist$ = -32					; size = 2
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_last$ = 16						; size = 4
_mx$ = 20						; size = 2
?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z PROC	; FindNearestRealUnit

; 589  : Unit FindNearestRealUnit(GridIndex X, GridIndex Y, float *last, GridIndex mx){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 590  : 	GridIndex	max_dist = MAX_GROUND_SEARCH;

	mov	ax, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	mov	WORD PTR _max_dist$[ebp], ax

; 591  : 	float		lds,ds,nds=FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _nds$[ebp], xmm0

; 592  : 	Unit		u,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 593  : 	GridIndex   x,y;
; 594  : 
; 595  : 	if (mx){

	movsx	ecx, WORD PTR _mx$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@FindNeares

; 596  : 		max_dist = mx;

	mov	dx, WORD PTR _mx$[ebp]
	mov	WORD PTR _max_dist$[ebp], dx
$LN8@FindNeares:

; 597  : 	}
; 598  : 	if (last == NULL || *last < 0){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN6@FindNeares
	mov	eax, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN7@FindNeares
$LN6@FindNeares:

; 599  : 		lds = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _lds$[ebp], xmm0

; 600  : 	}
; 601  : 	else {

	jmp	SHORT $LN5@FindNeares
$LN7@FindNeares:

; 602  : 		lds = (float)(*last * *last) + 0.1F;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR _last$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _lds$[ebp], xmm0
$LN5@FindNeares:

; 603  : 	}
; 604  : 
; 605  : 	::vector p;
; 606  : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 607  : 
; 608  : #ifdef VU_GRID_TREE_Y_MAJOR
; 609  : 	VuGridIterator	myit(RealUnitProxList, p.y, p.x, (BIG_SCALAR)GridToSim(max_dist));

	movzx	eax, WORD PTR _max_dist$[ebp]
	push	eax
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	ecx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 610  : #else
; 611  : 	VuGridIterator	myit(RealUnitProxList, p.x, p.y, (BIG_SCALAR)GridToSim(max_dist));
; 612  : #endif
; 613  : 	u = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _u$[ebp], eax
$LN4@FindNeares:

; 614  : 	while (u != NULL){		

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN3@FindNeares

; 615  : 		u->GetLocation(&x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 616  : 		ds = (float)DistSqu(X, Y, x, y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	movzx	eax, WORD PTR _Y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _X$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _ds$[ebp], xmm0

; 617  : 		if (ds>lds && ds<nds){

	movss	xmm0, DWORD PTR _ds$[ebp]
	comiss	xmm0, DWORD PTR _lds$[ebp]
	jbe	SHORT $LN2@FindNeares
	movss	xmm0, DWORD PTR _nds$[ebp]
	comiss	xmm0, DWORD PTR _ds$[ebp]
	jbe	SHORT $LN2@FindNeares

; 618  : 			n = u;

	mov	edx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 619  : 			nds = ds;

	movss	xmm0, DWORD PTR _ds$[ebp]
	movss	DWORD PTR _nds$[ebp], xmm0
$LN2@FindNeares:

; 620  : 		}
; 621  : 		u = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _u$[ebp], eax

; 622  : 	}

	jmp	SHORT $LN4@FindNeares
$LN3@FindNeares:

; 623  : 	if (last != NULL){

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN1@FindNeares

; 624  : 		*last = (float)sqrt(nds);

	push	ecx
	movss	xmm0, DWORD PTR _nds$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _last$[ebp]
	fstp	DWORD PTR [eax]
$LN1@FindNeares:

; 625  : 	}
; 626  : 	return n;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 627  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestRealUnit@@YAPAVUnitClass@@FFPAMF@Z ENDP	; FindNearestRealUnit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -124						; size = 60
_ld$ = -64						; size = 4
$T2 = -60						; size = 4
_n$ = -56						; size = 4
_nd$ = -52						; size = 4
_y$ = -48						; size = 2
_d$ = -44						; size = 4
_x$ = -40						; size = 2
_u$ = -36						; size = 4
_max_dist$ = -32					; size = 2
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
_mx$ = 16						; size = 2
?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z PROC	; FindNearestEnemyUnit

; 557  : Unit FindNearestEnemyUnit(GridIndex X, GridIndex Y, GridIndex mx){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 558  : 	GridIndex	max_dist = MAX_GROUND_SEARCH;

	mov	ax, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	mov	WORD PTR _max_dist$[ebp], ax

; 559  : 	int         d,nd,ld=0;

	mov	DWORD PTR _ld$[ebp], 0

; 560  : 	Unit		u,n=NULL;

	mov	DWORD PTR _n$[ebp], 0

; 561  : 	GridIndex   x,y;
; 562  : 	if (max_dist){

	movsx	ecx, WORD PTR _max_dist$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@FindNeares

; 563  : 		max_dist = mx;

	mov	dx, WORD PTR _mx$[ebp]
	mov	WORD PTR _max_dist$[ebp], dx
$LN4@FindNeares:

; 564  : 	}
; 565  : 
; 566  : 	::vector p;
; 567  : 	ConvertGridToSim(X, Y, &p);

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?ConvertGridToSim@@YAXFFPAUvector@@@Z	; ConvertGridToSim
	add	esp, 12					; 0000000cH

; 568  : 
; 569  : #ifdef VU_GRID_TREE_Y_MAJOR
; 570  : 	VuGridIterator	myit(RealUnitProxList, p.y, p.x, (BIG_SCALAR)GridToSim(max_dist));

	movzx	eax, WORD PTR _max_dist$[ebp]
	push	eax
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	ecx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 571  : #else
; 572  : 	VuGridIterator	myit(RealUnitProxList, p.x, p.y, (BIG_SCALAR)GridToSim(max_dist));
; 573  : #endif
; 574  : 
; 575  : 	nd = max_dist*2;

	movsx	edx, WORD PTR _max_dist$[ebp]
	shl	edx, 1
	mov	DWORD PTR _nd$[ebp], edx

; 576  : 	u = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _u$[ebp], eax
$LN3@FindNeares:

; 577  : 	while (u != NULL){		

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN2@FindNeares

; 578  : 		u->GetLocation(&x, &y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 579  : 		d = FloatToInt32(Distance(X, Y, x, y));

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	movzx	ecx, WORD PTR _Y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _X$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax

; 580  : 		if (d>ld && d<nd){

	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR _ld$[ebp]
	jle	SHORT $LN1@FindNeares
	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR _nd$[ebp]
	jge	SHORT $LN1@FindNeares

; 581  : 			n = u;

	mov	edx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 582  : 			nd = d;

	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _nd$[ebp], eax
$LN1@FindNeares:

; 583  : 		}
; 584  : 		u = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _u$[ebp], eax

; 585  : 	}

	jmp	SHORT $LN3@FindNeares
$LN2@FindNeares:

; 586  : 	return n;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T2[ebp]

; 587  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__ehhandler$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestEnemyUnit@@YAPAVUnitClass@@FFF@Z ENDP	; FindNearestEnemyUnit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_looklist$ = -72					; size = 24
_myit$ = -48						; size = 12
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_cost$ = -28						; size = 4
_who$ = -24						; size = 4
_n$ = -20						; size = 4
_c$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_o$ = 8							; size = 4
?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z PROC ; FindNearestSupplySource

; 498  : Objective FindNearestSupplySource(Objective o){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 499  : 	Objective		c;
; 500  : 	int				n,who;
; 501  : 	float			cost;
; 502  : 
; 503  : 	// Reset search array
; 504  : 	memset(CampSearch,0,sizeof(uchar)*MAX_CAMP_ENTITIES);

	push	28000					; 00006d60H
	push	0
	push	OFFSET ?CampSearch@@3PAEA		; CampSearch
	call	_memset
	add	esp, 12					; 0000000cH

; 505  : 
; 506  : 	FalconPrivateList	looklist(&AllObjFilter);

	push	OFFSET ?AllObjFilter@@3VObjFilter@@A	; AllObjFilter
	lea	ecx, DWORD PTR _looklist$[ebp]
	call	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z ; FalconPrivateList::FalconPrivateList
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 	looklist.ForcedInsert(o);

	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	lea	ecx, DWORD PTR _looklist$[ebp]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert

; 508  : 	who = o->GetTeam();

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	DWORD PTR _who$[ebp], ecx

; 509  : 
; 510  : 	// Keep branching out in objective links until I find a supply source
; 511  : // #pragma message ("Somebody else look at this and see if I did it right")
; 512  : 	// Looks fine to me - RH
; 513  : #if 0
; 514  : 	while (o = GetFirstObjective(&myit))
; 515  : 		{
; 516  : 		CampSearch[o->GetCampID()] = 1;
; 517  : 		for (n=0; n<o->static_data.links; n++)
; 518  : 			{
; 519  : 			c = o->GetNeighbor(n);
; 520  : 			if (c && !CampSearch[c->GetCampID()])
; 521  : 				{
; 522  : 				cost = GetObjectiveMovementCost(o,NULL,n,Wheeled,who,PATH_MARINE);
; 523  : 				if (cost < 250)
; 524  : 					{
; 525  : 					if (c->IsSupplySource())
; 526  : 						return c;
; 527  : 					looklist.ForcedInsert(c);
; 528  : 					}
; 529  : 				}
; 530  : 			}
; 531  : 		looklist.Remove(o);
; 532  : 		}
; 533  : #endif	
; 534  : 	VuListIterator		myit(&looklist);

	lea	edx, DWORD PTR _looklist$[ebp]
	push	edx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 535  : 	o = GetFirstObjective(&myit);

	lea	eax, DWORD PTR _myit$[ebp]
	push	eax
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN8@FindNeares:

; 536  : 	while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN7@FindNeares

; 537  : 		CampSearch[o->GetCampID()] = 1;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	mov	BYTE PTR ?CampSearch@@3PAEA[ecx], 1

; 538  : 		for (n=0; n<o->static_data.links; n++){

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@FindNeares
$LN5@FindNeares:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN6@FindNeares:
	mov	eax, DWORD PTR _o$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	cmp	DWORD PTR _n$[ebp], ecx
	jge	$LN4@FindNeares

; 539  : 			c = o->GetNeighbor(n);

	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _c$[ebp], eax

; 540  : 			if (c && !CampSearch[c->GetCampID()]){

	cmp	DWORD PTR _c$[ebp], 0
	je	$LN2@FindNeares
	mov	eax, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	movzx	edx, BYTE PTR ?CampSearch@@3PAEA[ecx]
	test	edx, edx
	jne	SHORT $LN2@FindNeares

; 541  : 				cost = GetObjectiveMovementCost(o,NULL,n,Wheeled,(uchar)who,PATH_MARINE);

	push	32					; 00000020H
	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	?GetObjectiveMovementCost@@YAMPAVObjectiveClass@@0HW4MoveType@@EH@Z ; GetObjectiveMovementCost
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _cost$[ebp]

; 542  : 				if (cost < 250)

	movss	xmm0, DWORD PTR __real@437a0000
	comiss	xmm0, DWORD PTR _cost$[ebp]
	jbe	SHORT $LN2@FindNeares

; 543  : 				{
; 544  : 					if (c->IsSupplySource())

	mov	ecx, DWORD PTR _c$[ebp]
	call	?IsSupplySource@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsSupplySource
	test	eax, eax
	je	SHORT $LN1@FindNeares

; 545  : 						return c;

	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _looklist$[ebp]
	call	??1FalconPrivateList@@UAE@XZ		; FalconPrivateList::~FalconPrivateList
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN9@FindNeares
$LN1@FindNeares:

; 546  : 					looklist.ForcedInsert(c);

	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _looklist$[ebp]
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert
$LN2@FindNeares:

; 547  : 				}
; 548  : 			}
; 549  : 		}

	jmp	$LN5@FindNeares
$LN4@FindNeares:

; 550  : 		looklist.Remove(o);

	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	lea	ecx, DWORD PTR _looklist$[ebp]
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove

; 551  : 		o = GetFirstObjective(&myit);

	lea	eax, DWORD PTR _myit$[ebp]
	push	eax
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 552  : 	}

	jmp	$LN8@FindNeares
$LN7@FindNeares:

; 553  : 
; 554  : 	return NULL;

	mov	DWORD PTR $T2[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _looklist$[ebp]
	call	??1FalconPrivateList@@UAE@XZ		; FalconPrivateList::~FalconPrivateList
	mov	eax, DWORD PTR $T2[ebp]
$LN9@FindNeares:

; 555  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z$0:
	lea	ecx, DWORD PTR _looklist$[ebp]
	jmp	??1FalconPrivateList@@UAE@XZ		; FalconPrivateList::~FalconPrivateList
__unwindfunclet$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z$1:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindNearestSupplySource@@YAPAVObjectiveClass@@PAV1@@Z ENDP ; FindNearestSupplySource
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -36						; size = 12
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_e$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z PROC	; GetEntityByCampID

; 484  : CampEntity GetEntityByCampID(int id){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 485  : 	VuListIterator	myit(AllCampList);

	mov	eax, DWORD PTR ?AllCampList@@3PAVVuLinkedList@@A ; AllCampList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 486  : 	CampEntity		e;
; 487  : 	e = (CampEntity) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN3@GetEntityB:

; 488  : 	while (e){

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@GetEntityB

; 489  : 		if (e->GetCampID() == id){

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@GetEntityB

; 490  : 			return e;

	mov	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN4@GetEntityB
$LN1@GetEntityB:

; 491  : 		}
; 492  : 		e = (CampEntity) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 493  : 	}

	jmp	SHORT $LN3@GetEntityB
$LN2@GetEntityB:

; 494  : 	return NULL;

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]
$LN4@GetEntityB:

; 495  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z ENDP	; GetEntityByCampID
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_e$ = -4						; size = 4
_id$ = 8						; size = 8
?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z PROC	; FindEntity

; 475  : CampEntity FindEntity (VU_ID id){

	push	ebp
	mov	ebp, esp
	push	ecx

; 476  : 	VuEntity*		e;
; 477  : 	e = vuDatabase->Find(id);

	mov	eax, DWORD PTR _id$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 478  : 	if (e && (GetEntityClass(e) == CLASS_OBJECTIVE || GetEntityClass(e) == CLASS_UNIT)){

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN2@FindEntity
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	cwde
	cmp	eax, 4
	je	SHORT $LN1@FindEntity
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	movsx	edx, ax
	cmp	edx, 6
	jne	SHORT $LN2@FindEntity
$LN1@FindEntity:

; 479  : 		return (CampEntity)e;

	mov	eax, DWORD PTR _e$[ebp]
	jmp	SHORT $LN3@FindEntity
$LN2@FindEntity:

; 480  : 	}
; 481  : 	return NULL;

	xor	eax, eax
$LN3@FindEntity:

; 482  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindEntity@@YAPAVCampBaseClass@@VVU_ID@@@Z ENDP	; FindEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_e$ = -4						; size = 4
_id$ = 8						; size = 8
?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z PROC		; FindUnit

; 466  : Unit FindUnit(VU_ID id){

	push	ebp
	mov	ebp, esp
	push	ecx

; 467  : 	VuEntity*		e;
; 468  : 	e = vuDatabase->Find(id);

	mov	eax, DWORD PTR _id$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 469  : 	if (e && GetEntityClass(e) == CLASS_UNIT){

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN1@FindUnit
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	cwde
	cmp	eax, 6
	jne	SHORT $LN1@FindUnit

; 470  : 		return (Unit)e;

	mov	eax, DWORD PTR _e$[ebp]
	jmp	SHORT $LN2@FindUnit
$LN1@FindUnit:

; 471  : 	}
; 472  : 	return NULL;

	xor	eax, eax
$LN2@FindUnit:

; 473  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z ENDP		; FindUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_x$ = -16						; size = 2
_y$ = -12						; size = 2
_tx$ = -8						; size = 2
_ty$ = -4						; size = 2
_o1$ = 8						; size = 4
_o2$ = 12						; size = 4
_speed$ = 16						; size = 4
?TimeBetweenO@@YAKPAVObjectiveClass@@0H@Z PROC		; TimeBetweenO

; 449  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 450  : 	GridIndex x,y,tx,ty;
; 451  : 
; 452  : 	o1->GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _o1$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 453  : 	o2->GetLocation(&tx,&ty);

	lea	edx, DWORD PTR _ty$[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o2$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 454  : 	return TimeBetween (x,y,tx,ty,speed);

	mov	ecx, DWORD PTR _speed$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ty$[ebp]
	push	edx
	movzx	eax, WORD PTR _tx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?TimeBetween@@YAKFFFFH@Z		; TimeBetween
	add	esp, 20					; 00000014H

; 455  : }									 

	mov	esp, ebp
	pop	ebp
	ret	0
?TimeBetweenO@@YAKPAVObjectiveClass@@0H@Z ENDP		; TimeBetweenO
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
tv94 = -24						; size = 8
tv92 = -16						; size = 4
tv87 = -12						; size = 4
_d$ = -8						; size = 4
tv89 = -2						; size = 2
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_tx$ = 16						; size = 2
_ty$ = 20						; size = 2
_speed$ = 24						; size = 4
?TimeBetween@@YAKFFFFH@Z PROC				; TimeBetween

; 441  : CampaignTime TimeBetween (GridIndex x, GridIndex y, GridIndex tx, GridIndex ty, int speed){

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 442  : 	float d;
; 443  : 
; 444  : 	d = Distance(x,y,tx,ty);

	movzx	eax, WORD PTR _ty$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 445  : 	return (CampaignTime) ((d/speed)*CampaignHours);

	cvtsi2ss xmm0, DWORD PTR _speed$[ebp]
	movss	xmm1, DWORD PTR _d$[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@4a5bba00
	movss	DWORD PTR tv87[ebp], xmm1
	fld	DWORD PTR tv87[ebp]
	fnstcw	WORD PTR tv89[ebp]
	movzx	eax, WORD PTR tv89[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv92[ebp], eax
	fldcw	WORD PTR tv92[ebp]
	fistp	QWORD PTR tv94[ebp]
	fldcw	WORD PTR tv89[ebp]
	mov	eax, DWORD PTR tv94[ebp]

; 446  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TimeBetween@@YAKFFFFH@Z ENDP				; TimeBetween
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_ox$ = 8						; size = 4
_oy$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?OctantTo@@YAHMMMM@Z PROC				; OctantTo

; 332  : {

	push	ebp
	mov	ebp, esp

; 333  : 	if (oy > ty){

	movss	xmm0, DWORD PTR _oy$[ebp]
	comiss	xmm0, DWORD PTR _ty$[ebp]
	jbe	SHORT $LN14@OctantTo

; 334  : 		if (ox > tx){

	movss	xmm0, DWORD PTR _ox$[ebp]
	comiss	xmm0, DWORD PTR _tx$[ebp]
	jbe	SHORT $LN13@OctantTo

; 335  : 			if (oy-ty > ox-tx)

	movss	xmm0, DWORD PTR _oy$[ebp]
	subss	xmm0, DWORD PTR _ty$[ebp]
	movss	xmm1, DWORD PTR _ox$[ebp]
	subss	xmm1, DWORD PTR _tx$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN12@OctantTo

; 336  : 				return 5;

	mov	eax, 5
	jmp	$LN1@OctantTo

; 337  : 			else

	jmp	SHORT $LN11@OctantTo
$LN12@OctantTo:

; 338  : 				return 4;

	mov	eax, 4
	jmp	$LN1@OctantTo
$LN11@OctantTo:

; 339  : 		}
; 340  : 		else {

	jmp	SHORT $LN8@OctantTo
$LN13@OctantTo:

; 341  : 			if (oy-ty > tx-ox)

	movss	xmm0, DWORD PTR _oy$[ebp]
	subss	xmm0, DWORD PTR _ty$[ebp]
	movss	xmm1, DWORD PTR _tx$[ebp]
	subss	xmm1, DWORD PTR _ox$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@OctantTo

; 342  : 				return 6;

	mov	eax, 6
	jmp	SHORT $LN1@OctantTo

; 343  : 			else

	jmp	SHORT $LN8@OctantTo
$LN9@OctantTo:

; 344  : 				return 7;

	mov	eax, 7
	jmp	SHORT $LN1@OctantTo
$LN8@OctantTo:

; 345  : 		}
; 346  : 	}
; 347  : 	else {

	jmp	SHORT $LN1@OctantTo
$LN14@OctantTo:

; 348  : 		if (ox > tx){

	movss	xmm0, DWORD PTR _ox$[ebp]
	comiss	xmm0, DWORD PTR _tx$[ebp]
	jbe	SHORT $LN6@OctantTo

; 349  : 			if (ty-oy > ox-tx)

	movss	xmm0, DWORD PTR _ty$[ebp]
	subss	xmm0, DWORD PTR _oy$[ebp]
	movss	xmm1, DWORD PTR _ox$[ebp]
	subss	xmm1, DWORD PTR _tx$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN5@OctantTo

; 350  : 				return 2;

	mov	eax, 2
	jmp	SHORT $LN1@OctantTo

; 351  : 			else

	jmp	SHORT $LN4@OctantTo
$LN5@OctantTo:

; 352  : 				return 3;

	mov	eax, 3
	jmp	SHORT $LN1@OctantTo
$LN4@OctantTo:

; 353  : 		}
; 354  : 		else {

	jmp	SHORT $LN1@OctantTo
$LN6@OctantTo:

; 355  : 			if (ty-oy > tx-ox)

	movss	xmm0, DWORD PTR _ty$[ebp]
	subss	xmm0, DWORD PTR _oy$[ebp]
	movss	xmm1, DWORD PTR _tx$[ebp]
	subss	xmm1, DWORD PTR _ox$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN2@OctantTo

; 356  : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN1@OctantTo

; 357  : 			else

	jmp	SHORT $LN1@OctantTo
$LN2@OctantTo:

; 358  : 				return 0;

	xor	eax, eax
$LN1@OctantTo:

; 359  : 		}
; 360  : 	}
; 361  : }

	pop	ebp
	ret	0
?OctantTo@@YAHMMMM@Z ENDP				; OctantTo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_ox$ = 8						; size = 2
_oy$ = 12						; size = 2
_tx$ = 16						; size = 2
_ty$ = 20						; size = 2
?OctantTo@@YAHFFFF@Z PROC				; OctantTo

; 300  : {

	push	ebp
	mov	ebp, esp

; 301  : 	if (ox > tx){

	movsx	eax, WORD PTR _ox$[ebp]
	movsx	ecx, WORD PTR _tx$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN14@OctantTo

; 302  : 		if (oy > ty){

	movsx	edx, WORD PTR _oy$[ebp]
	movsx	eax, WORD PTR _ty$[ebp]
	cmp	edx, eax
	jle	SHORT $LN13@OctantTo

; 303  : 			if (ox-tx > oy-ty)

	movsx	ecx, WORD PTR _ox$[ebp]
	movsx	edx, WORD PTR _tx$[ebp]
	sub	ecx, edx
	movsx	eax, WORD PTR _oy$[ebp]
	movsx	edx, WORD PTR _ty$[ebp]
	sub	eax, edx
	cmp	ecx, eax
	jle	SHORT $LN12@OctantTo

; 304  : 				return 5;

	mov	eax, 5
	jmp	$LN15@OctantTo

; 305  : 			else

	jmp	SHORT $LN11@OctantTo
$LN12@OctantTo:

; 306  : 				return 4;

	mov	eax, 4
	jmp	$LN15@OctantTo
$LN11@OctantTo:

; 307  : 		}
; 308  : 		else {

	jmp	SHORT $LN10@OctantTo
$LN13@OctantTo:

; 309  : 			if (ox-tx > ty-oy)

	movsx	eax, WORD PTR _ox$[ebp]
	movsx	ecx, WORD PTR _tx$[ebp]
	sub	eax, ecx
	movsx	edx, WORD PTR _ty$[ebp]
	movsx	ecx, WORD PTR _oy$[ebp]
	sub	edx, ecx
	cmp	eax, edx
	jle	SHORT $LN9@OctantTo

; 310  : 				return 6;

	mov	eax, 6
	jmp	SHORT $LN15@OctantTo

; 311  : 			else

	jmp	SHORT $LN10@OctantTo
$LN9@OctantTo:

; 312  : 				return 7;

	mov	eax, 7
	jmp	SHORT $LN15@OctantTo
$LN10@OctantTo:

; 313  : 		}
; 314  : 	}
; 315  : 	else {

	jmp	SHORT $LN15@OctantTo
$LN14@OctantTo:

; 316  : 		if (oy > ty){

	movsx	edx, WORD PTR _oy$[ebp]
	movsx	eax, WORD PTR _ty$[ebp]
	cmp	edx, eax
	jle	SHORT $LN6@OctantTo

; 317  : 			if (tx-ox > oy-ty)

	movsx	ecx, WORD PTR _tx$[ebp]
	movsx	edx, WORD PTR _ox$[ebp]
	sub	ecx, edx
	movsx	eax, WORD PTR _oy$[ebp]
	movsx	edx, WORD PTR _ty$[ebp]
	sub	eax, edx
	cmp	ecx, eax
	jle	SHORT $LN5@OctantTo

; 318  : 				return 2;

	mov	eax, 2
	jmp	SHORT $LN15@OctantTo

; 319  : 			else

	jmp	SHORT $LN4@OctantTo
$LN5@OctantTo:

; 320  : 				return 3;

	mov	eax, 3
	jmp	SHORT $LN15@OctantTo
$LN4@OctantTo:

; 321  : 		}
; 322  : 		else {

	jmp	SHORT $LN15@OctantTo
$LN6@OctantTo:

; 323  : 			if (tx-ox > ty-oy)

	movsx	eax, WORD PTR _tx$[ebp]
	movsx	ecx, WORD PTR _ox$[ebp]
	sub	eax, ecx
	movsx	edx, WORD PTR _ty$[ebp]
	movsx	ecx, WORD PTR _oy$[ebp]
	sub	edx, ecx
	cmp	eax, edx
	jle	SHORT $LN2@OctantTo

; 324  : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN15@OctantTo

; 325  : 			else

	jmp	SHORT $LN15@OctantTo
$LN2@OctantTo:

; 326  : 				return 0;

	xor	eax, eax
$LN15@OctantTo:

; 327  : 		}
; 328  : 	}
; 329  : }

	pop	ebp
	ret	0
?OctantTo@@YAHFFFF@Z ENDP				; OctantTo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_td$ = -16						; size = 4
_d$ = -12						; size = 4
_nx$ = -8						; size = 2
_ny$ = -4						; size = 2
_ox$ = 8						; size = 2
_oy$ = 12						; size = 2
_tx$ = 16						; size = 2
_ty$ = 20						; size = 2
_cx$ = 24						; size = 2
_cy$ = 28						; size = 2
?DirectionTo@@YAEFFFFFF@Z PROC				; DirectionTo

; 280  : CampaignHeading DirectionTo(GridIndex ox, GridIndex oy, GridIndex tx, GridIndex ty, GridIndex cx, GridIndex cy){

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 281  : 	int				dx,dy;
; 282  : 	GridIndex		nx,ny;
; 283  : 	float			d,td;
; 284  : 
; 285  : 	dx = tx-ox;

	movsx	eax, WORD PTR _tx$[ebp]
	movsx	ecx, WORD PTR _ox$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _dx$[ebp], eax

; 286  : 	dy = ty-oy;

	movsx	edx, WORD PTR _ty$[ebp]
	movsx	eax, WORD PTR _oy$[ebp]
	sub	edx, eax
	mov	DWORD PTR _dy$[ebp], edx

; 287  : 	if (cx==tx && cy==ty)

	movsx	ecx, WORD PTR _cx$[ebp]
	movsx	edx, WORD PTR _tx$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN3@DirectionT
	movsx	eax, WORD PTR _cy$[ebp]
	movsx	ecx, WORD PTR _ty$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN3@DirectionT

; 288  : 		return Here;

	mov	al, 8
	jmp	$LN4@DirectionT
$LN3@DirectionT:

; 289  : 	td = Distance(ox,oy,tx,ty);

	movzx	edx, WORD PTR _ty$[ebp]
	push	edx
	movzx	eax, WORD PTR _tx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _oy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ox$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _td$[ebp]

; 290  : 	d = Distance(ox,oy,cx,cy);

	movzx	eax, WORD PTR _cy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _cx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _oy$[ebp]
	push	edx
	movzx	eax, WORD PTR _ox$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 291  : 	if (d < 1.9 || d > td)

	cvtss2sd xmm0, DWORD PTR _d$[ebp]
	movsd	xmm1, QWORD PTR __real@3ffe666666666666
	comisd	xmm1, xmm0
	ja	SHORT $LN1@DirectionT
	movss	xmm0, DWORD PTR _d$[ebp]
	comiss	xmm0, DWORD PTR _td$[ebp]
	jbe	SHORT $LN2@DirectionT
$LN1@DirectionT:

; 292  : 		return DirectionTo(cx,cy,tx,ty);

	movzx	ecx, WORD PTR _ty$[ebp]
	push	ecx
	movzx	edx, WORD PTR _tx$[ebp]
	push	edx
	movzx	eax, WORD PTR _cy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _cx$[ebp]
	push	ecx
	call	?DirectionTo@@YAEFFFF@Z			; DirectionTo
	add	esp, 16					; 00000010H
	jmp	SHORT $LN4@DirectionT
$LN2@DirectionT:

; 293  : 	d += 1.9F;

	movss	xmm0, DWORD PTR _d$[ebp]
	addss	xmm0, DWORD PTR __real@3ff33333
	movss	DWORD PTR _d$[ebp], xmm0

; 294  : 	nx = (short)(ox+(GridIndex)(d/td*dx));

	movsx	edx, WORD PTR _ox$[ebp]
	movss	xmm0, DWORD PTR _d$[ebp]
	divss	xmm0, DWORD PTR _td$[ebp]
	cvtsi2ss xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	add	edx, ecx
	mov	WORD PTR _nx$[ebp], dx

; 295  : 	ny = (short)(oy+(GridIndex)(d/td*dy));

	movsx	edx, WORD PTR _oy$[ebp]
	movss	xmm0, DWORD PTR _d$[ebp]
	divss	xmm0, DWORD PTR _td$[ebp]
	cvtsi2ss xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	add	edx, ecx
	mov	WORD PTR _ny$[ebp], dx

; 296  : 	return DirectionTo(cx,cy,nx,ny);

	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _cy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _cx$[ebp]
	push	edx
	call	?DirectionTo@@YAEFFFF@Z			; DirectionTo
	add	esp, 16					; 00000010H
$LN4@DirectionT:

; 297  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DirectionTo@@YAEFFFFFF@Z ENDP				; DirectionTo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_dx$ = -16						; size = 4
_dy$ = -12						; size = 4
_deg$ = -8						; size = 4
_h$ = -1						; size = 1
_ox$ = 8						; size = 2
_oy$ = 12						; size = 2
_tx$ = 16						; size = 2
_ty$ = 20						; size = 2
?DirectionTo@@YAEFFFF@Z PROC				; DirectionTo

; 261  : CampaignHeading DirectionTo (GridIndex ox, GridIndex oy, GridIndex tx, GridIndex ty){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 262  : 	int		dx,dy;
; 263  : 	float	deg;
; 264  : 	CampaignHeading	h;
; 265  : 
; 266  : 	dx = tx-ox;

	movsx	eax, WORD PTR _tx$[ebp]
	movsx	ecx, WORD PTR _ox$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _dx$[ebp], eax

; 267  : 	dy = ty-oy;

	movsx	edx, WORD PTR _ty$[ebp]
	movsx	eax, WORD PTR _oy$[ebp]
	sub	edx, eax
	mov	DWORD PTR _dy$[ebp], edx

; 268  : 	if (!dx && !dy){

	cmp	DWORD PTR _dx$[ebp], 0
	jne	SHORT $LN2@DirectionT
	cmp	DWORD PTR _dy$[ebp], 0
	jne	SHORT $LN2@DirectionT

; 269  : 		return Here;

	mov	al, 8
	jmp	$LN3@DirectionT
$LN2@DirectionT:

; 270  : 	}
; 271  : 	deg = (float)atan2((float)dx,(float)dy);

	cvtsi2ss xmm0, DWORD PTR _dy$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _dx$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _deg$[ebp]

; 272  : 	if (deg < 0){

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _deg$[ebp]
	jbe	SHORT $LN1@DirectionT

; 273  : 		deg += 2.0F*(float)PI;

	movss	xmm0, DWORD PTR _deg$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _deg$[ebp], xmm0
$LN1@DirectionT:

; 274  : 	}
; 275  : 	deg += .3839F;												// Shift by 22 degress;

	movss	xmm0, DWORD PTR _deg$[ebp]
	addss	xmm0, DWORD PTR __real@3ec48e8a
	movss	DWORD PTR _deg$[ebp], xmm0

; 276  : 	h = (CampaignHeading)(FloatToInt32((deg * 1.273F))%8);		// convert from 6.28 = 360 (2 PI) to 8=360;

	movss	xmm0, DWORD PTR _deg$[ebp]
	mulss	xmm0, DWORD PTR __real@3fa2f1aa
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN5@DirectionT
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN5@DirectionT:
	mov	BYTE PTR _h$[ebp], al

; 277  : 	return h;

	mov	al, BYTE PTR _h$[ebp]
$LN3@DirectionT:

; 278  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DirectionTo@@YAEFFFF@Z ENDP				; DirectionTo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_dx$ = -12						; size = 4
_dy$ = -8						; size = 4
_deg$ = -4						; size = 4
_ox$ = 8						; size = 2
_oy$ = 12						; size = 2
_tx$ = 16						; size = 2
_ty$ = 20						; size = 2
?AngleTo@@YAMFFFF@Z PROC				; AngleTo

; 247  : float AngleTo(GridIndex ox, GridIndex oy, GridIndex tx, GridIndex ty){

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 248  : 	int		dx,dy;
; 249  : 	float	deg;
; 250  : 
; 251  : 	dx = tx-ox;

	movsx	eax, WORD PTR _tx$[ebp]
	movsx	ecx, WORD PTR _ox$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _dx$[ebp], eax

; 252  : 	dy = ty-oy;

	movsx	edx, WORD PTR _ty$[ebp]
	movsx	eax, WORD PTR _oy$[ebp]
	sub	edx, eax
	mov	DWORD PTR _dy$[ebp], edx

; 253  : 	if (!dx && !dy)

	cmp	DWORD PTR _dx$[ebp], 0
	jne	SHORT $LN2@AngleTo
	cmp	DWORD PTR _dy$[ebp], 0
	jne	SHORT $LN2@AngleTo

; 254  : 		return 0.0F;

	fldz
	jmp	SHORT $LN3@AngleTo
$LN2@AngleTo:

; 255  : 	deg = (float)atan2((float)dx,(float)dy);

	cvtsi2ss xmm0, DWORD PTR _dy$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _dx$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _deg$[ebp]

; 256  : 	if (deg < 0)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _deg$[ebp]
	jbe	SHORT $LN1@AngleTo

; 257  : 		deg += 2.0F*(float)PI;

	movss	xmm0, DWORD PTR _deg$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _deg$[ebp], xmm0
$LN1@AngleTo:

; 258  : 	return deg;

	fld	DWORD PTR _deg$[ebp]
$LN3@AngleTo:

; 259  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AngleTo@@YAMFFFF@Z ENDP				; AngleTo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Trim@@YAXPAF0@Z PROC					; Trim

; 236  : void Trim(GridIndex* x, GridIndex* y){

	push	ebp
	mov	ebp, esp

; 237  : 	if (*x < 0)

	mov	eax, DWORD PTR _x$[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jge	SHORT $LN4@Trim

; 238  : 		*x = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _x$[ebp]
	mov	WORD PTR [eax], dx
$LN4@Trim:

; 239  : 	if (*x >= Map_Max_X)

	mov	ecx, DWORD PTR _x$[ebp]
	movsx	edx, WORD PTR [ecx]
	movsx	eax, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	cmp	edx, eax
	jl	SHORT $LN3@Trim

; 240  : 		*x = (GridIndex)(Map_Max_X-1);

	movsx	ecx, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	sub	ecx, 1
	mov	edx, DWORD PTR _x$[ebp]
	mov	WORD PTR [edx], cx
$LN3@Trim:

; 241  : 	if (*y < 0)

	mov	eax, DWORD PTR _y$[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jge	SHORT $LN2@Trim

; 242  : 		*y = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _y$[ebp]
	mov	WORD PTR [eax], dx
$LN2@Trim:

; 243  : 	if (*y >= Map_Max_Y)

	mov	ecx, DWORD PTR _y$[ebp]
	movsx	edx, WORD PTR [ecx]
	movsx	eax, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	cmp	edx, eax
	jl	SHORT $LN5@Trim

; 244  : 		*y = (GridIndex)(Map_Max_Y-1);

	movsx	ecx, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	sub	ecx, 1
	mov	edx, DWORD PTR _y$[ebp]
	mov	WORD PTR [edx], cx
$LN5@Trim:

; 245  : }

	pop	ebp
	ret	0
?Trim@@YAXPAF0@Z ENDP					; Trim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_distance$ = 8						; size = 4
_speed$ = 12						; size = 4
?TimeToArrive@@YAKMM@Z PROC				; TimeToArrive

; 426  : CampaignTime TimeToArrive (float distance, float speed){

	push	ebp
	mov	ebp, esp

; 427  : 	if (!distance){

	movss	xmm0, DWORD PTR _distance$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@TimeToArri

; 428  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@TimeToArri
$LN2@TimeToArri:

; 429  : 	}
; 430  : 	if (!speed){

	movss	xmm0, DWORD PTR _speed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@TimeToArri

; 431  : 		return 0xffffffff;

	mov	eax, -1
	jmp	SHORT $LN3@TimeToArri
$LN1@TimeToArri:

; 432  : 	}
; 433  : 	return  FloatToInt32((distance * CampaignHours) / speed);

	movss	xmm0, DWORD PTR _distance$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	divss	xmm0, DWORD PTR _speed$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
$LN3@TimeToArri:

; 434  : }

	pop	ebp
	ret	0
?TimeToArrive@@YAKMM@Z ENDP				; TimeToArrive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_n$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?UnpackXY@@YAXPAXPAF1@Z PROC				; UnpackXY

; 231  : void UnpackXY(void* n, GridIndex* x, GridIndex* y){

	push	ebp
	mov	ebp, esp

; 232  : 	*x =(GridIndex) ((long)n & 0xFFFF);

	mov	eax, DWORD PTR _n$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx], ax

; 233  : 	*y =(GridIndex) (((long)n>>16) & 0xFFFF);

	mov	edx, DWORD PTR _n$[ebp]
	sar	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _y$[ebp]
	mov	WORD PTR [eax], dx

; 234  : }

	pop	ebp
	ret	0
?UnpackXY@@YAXPAXPAF1@Z ENDP				; UnpackXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_t$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?PackXY@@YAPAXFF@Z PROC					; PackXY

; 224  : void* PackXY (GridIndex x, GridIndex y){

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	long     t;
; 226  : 
; 227  : 	t = x | (y<<16);

	movsx	eax, WORD PTR _x$[ebp]
	movsx	ecx, WORD PTR _y$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _t$[ebp], eax

; 228  : 	return (void*) t;

	mov	eax, DWORD PTR _t$[ebp]

; 229  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PackXY@@YAPAXFF@Z ENDP					; PackXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?GetRangeFt@@YAHMMMM@Z PROC				; GetRangeFt

; 220  : int GetRangeFt (float x, float y, float tx, float ty){

	push	ebp
	mov	ebp, esp

; 221  : 	return FloatToInt32(Distance(x,y,tx,ty));

	push	ecx
	movss	xmm0, DWORD PTR _ty$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tx$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Distance@@YAMMMMM@Z			; Distance
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4

; 222  : }

	pop	ebp
	ret	0
?GetRangeFt@@YAHMMMM@Z ENDP				; GetRangeFt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_theta$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?GetBearingDeg@@YAHMMMM@Z PROC				; GetBearingDeg

; 214  : int GetBearingDeg (float x, float y, float tx, float ty){

	push	ebp
	mov	ebp, esp
	push	ecx

; 215  : 	float		theta;
; 216  : 	theta = (float)atan ( (tx - x) / (ty - y) );

	movss	xmm0, DWORD PTR _tx$[ebp]
	subss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _ty$[ebp]
	subss	xmm1, DWORD PTR _y$[ebp]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _theta$[ebp]

; 217  : 	return FloatToInt32(theta * RTD);

	movss	xmm0, DWORD PTR _theta$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4

; 218  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBearingDeg@@YAHMMMM@Z ENDP				; GetBearingDeg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$2 = -56						; size = 12
_i$3 = -44						; size = 4
_d$ = -40						; size = 4
_n$ = -36						; size = 4
_lowest$ = -32						; size = 4
_r$ = -28						; size = 4
_f$ = -24						; size = 4
_fx$ = -20						; size = 2
_fy$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_team$ = 16						; size = 4
?DirectionTowardFriendly@@YAMFFH@Z PROC			; DirectionTowardFriendly

; 161  : float DirectionTowardFriendly (GridIndex x, GridIndex y, int team){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DirectionTowardFriendly@@YAMFFH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 162  : 	float       d,r,lowest=999.0F;

	movss	xmm0, DWORD PTR __real@4479c000
	movss	DWORD PTR _lowest$[ebp], xmm0

; 163  : 	GridIndex   fx,fy;
; 164  : 	Objective   f,n;
; 165  : 
; 166  : 
; 167  : 	r = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _r$[ebp], xmm0

; 168  : 	{
; 169  : 		VuListIterator	myit(FrontList);

	mov	eax, DWORD PTR ?FrontList@@3PAVFalconPrivateList@@A ; FrontList
	push	eax
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 170  : 		f = GetFirstObjective(&myit);

	lea	ecx, DWORD PTR _myit$2[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _f$[ebp], eax
$LN15@DirectionT:

; 171  : 		while (f != NULL){

	cmp	DWORD PTR _f$[ebp], 0
	je	$LN14@DirectionT

; 172  : 			// RV - Biker - This is a hack because JimG did introduce 
; 173  : 			if (f->GetType() != TYPE_BORDER || f->GetSType() != 2) {

	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 5
	jne	SHORT $LN12@DirectionT
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 2
	je	$LN10@DirectionT
$LN12@DirectionT:

; 174  : 			f->GetLocation(&fx,&fy);

	lea	ecx, DWORD PTR _fy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 175  : 			d = Distance(x,y,fx,fy);

	movzx	eax, WORD PTR _fy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _fx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 176  : 			if (d < lowest){

	movss	xmm0, DWORD PTR _lowest$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN10@DirectionT

; 177  : 				lowest = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _lowest$[ebp], xmm0

; 178  : 				r = (float)atan2((float)(fx-x),(float)(fy-y));

	movsx	ecx, WORD PTR _fy$[ebp]
	movsx	edx, WORD PTR _y$[ebp]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	eax, WORD PTR _fx$[ebp]
	movsx	ecx, WORD PTR _x$[ebp]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _r$[ebp]

; 179  : 				if (f->GetTeam() == team){

	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	eax, DWORD PTR _team$[ebp]
	jne	SHORT $LN10@DirectionT

; 180  : 					r += (float)PI;

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR __real@40490fdb
	movss	DWORD PTR _r$[ebp], xmm0
$LN10@DirectionT:

; 181  : 				}
; 182  : 			}
; 183  : 			}
; 184  : 			f = GetNextObjective(&myit);

	lea	ecx, DWORD PTR _myit$2[ebp]
	push	ecx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _f$[ebp], eax

; 185  : 		}

	jmp	$LN15@DirectionT
$LN14@DirectionT:

; 186  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 187  : 	// Problem - this breaks down if we're to near the front. Try another algorythm for close in stuff:
; 188  : 	if (lowest < 5){

	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR _lowest$[ebp]
	jbe	$LN4@DirectionT

; 189  : 		int		i;
; 190  : 
; 191  : 		f = FindNearestObjective(x,y,NULL);

	push	0
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _f$[ebp], eax

; 192  : 		if ((f == NULL) || !f->IsFrontline()){

	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN7@DirectionT
	mov	ecx, DWORD PTR _f$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	jne	SHORT $LN8@DirectionT
$LN7@DirectionT:

; 193  : 			// This won't work unless we find a frontline objective. So just use the value from above
; 194  : 			return r;		

	fld	DWORD PTR _r$[ebp]
	jmp	$LN16@DirectionT
$LN8@DirectionT:

; 195  : 		}
; 196  : 		for (i=0,lowest=999.0F; i<f->static_data.links; i++){

	mov	DWORD PTR _i$3[ebp], 0
	movss	xmm0, DWORD PTR __real@4479c000
	movss	DWORD PTR _lowest$[ebp], xmm0
	jmp	SHORT $LN6@DirectionT
$LN5@DirectionT:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN6@DirectionT:
	mov	edx, DWORD PTR _f$[ebp]
	movzx	eax, BYTE PTR [edx+225]
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN4@DirectionT

; 197  : 			n = f->GetNeighbor(i);

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _n$[ebp], eax

; 198  : 			if (n && n->GetTeam() != f->GetTeam()){

	cmp	DWORD PTR _n$[ebp], 0
	je	$LN1@DirectionT
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	$LN1@DirectionT

; 199  : 				n->GetLocation(&fx,&fy);

	lea	edx, DWORD PTR _fy$[ebp]
	push	edx
	lea	eax, DWORD PTR _fx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 200  : 				d = Distance(x,y,fx,fy);

	movzx	ecx, WORD PTR _fy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _fx$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 201  : 				if (d < lowest){

	movss	xmm0, DWORD PTR _lowest$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN1@DirectionT

; 202  : 					lowest = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _lowest$[ebp], xmm0

; 203  : 					r = (float)atan2((float)(fx-x),(float)(fy-y));

	movsx	edx, WORD PTR _fy$[ebp]
	movsx	eax, WORD PTR _y$[ebp]
	sub	edx, eax
	cvtsi2ss xmm0, edx
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	ecx, WORD PTR _fx$[ebp]
	movsx	edx, WORD PTR _x$[ebp]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _r$[ebp]

; 204  : 					if (n->GetTeam() != team)

	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	ecx, DWORD PTR _team$[ebp]
	je	SHORT $LN1@DirectionT

; 205  : 						r += (float)PI;

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR __real@40490fdb
	movss	DWORD PTR _r$[ebp], xmm0
$LN1@DirectionT:

; 206  : 				}
; 207  : 			}
; 208  : 		}

	jmp	$LN5@DirectionT
$LN4@DirectionT:

; 209  : 	}
; 210  : 
; 211  : 	return r;

	fld	DWORD PTR _r$[ebp]
$LN16@DirectionT:

; 212  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DirectionTowardFriendly@@YAMFFH@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?DirectionTowardFriendly@@YAMFFH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DirectionTowardFriendly@@YAMFFH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DirectionTowardFriendly@@YAMFFH@Z ENDP			; DirectionTowardFriendly
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$2 = -56						; size = 12
_r$ = -44						; size = 4
_n$ = -40						; size = 4
_i$3 = -36						; size = 4
_d$ = -32						; size = 4
_lowest$ = -28						; size = 4
_f$ = -24						; size = 4
_fx$ = -20						; size = 2
_fy$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?DirectionToFront@@YAMFF@Z PROC				; DirectionToFront

; 112  : float DirectionToFront(GridIndex x, GridIndex y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DirectionToFront@@YAMFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 113  : 	float       d,r,lowest=999.0F;

	movss	xmm0, DWORD PTR __real@4479c000
	movss	DWORD PTR _lowest$[ebp], xmm0

; 114  : 	GridIndex   fx,fy;
; 115  : 	Objective   f,n;
; 116  : 
; 117  : 	r = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _r$[ebp], xmm0

; 118  : 	{
; 119  : 		VuListIterator	myit(FrontList);

	mov	eax, DWORD PTR ?FrontList@@3PAVFalconPrivateList@@A ; FrontList
	push	eax
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 120  : 		f = GetFirstObjective(&myit);

	lea	ecx, DWORD PTR _myit$2[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _f$[ebp], eax
$LN12@DirectionT:

; 121  : 		while (f != NULL){

	cmp	DWORD PTR _f$[ebp], 0
	je	$LN11@DirectionT

; 122  : 			// RV - Biker - This is a hack because JimG did introduce 
; 123  : 			if (f->GetType() != TYPE_BORDER || f->GetSType() != 2) {

	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 5
	jne	SHORT $LN9@DirectionT
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 2
	je	$LN8@DirectionT
$LN9@DirectionT:

; 124  : 			f->GetLocation(&fx,&fy);

	lea	ecx, DWORD PTR _fy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 125  : 			d = Distance(x,y,fx,fy);

	movzx	eax, WORD PTR _fy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _fx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 126  : 			if (d < lowest){

	movss	xmm0, DWORD PTR _lowest$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN8@DirectionT

; 127  : 				lowest = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _lowest$[ebp], xmm0

; 128  : 				r = (float)atan2((float)(fx-x),(float)(fy-y));

	movsx	ecx, WORD PTR _fy$[ebp]
	movsx	edx, WORD PTR _y$[ebp]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	eax, WORD PTR _fx$[ebp]
	movsx	ecx, WORD PTR _x$[ebp]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _r$[ebp]
$LN8@DirectionT:

; 129  : 			}
; 130  : 			}
; 131  : 			f = GetNextObjective(&myit);

	lea	edx, DWORD PTR _myit$2[ebp]
	push	edx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _f$[ebp], eax

; 132  : 		}

	jmp	$LN12@DirectionT
$LN11@DirectionT:

; 133  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 134  : 
; 135  : 	// Problem - this breaks down if we're to near the front. Try another algorythm for close in stuff:
; 136  : 	if (lowest < 5){

	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR _lowest$[ebp]
	jbe	$LN3@DirectionT

; 137  : 		int		i;
; 138  : 
; 139  : 		f = FindNearestObjective(x, y, NULL);

	push	0
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAM@Z ; FindNearestObjective
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _f$[ebp], eax

; 140  : 		if (!f->IsFrontline()){

	mov	ecx, DWORD PTR _f$[ebp]
	call	?IsFrontline@ObjectiveClass@@QAEHXZ	; ObjectiveClass::IsFrontline
	test	eax, eax
	jne	SHORT $LN6@DirectionT

; 141  : 			return r;		// This won't work unless we find a frontline objective. So just use the value from above

	fld	DWORD PTR _r$[ebp]
	jmp	$LN13@DirectionT
$LN6@DirectionT:

; 142  : 		}
; 143  : 
; 144  : 		for (i=0,lowest=999.0F; i<f->static_data.links; i++){

	mov	DWORD PTR _i$3[ebp], 0
	movss	xmm0, DWORD PTR __real@4479c000
	movss	DWORD PTR _lowest$[ebp], xmm0
	jmp	SHORT $LN5@DirectionT
$LN4@DirectionT:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN5@DirectionT:
	mov	eax, DWORD PTR _f$[ebp]
	movzx	ecx, BYTE PTR [eax+225]
	cmp	DWORD PTR _i$3[ebp], ecx
	jge	$LN3@DirectionT

; 145  : 			n = f->GetNeighbor(i);

	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetNeighbor@ObjectiveClass@@QAEPAV1@H@Z ; ObjectiveClass::GetNeighbor
	mov	DWORD PTR _n$[ebp], eax

; 146  : 			if (n && n->GetTeam() != f->GetTeam()){

	cmp	DWORD PTR _n$[ebp], 0
	je	$LN1@DirectionT
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	$LN1@DirectionT

; 147  : 				n->GetLocation(&fx, &fy);

	lea	edx, DWORD PTR _fy$[ebp]
	push	edx
	lea	eax, DWORD PTR _fx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 148  : 				d = Distance(x, y, fx, fy);

	movzx	ecx, WORD PTR _fy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _fx$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 149  : 				if (d < lowest){

	movss	xmm0, DWORD PTR _lowest$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN1@DirectionT

; 150  : 					lowest = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _lowest$[ebp], xmm0

; 151  : 					r = (float)atan2((float)(fx-x),(float)(fy-y));

	movsx	edx, WORD PTR _fy$[ebp]
	movsx	eax, WORD PTR _y$[ebp]
	sub	edx, eax
	cvtsi2ss xmm0, edx
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	ecx, WORD PTR _fx$[ebp]
	movsx	edx, WORD PTR _x$[ebp]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _r$[ebp]
$LN1@DirectionT:

; 152  : 				}
; 153  : 			}
; 154  : 		}

	jmp	$LN4@DirectionT
$LN3@DirectionT:

; 155  : 	}
; 156  : 	return r;

	fld	DWORD PTR _r$[ebp]
$LN13@DirectionT:

; 157  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DirectionToFront@@YAMFF@Z$0:
	lea	ecx, DWORD PTR _myit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?DirectionToFront@@YAMFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DirectionToFront@@YAMFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DirectionToFront@@YAMFF@Z ENDP				; DirectionToFront
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -48						; size = 12
$T2 = -36						; size = 4
_d$ = -32						; size = 4
_lowest$ = -28						; size = 4
_f$ = -24						; size = 4
_fx$ = -20						; size = 2
_fy$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?DistanceToFront@@YAMFF@Z PROC				; DistanceToFront

; 92   : float DistanceToFront(GridIndex x, GridIndex y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DistanceToFront@@YAMFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 93   : 	float       d,lowest=999.0F;

	movss	xmm0, DWORD PTR __real@4479c000
	movss	DWORD PTR _lowest$[ebp], xmm0

; 94   : 	GridIndex   fx,fy;
; 95   : 	Objective   f;
; 96   : 	VuListIterator	myit(FrontList);

	mov	eax, DWORD PTR ?FrontList@@3PAVFalconPrivateList@@A ; FrontList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 97   : 	f = GetFirstObjective(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _f$[ebp], eax
$LN5@DistanceTo:

; 98   : 	while (f != NULL){

	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN4@DistanceTo

; 99   : 		// RV - Biker - This is a hack because JimG did introduce 
; 100  : 		if (f->GetType() != TYPE_BORDER || f->GetSType() != 2) {

	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 5
	jne	SHORT $LN2@DistanceTo
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 2
	je	SHORT $LN1@DistanceTo
$LN2@DistanceTo:

; 101  : 		f->GetLocation(&fx, &fy);

	lea	ecx, DWORD PTR _fy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _f$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 102  : 		d = Distance(x, y, fx, fy);

	movzx	eax, WORD PTR _fy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _fx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 103  : 		if (d < lowest){

	movss	xmm0, DWORD PTR _lowest$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN1@DistanceTo

; 104  : 			lowest = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _lowest$[ebp], xmm0
$LN1@DistanceTo:

; 105  : 		}
; 106  : 		}
; 107  : 		f = GetNextObjective(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _f$[ebp], eax

; 108  : 	}

	jmp	SHORT $LN5@DistanceTo
$LN4@DistanceTo:

; 109  : 	return lowest;

	movss	xmm0, DWORD PTR _lowest$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	fld	DWORD PTR $T2[ebp]

; 110  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DistanceToFront@@YAMFF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?DistanceToFront@@YAMFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DistanceToFront@@YAMFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DistanceToFront@@YAMFF@Z ENDP				; DistanceToFront
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
tv81 = -4						; size = 4
_ox$ = 8						; size = 4
_oy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
?DistSqu@@YAMMMMM@Z PROC				; DistSqu

; 88   : float DistSqu(float ox, float oy, float dx, float dy){

	push	ebp
	mov	ebp, esp
	push	ecx

; 89   : 	return (float)((ox-dx)*(ox-dx) + (oy-dy)*(oy-dy));

	movss	xmm0, DWORD PTR _ox$[ebp]
	subss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _ox$[ebp]
	subss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _oy$[ebp]
	subss	xmm1, DWORD PTR _dy$[ebp]
	movss	xmm2, DWORD PTR _oy$[ebp]
	subss	xmm2, DWORD PTR _dy$[ebp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR tv81[ebp], xmm0
	fld	DWORD PTR tv81[ebp]

; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DistSqu@@YAMMMMM@Z ENDP				; DistSqu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_ox$ = 8						; size = 4
_oy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
?Distance@@YAMMMMM@Z PROC				; Distance

; 84   : float Distance (float ox, float oy, float dx, float dy){

	push	ebp
	mov	ebp, esp

; 85   : 	return (float)sqrt(((ox-dx)*(ox-dx) + (oy-dy)*(oy-dy)));

	movss	xmm0, DWORD PTR _ox$[ebp]
	subss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _ox$[ebp]
	subss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _oy$[ebp]
	subss	xmm1, DWORD PTR _dy$[ebp]
	movss	xmm2, DWORD PTR _oy$[ebp]
	subss	xmm2, DWORD PTR _dy$[ebp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4

; 86   : }

	pop	ebp
	ret	0
?Distance@@YAMMMMM@Z ENDP				; Distance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
tv90 = -8						; size = 4
tv88 = -4						; size = 4
_ox$ = 8						; size = 2
_oy$ = 12						; size = 2
_dx$ = 16						; size = 2
_dy$ = 20						; size = 2
?Distance@@YAMFFFF@Z PROC				; Distance

; 75   : float Distance(GridIndex ox, GridIndex oy, GridIndex dx, GridIndex dy){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 76   : 	return (float)sqrt((float)((ox-dx)*(ox-dx) + (oy-dy)*(oy-dy))) * GRID_SIZE_KM;

	movsx	eax, WORD PTR _ox$[ebp]
	movsx	ecx, WORD PTR _dx$[ebp]
	sub	eax, ecx
	movsx	edx, WORD PTR _ox$[ebp]
	movsx	ecx, WORD PTR _dx$[ebp]
	sub	edx, ecx
	imul	eax, edx
	movsx	edx, WORD PTR _oy$[ebp]
	movsx	ecx, WORD PTR _dy$[ebp]
	sub	edx, ecx
	movsx	ecx, WORD PTR _oy$[ebp]
	movsx	esi, WORD PTR _dy$[ebp]
	sub	ecx, esi
	imul	edx, ecx
	add	eax, edx
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv88[ebp]
	movss	xmm0, DWORD PTR tv88[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]

; 77   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?Distance@@YAMFFFF@Z ENDP				; Distance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_ox$ = 8						; size = 2
_oy$ = 12						; size = 2
_dx$ = 16						; size = 2
_dy$ = 20						; size = 2
?DistSqu@@YAHFFFF@Z PROC				; DistSqu

; 79   : int DistSqu (GridIndex ox, GridIndex oy, GridIndex dx, GridIndex dy){

	push	ebp
	mov	ebp, esp
	push	esi

; 80   : 	return ((ox-dx)*(ox-dx) + (oy-dy)*(oy-dy));

	movsx	eax, WORD PTR _ox$[ebp]
	movsx	ecx, WORD PTR _dx$[ebp]
	sub	eax, ecx
	movsx	edx, WORD PTR _ox$[ebp]
	movsx	ecx, WORD PTR _dx$[ebp]
	sub	edx, ecx
	imul	eax, edx
	movsx	edx, WORD PTR _oy$[ebp]
	movsx	ecx, WORD PTR _dy$[ebp]
	sub	edx, ecx
	movsx	ecx, WORD PTR _oy$[ebp]
	movsx	esi, WORD PTR _dy$[ebp]
	sub	ecx, esi
	imul	edx, ecx
	add	eax, edx

; 81   : }

	pop	esi
	pop	ebp
	ret	0
?DistSqu@@YAHFFFF@Z ENDP				; DistSqu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Moving@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Moving@UnitClass@@QBEHXZ PROC				; UnitClass::Moving, COMDAT
; _this$ = ecx

; 316  : 	int Moving() const								{ return (int)unit_flags & U_MOVING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1024				; 00000400H
	mov	esp, ebp
	pop	ebp
	ret	0
?Moving@UnitClass@@QBEHXZ ENDP				; UnitClass::Moving
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetObjectiveStatus@ObjectiveClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ PROC		; ObjectiveClass::GetObjectiveStatus, COMDAT
; _this$ = ecx

; 270  : 	uchar GetObjectiveStatus (void)							{	return obj_data.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+199]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectiveStatus@ObjectiveClass@@QAEEXZ ENDP		; ObjectiveClass::GetObjectiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsFrontline@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFrontline@ObjectiveClass@@QAEHXZ PROC		; ObjectiveClass::IsFrontline, COMDAT
; _this$ = ecx

; 186  : 	int IsFrontline (void)									{ return (int)(O_FRONTLINE & obj_data.obj_flags); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFrontline@ObjectiveClass@@QAEHXZ ENDP		; ObjectiveClass::IsFrontline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_e$ = -4						; size = 4
_id$ = 8						; size = 8
?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z PROC	; FindObjective

; 457  : Objective FindObjective(VU_ID id){

	push	ebp
	mov	ebp, esp
	push	ecx

; 458  : 	VuEntity*		e;
; 459  : 	e = vuDatabase->Find(id);

	mov	eax, DWORD PTR _id$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _e$[ebp], eax

; 460  : 	if (e && GetEntityClass(e) == CLASS_OBJECTIVE){

	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN1@FindObject
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?GetEntityClass@@YAFPAVVuEntity@@@Z	; GetEntityClass
	add	esp, 4
	cwde
	cmp	eax, 4
	jne	SHORT $LN1@FindObject

; 461  : 		return (Objective)e;

	mov	eax, DWORD PTR _e$[ebp]
	jmp	SHORT $LN2@FindObject
$LN1@FindObject:

; 462  : 	}
; 463  : 	return NULL;

	xor	eax, eax
$LN2@FindObject:

; 464  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindObjective@@YAPAVObjectiveClass@@VVU_ID@@@Z ENDP	; FindObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camplib\find.cpp
_TEXT	SEGMENT
_myit$ = -44						; size = 12
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_u$ = -24						; size = 4
_y$ = -20						; size = 2
_x$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_X$ = 8							; size = 2
_Y$ = 12						; size = 2
?GetUnitByXY@@YAPAVUnitClass@@FF@Z PROC			; GetUnitByXY

; 686  : Unit GetUnitByXY(GridIndex X, GridIndex Y){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetUnitByXY@@YAPAVUnitClass@@FF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 687  : 	Unit        u;
; 688  : 	GridIndex   x,y;
; 689  : 
; 690  : 	VuListIterator	myit(AllUnitList);

	mov	eax, DWORD PTR ?AllUnitList@@3PAVVuLinkedList@@A ; AllUnitList
	push	eax
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 691  : 	u = GetFirstUnit(&myit);

	lea	ecx, DWORD PTR _myit$[ebp]
	push	ecx
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax
$LN3@GetUnitByX:

; 692  : 	while (u != NULL){

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN2@GetUnitByX

; 693  : 		u->GetLocation(&x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 694  : 		if (x == X && y == Y){

	movsx	ecx, WORD PTR _x$[ebp]
	movsx	edx, WORD PTR _X$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1@GetUnitByX
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR _Y$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@GetUnitByX

; 695  : 			return u;

	mov	edx, DWORD PTR _u$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN4@GetUnitByX
$LN1@GetUnitByX:

; 696  : 		}
; 697  : 		u = GetNextUnit(&myit);

	lea	eax, DWORD PTR _myit$[ebp]
	push	eax
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _u$[ebp], eax

; 698  : 	}

	jmp	SHORT $LN3@GetUnitByX
$LN2@GetUnitByX:

; 699  : 	return NULL;

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]
$LN4@GetUnitByX:

; 700  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetUnitByXY@@YAPAVUnitClass@@FF@Z$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?GetUnitByXY@@YAPAVUnitClass@@FF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetUnitByXY@@YAPAVUnitClass@@FF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetUnitByXY@@YAPAVUnitClass@@FF@Z ENDP			; GetUnitByXY
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ PROC ; ListClass::GetFirstElement, COMDAT
; _this$ = ecx

; 82   : 		ListElementClass* GetFirstElement(void)		{ return front; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstElement@ListClass@@QAEPAVListElementClass@@XZ ENDP ; ListClass::GetFirstElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetNext@ListElementClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNext@ListElementClass@@QAEPAV1@XZ PROC		; ListElementClass::GetNext, COMDAT
; _this$ = ecx

; 45   : 		ListElementClass* GetNext(void)				{ return next; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@ListElementClass@@QAEPAV1@XZ ENDP		; ListElementClass::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\listadt.h
;	COMDAT ?GetUserData@ListElementClass@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserData@ListElementClass@@QAEPAXXZ PROC		; ListElementClass::GetUserData, COMDAT
; _this$ = ecx

; 39   : 		void* GetUserData(void)						{ return user_data; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUserData@ListElementClass@@QAEPAXXZ ENDP		; ListElementClass::GetUserData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
END
