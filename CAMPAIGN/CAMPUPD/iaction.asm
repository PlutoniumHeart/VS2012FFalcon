; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPUPD\iaction.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_03PCBIACNO@an2?$AA@			; `string'
PUBLIC	??_C@_04NKLDBECG@an24?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	??_C@_04FGLDPHIB@c130?$AA@			; `string'
PUBLIC	??_C@_04HEDHDHAF@il76?$AA@			; `string'
PUBLIC	??_C@_02EMABMJMJ@y8?$AA@			; `string'
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	??_C@_03KHMOAJNB@a10?$AA@			; `string'
PUBLIC	??_C@_03MJCIDIBA@f4g?$AA@			; `string'
PUBLIC	??_C@_05NIABIBOH@fb111?$AA@			; `string'
PUBLIC	??_C@_04OMHPNIGA@il28?$AA@			; `string'
PUBLIC	??_C@_05HPGMAJJE@mig27?$AA@			; `string'
PUBLIC	??_C@_04FOJADBBL@su25?$AA@			; `string'
PUBLIC	??_C@_04PINBODCG@ah64?$AA@			; `string'
PUBLIC	??_C@_05NDGEPKLN@ah64d?$AA@			; `string'
PUBLIC	??_C@_04KJEDMPFA@ka50?$AA@			; `string'
PUBLIC	??_C@_04ICJEMBJO@mi24?$AA@			; `string'
PUBLIC	??_C@_03KAMHKBAN@a50?$AA@			; `string'
PUBLIC	??_C@_02LKMJEKBG@e3?$AA@			; `string'
PUBLIC	??_C@_04BAIJOIMC@b52g?$AA@			; `string'
PUBLIC	??_C@_04MFNLAAJB@tu16?$AA@			; `string'
PUBLIC	??_C@_05KLBFFFIJ@ef111?$AA@			; `string'
PUBLIC	??_C@_04DILMACGB@f14a?$AA@			; `string'
PUBLIC	??_C@_04LEIAKNE@f15c?$AA@			; `string'
PUBLIC	??_C@_03PLBOFKJC@f4e?$AA@			; `string'
PUBLIC	??_C@_03PKNMDAKF@f5e?$AA@			; `string'
PUBLIC	??_C@_05ODKJJKED@mig19?$AA@			; `string'
PUBLIC	??_C@_05CJDGKOBC@mig21?$AA@			; `string'
PUBLIC	??_C@_05BLAAMMJA@mig23?$AA@			; `string'
PUBLIC	??_C@_05ENFKGLBG@mig25?$AA@			; `string'
PUBLIC	??_C@_05OBOPCEBK@mig29?$AA@			; `string'
PUBLIC	??_C@_04GMKGFDJJ@su27?$AA@			; `string'
PUBLIC	??_C@_04NCJGDKFI@f117?$AA@			; `string'
PUBLIC	??_C@_04FNBCKNFC@f15e?$AA@			; `string'
PUBLIC	??_C@_04JAOLEIN@f16c?$AA@			; `string'
PUBLIC	??_C@_04DBKGPLAF@f18a?$AA@			; `string'
PUBLIC	??_C@_04EMNBAPEA@f18d?$AA@			; `string'
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	??_C@_05KKDNEIKF@md500?$AA@			; `string'
PUBLIC	??_C@_05PCMBMNEH@oh58d?$AA@			; `string'
PUBLIC	??_C@_04OKLEBKIL@il78?$AA@			; `string'
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	??_C@_04EEDKPAH@kc10?$AA@			; `string'
PUBLIC	??_C@_05DOBHKKOD@kc135?$AA@			; `string'
PUBLIC	??_C@_05HMLDDOPL@tu16n?$AA@			; `string'
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	??_C@_04KKLIDHOL@ch47?$AA@			; `string'
PUBLIC	??_C@_04CIKKHBDP@uh1n?$AA@			; `string'
PUBLIC	??_C@_05IEPDJIOE@uh60l?$AA@			; `string'
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	??_C@_0M@DODAJCBD@chinese_t80?$AA@		; `string'
PUBLIC	??_C@_0M@EDEHGGFG@chinese_t85?$AA@		; `string'
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	??_C@_0M@DPPCPICE@chinese_t90?$AA@		; `string'
PUBLIC	??_C@_0M@JGNABIBD@chinese_sa6?$AA@		; `string'
PUBLIC	??_C@_0N@KFCBPOJD@chinese_zu23?$AA@		; `string'
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	??_C@_0L@EMLLFGBD@chinese_hq?$AA@		; `string'
PUBLIC	??_C@_0M@BIJDLFIB@chinese_inf?$AA@		; `string'
PUBLIC	??_C@_0N@BDMJCCIG@chinese_mech?$AA@		; `string'
PUBLIC	??_C@_0L@EFNDCLMD@chinese_sp?$AA@		; `string'
PUBLIC	??_C@_0M@LAOPLHKJ@chinese_art?$AA@		; `string'
PUBLIC	??_C@_08KBMHKHHP@dprk_aaa?$AA@			; `string'
PUBLIC	??_C@_08MKEBDGPM@dprk_sa2?$AA@			; `string'
PUBLIC	??_C@_08NDFKAHLN@dprk_sa3?$AA@			; `string'
PUBLIC	??_C@_08IFAAKADL@dprk_sa5?$AA@			; `string'
PUBLIC	??_C@_0P@KNOHCIAC@dprk_airmobile?$AA@		; `string'
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	??_C@_08HDGCBOOO@dprk_t55?$AA@			; `string'
PUBLIC	??_C@_08DOGFDGHA@dprk_t62?$AA@			; `string'
PUBLIC	??_C@_07GJJCHJLB@dprk_hq?$AA@			; `string'
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	??_C@_08CAGOFOGK@dprk_inf?$AA@			; `string'
PUBLIC	??_C@_09BGNEKAJH@dprk_bmp1?$AA@			; `string'
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	??_C@_09DNPJPDFE@dprk_bmp2?$AA@			; `string'
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	??_C@_09GFMKPJDJ@dprk_bm21?$AA@			; `string'
PUBLIC	??_C@_0L@PCBJIFDK@dprk_sp122?$AA@		; `string'
PUBLIC	??_C@_0L@PHFGJDLP@dprk_sp152?$AA@		; `string'
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	??_C@_09BALFFPAB@dprk_frog?$AA@			; `string'
PUBLIC	??_C@_09GKIMACGM@dprk_scud?$AA@			; `string'
PUBLIC	??_C@_0N@FOBFEEPM@dprk_tow_art?$AA@		; `string'
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	??_C@_07GHEPEGGD@rok_aaa?$AA@			; `string'
PUBLIC	??_C@_08EHGOHAHL@rok_hawk?$AA@			; `string'
PUBLIC	??_C@_08IGCFNKKO@rok_nike?$AA@			; `string'
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	??_C@_07CMJHPDJN@rok_m48?$AA@			; `string'
PUBLIC	??_C@_06ONKKNHIL@rok_hq?$AA@			; `string'
PUBLIC	??_C@_07OGOGLPHG@rok_inf?$AA@			; `string'
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	??_C@_0L@PGNMIHPL@rok_marine?$AA@		; `string'
PUBLIC	??_C@_08ECPGNGIH@rok_m113?$AA@			; `string'
PUBLIC	??_C@_06OEMCKKFL@rok_sp?$AA@			; `string'
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	??_C@_08KPBBFOPE@rok_m198?$AA@			; `string'
PUBLIC	??_C@_0M@NIMBGNOH@soviet_sa15?$AA@		; `string'
PUBLIC	??_C@_0L@NFLEGPEM@soviet_sa6?$AA@		; `string'
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	??_C@_0L@ELDHECMC@soviet_sa8?$AA@		; `string'
PUBLIC	??_C@_0L@LFKCCLOB@soviet_air?$AA@		; `string'
PUBLIC	??_C@_0L@EEDOMAPD@soviet_t72?$AA@		; `string'
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	??_C@_0L@HNFEOFEM@soviet_t80?$AA@		; `string'
PUBLIC	??_C@_0L@IDKEMCH@soviet_eng?$AA@		; `string'
PUBLIC	??_C@_09EBCFGDHL@soviet_hq?$AA@			; `string'
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	??_C@_0L@FLPHMCNO@soviet_inf?$AA@		; `string'
PUBLIC	??_C@_0O@NBJGKMNH@soviet_marine?$AA@		; `string'
PUBLIC	??_C@_0M@OIFOAKJE@soviet_mech?$AA@		; `string'
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_0M@KGPLOMGF@soviet_scud?$AA@		; `string'
PUBLIC	??_C@_0N@JOAAOKLH@soviet_frog7?$AA@		; `string'
PUBLIC	??_C@_09EIENBOKL@soviet_sp?$AA@			; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	??_C@_0L@GILIIMGD@soviet_sup?$AA@		; `string'
PUBLIC	??_C@_0M@BICGPBGL@soveit_bm21?$AA@		; `string'
PUBLIC	??_C@_0M@NEMKODHF@soviet_bm24?$AA@		; `string'
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_0O@CPJIFHDA@soviet_bm9a52?$AA@		; `string'
PUBLIC	??_C@_0L@PDILMAPG@soviet_art?$AA@		; `string'
PUBLIC	??_C@_0L@HHFOKCEB@us_patriot?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	??_C@_07KDFKKPKF@us_hawk?$AA@			; `string'
PUBLIC	??_C@_06DCKDIDMF@us_air?$AA@			; `string'
PUBLIC	??_C@_05LOJMBIAE@us_m1?$AA@			; `string'
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06NNNKHIHH@us_m60?$AA@			; `string'
PUBLIC	??_C@_06PCNFNPPC@us_cav?$AA@			; `string'
PUBLIC	??_C@_06IPDLOEAD@us_eng?$AA@			; `string'
PUBLIC	??_C@_05EICOJFOK@us_hq?$AA@			; `string'
PUBLIC	??_C@_06NMPGGKPK@us_inf?$AA@			; `string'
PUBLIC	??_C@_08EEGOPPDC@us_lav25?$AA@			; `string'
PUBLIC	??_C@_05JFLBELMH@us_m2?$AA@			; `string'
PUBLIC	??_C@_07BNAAKCLK@us_mlrs?$AA@			; `string'
PUBLIC	??_C@_07FNOPILOE@us_m109?$AA@			; `string'
PUBLIC	??_C@_06OPLJCEEH@us_sup?$AA@			; `string'
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?start_time@instant_action@@1JA			; instant_action::start_time
PUBLIC	?start_x@instant_action@@1MA			; instant_action::start_x
PUBLIC	?start_y@instant_action@@1MA			; instant_action::start_y
PUBLIC	?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
PUBLIC	?generic_skill@instant_action@@1HA		; instant_action::generic_skill
PUBLIC	?current_wave@instant_action@@1HA		; instant_action::current_wave
PUBLIC	?current_mode@instant_action@@1DA		; instant_action::current_mode
PUBLIC	?wave_time@instant_action@@1KA			; instant_action::wave_time
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?wave_created@instant_action@@1HA		; instant_action::wave_created
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
_BSS	SEGMENT
?start_time@instant_action@@1JA DD 01H DUP (?)		; instant_action::start_time
?player_flight@instant_action@@1PAVFlightClass@@A DD 01H DUP (?) ; instant_action::player_flight
?generic_skill@instant_action@@1HA DD 01H DUP (?)	; instant_action::generic_skill
?current_wave@instant_action@@1HA DD 01H DUP (?)	; instant_action::current_wave
?wave_time@instant_action@@1KA DD 01H DUP (?)		; instant_action::wave_time
?wave_created@instant_action@@1HA DD 01H DUP (?)	; instant_action::wave_created
_BSS	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
_groundStuff DD	041H
	DD	041200000r			; 10
	DD	044H
	DD	041200000r			; 10
	DD	03fH
	DD	041200000r			; 10
	DD	03dH
	DD	041700000r			; 15
	DD	045H
	DD	041200000r			; 10
	DD	047H
	DD	041700000r			; 15
	DD	048H
	DD	041200000r			; 10
	DD	038H
	DD	041200000r			; 10
	DD	042H
	DD	041200000r			; 10
	DD	046H
	DD	041200000r			; 10
	DD	039H
	DD	041a00000r			; 20
	DD	03eH
	DD	041700000r			; 15
	DD	040H
	DD	040e00000r			; 7
	DD	043H
	DD	041200000r			; 10
	DD	03bH
	DD	042200000r			; 40
	DD	057H
	DD	041700000r			; 15
	DD	03aH
	DD	041700000r			; 15
	DD	064H
	DD	041200000r			; 10
	DD	055H
	DD	041400000r			; 12
	DD	05eH
	DD	041200000r			; 10
	DD	032H
	DD	041200000r			; 10
	DD	031H
	DD	041f00000r			; 30
	DD	058H
	DD	041200000r			; 10
	DD	053H
	DD	041200000r			; 10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06OPLJCEEH@us_sup?$AA@
CONST	SEGMENT
??_C@_06OPLJCEEH@us_sup?$AA@ DB 'us_sup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FNOPILOE@us_m109?$AA@
CONST	SEGMENT
??_C@_07FNOPILOE@us_m109?$AA@ DB 'us_m109', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNAAKCLK@us_mlrs?$AA@
CONST	SEGMENT
??_C@_07BNAAKCLK@us_mlrs?$AA@ DB 'us_mlrs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JFLBELMH@us_m2?$AA@
CONST	SEGMENT
??_C@_05JFLBELMH@us_m2?$AA@ DB 'us_m2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEGOPPDC@us_lav25?$AA@
CONST	SEGMENT
??_C@_08EEGOPPDC@us_lav25?$AA@ DB 'us_lav25', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMPGGKPK@us_inf?$AA@
CONST	SEGMENT
??_C@_06NMPGGKPK@us_inf?$AA@ DB 'us_inf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EICOJFOK@us_hq?$AA@
CONST	SEGMENT
??_C@_05EICOJFOK@us_hq?$AA@ DB 'us_hq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPDLOEAD@us_eng?$AA@
CONST	SEGMENT
??_C@_06IPDLOEAD@us_eng?$AA@ DB 'us_eng', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCNFNPPC@us_cav?$AA@
CONST	SEGMENT
??_C@_06PCNFNPPC@us_cav?$AA@ DB 'us_cav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNNKHIHH@us_m60?$AA@
CONST	SEGMENT
??_C@_06NNNKHIHH@us_m60?$AA@ DB 'us_m60', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ??_C@_05LOJMBIAE@us_m1?$AA@
CONST	SEGMENT
??_C@_05LOJMBIAE@us_m1?$AA@ DB 'us_m1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DCKDIDMF@us_air?$AA@
CONST	SEGMENT
??_C@_06DCKDIDMF@us_air?$AA@ DB 'us_air', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDFKKPKF@us_hawk?$AA@
CONST	SEGMENT
??_C@_07KDFKKPKF@us_hawk?$AA@ DB 'us_hawk', 00H		; `string'
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0L@HHFOKCEB@us_patriot?$AA@
CONST	SEGMENT
??_C@_0L@HHFOKCEB@us_patriot?$AA@ DB 'us_patriot', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PDILMAPG@soviet_art?$AA@
CONST	SEGMENT
??_C@_0L@PDILMAPG@soviet_art?$AA@ DB 'soviet_art', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CPJIFHDA@soviet_bm9a52?$AA@
CONST	SEGMENT
??_C@_0O@CPJIFHDA@soviet_bm9a52?$AA@ DB 'soviet_bm9a52', 00H ; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ??_C@_0M@NEMKODHF@soviet_bm24?$AA@
CONST	SEGMENT
??_C@_0M@NEMKODHF@soviet_bm24?$AA@ DB 'soviet_bm24', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BICGPBGL@soveit_bm21?$AA@
CONST	SEGMENT
??_C@_0M@BICGPBGL@soveit_bm21?$AA@ DB 'soveit_bm21', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GILIIMGD@soviet_sup?$AA@
CONST	SEGMENT
??_C@_0L@GILIIMGD@soviet_sup?$AA@ DB 'soviet_sup', 00H	; `string'
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_09EIENBOKL@soviet_sp?$AA@
CONST	SEGMENT
??_C@_09EIENBOKL@soviet_sp?$AA@ DB 'soviet_sp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JOAAOKLH@soviet_frog7?$AA@
CONST	SEGMENT
??_C@_0N@JOAAOKLH@soviet_frog7?$AA@ DB 'soviet_frog7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KGPLOMGF@soviet_scud?$AA@
CONST	SEGMENT
??_C@_0M@KGPLOMGF@soviet_scud?$AA@ DB 'soviet_scud', 00H ; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ??_C@_0M@OIFOAKJE@soviet_mech?$AA@
CONST	SEGMENT
??_C@_0M@OIFOAKJE@soviet_mech?$AA@ DB 'soviet_mech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NBJGKMNH@soviet_marine?$AA@
CONST	SEGMENT
??_C@_0O@NBJGKMNH@soviet_marine?$AA@ DB 'soviet_marine', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLPHMCNO@soviet_inf?$AA@
CONST	SEGMENT
??_C@_0L@FLPHMCNO@soviet_inf?$AA@ DB 'soviet_inf', 00H	; `string'
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ??_C@_09EBCFGDHL@soviet_hq?$AA@
CONST	SEGMENT
??_C@_09EBCFGDHL@soviet_hq?$AA@ DB 'soviet_hq', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IDKEMCH@soviet_eng?$AA@
CONST	SEGMENT
??_C@_0L@IDKEMCH@soviet_eng?$AA@ DB 'soviet_eng', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HNFEOFEM@soviet_t80?$AA@
CONST	SEGMENT
??_C@_0L@HNFEOFEM@soviet_t80?$AA@ DB 'soviet_t80', 00H	; `string'
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ??_C@_0L@EEDOMAPD@soviet_t72?$AA@
CONST	SEGMENT
??_C@_0L@EEDOMAPD@soviet_t72?$AA@ DB 'soviet_t72', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LFKCCLOB@soviet_air?$AA@
CONST	SEGMENT
??_C@_0L@LFKCCLOB@soviet_air?$AA@ DB 'soviet_air', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ELDHECMC@soviet_sa8?$AA@
CONST	SEGMENT
??_C@_0L@ELDHECMC@soviet_sa8?$AA@ DB 'soviet_sa8', 00H	; `string'
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ??_C@_0L@NFLEGPEM@soviet_sa6?$AA@
CONST	SEGMENT
??_C@_0L@NFLEGPEM@soviet_sa6?$AA@ DB 'soviet_sa6', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NIMBGNOH@soviet_sa15?$AA@
CONST	SEGMENT
??_C@_0M@NIMBGNOH@soviet_sa15?$AA@ DB 'soviet_sa15', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPBBFOPE@rok_m198?$AA@
CONST	SEGMENT
??_C@_08KPBBFOPE@rok_m198?$AA@ DB 'rok_m198', 00H	; `string'
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ??_C@_06OEMCKKFL@rok_sp?$AA@
CONST	SEGMENT
??_C@_06OEMCKKFL@rok_sp?$AA@ DB 'rok_sp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ECPGNGIH@rok_m113?$AA@
CONST	SEGMENT
??_C@_08ECPGNGIH@rok_m113?$AA@ DB 'rok_m113', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PGNMIHPL@rok_marine?$AA@
CONST	SEGMENT
??_C@_0L@PGNMIHPL@rok_marine?$AA@ DB 'rok_marine', 00H	; `string'
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ??_C@_07OGOGLPHG@rok_inf?$AA@
CONST	SEGMENT
??_C@_07OGOGLPHG@rok_inf?$AA@ DB 'rok_inf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONKKNHIL@rok_hq?$AA@
CONST	SEGMENT
??_C@_06ONKKNHIL@rok_hq?$AA@ DB 'rok_hq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMJHPDJN@rok_m48?$AA@
CONST	SEGMENT
??_C@_07CMJHPDJN@rok_m48?$AA@ DB 'rok_m48', 00H		; `string'
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ??_C@_08IGCFNKKO@rok_nike?$AA@
CONST	SEGMENT
??_C@_08IGCFNKKO@rok_nike?$AA@ DB 'rok_nike', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHGOHAHL@rok_hawk?$AA@
CONST	SEGMENT
??_C@_08EHGOHAHL@rok_hawk?$AA@ DB 'rok_hawk', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GHEPEGGD@rok_aaa?$AA@
CONST	SEGMENT
??_C@_07GHEPEGGD@rok_aaa?$AA@ DB 'rok_aaa', 00H		; `string'
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ??_C@_0N@FOBFEEPM@dprk_tow_art?$AA@
CONST	SEGMENT
??_C@_0N@FOBFEEPM@dprk_tow_art?$AA@ DB 'dprk_tow_art', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GKIMACGM@dprk_scud?$AA@
CONST	SEGMENT
??_C@_09GKIMACGM@dprk_scud?$AA@ DB 'dprk_scud', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BALFFPAB@dprk_frog?$AA@
CONST	SEGMENT
??_C@_09BALFFPAB@dprk_frog?$AA@ DB 'dprk_frog', 00H	; `string'
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ??_C@_0L@PHFGJDLP@dprk_sp152?$AA@
CONST	SEGMENT
??_C@_0L@PHFGJDLP@dprk_sp152?$AA@ DB 'dprk_sp152', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCBJIFDK@dprk_sp122?$AA@
CONST	SEGMENT
??_C@_0L@PCBJIFDK@dprk_sp122?$AA@ DB 'dprk_sp122', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GFMKPJDJ@dprk_bm21?$AA@
CONST	SEGMENT
??_C@_09GFMKPJDJ@dprk_bm21?$AA@ DB 'dprk_bm21', 00H	; `string'
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ??_C@_09DNPJPDFE@dprk_bmp2?$AA@
CONST	SEGMENT
??_C@_09DNPJPDFE@dprk_bmp2?$AA@ DB 'dprk_bmp2', 00H	; `string'
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ??_C@_09BGNEKAJH@dprk_bmp1?$AA@
CONST	SEGMENT
??_C@_09BGNEKAJH@dprk_bmp1?$AA@ DB 'dprk_bmp1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CAGOFOGK@dprk_inf?$AA@
CONST	SEGMENT
??_C@_08CAGOFOGK@dprk_inf?$AA@ DB 'dprk_inf', 00H	; `string'
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ??_C@_07GJJCHJLB@dprk_hq?$AA@
CONST	SEGMENT
??_C@_07GJJCHJLB@dprk_hq?$AA@ DB 'dprk_hq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOGFDGHA@dprk_t62?$AA@
CONST	SEGMENT
??_C@_08DOGFDGHA@dprk_t62?$AA@ DB 'dprk_t62', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HDGCBOOO@dprk_t55?$AA@
CONST	SEGMENT
??_C@_08HDGCBOOO@dprk_t55?$AA@ DB 'dprk_t55', 00H	; `string'
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ??_C@_0P@KNOHCIAC@dprk_airmobile?$AA@
CONST	SEGMENT
??_C@_0P@KNOHCIAC@dprk_airmobile?$AA@ DB 'dprk_airmobile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFAAKADL@dprk_sa5?$AA@
CONST	SEGMENT
??_C@_08IFAAKADL@dprk_sa5?$AA@ DB 'dprk_sa5', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NDFKAHLN@dprk_sa3?$AA@
CONST	SEGMENT
??_C@_08NDFKAHLN@dprk_sa3?$AA@ DB 'dprk_sa3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MKEBDGPM@dprk_sa2?$AA@
CONST	SEGMENT
??_C@_08MKEBDGPM@dprk_sa2?$AA@ DB 'dprk_sa2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBMHKHHP@dprk_aaa?$AA@
CONST	SEGMENT
??_C@_08KBMHKHHP@dprk_aaa?$AA@ DB 'dprk_aaa', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LAOPLHKJ@chinese_art?$AA@
CONST	SEGMENT
??_C@_0M@LAOPLHKJ@chinese_art?$AA@ DB 'chinese_art', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EFNDCLMD@chinese_sp?$AA@
CONST	SEGMENT
??_C@_0L@EFNDCLMD@chinese_sp?$AA@ DB 'chinese_sp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BDMJCCIG@chinese_mech?$AA@
CONST	SEGMENT
??_C@_0N@BDMJCCIG@chinese_mech?$AA@ DB 'chinese_mech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BIJDLFIB@chinese_inf?$AA@
CONST	SEGMENT
??_C@_0M@BIJDLFIB@chinese_inf?$AA@ DB 'chinese_inf', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EMLLFGBD@chinese_hq?$AA@
CONST	SEGMENT
??_C@_0L@EMLLFGBD@chinese_hq?$AA@ DB 'chinese_hq', 00H	; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ??_C@_0N@KFCBPOJD@chinese_zu23?$AA@
CONST	SEGMENT
??_C@_0N@KFCBPOJD@chinese_zu23?$AA@ DB 'chinese_zu23', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JGNABIBD@chinese_sa6?$AA@
CONST	SEGMENT
??_C@_0M@JGNABIBD@chinese_sa6?$AA@ DB 'chinese_sa6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DPPCPICE@chinese_t90?$AA@
CONST	SEGMENT
??_C@_0M@DPPCPICE@chinese_t90?$AA@ DB 'chinese_t90', 00H ; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ??_C@_0M@EDEHGGFG@chinese_t85?$AA@
CONST	SEGMENT
??_C@_0M@EDEHGGFG@chinese_t85?$AA@ DB 'chinese_t85', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DODAJCBD@chinese_t80?$AA@
CONST	SEGMENT
??_C@_0M@DODAJCBD@chinese_t80?$AA@ DB 'chinese_t80', 00H ; `string'
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ??_C@_05IEPDJIOE@uh60l?$AA@
CONST	SEGMENT
??_C@_05IEPDJIOE@uh60l?$AA@ DB 'uh60l', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIKKHBDP@uh1n?$AA@
CONST	SEGMENT
??_C@_04CIKKHBDP@uh1n?$AA@ DB 'uh1n', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKLIDHOL@ch47?$AA@
CONST	SEGMENT
??_C@_04KKLIDHOL@ch47?$AA@ DB 'ch47', 00H		; `string'
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ??_C@_05HMLDDOPL@tu16n?$AA@
CONST	SEGMENT
??_C@_05HMLDDOPL@tu16n?$AA@ DB 'tu16n', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DOBHKKOD@kc135?$AA@
CONST	SEGMENT
??_C@_05DOBHKKOD@kc135?$AA@ DB 'kc135', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEDKPAH@kc10?$AA@
CONST	SEGMENT
??_C@_04EEDKPAH@kc10?$AA@ DB 'kc10', 00H		; `string'
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ??_C@_04OKLEBKIL@il78?$AA@
CONST	SEGMENT
??_C@_04OKLEBKIL@il78?$AA@ DB 'il78', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PCMBMNEH@oh58d?$AA@
CONST	SEGMENT
??_C@_05PCMBMNEH@oh58d?$AA@ DB 'oh58d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKDNEIKF@md500?$AA@
CONST	SEGMENT
??_C@_05KKDNEIKF@md500?$AA@ DB 'md500', 00H		; `string'
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ??_C@_04EMNBAPEA@f18d?$AA@
CONST	SEGMENT
??_C@_04EMNBAPEA@f18d?$AA@ DB 'f18d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBKGPLAF@f18a?$AA@
CONST	SEGMENT
??_C@_04DBKGPLAF@f18a?$AA@ DB 'f18a', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JAOLEIN@f16c?$AA@
CONST	SEGMENT
??_C@_04JAOLEIN@f16c?$AA@ DB 'f16c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNBCKNFC@f15e?$AA@
CONST	SEGMENT
??_C@_04FNBCKNFC@f15e?$AA@ DB 'f15e', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NCJGDKFI@f117?$AA@
CONST	SEGMENT
??_C@_04NCJGDKFI@f117?$AA@ DB 'f117', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMKGFDJJ@su27?$AA@
CONST	SEGMENT
??_C@_04GMKGFDJJ@su27?$AA@ DB 'su27', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OBOPCEBK@mig29?$AA@
CONST	SEGMENT
??_C@_05OBOPCEBK@mig29?$AA@ DB 'mig29', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENFKGLBG@mig25?$AA@
CONST	SEGMENT
??_C@_05ENFKGLBG@mig25?$AA@ DB 'mig25', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BLAAMMJA@mig23?$AA@
CONST	SEGMENT
??_C@_05BLAAMMJA@mig23?$AA@ DB 'mig23', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CJDGKOBC@mig21?$AA@
CONST	SEGMENT
??_C@_05CJDGKOBC@mig21?$AA@ DB 'mig21', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODKJJKED@mig19?$AA@
CONST	SEGMENT
??_C@_05ODKJJKED@mig19?$AA@ DB 'mig19', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKNMDAKF@f5e?$AA@
CONST	SEGMENT
??_C@_03PKNMDAKF@f5e?$AA@ DB 'f5e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PLBOFKJC@f4e?$AA@
CONST	SEGMENT
??_C@_03PLBOFKJC@f4e?$AA@ DB 'f4e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LEIAKNE@f15c?$AA@
CONST	SEGMENT
??_C@_04LEIAKNE@f15c?$AA@ DB 'f15c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DILMACGB@f14a?$AA@
CONST	SEGMENT
??_C@_04DILMACGB@f14a?$AA@ DB 'f14a', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KLBFFFIJ@ef111?$AA@
CONST	SEGMENT
??_C@_05KLBFFFIJ@ef111?$AA@ DB 'ef111', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MFNLAAJB@tu16?$AA@
CONST	SEGMENT
??_C@_04MFNLAAJB@tu16?$AA@ DB 'tu16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BAIJOIMC@b52g?$AA@
CONST	SEGMENT
??_C@_04BAIJOIMC@b52g?$AA@ DB 'b52g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKMJEKBG@e3?$AA@
CONST	SEGMENT
??_C@_02LKMJEKBG@e3?$AA@ DB 'e3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KAMHKBAN@a50?$AA@
CONST	SEGMENT
??_C@_03KAMHKBAN@a50?$AA@ DB 'a50', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ICJEMBJO@mi24?$AA@
CONST	SEGMENT
??_C@_04ICJEMBJO@mi24?$AA@ DB 'mi24', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJEDMPFA@ka50?$AA@
CONST	SEGMENT
??_C@_04KJEDMPFA@ka50?$AA@ DB 'ka50', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDGEPKLN@ah64d?$AA@
CONST	SEGMENT
??_C@_05NDGEPKLN@ah64d?$AA@ DB 'ah64d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PINBODCG@ah64?$AA@
CONST	SEGMENT
??_C@_04PINBODCG@ah64?$AA@ DB 'ah64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FOJADBBL@su25?$AA@
CONST	SEGMENT
??_C@_04FOJADBBL@su25?$AA@ DB 'su25', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPGMAJJE@mig27?$AA@
CONST	SEGMENT
??_C@_05HPGMAJJE@mig27?$AA@ DB 'mig27', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMHPNIGA@il28?$AA@
CONST	SEGMENT
??_C@_04OMHPNIGA@il28?$AA@ DB 'il28', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIABIBOH@fb111?$AA@
CONST	SEGMENT
??_C@_05NIABIBOH@fb111?$AA@ DB 'fb111', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MJCIDIBA@f4g?$AA@
CONST	SEGMENT
??_C@_03MJCIDIBA@f4g?$AA@ DB 'f4g', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHMOAJNB@a10?$AA@
CONST	SEGMENT
??_C@_03KHMOAJNB@a10?$AA@ DB 'a10', 00H			; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ??_C@_02EMABMJMJ@y8?$AA@
CONST	SEGMENT
??_C@_02EMABMJMJ@y8?$AA@ DB 'y8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HEDHDHAF@il76?$AA@
CONST	SEGMENT
??_C@_04HEDHDHAF@il76?$AA@ DB 'il76', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGLDPHIB@c130?$AA@
CONST	SEGMENT
??_C@_04FGLDPHIB@c130?$AA@ DB 'c130', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_04NKLDBECG@an24?$AA@
CONST	SEGMENT
??_C@_04NKLDBECG@an24?$AA@ DB 'an24', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCBIACNO@an2?$AA@
CONST	SEGMENT
??_C@_03PCBIACNO@an2?$AA@ DB 'an2', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_ia_air_objects DD FLAT:??_C@_03PCBIACNO@an2?$AA@
	DD	01H
	DB	01H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_04NKLDBECG@an24?$AA@
	DD	02H
	DB	01H
	DB	0eH
	ORG $+2
	DD	FLAT:??_C@_04FGLDPHIB@c130?$AA@
	DD	03H
	DB	01H
	DB	07H
	ORG $+2
	DD	FLAT:??_C@_04HEDHDHAF@il76?$AA@
	DD	04H
	DB	01H
	DB	0bH
	ORG $+2
	DD	FLAT:??_C@_02EMABMJMJ@y8?$AA@
	DD	05H
	DB	01H
	DB	0dH
	ORG $+2
	DD	FLAT:??_C@_03KHMOAJNB@a10?$AA@
	DD	06H
	DB	03H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_03MJCIDIBA@f4g?$AA@
	DD	07H
	DB	03H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_05NIABIBOH@fb111?$AA@
	DD	08H
	DB	03H
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_04OMHPNIGA@il28?$AA@
	DD	09H
	DB	03H
	DB	08H
	ORG $+2
	DD	FLAT:??_C@_05HPGMAJJE@mig27?$AA@
	DD	0aH
	DB	03H
	DB	09H
	ORG $+2
	DD	FLAT:??_C@_04FOJADBBL@su25?$AA@
	DD	0bH
	DB	03H
	DB	0cH
	ORG $+2
	DD	FLAT:??_C@_04PINBODCG@ah64?$AA@
	DD	0cH
	DB	04H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_05NDGEPKLN@ah64d?$AA@
	DD	0dH
	DB	04H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_04KJEDMPFA@ka50?$AA@
	DD	0eH
	DB	04H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_04ICJEMBJO@mi24?$AA@
	DD	0fH
	DB	04H
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_03KAMHKBAN@a50?$AA@
	DD	010H
	DB	05H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_02LKMJEKBG@e3?$AA@
	DD	011H
	DB	05H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_04BAIJOIMC@b52g?$AA@
	DD	012H
	DB	06H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_04MFNLAAJB@tu16?$AA@
	DD	013H
	DB	06H
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_05KLBFFFIJ@ef111?$AA@
	DD	014H
	DB	07H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_04DILMACGB@f14a?$AA@
	DD	015H
	DB	08H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_04LEIAKNE@f15c?$AA@
	DD	016H
	DB	08H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_03PLBOFKJC@f4e?$AA@
	DD	017H
	DB	08H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_03PKNMDAKF@f5e?$AA@
	DD	018H
	DB	08H
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_05ODKJJKED@mig19?$AA@
	DD	019H
	DB	08H
	DB	0aH
	ORG $+2
	DD	FLAT:??_C@_05CJDGKOBC@mig21?$AA@
	DD	01aH
	DB	08H
	DB	0bH
	ORG $+2
	DD	FLAT:??_C@_05BLAAMMJA@mig23?$AA@
	DD	01bH
	DB	08H
	DB	0cH
	ORG $+2
	DD	FLAT:??_C@_05ENFKGLBG@mig25?$AA@
	DD	01cH
	DB	08H
	DB	0dH
	ORG $+2
	DD	FLAT:??_C@_05OBOPCEBK@mig29?$AA@
	DD	01dH
	DB	08H
	DB	0eH
	ORG $+2
	DD	FLAT:??_C@_04GMKGFDJJ@su27?$AA@
	DD	01eH
	DB	08H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_04NCJGDKFI@f117?$AA@
	DD	01fH
	DB	09H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_04FNBCKNFC@f15e?$AA@
	DD	020H
	DB	09H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_04JAOLEIN@f16c?$AA@
	DD	021H
	DB	09H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_04DBKGPLAF@f18a?$AA@
	DD	022H
	DB	09H
	DB	07H
	ORG $+2
	DD	FLAT:??_C@_04EMNBAPEA@f18d?$AA@
	DD	023H
	DB	09H
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_05KKDNEIKF@md500?$AA@
	DD	024H
	DB	0cH
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_05PCMBMNEH@oh58d?$AA@
	DD	025H
	DB	0cH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_04OKLEBKIL@il78?$AA@
	DD	026H
	DB	0dH
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_04EEDKPAH@kc10?$AA@
	DD	027H
	DB	0dH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_05DOBHKKOD@kc135?$AA@
	DD	028H
	DB	0dH
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_05HMLDDOPL@tu16n?$AA@
	DD	029H
	DB	0dH
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_04KKLIDHOL@ch47?$AA@
	DD	02aH
	DB	0eH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_04CIKKHBDP@uh1n?$AA@
	DD	02bH
	DB	0eH
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_05IEPDJIOE@uh60l?$AA@
	DD	02cH
	DB	0eH
	DB	06H
	ORG $+2
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
?start_x@instant_action@@1MA DD 04a11353cr	; 2.37909e+006 ; instant_action::start_x
_ia_grnd_objects DD FLAT:??_C@_0M@DODAJCBD@chinese_t80?$AA@
	DD	02eH
	DB	03H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0M@EDEHGGFG@chinese_t85?$AA@
	DD	02fH
	DB	03H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_0M@DPPCPICE@chinese_t90?$AA@
	DD	030H
	DB	03H
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_0M@JGNABIBD@chinese_sa6?$AA@
	DD	031H
	DB	01H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0N@KFCBPOJD@chinese_zu23?$AA@
	DD	032H
	DB	01H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_0L@EMLLFGBD@chinese_hq?$AA@
	DD	033H
	DB	06H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0M@BIJDLFIB@chinese_inf?$AA@
	DD	034H
	DB	07H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0N@BDMJCCIG@chinese_mech?$AA@
	DD	035H
	DB	09H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0L@EFNDCLMD@chinese_sp?$AA@
	DD	036H
	DB	0bH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0M@LAOPLHKJ@chinese_art?$AA@
	DD	037H
	DB	0eH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_08KBMHKHHP@dprk_aaa?$AA@
	DD	038H
	DB	01H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_08MKEBDGPM@dprk_sa2?$AA@
	DD	039H
	DB	01H
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_08NDFKAHLN@dprk_sa3?$AA@
	DD	03aH
	DB	01H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_08IFAAKADL@dprk_sa5?$AA@
	DD	03bH
	DB	01H
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_0P@KNOHCIAC@dprk_airmobile?$AA@
	DD	03cH
	DB	02H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_08HDGCBOOO@dprk_t55?$AA@
	DD	03dH
	DB	03H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_08DOGFDGHA@dprk_t62?$AA@
	DD	03eH
	DB	03H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_07GJJCHJLB@dprk_hq?$AA@
	DD	03fH
	DB	06H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_08CAGOFOGK@dprk_inf?$AA@
	DD	040H
	DB	07H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_09BGNEKAJH@dprk_bmp1?$AA@
	DD	041H
	DB	09H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_09DNPJPDFE@dprk_bmp2?$AA@
	DD	042H
	DB	09H
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_09GFMKPJDJ@dprk_bm21?$AA@
	DD	043H
	DB	0aH
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_0L@PCBJIFDK@dprk_sp122?$AA@
	DD	044H
	DB	0bH
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_0L@PHFGJDLP@dprk_sp152?$AA@
	DD	045H
	DB	0bH
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_09BALFFPAB@dprk_frog?$AA@
	DD	046H
	DB	0cH
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_09GKIMACGM@dprk_scud?$AA@
	DD	047H
	DB	0cH
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_0N@FOBFEEPM@dprk_tow_art?$AA@
	DD	048H
	DB	0eH
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_07GHEPEGGD@rok_aaa?$AA@
	DD	049H
	DB	01H
	DB	0eH
	ORG $+2
	DD	FLAT:??_C@_08EHGOHAHL@rok_hawk?$AA@
	DD	04aH
	DB	01H
	DB	08H
	ORG $+2
	DD	FLAT:??_C@_08IGCFNKKO@rok_nike?$AA@
	DD	04bH
	DB	01H
	DB	09H
	ORG $+2
	DD	FLAT:??_C@_07CMJHPDJN@rok_m48?$AA@
	DD	04cH
	DB	03H
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_06ONKKNHIL@rok_hq?$AA@
	DD	04dH
	DB	06H
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_07OGOGLPHG@rok_inf?$AA@
	DD	04eH
	DB	07H
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_0L@PGNMIHPL@rok_marine?$AA@
	DD	04fH
	DB	08H
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_08ECPGNGIH@rok_m113?$AA@
	DD	050H
	DB	09H
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_06OEMCKKFL@rok_sp?$AA@
	DD	051H
	DB	0bH
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_08KPBBFOPE@rok_m198?$AA@
	DD	052H
	DB	0eH
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_0M@NIMBGNOH@soviet_sa15?$AA@
	DD	053H
	DB	01H
	DB	0aH
	ORG $+2
	DD	FLAT:??_C@_0L@NFLEGPEM@soviet_sa6?$AA@
	DD	054H
	DB	01H
	DB	0bH
	ORG $+2
	DD	FLAT:??_C@_0L@ELDHECMC@soviet_sa8?$AA@
	DD	055H
	DB	01H
	DB	0cH
	ORG $+2
	DD	FLAT:??_C@_0L@LFKCCLOB@soviet_air?$AA@
	DD	056H
	DB	02H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_0L@EEDOMAPD@soviet_t72?$AA@
	DD	057H
	DB	03H
	DB	07H
	ORG $+2
	DD	FLAT:??_C@_0L@HNFEOFEM@soviet_t80?$AA@
	DD	058H
	DB	03H
	DB	08H
	ORG $+2
	DD	FLAT:??_C@_0L@IDKEMCH@soviet_eng?$AA@
	DD	05aH
	DB	05H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_09EBCFGDHL@soviet_hq?$AA@
	DD	05bH
	DB	06H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_0L@FLPHMCNO@soviet_inf?$AA@
	DD	05cH
	DB	07H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_0O@NBJGKMNH@soviet_marine?$AA@
	DD	05dH
	DB	08H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0M@OIFOAKJE@soviet_mech?$AA@
	DD	05eH
	DB	09H
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_0M@KGPLOMGF@soviet_scud?$AA@
	DD	05fH
	DB	0cH
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_0N@JOAAOKLH@soviet_frog7?$AA@
	DD	060H
	DB	0cH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_09EIENBOKL@soviet_sp?$AA@
	DD	061H
	DB	0bH
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_0L@GILIIMGD@soviet_sup?$AA@
	DD	062H
	DB	0dH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0M@BICGPBGL@soveit_bm21?$AA@
	DD	063H
	DB	0aH
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_0M@NEMKODHF@soviet_bm24?$AA@
	DD	064H
	DB	0aH
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_0O@CPJIFHDA@soviet_bm9a52?$AA@
	DD	065H
	DB	0aH
	DB	04H
	ORG $+2
	DD	FLAT:??_C@_0L@PDILMAPG@soviet_art?$AA@
	DD	066H
	DB	0eH
	DB	03H
	ORG $+2
	DD	FLAT:??_C@_0L@HHFOKCEB@us_patriot?$AA@
	DD	067H
	DB	01H
	DB	07H
	ORG $+2
	DD	FLAT:??_C@_07KDFKKPKF@us_hawk?$AA@
	DD	068H
	DB	01H
	DB	0dH
	ORG $+2
	DD	FLAT:??_C@_06DCKDIDMF@us_air?$AA@
	DD	069H
	DB	02H
	DB	02H
	ORG $+2
	DD	FLAT:??_C@_05LOJMBIAE@us_m1?$AA@
	DD	06aH
	DB	03H
	DB	0aH
	ORG $+2
	DD	FLAT:??_C@_06NNNKHIHH@us_m60?$AA@
	DD	06bH
	DB	03H
	DB	0bH
	ORG $+2
	DD	FLAT:??_C@_06PCNFNPPC@us_cav?$AA@
	DD	06cH
	DB	04H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_06IPDLOEAD@us_eng?$AA@
	DD	06dH
	DB	05H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_05EICOJFOK@us_hq?$AA@
	DD	06eH
	DB	06H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_06NMPGGKPK@us_inf?$AA@
	DD	06fH
	DB	07H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_08EEGOPPDC@us_lav25?$AA@
	DD	070H
	DB	08H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_05JFLBELMH@us_m2?$AA@
	DD	071H
	DB	09H
	DB	01H
	ORG $+2
	DD	FLAT:??_C@_07BNAAKCLK@us_mlrs?$AA@
	DD	072H
	DB	0aH
	DB	05H
	ORG $+2
	DD	FLAT:??_C@_07FNOPILOE@us_m109?$AA@
	DD	073H
	DB	0bH
	DB	06H
	ORG $+2
	DD	FLAT:??_C@_06OPLJCEEH@us_sup?$AA@
	DD	074H
	DB	0dH
	DB	01H
	ORG $+2
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
?start_y@instant_action@@1MA DD 049bf7968r	; 1.56856e+006 ; instant_action::start_y
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
?current_mode@instant_action@@1DA DB 066H		; instant_action::current_mode
_DATA	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?SetWPAction@WayPointClass@@QAEXH@Z		; WayPointClass::SetWPAction
PUBLIC	?SetWPFlags@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPFlags
PUBLIC	?SetWPDepartTime@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPDepartTime
PUBLIC	?SetWPArrive@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPArrive
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	??0LoadoutStruct@@QAE@XZ			; LoadoutStruct::LoadoutStruct
PUBLIC	?IAKill@UnitClass@@QAEHXZ			; UnitClass::IAKill
PUBLIC	?SetUnitDestination@UnitClass@@QAEXFF@Z		; UnitClass::SetUnitDestination
PUBLIC	?SetNumVehicles@UnitClass@@QAEXHH@Z		; UnitClass::SetNumVehicles
PUBLIC	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
PUBLIC	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
PUBLIC	?GetLastDirection@FlightClass@@QAEEXZ		; FlightClass::GetLastDirection
PUBLIC	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
PUBLIC	?GetPilotSlot@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetPilotSlot
PUBLIC	?create_unit@instant_action@@KAXAAUia_data@@@Z	; instant_action::create_unit
PUBLIC	?create_flight@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_flight
PUBLIC	?create_battalion@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_battalion
PUBLIC	?create_player_flight@instant_action@@SAXXZ	; instant_action::create_player_flight
PUBLIC	?move_player_flight@instant_action@@SAXXZ	; instant_action::move_player_flight
PUBLIC	?create_wave@instant_action@@SAXXZ		; instant_action::create_wave
PUBLIC	?check_next_wave@instant_action@@SAXXZ		; instant_action::check_next_wave
PUBLIC	?create_more_stuff@instant_action@@SAXXZ	; instant_action::create_more_stuff
PUBLIC	?is_fighter_sweep@instant_action@@SAHXZ		; instant_action::is_fighter_sweep
PUBLIC	?is_moving_mud@instant_action@@SAHXZ		; instant_action::is_moving_mud
PUBLIC	?set_start_wave@instant_action@@SAXH@Z		; instant_action::set_start_wave
PUBLIC	?set_start_mode@instant_action@@SAXD@Z		; instant_action::set_start_mode
PUBLIC	?set_start_position@instant_action@@SAXMM@Z	; instant_action::set_start_position
PUBLIC	?get_start_position@instant_action@@SAXAAM0@Z	; instant_action::get_start_position
PUBLIC	?set_start_time@instant_action@@SAXJ@Z		; instant_action::set_start_time
PUBLIC	?get_start_time@instant_action@@SAJXZ		; instant_action::get_start_time
PUBLIC	?set_campaign_time@instant_action@@SAXXZ	; instant_action::set_campaign_time
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0L@KBLNOMHJ@?$CFs?2?$CFc?$CFd?4ia?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_07GCICIJGK@minutes?$AA@			; `string'
PUBLIC	??_C@_02JEGPBHMG@km?$AA@			; `string'
PUBLIC	??_C@_03OFPLEBM@deg?$AA@			; `string'
PUBLIC	??_C@_03GFHGLKFI@kts?$AA@			; `string'
PUBLIC	??_C@_04CGBIDIAH@feet?$AA@			; `string'
PUBLIC	??_C@_06NBFPPGEG@vector?$AA@			; `string'
PUBLIC	??_C@_0P@JOIGPIED@Unknown?5?$CFd?3?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_06GFAFCNFM@allied?$AA@			; `string'
PUBLIC	??_C@_05ICAMJEGE@enemy?$AA@			; `string'
PUBLIC	??_C@_07JAOEMGIL@neutral?$AA@			; `string'
PUBLIC	??_C@_08IKJAOFHB@killthis?$AA@			; `string'
PUBLIC	??_C@_04IHFDPAO@guns?$AA@			; `string'
PUBLIC	??_C@_05EMNNHGFM@radar?$AA@			; `string'
PUBLIC	??_C@_04JOCBCOLK@heat?$AA@			; `string'
PUBLIC	??_C@_06GODDAGJL@ground?$AA@			; `string'
PUBLIC	??_C@_09DAPOABIO@noweapons?$AA@			; `string'
PUBLIC	??_C@_04PLMLMMEO@full?$AA@			; `string'
PUBLIC	??_C@_04BOEKNIJH@dumb?$AA@			; `string'
PUBLIC	??_C@_07PAOAAHJB@recruit?$AA@			; `string'
PUBLIC	??_C@_05NFAEKIDI@cadet?$AA@			; `string'
PUBLIC	??_C@_06EIAPKDNP@rookie?$AA@			; `string'
PUBLIC	??_C@_07JLFAODAA@veteran?$AA@			; `string'
PUBLIC	??_C@_03PDKFKBO@ace?$AA@			; `string'
PUBLIC	??_C@_0BE@KEEAPDJC@Unknown?5Command?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_08OFMENCFB@?$CFs?2?$CFc?4ia?$AA@		; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_07BFHALJJD@subtype?$AA@			; `string'
PUBLIC	??_C@_08KINPOOEP@specific?$AA@			; `string'
PUBLIC	??_C@_02IOEGGOML@w0?$AA@			; `string'
PUBLIC	??_C@_02JFGJGFGH@c0?$AA@			; `string'
PUBLIC	??_C@_02JHFNFPIK@w1?$AA@			; `string'
PUBLIC	??_C@_02IMHCFECG@c1?$AA@			; `string'
PUBLIC	??_C@_02LMHAAMEJ@w2?$AA@			; `string'
PUBLIC	??_C@_02KHFPAHOF@c2?$AA@			; `string'
PUBLIC	??_C@_02KFGLDNAI@w3?$AA@			; `string'
PUBLIC	??_C@_02LOEEDGKE@c3?$AA@			; `string'
PUBLIC	??_C@_02OKCKKLMP@w4?$AA@			; `string'
PUBLIC	??_C@_02PBAFKAGD@c4?$AA@			; `string'
PUBLIC	??_C@_02PDDBJKIO@w5?$AA@			; `string'
PUBLIC	??_C@_02OIBOJBCC@c5?$AA@			; `string'
PUBLIC	??_C@_02NIBMMJEN@w6?$AA@			; `string'
PUBLIC	??_C@_02MDDDMCOB@c6?$AA@			; `string'
PUBLIC	??_C@_02MBAHPIAM@w7?$AA@			; `string'
PUBLIC	??_C@_02NKCIPDKA@c7?$AA@			; `string'
PUBLIC	??_C@_02EGJPOEMD@w8?$AA@			; `string'
PUBLIC	??_C@_02FNLAOPGP@c8?$AA@			; `string'
PUBLIC	??_C@_02FPIENFIC@w9?$AA@			; `string'
PUBLIC	??_C@_02EEKLNOCO@c9?$AA@			; `string'
PUBLIC	??_C@_0BL@GGMJKOGP@Cannot?5create?5F16C?5Flight?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@LHJKAMAN@Cannot?5create?5FlightClass?5object@ ; `string'
PUBLIC	??_C@_0EK@KKBJOKA@Cannot?5find?5Aircraft?5Type?5in?5Ins@ ; `string'
PUBLIC	??_C@_0BI@HNCLFAFG@Create?5Flight?5?$CFd?0?$CFd?5?$CFd?5?$AA@ ; `string'
PUBLIC	??_C@_0BF@LFOINCLP@?$DN?$DO?5?$CFd?0?$CFd?5?$CI?$CFd?5Skill?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0EM@FJJOHNJF@Cannot?5find?5Battalion?5Type?5in?5In@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f000000
PUBLIC	__real@3f400000
PUBLIC	__real@46fffe00
PUBLIC	__real@4ab96e66
PUBLIC	__real@c61c4000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fclose:PROC
EXTRN	_fgets:PROC
EXTRN	_fopen:PROC
EXTRN	_sprintf:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_atoi:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_stricmp:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC	; VuDatabase::Insert
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	_MonoPrint:PROC
EXTRN	?GetCover@@YA?AW4CoverType@@FF@Z:PROC		; GetCover
EXTRN	??0WayPointClass@@QAE@XZ:PROC			; WayPointClass::WayPointClass
EXTRN	??0WayPointClass@@QAE@FFHHKKEH@Z:PROC		; WayPointClass::WayPointClass
EXTRN	?SetNextWP@WayPointClass@@QAEXPAV1@@Z:PROC	; WayPointClass::SetNextWP
EXTRN	?SetLocation@WayPointClass@@QAEXMMM@Z:PROC	; WayPointClass::SetLocation
EXTRN	?SetWPTimes@@YAKPAVWayPointClass@@KHH@Z:PROC	; SetWPTimes
EXTRN	?GetWeaponDescriptionIndex@@YAHH@Z:PROC		; GetWeaponDescriptionIndex
EXTRN	?GetClassID@@YAHEEEEEEEE@Z:PROC			; GetClassID
EXTRN	?SetLocation@CampBaseClass@@QAEXFF@Z:PROC	; CampBaseClass::SetLocation
EXTRN	?SetAltitude@CampBaseClass@@QAEXH@Z:PROC	; CampBaseClass::SetAltitude
EXTRN	?SetEmitting@CampBaseClass@@QAEXH@Z:PROC	; CampBaseClass::SetEmitting
EXTRN	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z:PROC ; GetVehicleClassData
EXTRN	?SetRoster@UnitClass@@QAEXJ@Z:PROC		; UnitClass::SetRoster
EXTRN	?SetCurrentWaypoint@UnitClass@@QAEXG@Z:PROC	; UnitClass::SetCurrentWaypoint
EXTRN	?SetFinal@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetFinal
EXTRN	?SetIAKill@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetIAKill
EXTRN	?SetNoAbort@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetNoAbort
EXTRN	?GetVehicleID@UnitClass@@QAEFH@Z:PROC		; UnitClass::GetVehicleID
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?GetCombatSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetCombatSpeed
EXTRN	?BuildElements@UnitClass@@QAEXXZ:PROC		; UnitClass::BuildElements
EXTRN	?KillUnit@UnitClass@@QAEXXZ:PROC		; UnitClass::KillUnit
EXTRN	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetFirstUnit
EXTRN	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z:PROC ; GetNextUnit
EXTRN	?NewUnit@@YAPAVUnitClass@@HHHHPAV1@@Z:PROC	; NewUnit
EXTRN	?DistSqu@@YAHFFFF@Z:PROC			; DistSqu
EXTRN	?Distance@@YAMMMMM@Z:PROC			; Distance
EXTRN	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z:PROC ; FindNearestObjective
EXTRN	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z:PROC	; ConvertSimToGrid
EXTRN	?GetCallsignID@@YAXPAE0H@Z:PROC			; GetCallsignID
EXTRN	?SetCallsignID@@YAXHH@Z:PROC			; SetCallsignID
EXTRN	?SetTanker@PackageClass@@QAEXVVU_ID@@@Z:PROC	; PackageClass::SetTanker
EXTRN	?SetLastDirection@FlightClass@@QAEXE@Z:PROC	; FlightClass::SetLastDirection
EXTRN	?SetPackage@FlightClass@@QAEXVVU_ID@@@Z:PROC	; FlightClass::SetPackage
EXTRN	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z:PROC ; FlightClass::MakeFlightDirty
EXTRN	?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z:PROC ; NewFlight
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?NewBattalion@@YAPAVBattalionClass@@HPAVUnitClass@@@Z:PROC ; NewBattalion
EXTRN	?PreMissionEval@MissionEvaluationClass@@QAEHPAVFlightClass@@E@Z:PROC ; MissionEvaluationClass::PreMissionEval
EXTRN	?DoFullUpdate@FalconSessionEntity@@QAEXXZ:PROC	; FalconSessionEntity::DoFullUpdate
EXTRN	?SetPlayerFlight@FalconSessionEntity@@QAEXPAVFlightClass@@@Z:PROC ; FalconSessionEntity::SetPlayerFlight
EXTRN	?SetAircraftNum@FalconSessionEntity@@QAEXE@Z:PROC ; FalconSessionEntity::SetAircraftNum
EXTRN	?SetPilotSlot@FalconSessionEntity@@QAEXE@Z:PROC	; FalconSessionEntity::SetPilotSlot
EXTRN	?SetTime@@YAXK@Z:PROC				; SetTime
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?DefaultDamageMods@@3PAEA:BYTE			; DefaultDamageMods
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?AllRealList@@3PAVVuLinkedList@@A:DWORD		; AllRealList
EXTRN	?AllCampList@@3PAVVuLinkedList@@A:DWORD		; AllCampList
EXTRN	?FalconCampUserSaveDirectory@@3PADA:BYTE	; FalconCampUserSaveDirectory
EXTRN	?InstantActionSettings@@3UUI_IA@@A:BYTE		; InstantActionSettings
EXTRN	?gSelectedFlightID@@3VVU_ID@@A:QWORD		; gSelectedFlightID
EXTRN	?gActiveFlightID@@3VVU_ID@@A:QWORD		; gActiveFlightID
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c61c4000
CONST	SEGMENT
__real@c61c4000 DD 0c61c4000r			; -10000
CONST	ENDS
;	COMDAT __real@4ab96e66
CONST	SEGMENT
__real@4ab96e66 DD 04ab96e66r			; 6.07621e+006
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@FJJOHNJF@Cannot?5find?5Battalion?5Type?5in?5In@
CONST	SEGMENT
??_C@_0EM@FJJOHNJF@Cannot?5find?5Battalion?5Type?5in?5In@ DB 'Cannot find'
	DB	' Battalion Type in Instant Action Object Table (ia_grnd_objec'
	DB	'ts)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LFOINCLP@?$DN?$DO?5?$CFd?0?$CFd?5?$CI?$CFd?5Skill?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BF@LFOINCLP@?$DN?$DO?5?$CFd?0?$CFd?5?$CI?$CFd?5Skill?$CJ?6?$AA@ DB '='
	DB	'> %d,%d (%d Skill)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HNCLFAFG@Create?5Flight?5?$CFd?0?$CFd?5?$CFd?5?$AA@
CONST	SEGMENT
??_C@_0BI@HNCLFAFG@Create?5Flight?5?$CFd?0?$CFd?5?$CFd?5?$AA@ DB 'Create '
	DB	'Flight %d,%d %d ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@KKBJOKA@Cannot?5find?5Aircraft?5Type?5in?5Ins@
CONST	SEGMENT
??_C@_0EK@KKBJOKA@Cannot?5find?5Aircraft?5Type?5in?5Ins@ DB 'Cannot find '
	DB	'Aircraft Type in Instant Action Object Table (ia_air_objects)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?FLIGHT_PLAN_SPEED@?1??move_player_flight@instant_action@@SAXXZ@4MB
CONST	SEGMENT
?FLIGHT_PLAN_SPEED@?1??move_player_flight@instant_action@@SAXXZ@4MB DD 04413af87r ; 590.743 ; `instant_action::move_player_flight'::`2'::FLIGHT_PLAN_SPEED
CONST	ENDS
;	COMDAT ??_C@_0CC@LHJKAMAN@Cannot?5create?5FlightClass?5object@
CONST	SEGMENT
??_C@_0CC@LHJKAMAN@Cannot?5create?5FlightClass?5object@ DB 'Cannot create'
	DB	' FlightClass object', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GGMJKOGP@Cannot?5create?5F16C?5Flight?6?$AA@
CONST	SEGMENT
??_C@_0BL@GGMJKOGP@Cannot?5create?5F16C?5Flight?6?$AA@ DB 'Cannot create '
	DB	'F16C Flight', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKLNOCO@c9?$AA@
CONST	SEGMENT
??_C@_02EEKLNOCO@c9?$AA@ DB 'c9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPIENFIC@w9?$AA@
CONST	SEGMENT
??_C@_02FPIENFIC@w9?$AA@ DB 'w9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FNLAOPGP@c8?$AA@
CONST	SEGMENT
??_C@_02FNLAOPGP@c8?$AA@ DB 'c8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGJPOEMD@w8?$AA@
CONST	SEGMENT
??_C@_02EGJPOEMD@w8?$AA@ DB 'w8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NKCIPDKA@c7?$AA@
CONST	SEGMENT
??_C@_02NKCIPDKA@c7?$AA@ DB 'c7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MBAHPIAM@w7?$AA@
CONST	SEGMENT
??_C@_02MBAHPIAM@w7?$AA@ DB 'w7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDDDMCOB@c6?$AA@
CONST	SEGMENT
??_C@_02MDDDMCOB@c6?$AA@ DB 'c6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NIBMMJEN@w6?$AA@
CONST	SEGMENT
??_C@_02NIBMMJEN@w6?$AA@ DB 'w6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OIBOJBCC@c5?$AA@
CONST	SEGMENT
??_C@_02OIBOJBCC@c5?$AA@ DB 'c5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PDDBJKIO@w5?$AA@
CONST	SEGMENT
??_C@_02PDDBJKIO@w5?$AA@ DB 'w5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PBAFKAGD@c4?$AA@
CONST	SEGMENT
??_C@_02PBAFKAGD@c4?$AA@ DB 'c4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OKCKKLMP@w4?$AA@
CONST	SEGMENT
??_C@_02OKCKKLMP@w4?$AA@ DB 'w4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LOEEDGKE@c3?$AA@
CONST	SEGMENT
??_C@_02LOEEDGKE@c3?$AA@ DB 'c3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFGLDNAI@w3?$AA@
CONST	SEGMENT
??_C@_02KFGLDNAI@w3?$AA@ DB 'w3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KHFPAHOF@c2?$AA@
CONST	SEGMENT
??_C@_02KHFPAHOF@c2?$AA@ DB 'c2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMHAAMEJ@w2?$AA@
CONST	SEGMENT
??_C@_02LMHAAMEJ@w2?$AA@ DB 'w2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IMHCFECG@c1?$AA@
CONST	SEGMENT
??_C@_02IMHCFECG@c1?$AA@ DB 'c1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JHFNFPIK@w1?$AA@
CONST	SEGMENT
??_C@_02JHFNFPIK@w1?$AA@ DB 'w1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JFGJGFGH@c0?$AA@
CONST	SEGMENT
??_C@_02JFGJGFGH@c0?$AA@ DB 'c0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IOEGGOML@w0?$AA@
CONST	SEGMENT
??_C@_02IOEGGOML@w0?$AA@ DB 'w0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KINPOOEP@specific?$AA@
CONST	SEGMENT
??_C@_08KINPOOEP@specific?$AA@ DB 'specific', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BFHALJJD@subtype?$AA@
CONST	SEGMENT
??_C@_07BFHALJJD@subtype?$AA@ DB 'subtype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFMENCFB@?$CFs?2?$CFc?4ia?$AA@
CONST	SEGMENT
??_C@_08OFMENCFB@?$CFs?2?$CFc?4ia?$AA@ DB '%s\%c.ia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KEEAPDJC@Unknown?5Command?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BE@KEEAPDJC@Unknown?5Command?5?$CFs?6?$AA@ DB 'Unknown Command %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03PDKFKBO@ace?$AA@
CONST	SEGMENT
??_C@_03PDKFKBO@ace?$AA@ DB 'ace', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JLFAODAA@veteran?$AA@
CONST	SEGMENT
??_C@_07JLFAODAA@veteran?$AA@ DB 'veteran', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIAPKDNP@rookie?$AA@
CONST	SEGMENT
??_C@_06EIAPKDNP@rookie?$AA@ DB 'rookie', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFAEKIDI@cadet?$AA@
CONST	SEGMENT
??_C@_05NFAEKIDI@cadet?$AA@ DB 'cadet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PAOAAHJB@recruit?$AA@
CONST	SEGMENT
??_C@_07PAOAAHJB@recruit?$AA@ DB 'recruit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BOEKNIJH@dumb?$AA@
CONST	SEGMENT
??_C@_04BOEKNIJH@dumb?$AA@ DB 'dumb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PLMLMMEO@full?$AA@
CONST	SEGMENT
??_C@_04PLMLMMEO@full?$AA@ DB 'full', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DAPOABIO@noweapons?$AA@
CONST	SEGMENT
??_C@_09DAPOABIO@noweapons?$AA@ DB 'noweapons', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GODDAGJL@ground?$AA@
CONST	SEGMENT
??_C@_06GODDAGJL@ground?$AA@ DB 'ground', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JOCBCOLK@heat?$AA@
CONST	SEGMENT
??_C@_04JOCBCOLK@heat?$AA@ DB 'heat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNNHGFM@radar?$AA@
CONST	SEGMENT
??_C@_05EMNNHGFM@radar?$AA@ DB 'radar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHFDPAO@guns?$AA@
CONST	SEGMENT
??_C@_04IHFDPAO@guns?$AA@ DB 'guns', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IKJAOFHB@killthis?$AA@
CONST	SEGMENT
??_C@_08IKJAOFHB@killthis?$AA@ DB 'killthis', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JAOEMGIL@neutral?$AA@
CONST	SEGMENT
??_C@_07JAOEMGIL@neutral?$AA@ DB 'neutral', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ICAMJEGE@enemy?$AA@
CONST	SEGMENT
??_C@_05ICAMJEGE@enemy?$AA@ DB 'enemy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GFAFCNFM@allied?$AA@
CONST	SEGMENT
??_C@_06GFAFCNFM@allied?$AA@ DB 'allied', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JOIGPIED@Unknown?5?$CFd?3?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0P@JOIGPIED@Unknown?5?$CFd?3?$CFs?6?$AA@ DB 'Unknown %d:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBFPPGEG@vector?$AA@
CONST	SEGMENT
??_C@_06NBFPPGEG@vector?$AA@ DB 'vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGBIDIAH@feet?$AA@
CONST	SEGMENT
??_C@_04CGBIDIAH@feet?$AA@ DB 'feet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GFHGLKFI@kts?$AA@
CONST	SEGMENT
??_C@_03GFHGLKFI@kts?$AA@ DB 'kts', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFPLEBM@deg?$AA@
CONST	SEGMENT
??_C@_03OFPLEBM@deg?$AA@ DB 'deg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JEGPBHMG@km?$AA@
CONST	SEGMENT
??_C@_02JEGPBHMG@km?$AA@ DB 'km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GCICIJGK@minutes?$AA@
CONST	SEGMENT
??_C@_07GCICIJGK@minutes?$AA@ DB 'minutes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KBLNOMHJ@?$CFs?2?$CFc?$CFd?4ia?$AA@
CONST	SEGMENT
??_C@_0L@KBLNOMHJ@?$CFs?2?$CFc?$CFd?4ia?$AA@ DB '%s\%c%d.ia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?check_next_wave@instant_action@@SAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?check_next_wave@instant_action@@SAXXZ$0
__unwindtable$?create_player_flight@instant_action@@SAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?create_player_flight@instant_action@@SAXXZ$0
__unwindtable$?move_player_flight@instant_action@@SAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?move_player_flight@instant_action@@SAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?move_player_flight@instant_action@@SAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?move_player_flight@instant_action@@SAXXZ$2
__unwindtable$?create_flight@instant_action@@KAXAAUia_data@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$3
__ehfuncinfo$?check_next_wave@instant_action@@SAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?check_next_wave@instant_action@@SAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?move_player_flight@instant_action@@SAXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?move_player_flight@instant_action@@SAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?create_player_flight@instant_action@@SAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?create_player_flight@instant_action@@SAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?create_flight@instant_action@@KAXAAUia_data@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?create_flight@instant_action@@KAXAAUia_data@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
?set_campaign_time@instant_action@@SAXXZ PROC		; instant_action::set_campaign_time

; 236  : {

	push	ebp
	mov	ebp, esp

; 237  : 	SetTime (start_time * 1000);

	mov	eax, DWORD PTR ?start_time@instant_action@@1JA ; instant_action::start_time
	imul	eax, 1000				; 000003e8H
	push	eax
	call	?SetTime@@YAXK@Z			; SetTime
	add	esp, 4

; 238  : }

	pop	ebp
	ret	0
?set_campaign_time@instant_action@@SAXXZ ENDP		; instant_action::set_campaign_time
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
?get_start_time@instant_action@@SAJXZ PROC		; instant_action::get_start_time

; 227  : {

	push	ebp
	mov	ebp, esp

; 228  : 	return start_time;

	mov	eax, DWORD PTR ?start_time@instant_action@@1JA ; instant_action::start_time

; 229  : }

	pop	ebp
	ret	0
?get_start_time@instant_action@@SAJXZ ENDP		; instant_action::get_start_time
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_t$ = 8							; size = 4
?set_start_time@instant_action@@SAXJ@Z PROC		; instant_action::set_start_time

; 218  : {

	push	ebp
	mov	ebp, esp

; 219  : 	start_time = t;

	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR ?start_time@instant_action@@1JA, eax ; instant_action::start_time

; 220  : }

	pop	ebp
	ret	0
?set_start_time@instant_action@@SAXJ@Z ENDP		; instant_action::set_start_time
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?get_start_position@instant_action@@SAXAAM0@Z PROC	; instant_action::get_start_position

; 255  : {

	push	ebp
	mov	ebp, esp

; 256  : 	x = start_x;

	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR ?start_x@instant_action@@1MA
	movss	DWORD PTR [eax], xmm0

; 257  : 	y = start_y;

	mov	ecx, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR ?start_y@instant_action@@1MA
	movss	DWORD PTR [ecx], xmm0

; 258  : }

	pop	ebp
	ret	0
?get_start_position@instant_action@@SAXAAM0@Z ENDP	; instant_action::get_start_position
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?set_start_position@instant_action@@SAXMM@Z PROC	; instant_action::set_start_position

; 245  : {

	push	ebp
	mov	ebp, esp

; 246  : 	start_x = x;

	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR ?start_x@instant_action@@1MA, xmm0

; 247  : 	start_y = y;

	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR ?start_y@instant_action@@1MA, xmm0

; 248  : }

	pop	ebp
	ret	0
?set_start_position@instant_action@@SAXMM@Z ENDP	; instant_action::set_start_position
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_ch$ = 8						; size = 1
?set_start_mode@instant_action@@SAXD@Z PROC		; instant_action::set_start_mode

; 374  : {

	push	ebp
	mov	ebp, esp

; 375  : 	current_mode = ch;

	mov	al, BYTE PTR _ch$[ebp]
	mov	BYTE PTR ?current_mode@instant_action@@1DA, al ; instant_action::current_mode

; 376  : }

	pop	ebp
	ret	0
?set_start_mode@instant_action@@SAXD@Z ENDP		; instant_action::set_start_mode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_wave$ = 8						; size = 4
?set_start_wave@instant_action@@SAXH@Z PROC		; instant_action::set_start_wave

; 353  : {

	push	ebp
	mov	ebp, esp

; 354  : 	ShiAssert( wave >= 0 && wave <=4 );	// Since its used as sim skill it had better be this way...
; 355  : 
; 356  : 	current_wave = wave;

	mov	eax, DWORD PTR _wave$[ebp]
	mov	DWORD PTR ?current_wave@instant_action@@1HA, eax ; instant_action::current_wave

; 357  : 	generic_skill = wave;

	mov	ecx, DWORD PTR _wave$[ebp]
	mov	DWORD PTR ?generic_skill@instant_action@@1HA, ecx ; instant_action::generic_skill

; 358  : 
; 359  : 	// SCR 11/30/98
; 360  : 	// It would be nice to do this here (as well as the team color hammering)
; 361  : 	// but that would require the Campaign to be loaded sooner.  It almost worked
; 362  : 	// when it was changed to the top of InstantActionFlyCB(), but it asserted and
; 363  : 	// I didn't want to figure out if the assert was necessary or not.
; 364  : 	// SO, I hacked this into the Team load from file.
; 365  : //	TeamInfo[2]->airExperience			= 60 + 10 * wave;
; 366  : //	TeamInfo[2]->airDefenseExperience	= 60 + 10 * wave;
; 367  : }

	pop	ebp
	ret	0
?set_start_wave@instant_action@@SAXH@Z ENDP		; instant_action::set_start_wave
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
?is_moving_mud@instant_action@@SAHXZ PROC		; instant_action::is_moving_mud

; 2126 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2127 : 	return (current_mode == 'm');

	movsx	eax, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	cmp	eax, 109				; 0000006dH
	jne	SHORT $LN3@is_moving_
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@is_moving_
$LN3@is_moving_:
	mov	DWORD PTR tv66[ebp], 0
$LN4@is_moving_:
	mov	eax, DWORD PTR tv66[ebp]

; 2128 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?is_moving_mud@instant_action@@SAHXZ ENDP		; instant_action::is_moving_mud
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
?is_fighter_sweep@instant_action@@SAHXZ PROC		; instant_action::is_fighter_sweep

; 2117 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2118 : 	return (current_mode == 'f');

	movsx	eax, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	cmp	eax, 102				; 00000066H
	jne	SHORT $LN3@is_fighter
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@is_fighter
$LN3@is_fighter:
	mov	DWORD PTR tv66[ebp], 0
$LN4@is_fighter:
	mov	eax, DWORD PTR tv66[ebp]

; 2119 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?is_fighter_sweep@instant_action@@SAHXZ ENDP		; instant_action::is_fighter_sweep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_thing$ = -548						; size = 4
_time$ = -544						; size = 4
_level$ = -540						; size = 4
_data$ = -536						; size = 532
__$ArrayPad$ = -4					; size = 4
?create_more_stuff@instant_action@@SAXXZ PROC		; instant_action::create_more_stuff

; 2073 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 548				; 00000224H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2074 : 	int
; 2075 : 		thing,
; 2076 : 		level,
; 2077 : 		time;
; 2078 : 
; 2079 : 	ia_data
; 2080 : 		data;
; 2081 : 
; 2082 : 	time = TheCampaign.CurrentTime - start_time * 1000;

	mov	eax, DWORD PTR ?start_time@instant_action@@1JA ; instant_action::start_time
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	ecx, eax
	mov	DWORD PTR _time$[ebp], ecx

; 2083 : 
; 2084 : 	if (current_mode == 'm')

	movsx	edx, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	cmp	edx, 109				; 0000006dH
	jne	SHORT $LN3@create_mor

; 2085 : 	{
; 2086 : 		level = (current_wave+2)*4;		// Pick our starting level

	mov	eax, DWORD PTR ?current_wave@instant_action@@1HA ; instant_action::current_wave
	lea	ecx, DWORD PTR [eax*4+8]
	mov	DWORD PTR _level$[ebp], ecx

; 2087 : 		level += time / 30000;			// One new vehicle type every 30 seconds

	mov	eax, DWORD PTR _time$[ebp]
	cdq
	mov	ecx, 30000				; 00007530H
	idiv	ecx
	add	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR _level$[ebp], eax

; 2088 : 	}
; 2089 : 	else

	jmp	SHORT $LN2@create_mor
$LN3@create_mor:

; 2090 : 	{
; 2091 : 		level = (current_wave+1)*4;		// In fighter sweep, we bias down one level for ground things

	mov	edx, DWORD PTR ?current_wave@instant_action@@1HA ; instant_action::current_wave
	lea	eax, DWORD PTR [edx*4+4]
	mov	DWORD PTR _level$[ebp], eax

; 2092 : 		level += time / 120000;			// One new vehicle type very 2 minutes

	mov	eax, DWORD PTR _time$[ebp]
	cdq
	mov	ecx, 120000				; 0001d4c0H
	idiv	ecx
	add	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR _level$[ebp], eax
$LN2@create_mor:

; 2093 : 	}
; 2094 : 
; 2095 : 	if (level > groundStuffLen)

	cmp	DWORD PTR _level$[ebp], 24		; 00000018H
	jle	SHORT $LN1@create_mor

; 2096 : 	{
; 2097 : 		level = groundStuffLen;

	mov	DWORD PTR _level$[ebp], 24		; 00000018H
$LN1@create_mor:

; 2098 : 	}
; 2099 : 
; 2100 : 	// MonoPrint ("Moving Mud Level %d\n", level);
; 2101 : 
; 2102 : 	thing = rand () % level;

	call	_rand
	cdq
	idiv	DWORD PTR _level$[ebp]
	mov	DWORD PTR _thing$[ebp], edx

; 2103 : 
; 2104 : 	data.type		= groundStuff[thing].type;

	mov	edx, DWORD PTR _thing$[ebp]
	mov	eax, DWORD PTR _groundStuff[edx*8]
	mov	DWORD PTR _data$[ebp+12], eax

; 2105 : 	data.distance	= groundStuff[thing].range * (0.75f + 0.5f*rand()/(float)RAND_MAX);

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR __real@46fffe00
	addss	xmm0, DWORD PTR __real@3f400000
	mov	ecx, DWORD PTR _thing$[ebp]
	mulss	xmm0, DWORD PTR _groundStuff[ecx*8+4]
	movss	DWORD PTR _data$[ebp], xmm0

; 2106 : 	data.aspect		= (float)(rand() % 120 - 60);

	call	_rand
	cdq
	mov	ecx, 120				; 00000078H
	idiv	ecx
	sub	edx, 60					; 0000003cH
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _data$[ebp+4], xmm0

; 2107 : 	data.side		= 2;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -4081				; fffff00fH
	or	edx, 32					; 00000020H
	mov	DWORD PTR _data$[ebp+16], edx

; 2108 : 
; 2109 : 	create_battalion (data);

	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?create_battalion@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_battalion
	add	esp, 4

; 2110 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?create_more_stuff@instant_action@@SAXXZ ENDP		; instant_action::create_more_stuff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_iter$2 = -56						; size = 12
_aircraft_left$ = -44					; size = 4
_count_battalions$ = -40				; size = 4
_count_flights$ = -36					; size = 4
_unit$ = -32						; size = 4
_px$ = -28						; size = 2
_py$ = -24						; size = 2
_ux$ = -20						; size = 2
_uy$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
?check_next_wave@instant_action@@SAXXZ PROC		; instant_action::check_next_wave

; 264  : void instant_action::check_next_wave (void){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?check_next_wave@instant_action@@SAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 265  : 	int aircraft_left, count_battalions, count_flights;
; 266  : 	Unit unit;
; 267  : 	GridIndex px, py, ux, uy;
; 268  : 
; 269  : 	if (wave_created){

	cmp	DWORD PTR ?wave_created@instant_action@@1HA, 0 ; instant_action::wave_created
	je	$LN20@check_next

; 270  : 		count_flights = 0;

	mov	DWORD PTR _count_flights$[ebp], 0

; 271  : 		count_battalions = 0;

	mov	DWORD PTR _count_battalions$[ebp], 0

; 272  : 		aircraft_left = 0;

	mov	DWORD PTR _aircraft_left$[ebp], 0

; 273  : 
; 274  : 		if (FalconLocalSession->GetPlayerEntity ()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	test	eax, eax
	je	$LN20@check_next

; 275  : 			player_flight->GetLocation (&px, &py);

	lea	eax, DWORD PTR _py$[ebp]
	push	eax
	lea	ecx, DWORD PTR _px$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 276  : 			{
; 277  : 				VuListIterator iter (AllRealList);			

	mov	edx, DWORD PTR ?AllRealList@@3PAVVuLinkedList@@A ; AllRealList
	push	edx
	lea	ecx, DWORD PTR _iter$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 278  : 				unit = GetFirstUnit (&iter);

	lea	eax, DWORD PTR _iter$2[ebp]
	push	eax
	call	?GetFirstUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetFirstUnit
	add	esp, 4
	mov	DWORD PTR _unit$[ebp], eax
$LN17@check_next:

; 279  : 				while (unit)

	cmp	DWORD PTR _unit$[ebp], 0
	je	$LN16@check_next

; 280  : 				{
; 281  : 					if ((unit->GetDomain () == DOMAIN_AIR) || (unit->GetDomain () == DOMAIN_LAND))

	mov	ecx, DWORD PTR _unit$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 2
	je	SHORT $LN14@check_next
	mov	ecx, DWORD PTR _unit$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 3
	jne	$LN15@check_next
$LN14@check_next:

; 282  : 					{
; 283  : 						if ((!unit->IsDead()) && (unit->IsBattalion()))

	mov	eax, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	jne	SHORT $LN13@check_next
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	je	SHORT $LN13@check_next

; 284  : 						{
; 285  : 							unit->GetLocation (&ux, &uy);

	lea	ecx, DWORD PTR _uy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ux$[ebp]
	push	edx
	mov	ecx, DWORD PTR _unit$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 286  : 							
; 287  : 							if (DistSqu(px, py, ux, uy) > 60*60)

	movzx	eax, WORD PTR _uy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ux$[ebp]
	push	ecx
	movzx	edx, WORD PTR _py$[ebp]
	push	edx
	movzx	eax, WORD PTR _px$[ebp]
	push	eax
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cmp	eax, 3600				; 00000e10H
	jle	SHORT $LN12@check_next

; 288  : 							{
; 289  : 								// MonoPrint ("IA Killing Unit %08x @%d\n", unit, distance);
; 290  : 								
; 291  : 								unit->KillUnit ();

	mov	ecx, DWORD PTR _unit$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 292  : 							}
; 293  : 							else

	jmp	SHORT $LN13@check_next
$LN12@check_next:

; 294  : 							{
; 295  : 								count_battalions ++;

	mov	ecx, DWORD PTR _count_battalions$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count_battalions$[ebp], ecx
$LN13@check_next:

; 296  : 							}
; 297  : 						}
; 298  : 						
; 299  : 						if ((!unit->IsDead()) && (unit->IsFlight()))

	mov	edx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [eax+552]
	call	edx
	test	eax, eax
	jne	SHORT $LN15@check_next
	mov	eax, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN15@check_next

; 300  : 						{
; 301  : 							aircraft_left += unit->GetTotalVehicles ();

	mov	ecx, DWORD PTR _unit$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	add	eax, DWORD PTR _aircraft_left$[ebp]
	mov	DWORD PTR _aircraft_left$[ebp], eax

; 302  : 							
; 303  : 							unit->GetLocation (&ux, &uy);

	lea	ecx, DWORD PTR _uy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ux$[ebp]
	push	edx
	mov	ecx, DWORD PTR _unit$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 304  : 							
; 305  : 							if (DistSqu(px, py, ux, uy) > 60*60)

	movzx	eax, WORD PTR _uy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _ux$[ebp]
	push	ecx
	movzx	edx, WORD PTR _py$[ebp]
	push	edx
	movzx	eax, WORD PTR _px$[ebp]
	push	eax
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cmp	eax, 3600				; 00000e10H
	jle	SHORT $LN9@check_next

; 306  : 							{
; 307  : 								// MonoPrint ("IA Killing Unit %08x @%d\n", unit, distance);
; 308  : 								
; 309  : 								unit->KillUnit ();

	mov	ecx, DWORD PTR _unit$[ebp]
	call	?KillUnit@UnitClass@@QAEXXZ		; UnitClass::KillUnit

; 310  : 								count_flights ++;

	mov	ecx, DWORD PTR _count_flights$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count_flights$[ebp], ecx
	jmp	SHORT $LN15@check_next
$LN9@check_next:

; 311  : 							}
; 312  : 							else if (unit->IAKill ())

	mov	ecx, DWORD PTR _unit$[ebp]
	call	?IAKill@UnitClass@@QAEHXZ		; UnitClass::IAKill
	test	eax, eax
	je	SHORT $LN15@check_next

; 313  : 							{
; 314  : 								count_flights ++;

	mov	edx, DWORD PTR _count_flights$[ebp]
	add	edx, 1
	mov	DWORD PTR _count_flights$[ebp], edx
$LN15@check_next:

; 315  : 							}
; 316  : 						}
; 317  : 					}
; 318  : 					unit = GetNextUnit (&iter);

	lea	eax, DWORD PTR _iter$2[ebp]
	push	eax
	call	?GetNextUnit@@YAPAVUnitClass@@PAVVuListIterator@@@Z ; GetNextUnit
	add	esp, 4
	mov	DWORD PTR _unit$[ebp], eax

; 319  : 				}

	jmp	$LN17@check_next
$LN16@check_next:

; 320  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iter$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 321  : 			if (current_mode == 'm')

	movsx	ecx, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	cmp	ecx, 109				; 0000006dH
	jne	SHORT $LN6@check_next

; 322  : 			{
; 323  : 				if (count_battalions < 12)

	cmp	DWORD PTR _count_battalions$[ebp], 12	; 0000000cH
	jge	SHORT $LN5@check_next

; 324  : 				{
; 325  : 					create_more_stuff ();

	call	?create_more_stuff@instant_action@@SAXXZ ; instant_action::create_more_stuff
$LN5@check_next:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN20@check_next
$LN6@check_next:

; 329  : 			{
; 330  : 				if (count_battalions < 4)

	cmp	DWORD PTR _count_battalions$[ebp], 4
	jge	SHORT $LN3@check_next

; 331  : 				{
; 332  : 					create_more_stuff ();

	call	?create_more_stuff@instant_action@@SAXXZ ; instant_action::create_more_stuff
$LN3@check_next:

; 333  : 				}
; 334  : 
; 335  : //				MonoPrint ("Flights %d\n", count_flights);
; 336  : 
; 337  : 				if (((count_flights == 0) || ((wave_time) && (TheCampaign.CurrentTime > wave_time))) && (aircraft_left < 4))

	cmp	DWORD PTR _count_flights$[ebp], 0
	je	SHORT $LN1@check_next
	cmp	DWORD PTR ?wave_time@instant_action@@1KA, 0 ; instant_action::wave_time
	je	SHORT $LN20@check_next
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	cmp	edx, DWORD PTR ?wave_time@instant_action@@1KA ; instant_action::wave_time
	jbe	SHORT $LN20@check_next
$LN1@check_next:
	cmp	DWORD PTR _aircraft_left$[ebp], 4
	jge	SHORT $LN20@check_next

; 338  : 				{
; 339  : 					current_wave ++;

	mov	eax, DWORD PTR ?current_wave@instant_action@@1HA ; instant_action::current_wave
	add	eax, 1
	mov	DWORD PTR ?current_wave@instant_action@@1HA, eax ; instant_action::current_wave

; 340  : 					
; 341  : 					create_wave ();

	call	?create_wave@instant_action@@SAXXZ	; instant_action::create_wave
$LN20@check_next:

; 342  : 				}
; 343  : 			}
; 344  : 		}
; 345  : 	}
; 346  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?check_next_wave@instant_action@@SAXXZ$0:
	lea	ecx, DWORD PTR _iter$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?check_next_wave@instant_action@@SAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?check_next_wave@instant_action@@SAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?check_next_wave@instant_action@@SAXXZ ENDP		; instant_action::check_next_wave
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_fp$ = -824						; size = 4
_valid_data$ = -820					; size = 4
_ia$ = -816						; size = 4
_value$ = -812						; size = 4
_loop$ = -808						; size = 4
_ptr$ = -804						; size = 4
_str$ = -800						; size = 4
_data$ = -796						; size = 532
_buffer$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
?create_wave@instant_action@@SAXXZ PROC			; instant_action::create_wave

; 383  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 824				; 00000338H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 384  : 	ia_data
; 385  : 		data;
; 386  : 
; 387  : 	int
; 388  : 		loop=0,

	mov	DWORD PTR _loop$[ebp], 0

; 389  : 		valid_data=0,

	mov	DWORD PTR _valid_data$[ebp], 0

; 390  : 		value=0;

	mov	DWORD PTR _value$[ebp], 0

; 391  : 
; 392  : 	char
; 393  : 		*ptr=NULL,

	mov	DWORD PTR _ptr$[ebp], 0

; 394  : 		*str=NULL,

	mov	DWORD PTR _str$[ebp], 0

; 395  : 		buffer[MAX_PATH]={0};

	mov	BYTE PTR _buffer$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _buffer$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 396  : 
; 397  : 	FILE
; 398  : 		*fp=NULL;

	mov	DWORD PTR _fp$[ebp], 0

; 399  : 
; 400  : 	ia_type
; 401  : 		*ia=NULL;

	mov	DWORD PTR _ia$[ebp], 0

; 402  : 
; 403  : 	wave_created = 0;

	mov	DWORD PTR ?wave_created@instant_action@@1HA, 0 ; instant_action::wave_created

; 404  : 	wave_time = 0;

	mov	DWORD PTR ?wave_time@instant_action@@1KA, 0 ; instant_action::wave_time

; 405  : 
; 406  : 	sprintf (buffer, "%s\\%c%d.ia", FalconCampUserSaveDirectory, current_mode, current_wave);

	mov	ecx, DWORD PTR ?current_wave@instant_action@@1HA ; instant_action::current_wave
	push	ecx
	movsx	edx, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	push	edx
	push	OFFSET ?FalconCampUserSaveDirectory@@3PADA ; FalconCampUserSaveDirectory
	push	OFFSET ??_C@_0L@KBLNOMHJ@?$CFs?2?$CFc?$CFd?4ia?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 407  : 
; 408  : 	fp = fopen (buffer, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 409  : 
; 410  : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN87@create_wav

; 411  : 	{
; 412  : 		current_wave --;

	mov	edx, DWORD PTR ?current_wave@instant_action@@1HA ; instant_action::current_wave
	sub	edx, 1
	mov	DWORD PTR ?current_wave@instant_action@@1HA, edx ; instant_action::current_wave

; 413  : 		sprintf (buffer, "%s\\%c%d.ia", FalconCampUserSaveDirectory, current_mode, current_wave);

	mov	eax, DWORD PTR ?current_wave@instant_action@@1HA ; instant_action::current_wave
	push	eax
	movsx	ecx, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	push	ecx
	push	OFFSET ?FalconCampUserSaveDirectory@@3PADA ; FalconCampUserSaveDirectory
	push	OFFSET ??_C@_0L@KBLNOMHJ@?$CFs?2?$CFc?$CFd?4ia?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 414  : 
; 415  : 		fp = fopen (buffer, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 416  : 
; 417  : 		if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN86@create_wav

; 418  : 		{
; 419  : 			// MonoPrint ("Cannot open %s for Instant Action Wave File", buffer);
; 420  : 			current_wave ++;

	mov	ecx, DWORD PTR ?current_wave@instant_action@@1HA ; instant_action::current_wave
	add	ecx, 1
	mov	DWORD PTR ?current_wave@instant_action@@1HA, ecx ; instant_action::current_wave

; 421  : 			return;

	jmp	$LN88@create_wav
$LN86@create_wav:
$LN87@create_wav:

; 422  : 		}
; 423  : 
; 424  : 		// MonoPrint ("Repeating %s for Instant Action Wave File", buffer);
; 425  : 	}
; 426  : 	else
; 427  : 	{
; 428  : 		// MonoPrint ("Loading %s for Instant Action Wave File", buffer);
; 429  : 	}
; 430  : 
; 431  : 	data.distance = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp], xmm0

; 432  : 	data.aspect = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp+4], xmm0

; 433  : 	data.altitude = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp+8], xmm0

; 434  : 	data.type = ia_unknown;

	mov	DWORD PTR _data$[ebp+12], 0

; 435  : 	data.size = 0;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -16				; fffffff0H
	mov	DWORD PTR _data$[ebp+16], edx

; 436  : 	data.side = 0;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -4081				; fffff00fH
	mov	DWORD PTR _data$[ebp+16], eax

; 437  : 	data.dumb = 0;

	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -8193				; ffffdfffH
	mov	DWORD PTR _data$[ebp+16], ecx

; 438  : 	data.skill = generic_skill;

	mov	edx, DWORD PTR ?generic_skill@instant_action@@1HA ; instant_action::generic_skill
	and	edx, 15					; 0000000fH
	shl	edx, 14					; 0000000eH
	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -245761				; fffc3fffH
	or	eax, edx
	mov	DWORD PTR _data$[ebp+16], eax

; 439  : 	data.guns = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 262144				; 00040000H
	mov	DWORD PTR _data$[ebp+16], ecx

; 440  : 	data.radar = 1;

	mov	edx, DWORD PTR _data$[ebp+16]
	or	edx, 524288				; 00080000H
	mov	DWORD PTR _data$[ebp+16], edx

; 441  : 	data.heat = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	or	eax, 1048576				; 00100000H
	mov	DWORD PTR _data$[ebp+16], eax

; 442  : 	data.ground = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 2097152				; 00200000H
	mov	DWORD PTR _data$[ebp+16], ecx

; 443  : 	data.num_vector = 0;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -1069547521			; c03fffffH
	mov	DWORD PTR _data$[ebp+16], edx

; 444  : 
; 445  : 	valid_data = 0;

	mov	DWORD PTR _valid_data$[ebp], 0
$LN84@create_wav:

; 446  : 
; 447  : 	while (fgets (buffer, 100, fp))

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	100					; 00000064H
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN83@create_wav

; 448  : 	{
; 449  : 		str = buffer;

	lea	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _str$[ebp], edx
$LN82@create_wav:

; 450  : 
; 451  : 		while (*str)

	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN81@create_wav

; 452  : 		{
; 453  : 			if ((*str != ' ') && (*str != '\t'))

	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN80@create_wav
	mov	ecx, DWORD PTR _str$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	je	SHORT $LN80@create_wav

; 454  : 			{
; 455  : 				break;

	jmp	SHORT $LN81@create_wav
$LN80@create_wav:

; 456  : 			}
; 457  : 
; 458  : 			str ++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 459  : 		}

	jmp	SHORT $LN82@create_wav
$LN81@create_wav:

; 460  : 
; 461  : 		if ((*str >= '0') && (*str <= '9'))

	mov	ecx, DWORD PTR _str$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	$LN79@create_wav
	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	$LN79@create_wav

; 462  : 		{
; 463  : 			value = atoi (str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _value$[ebp], eax
$LN78@create_wav:

; 464  : 
; 465  : 			while (*str)

	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN77@create_wav

; 466  : 			{
; 467  : 				if (*str == ' ')

	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN76@create_wav

; 468  : 				{
; 469  : 					str ++;

	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$[ebp], ecx

; 470  : 					break;

	jmp	SHORT $LN77@create_wav
$LN76@create_wav:

; 471  : 				}
; 472  : 
; 473  : 				str ++;

	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx

; 474  : 			}

	jmp	SHORT $LN78@create_wav
$LN77@create_wav:

; 475  : 
; 476  : 			ptr = str;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
$LN75@create_wav:

; 477  : 
; 478  : 			while (*ptr)

	mov	ecx, DWORD PTR _ptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN74@create_wav

; 479  : 			{
; 480  : 				if ((*ptr == '\n') || (*ptr == '\r') || (*ptr == ' ') || (*ptr == '\t'))

	mov	eax, DWORD PTR _ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN72@create_wav
	mov	edx, DWORD PTR _ptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN72@create_wav
	mov	ecx, DWORD PTR _ptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN72@create_wav
	mov	eax, DWORD PTR _ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jne	SHORT $LN73@create_wav
$LN72@create_wav:

; 481  : 				{
; 482  : 					*ptr = '\0';

	mov	edx, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [edx], 0

; 483  : 					break;

	jmp	SHORT $LN74@create_wav
$LN73@create_wav:

; 484  : 				}
; 485  : 
; 486  : 				ptr ++;

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax

; 487  : 			}

	jmp	SHORT $LN75@create_wav
$LN74@create_wav:

; 488  : 
; 489  : 			if (stricmp (str, "minutes") == 0)

	push	OFFSET ??_C@_07GCICIJGK@minutes?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN71@create_wav

; 490  : 			{
; 491  : 				wave_time = TheCampaign.CurrentTime + value * 60 * 1000;

	mov	edx, DWORD PTR _value$[ebp]
	imul	edx, 60					; 0000003cH
	imul	edx, 1000				; 000003e8H
	add	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR ?wave_time@instant_action@@1KA, edx ; instant_action::wave_time
	jmp	$LN48@create_wav
$LN71@create_wav:

; 492  : 			}
; 493  : 			else if (stricmp (str, "km") == 0)

	push	OFFSET ??_C@_02JEGPBHMG@km?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN69@create_wav

; 494  : 			{
; 495  : 				if (data.num_vector)

	mov	ecx, DWORD PTR _data$[ebp+16]
	shl	ecx, 2
	sar	ecx, 24					; 00000018H
	test	ecx, ecx
	je	SHORT $LN68@create_wav

; 496  : 				{
; 497  : 					data.v_dist[data.num_vector - 1] = (float)value;

	cvtsi2ss xmm0, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _data$[ebp+16]
	shl	edx, 2
	sar	edx, 24					; 00000018H
	movss	DWORD PTR _data$[ebp+edx*4+144], xmm0

; 498  : 				}
; 499  : 				else

	jmp	SHORT $LN67@create_wav
$LN68@create_wav:

; 500  : 				{
; 501  : 					data.distance = (float)value;

	cvtsi2ss xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR _data$[ebp], xmm0
$LN67@create_wav:

; 502  : 				}

	jmp	$LN48@create_wav
$LN69@create_wav:

; 503  : 			}
; 504  : 			else if (stricmp (str, "deg") == 0)

	push	OFFSET ??_C@_03OFPLEBM@deg?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN65@create_wav

; 505  : 			{
; 506  : 				data.aspect = (float)value;

	cvtsi2ss xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR _data$[ebp+4], xmm0
	jmp	$LN48@create_wav
$LN65@create_wav:

; 507  : 			}
; 508  : 			else if (stricmp (str, "kts") == 0)

	push	OFFSET ??_C@_03GFHGLKFI@kts?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN63@create_wav

; 509  : 			{
; 510  : 				if (data.num_vector)

	mov	edx, DWORD PTR _data$[ebp+16]
	shl	edx, 2
	sar	edx, 24					; 00000018H
	test	edx, edx
	je	SHORT $LN62@create_wav

; 511  : 				{
; 512  : 					data.v_kts[data.num_vector - 1] = (float)value;

	cvtsi2ss xmm0, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _data$[ebp+16]
	shl	eax, 2
	sar	eax, 24					; 00000018H
	movss	DWORD PTR _data$[ebp+eax*4+400], xmm0
$LN62@create_wav:

; 513  : 				}
; 514  : 			}

	jmp	$LN48@create_wav
$LN63@create_wav:

; 515  : 			else if (stricmp (str, "feet") == 0)

	push	OFFSET ??_C@_04CGBIDIAH@feet?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN60@create_wav

; 516  : 			{
; 517  : 				if (data.num_vector)

	mov	edx, DWORD PTR _data$[ebp+16]
	shl	edx, 2
	sar	edx, 24					; 00000018H
	test	edx, edx
	je	SHORT $LN59@create_wav

; 518  : 				{
; 519  : 					data.v_alt[data.num_vector - 1] = (float)value;

	cvtsi2ss xmm0, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _data$[ebp+16]
	shl	eax, 2
	sar	eax, 24					; 00000018H
	movss	DWORD PTR _data$[ebp+eax*4+272], xmm0

; 520  : 				}
; 521  : 				else

	jmp	SHORT $LN58@create_wav
$LN59@create_wav:

; 522  : 				{
; 523  : 					data.altitude = (float)value;

	cvtsi2ss xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR _data$[ebp+8], xmm0
$LN58@create_wav:

; 524  : 				}

	jmp	$LN48@create_wav
$LN60@create_wav:

; 525  : 			}
; 526  : 			else if (stricmp (str, "vector") == 0)

	push	OFFSET ??_C@_06NBFPPGEG@vector?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN56@create_wav

; 527  : 			{
; 528  : 				if (data.num_vector < 10)

	mov	edx, DWORD PTR _data$[ebp+16]
	shl	edx, 2
	sar	edx, 24					; 00000018H
	cmp	edx, 10					; 0000000aH
	jge	SHORT $LN55@create_wav

; 529  : 				{
; 530  : 					data.num_vector ++;

	mov	eax, DWORD PTR _data$[ebp+16]
	shl	eax, 2
	sar	eax, 24					; 00000018H
	add	eax, 1
	and	eax, 255				; 000000ffH
	shl	eax, 22					; 00000016H
	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -1069547521			; c03fffffH
	or	ecx, eax
	mov	DWORD PTR _data$[ebp+16], ecx

; 531  : 					data.vector[data.num_vector - 1] = (float)value;

	cvtsi2ss xmm0, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _data$[ebp+16]
	shl	edx, 2
	sar	edx, 24					; 00000018H
	movss	DWORD PTR _data$[ebp+edx*4+16], xmm0
$LN55@create_wav:

; 532  : 				}
; 533  : 			}
; 534  : 			else

	jmp	$LN48@create_wav
$LN56@create_wav:

; 535  : 			{
; 536  : 				ia = 0;

	mov	DWORD PTR _ia$[ebp], 0

; 537  : 
; 538  : 				for (loop = 0; ia_air_objects[loop].name; loop ++)

	mov	DWORD PTR _loop$[ebp], 0
	jmp	SHORT $LN53@create_wav
$LN52@create_wav:
	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	DWORD PTR _loop$[ebp], eax
$LN53@create_wav:
	mov	ecx, DWORD PTR _loop$[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR _ia_air_objects[ecx], 0
	je	$LN51@create_wav

; 539  : 				{
; 540  : 					if (stricmp (str, ia_air_objects[loop].name) == 0)

	mov	edx, DWORD PTR _loop$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _ia_air_objects[edx]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	$LN50@create_wav

; 541  : 					{
; 542  : 						ia = &ia_air_objects[loop];

	mov	edx, DWORD PTR _loop$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _ia_air_objects
	mov	DWORD PTR _ia$[ebp], edx

; 543  : 
; 544  : 						if (valid_data)

	cmp	DWORD PTR _valid_data$[ebp], 0
	je	SHORT $LN49@create_wav

; 545  : 						{
; 546  : 							create_unit (data);

	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?create_unit@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_unit
	add	esp, 4
$LN49@create_wav:

; 547  : 						}
; 548  : 
; 549  : 						valid_data = 1;

	mov	DWORD PTR _valid_data$[ebp], 1

; 550  : 
; 551  : 						data.size = value;

	mov	ecx, DWORD PTR _value$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -16				; fffffff0H
	or	edx, ecx
	mov	DWORD PTR _data$[ebp+16], edx

; 552  : 						data.type = ia->type;

	mov	eax, DWORD PTR _ia$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _data$[ebp+12], ecx

; 553  : 						data.distance = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp], xmm0

; 554  : 						data.aspect = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp+4], xmm0

; 555  : 						data.altitude = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp+8], xmm0

; 556  : 						data.side = 0;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -4081				; fffff00fH
	mov	DWORD PTR _data$[ebp+16], edx

; 557  : 						data.dumb = 0;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -8193				; ffffdfffH
	mov	DWORD PTR _data$[ebp+16], eax

; 558  : 						data.skill = generic_skill;

	mov	ecx, DWORD PTR ?generic_skill@instant_action@@1HA ; instant_action::generic_skill
	and	ecx, 15					; 0000000fH
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -245761				; fffc3fffH
	or	edx, ecx
	mov	DWORD PTR _data$[ebp+16], edx

; 559  : 						data.guns = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _data$[ebp+16], eax

; 560  : 						data.radar = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 524288				; 00080000H
	mov	DWORD PTR _data$[ebp+16], ecx

; 561  : 						data.heat = 1;

	mov	edx, DWORD PTR _data$[ebp+16]
	or	edx, 1048576				; 00100000H
	mov	DWORD PTR _data$[ebp+16], edx

; 562  : 						data.ground = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	or	eax, 2097152				; 00200000H
	mov	DWORD PTR _data$[ebp+16], eax

; 563  : 						data.num_vector = 0;

	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -1069547521			; c03fffffH
	mov	DWORD PTR _data$[ebp+16], ecx

; 564  : 						break;

	jmp	SHORT $LN51@create_wav
$LN50@create_wav:

; 565  : 					}
; 566  : 				}

	jmp	$LN52@create_wav
$LN51@create_wav:

; 567  : 
; 568  : 				if (!ia)

	cmp	DWORD PTR _ia$[ebp], 0
	jne	SHORT $LN48@create_wav

; 569  : 				{
; 570  : 					valid_data = 0;

	mov	DWORD PTR _valid_data$[ebp], 0

; 571  : 					MonoPrint ("Unknown %d:%s\n", value, str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@JOIGPIED@Unknown?5?$CFd?3?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 12					; 0000000cH
$LN48@create_wav:

; 572  : 				}
; 573  : 			}
; 574  : 		}
; 575  : 		else

	jmp	$LN2@create_wav
$LN79@create_wav:

; 576  : 		{
; 577  : 			ptr = str;

	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR _ptr$[ebp], ecx
$LN46@create_wav:

; 578  : 
; 579  : 			while (*ptr)

	mov	edx, DWORD PTR _ptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN45@create_wav

; 580  : 			{
; 581  : 				if ((*ptr == '\n') || (*ptr == '\r') || (*ptr == ' ') || (*ptr == '\t'))

	mov	ecx, DWORD PTR _ptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN43@create_wav
	mov	eax, DWORD PTR _ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN43@create_wav
	mov	edx, DWORD PTR _ptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN43@create_wav
	mov	ecx, DWORD PTR _ptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jne	SHORT $LN44@create_wav
$LN43@create_wav:

; 582  : 				{
; 583  : 					*ptr = '\0';

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [eax], 0

; 584  : 					break;

	jmp	SHORT $LN45@create_wav
$LN44@create_wav:

; 585  : 				}
; 586  : 
; 587  : 				ptr ++;

	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 588  : 			}

	jmp	SHORT $LN46@create_wav
$LN45@create_wav:

; 589  : 
; 590  : 			if ((*str == '#') || (*str == '\0'))

	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN41@create_wav
	mov	ecx, DWORD PTR _str$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN42@create_wav
$LN41@create_wav:

; 591  : 			{
; 592  : 				// Comment or blank line
; 593  : 			}
; 594  : 			else

	jmp	$LN2@create_wav
$LN42@create_wav:

; 595  : 			{
; 596  : 				if (stricmp (str, "allied") == 0)

	push	OFFSET ??_C@_06GFAFCNFM@allied?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@create_wav

; 597  : 				{
; 598  : 					data.side = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -4081				; fffff00fH
	or	ecx, 16					; 00000010H
	mov	DWORD PTR _data$[ebp+16], ecx
	jmp	$LN2@create_wav
$LN39@create_wav:

; 599  : 				}
; 600  : 				else if (stricmp (str, "enemy") == 0)

	push	OFFSET ??_C@_05ICAMJEGE@enemy?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@create_wav

; 601  : 				{
; 602  : 					data.side = 2;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -4081				; fffff00fH
	or	eax, 32					; 00000020H
	mov	DWORD PTR _data$[ebp+16], eax
	jmp	$LN2@create_wav
$LN37@create_wav:

; 603  : 				}
; 604  : 				else if (stricmp (str, "neutral") == 0)

	push	OFFSET ??_C@_07JAOEMGIL@neutral?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@create_wav

; 605  : 				{
; 606  : 					data.side = 0;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -4081				; fffff00fH
	mov	DWORD PTR _data$[ebp+16], edx
	jmp	$LN2@create_wav
$LN35@create_wav:

; 607  : 				}
; 608  : 				else if (stricmp (str, "killthis") == 0)

	push	OFFSET ??_C@_08IKJAOFHB@killthis?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@create_wav

; 609  : 				{
; 610  : 					data.kill = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 4096				; 00001000H
	mov	DWORD PTR _data$[ebp+16], ecx
	jmp	$LN2@create_wav
$LN33@create_wav:

; 611  : 				}
; 612  : 				else if (stricmp (str, "guns") == 0)

	push	OFFSET ??_C@_04IHFDPAO@guns?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@create_wav

; 613  : 				{
; 614  : 					data.guns = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _data$[ebp+16], eax
	jmp	$LN2@create_wav
$LN31@create_wav:

; 615  : 				}
; 616  : 				else if (stricmp (str, "radar") == 0)

	push	OFFSET ??_C@_05EMNNHGFM@radar?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@create_wav

; 617  : 				{
; 618  : 					data.radar = 1;

	mov	edx, DWORD PTR _data$[ebp+16]
	or	edx, 524288				; 00080000H
	mov	DWORD PTR _data$[ebp+16], edx
	jmp	$LN2@create_wav
$LN29@create_wav:

; 619  : 				}
; 620  : 				else if (stricmp (str, "heat") == 0)

	push	OFFSET ??_C@_04JOCBCOLK@heat?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@create_wav

; 621  : 				{
; 622  : 					data.heat = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 1048576				; 00100000H
	mov	DWORD PTR _data$[ebp+16], ecx
	jmp	$LN2@create_wav
$LN27@create_wav:

; 623  : 				}
; 624  : 				else if (stricmp (str, "ground") == 0)

	push	OFFSET ??_C@_06GODDAGJL@ground?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@create_wav

; 625  : 				{
; 626  : 					data.ground = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	or	eax, 2097152				; 00200000H
	mov	DWORD PTR _data$[ebp+16], eax
	jmp	$LN2@create_wav
$LN25@create_wav:

; 627  : 				}
; 628  : 				else if (stricmp (str, "noweapons") == 0)

	push	OFFSET ??_C@_09DAPOABIO@noweapons?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@create_wav

; 629  : 				{
; 630  : 					data.guns = 0;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -262145				; fffbffffH
	mov	DWORD PTR _data$[ebp+16], edx

; 631  : 					data.radar = 0;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -524289				; fff7ffffH
	mov	DWORD PTR _data$[ebp+16], eax

; 632  : 					data.heat = 0;

	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -1048577				; ffefffffH
	mov	DWORD PTR _data$[ebp+16], ecx
	jmp	$LN2@create_wav
$LN23@create_wav:

; 633  : 				}
; 634  : 				else if (stricmp (str, "full") == 0)

	push	OFFSET ??_C@_04PLMLMMEO@full?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@create_wav

; 635  : 				{
; 636  : 					data.guns = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _data$[ebp+16], eax

; 637  : 					data.radar = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 524288				; 00080000H
	mov	DWORD PTR _data$[ebp+16], ecx

; 638  : 					data.heat = 1;

	mov	edx, DWORD PTR _data$[ebp+16]
	or	edx, 1048576				; 00100000H
	mov	DWORD PTR _data$[ebp+16], edx
	jmp	$LN2@create_wav
$LN21@create_wav:

; 639  : 				}
; 640  : 				else if (stricmp (str, "dumb") == 0)

	push	OFFSET ??_C@_04BOEKNIJH@dumb?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@create_wav

; 641  : 				{
; 642  : 					data.dumb = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 8192				; 00002000H
	mov	DWORD PTR _data$[ebp+16], ecx

; 643  : 					data.skill = 0;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -245761				; fffc3fffH
	mov	DWORD PTR _data$[ebp+16], edx
	jmp	$LN2@create_wav
$LN19@create_wav:

; 644  : 				}
; 645  : 				else if (stricmp (str, "recruit") == 0)

	push	OFFSET ??_C@_07PAOAAHJB@recruit?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@create_wav

; 646  : 				{
; 647  : 					data.skill = 0;

	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -245761				; fffc3fffH
	mov	DWORD PTR _data$[ebp+16], ecx
	jmp	$LN2@create_wav
$LN17@create_wav:

; 648  : 				}
; 649  : 				else if (stricmp (str, "cadet") == 0)

	push	OFFSET ??_C@_05NFAEKIDI@cadet?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@create_wav

; 650  : 				{
; 651  : 					data.skill = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -245761				; fffc3fffH
	or	eax, 16384				; 00004000H
	mov	DWORD PTR _data$[ebp+16], eax
	jmp	$LN2@create_wav
$LN15@create_wav:

; 652  : 				}
; 653  : 				else if (stricmp (str, "rookie") == 0)

	push	OFFSET ??_C@_06EIAPKDNP@rookie?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@create_wav

; 654  : 				{
; 655  : 					data.skill = 2;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -245761				; fffc3fffH
	or	edx, 32768				; 00008000H
	mov	DWORD PTR _data$[ebp+16], edx
	jmp	$LN2@create_wav
$LN13@create_wav:

; 656  : 				}
; 657  : 				else if (stricmp (str, "veteran") == 0)

	push	OFFSET ??_C@_07JLFAODAA@veteran?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@create_wav

; 658  : 				{
; 659  : 					data.skill = 3;

	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -245761				; fffc3fffH
	or	ecx, 49152				; 0000c000H
	mov	DWORD PTR _data$[ebp+16], ecx
	jmp	$LN2@create_wav
$LN11@create_wav:

; 660  : 				}
; 661  : 				else if (stricmp (str, "ace") == 0)

	push	OFFSET ??_C@_03PDKFKBO@ace?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@create_wav

; 662  : 				{
; 663  : 					data.skill = 4;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -245761				; fffc3fffH
	or	eax, 65536				; 00010000H
	mov	DWORD PTR _data$[ebp+16], eax

; 664  : 				}
; 665  : 				else

	jmp	$LN2@create_wav
$LN9@create_wav:

; 666  : 				{
; 667  : 					ia = 0;

	mov	DWORD PTR _ia$[ebp], 0

; 668  : 
; 669  : 					for (loop = 0; ia_grnd_objects[loop].name; loop ++)

	mov	DWORD PTR _loop$[ebp], 0
	jmp	SHORT $LN7@create_wav
$LN6@create_wav:
	mov	ecx, DWORD PTR _loop$[ebp]
	add	ecx, 1
	mov	DWORD PTR _loop$[ebp], ecx
$LN7@create_wav:
	mov	edx, DWORD PTR _loop$[ebp]
	imul	edx, 12					; 0000000cH
	cmp	DWORD PTR _ia_grnd_objects[edx], 0
	je	$LN5@create_wav

; 670  : 					{
; 671  : 						if (stricmp (str, ia_grnd_objects[loop].name) == 0)

	mov	eax, DWORD PTR _loop$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _ia_grnd_objects[eax]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	$LN4@create_wav

; 672  : 						{
; 673  : 							ia = &ia_grnd_objects[loop];

	mov	eax, DWORD PTR _loop$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, OFFSET _ia_grnd_objects
	mov	DWORD PTR _ia$[ebp], eax

; 674  : 
; 675  : 							if (valid_data)

	cmp	DWORD PTR _valid_data$[ebp], 0
	je	SHORT $LN3@create_wav

; 676  : 							{
; 677  : 								create_unit (data);

	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?create_unit@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_unit
	add	esp, 4
$LN3@create_wav:

; 678  : 							}
; 679  : 
; 680  : 							valid_data = 1;

	mov	DWORD PTR _valid_data$[ebp], 1

; 681  : 
; 682  : 							data.size = value;

	mov	edx, DWORD PTR _value$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -16				; fffffff0H
	or	eax, edx
	mov	DWORD PTR _data$[ebp+16], eax

; 683  : 							data.type = ia->type;

	mov	ecx, DWORD PTR _ia$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _data$[ebp+12], edx

; 684  : 							data.distance = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp], xmm0

; 685  : 							data.aspect = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp+4], xmm0

; 686  : 							data.altitude = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _data$[ebp+8], xmm0

; 687  : 							data.side = 0;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -4081				; fffff00fH
	mov	DWORD PTR _data$[ebp+16], eax

; 688  : 							data.kill = 0;

	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -4097				; ffffefffH
	mov	DWORD PTR _data$[ebp+16], ecx

; 689  : 							data.dumb = 0;

	mov	edx, DWORD PTR _data$[ebp+16]
	and	edx, -8193				; ffffdfffH
	mov	DWORD PTR _data$[ebp+16], edx

; 690  : 							data.skill = generic_skill;

	mov	eax, DWORD PTR ?generic_skill@instant_action@@1HA ; instant_action::generic_skill
	and	eax, 15					; 0000000fH
	shl	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _data$[ebp+16]
	and	ecx, -245761				; fffc3fffH
	or	ecx, eax
	mov	DWORD PTR _data$[ebp+16], ecx

; 691  : 							data.guns = 1;

	mov	edx, DWORD PTR _data$[ebp+16]
	or	edx, 262144				; 00040000H
	mov	DWORD PTR _data$[ebp+16], edx

; 692  : 							data.radar = 1;

	mov	eax, DWORD PTR _data$[ebp+16]
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _data$[ebp+16], eax

; 693  : 							data.heat = 1;

	mov	ecx, DWORD PTR _data$[ebp+16]
	or	ecx, 1048576				; 00100000H
	mov	DWORD PTR _data$[ebp+16], ecx

; 694  : 							data.ground = 1;

	mov	edx, DWORD PTR _data$[ebp+16]
	or	edx, 2097152				; 00200000H
	mov	DWORD PTR _data$[ebp+16], edx

; 695  : 							data.num_vector = 0;

	mov	eax, DWORD PTR _data$[ebp+16]
	and	eax, -1069547521			; c03fffffH
	mov	DWORD PTR _data$[ebp+16], eax

; 696  : 							break;

	jmp	SHORT $LN5@create_wav
$LN4@create_wav:

; 697  : 						}
; 698  : 					}

	jmp	$LN6@create_wav
$LN5@create_wav:

; 699  : 
; 700  : 					if (!ia)

	cmp	DWORD PTR _ia$[ebp], 0
	jne	SHORT $LN2@create_wav

; 701  : 					{
; 702  : 						valid_data = 0;

	mov	DWORD PTR _valid_data$[ebp], 0

; 703  : 						MonoPrint ("Unknown Command %s\n", str);

	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BE@KEEAPDJC@Unknown?5Command?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN2@create_wav:

; 704  : 					}
; 705  : 				}
; 706  : 			}
; 707  : 		}
; 708  : 	}

	jmp	$LN84@create_wav
$LN83@create_wav:

; 709  : 
; 710  : 	if (valid_data)

	cmp	DWORD PTR _valid_data$[ebp], 0
	je	SHORT $LN1@create_wav

; 711  : 	{
; 712  : 		create_unit (data);

	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	call	?create_unit@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_unit
	add	esp, 4
$LN1@create_wav:

; 713  : 	}
; 714  : 
; 715  : 	fclose (fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 716  : 
; 717  : 	wave_created = 1;

	mov	DWORD PTR ?wave_created@instant_action@@1HA, 1 ; instant_action::wave_created
$LN88@create_wav:

; 718  : 
; 719  : 	return;
; 720  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?create_wave@instant_action@@SAXXZ ENDP			; instant_action::create_wave
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_lit$2 = -172						; size = 12
tv524 = -160						; size = 4
$T3 = -156						; size = 4
tv531 = -152						; size = 4
$T4 = -148						; size = 4
tv687 = -144						; size = 4
$T5 = -140						; size = 4
_last_waypoint$ = -136					; size = 4
$T6 = -132						; size = 4
_ly$ = -128						; size = 4
tv350 = -124						; size = 4
_lx$ = -120						; size = 4
tv389 = -116						; size = 4
_y$ = -112						; size = 2
_x$ = -108						; size = 2
_time$ = -104						; size = 4
_i$ = -100						; size = 4
_ny$ = -96						; size = 4
_o$ = -92						; size = 4
_waypoint$ = -88					; size = 4
_numWaypoints$ = -84					; size = 4
_nx$ = -80						; size = 4
_pos$ = -76						; size = 12
_wx$ = -64						; size = 16
_wy$ = -48						; size = 16
_d$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?move_player_flight@instant_action@@SAXXZ PROC		; instant_action::move_player_flight

; 1334 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?move_player_flight@instant_action@@SAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1335 : 	static const float FLIGHT_PLAN_SPEED = 350.0f * KNOTS_TO_FTPSEC;
; 1336 : 
; 1337 : 	float
; 1338 : 		nx,
; 1339 : 		ny,
; 1340 : 		lx,
; 1341 : 		ly;
; 1342 : 
; 1343 : 	short
; 1344 : 		x,
; 1345 : 		y;
; 1346 : 
; 1347 : 	WayPointClass
; 1348 : 		*waypoint,
; 1349 : 		*last_waypoint;
; 1350 : 
; 1351 : 	int
; 1352 : 		time;
; 1353 : 
; 1354 : 
; 1355 : 	if (!player_flight)

	cmp	DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A, 0 ; instant_action::player_flight
	jne	SHORT $LN24@move_playe

; 1356 : 	{
; 1357 : 		create_player_flight ();

	call	?create_player_flight@instant_action@@SAXXZ ; instant_action::create_player_flight
$LN24@move_playe:

; 1358 : 	}
; 1359 : 
; 1360 : 	//edg: this next bit o stuff looks for nearest airbases and sets
; 1361 : 	// the players waypoints to them
; 1362 : 	Objective			o;
; 1363 : 	int					numWaypoints, i;
; 1364 : 	float				wx[MAX_IA_WAYPOINTS], wy[MAX_IA_WAYPOINTS];
; 1365 : 	float				d[MAX_IA_WAYPOINTS];
; 1366 : 
; 1367 : 	numWaypoints     = 0;

	mov	DWORD PTR _numWaypoints$[ebp], 0

; 1368 : 	d[0] = 1000.0f * NM_TO_FT;

	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@4ab96e66
	movss	DWORD PTR _d$[ebp+eax], xmm0

; 1369 : 	d[1] = 1000.0f * NM_TO_FT;

	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@4ab96e66
	movss	DWORD PTR _d$[ebp+ecx], xmm0

; 1370 : 	d[2] = 1000.0f * NM_TO_FT;

	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@4ab96e66
	movss	DWORD PTR _d$[ebp+edx], xmm0

; 1371 : 	d[3] = 1000.0f * NM_TO_FT;

	mov	eax, 4
	imul	eax, 3
	movss	xmm0, DWORD PTR __real@4ab96e66
	movss	DWORD PTR _d$[ebp+eax], xmm0

; 1372 : 
; 1373 : 	// CLF
; 1374 : 	memset(wx,0,MAX_IA_WAYPOINTS*sizeof(float));

	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _wx$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1375 : 	memset(wy,0,MAX_IA_WAYPOINTS*sizeof(float));

	push	16					; 00000010H
	push	0
	lea	edx, DWORD PTR _wy$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1376 : 
; 1377 : 	{
; 1378 : 		VuListIterator lit(AllCampList);

	mov	eax, DWORD PTR ?AllCampList@@3PAVVuLinkedList@@A ; AllCampList
	push	eax
	lea	ecx, DWORD PTR _lit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1379 : 		o = (Objective)lit.GetFirst();

	lea	ecx, DWORD PTR _lit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _o$[ebp], eax
$LN23@move_playe:

; 1380 : 		while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	$LN22@move_playe

; 1381 : 			if (o->GetType() == TYPE_AIRBASE)

	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	jne	$LN8@move_playe

; 1382 : 			{
; 1383 : 				// manhatten dist
; 1384 : 				nx = (float)fabs( o->XPos() - start_x );

	mov	ecx, DWORD PTR _o$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv524[ebp]
	movss	xmm0, DWORD PTR tv524[ebp]
	subss	xmm0, DWORD PTR ?start_x@instant_action@@1MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _nx$[ebp]

; 1385 : 				ny = (float)fabs( o->YPos() - start_y );

	mov	ecx, DWORD PTR _o$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv531[ebp]
	movss	xmm0, DWORD PTR tv531[ebp]
	subss	xmm0, DWORD PTR ?start_y@instant_action@@1MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _ny$[ebp]

; 1386 : 				if ( nx > ny )

	movss	xmm0, DWORD PTR _nx$[ebp]
	comiss	xmm0, DWORD PTR _ny$[ebp]
	jbe	SHORT $LN20@move_playe

; 1387 : 					nx = nx + ny * 0.5f;

	movss	xmm0, DWORD PTR _ny$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR _nx$[ebp], xmm0

; 1388 : 				else

	jmp	SHORT $LN19@move_playe
$LN20@move_playe:

; 1389 : 					nx = ny + nx * 0.5f;

	movss	xmm0, DWORD PTR _nx$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR _nx$[ebp], xmm0
$LN19@move_playe:

; 1390 : 
; 1391 : 				// find closest
; 1392 : 				if ( nx < d[0] )

	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR _d$[ebp+edx]
	comiss	xmm0, DWORD PTR _nx$[ebp]
	jbe	$LN18@move_playe

; 1393 : 				{
; 1394 : 					d[3] = d[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _d$[ebp+eax]
	mov	DWORD PTR _d$[ebp+ecx], edx

; 1395 : 					wx[3] = wx[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _wx$[ebp+eax]
	mov	DWORD PTR _wx$[ebp+ecx], edx

; 1396 : 					wy[3] = wy[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _wy$[ebp+eax]
	mov	DWORD PTR _wy$[ebp+ecx], edx

; 1397 : 					d[2] = d[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _d$[ebp+eax]
	mov	DWORD PTR _d$[ebp+ecx], edx

; 1398 : 					wx[2] = wx[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _wx$[ebp+eax]
	mov	DWORD PTR _wx$[ebp+ecx], edx

; 1399 : 					wy[2] = wy[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _wy$[ebp+eax]
	mov	DWORD PTR _wy$[ebp+ecx], edx

; 1400 : 					d[1] = d[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _d$[ebp+eax]
	mov	DWORD PTR _d$[ebp+ecx], edx

; 1401 : 					wx[1] = wx[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _wx$[ebp+eax]
	mov	DWORD PTR _wx$[ebp+ecx], edx

; 1402 : 					wy[1] = wy[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _wy$[ebp+eax]
	mov	DWORD PTR _wy$[ebp+ecx], edx

; 1403 : 					d[0] = nx;

	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR _d$[ebp+eax], xmm0

; 1404 : 					wx[0] = o->XPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, 4
	imul	ecx, 0
	fstp	DWORD PTR _wx$[ebp+ecx]

; 1405 : 					wy[0] = o->YPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, 4
	imul	edx, 0
	fstp	DWORD PTR _wy$[ebp+edx]

; 1406 : 					if ( numWaypoints < MAX_IA_WAYPOINTS )

	cmp	DWORD PTR _numWaypoints$[ebp], 4
	jge	SHORT $LN17@move_playe

; 1407 : 						numWaypoints++;

	mov	eax, DWORD PTR _numWaypoints$[ebp]
	add	eax, 1
	mov	DWORD PTR _numWaypoints$[ebp], eax
$LN17@move_playe:

; 1408 : 
; 1409 : 				}

	jmp	$LN8@move_playe
$LN18@move_playe:

; 1410 : 				else if ( nx < d[1] )

	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _d$[ebp+ecx]
	comiss	xmm0, DWORD PTR _nx$[ebp]
	jbe	$LN15@move_playe

; 1411 : 				{
; 1412 : 					d[3] = d[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _d$[ebp+edx]
	mov	DWORD PTR _d$[ebp+eax], ecx

; 1413 : 					wx[3] = wx[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _wx$[ebp+edx]
	mov	DWORD PTR _wx$[ebp+eax], ecx

; 1414 : 					wy[3] = wy[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _wy$[ebp+edx]
	mov	DWORD PTR _wy$[ebp+eax], ecx

; 1415 : 					d[2] = d[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _d$[ebp+edx]
	mov	DWORD PTR _d$[ebp+eax], ecx

; 1416 : 					wx[2] = wx[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _wx$[ebp+edx]
	mov	DWORD PTR _wx$[ebp+eax], ecx

; 1417 : 					wy[2] = wy[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _wy$[ebp+edx]
	mov	DWORD PTR _wy$[ebp+eax], ecx

; 1418 : 					d[1] = nx;

	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR _d$[ebp+edx], xmm0

; 1419 : 					wx[1] = o->XPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, 4
	shl	eax, 0
	fstp	DWORD PTR _wx$[ebp+eax]

; 1420 : 					wy[1] = o->YPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _wy$[ebp+ecx]

; 1421 : 					if ( numWaypoints < MAX_IA_WAYPOINTS )

	cmp	DWORD PTR _numWaypoints$[ebp], 4
	jge	SHORT $LN14@move_playe

; 1422 : 						numWaypoints++;

	mov	edx, DWORD PTR _numWaypoints$[ebp]
	add	edx, 1
	mov	DWORD PTR _numWaypoints$[ebp], edx
$LN14@move_playe:

; 1423 : 
; 1424 : 				}

	jmp	$LN8@move_playe
$LN15@move_playe:

; 1425 : 				else if ( nx < d[2] )

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _d$[ebp+eax]
	comiss	xmm0, DWORD PTR _nx$[ebp]
	jbe	$LN12@move_playe

; 1426 : 				{
; 1427 : 					d[3] = d[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _d$[ebp+ecx]
	mov	DWORD PTR _d$[ebp+edx], eax

; 1428 : 					wx[3] = wx[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _wx$[ebp+ecx]
	mov	DWORD PTR _wx$[ebp+edx], eax

; 1429 : 					wy[3] = wy[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _wy$[ebp+ecx]
	mov	DWORD PTR _wy$[ebp+edx], eax

; 1430 : 					d[2] = nx;

	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR _d$[ebp+ecx], xmm0

; 1431 : 					wx[2] = o->XPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, 4
	shl	edx, 1
	fstp	DWORD PTR _wx$[ebp+edx]

; 1432 : 					wy[2] = o->YPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, 4
	shl	eax, 1
	fstp	DWORD PTR _wy$[ebp+eax]

; 1433 : 					if ( numWaypoints < MAX_IA_WAYPOINTS )

	cmp	DWORD PTR _numWaypoints$[ebp], 4
	jge	SHORT $LN11@move_playe

; 1434 : 						numWaypoints++;

	mov	ecx, DWORD PTR _numWaypoints$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numWaypoints$[ebp], ecx
$LN11@move_playe:

; 1435 : 
; 1436 : 				}

	jmp	SHORT $LN8@move_playe
$LN12@move_playe:

; 1437 : 				else if ( nx < d[3] )

	mov	edx, 4
	imul	edx, 3
	movss	xmm0, DWORD PTR _d$[ebp+edx]
	comiss	xmm0, DWORD PTR _nx$[ebp]
	jbe	SHORT $LN8@move_playe

; 1438 : 				{
; 1439 : 					d[3] = nx;

	mov	eax, 4
	imul	eax, 3
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR _d$[ebp+eax], xmm0

; 1440 : 					wx[3] = o->XPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, 4
	imul	ecx, 3
	fstp	DWORD PTR _wx$[ebp+ecx]

; 1441 : 					wy[3] = o->YPos();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, 4
	imul	edx, 3
	fstp	DWORD PTR _wy$[ebp+edx]

; 1442 : 					if ( numWaypoints < MAX_IA_WAYPOINTS )

	cmp	DWORD PTR _numWaypoints$[ebp], 4
	jge	SHORT $LN8@move_playe

; 1443 : 						numWaypoints++;

	mov	eax, DWORD PTR _numWaypoints$[ebp]
	add	eax, 1
	mov	DWORD PTR _numWaypoints$[ebp], eax
$LN8@move_playe:

; 1444 : 
; 1445 : 				}
; 1446 : 			}
; 1447 : 			o = (Objective) lit.GetNext();

	lea	ecx, DWORD PTR _lit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _o$[ebp], eax

; 1448 : 		}

	jmp	$LN23@move_playe
$LN22@move_playe:

; 1449 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 1450 : 
; 1451 : 	// sfr: xy order
; 1452 : 	::vector pos = { start_x, start_y };

	movss	xmm0, DWORD PTR ?start_x@instant_action@@1MA
	movss	DWORD PTR _pos$[ebp], xmm0
	movss	xmm0, DWORD PTR ?start_y@instant_action@@1MA
	movss	DWORD PTR _pos$[ebp+4], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _pos$[ebp+8], ecx

; 1453 : 	ConvertSimToGrid(&pos, &x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 1454 : 	//x = SimToGrid (start_y);
; 1455 : 	//y = SimToGrid (start_x);
; 1456 : 
; 1457 : 	player_flight->SetLocation (x, y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetLocation@CampBaseClass@@QAEXFF@Z	; CampBaseClass::SetLocation

; 1458 : 	player_flight->SetAltitude (10000);

	push	10000					; 00002710H
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetAltitude@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAltitude

; 1459 : 
; 1460 : 	// Create Waypoints
; 1461 : 
; 1462 : 	// first one is at player's start location.....
; 1463 : 	time = start_time * 1000;

	mov	ecx, DWORD PTR ?start_time@instant_action@@1JA ; instant_action::start_time
	imul	ecx, 1000				; 000003e8H
	mov	DWORD PTR _time$[ebp], ecx

; 1464 : 
; 1465 : 	nx = start_x;

	movss	xmm0, DWORD PTR ?start_x@instant_action@@1MA
	movss	DWORD PTR _nx$[ebp], xmm0

; 1466 : 	ny = start_y;

	movss	xmm0, DWORD PTR ?start_y@instant_action@@1MA
	movss	DWORD PTR _ny$[ebp], xmm0

; 1467 : 
; 1468 : 	waypoint = new WayPointClass;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN27@move_playe
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0WayPointClass@@QAE@XZ		; WayPointClass::WayPointClass
	mov	DWORD PTR tv350[ebp], eax
	jmp	SHORT $LN28@move_playe
$LN27@move_playe:
	mov	DWORD PTR tv350[ebp], 0
$LN28@move_playe:
	mov	edx, DWORD PTR tv350[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _waypoint$[ebp], eax

; 1469 : 	waypoint->SetLocation (nx, ny, -10000);

	push	ecx
	movss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetLocation@WayPointClass@@QAEXMMM@Z	; WayPointClass::SetLocation

; 1470 : 	waypoint->SetWPArrive (time);

	mov	ecx, DWORD PTR _time$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetWPArrive@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPArrive

; 1471 : 	waypoint->SetWPDepartTime (time);

	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetWPDepartTime@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPDepartTime

; 1472 : 	waypoint->SetWPAction (WP_CA);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetWPAction@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAction

; 1473 : 
; 1474 : 	player_flight->wp_list = waypoint;

	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	ecx, DWORD PTR _waypoint$[ebp]
	mov	DWORD PTR [eax+244], ecx

; 1475 : 
; 1476 : 	last_waypoint = waypoint;

	mov	edx, DWORD PTR _waypoint$[ebp]
	mov	DWORD PTR _last_waypoint$[ebp], edx

; 1477 : 	lx = nx;

	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR _lx$[ebp], xmm0

; 1478 : 	ly = ny;

	movss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR _ly$[ebp], xmm0

; 1479 : 
; 1480 : 	// now loop thru the number of located airbases we found....
; 1481 : 	for ( i = 0; i < numWaypoints; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@move_playe
$LN6@move_playe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@move_playe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numWaypoints$[ebp]
	jge	$LN5@move_playe

; 1482 : 	{
; 1483 : 		nx = wx[i];

	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _wx$[ebp+edx*4]
	movss	DWORD PTR _nx$[ebp], xmm0

; 1484 : 		ny = wy[i];

	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _wy$[ebp+eax*4]
	movss	DWORD PTR _ny$[ebp], xmm0

; 1485 : 
; 1486 : 		time += FloatToInt32((Distance(lx, ly, nx, ny)) / FLIGHT_PLAN_SPEED) * 1000;

	push	ecx
	movss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ly$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Distance@@YAMMMMM@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv687[ebp]
	movss	xmm0, DWORD PTR tv687[ebp]
	divss	xmm0, DWORD PTR ?FLIGHT_PLAN_SPEED@?1??move_player_flight@instant_action@@SAXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, 1000				; 000003e8H
	add	eax, DWORD PTR _time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 1487 : 
; 1488 : 		waypoint = new WayPointClass;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN29@move_playe
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0WayPointClass@@QAE@XZ		; WayPointClass::WayPointClass
	mov	DWORD PTR tv389[ebp], eax
	jmp	SHORT $LN30@move_playe
$LN29@move_playe:
	mov	DWORD PTR tv389[ebp], 0
$LN30@move_playe:
	mov	ecx, DWORD PTR tv389[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _waypoint$[ebp], edx

; 1489 : 		waypoint->SetLocation (nx, ny, -10000);

	push	ecx
	movss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetLocation@WayPointClass@@QAEXMMM@Z	; WayPointClass::SetLocation

; 1490 : 		waypoint->SetWPArrive (time);

	mov	eax, DWORD PTR _time$[ebp]
	push	eax
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetWPArrive@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPArrive

; 1491 : 		waypoint->SetWPDepartTime (time);

	mov	ecx, DWORD PTR _time$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetWPDepartTime@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPDepartTime

; 1492 : 		waypoint->SetWPAction (WP_CA);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetWPAction@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAction

; 1493 : 
; 1494 :       if (i == numWaypoints - 1)

	mov	edx, DWORD PTR _numWaypoints$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _i$[ebp], edx
	jne	SHORT $LN4@move_playe

; 1495 :       {
; 1496 :          waypoint->SetWPFlags (WPF_REPEAT_CONTINUOUS | WPF_REPEAT);

	push	4160					; 00001040H
	mov	ecx, DWORD PTR _waypoint$[ebp]
	call	?SetWPFlags@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlags
$LN4@move_playe:

; 1497 :       }
; 1498 : 	
; 1499 : 		last_waypoint->SetNextWP (waypoint);

	mov	eax, DWORD PTR _waypoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_waypoint$[ebp]
	call	?SetNextWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::SetNextWP

; 1500 : 	
; 1501 : 		last_waypoint = waypoint;

	mov	ecx, DWORD PTR _waypoint$[ebp]
	mov	DWORD PTR _last_waypoint$[ebp], ecx

; 1502 : 		lx = nx;

	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR _lx$[ebp], xmm0

; 1503 : 		ly = ny;

	movss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR _ly$[ebp], xmm0

; 1504 : 	}

	jmp	$LN6@move_playe
$LN5@move_playe:

; 1505 : 
; 1506 : 	if ( numWaypoints >= 2 )

	cmp	DWORD PTR _numWaypoints$[ebp], 2
	jl	SHORT $LN3@move_playe

; 1507 : 		player_flight->SetCurrentWaypoint (2);

	push	2
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetCurrentWaypoint@UnitClass@@QAEXG@Z	; UnitClass::SetCurrentWaypoint
	jmp	SHORT $LN1@move_playe
$LN3@move_playe:

; 1508 : 	else if ( numWaypoints > 0 )

	cmp	DWORD PTR _numWaypoints$[ebp], 0
	jle	SHORT $LN1@move_playe

; 1509 : 		player_flight->SetCurrentWaypoint (1);

	push	1
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetCurrentWaypoint@UnitClass@@QAEXG@Z	; UnitClass::SetCurrentWaypoint
$LN1@move_playe:

; 1510 : 
; 1511 : 	player_flight->SetLastDirection (0);

	push	0
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetLastDirection@FlightClass@@QAEXE@Z	; FlightClass::SetLastDirection

; 1512 : 
; 1513 : 	player_flight->SetUnitLastMove (start_time * 1000);

	mov	edx, DWORD PTR ?start_time@instant_action@@1JA ; instant_action::start_time
	imul	edx, 1000				; 000003e8H
	push	edx
	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	eax, DWORD PTR [edx+592]
	call	eax

; 1514 : 	player_flight->SetFinal (1);

	push	1
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetFinal@UnitClass@@QAEXH@Z		; UnitClass::SetFinal

; 1515 : 
; 1516 : 	FalconLocalSession->SetPlayerFlight (player_flight);

	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?SetPlayerFlight@FalconSessionEntity@@QAEXPAVFlightClass@@@Z ; FalconSessionEntity::SetPlayerFlight

; 1517 : 	FalconLocalSession->SetAircraftNum (0);

	push	0
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?SetAircraftNum@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetAircraftNum

; 1518 : 	FalconLocalSession->SetPilotSlot (PILOTS_PER_FLIGHT);

	push	4
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?SetPilotSlot@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetPilotSlot

; 1519 : 	FalconLocalSession->DoFullUpdate ();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?DoFullUpdate@FalconSessionEntity@@QAEXXZ ; FalconSessionEntity::DoFullUpdate

; 1520 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?move_player_flight@instant_action@@SAXXZ$0:
	lea	ecx, DWORD PTR _lit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?move_player_flight@instant_action@@SAXXZ$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?move_player_flight@instant_action@@SAXXZ$2:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?move_player_flight@instant_action@@SAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?move_player_flight@instant_action@@SAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?move_player_flight@instant_action@@SAXXZ ENDP		; instant_action::move_player_flight
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
$T2 = -380						; size = 8
_ia$ = -372						; size = 4
_valid_data$ = -368					; size = 4
_loop$ = -364						; size = 4
$T3 = -360						; size = 4
_type$ = -356						; size = 4
_specific$ = -352					; size = 4
_subtype$ = -348					; size = 4
_vc$ = -344						; size = 4
$T4 = -340						; size = 4
_num_vehicles$ = -336					; size = 4
tv74 = -332						; size = 4
_x$ = -328						; size = 2
_y$ = -324						; size = 2
tv478 = -320						; size = 4
_fp$ = -316						; size = 4
_tid$ = -312						; size = 4
_i$ = -308						; size = 4
_ptr$ = -304						; size = 4
_value$ = -300						; size = 4
_str$ = -296						; size = 4
_loadout$ = -292					; size = 4
_pos$ = -288						; size = 12
_buffer$ = -276						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?create_player_flight@instant_action@@SAXXZ PROC	; instant_action::create_player_flight

; 727  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?create_player_flight@instant_action@@SAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 368				; 00000170H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 728  : 	//Modified by TW, 2003-10-17
; 729  : 	//You can now configure your plane type and loadout using the files m.ia and f.ia
; 730  : 	int
; 731  : 		loop=0,

	mov	DWORD PTR _loop$[ebp], 0

; 732  : 		valid_data=0,

	mov	DWORD PTR _valid_data$[ebp], 0

; 733  : 		value=0,

	mov	DWORD PTR _value$[ebp], 0

; 734  : 		tid,
; 735  : 		i,
; 736  : 		type,
; 737  : 		subtype,
; 738  : 		specific,
; 739  : 		num_vehicles;
; 740  : 
; 741  : 	char
; 742  : 		*ptr=NULL,

	mov	DWORD PTR _ptr$[ebp], 0

; 743  : 		*str=NULL,

	mov	DWORD PTR _str$[ebp], 0

; 744  : 		buffer[MAX_PATH]={0};

	mov	BYTE PTR _buffer$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _buffer$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 745  : 
; 746  : 	FILE
; 747  : 		*fp=NULL;

	mov	DWORD PTR _fp$[ebp], 0

; 748  : 
; 749  : 	ia_type
; 750  : 		*ia=NULL;

	mov	DWORD PTR _ia$[ebp], 0

; 751  : 
; 752  : 	short
; 753  : 		x,
; 754  : 		y;
; 755  : 
; 756  : 
; 757  : 	VehicleClassDataType
; 758  : 		*vc;
; 759  : 
; 760  : 	LoadoutStruct
; 761  : 		*loadout;
; 762  : 
; 763  : 
; 764  : 	loadout = new LoadoutStruct;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN79@create_pla
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0LoadoutStruct@@QAE@XZ		; LoadoutStruct::LoadoutStruct
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN80@create_pla
$LN79@create_pla:
	mov	DWORD PTR tv74[ebp], 0
$LN80@create_pla:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _loadout$[ebp], edx

; 765  : 
; 766  : 	sprintf (buffer, "%s\\%c.ia", FalconCampUserSaveDirectory, current_mode);

	movsx	eax, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	push	eax
	push	OFFSET ?FalconCampUserSaveDirectory@@3PADA ; FalconCampUserSaveDirectory
	push	OFFSET ??_C@_08OFMENCFB@?$CFs?2?$CFc?4ia?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 767  : 	fp = fopen (buffer, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 768  : 	if (fp)

	cmp	DWORD PTR _fp$[ebp], 0
	je	$LN76@create_pla
$LN75@create_pla:

; 769  : 	{
; 770  : 		// MonoPrint ("Loading %s for Instant Action player plane File", buffer);
; 771  : 		// We have the file - read plane and loadout
; 772  : 		while (fgets (buffer, 100, fp))

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	100					; 00000064H
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN74@create_pla

; 773  : 		{
; 774  : 			str = buffer;

	lea	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _str$[ebp], edx
$LN73@create_pla:

; 775  : 			while (*str)

	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN72@create_pla

; 776  : 			{
; 777  : 				if ((*str != ' ') && (*str != '\t'))

	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN71@create_pla
	mov	ecx, DWORD PTR _str$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	je	SHORT $LN71@create_pla

; 778  : 				{
; 779  : 					break;

	jmp	SHORT $LN72@create_pla
$LN71@create_pla:

; 780  : 				}
; 781  : 				str ++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 782  : 			}

	jmp	SHORT $LN73@create_pla
$LN72@create_pla:

; 783  : 
; 784  : 			if ((*str >= '0') && (*str <= '9'))

	mov	ecx, DWORD PTR _str$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	$LN18@create_pla
	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	$LN18@create_pla

; 785  : 			{
; 786  : 				value = atoi (str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _value$[ebp], eax
$LN69@create_pla:

; 787  : 
; 788  : 				while (*str)

	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN68@create_pla

; 789  : 				{
; 790  : 					if (*str == ' ')

	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN67@create_pla

; 791  : 					{
; 792  : 						str ++;

	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$[ebp], ecx

; 793  : 						break;

	jmp	SHORT $LN68@create_pla
$LN67@create_pla:

; 794  : 					}
; 795  : 
; 796  : 					str ++;

	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx

; 797  : 				}

	jmp	SHORT $LN69@create_pla
$LN68@create_pla:

; 798  : 
; 799  : 				ptr = str;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
$LN66@create_pla:

; 800  : 
; 801  : 				while (*ptr)

	mov	ecx, DWORD PTR _ptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN65@create_pla

; 802  : 				{
; 803  : 					if ((*ptr == '\n') || (*ptr == '\r') || (*ptr == ' ') || (*ptr == '\t'))

	mov	eax, DWORD PTR _ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN63@create_pla
	mov	edx, DWORD PTR _ptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN63@create_pla
	mov	ecx, DWORD PTR _ptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN63@create_pla
	mov	eax, DWORD PTR _ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jne	SHORT $LN64@create_pla
$LN63@create_pla:

; 804  : 					{
; 805  : 						*ptr = '\0';

	mov	edx, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [edx], 0

; 806  : 						break;

	jmp	SHORT $LN65@create_pla
$LN64@create_pla:

; 807  : 					}
; 808  : 
; 809  : 					ptr ++;

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax

; 810  : 				}

	jmp	SHORT $LN66@create_pla
$LN65@create_pla:

; 811  : 
; 812  : 				//Setup plane
; 813  : 				if (stricmp (str, "type") == 0)

	push	OFFSET ??_C@_04GPMDFGEJ@type?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN62@create_pla

; 814  : 				{
; 815  : 					type = (unsigned char) value;

	movzx	edx, BYTE PTR _value$[ebp]
	mov	DWORD PTR _type$[ebp], edx
	jmp	$LN18@create_pla
$LN62@create_pla:

; 816  : 				}
; 817  : 				else if (stricmp (str, "subtype") == 0)

	push	OFFSET ??_C@_07BFHALJJD@subtype?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN60@create_pla

; 818  : 				{
; 819  : 					subtype = (unsigned char) value;

	movzx	ecx, BYTE PTR _value$[ebp]
	mov	DWORD PTR _subtype$[ebp], ecx
	jmp	$LN18@create_pla
$LN60@create_pla:

; 820  : 				}
; 821  : 				else if (stricmp (str, "specific") == 0)

	push	OFFSET ??_C@_08KINPOOEP@specific?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN58@create_pla

; 822  : 				{
; 823  : 					specific = (unsigned char) value;

	movzx	eax, BYTE PTR _value$[ebp]
	mov	DWORD PTR _specific$[ebp], eax
	jmp	$LN18@create_pla
$LN58@create_pla:

; 824  : 				}
; 825  : 
; 826  : 				//Setup loadout
; 827  : 				else if (stricmp (str, "w0") == 0)

	push	OFFSET ??_C@_02IOEGGOML@w0?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN56@create_pla

; 828  : 				{
; 829  : 					loadout->WeaponID[0] = (short) value;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	cx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax+edx], cx
	jmp	$LN18@create_pla
$LN56@create_pla:

; 830  : 				}
; 831  : 				else if (stricmp (str, "c0") == 0)

	push	OFFSET ??_C@_02JFGJGFGH@c0?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN54@create_pla

; 832  : 				{
; 833  : 					loadout->WeaponCount[0] = (unsigned char) value;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	dl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [ecx+eax+32], dl
	jmp	$LN18@create_pla
$LN54@create_pla:

; 834  : 				}
; 835  : 
; 836  : 				else if (stricmp (str, "w1") == 0)

	push	OFFSET ??_C@_02JHFNFPIK@w1?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN52@create_pla

; 837  : 				{
; 838  : 					loadout->WeaponID[1] = (short) value;

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	ax, WORD PTR _value$[ebp]
	mov	WORD PTR [edx+ecx], ax
	jmp	$LN18@create_pla
$LN52@create_pla:

; 839  : 				}
; 840  : 				else if (stricmp (str, "c1") == 0)

	push	OFFSET ??_C@_02IMHCFECG@c1?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN50@create_pla

; 841  : 				{
; 842  : 					loadout->WeaponCount[1] = (unsigned char) value;

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax+edx+32], cl
	jmp	$LN18@create_pla
$LN50@create_pla:

; 843  : 				}
; 844  : 
; 845  : 				else if (stricmp (str, "w2") == 0)

	push	OFFSET ??_C@_02LMHAAMEJ@w2?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN48@create_pla

; 846  : 				{
; 847  : 					loadout->WeaponID[2] = (short) value;

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	dx, WORD PTR _value$[ebp]
	mov	WORD PTR [ecx+eax], dx
	jmp	$LN18@create_pla
$LN48@create_pla:

; 848  : 				}
; 849  : 				else if (stricmp (str, "c2") == 0)

	push	OFFSET ??_C@_02KHFPAHOF@c2?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN46@create_pla

; 850  : 				{
; 851  : 					loadout->WeaponCount[2] = (unsigned char) value;

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [edx+ecx+32], al
	jmp	$LN18@create_pla
$LN46@create_pla:

; 852  : 				}
; 853  : 
; 854  : 				else if (stricmp (str, "w3") == 0)

	push	OFFSET ??_C@_02KFGLDNAI@w3?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN44@create_pla

; 855  : 				{
; 856  : 					loadout->WeaponID[3] = (short) value;

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	cx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax+edx], cx
	jmp	$LN18@create_pla
$LN44@create_pla:

; 857  : 				}
; 858  : 				else if (stricmp (str, "c3") == 0)

	push	OFFSET ??_C@_02LOEEDGKE@c3?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN42@create_pla

; 859  : 				{
; 860  : 					loadout->WeaponCount[3] = (unsigned char) value;

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	dl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [ecx+eax+32], dl
	jmp	$LN18@create_pla
$LN42@create_pla:

; 861  : 				}
; 862  : 
; 863  : 				else if (stricmp (str, "w4") == 0)

	push	OFFSET ??_C@_02OKCKKLMP@w4?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN40@create_pla

; 864  : 				{
; 865  : 					loadout->WeaponID[4] = (short) value;

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	ax, WORD PTR _value$[ebp]
	mov	WORD PTR [edx+ecx], ax
	jmp	$LN18@create_pla
$LN40@create_pla:

; 866  : 				}
; 867  : 				else if (stricmp (str, "c4") == 0)

	push	OFFSET ??_C@_02PBAFKAGD@c4?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN38@create_pla

; 868  : 				{
; 869  : 					loadout->WeaponCount[4] = (unsigned char) value;

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax+edx+32], cl
	jmp	$LN18@create_pla
$LN38@create_pla:

; 870  : 				}
; 871  : 
; 872  : 				else if (stricmp (str, "w5") == 0)

	push	OFFSET ??_C@_02PDDBJKIO@w5?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN36@create_pla

; 873  : 				{
; 874  : 					loadout->WeaponID[5] = (short) value;

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	dx, WORD PTR _value$[ebp]
	mov	WORD PTR [ecx+eax], dx
	jmp	$LN18@create_pla
$LN36@create_pla:

; 875  : 				}
; 876  : 				else if (stricmp (str, "c5") == 0)

	push	OFFSET ??_C@_02OIBOJBCC@c5?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN34@create_pla

; 877  : 				{
; 878  : 					loadout->WeaponCount[5] = (unsigned char) value;

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [edx+ecx+32], al
	jmp	$LN18@create_pla
$LN34@create_pla:

; 879  : 				}
; 880  : 
; 881  : 				else if (stricmp (str, "w6") == 0)

	push	OFFSET ??_C@_02NIBMMJEN@w6?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN32@create_pla

; 882  : 				{
; 883  : 					loadout->WeaponID[6] = (short) value;

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	cx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax+edx], cx
	jmp	$LN18@create_pla
$LN32@create_pla:

; 884  : 				}
; 885  : 				else if (stricmp (str, "c6") == 0)

	push	OFFSET ??_C@_02MDDDMCOB@c6?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN30@create_pla

; 886  : 				{
; 887  : 					loadout->WeaponCount[6] = (unsigned char) value;

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	dl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [ecx+eax+32], dl
	jmp	$LN18@create_pla
$LN30@create_pla:

; 888  : 				}
; 889  : 
; 890  : 				else if (stricmp (str, "w7") == 0)

	push	OFFSET ??_C@_02MBAHPIAM@w7?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN28@create_pla

; 891  : 				{
; 892  : 					loadout->WeaponID[7] = (short) value;

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	ax, WORD PTR _value$[ebp]
	mov	WORD PTR [edx+ecx], ax
	jmp	$LN18@create_pla
$LN28@create_pla:

; 893  : 				}
; 894  : 				else if (stricmp (str, "c7") == 0)

	push	OFFSET ??_C@_02NKCIPDKA@c7?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN26@create_pla

; 895  : 				{
; 896  : 					loadout->WeaponCount[7] = (unsigned char) value;

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax+edx+32], cl
	jmp	$LN18@create_pla
$LN26@create_pla:

; 897  : 				}
; 898  : 
; 899  : 				else if (stricmp (str, "w8") == 0)

	push	OFFSET ??_C@_02EGJPOEMD@w8?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN24@create_pla

; 900  : 				{
; 901  : 					loadout->WeaponID[8] = (short) value;

	mov	eax, 2
	shl	eax, 3
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	dx, WORD PTR _value$[ebp]
	mov	WORD PTR [ecx+eax], dx
	jmp	$LN18@create_pla
$LN24@create_pla:

; 902  : 				}
; 903  : 				else if (stricmp (str, "c8") == 0)

	push	OFFSET ??_C@_02FNLAOPGP@c8?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN22@create_pla

; 904  : 				{
; 905  : 					loadout->WeaponCount[8] = (unsigned char) value;

	mov	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [edx+ecx+32], al
	jmp	SHORT $LN18@create_pla
$LN22@create_pla:

; 906  : 				}
; 907  : 
; 908  : 				else if (stricmp (str, "w9") == 0)

	push	OFFSET ??_C@_02FPIENFIC@w9?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@create_pla

; 909  : 				{
; 910  : 					loadout->WeaponID[9] = (short) value;

	mov	edx, 2
	imul	edx, 9
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	cx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax+edx], cx
	jmp	SHORT $LN18@create_pla
$LN20@create_pla:

; 911  : 				}
; 912  : 				else if (stricmp (str, "c9") == 0)

	push	OFFSET ??_C@_02EEKLNOCO@c9?$AA@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@create_pla

; 913  : 				{
; 914  : 					loadout->WeaponCount[9] = (unsigned char) value;

	mov	eax, 1
	imul	eax, 9
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	dl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [ecx+eax+32], dl
$LN18@create_pla:

; 915  : 				}
; 916  : 			}
; 917  : 		}

	jmp	$LN75@create_pla
$LN74@create_pla:

; 918  : 		fclose (fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 919  : 		tid = GetClassID
; 920  : 		(
; 921  : 			DOMAIN_AIR,
; 922  : 			CLASS_UNIT,
; 923  : 			type,
; 924  : 			subtype,
; 925  : 			specific,
; 926  : 			0,
; 927  : 			0,
; 928  : 			0
; 929  : 		);

	push	0
	push	0
	push	0
	movzx	ecx, BYTE PTR _specific$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _subtype$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	push	6
	push	2
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	mov	DWORD PTR _tid$[ebp], eax

; 930  : 
; 931  : 	}
; 932  : 	else

	jmp	$LN15@create_pla
$LN76@create_pla:

; 933  : 	{
; 934  : 		// MonoPrint ("Cannot open %s for Instant Action player plane File", buffer);
; 935  : 		//We don't have the file - use default plane and loadout
; 936  : 
; 937  : 		tid = GetClassID
; 938  : 		(
; 939  : 			DOMAIN_AIR,
; 940  : 			CLASS_UNIT,
; 941  : 			TYPE_FLIGHT,
; 942  : 			STYPE_UNIT_FIGHTER_BOMBER,
; 943  : 			SPTYPE_F16C,
; 944  : 			0,
; 945  : 			0,
; 946  : 			0
; 947  : 		);

	push	0
	push	0
	push	0
	push	3
	push	9
	push	1
	push	6
	push	2
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	mov	DWORD PTR _tid$[ebp], eax

; 948  : 
; 949  : 
; 950  : 		if (current_mode == 'm')

	movsx	ecx, BYTE PTR ?current_mode@instant_action@@1DA ; instant_action::current_mode
	cmp	ecx, 109				; 0000006dH
	jne	$LN16@create_pla

; 951  : 		{
; 952  : 			// Moving Mud Loadout
; 953  : 
; 954  : 			loadout->WeaponID[0] = 60;	// Guns

	mov	edx, 2
	imul	edx, 0
	mov	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 955  : 			loadout->WeaponCount[0] = 51;

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [eax+edx+32], 51		; 00000033H

; 956  : 
; 957  : 			loadout->WeaponID[1] = 12; // AIM-9M

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 958  : 			loadout->WeaponCount[1] = 1;

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [edx+ecx+32], 1

; 959  : 
; 960  : 			loadout->WeaponID[2] = 71; // LAU-3/A /HE

	mov	eax, 2
	shl	eax, 1
	mov	ecx, 71					; 00000047H
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [edx+eax], cx

; 961  : 			loadout->WeaponCount[2] = 19;

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [ecx+eax+32], 19		; 00000013H

; 962  : 
; 963  : 			loadout->WeaponID[3] = 20; // AGM-65G

	mov	edx, 2
	imul	edx, 3
	mov	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 964  : 			loadout->WeaponCount[3] = 3;

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [eax+edx+32], 3

; 965  : 
; 966  : 			loadout->WeaponID[4] = 81; // CBU-52B/B

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, 81					; 00000051H
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 967  : 			loadout->WeaponCount[4] = 3;

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [edx+ecx+32], 3

; 968  : 
; 969  : 			loadout->WeaponID[5] = 70; // ALQ-131

	mov	eax, 2
	imul	eax, 5
	mov	ecx, 70					; 00000046H
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [edx+eax], cx

; 970  : 			loadout->WeaponCount[5] = 1;

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [ecx+eax+32], 1

; 971  : 
; 972  : 			loadout->WeaponID[6] = 64; // GBU-10C/B

	mov	edx, 2
	imul	edx, 6
	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 973  : 			loadout->WeaponCount[6] = 1;

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [eax+edx+32], 1

; 974  : 
; 975  : 			loadout->WeaponID[7] = 65; // BLU-107/B

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, 65					; 00000041H
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 976  : 			loadout->WeaponCount[7] = 1;

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [edx+ecx+32], 1

; 977  : 
; 978  : 			loadout->WeaponID[8] = 5; // Mk-82

	mov	eax, 2
	shl	eax, 3
	mov	ecx, 5
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [edx+eax], cx

; 979  : 			loadout->WeaponCount[8] = 3;

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [ecx+eax+32], 3

; 980  : 
; 981  : 			loadout->WeaponID[9] = 23; // AGM-88

	mov	edx, 2
	imul	edx, 9
	mov	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 982  : 			loadout->WeaponCount[9] = 1;

	mov	edx, 1
	imul	edx, 9
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [eax+edx+32], 1

; 983  : 		}
; 984  : 		else

	jmp	$LN15@create_pla
$LN16@create_pla:

; 985  : 		{
; 986  : 			// Fighter Sweep Loadout
; 987  : 
; 988  : 			loadout->WeaponID[0] = 60;	// Guns

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, 60					; 0000003cH
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 989  : 			loadout->WeaponCount[0] = 51;

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [edx+ecx+32], 51		; 00000033H

; 990  : 
; 991  : 			loadout->WeaponID[1] = 56;	//AIM120

	mov	eax, 2
	shl	eax, 0
	mov	ecx, 56					; 00000038H
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [edx+eax], cx

; 992  : 			loadout->WeaponID[9] = 56;

	mov	eax, 2
	imul	eax, 9
	mov	ecx, 56					; 00000038H
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [edx+eax], cx

; 993  : 			loadout->WeaponCount[1] = 1;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [ecx+eax+32], 1

; 994  : 			loadout->WeaponCount[9] = 1;

	mov	edx, 1
	imul	edx, 9
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [eax+edx+32], 1

; 995  : 
; 996  : 			loadout->WeaponID[2] = 12;	//AIM9-M

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 997  : 			loadout->WeaponID[8] = 12;

	mov	ecx, 2
	shl	ecx, 3
	mov	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 998  : 			loadout->WeaponCount[2] = 1;

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [edx+ecx+32], 1

; 999  : 			loadout->WeaponCount[8] = 1;

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [ecx+eax+32], 1

; 1000 : 
; 1001 : 			loadout->WeaponID[3] = 150;	//TW: AIM-9X

	mov	edx, 2
	imul	edx, 3
	mov	eax, 150				; 00000096H
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 1002 : 			loadout->WeaponCount[3] = 1;

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [eax+edx+32], 1

; 1003 : 			loadout->WeaponID[7] = 150;

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, 150				; 00000096H
	mov	eax, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 1004 : 			loadout->WeaponCount[7] = 1;

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [edx+ecx+32], 1

; 1005 : 
; 1006 : 			loadout->WeaponID[5] = 70;	//Jammer Pod

	mov	eax, 2
	imul	eax, 5
	mov	ecx, 70					; 00000046H
	mov	edx, DWORD PTR _loadout$[ebp]
	mov	WORD PTR [edx+eax], cx

; 1007 : 			loadout->WeaponCount[5] = 1;

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _loadout$[ebp]
	mov	BYTE PTR [ecx+eax+32], 1
$LN15@create_pla:

; 1008 : 
; 1009 : 		}
; 1010 : 
; 1011 : 	}
; 1012 : 
; 1013 : 	if (!tid){

	cmp	DWORD PTR _tid$[ebp], 0
	jne	SHORT $LN14@create_pla

; 1014 : 		MonoPrint ("Cannot create F16C Flight\n");

	push	OFFSET ??_C@_0BL@GGMJKOGP@Cannot?5create?5F16C?5Flight?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 1015 : 		return;

	jmp	$LN77@create_pla
$LN14@create_pla:

; 1016 : 	}
; 1017 : 	tid += VU_LAST_ENTITY_TYPE;

	mov	edx, DWORD PTR _tid$[ebp]
	add	edx, 100				; 00000064H
	mov	DWORD PTR _tid$[ebp], edx

; 1018 : 
; 1019 : 	player_flight = NewFlight(tid, 0, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z ; NewFlight
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A, eax ; instant_action::player_flight

; 1020 : 	if (!player_flight){

	cmp	DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A, 0 ; instant_action::player_flight
	jne	SHORT $LN13@create_pla

; 1021 : 		MonoPrint ("Cannot create FlightClass object\n");

	push	OFFSET ??_C@_0CC@LHJKAMAN@Cannot?5create?5FlightClass?5object@
	call	_MonoPrint
	add	esp, 4

; 1022 : 		return;

	jmp	$LN77@create_pla
$LN13@create_pla:

; 1023 : 	}
; 1024 : 
; 1025 : 	num_vehicles = 1;

	mov	DWORD PTR _num_vehicles$[ebp], 1

; 1026 : 
; 1027 : 	// sfr: xy order
; 1028 : 	::vector pos = { start_x, start_y };

	movss	xmm0, DWORD PTR ?start_x@instant_action@@1MA
	movss	DWORD PTR _pos$[ebp], xmm0
	movss	xmm0, DWORD PTR ?start_y@instant_action@@1MA
	movss	DWORD PTR _pos$[ebp+4], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _pos$[ebp+8], ecx

; 1029 : 	ConvertSimToGrid(&pos, &x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 1030 : 	//x = SimToGrid (start_y);
; 1031 : 	//y = SimToGrid (start_x);
; 1032 : 
; 1033 : 	player_flight->SetOwner (1);

	push	1
	mov	edx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	edx, DWORD PTR [eax+320]
	call	edx

; 1034 : 	player_flight->SetLocation (x, y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetLocation@CampBaseClass@@QAEXFF@Z	; CampBaseClass::SetLocation

; 1035 : 	player_flight->SetAltitude (10000);

	push	10000					; 00002710H
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetAltitude@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAltitude

; 1036 : 	player_flight->SetUnitMission (AMIS_SWEEP);

	push	7
	mov	edx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	edx, DWORD PTR [eax+604]
	call	edx

; 1037 : 
; 1038 : 	switch (num_vehicles){

	mov	eax, DWORD PTR _num_vehicles$[ebp]
	mov	DWORD PTR tv478[ebp], eax
	mov	ecx, DWORD PTR tv478[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv478[ebp], ecx
	cmp	DWORD PTR tv478[ebp], 3
	ja	SHORT $LN11@create_pla
	mov	edx, DWORD PTR tv478[ebp]
	jmp	DWORD PTR $LN83@create_pla[edx*4]
$LN10@create_pla:

; 1039 : 		case 1:
; 1040 : 		{
; 1041 : 			player_flight->SetNumVehicles (0, 1);

	push	1
	push	0
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1042 : 			break;

	jmp	SHORT $LN11@create_pla
$LN9@create_pla:

; 1043 : 		}
; 1044 : 
; 1045 : 		case 2:
; 1046 : 		{
; 1047 : 			player_flight->SetNumVehicles (0, 2);

	push	2
	push	0
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1048 : 			break;

	jmp	SHORT $LN11@create_pla
$LN8@create_pla:

; 1049 : 		}
; 1050 : 
; 1051 : 		case 3:
; 1052 : 		{
; 1053 : 			player_flight->SetNumVehicles (0, 2);

	push	2
	push	0
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1054 : 			player_flight->SetNumVehicles (1, 1);

	push	1
	push	1
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1055 : 			break;

	jmp	SHORT $LN11@create_pla
$LN7@create_pla:

; 1056 : 		}
; 1057 : 
; 1058 : 		case 4:
; 1059 : 		{
; 1060 : 			player_flight->SetNumVehicles (0, 2);

	push	2
	push	0
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1061 : 			player_flight->SetNumVehicles (1, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles
$LN11@create_pla:

; 1062 : 			break;
; 1063 : 		}
; 1064 : 	}
; 1065 : 
; 1066 : 	for (i = 0; i < PILOTS_PER_FLIGHT; i ++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@create_pla
$LN5@create_pla:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@create_pla:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN4@create_pla

; 1067 : 	{
; 1068 : 		if (i < num_vehicles)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _num_vehicles$[ebp]
	jge	SHORT $LN3@create_pla

; 1069 : 		{
; 1070 : 			player_flight->plane_stats[i] = AIRCRAFT_AVAILABLE;

	mov	edx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+416], 4

; 1071 : 			player_flight->pilots[i] = 0;

	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+412], 0

; 1072 : 			player_flight->player_slots[i] = PILOTS_PER_FLIGHT;

	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+420], 4

; 1073 : 			player_flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLEANDOOB);

	push	268435456				; 10000000H
	push	8
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 1074 : 		}
; 1075 : 		else

	jmp	SHORT $LN2@create_pla
$LN3@create_pla:

; 1076 : 		{
; 1077 : 			player_flight->plane_stats[i] = AIRCRAFT_NOT_ASSIGNED;

	mov	edx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+416], 0

; 1078 : 			player_flight->pilots[i] = NO_PILOT;

	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+412], 255			; 000000ffH

; 1079 : 			player_flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLEANDOOB);

	push	268435456				; 10000000H
	push	8
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN2@create_pla:

; 1080 : 		}
; 1081 : 	}

	jmp	$LN5@create_pla
$LN4@create_pla:

; 1082 : 
; 1083 : 	player_flight->last_player_slot = PILOTS_PER_FLIGHT;

	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	BYTE PTR [ecx+424], 4

; 1084 : 
; 1085 : 	// Name this flight
; 1086 : 	vc = GetVehicleClassData (player_flight->GetVehicleID (0));

	push	0
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	edx, ax
	push	edx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 1087 : 	player_flight->callsign_id = vc->CallsignIndex;

	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	ecx, DWORD PTR _vc$[ebp]
	mov	dl, BYTE PTR [ecx+64]
	mov	BYTE PTR [eax+425], dl

; 1088 : 	GetCallsignID (&player_flight->callsign_id, &player_flight->callsign_num, vc->CallsignSlots);

	mov	eax, DWORD PTR _vc$[ebp]
	movzx	ecx, BYTE PTR [eax+65]
	push	ecx
	mov	edx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	add	edx, 426				; 000001aaH
	push	edx
	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	add	eax, 425				; 000001a9H
	push	eax
	call	?GetCallsignID@@YAXPAE0H@Z		; GetCallsignID
	add	esp, 12					; 0000000cH

; 1089 : 	if (player_flight->callsign_num)

	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	movzx	edx, BYTE PTR [ecx+426]
	test	edx, edx
	je	SHORT $LN1@create_pla

; 1090 : 	{
; 1091 : 		SetCallsignID (player_flight->callsign_id, player_flight->callsign_num);

	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	mov	edx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	movzx	eax, BYTE PTR [edx+425]
	push	eax
	call	?SetCallsignID@@YAXHH@Z			; SetCallsignID
	add	esp, 8
$LN1@create_pla:

; 1092 : 	}
; 1093 : 
; 1094 : 	player_flight->SetLoadout(loadout,1);

	push	1
	mov	ecx, DWORD PTR _loadout$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	mov	edx, DWORD PTR [eax+636]
	call	edx

; 1095 : 	player_flight->SetFinal (1);

	push	1
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetFinal@UnitClass@@QAEXH@Z		; UnitClass::SetFinal

; 1096 : 
; 1097 : 	vuDatabase->/*Quick*/Insert (player_flight);

	mov	eax, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 1098 : 
; 1099 : 	FalconLocalSession->SetPlayerFlight (player_flight);

	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?SetPlayerFlight@FalconSessionEntity@@QAEXPAVFlightClass@@@Z ; FalconSessionEntity::SetPlayerFlight

; 1100 : 	FalconLocalSession->SetAircraftNum (0);

	push	0
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?SetAircraftNum@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetAircraftNum

; 1101 : 	FalconLocalSession->SetPilotSlot (PILOTS_PER_FLIGHT);

	push	4
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?SetPilotSlot@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetPilotSlot

; 1102 : 	FalconLocalSession->DoFullUpdate ();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?DoFullUpdate@FalconSessionEntity@@QAEXXZ ; FalconSessionEntity::DoFullUpdate

; 1103 : 
; 1104 : 	gSelectedFlightID = player_flight->Id ();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?gSelectedFlightID@@3VVU_ID@@A, ecx
	mov	DWORD PTR ?gSelectedFlightID@@3VVU_ID@@A+4, edx

; 1105 : 
; 1106 : 	TheCampaign.MissionEvaluator->PreMissionEval (player_flight,FalconLocalSession->GetPilotSlot());

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPilotSlot@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetPilotSlot
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	push	ecx
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?PreMissionEval@MissionEvaluationClass@@QAEHPAVFlightClass@@E@Z ; MissionEvaluationClass::PreMissionEval

; 1107 : 
; 1108 : 	wave_created = 0;

	mov	DWORD PTR ?wave_created@instant_action@@1HA, 0 ; instant_action::wave_created
$LN77@create_pla:

; 1109 : /*
; 1110 : 	int
; 1111 : 		tid;
; 1112 : 
; 1113 : 	short
; 1114 : 		x,
; 1115 : 		y;
; 1116 : 
; 1117 : 	int
; 1118 : 		i,
; 1119 : 		num_vehicles;
; 1120 : 
; 1121 : 	VehicleClassDataType
; 1122 : 		*vc;
; 1123 : 
; 1124 : 	LoadoutStruct
; 1125 : 		*loadout;
; 1126 : 
; 1127 : 	tid = GetClassID
; 1128 : 	(
; 1129 : 		DOMAIN_AIR,
; 1130 : 		CLASS_UNIT,
; 1131 : 		TYPE_FLIGHT,
; 1132 : 		STYPE_UNIT_FIGHTER_BOMBER,
; 1133 : 		SPTYPE_F16C,
; 1134 : 		0,
; 1135 : 		0,
; 1136 : 		0
; 1137 : 	);
; 1138 : 
; 1139 : 	if (!tid)
; 1140 : 	{
; 1141 : 		MonoPrint ("Cannot create F16C Flight\n");
; 1142 : 		return;
; 1143 : 	}
; 1144 : 
; 1145 : 	tid += VU_LAST_ENTITY_TYPE;
; 1146 : 
; 1147 : 	player_flight = NewFlight(tid, 0, 0);
; 1148 : 
; 1149 : 	if (!player_flight)
; 1150 : 	{
; 1151 : 		MonoPrint ("Cannot create FlightClass object\n");
; 1152 : 		return;
; 1153 : 	}
; 1154 : 
; 1155 : 	num_vehicles = 1;
; 1156 : 
; 1157 : 	x = SimToGrid (start_y);
; 1158 : 	y = SimToGrid (start_x);
; 1159 : 
; 1160 : 	player_flight->SetOwner (1);
; 1161 : 	player_flight->SetLocation (x, y);
; 1162 : 	player_flight->SetAltitude (10000);
; 1163 : 
; 1164 : 	player_flight->SetUnitMission (AMIS_SWEEP);
; 1165 : 
; 1166 : 	switch (num_vehicles)
; 1167 : 	{
; 1168 : 		case 1:
; 1169 : 		{
; 1170 : 			player_flight->SetNumVehicles (0, 1);
; 1171 : 			break;
; 1172 : 		}
; 1173 : 
; 1174 : 		case 2:
; 1175 : 		{
; 1176 : 			player_flight->SetNumVehicles (0, 2);
; 1177 : 			break;
; 1178 : 		}
; 1179 : 
; 1180 : 		case 3:
; 1181 : 		{
; 1182 : 			player_flight->SetNumVehicles (0, 2);
; 1183 : 			player_flight->SetNumVehicles (1, 1);
; 1184 : 			break;
; 1185 : 		}
; 1186 : 
; 1187 : 		case 4:
; 1188 : 		{
; 1189 : 			player_flight->SetNumVehicles (0, 2);
; 1190 : 			player_flight->SetNumVehicles (1, 2);
; 1191 : 			break;
; 1192 : 		}
; 1193 : 	}
; 1194 : 
; 1195 : 	for (i = 0; i < PILOTS_PER_FLIGHT; i ++)
; 1196 : 	{
; 1197 : 		if (i < num_vehicles)
; 1198 : 		{
; 1199 : 			player_flight->plane_stats[i] = AIRCRAFT_AVAILABLE;
; 1200 : 			player_flight->pilots[i] = 0;
; 1201 : 			player_flight->player_slots[i] = PILOTS_PER_FLIGHT;
; 1202 : 			player_flight->MakeFlightDirty (DIRTY_PLANE_STATS, DDP[144].priority);
; 1203 : 			//	player_flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLEANDOOB);
; 1204 : 		}
; 1205 : 		else
; 1206 : 		{
; 1207 : 			player_flight->plane_stats[i] = AIRCRAFT_NOT_ASSIGNED;
; 1208 : 			player_flight->pilots[i] = NO_PILOT;
; 1209 : 			player_flight->MakeFlightDirty (DIRTY_PLANE_STATS, DDP[145].priority);
; 1210 : 			//	player_flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLEANDOOB);
; 1211 : 		}
; 1212 : 	}
; 1213 : 
; 1214 : 	player_flight->last_player_slot = PILOTS_PER_FLIGHT;
; 1215 : 
; 1216 : 	// Name this flight
; 1217 : 	vc = GetVehicleClassData (player_flight->GetVehicleID (0));
; 1218 : 
; 1219 : 	player_flight->callsign_id = vc->CallsignIndex;
; 1220 : 
; 1221 : 	GetCallsignID (&player_flight->callsign_id, &player_flight->callsign_num, vc->CallsignSlots);
; 1222 : 
; 1223 : 	if (player_flight->callsign_num)
; 1224 : 	{
; 1225 : 		SetCallsignID (player_flight->callsign_id, player_flight->callsign_num);
; 1226 : 	}
; 1227 : 
; 1228 : 	// Load some weapons
; 1229 : 	loadout = new LoadoutStruct;
; 1230 : 
; 1231 : 	if (current_mode == 'm')
; 1232 : 	{
; 1233 : 		// Moving Mud Loadout
; 1234 : 
; 1235 : 		loadout->WeaponID[0] = 60;	// Guns
; 1236 : 		loadout->WeaponCount[0] = 51;
; 1237 : 
; 1238 : 		loadout->WeaponID[1] = 12;
; 1239 : 		loadout->WeaponCount[1] = 1;
; 1240 : 
; 1241 : 		loadout->WeaponID[2] = 20;
; 1242 : 		loadout->WeaponCount[2] = 1;
; 1243 : 
; 1244 : 		loadout->WeaponID[3] = 71;
; 1245 : 		loadout->WeaponCount[3] = 19;
; 1246 : 
; 1247 : 		loadout->WeaponID[4] = 81;
; 1248 : 		loadout->WeaponCount[4] = 3;
; 1249 : 
; 1250 : 		loadout->WeaponID[5] = 70;
; 1251 : 		loadout->WeaponCount[5] = 1;
; 1252 : 
; 1253 : 		loadout->WeaponID[6] = 5;
; 1254 : 		loadout->WeaponCount[6] = 3;
; 1255 : 
; 1256 : 		// loadout->WeaponID[7] = 74;
; 1257 : 		// edg test dynamics of durandal
; 1258 : 		loadout->WeaponID[7] = 65;
; 1259 : 		loadout->WeaponCount[7] = 1;
; 1260 : 
; 1261 : 		loadout->WeaponID[8] = 64;
; 1262 : 		loadout->WeaponCount[8] = 1;
; 1263 : 
; 1264 : 		loadout->WeaponID[9] = 23;
; 1265 : 		loadout->WeaponCount[9] = 1;
; 1266 : 	}
; 1267 : 	else
; 1268 : 	{
; 1269 : 		// Fighter Sweep Loadout
; 1270 : 
; 1271 : 		loadout->WeaponID[0] = 60;	// Guns
; 1272 : 		loadout->WeaponCount[0] = 51;
; 1273 : 
; 1274 : 		loadout->WeaponID[1] = 56;	//AIM120
; 1275 : 		loadout->WeaponID[9] = 56;
; 1276 : 		loadout->WeaponCount[1] = 1;
; 1277 : 		loadout->WeaponCount[9] = 1;
; 1278 : 
; 1279 : 		loadout->WeaponID[2] = 12;	//AIM9
; 1280 : 		loadout->WeaponID[8] = 12;
; 1281 : 		loadout->WeaponCount[2] = 1;
; 1282 : 		loadout->WeaponCount[8] = 1;
; 1283 : 
; 1284 : 		loadout->WeaponID[3] = 150;	//AIM-9X
; 1285 : 		loadout->WeaponCount[3] = 1;
; 1286 : 		loadout->WeaponID[7] = 150;
; 1287 : 		loadout->WeaponCount[7] = 1;
; 1288 : //MI we don't want AG loadout in Fighter Sweep
; 1289 : #if 0
; 1290 : 		loadout->WeaponID[4] = 5;	//MK82
; 1291 : 		loadout->WeaponCount[4] = 3;
; 1292 : #else
; 1293 : 		loadout->WeaponID[4] = 0;
; 1294 : 		loadout->WeaponCount[4] = 0;
; 1295 : #endif
; 1296 : 		loadout->WeaponID[5] = 70;	//Jammer Pod
; 1297 : 		loadout->WeaponCount[5] = 1;
; 1298 : //MI we don't want AG loadout in Fighter Sweep
; 1299 : #if 0
; 1300 : 		loadout->WeaponID[6] = 19;	//Maverick
; 1301 : 		loadout->WeaponCount[6] = 3;
; 1302 : #else
; 1303 : 		loadout->WeaponID[6] = 0;
; 1304 : 		loadout->WeaponCount[6] = 0;
; 1305 : #endif
; 1306 : 	}
; 1307 : 
; 1308 : 	player_flight->SetLoadout(loadout,1);
; 1309 : 	player_flight->SetFinal (1);
; 1310 : 
; 1311 : 	vuDatabase->QuickInsert (player_flight);
; 1312 : 
; 1313 : 	FalconLocalSession->SetPlayerFlight (player_flight);
; 1314 : 	FalconLocalSession->SetAircraftNum (0);
; 1315 : 	FalconLocalSession->SetPilotSlot (PILOTS_PER_FLIGHT);
; 1316 : 	FalconLocalSession->DoFullUpdate ();
; 1317 : 
; 1318 : 	gSelectedFlightID = player_flight->Id ();
; 1319 : 
; 1320 : 	TheCampaign.MissionEvaluator->PreMissionEval (player_flight,FalconLocalSession->GetPilotSlot());
; 1321 : 
; 1322 : 	wave_created = 0;
; 1323 : */
; 1324 : 
; 1325 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN83@create_pla:
	DD	$LN10@create_pla
	DD	$LN9@create_pla
	DD	$LN8@create_pla
	DD	$LN7@create_pla
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?create_player_flight@instant_action@@SAXXZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?create_player_flight@instant_action@@SAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-372]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?create_player_flight@instant_action@@SAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?create_player_flight@instant_action@@SAXXZ ENDP	; instant_action::create_player_flight
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
$T1 = -80						; size = 8
_time$ = -72						; size = 4
_uc$ = -68						; size = 4
tv394 = -64						; size = 4
tv385 = -60						; size = 4
_classPtr$ = -56					; size = 4
_vc$ = -52						; size = 4
_rad$ = -48						; size = 4
_objective$ = -44					; size = 4
_flight$ = -40						; size = 4
_ia$ = -36						; size = 4
_i$ = -32						; size = 4
_tid$ = -28						; size = 4
_loop$ = -24						; size = 4
_new_battalion$ = -20					; size = 4
_px$ = -16						; size = 2
_py$ = -12						; size = 2
_x$ = -8						; size = 2
_y$ = -4						; size = 2
_data$ = 8						; size = 4
?create_battalion@instant_action@@KAXAAUia_data@@@Z PROC ; instant_action::create_battalion

; 1867 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi

; 1868 : 	int
; 1869 : 		i,
; 1870 : 		time,
; 1871 : 		loop;
; 1872 : 
; 1873 : 	int
; 1874 : 		tid;
; 1875 : 
; 1876 : 	float
; 1877 : 		rad;
; 1878 : 
; 1879 : 	GridIndex
; 1880 : 		px,
; 1881 : 		py,
; 1882 : 		x,
; 1883 : 		y;
; 1884 : 
; 1885 : 	ia_type
; 1886 : 		*ia;
; 1887 : 
; 1888 : 	FlightClass
; 1889 : 		*flight;
; 1890 : 
; 1891 : 	BattalionClass
; 1892 : 		*new_battalion;
; 1893 : 
; 1894 : 	Objective	
; 1895 : 		objective;
; 1896 : 
; 1897 : 	UnitClassDataType		*uc;
; 1898 : 	VehicleClassDataType	*vc;
; 1899 : 	Falcon4EntityClassType	*classPtr;
; 1900 : 
; 1901 : 	ia = 0;

	mov	DWORD PTR _ia$[ebp], 0

; 1902 : 
; 1903 : 	for (loop = 0; ia_grnd_objects[loop].type; loop ++){

	mov	DWORD PTR _loop$[ebp], 0
	jmp	SHORT $LN19@create_bat
$LN18@create_bat:
	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	DWORD PTR _loop$[ebp], eax
$LN19@create_bat:
	mov	ecx, DWORD PTR _loop$[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR _ia_grnd_objects[ecx+4], 0
	je	SHORT $LN17@create_bat

; 1904 : 		if (data.type == ia_grnd_objects[loop].type){

	mov	edx, DWORD PTR _loop$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _ia_grnd_objects[edx+4]
	jne	SHORT $LN16@create_bat

; 1905 : 			ia = &ia_grnd_objects[loop];

	mov	edx, DWORD PTR _loop$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _ia_grnd_objects
	mov	DWORD PTR _ia$[ebp], edx

; 1906 : 			break;

	jmp	SHORT $LN17@create_bat
$LN16@create_bat:

; 1907 : 		}
; 1908 : 	}

	jmp	SHORT $LN18@create_bat
$LN17@create_bat:

; 1909 : 
; 1910 : 	if (!ia){

	cmp	DWORD PTR _ia$[ebp], 0
	jne	SHORT $LN15@create_bat

; 1911 : 		MonoPrint ("Cannot find Battalion Type in Instant Action Object Table (ia_grnd_objects)");

	push	OFFSET ??_C@_0EM@FJJOHNJF@Cannot?5find?5Battalion?5Type?5in?5In@
	call	_MonoPrint
	add	esp, 4

; 1912 : 		return;

	jmp	$LN20@create_bat
$LN15@create_bat:

; 1913 : 	}
; 1914 : 
; 1915 : 	flight = FalconLocalSession->GetPlayerFlight ();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
	mov	DWORD PTR _flight$[ebp], eax

; 1916 : 
; 1917 : 	if (!flight){

	cmp	DWORD PTR _flight$[ebp], 0
	jne	SHORT $LN14@create_bat

; 1918 : 		return;

	jmp	$LN20@create_bat
$LN14@create_bat:

; 1919 : 	}
; 1920 : 
; 1921 : 	flight->GetLocation (&px, &py);

	lea	eax, DWORD PTR _py$[ebp]
	push	eax
	lea	ecx, DWORD PTR _px$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1922 : 	rad = (flight->GetLastDirection() * 45 + data.aspect) * DTR;	// WARNING - Dodgy code from Kevin...

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLastDirection@FlightClass@@QAEEXZ	; FlightClass::GetLastDirection
	movzx	edx, al
	imul	edx, 45					; 0000002dH
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _data$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _rad$[ebp], xmm0

; 1923 : 	
; 1924 : 	x = (short)(px + FloatToInt32((float)sin (rad) * data.distance));

	movsx	esi, WORD PTR _px$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv385[ebp]
	movss	xmm0, DWORD PTR tv385[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mulss	xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	esi, eax
	mov	WORD PTR _x$[ebp], si

; 1925 : 	y = (short)(py + FloatToInt32((float)cos (rad) * data.distance));

	movsx	esi, WORD PTR _py$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv394[ebp]
	movss	xmm0, DWORD PTR tv394[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	esi, eax
	mov	WORD PTR _y$[ebp], si

; 1926 : 	
; 1927 : 	// edg: for now completely abort if we're going on a water tile.
; 1928 : 	// TODO: search a bit more for an appropriate tile
; 1929 : 	if ( GetCover( x, y ) == Water ){

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@create_bat

; 1930 : 		//MonoPrint ("Cannot start BATTALION on Water x = %d, y = %d\n", x, y );
; 1931 : 		return;

	jmp	$LN20@create_bat
$LN13@create_bat:

; 1932 : 	}
; 1933 : 
; 1934 : 	tid = GetClassID(
; 1935 : 		DOMAIN_LAND,
; 1936 : 		CLASS_UNIT,
; 1937 : 		TYPE_BATTALION,
; 1938 : 		ia->stype,
; 1939 : 		ia->sptype,
; 1940 : 		0,
; 1941 : 		0,
; 1942 : 		0
; 1943 : 	);

	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _ia$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _ia$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	1
	push	6
	push	3
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	mov	DWORD PTR _tid$[ebp], eax

; 1944 : 
; 1945 : 	if (!tid){

	cmp	DWORD PTR _tid$[ebp], 0
	jne	SHORT $LN12@create_bat

; 1946 : 		//MonoPrint ("Cannot have BATTALION of Type\n");
; 1947 : 		return;

	jmp	$LN20@create_bat
$LN12@create_bat:

; 1948 : 	}
; 1949 : 
; 1950 : 	uc = (UnitClassDataType*) Falcon4ClassTable[tid].dataPtr;

	mov	eax, DWORD PTR _tid$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _uc$[ebp], edx

; 1951 : 	tid += VU_LAST_ENTITY_TYPE;

	mov	eax, DWORD PTR _tid$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _tid$[ebp], eax

; 1952 : 
; 1953 : 	new_battalion = NewBattalion(tid, NULL);

	push	0
	mov	ecx, DWORD PTR _tid$[ebp]
	push	ecx
	call	?NewBattalion@@YAPAVBattalionClass@@HPAVUnitClass@@@Z ; NewBattalion
	add	esp, 8
	mov	DWORD PTR _new_battalion$[ebp], eax

; 1954 : 
; 1955 : 	// filter weapons
; 1956 : 	new_battalion->SetUnitSupply(100);

	push	100					; 00000064H
	mov	edx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [eax+748]
	call	edx

; 1957 : 	vc = GetVehicleClassData(uc->VehicleType[0]);

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _uc$[ebp]
	movsx	edx, WORD PTR [ecx+eax+68]
	push	edx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 1958 : 	for (i=0; i<HARDPOINT_MAX; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@create_bat
$LN10@create_bat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@create_bat:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN9@create_bat

; 1959 : 		if (vc->Weapon[i]){

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vc$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+98]
	test	eax, eax
	je	SHORT $LN6@create_bat

; 1960 : 			classPtr = &(Falcon4ClassTable[GetWeaponDescriptionIndex(vc->Weapon[i])]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vc$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+98]
	push	eax
	call	?GetWeaponDescriptionIndex@@YAHH@Z	; GetWeaponDescriptionIndex
	add	esp, 4
	imul	eax, 81					; 00000051H
	add	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$[ebp], eax

; 1961 : 			if (!InstantActionSettings.SamSites && classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_MISSILE)

	cmp	DWORD PTR ?InstantActionSettings@@3UUI_IA@@A+8, 0
	jne	SHORT $LN7@create_bat
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _classPtr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	cmp	eax, 6
	jne	SHORT $LN7@create_bat

; 1962 : 				new_battalion->SetUnitSupply(0);

	push	0
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx+748]
	call	eax
$LN7@create_bat:

; 1963 : 			if (!InstantActionSettings.AAASites && classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_GUN)

	cmp	DWORD PTR ?InstantActionSettings@@3UUI_IA@@A+12, 0
	jne	SHORT $LN6@create_bat
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _classPtr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	cmp	eax, 3
	jne	SHORT $LN6@create_bat

; 1964 : 				new_battalion->SetUnitSupply(0);

	push	0
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx+748]
	call	eax
$LN6@create_bat:

; 1965 : 		}
; 1966 : 	}

	jmp	$LN10@create_bat
$LN9@create_bat:

; 1967 : 
; 1968 : 	new_battalion->SetOwner (data.side);

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 20					; 00000014H
	sar	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx+320]
	call	eax

; 1969 : 	new_battalion->SetLocation(x, y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	call	?SetLocation@CampBaseClass@@QAEXFF@Z	; CampBaseClass::SetLocation

; 1970 : 	//new_battalion->SetInPackage(1);
; 1971 : 
; 1972 : 	time = TheCampaign.CurrentTime;

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR _time$[ebp], eax

; 1973 : 
; 1974 : 	// find an objective nearby
; 1975 : 	objective = FindNearestObjective(x, y, NULL, 100);

	push	100					; 00000064H
	push	0
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _objective$[ebp], eax

; 1976 : 	ShiAssert(objective);
; 1977 : 	if (objective){

	cmp	DWORD PTR _objective$[ebp], 0
	je	$LN2@create_bat

; 1978 : 		// Fake battalions into thinking they've gotten to their destination
; 1979 : 		objective->GetLocation(&px, &py);

	lea	eax, DWORD PTR _py$[ebp]
	push	eax
	lea	ecx, DWORD PTR _px$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _objective$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1980 : 		//DSP: I'm going to try making everyone think they are airdefense, since that is
; 1981 : 		//the only thing that matters in instant action
; 1982 : 
; 1983 : 		new_battalion->SetUnitOrders(GORD_AIRDEFENSE,objective->Id());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _objective$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	push	9
	mov	eax, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax

; 1984 : 		if (new_battalion->GetUnitNormalRole() == GRO_AIRDEFENSE)

	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	cmp	eax, 5
	jne	SHORT $LN4@create_bat

; 1985 : 			new_battalion->SetUnitDestination (x, y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	call	?SetUnitDestination@UnitClass@@QAEXFF@Z	; UnitClass::SetUnitDestination
	jmp	SHORT $LN2@create_bat
$LN4@create_bat:

; 1986 : 		else if (rand()%3)

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	test	edx, edx
	je	SHORT $LN2@create_bat

; 1987 : 			new_battalion->SetUnitDestination (x, y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	call	?SetUnitDestination@UnitClass@@QAEXFF@Z	; UnitClass::SetUnitDestination
$LN2@create_bat:

; 1988 : 		/*
; 1989 : 		if (new_battalion->GetUnitNormalRole() == GRO_AIRDEFENSE)
; 1990 : 		{
; 1991 : 			new_battalion->SetUnitOrders(GORD_AIRDEFENSE,objective->Id());
; 1992 : 			new_battalion->SetUnitDestination (x, y);
; 1993 : 		}
; 1994 : 		else if (objective->GetTeam() == new_battalion->GetTeam())
; 1995 : 			new_battalion->SetUnitOrders(GORD_DEFEND,objective->Id());
; 1996 : 		else if (objective->GetTeam() != new_battalion->GetTeam())
; 1997 : 			new_battalion->SetUnitOrders(GORD_CAPTURE,objective->Id());
; 1998 : 		if (rand()%3)
; 1999 : 			new_battalion->SetUnitDestination (x, y);*/
; 2000 : 	}
; 2001 : 
; 2002 : 	new_battalion->BuildElements();

	mov	ecx, DWORD PTR _new_battalion$[ebp]
	call	?BuildElements@UnitClass@@QAEXXZ	; UnitClass::BuildElements

; 2003 : 
; 2004 : 	new_battalion->SetUnitLastMove (start_time * 1000);

	mov	ecx, DWORD PTR ?start_time@instant_action@@1JA ; instant_action::start_time
	imul	ecx, 1000				; 000003e8H
	push	ecx
	mov	edx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [eax+592]
	call	edx

; 2005 : 
; 2006 : 	new_battalion->SetFinal (1);

	push	1
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	call	?SetFinal@UnitClass@@QAEXH@Z		; UnitClass::SetFinal

; 2007 : 
; 2008 : 	vuDatabase->/*Quick*/Insert (new_battalion);

	mov	eax, DWORD PTR _new_battalion$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 2009 : 
; 2010 : 	if (new_battalion->GetRadarType() != RDR_NO_RADAR)

	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	je	SHORT $LN1@create_bat

; 2011 : 	{
; 2012 : 		new_battalion->SetSearchMode((unsigned char)(FEC_RADAR_SEARCH_1));//me123 + rand()%3));

	push	2
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	mov	eax, DWORD PTR [edx+140]
	call	eax

; 2013 : 		new_battalion->SetEmitting(1);

	push	1
	mov	ecx, DWORD PTR _new_battalion$[ebp]
	call	?SetEmitting@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetEmitting
$LN1@create_bat:
$LN20@create_bat:

; 2014 : 	}
; 2015 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?create_battalion@instant_action@@KAXAAUia_data@@@Z ENDP ; instant_action::create_battalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
$T2 = -192						; size = 8
$T3 = -184						; size = 8
$T4 = -176						; size = 8
$T5 = -168						; size = 8
tv922 = -160						; size = 4
$T6 = -156						; size = 4
$T7 = -152						; size = 4
tv911 = -148						; size = 4
$T8 = -144						; size = 4
tv803 = -140						; size = 4
$T9 = -136						; size = 4
tv812 = -132						; size = 4
tv494 = -128						; size = 4
$T10 = -124						; size = 4
$T11 = -120						; size = 4
$T12 = -116						; size = 4
tv474 = -112						; size = 4
tv383 = -108						; size = 4
$T13 = -104						; size = 4
tv454 = -100						; size = 4
_vc$ = -96						; size = 4
_lx$ = -92						; size = 2
_ly$ = -88						; size = 2
_tid$ = -84						; size = 4
tv263 = -80						; size = 4
_ia$ = -76						; size = 4
_rad$ = -72						; size = 4
_time$ = -68						; size = 4
_last_waypoint$ = -64					; size = 4
_flight$ = -60						; size = 4
_px$ = -56						; size = 2
_py$ = -52						; size = 2
_i$ = -48						; size = 4
_waypoint$ = -44					; size = 4
_new_package$ = -40					; size = 4
_x$ = -36						; size = 2
_y$ = -32						; size = 2
_loop$ = -28						; size = 4
_ny$ = -24						; size = 2
_nx$ = -20						; size = 2
_new_flight$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
?create_flight@instant_action@@KAXAAUia_data@@@Z PROC	; instant_action::create_flight

; 1543 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?create_flight@instant_action@@KAXAAUia_data@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 180				; 000000b4H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1544 : 	int
; 1545 : 		time,
; 1546 : 		i,
; 1547 : 		loop;
; 1548 : 
; 1549 : 	int
; 1550 : 		tid;
; 1551 : 
; 1552 : 	float
; 1553 : 		rad;
; 1554 : 
; 1555 : 	GridIndex
; 1556 : 		px,
; 1557 : 		py,
; 1558 : 		lx,
; 1559 : 		ly,
; 1560 : 		nx,
; 1561 : 		ny,
; 1562 : 		x,
; 1563 : 		y;
; 1564 : 
; 1565 : 	ia_type
; 1566 : 		*ia;
; 1567 : 
; 1568 : 	FlightClass
; 1569 : 		*flight,
; 1570 : 		*new_flight;
; 1571 : 
; 1572 : 	PackageClass
; 1573 : 		*new_package;
; 1574 : 
; 1575 : 	WayPointClass
; 1576 : 		*waypoint,
; 1577 : 		*last_waypoint;
; 1578 : 
; 1579 : 	VehicleClassDataType
; 1580 : 		*vc;
; 1581 : 
; 1582 : 	ia = 0;

	mov	DWORD PTR _ia$[ebp], 0

; 1583 : 
; 1584 : 	for (loop = 0; ia_air_objects[loop].type; loop ++)

	mov	DWORD PTR _loop$[ebp], 0
	jmp	SHORT $LN44@create_fli
$LN43@create_fli:
	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	DWORD PTR _loop$[ebp], eax
$LN44@create_fli:
	mov	ecx, DWORD PTR _loop$[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR _ia_air_objects[ecx+4], 0
	je	SHORT $LN42@create_fli

; 1585 : 	{
; 1586 : 		if (data.type == ia_air_objects[loop].type)

	mov	edx, DWORD PTR _loop$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _ia_air_objects[edx+4]
	jne	SHORT $LN41@create_fli

; 1587 : 		{
; 1588 : 			ia = &ia_air_objects[loop];

	mov	edx, DWORD PTR _loop$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _ia_air_objects
	mov	DWORD PTR _ia$[ebp], edx

; 1589 : 			break;

	jmp	SHORT $LN42@create_fli
$LN41@create_fli:

; 1590 : 		}
; 1591 : 	}

	jmp	SHORT $LN43@create_fli
$LN42@create_fli:

; 1592 : 
; 1593 : 	if (!ia)

	cmp	DWORD PTR _ia$[ebp], 0
	jne	SHORT $LN40@create_fli

; 1594 : 	{
; 1595 : 		MonoPrint ("Cannot find Aircraft Type in Instant Action Object Table (ia_air_objects)");

	push	OFFSET ??_C@_0EK@KKBJOKA@Cannot?5find?5Aircraft?5Type?5in?5Ins@
	call	_MonoPrint
	add	esp, 4

; 1596 : 		return;

	jmp	$LN45@create_fli
$LN40@create_fli:

; 1597 : 	}
; 1598 : 
; 1599 : 	flight = FalconLocalSession->GetPlayerFlight ();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
	mov	DWORD PTR _flight$[ebp], eax

; 1600 : 
; 1601 : 	if (!flight)

	cmp	DWORD PTR _flight$[ebp], 0
	jne	SHORT $LN39@create_fli

; 1602 : 	{
; 1603 : 		return;

	jmp	$LN45@create_fli
$LN39@create_fli:

; 1604 : 	}
; 1605 : 
; 1606 : 	flight->GetLocation (&px, &py);

	lea	eax, DWORD PTR _py$[ebp]
	push	eax
	lea	ecx, DWORD PTR _px$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 1607 :  	rad = (flight->GetLastDirection() * 45 + data.aspect) * DTR;	// WARNING - Dodgy code from Kevin...

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLastDirection@FlightClass@@QAEEXZ	; FlightClass::GetLastDirection
	movzx	edx, al
	imul	edx, 45					; 0000002dH
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _data$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _rad$[ebp], xmm0

; 1608 : 
; 1609 : 	MonoPrint ("Create Flight %d,%d %d ", px, py, flight->GetLastDirection() * 45);

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLastDirection@FlightClass@@QAEEXZ	; FlightClass::GetLastDirection
	movzx	ecx, al
	imul	ecx, 45					; 0000002dH
	push	ecx
	movsx	edx, WORD PTR _py$[ebp]
	push	edx
	movsx	eax, WORD PTR _px$[ebp]
	push	eax
	push	OFFSET ??_C@_0BI@HNCLFAFG@Create?5Flight?5?$CFd?0?$CFd?5?$CFd?5?$AA@
	call	_MonoPrint
	add	esp, 16					; 00000010H

; 1610 : 	
; 1611 : 	x = (short)(px + FloatToInt32((float)sin (rad) * data.distance));

	movsx	esi, WORD PTR _px$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv803[ebp]
	movss	xmm0, DWORD PTR tv803[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mulss	xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	esi, eax
	mov	WORD PTR _x$[ebp], si

; 1612 : 	y = (short)(py + FloatToInt32((float)cos (rad) * data.distance));

	movsx	esi, WORD PTR _py$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv812[ebp]
	movss	xmm0, DWORD PTR tv812[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	esi, eax
	mov	WORD PTR _y$[ebp], si

; 1613 : 
; 1614 : 	tid = GetClassID
; 1615 : 	(
; 1616 : 		DOMAIN_AIR,
; 1617 : 		CLASS_UNIT,
; 1618 : 		TYPE_FLIGHT,
; 1619 : 		ia->stype,
; 1620 : 		ia->sptype,
; 1621 : 		0,
; 1622 : 		0,
; 1623 : 		0
; 1624 : 	);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _ia$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _ia$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	1
	push	6
	push	2
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	mov	DWORD PTR _tid$[ebp], eax

; 1625 : 
; 1626 : 	if (!tid)

	cmp	DWORD PTR _tid$[ebp], 0
	jne	SHORT $LN38@create_fli

; 1627 : 	{
; 1628 : 		MonoPrint ("Cannot create F16C Flight\n");

	push	OFFSET ??_C@_0BL@GGMJKOGP@Cannot?5create?5F16C?5Flight?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 1629 : 		return;

	jmp	$LN45@create_fli
$LN38@create_fli:

; 1630 : 	}
; 1631 : 
; 1632 : 	tid += VU_LAST_ENTITY_TYPE;

	mov	ecx, DWORD PTR _tid$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR _tid$[ebp], ecx

; 1633 : 
; 1634 : 	MonoPrint ("=> %d,%d (%d Skill)\n", x, y, data.skill);

	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 14					; 0000000eH
	sar	eax, 28					; 0000001cH
	push	eax
	movsx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movsx	edx, WORD PTR _x$[ebp]
	push	edx
	push	OFFSET ??_C@_0BF@LFOINCLP@?$DN?$DO?5?$CFd?0?$CFd?5?$CI?$CFd?5Skill?$CJ?6?$AA@
	call	_MonoPrint
	add	esp, 16					; 00000010H

; 1635 : 	
; 1636 : 	new_flight = NewFlight(tid, 0, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _tid$[ebp]
	push	eax
	call	?NewFlight@@YAPAVFlightClass@@HPAVUnitClass@@0@Z ; NewFlight
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _new_flight$[ebp], eax

; 1637 : 
; 1638 : 	if (!new_flight)

	cmp	DWORD PTR _new_flight$[ebp], 0
	jne	SHORT $LN37@create_fli

; 1639 : 	{
; 1640 : 		MonoPrint ("Cannot create FlightClass object\n");

	push	OFFSET ??_C@_0CC@LHJKAMAN@Cannot?5create?5FlightClass?5object@
	call	_MonoPrint
	add	esp, 4

; 1641 : 		return;

	jmp	$LN45@create_fli
$LN37@create_fli:

; 1642 : 	}
; 1643 : 
; 1644 : 	new_flight->SetOwner (data.side);

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 20					; 00000014H
	sar	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+320]
	call	eax

; 1645 : 	new_flight->SetLocation (x, y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetLocation@CampBaseClass@@QAEXFF@Z	; CampBaseClass::SetLocation

; 1646 : 	new_flight->SetAltitude (FloatToInt32(data.altitude));

	mov	eax, DWORD PTR _data$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetAltitude@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetAltitude

; 1647 : //	new_flight->SetInPackage(1);
; 1648 : 
; 1649 : 	if ((data.dumb) || (!((data.radar) || (data.heat))))

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 18					; 00000012H
	sar	edx, 31					; 0000001fH
	test	edx, edx
	jne	SHORT $LN35@create_fli
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 12					; 0000000cH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	jne	SHORT $LN36@create_fli
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 11					; 0000000bH
	sar	eax, 31					; 0000001fH
	test	eax, eax
	jne	SHORT $LN36@create_fli
$LN35@create_fli:

; 1650 : 	{
; 1651 : 		new_flight->SetUnitMission (AMIS_NONE);

	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax
	jmp	SHORT $LN32@create_fli
$LN36@create_fli:

; 1652 : 	}
; 1653 : 	else if (data.ground)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 10					; 0000000aH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN33@create_fli

; 1654 : 	{
; 1655 : 		new_flight->SetUnitMission (AMIS_SAD);

	push	23					; 00000017H
	mov	eax, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax

; 1656 : 	}
; 1657 : 	else

	jmp	SHORT $LN32@create_fli
$LN33@create_fli:

; 1658 : 	{
; 1659 : 		new_flight->SetUnitMission (AMIS_SWEEP);

	push	7
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax
$LN32@create_fli:

; 1660 : 	}
; 1661 : 
; 1662 : 	switch (data.size)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 28					; 0000001cH
	sar	edx, 28					; 0000001cH
	mov	DWORD PTR tv263[ebp], edx
	mov	eax, DWORD PTR tv263[ebp]
	sub	eax, 1
	mov	DWORD PTR tv263[ebp], eax
	cmp	DWORD PTR tv263[ebp], 3
	ja	SHORT $LN30@create_fli
	mov	ecx, DWORD PTR tv263[ebp]
	jmp	DWORD PTR $LN60@create_fli[ecx*4]
$LN29@create_fli:

; 1663 : 	{
; 1664 : 		case 1:
; 1665 : 		{
; 1666 : 			new_flight->SetNumVehicles (0, 1);

	push	1
	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1667 : 			break;

	jmp	SHORT $LN30@create_fli
$LN28@create_fli:

; 1668 : 		}
; 1669 : 
; 1670 : 		case 2:
; 1671 : 		{
; 1672 : 			new_flight->SetNumVehicles (0, 2);

	push	2
	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1673 : 			break;

	jmp	SHORT $LN30@create_fli
$LN27@create_fli:

; 1674 : 		}
; 1675 : 
; 1676 : 		case 3:
; 1677 : 		{
; 1678 : 			new_flight->SetNumVehicles (0, 2);

	push	2
	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1679 : 			new_flight->SetNumVehicles (1, 1);

	push	1
	push	1
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1680 : 			break;

	jmp	SHORT $LN30@create_fli
$LN26@create_fli:

; 1681 : 		}
; 1682 : 
; 1683 : 		case 4:
; 1684 : 		{
; 1685 : 			new_flight->SetNumVehicles (0, 2);

	push	2
	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles

; 1686 : 			new_flight->SetNumVehicles (1, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetNumVehicles@UnitClass@@QAEXHH@Z	; UnitClass::SetNumVehicles
$LN30@create_fli:

; 1687 : 			break;
; 1688 : 		}
; 1689 : 	}
; 1690 : 
; 1691 : 	for (i = 0; i < PILOTS_PER_FLIGHT; i ++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@create_fli
$LN24@create_fli:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN25@create_fli:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN23@create_fli

; 1692 : 	{
; 1693 : 		if (i < data.size)

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 28					; 0000001cH
	sar	ecx, 28					; 0000001cH
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN22@create_fli

; 1694 : 		{
; 1695 : 			new_flight->plane_stats[i] = AIRCRAFT_AVAILABLE;

	mov	edx, DWORD PTR _new_flight$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+416], 4

; 1696 : 			new_flight->pilots[i] = data.skill;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 14					; 0000000eH
	sar	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _new_flight$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+412], cl

; 1697 : 			//new_flight->MakeFlightDirty (DIRTY_PLANE_STATS, DDP[146].priority);
; 1698 : 			new_flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLEANDOOB);

	push	268435456				; 10000000H
	push	8
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty

; 1699 : 		}
; 1700 : 		else

	jmp	SHORT $LN21@create_fli
$LN22@create_fli:

; 1701 : 		{
; 1702 : 			new_flight->plane_stats[i] = AIRCRAFT_NOT_ASSIGNED;

	mov	eax, DWORD PTR _new_flight$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+416], 0

; 1703 : 			new_flight->pilots[i] = NO_PILOT;

	mov	ecx, DWORD PTR _new_flight$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+412], 255			; 000000ffH

; 1704 : 			//new_flight->MakeFlightDirty (DIRTY_PLANE_STATS, DDP[147].priority);
; 1705 : 			new_flight->MakeFlightDirty (DIRTY_PLANE_STATS, SEND_RELIABLEANDOOB);

	push	268435456				; 10000000H
	push	8
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?MakeFlightDirty@FlightClass@@QAEXW4Dirty_Flight@@W4Dirtyness@@@Z ; FlightClass::MakeFlightDirty
$LN21@create_fli:

; 1706 : 		}
; 1707 : 	}

	jmp	$LN24@create_fli
$LN23@create_fli:

; 1708 : 
; 1709 : 	new_flight->last_player_slot = PILOTS_PER_FLIGHT;

	mov	edx, DWORD PTR _new_flight$[ebp]
	mov	BYTE PTR [edx+424], 4

; 1710 : 
; 1711 : 	// Name this flight
; 1712 : 	vc = GetVehicleClassData (new_flight->GetVehicleID (0));

	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$[ebp], eax

; 1713 : 
; 1714 : 	new_flight->callsign_id = vc->CallsignIndex;

	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR _vc$[ebp]
	mov	al, BYTE PTR [edx+64]
	mov	BYTE PTR [ecx+425], al

; 1715 : 
; 1716 : 	GetCallsignID (&new_flight->callsign_id, &new_flight->callsign_num, vc->CallsignSlots);

	mov	ecx, DWORD PTR _vc$[ebp]
	movzx	edx, BYTE PTR [ecx+65]
	push	edx
	mov	eax, DWORD PTR _new_flight$[ebp]
	add	eax, 426				; 000001aaH
	push	eax
	mov	ecx, DWORD PTR _new_flight$[ebp]
	add	ecx, 425				; 000001a9H
	push	ecx
	call	?GetCallsignID@@YAXPAE0H@Z		; GetCallsignID
	add	esp, 12					; 0000000cH

; 1717 : 
; 1718 : 	if (new_flight->callsign_num)

	mov	edx, DWORD PTR _new_flight$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	test	eax, eax
	je	SHORT $LN20@create_fli

; 1719 : 	{
; 1720 : 		SetCallsignID (new_flight->callsign_id, new_flight->callsign_num);

	mov	ecx, DWORD PTR _new_flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	mov	eax, DWORD PTR _new_flight$[ebp]
	movzx	ecx, BYTE PTR [eax+425]
	push	ecx
	call	?SetCallsignID@@YAXHH@Z			; SetCallsignID
	add	esp, 8
$LN20@create_fli:

; 1721 : 	}
; 1722 : 
; 1723 : 	// Create Waypoints
; 1724 : 
; 1725 : 	time = TheCampaign.CurrentTime;

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR _time$[ebp], edx

; 1726 : 
; 1727 : 	waypoint = new WayPointClass (x, y, FloatToInt32(data.altitude), 0, time, 0, WP_CA, 0);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN47@create_fli
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _time$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0WayPointClass@@QAE@FFHHKKEH@Z	; WayPointClass::WayPointClass
	mov	DWORD PTR tv383[ebp], eax
	jmp	SHORT $LN48@create_fli
$LN47@create_fli:
	mov	DWORD PTR tv383[ebp], 0
$LN48@create_fli:
	mov	ecx, DWORD PTR tv383[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _waypoint$[ebp], edx

; 1728 : 
; 1729 : 	new_flight->wp_list = waypoint;

	mov	eax, DWORD PTR _new_flight$[ebp]
	mov	ecx, DWORD PTR _waypoint$[ebp]
	mov	DWORD PTR [eax+244], ecx

; 1730 : 
; 1731 : 	last_waypoint = waypoint;

	mov	edx, DWORD PTR _waypoint$[ebp]
	mov	DWORD PTR _last_waypoint$[ebp], edx

; 1732 : 	lx = x;

	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR _lx$[ebp], ax

; 1733 : 	ly = y;

	mov	cx, WORD PTR _y$[ebp]
	mov	WORD PTR _ly$[ebp], cx

; 1734 : 
; 1735 : 	nx = x;

	mov	dx, WORD PTR _x$[ebp]
	mov	WORD PTR _nx$[ebp], dx

; 1736 : 	ny = y;

	mov	ax, WORD PTR _y$[ebp]
	mov	WORD PTR _ny$[ebp], ax

; 1737 : 
; 1738 : 	if (data.num_vector)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 2
	sar	edx, 24					; 00000018H
	test	edx, edx
	je	$LN19@create_fli

; 1739 : 	{
; 1740 : 		for (loop = 0; loop < data.num_vector; loop ++)

	mov	DWORD PTR _loop$[ebp], 0
	jmp	SHORT $LN18@create_fli
$LN17@create_fli:
	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	DWORD PTR _loop$[ebp], eax
$LN18@create_fli:
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 2
	sar	edx, 24					; 00000018H
	cmp	DWORD PTR _loop$[ebp], edx
	jge	$LN16@create_fli

; 1741 : 		{
; 1742 : 			rad = (flight->GetLastDirection() * 45 + data.vector[loop]) * DTR;	// WARNING - Dodgy code from Kevin...

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetLastDirection@FlightClass@@QAEEXZ	; FlightClass::GetLastDirection
	movzx	eax, al
	imul	eax, 45					; 0000002dH
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _loop$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4+20]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _rad$[ebp], xmm0

; 1743 : 			
; 1744 : 			nx += (short)FloatToInt32((float)sin (rad) * data.v_dist[loop]);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv911[ebp]
	movss	xmm0, DWORD PTR tv911[ebp]
	mov	eax, DWORD PTR _loop$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax*4+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	movsx	edx, ax
	movsx	eax, WORD PTR _nx$[ebp]
	add	eax, edx
	mov	WORD PTR _nx$[ebp], ax

; 1745 : 			ny += (short)FloatToInt32((float)cos (rad) * data.v_dist[loop]);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv922[ebp]
	movss	xmm0, DWORD PTR tv922[ebp]
	mov	ecx, DWORD PTR _loop$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx*4+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cwde
	movsx	ecx, WORD PTR _ny$[ebp]
	add	ecx, eax
	mov	WORD PTR _ny$[ebp], cx

; 1746 : 
; 1747 : 			waypoint = new WayPointClass (nx, ny, FloatToInt32(data.v_alt[loop]), 0, time, 0, WP_CA, 0);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN49@create_fli
	push	0
	push	11					; 0000000bH
	push	0
	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _loop$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+276]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0WayPointClass@@QAE@FFHHKKEH@Z	; WayPointClass::WayPointClass
	mov	DWORD PTR tv454[ebp], eax
	jmp	SHORT $LN50@create_fli
$LN49@create_fli:
	mov	DWORD PTR tv454[ebp], 0
$LN50@create_fli:
	mov	ecx, DWORD PTR tv454[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _waypoint$[ebp], edx

; 1748 : 
; 1749 : 			last_waypoint->SetNextWP (waypoint);

	mov	eax, DWORD PTR _waypoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_waypoint$[ebp]
	call	?SetNextWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::SetNextWP

; 1750 : 
; 1751 : 			last_waypoint = waypoint;

	mov	ecx, DWORD PTR _waypoint$[ebp]
	mov	DWORD PTR _last_waypoint$[ebp], ecx

; 1752 : 			lx = nx;

	mov	dx, WORD PTR _nx$[ebp]
	mov	WORD PTR _lx$[ebp], dx

; 1753 : 			ly = ny;

	mov	ax, WORD PTR _ny$[ebp]
	mov	WORD PTR _ly$[ebp], ax

; 1754 : 		}

	jmp	$LN17@create_fli
$LN16@create_fli:

; 1755 : 	}
; 1756 : 	else

	jmp	$LN15@create_fli
$LN19@create_fli:

; 1757 : 	{
; 1758 : 		nx = px;

	mov	cx, WORD PTR _px$[ebp]
	mov	WORD PTR _nx$[ebp], cx

; 1759 : 		ny = py;

	mov	dx, WORD PTR _py$[ebp]
	mov	WORD PTR _ny$[ebp], dx

; 1760 : 
; 1761 : 		waypoint = new WayPointClass (nx, ny, FloatToInt32(data.altitude), 0, time, 0, WP_CA, 0);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN51@create_fli
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _time$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0WayPointClass@@QAE@FFHHKKEH@Z	; WayPointClass::WayPointClass
	mov	DWORD PTR tv474[ebp], eax
	jmp	SHORT $LN52@create_fli
$LN51@create_fli:
	mov	DWORD PTR tv474[ebp], 0
$LN52@create_fli:
	mov	ecx, DWORD PTR tv474[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR _waypoint$[ebp], edx

; 1762 : 
; 1763 : 		last_waypoint->SetNextWP (waypoint);

	mov	eax, DWORD PTR _waypoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_waypoint$[ebp]
	call	?SetNextWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::SetNextWP

; 1764 : 		last_waypoint = waypoint;

	mov	ecx, DWORD PTR _waypoint$[ebp]
	mov	DWORD PTR _last_waypoint$[ebp], ecx
$LN15@create_fli:

; 1765 : 	}
; 1766 : 
; 1767 : 	waypoint = new WayPointClass (nx, ny, FloatToInt32(data.altitude), 0, time, 0, WP_CA, WPF_REPEAT_CONTINUOUS | WPF_TARGET);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN53@create_fli
	push	4097					; 00001001H
	push	11					; 0000000bH
	push	0
	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _data$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0WayPointClass@@QAE@FFHHKKEH@Z	; WayPointClass::WayPointClass
	mov	DWORD PTR tv494[ebp], eax
	jmp	SHORT $LN54@create_fli
$LN53@create_fli:
	mov	DWORD PTR tv494[ebp], 0
$LN54@create_fli:
	mov	eax, DWORD PTR tv494[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _waypoint$[ebp], ecx

; 1768 : 
; 1769 : 	last_waypoint->SetNextWP (waypoint);

	mov	edx, DWORD PTR _waypoint$[ebp]
	push	edx
	mov	ecx, DWORD PTR _last_waypoint$[ebp]
	call	?SetNextWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::SetNextWP

; 1770 : 
; 1771 : 	new_flight->SetCurrentWaypoint (2);

	push	2
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetCurrentWaypoint@UnitClass@@QAEXG@Z	; UnitClass::SetCurrentWaypoint

; 1772 : 
; 1773 : 	gActiveFlightID = new_flight->Id ();

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A, ecx
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4, edx

; 1774 : 
; 1775 : 	SetWPTimes (new_flight->GetFirstUnitWP(), TheCampaign.CurrentTime, new_flight->GetCombatSpeed(), 0);

	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?GetCombatSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCombatSpeed
	push	eax
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	eax
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	push	eax
	call	?SetWPTimes@@YAKPAVWayPointClass@@KHH@Z	; SetWPTimes
	add	esp, 16					; 00000010H

; 1776 : 
; 1777 : 	// Load some weapons
; 1778 : 
; 1779 : 	if (data.guns)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 13					; 0000000dH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN14@create_fli

; 1780 : 	{
; 1781 : 		new_flight->LoadWeapons(NULL, DefaultDamageMods, Air, 98, 0, 0); 

	push	0
	push	0
	push	98					; 00000062H
	push	5
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	push	0
	mov	eax, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
	jmp	$LN7@create_fli
$LN14@create_fli:

; 1782 : 	}
; 1783 : 
; 1784 : 	else if (data.heat)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 11					; 0000000bH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN12@create_fli

; 1785 : 	{
; 1786 : 		new_flight->LoadWeapons(NULL, DefaultDamageMods, Air, 2, 0, WEAP_HEATSEEKER); 

	push	2
	push	0
	push	2
	push	5
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	push	0
	mov	eax, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
	jmp	$LN7@create_fli
$LN12@create_fli:

; 1787 : 	}
; 1788 : 
; 1789 : 	else if (data.radar)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 12					; 0000000cH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN10@create_fli

; 1790 : 	{
; 1791 : 		new_flight->LoadWeapons(NULL, DefaultDamageMods, Air, 2, 0, WEAP_RADAR); 

	push	4
	push	0
	push	2
	push	5
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	push	0
	mov	eax, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
	jmp	SHORT $LN7@create_fli
$LN10@create_fli:

; 1792 : 	}
; 1793 : 
; 1794 : 	else if (data.ground)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 10					; 0000000aH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN8@create_fli

; 1795 : 	{
; 1796 : 		new_flight->LoadWeapons(NULL, DefaultDamageMods, Air, 2, 0, WEAP_BAI_LOADOUT); 

	push	65536					; 00010000H
	push	0
	push	2
	push	5
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	push	0
	mov	eax, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax

; 1797 : 	}
; 1798 : 
; 1799 : 	//if (!(data.guns) && !(data.heat) && !(data.radar))
; 1800 : 	else

	jmp	SHORT $LN7@create_fli
$LN8@create_fli:

; 1801 : 	{
; 1802 : 		new_flight->LoadWeapons (NULL, DefaultDamageMods, NoMove, 0, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	OFFSET ?DefaultDamageMods@@3PAEA	; DefaultDamageMods
	push	0
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+712]
	call	eax
$LN7@create_fli:

; 1803 : 	}
; 1804 : 
; 1805 : 	new_flight->SetUnitLastMove (time);

	mov	ecx, DWORD PTR _time$[ebp]
	push	ecx
	mov	edx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [eax+592]
	call	edx

; 1806 : 
; 1807 : 	// if this is a kc10 and its allied, and we don't have a player_flight's package, 
; 1808 : 	// then create a package, and set the tanker stuff up.
; 1809 : 	if ((data.type == ia_kc10) && (data.side == 1)) // allied kc10

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+12], 39			; 00000027H
	jne	$LN2@create_fli
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 20					; 00000014H
	sar	edx, 24					; 00000018H
	cmp	edx, 1
	jne	$LN2@create_fli

; 1810 : 	{
; 1811 : 		if (!player_flight->GetUnitPackage())

	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
	test	eax, eax
	jne	$LN5@create_fli

; 1812 : 		{
; 1813 : 			new_package = (Package) NewUnit
; 1814 : 			(
; 1815 : 				DOMAIN_AIR,
; 1816 : 				TYPE_PACKAGE,
; 1817 : 				0,
; 1818 : 				0,
; 1819 : 				NULL
; 1820 : 			);

	push	0
	push	0
	push	0
	push	2
	push	2
	call	?NewUnit@@YAPAVUnitClass@@HHHHPAV1@@Z	; NewUnit
	add	esp, 20					; 00000014H
	mov	DWORD PTR _new_package$[ebp], eax

; 1821 : 
; 1822 : 			if (!new_package)

	cmp	DWORD PTR _new_package$[ebp], 0
	jne	SHORT $LN4@create_fli

; 1823 : 			{
; 1824 : 				new_flight->SetFinal (1);

	push	1
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetFinal@UnitClass@@QAEXH@Z		; UnitClass::SetFinal

; 1825 : 				return;

	jmp	$LN45@create_fli
$LN4@create_fli:

; 1826 : 			}
; 1827 : 
; 1828 : 			new_package->GetMissionRequest()->targetID = FalconNullId;

	mov	ecx, DWORD PTR _new_package$[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+12], edx

; 1829 : 			new_package->GetMissionRequest()->mission = 0;

	mov	ecx, DWORD PTR _new_package$[ebp]
	call	?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ; PackageClass::GetMissionRequest
	mov	BYTE PTR [eax+60], 0

; 1830 : 			new_package->SetOwner (1);

	push	1
	mov	eax, DWORD PTR _new_package$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _new_package$[ebp]
	mov	eax, DWORD PTR [edx+320]
	call	eax

; 1831 : 
; 1832 : 			new_package->SetTanker (new_flight->Id ());

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _new_package$[ebp]
	call	?SetTanker@PackageClass@@QAEXVVU_ID@@@Z	; PackageClass::SetTanker

; 1833 : 
; 1834 : 			player_flight->SetPackage (new_package->Id ());

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _new_package$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?SetPackage@FlightClass@@QAEXVVU_ID@@@Z	; FlightClass::SetPackage

; 1835 : 
; 1836 : 			new_flight->SetUnitMission (AMIS_TANKER);

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _new_flight$[ebp]
	mov	eax, DWORD PTR [edx+604]
	call	eax

; 1837 : 		}
; 1838 : 		else {

	jmp	SHORT $LN2@create_fli
$LN5@create_fli:

; 1839 : #if VU_ALL_FILTERED
; 1840 : 			new_package = (PackageClass *)player_flight->GetUnitPackage();

	mov	ecx, DWORD PTR ?player_flight@instant_action@@1PAVFlightClass@@A ; instant_action::player_flight
	call	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
	mov	DWORD PTR _new_package$[ebp], eax

; 1841 : #else
; 1842 : 			new_package = (PackageClass *) vuDatabase->Find (player_flight->GetUnitPackage ());
; 1843 : #endif
; 1844 : 
; 1845 : 			if (new_package){

	cmp	DWORD PTR _new_package$[ebp], 0
	je	SHORT $LN2@create_fli

; 1846 : 				new_package->SetTanker (new_flight->Id ());

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _new_package$[ebp]
	call	?SetTanker@PackageClass@@QAEXVVU_ID@@@Z	; PackageClass::SetTanker
$LN2@create_fli:

; 1847 : 			}
; 1848 : 		}
; 1849 : 	}
; 1850 : 
; 1851 : 	if (data.kill)

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 19					; 00000013H
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN1@create_fli

; 1852 : 	{
; 1853 : 		new_flight->SetIAKill (data.kill);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 19					; 00000013H
	sar	ecx, 31					; 0000001fH
	push	ecx
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetIAKill@UnitClass@@QAEXH@Z		; UnitClass::SetIAKill
$LN1@create_fli:

; 1854 : 	}
; 1855 : 	new_flight->SetNoAbort (TRUE);

	push	1
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetNoAbort@UnitClass@@QAEXH@Z		; UnitClass::SetNoAbort

; 1856 : 
; 1857 : 	new_flight->SetFinal (1);

	push	1
	mov	ecx, DWORD PTR _new_flight$[ebp]
	call	?SetFinal@UnitClass@@QAEXH@Z		; UnitClass::SetFinal

; 1858 : 
; 1859 : 	vuDatabase->/*Quick*/Insert(new_flight);

	mov	edx, DWORD PTR _new_flight$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert
$LN45@create_fli:

; 1860 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN60@create_fli:
	DD	$LN29@create_fli
	DD	$LN28@create_fli
	DD	$LN27@create_fli
	DD	$LN26@create_fli
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$0:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$1:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$2:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?create_flight@instant_action@@KAXAAUia_data@@@Z$3:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?create_flight@instant_action@@KAXAAUia_data@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?create_flight@instant_action@@KAXAAUia_data@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?create_flight@instant_action@@KAXAAUia_data@@@Z ENDP	; instant_action::create_flight
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\iaction.cpp
_TEXT	SEGMENT
_data$ = 8						; size = 4
?create_unit@instant_action@@KAXAAUia_data@@@Z PROC	; instant_action::create_unit

; 1527 : {

	push	ebp
	mov	ebp, esp

; 1528 : 	if (data.type < ia_battalion)

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+12], 45			; 0000002dH
	jge	SHORT $LN2@create_uni

; 1529 : 	{
; 1530 : 		create_flight (data);

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?create_flight@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_flight
	add	esp, 4

; 1531 : 	}
; 1532 : 	else

	jmp	SHORT $LN3@create_uni
$LN2@create_uni:

; 1533 : 	{
; 1534 : 		create_battalion (data);

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	?create_battalion@instant_action@@KAXAAUia_data@@@Z ; instant_action::create_battalion
	add	esp, 4
$LN3@create_uni:

; 1535 : 	}
; 1536 : }

	pop	ebp
	ret	0
?create_unit@instant_action@@KAXAAUia_data@@@Z ENDP	; instant_action::create_unit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPilotSlot@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPilotSlot@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetPilotSlot, COMDAT
; _this$ = ecx

; 146  : 	uchar GetPilotSlot (void) const               { return pilotSlot; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+512]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPilotSlot@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetPilotSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ PROC ; FalconSessionEntity::GetPlayerFlight, COMDAT
; _this$ = ecx

; 139  : 	FlightClass* GetPlayerFlight(void) const      { return playerFlightPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 480				; 000001e0H
	call	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ENDP ; FalconSessionEntity::GetPlayerFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ PROC	; VuBin<FlightClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ENDP	; VuBin<FlightClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ PROC ; FlightClass::GetUnitPackage, COMDAT
; _this$ = ecx

; 216  : 		PackageClass* GetUnitPackage (void)	{ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 			return (PackageClass*)vuDatabase->Find(package); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find

; 218  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ENDP ; FlightClass::GetUnitPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetLastDirection@FlightClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastDirection@FlightClass@@QAEEXZ PROC		; FlightClass::GetLastDirection, COMDAT
; _this$ = ecx

; 103  : 		uchar GetLastDirection (void)				{ return last_direction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+379]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastDirection@FlightClass@@QAEEXZ ENDP		; FlightClass::GetLastDirection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ PROC ; PackageClass::GetMissionRequest, COMDAT
; _this$ = ecx

; 96   : 		MissionRequestClass *GetMissionRequest (void)	{ return &mis_request; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 392				; 00000188H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMissionRequest@PackageClass@@QAEPAVMissionRequestClass@@XZ ENDP ; PackageClass::GetMissionRequest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ PROC	; UnitClass::GetFirstUnitWP, COMDAT
; _this$ = ecx

; 431  : 	WayPoint GetFirstUnitWP()				{ return wp_list; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ENDP	; UnitClass::GetFirstUnitWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetNumVehicles@UnitClass@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vg$ = 8						; size = 4
_n$ = 12						; size = 4
?SetNumVehicles@UnitClass@@QAEXHH@Z PROC		; UnitClass::SetNumVehicles, COMDAT
; _this$ = ecx

; 358  : 	void SetNumVehicles(int vg, int n)				{ SetRoster((roster & ~(3<<(vg*2))) | ((n & 0x03) << (vg*2))); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _vg$[ebp]
	shl	ecx, 1
	mov	eax, 3
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+192]
	mov	edx, DWORD PTR _n$[ebp]
	and	edx, 3
	mov	ecx, DWORD PTR _vg$[ebp]
	shl	ecx, 1
	shl	edx, cl
	or	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRoster@UnitClass@@QAEXJ@Z		; UnitClass::SetRoster
	mov	esp, ebp
	pop	ebp
	ret	8
?SetNumVehicles@UnitClass@@QAEXHH@Z ENDP		; UnitClass::SetNumVehicles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitDestination@UnitClass@@QAEXFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?SetUnitDestination@UnitClass@@QAEXFF@Z PROC		; UnitClass::SetUnitDestination, COMDAT
; _this$ = ecx

; 356  : 	void SetUnitDestination (GridIndex x, GridIndex y)	{ 	dest_x = (GridIndex)(x+1); dest_y = (GridIndex)(y+1); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR _x$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+200], ax
	movsx	edx, WORD PTR _y$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+202], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitDestination@UnitClass@@QAEXFF@Z ENDP		; UnitClass::SetUnitDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IAKill@UnitClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IAKill@UnitClass@@QAEHXZ PROC				; UnitClass::IAKill, COMDAT
; _this$ = ecx

; 335  : 	int IAKill (void)								{ return (int)unit_flags & U_IA_KILL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 33554432				; 02000000H
	mov	esp, ebp
	pop	ebp
	ret	0
?IAKill@UnitClass@@QAEHXZ ENDP				; UnitClass::IAKill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\loadout.h
;	COMDAT ??0LoadoutStruct@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LoadoutStruct@@QAE@XZ PROC				; LoadoutStruct::LoadoutStruct, COMDAT
; _this$ = ecx

; 32   : 		LoadoutStruct(void)		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		{ 
; 34   : 			memset(WeaponID,	0,	(sizeof(short) * HARDPOINT_MAX)); 

	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 35   : 			memset(WeaponCount,	0,	(sizeof(uchar) * HARDPOINT_MAX)); 

	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0LoadoutStruct@@QAE@XZ ENDP				; LoadoutStruct::LoadoutStruct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPArrive@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetWPArrive@WayPointClass@@QAEXK@Z PROC		; WayPointClass::SetWPArrive, COMDAT
; _this$ = ecx

; 195  : 	void SetWPArrive (CampaignTime t)				{ Arrive = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPArrive@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::SetWPArrive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPDepartTime@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetWPDepartTime@WayPointClass@@QAEXK@Z PROC		; WayPointClass::SetWPDepartTime, COMDAT
; _this$ = ecx

; 194  : 	void SetWPDepartTime (CampaignTime t)			{ Depart = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPDepartTime@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::SetWPDepartTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPFlags@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?SetWPFlags@WayPointClass@@QAEXK@Z PROC			; WayPointClass::SetWPFlags, COMDAT
; _this$ = ecx

; 163  : 	void SetWPFlags (ulong f)						{ Flags = (ulong) f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPFlags@WayPointClass@@QAEXK@Z ENDP			; WayPointClass::SetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPAction@WayPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetWPAction@WayPointClass@@QAEXH@Z PROC		; WayPointClass::SetWPAction, COMDAT
; _this$ = ecx

; 160  : 	void SetWPAction (int a)						{ Action = (uchar) a; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _a$[ebp]
	mov	BYTE PTR [eax+24], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPAction@WayPointClass@@QAEXH@Z ENDP		; WayPointClass::SetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
