; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPUPD\Cmpevent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?CampEvents@@3PAPAVEventClass@@A		; CampEvents
PUBLIC	?CE_Events@@3FA					; CE_Events
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?CampEvents@@3PAPAVEventClass@@A DD 01H DUP (?)		; CampEvents
?CE_Events@@3FA DW 01H DUP (?)				; CE_Events
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	??0EventClass@@QAE@F@Z				; EventClass::EventClass
PUBLIC	??0EventClass@@QAE@PAPAEPAJ@Z			; EventClass::EventClass
PUBLIC	??0EventClass@@QAE@PAU_iobuf@@@Z		; EventClass::EventClass
PUBLIC	??1EventClass@@QAE@XZ				; EventClass::~EventClass
PUBLIC	?Save@EventClass@@QAEHPAU_iobuf@@@Z		; EventClass::Save
PUBLIC	?DoEvent@EventClass@@QAEXXZ			; EventClass::DoEvent
PUBLIC	?SetEvent@EventClass@@QAEXH@Z			; EventClass::SetEvent
PUBLIC	?HasFired@EventClass@@QAEHXZ			; EventClass::HasFired
PUBLIC	??_GEventClass@@QAEPAXI@Z			; EventClass::`scalar deleting destructor'
PUBLIC	?CheckTriggers@@YAHPAD@Z			; CheckTriggers
PUBLIC	?NewCampaignEvents@@YAHPAD@Z			; NewCampaignEvents
PUBLIC	?LoadCampaignEvents@@YAHPAD0@Z			; LoadCampaignEvents
PUBLIC	?SaveCampaignEvents@@YAHPAD@Z			; SaveCampaignEvents
PUBLIC	?DisposeCampaignEvents@@YAXXZ			; DisposeCampaignEvents
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetInitiative@TeamClass@@QAEFXZ		; TeamClass::GetInitiative
PUBLIC	?GetSupplyAvail@TeamClass@@QAEGXZ		; TeamClass::GetSupplyAvail
PUBLIC	?GetFuelAvail@TeamClass@@QAEGXZ			; TeamClass::GetFuelAvail
PUBLIC	?GetReplacementsAvail@TeamClass@@QAEGXZ		; TeamClass::GetReplacementsAvail
PUBLIC	?GetReinforcement@TeamClass@@QAEFXZ		; TeamClass::GetReinforcement
PUBLIC	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
PUBLIC	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CampaignEnemyGroundExperience@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::CampaignEnemyGroundExperience
PUBLIC	?ReadScriptedTriggerFile@@YAHPAD@Z		; ReadScriptedTriggerFile
PUBLIC	?ReadNumberOfEvents@@YAHPAD@Z			; ReadNumberOfEvents
PUBLIC	?SetInitialEvents@@YAXPAD@Z			; SetInitialEvents
PUBLIC	?ReadSpecialCampaignData@@YAXPAD@Z		; ReadSpecialCampaignData
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0CA@JMPLBPG@CampEvent?3?5Event?5?$CFd?5activated?4?6?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_03NJKMHLPI@tri?$AA@			; `string'
PUBLIC	??_C@_0O@MECFLMOE@?$CDTOTAL_EVENTS?$AA@		; `string'
PUBLIC	??_C@_0L@KJAOIJIF@?$CDSET_EVENT?$AA@		; `string'
PUBLIC	??_C@_0N@KLGIMBDI@?$CDRESET_EVENT?$AA@		; `string'
PUBLIC	??_C@_0L@DMPONIOG@?$CDSET_TEMPO?$AA@		; `string'
PUBLIC	??_C@_0BD@DBFJINKE@?$CDCHANGE_PRIORITIES?$AA@	; `string'
PUBLIC	??_C@_08MMLOOEMJ@?$CDENDINIT?$AA@		; `string'
PUBLIC	??_C@_0M@LNOLCJJK@?$CDBULLSEYE_X?$AA@		; `string'
PUBLIC	??_C@_0M@KEPABINL@?$CDBULLSEYE_Y?$AA@		; `string'
PUBLIC	??_C@_0BE@OEPNLAIJ@?$CDFLOT_SORTDIRECTION?$AA@	; `string'
PUBLIC	??_C@_0BD@DJBKOIAP@?$CDFLOT_DRAWDISTANCE?$AA@	; `string'
PUBLIC	??_C@_03MJGMIPMC@evt?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@		; `string'
PUBLIC	??_C@_03LFFEHOPP@?$CDIF?$AA@			; `string'
PUBLIC	??_C@_05GNCADCNB@?$CDELSE?$AA@			; `string'
PUBLIC	??_C@_06OJIOOPNB@?$CDENDIF?$AA@			; `string'
PUBLIC	??_C@_0CL@PPFAPJKP@?$DMscript?5reading?5Error?5?9?5unmatche@ ; `string'
PUBLIC	??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@ ; `string'
PUBLIC	??_C@_0BB@LMBPDGFN@?$CDIF_EVENT_PLAYED?$AA@	; `string'
PUBLIC	??_C@_0BA@LIEABDKJ@?$CDIF_MAIN_TARGET?$AA@	; `string'
PUBLIC	??_C@_0BF@NLHADIMP@?$CDIF_TROOPS_COMMITTED?$AA@	; `string'
PUBLIC	??_C@_0P@OBKPKOP@?$CDIF_CONTROLLED?$AA@		; `string'
PUBLIC	??_C@_0P@FIPAANMB@?$CDIF_INITIATIVE?$AA@	; `string'
PUBLIC	??_C@_0L@GHLOCIPG@?$CDIF_SUPPLY?$AA@		; `string'
PUBLIC	??_C@_0BG@PNLONJFN@?$CDIF_PLAYER_DIFFICULTY?$AA@ ; `string'
PUBLIC	??_C@_0BG@BGHLMNLB@?$CDIF_PRI_CONTROLLED_LT?$AA@ ; `string'
PUBLIC	??_C@_0BB@PLGBNBII@?$CDIF_ON_OFFENSIVE?$AA@	; `string'
PUBLIC	??_C@_0BA@BKFLCPBI@?$CDIF_FORCE_RATIO?$AA@	; `string'
PUBLIC	??_C@_0BB@FEOMEOFG@?$CDIF_BORDOM_HOURS?$AA@	; `string'
PUBLIC	??_C@_0BB@NBCKODFF@?$CDIF_CAMPAIGN_DAY?$AA@	; `string'
PUBLIC	??_C@_0BC@PMJJCJKE@?$CDIF_REINFORCEMENT?$AA@	; `string'
PUBLIC	??_C@_0BC@BGJPCNDJ@?$CDIF_RANDOM_CHANCE?$AA@	; `string'
PUBLIC	??_C@_0M@DEOGOHDO@?$CDPLAY_MOVIE?$AA@		; `string'
PUBLIC	??_C@_0BC@FJHMFBIN@?$CDCHANGE_RELATIONS?$AA@	; `string'
PUBLIC	??_C@_09POJOAFGP@?$CDDO_EVENT?$AA@		; `string'
PUBLIC	??_C@_0BC@LMOGPFBD@?$CDSHIFT_INITIATIVE?$AA@	; `string'
PUBLIC	??_C@_09GBKGEMFH@?$CDEND_GAME?$AA@		; `string'
PUBLIC	??_C@_0BG@IHEEDMFM@?$CDRESET_BORDOM_TIMEOUT?$AA@ ; `string'
PUBLIC	??_C@_0BG@HDJBAMDG@?$CDSET_MINIMUM_SUPPLIES?$AA@ ; `string'
PUBLIC	??_C@_0BC@OGABHOAI@?$CDSET_PAK_PRIORITY?$AA@	; `string'
PUBLIC	??_C@_04MOICCKAB@?$CDSET?$AA@			; `string'
PUBLIC	??_C@_0CH@PNPALBIM@CampEvent?4cpp?3?5Unrecognized?5toke@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@42480000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strchr:PROC
EXTRN	_strncmp:PROC
EXTRN	_atof:PROC
EXTRN	_atoi:PROC
EXTRN	_rand:PROC
EXTRN	_MonoPrint:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z:PROC	; OpenCampFile
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?SetSupplyAvail@TeamClass@@QAEXH@Z:PROC		; TeamClass::SetSupplyAvail
EXTRN	?SetFuelAvail@TeamClass@@QAEXH@Z:PROC		; TeamClass::SetFuelAvail
EXTRN	?SetReplacementsAvail@TeamClass@@QAEXH@Z:PROC	; TeamClass::SetReplacementsAvail
EXTRN	?SetTeam@@YAXEH@Z:PROC				; SetTeam
EXTRN	?SetTTRelations@@YAXEEH@Z:PROC			; SetTTRelations
EXTRN	?TransferInitiative@@YAXEEH@Z:PROC		; TransferInitiative
EXTRN	?GetEnemyTeam@@YAEE@Z:PROC			; GetEnemyTeam
EXTRN	?CloseCampFile@@YAXPAU_iobuf@@@Z:PROC		; CloseCampFile
EXTRN	?ReadCampFile@@YA?AUCampaignData@@PAD0@Z:PROC	; ReadCampFile
EXTRN	?GetCampaignDay@CampaignClass@@QAEHXZ:PROC	; CampaignClass::GetCampaignDay
EXTRN	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetFirstObjective
EXTRN	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z:PROC ; GetNextObjective
EXTRN	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z:PROC ; GetPOData
EXTRN	?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z:PROC ; GetEntityByCampID
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0CampEventDataMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; CampEventDataMessage::CampEventDataMessage
EXTRN	?ReadComments@@YAXPAU_iobuf@@@Z:PROC		; ReadComments
EXTRN	?ReadToken@@YAPADPAU_iobuf@@QADH@Z:PROC		; ReadToken
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuLocalSession@@3VVU_ID@@A:QWORD		; vuLocalSession
EXTRN	?Map_Max_X@@3FA:WORD				; Map_Max_X
EXTRN	?Map_Max_Y@@3FA:WORD				; Map_Max_Y
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?POList@@3PAVFalconPrivateOrderedList@@A:DWORD	; POList
EXTRN	?FLOTDrawDistance@@3MA:DWORD			; FLOTDrawDistance
EXTRN	?FLOTSortDirection@@3HA:DWORD			; FLOTSortDirection
EXTRN	?TheaterXPosition@@3HA:DWORD			; TheaterXPosition
EXTRN	?TheaterYPosition@@3HA:DWORD			; TheaterYPosition
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PNPALBIM@CampEvent?4cpp?3?5Unrecognized?5toke@
CONST	SEGMENT
??_C@_0CH@PNPALBIM@CampEvent?4cpp?3?5Unrecognized?5toke@ DB 'CampEvent.cp'
	DB	'p: Unrecognized token: %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOICCKAB@?$CDSET?$AA@
CONST	SEGMENT
??_C@_04MOICCKAB@?$CDSET?$AA@ DB '#SET', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGABHOAI@?$CDSET_PAK_PRIORITY?$AA@
CONST	SEGMENT
??_C@_0BC@OGABHOAI@?$CDSET_PAK_PRIORITY?$AA@ DB '#SET_PAK_PRIORITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HDJBAMDG@?$CDSET_MINIMUM_SUPPLIES?$AA@
CONST	SEGMENT
??_C@_0BG@HDJBAMDG@?$CDSET_MINIMUM_SUPPLIES?$AA@ DB '#SET_MINIMUM_SUPPLIE'
	DB	'S', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IHEEDMFM@?$CDRESET_BORDOM_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0BG@IHEEDMFM@?$CDRESET_BORDOM_TIMEOUT?$AA@ DB '#RESET_BORDOM_TIMEOU'
	DB	'T', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09GBKGEMFH@?$CDEND_GAME?$AA@
CONST	SEGMENT
??_C@_09GBKGEMFH@?$CDEND_GAME?$AA@ DB '#END_GAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LMOGPFBD@?$CDSHIFT_INITIATIVE?$AA@
CONST	SEGMENT
??_C@_0BC@LMOGPFBD@?$CDSHIFT_INITIATIVE?$AA@ DB '#SHIFT_INITIATIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09POJOAFGP@?$CDDO_EVENT?$AA@
CONST	SEGMENT
??_C@_09POJOAFGP@?$CDDO_EVENT?$AA@ DB '#DO_EVENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FJHMFBIN@?$CDCHANGE_RELATIONS?$AA@
CONST	SEGMENT
??_C@_0BC@FJHMFBIN@?$CDCHANGE_RELATIONS?$AA@ DB '#CHANGE_RELATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEOGOHDO@?$CDPLAY_MOVIE?$AA@
CONST	SEGMENT
??_C@_0M@DEOGOHDO@?$CDPLAY_MOVIE?$AA@ DB '#PLAY_MOVIE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BGJPCNDJ@?$CDIF_RANDOM_CHANCE?$AA@
CONST	SEGMENT
??_C@_0BC@BGJPCNDJ@?$CDIF_RANDOM_CHANCE?$AA@ DB '#IF_RANDOM_CHANCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PMJJCJKE@?$CDIF_REINFORCEMENT?$AA@
CONST	SEGMENT
??_C@_0BC@PMJJCJKE@?$CDIF_REINFORCEMENT?$AA@ DB '#IF_REINFORCEMENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NBCKODFF@?$CDIF_CAMPAIGN_DAY?$AA@
CONST	SEGMENT
??_C@_0BB@NBCKODFF@?$CDIF_CAMPAIGN_DAY?$AA@ DB '#IF_CAMPAIGN_DAY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FEOMEOFG@?$CDIF_BORDOM_HOURS?$AA@
CONST	SEGMENT
??_C@_0BB@FEOMEOFG@?$CDIF_BORDOM_HOURS?$AA@ DB '#IF_BORDOM_HOURS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BKFLCPBI@?$CDIF_FORCE_RATIO?$AA@
CONST	SEGMENT
??_C@_0BA@BKFLCPBI@?$CDIF_FORCE_RATIO?$AA@ DB '#IF_FORCE_RATIO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PLGBNBII@?$CDIF_ON_OFFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BB@PLGBNBII@?$CDIF_ON_OFFENSIVE?$AA@ DB '#IF_ON_OFFENSIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BGHLMNLB@?$CDIF_PRI_CONTROLLED_LT?$AA@
CONST	SEGMENT
??_C@_0BG@BGHLMNLB@?$CDIF_PRI_CONTROLLED_LT?$AA@ DB '#IF_PRI_CONTROLLED_L'
	DB	'T', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PNLONJFN@?$CDIF_PLAYER_DIFFICULTY?$AA@
CONST	SEGMENT
??_C@_0BG@PNLONJFN@?$CDIF_PLAYER_DIFFICULTY?$AA@ DB '#IF_PLAYER_DIFFICULT'
	DB	'Y', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GHLOCIPG@?$CDIF_SUPPLY?$AA@
CONST	SEGMENT
??_C@_0L@GHLOCIPG@?$CDIF_SUPPLY?$AA@ DB '#IF_SUPPLY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIPAANMB@?$CDIF_INITIATIVE?$AA@
CONST	SEGMENT
??_C@_0P@FIPAANMB@?$CDIF_INITIATIVE?$AA@ DB '#IF_INITIATIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OBKPKOP@?$CDIF_CONTROLLED?$AA@
CONST	SEGMENT
??_C@_0P@OBKPKOP@?$CDIF_CONTROLLED?$AA@ DB '#IF_CONTROLLED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NLHADIMP@?$CDIF_TROOPS_COMMITTED?$AA@
CONST	SEGMENT
??_C@_0BF@NLHADIMP@?$CDIF_TROOPS_COMMITTED?$AA@ DB '#IF_TROOPS_COMMITTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIEABDKJ@?$CDIF_MAIN_TARGET?$AA@
CONST	SEGMENT
??_C@_0BA@LIEABDKJ@?$CDIF_MAIN_TARGET?$AA@ DB '#IF_MAIN_TARGET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LMBPDGFN@?$CDIF_EVENT_PLAYED?$AA@
CONST	SEGMENT
??_C@_0BB@LMBPDGFN@?$CDIF_EVENT_PLAYED?$AA@ DB '#IF_EVENT_PLAYED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@
CONST	SEGMENT
??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@ DB '<Brief '
	DB	'Reading Error - stack overflow. Max stacks = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PPFAPJKP@?$DMscript?5reading?5Error?5?9?5unmatche@
CONST	SEGMENT
??_C@_0CL@PPFAPJKP@?$DMscript?5reading?5Error?5?9?5unmatche@ DB '<script '
	DB	'reading Error - unmatched #ENDIF>', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJIOOPNB@?$CDENDIF?$AA@
CONST	SEGMENT
??_C@_06OJIOOPNB@?$CDENDIF?$AA@ DB '#ENDIF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GNCADCNB@?$CDELSE?$AA@
CONST	SEGMENT
??_C@_05GNCADCNB@?$CDELSE?$AA@ DB '#ELSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFFEHOPP@?$CDIF?$AA@
CONST	SEGMENT
??_C@_03LFFEHOPP@?$CDIF?$AA@ DB '#IF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@
CONST	SEGMENT
??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@ DB '#ENDSCRIPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MJGMIPMC@evt?$AA@
CONST	SEGMENT
??_C@_03MJGMIPMC@evt?$AA@ DB 'evt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DJBKOIAP@?$CDFLOT_DRAWDISTANCE?$AA@
CONST	SEGMENT
??_C@_0BD@DJBKOIAP@?$CDFLOT_DRAWDISTANCE?$AA@ DB '#FLOT_DRAWDISTANCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OEPNLAIJ@?$CDFLOT_SORTDIRECTION?$AA@
CONST	SEGMENT
??_C@_0BE@OEPNLAIJ@?$CDFLOT_SORTDIRECTION?$AA@ DB '#FLOT_SORTDIRECTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KEPABINL@?$CDBULLSEYE_Y?$AA@
CONST	SEGMENT
??_C@_0M@KEPABINL@?$CDBULLSEYE_Y?$AA@ DB '#BULLSEYE_Y', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LNOLCJJK@?$CDBULLSEYE_X?$AA@
CONST	SEGMENT
??_C@_0M@LNOLCJJK@?$CDBULLSEYE_X?$AA@ DB '#BULLSEYE_X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMLOOEMJ@?$CDENDINIT?$AA@
CONST	SEGMENT
??_C@_08MMLOOEMJ@?$CDENDINIT?$AA@ DB '#ENDINIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBFJINKE@?$CDCHANGE_PRIORITIES?$AA@
CONST	SEGMENT
??_C@_0BD@DBFJINKE@?$CDCHANGE_PRIORITIES?$AA@ DB '#CHANGE_PRIORITIES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DMPONIOG@?$CDSET_TEMPO?$AA@
CONST	SEGMENT
??_C@_0L@DMPONIOG@?$CDSET_TEMPO?$AA@ DB '#SET_TEMPO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLGIMBDI@?$CDRESET_EVENT?$AA@
CONST	SEGMENT
??_C@_0N@KLGIMBDI@?$CDRESET_EVENT?$AA@ DB '#RESET_EVENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KJAOIJIF@?$CDSET_EVENT?$AA@
CONST	SEGMENT
??_C@_0L@KJAOIJIF@?$CDSET_EVENT?$AA@ DB '#SET_EVENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MECFLMOE@?$CDTOTAL_EVENTS?$AA@
CONST	SEGMENT
??_C@_0O@MECFLMOE@?$CDTOTAL_EVENTS?$AA@ DB '#TOTAL_EVENTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJKMHLPI@tri?$AA@
CONST	SEGMENT
??_C@_03NJKMHLPI@tri?$AA@ DB 'tri', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JMPLBPG@CampEvent?3?5Event?5?$CFd?5activated?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@JMPLBPG@CampEvent?3?5Event?5?$CFd?5activated?4?6?$AA@ DB 'CampE'
	DB	'vent: Event %d activated.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?NewCampaignEvents@@YAHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewCampaignEvents@@YAHPAD@Z$0
__unwindtable$?SetEvent@EventClass@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetEvent@EventClass@@QAEXH@Z$0
__unwindtable$?ReadScriptedTriggerFile@@YAHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadScriptedTriggerFile@@YAHPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadScriptedTriggerFile@@YAHPAD@Z$1
__unwindtable$?LoadCampaignEvents@@YAHPAD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadCampaignEvents@@YAHPAD0@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadCampaignEvents@@YAHPAD0@Z$1
__ehfuncinfo$?ReadScriptedTriggerFile@@YAHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadScriptedTriggerFile@@YAHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?LoadCampaignEvents@@YAHPAD0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadCampaignEvents@@YAHPAD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?NewCampaignEvents@@YAHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewCampaignEvents@@YAHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetEvent@EventClass@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetEvent@EventClass@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_i$1 = -168						; size = 4
_i$2 = -164						; size = 4
_done$ = -160						; size = 4
_i$3 = -156						; size = 4
_i$4 = -152						; size = 4
_sptr$5 = -148						; size = 4
_sptr$6 = -144						; size = 4
_fp$ = -140						; size = 4
_sptr$7 = -136						; size = 4
_sptr$8 = -132						; size = 4
_token$ = -128						; size = 121
__$ArrayPad$ = -4					; size = 4
_scenario$ = 8						; size = 4
?ReadSpecialCampaignData@@YAXPAD@Z PROC			; ReadSpecialCampaignData

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 244  : 	FILE*		fp;
; 245  : 	char		token[121];
; 246  : 	int			done = 0;

	mov	DWORD PTR _done$[ebp], 0

; 247  : 
; 248  : 	// Initialise variables to default values
; 249  : 	TheaterXPosition = Map_Max_X/2;

	movsx	eax, WORD PTR ?Map_Max_X@@3FA		; Map_Max_X
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR ?TheaterXPosition@@3HA, eax	; TheaterXPosition

; 250  : 	TheaterYPosition = Map_Max_Y/2;

	movsx	eax, WORD PTR ?Map_Max_Y@@3FA		; Map_Max_Y
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR ?TheaterYPosition@@3HA, eax	; TheaterYPosition

; 251  : 	FLOTSortDirection = 0;

	mov	DWORD PTR ?FLOTSortDirection@@3HA, 0	; FLOTSortDirection

; 252  : 	FLOTDrawDistance = 50.0f;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR ?FLOTDrawDistance@@3MA, xmm0

; 253  : 
; 254  : 	if ((fp = OpenCampFile(scenario,"tri","r")) == NULL)

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_03NJKMHLPI@tri?$AA@
	mov	eax, DWORD PTR _scenario$[ebp]
	push	eax
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN16@ReadSpecia

; 255  : 		return;

	jmp	$LN17@ReadSpecia
$LN16@ReadSpecia:

; 256  : 	while (!done)

	cmp	DWORD PTR _done$[ebp], 0
	jne	$LN14@ReadSpecia

; 257  : 		{
; 258  : 		ReadComments(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?ReadComments@@YAXPAU_iobuf@@@Z		; ReadComments
	add	esp, 4

; 259  : 		ReadToken(fp,token,120);

	push	120					; 00000078H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?ReadToken@@YAPADPAU_iobuf@@QADH@Z	; ReadToken
	add	esp, 12					; 0000000cH

; 260  : 		if (!token[0])

	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _token$[ebp+ecx]
	test	edx, edx
	jne	SHORT $LN13@ReadSpecia

; 261  : 			continue;

	jmp	SHORT $LN16@ReadSpecia
$LN13@ReadSpecia:

; 262  : // 2002-04-17 MN these have originally been read from Falcon4.AII - but now from trigger files so we can
; 263  : // set them individually for each campaign :-)
; 264  : 		if (strncmp(token,"#BULLSEYE_X",11)==0) // bullseye reference point X position

	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@LNOLCJJK@?$CDBULLSEYE_X?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@ReadSpecia

; 265  : 			{
; 266  : 			char	*sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$5[ebp], eax

; 267  : 			int		i = 0;

	mov	DWORD PTR _i$4[ebp], 0

; 268  : 			if (sptr)

	cmp	DWORD PTR _sptr$5[ebp], 0
	je	SHORT $LN11@ReadSpecia

; 269  : 				sptr++;

	mov	edx, DWORD PTR _sptr$5[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$5[ebp], edx
$LN11@ReadSpecia:

; 270  : 			i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$5[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$4[ebp], eax

; 271  : 			TheaterXPosition = i;

	mov	ecx, DWORD PTR _i$4[ebp]
	mov	DWORD PTR ?TheaterXPosition@@3HA, ecx	; TheaterXPosition
	jmp	$LN3@ReadSpecia
$LN12@ReadSpecia:

; 272  : 			}
; 273  : 		else if (strncmp(token,"#BULLSEYE_Y",11)==0) // bullseye reference point Y position

	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@KEPABINL@?$CDBULLSEYE_Y?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@ReadSpecia

; 274  : 			{
; 275  : 			char	*sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$6[ebp], eax

; 276  : 			int		i = 0;

	mov	DWORD PTR _i$1[ebp], 0

; 277  : 			if (sptr)

	cmp	DWORD PTR _sptr$6[ebp], 0
	je	SHORT $LN8@ReadSpecia

; 278  : 				sptr++;

	mov	ecx, DWORD PTR _sptr$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$6[ebp], ecx
$LN8@ReadSpecia:

; 279  : 			i = atoi(sptr);

	mov	edx, DWORD PTR _sptr$6[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$1[ebp], eax

; 280  : 			TheaterYPosition = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?TheaterYPosition@@3HA, eax	; TheaterYPosition
	jmp	$LN3@ReadSpecia
$LN9@ReadSpecia:

; 281  : 			}
; 282  : 		else if (strncmp(token,"#FLOT_SORTDIRECTION",19)==0) // 0 = West-East, 1 = North-South

	push	19					; 00000013H
	push	OFFSET ??_C@_0BE@OEPNLAIJ@?$CDFLOT_SORTDIRECTION?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@ReadSpecia

; 283  : 			{
; 284  : 			char	*sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$8[ebp], eax

; 285  : 			int		i = 0;

	mov	DWORD PTR _i$2[ebp], 0

; 286  : 			if (sptr)

	cmp	DWORD PTR _sptr$8[ebp], 0
	je	SHORT $LN5@ReadSpecia

; 287  : 				sptr++;

	mov	eax, DWORD PTR _sptr$8[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$8[ebp], eax
$LN5@ReadSpecia:

; 288  : 			i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$8[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$2[ebp], eax

; 289  : 			FLOTSortDirection = i;

	mov	edx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR ?FLOTSortDirection@@3HA, edx	; FLOTSortDirection
	jmp	SHORT $LN3@ReadSpecia
$LN6@ReadSpecia:

; 290  : 			}
; 291  : 		else if (strncmp(token,"#FLOT_DRAWDISTANCE",11)==0) // bullseye reference point X position

	push	11					; 0000000bH
	push	OFFSET ??_C@_0BD@DJBKOIAP@?$CDFLOT_DRAWDISTANCE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@ReadSpecia

; 292  : 			{
; 293  : 			char	*sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$7[ebp], eax

; 294  : 			float		i = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _i$3[ebp], xmm0

; 295  : 			if (sptr)

	cmp	DWORD PTR _sptr$7[ebp], 0
	je	SHORT $LN2@ReadSpecia

; 296  : 				sptr++;

	mov	edx, DWORD PTR _sptr$7[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$7[ebp], edx
$LN2@ReadSpecia:

; 297  : 			i = (float)atof(sptr);

	mov	eax, DWORD PTR _sptr$7[ebp]
	push	eax
	call	_atof
	add	esp, 4
	fstp	DWORD PTR _i$3[ebp]

; 298  : 			FLOTDrawDistance = i;

	movss	xmm0, DWORD PTR _i$3[ebp]
	movss	DWORD PTR ?FLOTDrawDistance@@3MA, xmm0
$LN3@ReadSpecia:

; 299  : 			}
; 300  : 		if (strcmp(token,"#ENDINIT")==0)

	push	OFFSET ??_C@_08MMLOOEMJ@?$CDENDINIT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@ReadSpecia

; 301  : 			done = 1;

	mov	DWORD PTR _done$[ebp], 1
$LN1@ReadSpecia:

; 302  : 		}

	jmp	$LN16@ReadSpecia
$LN14@ReadSpecia:

; 303  : 	CloseCampFile(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4
$LN17@ReadSpecia:

; 304  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadSpecialCampaignData@@YAXPAD@Z ENDP			; ReadSpecialCampaignData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_i$1 = -152						; size = 4
_done$ = -148						; size = 4
_i$2 = -144						; size = 4
_sptr$3 = -140						; size = 4
_fp$ = -136						; size = 4
_sptr$4 = -132						; size = 4
_token$ = -128						; size = 121
__$ArrayPad$ = -4					; size = 4
_scenario$ = 8						; size = 4
?SetInitialEvents@@YAXPAD@Z PROC			; SetInitialEvents

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 183  : 	FILE*		fp;
; 184  : 	char		token[121];
; 185  : 	int			done = 0;

	mov	DWORD PTR _done$[ebp], 0

; 186  : 
; 187  : 	if ((fp = OpenCampFile(scenario,"tri","r")) == NULL)

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_03NJKMHLPI@tri?$AA@
	mov	eax, DWORD PTR _scenario$[ebp]
	push	eax
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN13@SetInitial

; 188  : 		return;

	jmp	$LN15@SetInitial
$LN13@SetInitial:

; 189  : 	while (!done)

	cmp	DWORD PTR _done$[ebp], 0
	jne	$LN12@SetInitial

; 190  : 		{
; 191  : 		ReadComments(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?ReadComments@@YAXPAU_iobuf@@@Z		; ReadComments
	add	esp, 4

; 192  : 		ReadToken(fp,token,120);

	push	120					; 00000078H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?ReadToken@@YAPADPAU_iobuf@@QADH@Z	; ReadToken
	add	esp, 12					; 0000000cH

; 193  : 		if (!token[0])

	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _token$[ebp+ecx]
	test	edx, edx
	jne	SHORT $LN11@SetInitial

; 194  : 			continue;

	jmp	SHORT $LN13@SetInitial
$LN11@SetInitial:

; 195  : 		if (strncmp(token,"#SET_EVENT",10)==0)

	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@KJAOIJIF@?$CDSET_EVENT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@SetInitial

; 196  : 			{
; 197  : 			char	*sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$3[ebp], eax

; 198  : 			int		i = 0;

	mov	DWORD PTR _i$2[ebp], 0

; 199  : 			if (sptr)

	cmp	DWORD PTR _sptr$3[ebp], 0
	je	SHORT $LN9@SetInitial

; 200  : 				sptr++;

	mov	edx, DWORD PTR _sptr$3[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$3[ebp], edx
$LN9@SetInitial:

; 201  : 			i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$3[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$2[ebp], eax

; 202  : 			CampEvents[i]->SetEvent(1);

	push	1
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	ecx, DWORD PTR [edx+ecx*4]
	call	?SetEvent@EventClass@@QAEXH@Z		; EventClass::SetEvent
	jmp	$LN8@SetInitial
$LN10@SetInitial:

; 203  : 			}
; 204  : 		else if (strncmp(token,"#RESET_EVENT",10)==0)

	push	10					; 0000000aH
	push	OFFSET ??_C@_0N@KLGIMBDI@?$CDRESET_EVENT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@SetInitial

; 205  : 			{
; 206  : 			char	*sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$4[ebp], eax

; 207  : 			int		i = 0;

	mov	DWORD PTR _i$1[ebp], 0

; 208  : 			if (sptr)

	cmp	DWORD PTR _sptr$4[ebp], 0
	je	SHORT $LN6@SetInitial

; 209  : 				sptr++;

	mov	edx, DWORD PTR _sptr$4[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$4[ebp], edx
$LN6@SetInitial:

; 210  : 			i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$4[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$1[ebp], eax

; 211  : 			CampEvents[i]->SetEvent(0);

	push	0
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	ecx, DWORD PTR [edx+ecx*4]
	call	?SetEvent@EventClass@@QAEXH@Z		; EventClass::SetEvent
	jmp	SHORT $LN8@SetInitial
$LN7@SetInitial:

; 212  : 			}
; 213  : 		else if (strncmp(token,"#SET_TEMPO",10)==0)

	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@DMPONIOG@?$CDSET_TEMPO?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@SetInitial
	jmp	SHORT $LN8@SetInitial
$LN4@SetInitial:

; 214  : 			{
; 215  : /*			char	*sptr;
; 216  : 			if (sptr = strchr(token,' '))
; 217  : 				sptr++;
; 218  : 			TheCampaign.Tempo = atoi (sptr);
; 219  : */
; 220  : 			}
; 221  : 		else if (strncmp(token,"#CHANGE_PRIORITIES",18)==0)

	push	18					; 00000012H
	push	OFFSET ??_C@_0BD@DBFJINKE@?$CDCHANGE_PRIORITIES?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
$LN8@SetInitial:

; 222  : 			{
; 223  : /*			char	*sptr;
; 224  : 			int		team,i;
; 225  : 			if (sptr = strchr(token,' '))
; 226  : 				sptr++;
; 227  : 			team = atoi(sptr);
; 228  : 			if (sptr = strchr(sptr,' '))
; 229  : 				sptr++;
; 230  : 			i = atoi(sptr);
; 231  : 			if (TeamInfo[team])
; 232  : 				TeamInfo[team]->ReadPriorityFile(i);
; 233  : */
; 234  : 			}
; 235  : 		if (strcmp(token,"#ENDINIT")==0)

	push	OFFSET ??_C@_08MMLOOEMJ@?$CDENDINIT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@SetInitial

; 236  : 			done = 1;

	mov	DWORD PTR _done$[ebp], 1
$LN1@SetInitial:

; 237  : 		}

	jmp	$LN13@SetInitial
$LN12@SetInitial:

; 238  : 	CloseCampFile(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4
$LN15@SetInitial:

; 239  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetInitialEvents@@YAXPAD@Z ENDP			; SetInitialEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
$T1 = -148						; size = 4
$T2 = -144						; size = 4
_done$ = -140						; size = 4
_sptr$3 = -136						; size = 4
_fp$ = -132						; size = 4
_token$ = -128						; size = 121
__$ArrayPad$ = -4					; size = 4
_scenario$ = 8						; size = 4
?ReadNumberOfEvents@@YAHPAD@Z PROC			; ReadNumberOfEvents

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 152  : 	char		token[121];
; 153  : 	int			done=0;

	mov	DWORD PTR _done$[ebp], 0

; 154  : 	FILE		*fp;
; 155  : 
; 156  : 	CE_Events = 0;

	xor	eax, eax
	mov	WORD PTR ?CE_Events@@3FA, ax		; CE_Events

; 157  : 	if ((fp = OpenCampFile(scenario,"tri","r")) == NULL)

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_03NJKMHLPI@tri?$AA@
	mov	ecx, DWORD PTR _scenario$[ebp]
	push	ecx
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN6@ReadNumber

; 158  : 		return 0;

	xor	eax, eax
	jmp	$LN8@ReadNumber
$LN6@ReadNumber:

; 159  : 	while (!done)

	cmp	DWORD PTR _done$[ebp], 0
	jne	$LN5@ReadNumber

; 160  : 	{
; 161  : 		ReadComments(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	?ReadComments@@YAXPAU_iobuf@@@Z		; ReadComments
	add	esp, 4

; 162  : 		ReadToken(fp,token,120);

	push	120					; 00000078H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?ReadToken@@YAPADPAU_iobuf@@QADH@Z	; ReadToken
	add	esp, 12					; 0000000cH

; 163  : 		if (!token[0])

	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _token$[ebp+edx]
	test	eax, eax
	jne	SHORT $LN4@ReadNumber

; 164  : 			continue;

	jmp	SHORT $LN6@ReadNumber
$LN4@ReadNumber:

; 165  : 		if (strncmp(token,"#TOTAL_EVENTS",13)==0){

	push	13					; 0000000dH
	push	OFFSET ??_C@_0O@MECFLMOE@?$CDTOTAL_EVENTS?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@ReadNumber

; 166  : 			char *sptr = strchr(token,' ');

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$3[ebp], eax

; 167  : 			if (sptr)

	cmp	DWORD PTR _sptr$3[ebp], 0
	je	SHORT $LN2@ReadNumber

; 168  : 				sptr++;

	mov	eax, DWORD PTR _sptr$3[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$3[ebp], eax
$LN2@ReadNumber:

; 169  : 			CE_Events = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$3[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	WORD PTR ?CE_Events@@3FA, ax		; CE_Events

; 170  : 			done = 1;

	mov	DWORD PTR _done$[ebp], 1
$LN3@ReadNumber:

; 171  : 		}
; 172  : 	}

	jmp	$LN6@ReadNumber
$LN5@ReadNumber:

; 173  : 	CloseCampFile (fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 174  : 	if (CampEvents != NULL)

	cmp	DWORD PTR ?CampEvents@@3PAPAVEventClass@@A, 0 ; CampEvents
	je	SHORT $LN1@ReadNumber

; 175  : 		delete [] CampEvents;

	mov	eax, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@ReadNumber:

; 176  : 
; 177  : 	CampEvents = new EventClass*[CE_Events];

	movsx	eax, WORD PTR ?CE_Events@@3FA		; CE_Events
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?CampEvents@@3PAPAVEventClass@@A, eax ; CampEvents

; 178  : 	return CE_Events;

	movsx	eax, WORD PTR ?CE_Events@@3FA		; CE_Events
$LN8@ReadNumber:

; 179  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadNumberOfEvents@@YAHPAD@Z ENDP			; ReadNumberOfEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_poit$2 = -324						; size = 12
_amount$3 = -312					; size = 4
$T4 = -308						; size = 4
_initdone$ = -304					; size = 4
tv153 = -300						; size = 4
_to$5 = -296						; size = 4
_ratio$6 = -292						; size = 4
_rel$7 = -288						; size = 4
$T8 = -284						; size = 4
_done$ = -280						; size = 4
_r$9 = -276						; size = 4
tv973 = -272						; size = 4
_f$10 = -268						; size = 4
_pod$11 = -264						; size = 4
_s$12 = -260						; size = 4
tv977 = -256						; size = 4
_controlled$13 = -252					; size = 4
tv689 = -248						; size = 4
_msg$14 = -244						; size = 4
_eol$ = -240						; size = 2
_with$15 = -236						; size = 4
_e$16 = -232						; size = 4
_pod$17 = -228						; size = 4
_ts$18 = -224						; size = 4
_os$19 = -220						; size = 4
_fp$ = -216						; size = 4
_type$20 = -211						; size = 1
_type$21 = -210						; size = 1
_func$22 = -209						; size = 1
_o$ = -208						; size = 4
_opposite$23 = -201					; size = 1
_i$ = -200						; size = 4
_curr_stack$ = -196					; size = 4
_team$ = -189						; size = 1
_sptr$ = -188						; size = 4
_stack_active$ = -184					; size = 40
_token$ = -144						; size = 128
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ReadScriptedTriggerFile@@YAHPAD@Z PROC			; ReadScriptedTriggerFile

; 403  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadScriptedTriggerFile@@YAHPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 312				; 00000138H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 404  : 	FILE*		fp;
; 405  : 	int			i,done=0,initdone=0,curr_stack=0,stack_active[MAX_STACK] = { 1 };

	mov	DWORD PTR _done$[ebp], 0
	mov	DWORD PTR _initdone$[ebp], 0
	mov	DWORD PTR _curr_stack$[ebp], 0
	mov	DWORD PTR _stack_active$[ebp], 1
	xor	eax, eax
	mov	DWORD PTR _stack_active$[ebp+4], eax
	mov	DWORD PTR _stack_active$[ebp+8], eax
	mov	DWORD PTR _stack_active$[ebp+12], eax
	mov	DWORD PTR _stack_active$[ebp+16], eax
	mov	DWORD PTR _stack_active$[ebp+20], eax
	mov	DWORD PTR _stack_active$[ebp+24], eax
	mov	DWORD PTR _stack_active$[ebp+28], eax
	mov	DWORD PTR _stack_active$[ebp+32], eax
	mov	DWORD PTR _stack_active$[ebp+36], eax

; 406  : 	char		token[128],*sptr;
; 407  : 	_TCHAR		eol[2] = { '\n', 0 };

	mov	BYTE PTR _eol$[ebp], 10			; 0000000aH
	mov	BYTE PTR _eol$[ebp+1], 0

; 408  : 	Objective	o;
; 409  : 	Team		team;
; 410  : 
; 411  : 	if ((fp = OpenCampFile(filename,"tri","r")) == NULL)

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_03NJKMHLPI@tri?$AA@
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN200@ReadScript

; 412  : 	{
; 413  : 		ShiAssert ( 0 );
; 414  : 		return 0;

	xor	eax, eax
	jmp	$LN201@ReadScript
$LN200@ReadScript:

; 415  : 	}
; 416  : 
; 417  : 	ShiAssert (CE_Events > 0);
; 418  : 
; 419  : 	// Read # of events
; 420  : 	ReadToken(fp,token,120);

	push	120					; 00000078H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?ReadToken@@YAPADPAU_iobuf@@QADH@Z	; ReadToken
	add	esp, 12					; 0000000cH
$LN199@ReadScript:

; 421  : 	
; 422  : 	while (!done)

	cmp	DWORD PTR _done$[ebp], 0
	jne	$LN198@ReadScript

; 423  : 	{
; 424  : 		ReadComments(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?ReadComments@@YAXPAU_iobuf@@@Z		; ReadComments
	add	esp, 4

; 425  : 		ReadToken(fp,token,120);

	push	120					; 00000078H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?ReadToken@@YAPADPAU_iobuf@@QADH@Z	; ReadToken
	add	esp, 12					; 0000000cH

; 426  : 		if (!token[0])

	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _token$[ebp+ecx]
	test	edx, edx
	jne	SHORT $LN197@ReadScript

; 427  : 			continue;

	jmp	SHORT $LN199@ReadScript
$LN197@ReadScript:

; 428  : 
; 429  : 		// Check for still in init section
; 430  : 		if (strcmp(token,"#ENDINIT")==0)

	push	OFFSET ??_C@_08MMLOOEMJ@?$CDENDINIT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN196@ReadScript

; 431  : 			initdone = 1;

	mov	DWORD PTR _initdone$[ebp], 1
	jmp	SHORT $LN195@ReadScript
$LN196@ReadScript:

; 432  : 		else if (strcmp(token,"#ENDSCRIPT")==0)

	push	OFFSET ??_C@_0L@MFEHMJLH@?$CDENDSCRIPT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN195@ReadScript

; 433  : 		{
; 434  : 			done = 1;

	mov	DWORD PTR _done$[ebp], 1

; 435  : 			continue;

	jmp	$LN199@ReadScript
$LN195@ReadScript:

; 436  : 		}
; 437  : 		if (!initdone)

	cmp	DWORD PTR _initdone$[ebp], 0
	jne	SHORT $LN193@ReadScript

; 438  : 			continue;

	jmp	$LN199@ReadScript
$LN193@ReadScript:

; 439  : 
; 440  : 		// Handle standard tokens
; 441  : 		if (strncmp(token,"#IF",3)==0)

	push	3
	push	OFFSET ??_C@_03LFFEHOPP@?$CDIF?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN192@ReadScript

; 442  : 		{
; 443  : 			curr_stack++;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	add	eax, 1
	mov	DWORD PTR _curr_stack$[ebp], eax

; 444  : 			if (!stack_active[curr_stack-1])

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+ecx*4-4], 0
	jne	SHORT $LN191@ReadScript

; 445  : 				stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0

; 446  : 			else

	jmp	SHORT $LN190@ReadScript
$LN191@ReadScript:

; 447  : 				stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN190@ReadScript:
	jmp	$LN189@ReadScript
$LN192@ReadScript:

; 448  : 		}
; 449  : 		else if (strcmp(token,"#ELSE")==0)

	push	OFFSET ??_C@_05GNCADCNB@?$CDELSE?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN188@ReadScript

; 450  : 		{
; 451  : 			if (curr_stack>0 && stack_active[curr_stack-1])

	cmp	DWORD PTR _curr_stack$[ebp], 0
	jle	SHORT $LN187@ReadScript
	mov	edx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+edx*4-4], 0
	je	SHORT $LN187@ReadScript

; 452  : 				stack_active[curr_stack] = !stack_active[curr_stack];

	mov	eax, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+eax*4], 0
	jne	SHORT $LN203@ReadScript
	mov	DWORD PTR tv153[ebp], 1
	jmp	SHORT $LN204@ReadScript
$LN203@ReadScript:
	mov	DWORD PTR tv153[ebp], 0
$LN204@ReadScript:
	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	edx, DWORD PTR tv153[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], edx
$LN187@ReadScript:

; 453  : 			continue;

	jmp	$LN199@ReadScript
	jmp	SHORT $LN189@ReadScript
$LN188@ReadScript:

; 454  : 		}
; 455  : 		else if (strcmp(token,"#ENDIF")==0)

	push	OFFSET ??_C@_06OJIOOPNB@?$CDENDIF?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN189@ReadScript

; 456  : 		{
; 457  : 			if (!curr_stack)

	cmp	DWORD PTR _curr_stack$[ebp], 0
	jne	SHORT $LN184@ReadScript

; 458  : 				MonoPrint("<script reading Error - unmatched #ENDIF>\n");

	push	OFFSET ??_C@_0CL@PPFAPJKP@?$DMscript?5reading?5Error?5?9?5unmatche@
	call	_MonoPrint
	add	esp, 4

; 459  : 			else

	jmp	SHORT $LN183@ReadScript
$LN184@ReadScript:

; 460  : 				curr_stack--;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _curr_stack$[ebp], ecx
$LN183@ReadScript:

; 461  : 			continue;

	jmp	$LN199@ReadScript
$LN189@ReadScript:

; 462  : 		}
; 463  : 
; 464  : 		// Check for section activity
; 465  : 		if (stack_active[curr_stack])

	mov	edx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+edx*4], 0
	je	$LN182@ReadScript

; 466  : 		{
; 467  : 			// This section is active, handle tokens
; 468  : 			if (strncmp(token,"#IF",3)==0)

	push	3
	push	OFFSET ??_C@_03LFFEHOPP@?$CDIF?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN181@ReadScript

; 469  : 			{
; 470  : 				if (curr_stack >= MAX_STACK)

	cmp	DWORD PTR _curr_stack$[ebp], 10		; 0000000aH
	jl	SHORT $LN180@ReadScript

; 471  : 				{
; 472  : 					MonoPrint("<Brief Reading Error - stack overflow. Max stacks = %d",MAX_STACK);

	push	10					; 0000000aH
	push	OFFSET ??_C@_0DH@OMEKCJOK@?$DMBrief?5Reading?5Error?5?9?5stack?5ove@
	call	_MonoPrint
	add	esp, 8

; 473  : 					CloseCampFile(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 474  : 					return 0;

	xor	eax, eax
	jmp	$LN201@ReadScript
$LN180@ReadScript:

; 475  : 					}
; 476  : 				// Add all our if conditions here
; 477  : 				if (strncmp(token,"#IF_EVENT_PLAYED",16)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BB@LMBPDGFN@?$CDIF_EVENT_PLAYED?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN179@ReadScript

; 478  : 				{
; 479  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN178@ReadScript

; 480  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN178@ReadScript:

; 481  : 					i = atoi(sptr);

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 482  : 					if (i > CE_Events || !CampEvents[i]->HasFired())

	movsx	eax, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	DWORD PTR _i$[ebp], eax
	jg	SHORT $LN176@ReadScript
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	ecx, DWORD PTR [edx+ecx*4]
	call	?HasFired@EventClass@@QAEHXZ		; EventClass::HasFired
	test	eax, eax
	jne	SHORT $LN177@ReadScript
$LN176@ReadScript:

; 483  : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0

; 484  : 					else

	jmp	SHORT $LN175@ReadScript
$LN177@ReadScript:

; 485  : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN175@ReadScript:
	jmp	$LN174@ReadScript
$LN179@ReadScript:

; 486  : 				}
; 487  : 				else if (strncmp(token,"#IF_MAIN_TARGET",15)==0)

	push	15					; 0000000fH
	push	OFFSET ??_C@_0BA@LIEABDKJ@?$CDIF_MAIN_TARGET?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN173@ReadScript

; 488  : 				{
; 489  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN172@ReadScript

; 490  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN172@ReadScript:

; 491  : 					if (*sptr == 'F')

	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN171@ReadScript

; 492  : 						team = FalconLocalSession->GetTeam();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	mov	BYTE PTR _team$[ebp], al

; 493  : 					else

	jmp	SHORT $LN170@ReadScript
$LN171@ReadScript:

; 494  : 						team = GetEnemyTeam(FalconLocalSession->GetTeam());

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	push	ecx
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al
$LN170@ReadScript:

; 495  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN169@ReadScript

; 496  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN169@ReadScript:

; 497  : 					i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 498  : 					if (TeamInfo[team]->gtm->priorityObj == i)

	movzx	edx, BYTE PTR _team$[ebp]
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+880]
	movsx	edx, WORD PTR [ecx+250]
	cmp	edx, DWORD PTR _i$[ebp]
	jne	SHORT $LN168@ReadScript

; 499  : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 500  : 					else

	jmp	SHORT $LN167@ReadScript
$LN168@ReadScript:

; 501  : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN167@ReadScript:
	jmp	$LN174@ReadScript
$LN173@ReadScript:

; 502  : 				}
; 503  : 				else if (strncmp(token,"#IF_TROOPS_COMMITTED",20)==0)

	push	20					; 00000014H
	push	OFFSET ??_C@_0BF@NLHADIMP@?$CDIF_TROOPS_COMMITTED?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN165@ReadScript

; 504  : 				{
; 505  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN164@ReadScript

; 506  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN164@ReadScript:

; 507  : 					if (*sptr == 'F')

	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN163@ReadScript

; 508  : 						team = FalconLocalSession->GetTeam();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	mov	BYTE PTR _team$[ebp], al

; 509  : 					else

	jmp	SHORT $LN162@ReadScript
$LN163@ReadScript:

; 510  : 						team = GetEnemyTeam(FalconLocalSession->GetTeam());

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	push	ecx
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al
$LN162@ReadScript:

; 511  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN161@ReadScript

; 512  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN161@ReadScript:

; 513  : 					i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 514  : 					o = (Objective) GetEntityByCampID(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	call	?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z ; GetEntityByCampID
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 515  : 					if (!o)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN160@ReadScript

; 516  : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0

; 517  : 					else

	jmp	SHORT $LN159@ReadScript
$LN160@ReadScript:

; 518  : 					{
; 519  : 						POData	pod = GetPOData(o);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
	add	esp, 4
	mov	DWORD PTR _pod$11[ebp], eax

; 520  : 						if (pod && pod->ground_assigned[team])

	cmp	DWORD PTR _pod$11[ebp], 0
	je	SHORT $LN158@ReadScript
	movzx	edx, BYTE PTR _team$[ebp]
	mov	eax, DWORD PTR _pod$11[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+24]
	test	ecx, ecx
	je	SHORT $LN158@ReadScript

; 521  : 							stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1

; 522  : 						else

	jmp	SHORT $LN159@ReadScript
$LN158@ReadScript:

; 523  : 							stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN159@ReadScript:

; 524  : 					}

	jmp	$LN174@ReadScript
$LN165@ReadScript:

; 525  : 				}
; 526  : 				else if (strncmp(token,"#IF_CONTROLLED",14)==0)

	push	14					; 0000000eH
	push	OFFSET ??_C@_0P@OBKPKOP@?$CDIF_CONTROLLED?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN155@ReadScript

; 527  : 				{
; 528  : 					char	type;
; 529  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN154@ReadScript

; 530  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN154@ReadScript:

; 531  : 					team = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 532  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN153@ReadScript

; 533  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN153@ReadScript:

; 534  : 					type = *sptr;

	mov	ecx, DWORD PTR _sptr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _type$21[ebp], dl

; 535  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN152@ReadScript

; 536  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN152@ReadScript:

; 537  : 					if (type == 'A')

	movsx	edx, BYTE PTR _type$21[ebp]
	cmp	edx, 65					; 00000041H
	jne	$LN151@ReadScript

; 538  : 					{
; 539  : 						// And logic
; 540  : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN150@ReadScript:

; 541  : 						while (stack_active[curr_stack] && sptr && atoi(sptr))

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+ecx*4], 0
	je	$LN149@ReadScript
	cmp	DWORD PTR _sptr$[ebp], 0
	je	$LN149@ReadScript
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	$LN149@ReadScript

; 542  : 						{
; 543  : 							o = (Objective) GetEntityByCampID(atoi(sptr));

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	call	?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z ; GetEntityByCampID
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 544  : 							if (o && o->GetTeam() != team)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN148@ReadScript
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	movzx	edx, BYTE PTR _team$[ebp]
	cmp	ecx, edx
	je	SHORT $LN148@ReadScript

; 545  : 								stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN148@ReadScript:

; 546  : 							if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN147@ReadScript

; 547  : 								sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN147@ReadScript:

; 548  : 						}

	jmp	$LN150@ReadScript
$LN149@ReadScript:

; 549  : 					}
; 550  : 					else

	jmp	$LN146@ReadScript
$LN151@ReadScript:

; 551  : 					{
; 552  : 						// Or logic
; 553  : 						stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0
$LN145@ReadScript:

; 554  : 						while (!stack_active[curr_stack] && sptr && atoi(sptr))

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	cmp	DWORD PTR _stack_active$[ebp+ecx*4], 0
	jne	$LN146@ReadScript
	cmp	DWORD PTR _sptr$[ebp], 0
	je	$LN146@ReadScript
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	$LN146@ReadScript

; 555  : 						{
; 556  : 							o = (Objective) GetEntityByCampID(atoi(sptr));

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	call	?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z ; GetEntityByCampID
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 557  : 							if (o && o->GetTeam() == team)

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN143@ReadScript
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	movzx	edx, BYTE PTR _team$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN143@ReadScript

; 558  : 								stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN143@ReadScript:

; 559  : 							if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN142@ReadScript

; 560  : 								sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN142@ReadScript:

; 561  : 						}

	jmp	$LN145@ReadScript
$LN146@ReadScript:

; 562  : 					}

	jmp	$LN174@ReadScript
$LN155@ReadScript:

; 563  : 				}
; 564  : 				else if (strncmp(token,"#IF_INITIATIVE",14)==0)

	push	14					; 0000000eH
	push	OFFSET ??_C@_0P@FIPAANMB@?$CDIF_INITIATIVE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN140@ReadScript

; 565  : 				{
; 566  : 					stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 567  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN139@ReadScript

; 568  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN139@ReadScript:

; 569  : 					team = *sptr - '0';

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	sub	edx, 48					; 00000030H
	mov	BYTE PTR _team$[ebp], dl

; 570  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN138@ReadScript

; 571  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN138@ReadScript:

; 572  : 					if (*sptr == 'G')

	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN137@ReadScript

; 573  : 					{
; 574  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN136@ReadScript

; 575  : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN136@ReadScript:

; 576  : 						i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 577  : 						if (TeamInfo[team]->GetInitiative() >= i)

	movzx	ecx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetInitiative@TeamClass@@QAEFXZ	; TeamClass::GetInitiative
	movsx	edx, ax
	cmp	edx, DWORD PTR _i$[ebp]
	jl	SHORT $LN135@ReadScript

; 578  : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN135@ReadScript:

; 579  : 					}
; 580  : 					else

	jmp	SHORT $LN134@ReadScript
$LN137@ReadScript:

; 581  : 					{
; 582  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN133@ReadScript

; 583  : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN133@ReadScript:

; 584  : 						i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 585  : 						if (TeamInfo[team]->GetInitiative() <= i)

	movzx	ecx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetInitiative@TeamClass@@QAEFXZ	; TeamClass::GetInitiative
	movsx	edx, ax
	cmp	edx, DWORD PTR _i$[ebp]
	jg	SHORT $LN134@ReadScript

; 586  : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN134@ReadScript:

; 587  : 					}

	jmp	$LN174@ReadScript
$LN140@ReadScript:

; 588  : 				}
; 589  : 				else if (strncmp(token,"#IF_SUPPLY",10)==0)

	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@GHLOCIPG@?$CDIF_SUPPLY?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN130@ReadScript

; 590  : 				{
; 591  : 					stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0

; 592  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN129@ReadScript

; 593  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN129@ReadScript:

; 594  : 					team = *sptr - '0';

	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	sub	eax, 48					; 00000030H
	mov	BYTE PTR _team$[ebp], al

; 595  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN128@ReadScript

; 596  : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN128@ReadScript:

; 597  : 					if (*sptr == 'G')

	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 71					; 00000047H
	jne	SHORT $LN127@ReadScript

; 598  : 					{
; 599  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN126@ReadScript

; 600  : 							sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN126@ReadScript:

; 601  : 						i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 602  : 						if (TeamInfo[team]->GetCurrentStats()->supplyLevel >= i)

	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	eax, BYTE PTR [eax+14]
	cmp	eax, DWORD PTR _i$[ebp]
	jl	SHORT $LN125@ReadScript

; 603  : 							stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN125@ReadScript:

; 604  : 					}
; 605  : 					else

	jmp	SHORT $LN124@ReadScript
$LN127@ReadScript:

; 606  : 					{
; 607  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN123@ReadScript

; 608  : 							sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN123@ReadScript:

; 609  : 						i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 610  : 						if (TeamInfo[team]->GetCurrentStats()->supplyLevel <= i)

	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	eax, BYTE PTR [eax+14]
	cmp	eax, DWORD PTR _i$[ebp]
	jg	SHORT $LN124@ReadScript

; 611  : 							stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN124@ReadScript:

; 612  : 					}

	jmp	$LN174@ReadScript
$LN130@ReadScript:

; 613  : 				}
; 614  : 				else if (strncmp(token,"#IF_PLAYER_DIFFICULTY",21)==0)

	push	21					; 00000015H
	push	OFFSET ??_C@_0BG@PNLONJFN@?$CDIF_PLAYER_DIFFICULTY?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN120@ReadScript

; 615  : 				{
; 616  : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0

; 617  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN119@ReadScript

; 618  : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN119@ReadScript:

; 619  : 					if (*sptr == 'G')

	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 71					; 00000047H
	jne	SHORT $LN118@ReadScript

; 620  : 					{
; 621  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN117@ReadScript

; 622  : 							sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN117@ReadScript:

; 623  : 						i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 624  : 						if (PlayerOptions.CampaignEnemyGroundExperience() >= i)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?CampaignEnemyGroundExperience@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::CampaignEnemyGroundExperience
	cmp	eax, DWORD PTR _i$[ebp]
	jl	SHORT $LN116@ReadScript

; 625  : 							stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN116@ReadScript:

; 626  : 					}
; 627  : 					else

	jmp	SHORT $LN115@ReadScript
$LN118@ReadScript:

; 628  : 					{
; 629  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN114@ReadScript

; 630  : 							sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN114@ReadScript:

; 631  : 						i = atoi(sptr);

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 632  : 						if (PlayerOptions.CampaignEnemyGroundExperience() <= i)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?CampaignEnemyGroundExperience@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::CampaignEnemyGroundExperience
	cmp	eax, DWORD PTR _i$[ebp]
	jg	SHORT $LN115@ReadScript

; 633  : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN115@ReadScript:

; 634  : 					}

	jmp	$LN174@ReadScript
$LN120@ReadScript:

; 635  : 				}
; 636  : 				else if (strncmp(token,"#IF_PRI_CONTROLLED_LT",21)==0)

	push	21					; 00000015H
	push	OFFSET ??_C@_0BG@BGHLMNLB@?$CDIF_PRI_CONTROLLED_LT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN111@ReadScript

; 637  : 				{					
; 638  : 					int	controlled = 0;

	mov	DWORD PTR _controlled$13[ebp], 0

; 639  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN110@ReadScript

; 640  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN110@ReadScript:

; 641  : 					if (*sptr == 'F')

	mov	ecx, DWORD PTR _sptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 70					; 00000046H
	jne	SHORT $LN109@ReadScript

; 642  : 						team = FalconLocalSession->GetTeam();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	mov	BYTE PTR _team$[ebp], al

; 643  : 					else

	jmp	SHORT $LN108@ReadScript
$LN109@ReadScript:

; 644  : 						team = GetEnemyTeam(FalconLocalSession->GetTeam());

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	push	eax
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al
$LN108@ReadScript:

; 645  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN107@ReadScript

; 646  : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN107@ReadScript:

; 647  : 					i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 648  : 					VuListIterator	poit(POList);

	mov	ecx, DWORD PTR ?POList@@3PAVFalconPrivateOrderedList@@A ; POList
	push	ecx
	lea	ecx, DWORD PTR _poit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 649  : 					o = GetFirstObjective(&poit);

	lea	edx, DWORD PTR _poit$2[ebp]
	push	edx
	call	?GetFirstObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetFirstObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
$LN106@ReadScript:

; 650  : 					while (o){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN105@ReadScript

; 651  : 						if (o->GetTeam() == team)

	mov	eax, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	movzx	edx, BYTE PTR _team$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN104@ReadScript

; 652  : 							controlled++;

	mov	eax, DWORD PTR _controlled$13[ebp]
	add	eax, 1
	mov	DWORD PTR _controlled$13[ebp], eax
$LN104@ReadScript:

; 653  : 						o = GetNextObjective(&poit);

	lea	ecx, DWORD PTR _poit$2[ebp]
	push	ecx
	call	?GetNextObjective@@YAPAVObjectiveClass@@PAVVuListIterator@@@Z ; GetNextObjective
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax

; 654  : 					}

	jmp	SHORT $LN106@ReadScript
$LN105@ReadScript:

; 655  : 					if (controlled < i)

	mov	edx, DWORD PTR _controlled$13[ebp]
	cmp	edx, DWORD PTR _i$[ebp]
	jge	SHORT $LN103@ReadScript

; 656  : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 657  : 					else

	jmp	SHORT $LN102@ReadScript
$LN103@ReadScript:

; 658  : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN102@ReadScript:

; 659  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _poit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	$LN174@ReadScript
$LN111@ReadScript:

; 660  : 				else if (strncmp(token,"#IF_ON_OFFENSIVE",16)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BB@PLGBNBII@?$CDIF_ON_OFFENSIVE?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN100@ReadScript

; 661  : 				{
; 662  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN99@ReadScript

; 663  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN99@ReadScript:

; 664  : 					team = atoi(sptr);

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 665  : 					if (TeamInfo[team] && TeamInfo[team]->GetGroundAction() && TeamInfo[team]->GetGroundAction()->actionType == GACTION_OFFENSIVE)

	movzx	eax, BYTE PTR _team$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	je	SHORT $LN98@ReadScript
	movzx	ecx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	test	eax, eax
	je	SHORT $LN98@ReadScript
	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ; TeamClass::GetGroundAction
	movzx	eax, BYTE PTR [eax+16]
	cmp	eax, 4
	jne	SHORT $LN98@ReadScript

; 666  : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1

; 667  : 					else

	jmp	SHORT $LN97@ReadScript
$LN98@ReadScript:

; 668  : 						stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0
$LN97@ReadScript:
	jmp	$LN174@ReadScript
$LN100@ReadScript:

; 669  : 
; 670  : /*					int				offensive_assigned = 0;
; 671  : 					if (sptr = strchr(token,' '))
; 672  : 						sptr++;
; 673  : 					if (*sptr == 'F')
; 674  : 						team = FalconLocalSession->GetTeam();
; 675  : 					else
; 676  : 						team = GetEnemyTeam(FalconLocalSession->GetTeam());
; 677  : 					if (sptr = strchr(sptr,' '))
; 678  : 						sptr++;
; 679  : 					// Check if we have offensive units assigned
; 680  : 					if (TeamInfo[team]->GetGroundAction()->actionType != GACTION_OFFENSIVE)
; 681  : 						stack_active[curr_stack] = 0;
; 682  : 					else
; 683  : 						stack_active[curr_stack] = 1;
; 684  : */
; 685  : 				}
; 686  : 				else if (strncmp(token,"#IF_FORCE_RATIO",15)==0)

	push	15					; 0000000fH
	push	OFFSET ??_C@_0BA@BKFLCPBI@?$CDIF_FORCE_RATIO?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN95@ReadScript

; 687  : 				{
; 688  : 					Team	opposite;
; 689  : 					char	type,func;
; 690  : 					int		os,ts,ratio;
; 691  : 
; 692  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN94@ReadScript

; 693  : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN94@ReadScript:

; 694  : 					type = *sptr;

	mov	eax, DWORD PTR _sptr$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _type$20[ebp], cl

; 695  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN93@ReadScript

; 696  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN93@ReadScript:

; 697  : 					team = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 698  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN92@ReadScript

; 699  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN92@ReadScript:

; 700  : 					opposite = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _opposite$23[ebp], al

; 701  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN91@ReadScript

; 702  : 						sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN91@ReadScript:

; 703  : 					func = *sptr;

	mov	ecx, DWORD PTR _sptr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _func$22[ebp], dl

; 704  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN90@ReadScript

; 705  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN90@ReadScript:

; 706  : 					i = atoi (sptr);

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 707  : 					switch (type)

	mov	al, BYTE PTR _type$20[ebp]
	mov	BYTE PTR tv689[ebp], al
	cmp	BYTE PTR tv689[ebp], 65			; 00000041H
	je	SHORT $LN87@ReadScript
	cmp	BYTE PTR tv689[ebp], 71			; 00000047H
	je	SHORT $LN86@ReadScript
	cmp	BYTE PTR tv689[ebp], 78			; 0000004eH
	je	$LN85@ReadScript
	jmp	$LN84@ReadScript
$LN87@ReadScript:

; 708  : 					{
; 709  : 						case 'A':
; 710  : 							os = TeamInfo[team]->GetCurrentStats()->aircraft;

	movzx	ecx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	edx, WORD PTR [eax+2]
	mov	DWORD PTR _os$19[ebp], edx

; 711  : 							ts = TeamInfo[opposite]->GetCurrentStats()->aircraft;

	movzx	eax, BYTE PTR _opposite$23[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _ts$18[ebp], ecx

; 712  : 							break;

	jmp	$LN88@ReadScript
$LN86@ReadScript:

; 713  : 						case 'G':
; 714  : 							os = TeamInfo[team]->GetCurrentStats()->groundVehs;

	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	eax, WORD PTR [eax+4]
	mov	DWORD PTR _os$19[ebp], eax

; 715  : 							ts = TeamInfo[opposite]->GetCurrentStats()->groundVehs;

	movzx	ecx, BYTE PTR _opposite$23[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	edx, WORD PTR [eax+4]
	mov	DWORD PTR _ts$18[ebp], edx

; 716  : 							break;

	jmp	$LN88@ReadScript
$LN85@ReadScript:

; 717  : 						case 'N':
; 718  : 							os = TeamInfo[team]->GetCurrentStats()->ships;

	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _os$19[ebp], ecx

; 719  : 							ts = TeamInfo[opposite]->GetCurrentStats()->ships;

	movzx	edx, BYTE PTR _opposite$23[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	eax, WORD PTR [eax+6]
	mov	DWORD PTR _ts$18[ebp], eax

; 720  : 							break;

	jmp	SHORT $LN88@ReadScript
$LN84@ReadScript:

; 721  : 						default:
; 722  : 							os = TeamInfo[team]->GetCurrentStats()->groundVehs + TeamInfo[team]->GetCurrentStats()->aircraft;

	movzx	ecx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	esi, WORD PTR [eax+4]
	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	eax, WORD PTR [eax+2]
	add	esi, eax
	mov	DWORD PTR _os$19[ebp], esi

; 723  : 							ts = TeamInfo[opposite]->GetCurrentStats()->groundVehs + TeamInfo[opposite]->GetCurrentStats()->aircraft;

	movzx	ecx, BYTE PTR _opposite$23[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	esi, WORD PTR [eax+4]
	movzx	edx, BYTE PTR _opposite$23[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ; TeamClass::GetCurrentStats
	movzx	eax, WORD PTR [eax+2]
	add	esi, eax
	mov	DWORD PTR _ts$18[ebp], esi
$LN88@ReadScript:

; 724  : 							break;
; 725  : 					}
; 726  : 					ratio = os * 10 / ts;

	mov	eax, DWORD PTR _os$19[ebp]
	imul	eax, 10					; 0000000aH
	cdq
	idiv	DWORD PTR _ts$18[ebp]
	mov	DWORD PTR _ratio$6[ebp], eax

; 727  : 					stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0

; 728  : 					if (func == 'G' && ratio >= i)

	movsx	edx, BYTE PTR _func$22[ebp]
	cmp	edx, 71					; 00000047H
	jne	SHORT $LN83@ReadScript
	mov	eax, DWORD PTR _ratio$6[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jl	SHORT $LN83@ReadScript

; 729  : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
	jmp	SHORT $LN82@ReadScript
$LN83@ReadScript:

; 730  : 					else if (func == 'L' && ratio <= i)

	movsx	edx, BYTE PTR _func$22[ebp]
	cmp	edx, 76					; 0000004cH
	jne	SHORT $LN82@ReadScript
	mov	eax, DWORD PTR _ratio$6[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jg	SHORT $LN82@ReadScript

; 731  : 						stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN82@ReadScript:

; 732  : 				}

	jmp	$LN174@ReadScript
$LN95@ReadScript:

; 733  : 				else if (strncmp(token,"#IF_BORDOM_HOURS",16)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BB@FEOMEOFG@?$CDIF_BORDOM_HOURS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN79@ReadScript

; 734  : 				{
; 735  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN78@ReadScript

; 736  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN78@ReadScript:

; 737  : 					if (((TheCampaign.CurrentTime - TheCampaign.lastMajorEvent) / CampaignHours) > static_cast<CampaignTime>(atoi(sptr)))

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+56
	xor	edx, edx
	mov	ecx, 3600000				; 0036ee80H
	div	ecx
	mov	esi, eax
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	cmp	esi, eax
	jbe	SHORT $LN77@ReadScript

; 738  : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1

; 739  : 					else

	jmp	SHORT $LN76@ReadScript
$LN77@ReadScript:

; 740  : 						stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN76@ReadScript:
	jmp	$LN174@ReadScript
$LN79@ReadScript:

; 741  : 				}
; 742  : 				else if (strncmp(token,"#IF_CAMPAIGN_DAY",16)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BB@NBCKODFF@?$CDIF_CAMPAIGN_DAY?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN74@ReadScript

; 743  : 				{
; 744  : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0

; 745  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN73@ReadScript

; 746  : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN73@ReadScript:

; 747  : 					if (*sptr == 'G')

	mov	eax, DWORD PTR _sptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 71					; 00000047H
	jne	SHORT $LN72@ReadScript

; 748  : 					{
; 749  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN71@ReadScript

; 750  : 							sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN71@ReadScript:

; 751  : 						if (TheCampaign.GetCampaignDay() >= atoi(sptr))

	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?GetCampaignDay@CampaignClass@@QAEHXZ	; CampaignClass::GetCampaignDay
	mov	esi, eax
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LN70@ReadScript

; 752  : 							stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN70@ReadScript:

; 753  : 					}
; 754  : 					else

	jmp	SHORT $LN69@ReadScript
$LN72@ReadScript:

; 755  : 					{
; 756  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN68@ReadScript

; 757  : 							sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN68@ReadScript:

; 758  : 						if (TheCampaign.GetCampaignDay() <= atoi(sptr))

	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?GetCampaignDay@CampaignClass@@QAEHXZ	; CampaignClass::GetCampaignDay
	mov	esi, eax
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	cmp	esi, eax
	jg	SHORT $LN69@ReadScript

; 759  : 							stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN69@ReadScript:

; 760  : 					}

	jmp	$LN174@ReadScript
$LN74@ReadScript:

; 761  : 				}
; 762  : 				else if (strncmp(token,"#IF_REINFORCEMENT",16)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BC@PMJJCJKE@?$CDIF_REINFORCEMENT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN65@ReadScript

; 763  : 				{
; 764  : 					stack_active[curr_stack] = 0;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 0

; 765  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN64@ReadScript

; 766  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN64@ReadScript:

; 767  : 					team = atoi(sptr);

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 768  : 					if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN63@ReadScript

; 769  : 						sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN63@ReadScript:

; 770  : 					if (*sptr == 'G')

	mov	edx, DWORD PTR _sptr$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN62@ReadScript

; 771  : 					{
; 772  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN61@ReadScript

; 773  : 							sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN61@ReadScript:

; 774  : 						if (TeamInfo[team]->GetReinforcement() >= atoi(sptr))

	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetReinforcement@TeamClass@@QAEFXZ	; TeamClass::GetReinforcement
	movsx	esi, ax
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LN60@ReadScript

; 775  : 							stack_active[curr_stack] = 1;

	mov	edx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+edx*4], 1
$LN60@ReadScript:

; 776  : 					}
; 777  : 					else

	jmp	SHORT $LN59@ReadScript
$LN62@ReadScript:

; 778  : 					{
; 779  : 						if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN58@ReadScript

; 780  : 							sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN58@ReadScript:

; 781  : 						if (TeamInfo[team]->GetReinforcement() <= atoi(sptr))

	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetReinforcement@TeamClass@@QAEFXZ	; TeamClass::GetReinforcement
	movsx	esi, ax
	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	cmp	esi, eax
	jg	SHORT $LN59@ReadScript

; 782  : 							stack_active[curr_stack] = 1;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 1
$LN59@ReadScript:

; 783  : 					}

	jmp	$LN174@ReadScript
$LN65@ReadScript:

; 784  : 				}
; 785  : 				else if (strncmp(token,"#IF_RANDOM_CHANCE",16)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BC@BGJPCNDJ@?$CDIF_RANDOM_CHANCE?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN55@ReadScript

; 786  : 				{
; 787  : 					stack_active[curr_stack] = 0;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 0

; 788  : 					if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN54@ReadScript

; 789  : 						sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN54@ReadScript:

; 790  : 					if ((rand()%100) < atoi(sptr))

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	esi, edx
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	cmp	esi, eax
	jge	SHORT $LN53@ReadScript

; 791  : 						stack_active[curr_stack] = 1;

	mov	eax, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+eax*4], 1
$LN53@ReadScript:

; 792  : 				}
; 793  : 				else

	jmp	SHORT $LN174@ReadScript
$LN55@ReadScript:

; 794  : 					stack_active[curr_stack] = 0;

	mov	ecx, DWORD PTR _curr_stack$[ebp]
	mov	DWORD PTR _stack_active$[ebp+ecx*4], 0
$LN174@ReadScript:

; 795  : 				continue;

	jmp	$LN199@ReadScript
$LN181@ReadScript:

; 796  : 			}
; 797  : 
; 798  : 			// special tokens
; 799  : 			if (strncmp(token,"#PLAY_MOVIE",11)==0)

	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@DEOGOHDO@?$CDPLAY_MOVIE?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN51@ReadScript

; 800  : 				{
; 801  : //				_TCHAR					str[128] = {0};
; 802  : 				CampEventDataMessage	*msg = new CampEventDataMessage(vuLocalSession,FalconLocalGame);

	push	55					; 00000037H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN207@ReadScript
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN205@ReadScript
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv973[ebp], eax
	jmp	SHORT $LN206@ReadScript
$LN205@ReadScript:
	mov	DWORD PTR tv973[ebp], 0
$LN206@ReadScript:
	push	1
	mov	ecx, DWORD PTR tv973[ebp]
	push	ecx
	mov	edx, DWORD PTR ?vuLocalSession@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?vuLocalSession@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0CampEventDataMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; CampEventDataMessage::CampEventDataMessage
	mov	DWORD PTR tv977[ebp], eax
	jmp	SHORT $LN208@ReadScript
$LN207@ReadScript:
	mov	DWORD PTR tv977[ebp], 0
$LN208@ReadScript:
	mov	ecx, DWORD PTR tv977[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _msg$14[ebp], edx

; 803  : 
; 804  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN50@ReadScript

; 805  : 					sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN50@ReadScript:

; 806  : 				i = atoi(sptr);

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 807  : 				// queue movie
; 808  : //				AddIndexedStringToBuffer(1160+i-100,str);
; 809  : //				UI_AddMovieToList(i,TheCampaign.CurrentTime,str);
; 810  : 				msg->dataBlock.message = CampEventDataMessage::playMovie;

	mov	eax, DWORD PTR _msg$14[ebp]
	mov	DWORD PTR [eax+48], 2

; 811  : 				msg->dataBlock.event = i;

	mov	ecx, DWORD PTR _msg$14[ebp]
	mov	dx, WORD PTR _i$[ebp]
	mov	WORD PTR [ecx+52], dx

; 812  : 				FalconSendMessage(msg,TRUE);

	push	1
	mov	eax, DWORD PTR _msg$14[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 813  : 				continue;

	jmp	$LN199@ReadScript
	jmp	$LN182@ReadScript
$LN51@ReadScript:

; 814  : 			}
; 815  : 			else if (strncmp(token,"#CHANGE_RELATIONS",17)==0)

	push	17					; 00000011H
	push	OFFSET ??_C@_0BC@FJHMFBIN@?$CDCHANGE_RELATIONS?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN48@ReadScript

; 816  : 			{
; 817  : 				int	with,rel;
; 818  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN47@ReadScript

; 819  : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN47@ReadScript:

; 820  : 				team = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 821  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN46@ReadScript

; 822  : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN46@ReadScript:

; 823  : 				with = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _with$15[ebp], eax

; 824  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN45@ReadScript

; 825  : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN45@ReadScript:

; 826  : 				rel = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _rel$7[ebp], eax

; 827  : 				if (TeamInfo[team] && TeamInfo[with])

	movzx	edx, BYTE PTR _team$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4], 0
	je	SHORT $LN44@ReadScript
	mov	eax, DWORD PTR _with$15[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4], 0
	je	SHORT $LN44@ReadScript

; 828  : 				{
; 829  : 					SetTTRelations(team,with,rel);

	mov	ecx, DWORD PTR _rel$7[ebp]
	push	ecx
	movzx	edx, BYTE PTR _with$15[ebp]
	push	edx
	movzx	eax, BYTE PTR _team$[ebp]
	push	eax
	call	?SetTTRelations@@YAXEEH@Z		; SetTTRelations
	add	esp, 12					; 0000000cH

; 830  : 					if (rel == Allied)

	cmp	DWORD PTR _rel$7[ebp], 1
	jne	SHORT $LN44@ReadScript

; 831  : 					{
; 832  : 						SetTeam (team,with);

	mov	ecx, DWORD PTR _with$15[ebp]
	push	ecx
	movzx	edx, BYTE PTR _team$[ebp]
	push	edx
	call	?SetTeam@@YAXEH@Z			; SetTeam
	add	esp, 8

; 833  : 						TeamInfo[team]->flags &= ~TEAM_ACTIVE;

	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	movsx	edx, WORD PTR [ecx+350]
	and	edx, -2					; fffffffeH
	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	mov	WORD PTR [ecx+350], dx
$LN44@ReadScript:

; 834  : 					}
; 835  : 				}
; 836  : 			}

	jmp	$LN182@ReadScript
$LN48@ReadScript:

; 837  : 			else if (strncmp(token,"#DO_EVENT",9)==0)

	push	9
	push	OFFSET ??_C@_09POJOAFGP@?$CDDO_EVENT?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN41@ReadScript

; 838  : 			{
; 839  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN40@ReadScript

; 840  : 					sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx
$LN40@ReadScript:

; 841  : 				i = atoi(sptr);

	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 842  : 				if (i < CE_Events && i > 0)

	movsx	eax, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN39@ReadScript
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN39@ReadScript

; 843  : 					CampEvents[i]->DoEvent();

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	ecx, DWORD PTR [edx+ecx*4]
	call	?DoEvent@EventClass@@QAEXXZ		; EventClass::DoEvent
$LN39@ReadScript:

; 844  : 				continue;

	jmp	$LN199@ReadScript
	jmp	$LN182@ReadScript
$LN41@ReadScript:

; 845  : 			}
; 846  : 			else if (strncmp(token,"#SHIFT_INITIATIVE",16)==0)

	push	16					; 00000010H
	push	OFFSET ??_C@_0BC@LMOGPFBD@?$CDSHIFT_INITIATIVE?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN37@ReadScript

; 847  : 			{
; 848  : 				int	to,amount;
; 849  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN36@ReadScript

; 850  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN36@ReadScript:

; 851  : 				team = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 852  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN35@ReadScript

; 853  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN35@ReadScript:

; 854  : 				to = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _to$5[ebp], eax

; 855  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN34@ReadScript

; 856  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN34@ReadScript:

; 857  : 				amount = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _amount$3[ebp], eax

; 858  : 				if (TeamInfo[team] && TeamInfo[to])

	movzx	ecx, BYTE PTR _team$[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4], 0
	je	SHORT $LN33@ReadScript
	mov	edx, DWORD PTR _to$5[ebp]
	cmp	DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4], 0
	je	SHORT $LN33@ReadScript

; 859  : 					TransferInitiative (team, to, amount);				

	mov	eax, DWORD PTR _amount$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _to$5[ebp]
	push	ecx
	movzx	edx, BYTE PTR _team$[ebp]
	push	edx
	call	?TransferInitiative@@YAXEEH@Z		; TransferInitiative
	add	esp, 12					; 0000000cH
$LN33@ReadScript:

; 860  : 				continue;

	jmp	$LN199@ReadScript
	jmp	$LN182@ReadScript
$LN37@ReadScript:

; 861  : 			}
; 862  : 			else if (strncmp(token,"#RESET_EVENT",12)==0)

	push	12					; 0000000cH
	push	OFFSET ??_C@_0N@KLGIMBDI@?$CDRESET_EVENT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN31@ReadScript

; 863  : 			{
; 864  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN30@ReadScript

; 865  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN30@ReadScript:

; 866  : 				i = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 867  : 				if (i < CE_Events && i > 0)

	movsx	ecx, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN29@ReadScript
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN29@ReadScript

; 868  : 					CampEvents[i]->SetEvent(0);

	push	0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	ecx, DWORD PTR [eax+edx*4]
	call	?SetEvent@EventClass@@QAEXH@Z		; EventClass::SetEvent
$LN29@ReadScript:

; 869  : 				continue;

	jmp	$LN199@ReadScript
	jmp	$LN182@ReadScript
$LN31@ReadScript:

; 870  : 			}
; 871  : 			else if (strncmp(token,"#END_GAME",9)==0)

	push	9
	push	OFFSET ??_C@_09GBKGEMFH@?$CDEND_GAME?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN27@ReadScript

; 872  : 			{
; 873  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN26@ReadScript

; 874  : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN26@ReadScript:

; 875  : 				// Post the campaign over message
; 876  : 				PostMessage(FalconDisplay.appWin,FM_CAMPAIGN_OVER,atoi(sptr),1); 

	push	1
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	push	1043					; 00000413H
	mov	edx, DWORD PTR ?FalconDisplay@@3VFalconDisplayConfiguration@@A+108
	push	edx
	call	DWORD PTR __imp__PostMessageA@16

; 877  : 				continue;

	jmp	$LN199@ReadScript
	jmp	$LN182@ReadScript
$LN27@ReadScript:

; 878  : 			}
; 879  : 			else if (strcmp(token,"#RESET_BORDOM_TIMEOUT")==0)

	push	OFFSET ??_C@_0BG@IHEEDMFM@?$CDRESET_BORDOM_TIMEOUT?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN24@ReadScript

; 880  : 			{
; 881  : 				TheCampaign.lastMajorEvent = TheCampaign.CurrentTime;

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR ?TheCampaign@@3VCampaignClass@@A+56, ecx

; 882  : 				continue;

	jmp	$LN199@ReadScript
	jmp	$LN182@ReadScript
$LN24@ReadScript:

; 883  : 			}
; 884  : 			else if (strncmp(token,"#CHANGE_PRIORITIES",18)==0)

	push	18					; 00000012H
	push	OFFSET ??_C@_0BD@DBFJINKE@?$CDCHANGE_PRIORITIES?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN22@ReadScript
	jmp	$LN182@ReadScript
$LN22@ReadScript:

; 885  : 			{
; 886  : /*				if (sptr = strchr(token,' '))
; 887  : 					sptr++;
; 888  : 				team = atoi(sptr);
; 889  : 				if (sptr = strchr(sptr,' '))
; 890  : 					sptr++;
; 891  : 				i = atoi(sptr);
; 892  : 				if (TeamInfo[team])
; 893  : 					TeamInfo[team]->ReadPriorityFile(i);
; 894  : */
; 895  : 			}
; 896  : 			else if (strncmp(token,"#SET_MINIMUM_SUPPLIES",18)==0)

	push	18					; 00000012H
	push	OFFSET ??_C@_0BG@HDJBAMDG@?$CDSET_MINIMUM_SUPPLIES?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN20@ReadScript

; 897  : 			{
; 898  : 				int		s,f,r;
; 899  : 
; 900  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN19@ReadScript

; 901  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN19@ReadScript:

; 902  : 				team = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 903  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN18@ReadScript

; 904  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN18@ReadScript:

; 905  : 				s = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _s$12[ebp], eax

; 906  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN17@ReadScript

; 907  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN17@ReadScript:

; 908  : 				f = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _f$10[ebp], eax

; 909  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN16@ReadScript

; 910  : 					sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
$LN16@ReadScript:

; 911  : 				r = atoi(sptr);

	mov	eax, DWORD PTR _sptr$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _r$9[ebp], eax

; 912  : 				if (TeamInfo[team]->GetSupplyAvail() < s)

	movzx	ecx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetSupplyAvail@TeamClass@@QAEGXZ	; TeamClass::GetSupplyAvail
	movzx	edx, ax
	cmp	edx, DWORD PTR _s$12[ebp]
	jge	SHORT $LN15@ReadScript

; 913  : 					TeamInfo[team]->SetSupplyAvail(s);

	mov	eax, DWORD PTR _s$12[ebp]
	push	eax
	movzx	ecx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?SetSupplyAvail@TeamClass@@QAEXH@Z	; TeamClass::SetSupplyAvail
$LN15@ReadScript:

; 914  : 				if (TeamInfo[team]->GetFuelAvail() < f)

	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?GetFuelAvail@TeamClass@@QAEGXZ		; TeamClass::GetFuelAvail
	movzx	eax, ax
	cmp	eax, DWORD PTR _f$10[ebp]
	jge	SHORT $LN14@ReadScript

; 915  : 					TeamInfo[team]->SetFuelAvail(f);

	mov	ecx, DWORD PTR _f$10[ebp]
	push	ecx
	movzx	edx, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	call	?SetFuelAvail@TeamClass@@QAEXH@Z	; TeamClass::SetFuelAvail
$LN14@ReadScript:

; 916  : 				if (TeamInfo[team]->GetReplacementsAvail() < r)

	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetReplacementsAvail@TeamClass@@QAEGXZ	; TeamClass::GetReplacementsAvail
	movzx	ecx, ax
	cmp	ecx, DWORD PTR _r$9[ebp]
	jge	SHORT $LN13@ReadScript

; 917  : 					TeamInfo[team]->SetReplacementsAvail(r);

	mov	edx, DWORD PTR _r$9[ebp]
	push	edx
	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?SetReplacementsAvail@TeamClass@@QAEXH@Z ; TeamClass::SetReplacementsAvail
$LN13@ReadScript:

; 918  : 			}

	jmp	$LN182@ReadScript
$LN20@ReadScript:

; 919  : 			else if (strncmp(token,"#SET_PAK_PRIORITY",17)==0)

	push	17					; 00000011H
	push	OFFSET ??_C@_0BC@OGABHOAI@?$CDSET_PAK_PRIORITY?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN11@ReadScript

; 920  : 			{
; 921  : 				CampEntity	e;
; 922  : 				POData		pod;
; 923  : 				if (sptr = strchr(token,' '))

	push	32					; 00000020H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN10@ReadScript

; 924  : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN10@ReadScript:

; 925  : 				team = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _team$[ebp], al

; 926  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN9@ReadScript

; 927  : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN9@ReadScript:

; 928  : 				e = (CampEntity) GetEntityByCampID(atoi(sptr));

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	call	?GetEntityByCampID@@YAPAVCampBaseClass@@H@Z ; GetEntityByCampID
	add	esp, 4
	mov	DWORD PTR _e$16[ebp], eax

; 929  : 				if (sptr = strchr(sptr,' '))

	push	32					; 00000020H
	mov	edx, DWORD PTR _sptr$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _sptr$[ebp], eax
	cmp	DWORD PTR _sptr$[ebp], 0
	je	SHORT $LN8@ReadScript

; 930  : 					sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN8@ReadScript:

; 931  : 				i = atoi(sptr);

	mov	ecx, DWORD PTR _sptr$[ebp]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 932  : 				if (e && e->IsObjective())

	cmp	DWORD PTR _e$16[ebp], 0
	je	SHORT $LN7@ReadScript
	mov	edx, DWORD PTR _e$16[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$16[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN7@ReadScript

; 933  : 				{
; 934  : 					pod = GetPOData((Objective)e);

	mov	eax, DWORD PTR _e$16[ebp]
	push	eax
	call	?GetPOData@@YAPAUPrimaryObjectiveData@@PAVObjectiveClass@@@Z ; GetPOData
	add	esp, 4
	mov	DWORD PTR _pod$17[ebp], eax

; 935  : #ifdef DEBUG
; 936  : 					ShiAssert(pod);
; 937  : 					if (!pod)
; 938  : 						continue;
; 939  : #endif
; 940  : 					pod->ground_priority[team] = pod->air_priority[team] = i;

	movzx	ecx, BYTE PTR _team$[ebp]
	mov	edx, DWORD PTR _pod$17[ebp]
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR [edx+ecx*2+40], ax
	movzx	ecx, BYTE PTR _team$[ebp]
	mov	edx, DWORD PTR _pod$17[ebp]
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR [edx+ecx*2+8], ax

; 941  : 					// KCK: player_priority only used now if >= 0
; 942  : //					if (!(pod->flags & GTMOBJ_PLAYER_SET_PRIORITY))
; 943  : //						pod->player_priority[team] =  i;
; 944  : 					pod->flags |= GTMOBJ_SCRIPTED_PRIORITY;

	mov	ecx, DWORD PTR _pod$17[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	or	edx, 2
	mov	eax, DWORD PTR _pod$17[ebp]
	mov	BYTE PTR [eax+72], dl
$LN7@ReadScript:

; 945  : 				}
; 946  : 			}

	jmp	SHORT $LN182@ReadScript
$LN11@ReadScript:

; 947  : 			else if (strncmp(token,"#SET_TEMPO",10)==0)

	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@DMPONIOG@?$CDSET_TEMPO?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@ReadScript
	jmp	SHORT $LN182@ReadScript
$LN5@ReadScript:

; 948  : 			{
; 949  : /*				if (sptr = strchr(token,' '))
; 950  : 					sptr++;
; 951  : 				TheCampaign.Tempo = atoi (sptr);
; 952  : */
; 953  : 			}
; 954  : 			else if (strncmp(token,"#TOTAL_EVENTS",13)==0 || strncmp(token,"#SET",4)==0 || strcmp(token,"#ENDINIT")==0)

	push	13					; 0000000dH
	push	OFFSET ??_C@_0O@MECFLMOE@?$CDTOTAL_EVENTS?$AA@
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@ReadScript
	push	4
	push	OFFSET ??_C@_04MOICCKAB@?$CDSET?$AA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@ReadScript
	push	OFFSET ??_C@_08MMLOOEMJ@?$CDENDINIT?$AA@
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@ReadScript
$LN2@ReadScript:

; 955  : 			{
; 956  : 				// KCK: For initialization only.
; 957  : 			}
; 958  : 			else

	jmp	SHORT $LN182@ReadScript
$LN3@ReadScript:

; 959  : 			{
; 960  : 				MonoPrint("CampEvent.cpp: Unrecognized token: %s\n",token);

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@PNPALBIM@CampEvent?4cpp?3?5Unrecognized?5toke@
	call	_MonoPrint
	add	esp, 8
$LN182@ReadScript:

; 961  : 			}
; 962  : 			// End active stack section
; 963  : 		}
; 964  : 		// End token handler
; 965  : 	}

	jmp	$LN199@ReadScript
$LN198@ReadScript:

; 966  : 	CloseCampFile(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 967  : 	return 1;

	mov	eax, 1
$LN201@ReadScript:

; 968  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadScriptedTriggerFile@@YAHPAD@Z$0:
	lea	ecx, DWORD PTR _poit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?ReadScriptedTriggerFile@@YAHPAD@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReadScriptedTriggerFile@@YAHPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadScriptedTriggerFile@@YAHPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadScriptedTriggerFile@@YAHPAD@Z ENDP			; ReadScriptedTriggerFile
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?CampaignEnemyGroundExperience@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CampaignEnemyGroundExperience@PlayerOptionsClass@@QAEHXZ PROC ; PlayerOptionsClass::CampaignEnemyGroundExperience, COMDAT
; _this$ = ecx

; 173  : 	int CampaignEnemyGroundExperience (void)				{ return CampEnemyGroundExperience; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+108]
	mov	esp, ebp
	pop	ebp
	ret	0
?CampaignEnemyGroundExperience@PlayerOptionsClass@@QAEHXZ ENDP ; PlayerOptionsClass::CampaignEnemyGroundExperience
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ PROC ; TeamClass::GetGroundAction, COMDAT
; _this$ = ecx

; 277  : 	TeamGndActionType *GetGroundAction (void) { return &groundAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 267				; 0000010bH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroundAction@TeamClass@@QAEPAUTeamGndActionType@@XZ ENDP ; TeamClass::GetGroundAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ PROC ; TeamClass::GetCurrentStats, COMDAT
; _this$ = ecx

; 276  : 	TeamStatusType *GetCurrentStats (void) { return &currentStats; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentStats@TeamClass@@QAEPAUTeamStatusType@@XZ ENDP ; TeamClass::GetCurrentStats
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetReinforcement@TeamClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReinforcement@TeamClass@@QAEFXZ PROC		; TeamClass::GetReinforcement, COMDAT
; _this$ = ecx

; 272  : 	short GetReinforcement (void) { return reinforcement; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReinforcement@TeamClass@@QAEFXZ ENDP		; TeamClass::GetReinforcement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetReplacementsAvail@TeamClass@@QAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReplacementsAvail@TeamClass@@QAEGXZ PROC		; TeamClass::GetReplacementsAvail, COMDAT
; _this$ = ecx

; 271  : 	ushort GetReplacementsAvail (void) { return replacementsAvail; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+150]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReplacementsAvail@TeamClass@@QAEGXZ ENDP		; TeamClass::GetReplacementsAvail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetFuelAvail@TeamClass@@QAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFuelAvail@TeamClass@@QAEGXZ PROC			; TeamClass::GetFuelAvail, COMDAT
; _this$ = ecx

; 270  : 	ushort GetFuelAvail (void) { return fuelAvail; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFuelAvail@TeamClass@@QAEGXZ ENDP			; TeamClass::GetFuelAvail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetSupplyAvail@TeamClass@@QAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSupplyAvail@TeamClass@@QAEGXZ PROC			; TeamClass::GetSupplyAvail, COMDAT
; _this$ = ecx

; 269  : 	ushort GetSupplyAvail (void) { return supplyAvail; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+146]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSupplyAvail@TeamClass@@QAEGXZ ENDP			; TeamClass::GetSupplyAvail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetInitiative@TeamClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInitiative@TeamClass@@QAEFXZ PROC			; TeamClass::GetInitiative, COMDAT
; _this$ = ecx

; 268  : 	short GetInitiative (void) { return initiative; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+144]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInitiative@TeamClass@@QAEFXZ ENDP			; TeamClass::GetInitiative
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
tv76 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_i$ = -4						; size = 4
?DisposeCampaignEvents@@YAXXZ PROC			; DisposeCampaignEvents

; 373  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 374  : 	int			i;
; 375  : 
; 376  : 	if (!CampEvents || !CE_Events)

	cmp	DWORD PTR ?CampEvents@@3PAPAVEventClass@@A, 0 ; CampEvents
	je	SHORT $LN4@DisposeCam
	movsx	eax, WORD PTR ?CE_Events@@3FA		; CE_Events
	test	eax, eax
	jne	SHORT $LN5@DisposeCam
$LN4@DisposeCam:

; 377  : 		return;

	jmp	SHORT $LN6@DisposeCam
$LN5@DisposeCam:

; 378  : 	for (i=0; i<CE_Events; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DisposeCam
$LN2@DisposeCam:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@DisposeCam:
	movsx	edx, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN1@DisposeCam

; 379  : 		delete CampEvents[i];;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN8@DisposeCam
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GEventClass@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN9@DisposeCam
$LN8@DisposeCam:
	mov	DWORD PTR tv76[ebp], 0
$LN9@DisposeCam:
	jmp	SHORT $LN2@DisposeCam
$LN1@DisposeCam:

; 380  : 	delete [] CampEvents;

	mov	ecx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 381  : 	CampEvents = NULL;

	mov	DWORD PTR ?CampEvents@@3PAPAVEventClass@@A, 0 ; CampEvents
$LN6@DisposeCam:

; 382  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DisposeCampaignEvents@@YAXXZ ENDP			; DisposeCampaignEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
?SaveCampaignEvents@@YAHPAD@Z PROC			; SaveCampaignEvents

; 351  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 352  : 	FILE*		fp;
; 353  : 	int			i;
; 354  : 
; 355  : 	if ((fp = OpenCampFile (filename, "evt", "wb")) == NULL)

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	push	OFFSET ??_C@_03MJGMIPMC@evt?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN6@SaveCampai

; 356  : 		return 0;

	xor	eax, eax
	jmp	$LN7@SaveCampai
$LN6@SaveCampai:

; 357  : 	if (CampEvents)

	cmp	DWORD PTR ?CampEvents@@3PAPAVEventClass@@A, 0 ; CampEvents
	je	SHORT $LN5@SaveCampai

; 358  : 	{
; 359  : 		fwrite(&CE_Events,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	push	OFFSET ?CE_Events@@3FA			; CE_Events
	call	_fwrite
	add	esp, 16					; 00000010H

; 360  : 		for (i=0; i<CE_Events; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SaveCampai
$LN3@SaveCampai:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@SaveCampai:
	movsx	eax, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@SaveCampai

; 361  : 			CampEvents[i]->Save(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	ecx, DWORD PTR [eax+edx*4]
	call	?Save@EventClass@@QAEHPAU_iobuf@@@Z	; EventClass::Save
	jmp	SHORT $LN3@SaveCampai
$LN2@SaveCampai:

; 362  : 	}
; 363  : 	else

	jmp	SHORT $LN1@SaveCampai
$LN5@SaveCampai:

; 364  : 	{
; 365  : 		CE_Events = 0;

	xor	ecx, ecx
	mov	WORD PTR ?CE_Events@@3FA, cx		; CE_Events

; 366  : 		fwrite (&CE_Events, sizeof (short), 1, fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	2
	push	OFFSET ?CE_Events@@3FA			; CE_Events
	call	_fwrite
	add	esp, 16					; 00000010H
$LN1@SaveCampai:

; 367  : 	}
; 368  : 	CloseCampFile(fp);	

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 369  : 	return 1;

	mov	eax, 1
$LN7@SaveCampai:

; 370  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveCampaignEvents@@YAHPAD@Z ENDP			; SaveCampaignEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
$T2 = -72						; size = 8
_cd$ = -64						; size = 8
$T3 = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
_dataSize$ = -44					; size = 4
tv137 = -40						; size = 4
$T6 = -36						; size = 4
tv90 = -32						; size = 4
$T7 = -28						; size = 4
_data_ptr$ = -24					; size = 4
_events$ = -20						; size = 2
_i$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_scenario$ = 12						; size = 4
?LoadCampaignEvents@@YAHPAD0@Z PROC			; LoadCampaignEvents

; 320  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadCampaignEvents@@YAHPAD0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 321  : 	uchar			/* *data,*/ *data_ptr;
; 322  : 	short			i,events;
; 323  : 
; 324  : 	ReadNumberOfEvents(scenario);

	mov	eax, DWORD PTR _scenario$[ebp]
	push	eax
	call	?ReadNumberOfEvents@@YAHPAD@Z		; ReadNumberOfEvents
	add	esp, 4

; 325  : 	CampaignData cd = ReadCampFile (filename, "evt");

	push	OFFSET ??_C@_03MJGMIPMC@evt?$AA@
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	?ReadCampFile@@YA?AUCampaignData@@PAD0@Z ; ReadCampFile
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _cd$[ebp], edx
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR _cd$[ebp+4], eax

; 326  : 	if (cd.dataSize == -1){

	cmp	DWORD PTR _cd$[ebp], -1
	jne	SHORT $LN8@LoadCampai

; 327  : 		return 0;

	xor	eax, eax
	jmp	$LN9@LoadCampai
$LN8@LoadCampai:

; 328  : 	}
; 329  : 
; 330  : 	data_ptr = (uchar *)cd.data;

	mov	ecx, DWORD PTR _cd$[ebp+4]
	mov	DWORD PTR _data_ptr$[ebp], ecx

; 331  : 
; 332  : 	events = *((short*)data_ptr);

	mov	edx, DWORD PTR _data_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _events$[ebp], ax

; 333  : 	data_ptr += sizeof(short);

	mov	ecx, DWORD PTR _data_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _data_ptr$[ebp], ecx

; 334  : 	long dataSize = cd.dataSize - sizeof(short);

	mov	edx, DWORD PTR _cd$[ebp]
	sub	edx, 2
	mov	DWORD PTR _dataSize$[ebp], edx

; 335  : 
; 336  : 	if (events > CE_Events)

	movsx	eax, WORD PTR _events$[ebp]
	movsx	ecx, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	eax, ecx
	jle	SHORT $LN7@LoadCampai

; 337  : 		events = CE_Events;

	mov	dx, WORD PTR ?CE_Events@@3FA		; CE_Events
	mov	WORD PTR _events$[ebp], dx
$LN7@LoadCampai:

; 338  : 
; 339  : 	for (i=0; i<events; i++)

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN6@LoadCampai
$LN5@LoadCampai:
	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx
$LN6@LoadCampai:
	movsx	edx, WORD PTR _i$[ebp]
	movsx	eax, WORD PTR _events$[ebp]
	cmp	edx, eax
	jge	SHORT $LN4@LoadCampai

; 340  : 		CampEvents[i] = new EventClass(&data_ptr, &dataSize);

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN11@LoadCampai
	lea	ecx, DWORD PTR _dataSize$[ebp]
	push	ecx
	lea	edx, DWORD PTR _data_ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0EventClass@@QAE@PAPAEPAJ@Z		; EventClass::EventClass
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN12@LoadCampai
$LN11@LoadCampai:
	mov	DWORD PTR tv90[ebp], 0
$LN12@LoadCampai:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	movsx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN5@LoadCampai
$LN4@LoadCampai:

; 341  : 
; 342  : 	for (;i<CE_Events; i++)

	jmp	SHORT $LN3@LoadCampai
$LN2@LoadCampai:
	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx
$LN3@LoadCampai:
	movsx	edx, WORD PTR _i$[ebp]
	movsx	eax, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	edx, eax
	jge	SHORT $LN1@LoadCampai

; 343  : 		CampEvents[i] = new EventClass(i);

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN13@LoadCampai
	movzx	ecx, WORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0EventClass@@QAE@F@Z			; EventClass::EventClass
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN14@LoadCampai
$LN13@LoadCampai:
	mov	DWORD PTR tv137[ebp], 0
$LN14@LoadCampai:
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN2@LoadCampai
$LN1@LoadCampai:

; 344  : 
; 345  : 	delete cd.data;

	mov	eax, DWORD PTR _cd$[ebp+4]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 346  : 	return 1;

	mov	eax, 1
$LN9@LoadCampai:

; 347  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadCampaignEvents@@YAHPAD0@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?LoadCampaignEvents@@YAHPAD0@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadCampaignEvents@@YAHPAD0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadCampaignEvents@@YAHPAD0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadCampaignEvents@@YAHPAD0@Z ENDP			; LoadCampaignEvents
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv78 = -24						; size = 4
$T3 = -20						; size = 4
_i$4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_scenario$ = 8						; size = 4
?NewCampaignEvents@@YAHPAD@Z PROC			; NewCampaignEvents

; 308  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewCampaignEvents@@YAHPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 309  : 	// Read in and allocate the event database
; 310  : 	ReadNumberOfEvents(scenario);

	mov	eax, DWORD PTR _scenario$[ebp]
	push	eax
	call	?ReadNumberOfEvents@@YAHPAD@Z		; ReadNumberOfEvents
	add	esp, 4

; 311  : 	for (int i=0; i<CE_Events; i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN3@NewCampaig
$LN2@NewCampaig:
	mov	ecx, DWORD PTR _i$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$4[ebp], ecx
$LN3@NewCampaig:
	movsx	edx, WORD PTR ?CE_Events@@3FA		; CE_Events
	cmp	DWORD PTR _i$4[ebp], edx
	jge	SHORT $LN1@NewCampaig

; 312  : 		CampEvents[i] = new EventClass(i);

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@NewCampaig
	movzx	eax, WORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0EventClass@@QAE@F@Z			; EventClass::EventClass
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN7@NewCampaig
$LN6@NewCampaig:
	mov	DWORD PTR tv78[ebp], 0
$LN7@NewCampaig:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR ?CampEvents@@3PAPAVEventClass@@A ; CampEvents
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN2@NewCampaig
$LN1@NewCampaig:

; 313  : 	// Set any events we want initially flagged
; 314  : 	SetInitialEvents(scenario);

	mov	edx, DWORD PTR _scenario$[ebp]
	push	edx
	call	?SetInitialEvents@@YAXPAD@Z		; SetInitialEvents
	add	esp, 4

; 315  : 	return 1;

	mov	eax, 1

; 316  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewCampaignEvents@@YAHPAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewCampaignEvents@@YAHPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewCampaignEvents@@YAHPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewCampaignEvents@@YAHPAD@Z ENDP			; NewCampaignEvents
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
tv93 = -8						; size = 4
tv76 = -4						; size = 4
_scenario$ = 8						; size = 4
?CheckTriggers@@YAHPAD@Z PROC				; CheckTriggers

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 140  : 	if (!FalconLocalGame || !FalconLocalGame->IsLocal())

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@CheckTrigg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@CheckTrigg
$LN6@CheckTrigg:
	mov	DWORD PTR tv76[ebp], 0
$LN7@CheckTrigg:
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN2@CheckTrigg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@CheckTrigg
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN9@CheckTrigg
$LN8@CheckTrigg:
	mov	DWORD PTR tv93[ebp], 0
$LN9@CheckTrigg:
	mov	ecx, DWORD PTR tv93[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@CheckTrigg
$LN2@CheckTrigg:

; 141  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@CheckTrigg
$LN3@CheckTrigg:

; 142  : 
; 143  : 	if (FalconLocalSession->GetTeam() == 255)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN1@CheckTrigg

; 144  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@CheckTrigg
$LN1@CheckTrigg:

; 145  : 
; 146  : 	ReadScriptedTriggerFile(scenario);

	mov	ecx, DWORD PTR _scenario$[ebp]
	push	ecx
	call	?ReadScriptedTriggerFile@@YAHPAD@Z	; ReadScriptedTriggerFile
	add	esp, 4

; 147  : 	return 0;

	xor	eax, eax
$LN4@CheckTrigg:

; 148  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckTriggers@@YAHPAD@Z ENDP				; CheckTriggers
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GEventClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GEventClass@@QAEPAXI@Z PROC				; EventClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1EventClass@@QAE@XZ			; EventClass::~EventClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GEventClass@@QAEPAXI@Z ENDP				; EventClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\cmpevent.h
;	COMDAT ?HasFired@EventClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasFired@EventClass@@QAEHXZ PROC			; EventClass::HasFired, COMDAT
; _this$ = ecx

; 33   : 		int HasFired (void)							{ return flags & CE_FIRED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+2]
	and	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?HasFired@EventClass@@QAEHXZ ENDP			; EventClass::HasFired
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 4
tv91 = -32						; size = 4
$T3 = -28						; size = 4
tv87 = -24						; size = 4
_msg$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_status$ = 8						; size = 4
?SetEvent@EventClass@@QAEXH@Z PROC			; EventClass::SetEvent
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetEvent@EventClass@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 	CampEventDataMessage	*msg = new CampEventDataMessage(vuLocalSession,FalconLocalGame);

	push	55					; 00000037H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@SetEvent
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@SetEvent
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN6@SetEvent
$LN5@SetEvent:
	mov	DWORD PTR tv87[ebp], 0
$LN6@SetEvent:
	push	1
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	mov	edx, DWORD PTR ?vuLocalSession@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?vuLocalSession@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CampEventDataMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; CampEventDataMessage::CampEventDataMessage
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN8@SetEvent
$LN7@SetEvent:
	mov	DWORD PTR tv91[ebp], 0
$LN8@SetEvent:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _msg$[ebp], edx

; 118  : 	msg->dataBlock.message = CampEventDataMessage::eventMessage;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+48], 0

; 119  : 	msg->dataBlock.event = event;

	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx+52], ax

; 120  : 	if (status)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetEvent

; 121  : 	{
; 122  : 		flags |= CE_FIRED;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	or	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx

; 123  : 		msg->dataBlock.status = 1;

	mov	ecx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [ecx+54], 1

; 124  : 	}
; 125  : 	else

	jmp	SHORT $LN1@SetEvent
$LN2@SetEvent:

; 126  : 	{
; 127  : 		flags &= ~CE_FIRED;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+2]
	and	eax, -9					; fffffff7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+2], ax

; 128  : 		msg->dataBlock.status = 0;

	mov	edx, DWORD PTR _msg$[ebp]
	mov	BYTE PTR [edx+54], 0
$LN1@SetEvent:

; 129  : 	}
; 130  : 	FalconSendMessage(msg,TRUE);

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 131  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetEvent@EventClass@@QAEXH@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetEvent@EventClass@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetEvent@EventClass@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetEvent@EventClass@@QAEXH@Z ENDP			; EventClass::SetEvent
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoEvent@EventClass@@QAEXXZ PROC			; EventClass::DoEvent
; _this$ = ecx

; 110  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 111  : 	SetEvent(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEvent@EventClass@@QAEXH@Z		; EventClass::SetEvent

; 112  : 	MonoPrint("CampEvent: Event %d activated.\n",event);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CA@JMPLBPG@CampEvent?3?5Event?5?$CFd?5activated?4?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 113  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoEvent@EventClass@@QAEXXZ ENDP			; EventClass::DoEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
?Save@EventClass@@QAEHPAU_iobuf@@@Z PROC		; EventClass::Save
; _this$ = ecx

; 101  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 	if (!file)

	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN1@Save

; 103  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Save
$LN1@Save:

; 104  : 	fwrite(&event, sizeof(short), 1, file);		

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 105  : 	fwrite(&flags, sizeof(short), 1, file);	

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 106  : 	return 1;

	mov	eax, 1
$LN2@Save:

; 107  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@EventClass@@QAEHPAU_iobuf@@@Z ENDP		; EventClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1EventClass@@QAE@XZ PROC				; EventClass::~EventClass
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1EventClass@@QAE@XZ ENDP				; EventClass::~EventClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
??0EventClass@@QAE@PAU_iobuf@@@Z PROC			; EventClass::EventClass
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 	if (!file)

	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN1@EventClass

; 81   : 		return;

	jmp	SHORT $LN2@EventClass
$LN1@EventClass:

; 82   : 	fread(&event, sizeof(short), 1, file);		

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 83   : 	fread(&flags, sizeof(short), 1, file);	

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
$LN2@EventClass:

; 84   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0EventClass@@QAE@PAU_iobuf@@@Z ENDP			; EventClass::EventClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0EventClass@@QAE@PAPAEPAJ@Z PROC			; EventClass::EventClass
; _this$ = ecx

; 87   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 	if ((rem <= 0) || (!stream)){

	cmp	DWORD PTR _rem$[ebp], 0
	jbe	SHORT $LN1@EventClass
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN2@EventClass
$LN1@EventClass:

; 89   : 		return;

	jmp	SHORT $LN3@EventClass
$LN2@EventClass:

; 90   : 	}
; 91   : 
; 92   : 	memcpychk(&event, stream, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 93   : 	memcpychk(&flags, stream, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN3@EventClass:

; 94   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0EventClass@@QAE@PAPAEPAJ@Z ENDP			; EventClass::EventClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\cmpevent.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 2
??0EventClass@@QAE@F@Z PROC				; EventClass::EventClass
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 	event = id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _id$[ebp]
	mov	WORD PTR [eax], cx

; 75   : 	flags = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx

; 76   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0EventClass@@QAE@F@Z ENDP				; EventClass::EventClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 218  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strchr
	add	esp, 8
	pop	ebp
	ret	0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
END
