; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPUPD\NoFly.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?NFZList@@3PAVNoFlyZoneClass@@A			; NFZList
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
_BSS	SEGMENT
?NFZList@@3PAVNoFlyZoneClass@@A DD 01H DUP (?)		; NFZList
_BSS	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
PUBLIC	??0NoFlyZoneClass@@QAE@XZ			; NoFlyZoneClass::NoFlyZoneClass
PUBLIC	?InZone@NoFlyZoneClass@@QAEHFFEH@Z		; NoFlyZoneClass::InZone
PUBLIC	?SetNFZ@NoFlyZoneClass@@QAEXEH@Z		; NoFlyZoneClass::SetNFZ
PUBLIC	?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z		; AddNFZ
PUBLIC	?RemoveNFZ@@YAXPAVNoFlyZoneClass@@0@Z		; RemoveNFZ
PUBLIC	?RemoveNFZ@@YAXPAVNoFlyZoneClass@@@Z		; RemoveNFZ
PUBLIC	?DeleteZones@@YAXXZ				; DeleteZones
PUBLIC	?LoadNFZs@@YAHPAD@Z				; LoadNFZs
PUBLIC	?SaveNFZs@@YAHPAD@Z				; SaveNFZs
PUBLIC	?CheckZones@@YAHFFE@Z				; CheckZones
PUBLIC	?CheckZones@@YAHFFEH@Z				; CheckZones
PUBLIC	?CheckZones@@YAHPAUvector@@E@Z			; CheckZones
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03JMMIIGDN@nfz?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	__real@3f4ccccd
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z:PROC	; OpenCampFile
EXTRN	?GetTTRelations@@YAHEE@Z:PROC			; GetTTRelations
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?CloseCampFile@@YAXPAU_iobuf@@@Z:PROC		; CloseCampFile
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z:PROC	; ConvertSimToGrid
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMMIIGDN@nfz?$AA@
CONST	SEGMENT
??_C@_03JMMIIGDN@nfz?$AA@ DB 'nfz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?LoadNFZs@@YAHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadNFZs@@YAHPAD@Z$0
__unwindtable$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z$0
__ehfuncinfo$?LoadNFZs@@YAHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadNFZs@@YAHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_x$ = -8						; size = 2
_y$ = -4						; size = 2
_location$ = 8						; size = 4
_who$ = 12						; size = 1
?CheckZones@@YAHPAUvector@@E@Z PROC			; CheckZones

; 198  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 199  : 	GridIndex x,y;
; 200  : 
; 201  : 	ConvertSimToGrid((vector*)(&location),&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	lea	edx, DWORD PTR _location$[ebp]
	push	edx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 202  : 	return CheckZones(x,y,who);

	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?CheckZones@@YAHFFE@Z			; CheckZones
	add	esp, 12					; 0000000cH

; 203  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckZones@@YAHPAUvector@@E@Z ENDP			; CheckZones
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_zone$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_who$ = 16						; size = 1
_flags$ = 20						; size = 4
?CheckZones@@YAHFFEH@Z PROC				; CheckZones

; 183  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 184  : 	NFZ	zone;
; 185  : 
; 186  : 	zone = NFZList;

	mov	eax, DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A ; NFZList
	mov	DWORD PTR _zone$[ebp], eax
$LN3@CheckZones:

; 187  : 	while (zone)

	cmp	DWORD PTR _zone$[ebp], 0
	je	SHORT $LN2@CheckZones

; 188  : 		{
; 189  : 		if (zone->InZone(x,y,who,flags))

	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _zone$[ebp]
	call	?InZone@NoFlyZoneClass@@QAEHFFEH@Z	; NoFlyZoneClass::InZone
	test	eax, eax
	je	SHORT $LN1@CheckZones

; 190  : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN4@CheckZones
$LN1@CheckZones:

; 191  : 		zone = zone->next;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _zone$[ebp], eax

; 192  : 		}

	jmp	SHORT $LN3@CheckZones
$LN2@CheckZones:

; 193  : 	return 0;

	xor	eax, eax
$LN4@CheckZones:

; 194  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckZones@@YAHFFEH@Z ENDP				; CheckZones
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_zone$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_who$ = 16						; size = 1
?CheckZones@@YAHFFE@Z PROC				; CheckZones

; 169  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 170  : 	NFZ	zone;
; 171  : 
; 172  : 	zone = NFZList;

	mov	eax, DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A ; NFZList
	mov	DWORD PTR _zone$[ebp], eax
$LN3@CheckZones:

; 173  : 	while (zone)

	cmp	DWORD PTR _zone$[ebp], 0
	je	SHORT $LN2@CheckZones

; 174  : 		{
; 175  : 		if (zone->InZone(x,y,who,0))

	push	0
	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zone$[ebp]
	call	?InZone@NoFlyZoneClass@@QAEHFFEH@Z	; NoFlyZoneClass::InZone
	test	eax, eax
	je	SHORT $LN1@CheckZones

; 176  : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN4@CheckZones
$LN1@CheckZones:

; 177  : 		zone = zone->next;

	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _zone$[ebp], edx

; 178  : 		}

	jmp	SHORT $LN3@CheckZones
$LN2@CheckZones:

; 179  : 	return 0;

	xor	eax, eax
$LN4@CheckZones:

; 180  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckZones@@YAHFFE@Z ENDP				; CheckZones
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_fp$ = -12						; size = 4
_zone$ = -8						; size = 4
_zones$ = -4						; size = 2
_name$ = 8						; size = 4
?SaveNFZs@@YAHPAD@Z PROC				; SaveNFZs

; 140  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 141  : 	FILE*		fp;
; 142  : 	short		zones = 0;

	xor	eax, eax
	mov	WORD PTR _zones$[ebp], ax

; 143  : 	NFZ			zone;
; 144  : 
; 145  : 	if ((fp = OpenCampFile (name, "nfz", "wb")) == NULL)

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	push	OFFSET ??_C@_03JMMIIGDN@nfz?$AA@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN5@SaveNFZs

; 146  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN6@SaveNFZs
$LN5@SaveNFZs:

; 147  : 
; 148  : 	// Count # of zones
; 149  : 	zone = NFZList;

	mov	edx, DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A ; NFZList
	mov	DWORD PTR _zone$[ebp], edx
$LN4@SaveNFZs:

; 150  : 	while (zone)

	cmp	DWORD PTR _zone$[ebp], 0
	je	SHORT $LN3@SaveNFZs

; 151  : 		{
; 152  : 		zones++;

	mov	ax, WORD PTR _zones$[ebp]
	add	ax, 1
	mov	WORD PTR _zones$[ebp], ax

; 153  : 		zone = zone->next;

	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _zone$[ebp], edx

; 154  : 		}

	jmp	SHORT $LN4@SaveNFZs
$LN3@SaveNFZs:

; 155  : 	// Save them
; 156  : 	fwrite(&zones,sizeof(short),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	2
	lea	ecx, DWORD PTR _zones$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 157  : 	zone = NFZList;

	mov	edx, DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A ; NFZList
	mov	DWORD PTR _zone$[ebp], edx
$LN2@SaveNFZs:

; 158  : 	while (zone)

	cmp	DWORD PTR _zone$[ebp], 0
	je	SHORT $LN1@SaveNFZs

; 159  : 		{
; 160  : 		fwrite(zone,sizeof(NoFlyZoneClass),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _zone$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 161  : 		zone = zone->next;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _zone$[ebp], eax

; 162  : 		}

	jmp	SHORT $LN2@SaveNFZs
$LN1@SaveNFZs:

; 163  : 	CloseCampFile(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 164  : 	return 1;

	mov	eax, 1
$LN6@SaveNFZs:

; 165  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveNFZs@@YAHPAD@Z ENDP				; SaveNFZs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 4
tv82 = -36						; size = 4
$T3 = -32						; size = 4
_last$ = -28						; size = 4
_fp$ = -24						; size = 4
_zone$ = -20						; size = 4
_entries$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
?LoadNFZs@@YAHPAD@Z PROC				; LoadNFZs

; 117  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadNFZs@@YAHPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 118  : 	FILE*		fp;
; 119  : 	short		entries;
; 120  : 	NFZ			zone,last=NULL;

	mov	DWORD PTR _last$[ebp], 0

; 121  : 
; 122  : 	if ((fp = OpenCampFile (name, "nfz", "rb")) == NULL)

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	OFFSET ??_C@_03JMMIIGDN@nfz?$AA@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?OpenCampFile@@YAPAU_iobuf@@PAD00@Z	; OpenCampFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN5@LoadNFZs

; 123  : 		return 0;

	xor	eax, eax
	jmp	$LN6@LoadNFZs
$LN5@LoadNFZs:

; 124  : 	fread(&entries,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	lea	edx, DWORD PTR _entries$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
$LN4@LoadNFZs:

; 125  : 	while (entries)

	movsx	eax, WORD PTR _entries$[ebp]
	test	eax, eax
	je	$LN3@LoadNFZs

; 126  : 		{
; 127  : 		zone = new NoFlyZoneClass();

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN8@LoadNFZs
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0NoFlyZoneClass@@QAE@XZ		; NoFlyZoneClass::NoFlyZoneClass
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN9@LoadNFZs
$LN8@LoadNFZs:
	mov	DWORD PTR tv82[ebp], 0
$LN9@LoadNFZs:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _zone$[ebp], edx

; 128  : 		fread(zone,sizeof(NoFlyZoneClass),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _zone$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 129  : 		if (!NFZList)

	cmp	DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A, 0 ; NFZList
	jne	SHORT $LN2@LoadNFZs

; 130  : 			NFZList = zone;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A, edx ; NFZList
$LN2@LoadNFZs:

; 131  : 		if (last)

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN1@LoadNFZs

; 132  : 			last->next = zone;

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@LoadNFZs:

; 133  : 		last = zone;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 134  : 		}

	jmp	$LN4@LoadNFZs
$LN3@LoadNFZs:

; 135  : 	CloseCampFile(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?CloseCampFile@@YAXPAU_iobuf@@@Z	; CloseCampFile
	add	esp, 4

; 136  : 	return 1;

	mov	eax, 1
$LN6@LoadNFZs:

; 137  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadNFZs@@YAHPAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadNFZs@@YAHPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadNFZs@@YAHPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadNFZs@@YAHPAD@Z ENDP				; LoadNFZs
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_next$ = -12						; size = 4
$T1 = -8						; size = 4
_zone$ = -4						; size = 4
?DeleteZones@@YAXXZ PROC				; DeleteZones

; 104  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 105  : 	NFZ		zone,next;
; 106  : 
; 107  : 	zone = NFZList;

	mov	eax, DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A ; NFZList
	mov	DWORD PTR _zone$[ebp], eax
$LN2@DeleteZone:

; 108  : 	while (zone)

	cmp	DWORD PTR _zone$[ebp], 0
	je	SHORT $LN3@DeleteZone

; 109  : 		{
; 110  : 		next = zone->next;

	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _next$[ebp], edx

; 111  : 		delete zone;

	mov	eax, DWORD PTR _zone$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 112  : 		zone = next;

	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _zone$[ebp], edx

; 113  : 		}

	jmp	SHORT $LN2@DeleteZone
$LN3@DeleteZone:

; 114  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteZones@@YAXXZ ENDP				; DeleteZones
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_curr$ = -4						; size = 4
_zone$ = 8						; size = 4
?RemoveNFZ@@YAXPAVNoFlyZoneClass@@@Z PROC		; RemoveNFZ

; 87   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 88   : 	NFZ		curr;
; 89   : 
; 90   : 	curr = NFZList;

	mov	eax, DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A ; NFZList
	mov	DWORD PTR _curr$[ebp], eax

; 91   : 	if (curr == zone)

	mov	ecx, DWORD PTR _curr$[ebp]
	cmp	ecx, DWORD PTR _zone$[ebp]
	jne	SHORT $LN3@RemoveNFZ

; 92   : 		NFZList = zone->next;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A, eax ; NFZList

; 93   : 	else

	jmp	SHORT $LN4@RemoveNFZ
$LN3@RemoveNFZ:

; 94   : 		{
; 95   : 		while (curr && curr->next != zone)

	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN2@RemoveNFZ
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR _zone$[ebp]
	je	SHORT $LN2@RemoveNFZ

; 96   : 			curr = curr->next;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _curr$[ebp], ecx
	jmp	SHORT $LN3@RemoveNFZ
$LN2@RemoveNFZ:

; 97   : 		if (curr)

	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN4@RemoveNFZ

; 98   : 			curr->next = zone->next;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
$LN4@RemoveNFZ:

; 99   : 		}
; 100  : 	delete zone;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 101  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveNFZ@@YAXPAVNoFlyZoneClass@@@Z ENDP		; RemoveNFZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_zone$ = 8						; size = 4
_prev$ = 12						; size = 4
?RemoveNFZ@@YAXPAVNoFlyZoneClass@@0@Z PROC		; RemoveNFZ

; 78   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 79   : 	if (prev)

	cmp	DWORD PTR _prev$[ebp], 0
	je	SHORT $LN2@RemoveNFZ

; 80   : 		prev->next = zone->next;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 81   : 	else

	jmp	SHORT $LN1@RemoveNFZ
$LN2@RemoveNFZ:

; 82   : 		NFZList = zone->next;

	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A, ecx ; NFZList
$LN1@RemoveNFZ:

; 83   : 	delete zone;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 84   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveNFZ@@YAXPAVNoFlyZoneClass@@0@Z ENDP		; RemoveNFZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv71 = -24						; size = 4
$T3 = -20						; size = 4
_zone$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_radius$ = 16						; size = 2
?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z PROC		; AddNFZ

; 64   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 65   : 	NFZ		zone;
; 66   : 
; 67   : 	zone = new NoFlyZoneClass();

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@AddNFZ
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0NoFlyZoneClass@@QAE@XZ		; NoFlyZoneClass::NoFlyZoneClass
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@AddNFZ
$LN4@AddNFZ:
	mov	DWORD PTR tv71[ebp], 0
$LN5@AddNFZ:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _zone$[ebp], ecx

; 68   : 	zone->zonex = x;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR [edx], ax

; 69   : 	zone->zoney = y;

	mov	ecx, DWORD PTR _zone$[ebp]
	mov	dx, WORD PTR _y$[ebp]
	mov	WORD PTR [ecx+2], dx

; 70   : 	zone->radius = radius;

	mov	eax, DWORD PTR _zone$[ebp]
	mov	cx, WORD PTR _radius$[ebp]
	mov	WORD PTR [eax+4], cx

; 71   : 	if (NFZList)

	cmp	DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A, 0 ; NFZList
	je	SHORT $LN1@AddNFZ

; 72   : 		zone->next = NFZList;

	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A ; NFZList
	mov	DWORD PTR [edx+8], eax
$LN1@AddNFZ:

; 73   : 	NFZList = zone;

	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR ?NFZList@@3PAVNoFlyZoneClass@@A, ecx ; NFZList

; 74   : 	return zone;

	mov	eax, DWORD PTR _zone$[ebp]

; 75   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNFZ@@YAPAVNoFlyZoneClass@@FFF@Z ENDP		; AddNFZ
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_who$ = 8						; size = 1
_t$ = 12						; size = 4
?SetNFZ@NoFlyZoneClass@@QAEXEH@Z PROC			; NoFlyZoneClass::SetNFZ
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	owner = who;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _who$[ebp]
	mov	BYTE PTR [eax+6], cl

; 56   : 	type = t;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _t$[ebp]
	mov	BYTE PTR [edx+7], al

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?SetNFZ@NoFlyZoneClass@@QAEXEH@Z ENDP			; NoFlyZoneClass::SetNFZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_d$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_who$ = 16						; size = 1
_flags$ = 20						; size = 4
?InZone@NoFlyZoneClass@@QAEHFFEH@Z PROC			; NoFlyZoneClass::InZone
; _this$ = ecx

; 31   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	float			d;
; 33   : 
; 34   : 	d = Distance(x,y,zonex,zoney);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 35   : 	if (flags & FIND_CAUTIOUS)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN7@InZone

; 36   : 		d *= 0.8F;

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR _d$[ebp], xmm0
$LN7@InZone:

; 37   : 	if (d < radius)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	cvtsi2ss xmm0, edx
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN1@InZone

; 38   : 		{
; 39   : 		if (type == NFZ_OVERFLY_ONLY)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	cmp	ecx, 1
	jne	SHORT $LN5@InZone

; 40   : 			{
; 41   : 			if (!GetRoE(who,owner,ROE_AIR_OVERFLY))

	push	7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	push	eax
	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@InZone

; 42   : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN8@InZone
$LN4@InZone:

; 43   : 			}

	jmp	SHORT $LN1@InZone
$LN5@InZone:

; 44   : 		else if (type == NFZ_OWNER_NOFLY)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	test	eax, eax
	jne	SHORT $LN1@InZone

; 45   : 			{
; 46   : 			if (GetTTRelations(who,owner) == Allied)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+6]
	push	edx
	movzx	eax, BYTE PTR _who$[ebp]
	push	eax
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN1@InZone

; 47   : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN8@InZone
$LN1@InZone:

; 48   : 			}
; 49   : 		}
; 50   : 	return 0;

	xor	eax, eax
$LN8@InZone:

; 51   : 	}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?InZone@NoFlyZoneClass@@QAEHFFEH@Z ENDP			; NoFlyZoneClass::InZone
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\campupd\nofly.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NoFlyZoneClass@@QAE@XZ PROC				; NoFlyZoneClass::NoFlyZoneClass
; _this$ = ecx

; 22   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 	zonex = zoney = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+2], ax
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax], dx

; 24   : 	radius = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx

; 25   : 	owner = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+6], 0

; 26   : 	type = NFZ_OVERFLY_ONLY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+7], 1

; 27   : 	next = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 28   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0NoFlyZoneClass@@QAE@XZ ENDP				; NoFlyZoneClass::NoFlyZoneClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
