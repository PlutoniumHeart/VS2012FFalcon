; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\TOOLS\Mono\Debuggr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?mono_critical@@3U_RTL_CRITICAL_SECTION@@A	; mono_critical
PUBLIC	?hStdoutDbg@@3PAXA				; hStdoutDbg
PUBLIC	?charinfo@@3PAU_CHAR_INFO@@A			; charinfo
_BSS	SEGMENT
_Each	DB	08H DUP (?)
_Space	DB	08H DUP (?)
_linestyle DD	01H DUP (?)
_x_offset DD	01H DUP (?)
_y_offset DD	01H DUP (?)
_spinner DD	01H DUP (?)
_spinner1 DD	01H DUP (?)
_spinner2 DD	01H DUP (?)
_spinner3 DD	01H DUP (?)
?mono_critical@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?) ; mono_critical
?hStdoutDbg@@3PAXA DD 01H DUP (?)			; hStdoutDbg
?charinfo@@3PAU_CHAR_INFO@@A DD 0fa0H DUP (?)		; charinfo
_page	DD	01H DUP (?)
_monoPenX DB	01H DUP (?)
	ALIGN	4

_monoPenY DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_Period	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Slash	DB	08H
	DB	010H
	DB	020H
	DB	040H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_Number0 DB	0e0H
	DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number1 DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_Number2 DB	0e0H
	DB	020H
	DB	0e0H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number3 DB	0e0H
	DB	020H
	DB	060H
	DB	020H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number4 DB	080H
	DB	0a0H
	DB	0e0H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Number5 DB	0e0H
	DB	080H
	DB	0e0H
	DB	020H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number6 DB	080H
	DB	080H
	DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number7 DB	0e0H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Number8 DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number9 DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Colon	DB	00H
	DB	020H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_SemiColon DB	00H
	DB	020H
	DB	00H
	DB	020H
	DB	060H
	DB	040H
	DB	00H
	DB	00H
_Less	DB	020H
	DB	040H
	DB	080H
	DB	040H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Equal	DB	00H
	DB	070H
	DB	00H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_More	DB	080H
	DB	040H
	DB	020H
	DB	040H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_Quest	DB	0c0H
	DB	020H
	DB	060H
	DB	040H
	DB	040H
	DB	00H
	DB	040H
	DB	00H
_LetterA DB	040H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
_LetterB DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterC DB	0e0H
	DB	080H
	DB	080H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterD DB	0c0H
	DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
_LetterE DB	0e0H
	DB	080H
	DB	0c0H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterF DB	0e0H
	DB	080H
	DB	0c0H
	DB	080H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_LetterG DB	0f0H
	DB	080H
	DB	0b0H
	DB	090H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
_LetterH DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
_LetterI DB	0e0H
	DB	040H
	DB	040H
	DB	040H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterJ DB	020H
	DB	020H
	DB	020H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterK DB	0a0H
	DB	0c0H
	DB	0c0H
	DB	0a0H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
_LetterL DB	080H
	DB	080H
	DB	080H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterM DB	088H
	DB	0d8H
	DB	0a8H
	DB	088H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterN DB	088H
	DB	0c8H
	DB	0a8H
	DB	098H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterO DB	0f0H
	DB	090H
	DB	090H
	DB	090H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
_LetterP DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	080H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_LetterQ DB	0f0H
	DB	090H
	DB	090H
	DB	0b0H
	DB	0f0H
	DB	08H
	DB	00H
	DB	00H
_LetterR DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
_LetterS DB	0e0H
	DB	080H
	DB	0e0H
	DB	020H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterT DB	0e0H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_LetterU DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterV DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_LetterW DB	088H
	DB	088H
	DB	0a8H
	DB	0d8H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterX DB	088H
	DB	050H
	DB	020H
	DB	050H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterY DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	040H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_LetterZ DB	0e0H
	DB	020H
	DB	040H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_graphicsMode DD 0ffffffffH
_DebugScreenWidth DD 04433c000r			; 719
_CharList DD	FLAT:_Comma
	DD	FLAT:_Minus
	DD	FLAT:_Period
	DD	FLAT:_Slash
	DD	FLAT:_Number0
	DD	FLAT:_Number1
	DD	FLAT:_Number2
	DD	FLAT:_Number3
	DD	FLAT:_Number4
	DD	FLAT:_Number5
	DD	FLAT:_Number6
	DD	FLAT:_Number7
	DD	FLAT:_Number8
	DD	FLAT:_Number9
	DD	FLAT:_Colon
	DD	FLAT:_SemiColon
	DD	FLAT:_Less
	DD	FLAT:_Equal
	DD	FLAT:_More
	DD	FLAT:_Quest
	DD	FLAT:_Each
	DD	FLAT:_LetterA
	DD	FLAT:_LetterB
	DD	FLAT:_LetterC
	DD	FLAT:_LetterD
	DD	FLAT:_LetterE
	DD	FLAT:_LetterF
	DD	FLAT:_LetterG
	DD	FLAT:_LetterH
	DD	FLAT:_LetterI
	DD	FLAT:_LetterJ
	DD	FLAT:_LetterK
	DD	FLAT:_LetterL
	DD	FLAT:_LetterM
	DD	FLAT:_LetterN
	DD	FLAT:_LetterO
	DD	FLAT:_LetterP
	DD	FLAT:_LetterQ
	DD	FLAT:_LetterR
	DD	FLAT:_LetterS
	DD	FLAT:_LetterT
	DD	FLAT:_LetterU
	DD	FLAT:_LetterV
	DD	FLAT:_LetterW
	DD	FLAT:_LetterX
	DD	FLAT:_LetterY
	DD	FLAT:_LetterZ
	DD	FLAT:_Space
_styles	DD	0ffffH
	DD	0c0c0H
_spin	DB	'|/-\', 00H
_monoPenattribute DB 07H
	ORG $+2
_DebugScreenHeight DD 043ad8000r		; 347
_Comma	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	060H
	DB	040H
	DB	00H
_Minus	DB	00H
	DB	00H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	_InitDebug
PUBLIC	_DisplayDebugCharacter
PUBLIC	_DrawDebugString
PUBLIC	_DrawDebugStringLeft
PUBLIC	_DrawDebugStringRight
PUBLIC	_RotateDebug2D
PUBLIC	_ResetRotateDebug2D
PUBLIC	_TranslateDebug2D
PUBLIC	_ResetTranslateDebug2D
PUBLIC	_SetDebugLineStyle
PUBLIC	_DisplayDebugString
PUBLIC	_DrawDebugLine
PUBLIC	_DrawDebugCircle
PUBLIC	_DisplayDebugLine
PUBLIC	_DisplayDebugCircle
PUBLIC	_DebugSwapbuffer
PUBLIC	_DebugClear
PUBLIC	_MonoPrint
PUBLIC	_MonoLocate
PUBLIC	_MonoGetLoc
PUBLIC	_MonoCls
PUBLIC	_MonoScroll
PUBLIC	_WriteDebugPixel
PUBLIC	?set_spinner1@@YAXH@Z				; set_spinner1
PUBLIC	?set_spinner2@@YAXH@Z				; set_spinner2
PUBLIC	?set_spinner3@@YAXH@Z				; set_spinner3
PUBLIC	?update_mono@@YGKPAX@Z				; update_mono
PUBLIC	?MonoColor@@YAXE@Z				; MonoColor
PUBLIC	?SetMonoGraphicsMode@@YAXH@Z			; SetMonoGraphicsMode
PUBLIC	??_C@_0DA@KMNDHINL@InitDebug?5?9?5Warning?3?5SetConsoleO@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f000000
PUBLIC	__real@3f466666
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_toupper:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetVersionExA@4:PROC
EXTRN	__imp__WriteConsoleOutputA@20:PROC
EXTRN	__imp__FillConsoleOutputCharacterA@20:PROC
EXTRN	__imp__GetConsoleScreenBufferInfo@8:PROC
EXTRN	__imp__SetConsoleScreenBufferSize@8:PROC
EXTRN	__imp__SetConsoleCursorPosition@8:PROC
EXTRN	__imp__AllocConsole@0:PROC
EXTRN	__imp__WriteConsoleA@20:PROC
EXTRN	__imp__SetConsoleCP@4:PROC
EXTRN	_vsprintf:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

_screen_buffer DD 02H DUP (?)
_mono_memory DB	0fa0H DUP (?)
_mono_buffer DB	0fa0H DUP (?)
_matrix00 DD	01H DUP (?)
_matrix01 DD	01H DUP (?)
_matrix10 DD	01H DUP (?)
_matrix11 DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?_mono_buffer@?1??MonoPrint@@9@4PADA
_BSS	SEGMENT
?_mono_buffer@?1??MonoPrint@@9@4PADA DB 03e8H DUP (?)	; `MonoPrint'::`2'::_mono_buffer
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f466666
CONST	SEGMENT
__real@3f466666 DD 03f466666r			; 0.775
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0DA@KMNDHINL@InitDebug?5?9?5Warning?3?5SetConsoleO@
CONST	SEGMENT
??_C@_0DA@KMNDHINL@InitDebug?5?9?5Warning?3?5SetConsoleO@ DB 'InitDebug -'
	DB	' Warning: SetConsoleOutputCP failed', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_newMode$ = 8						; size = 4
?SetMonoGraphicsMode@@YAXH@Z PROC			; SetMonoGraphicsMode

; 1180 : {

	push	ebp
	mov	ebp, esp

; 1181 : #ifdef NDEBUG
; 1182 : //   if (newMode == DEBUGGER_TEXT_MODE)
; 1183 : //      return;
; 1184 : #endif
; 1185 : 
; 1186 :    if (graphicsMode != -1)

	cmp	DWORD PTR _graphicsMode, -1
	je	SHORT $LN2@SetMonoGra

; 1187 :       graphicsMode = newMode;

	mov	eax, DWORD PTR _newMode$[ebp]
	mov	DWORD PTR _graphicsMode, eax
$LN2@SetMonoGra:

; 1188 : }

	pop	ebp
	ret	0
?SetMonoGraphicsMode@@YAXH@Z ENDP			; SetMonoGraphicsMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_attribute$ = 8						; size = 1
?MonoColor@@YAXE@Z PROC					; MonoColor

; 1137 : {

	push	ebp
	mov	ebp, esp

; 1138 :    if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN1@MonoColor

; 1139 :       return;

	jmp	SHORT $LN2@MonoColor
$LN1@MonoColor:

; 1140 : 
; 1141 :    monoPenattribute = attribute;

	mov	al, BYTE PTR _attribute$[ebp]
	mov	BYTE PTR _monoPenattribute, al
$LN2@MonoColor:

; 1142 : 
; 1143 : #if defined _TEXT_TGT_CONSOLE
; 1144 : #elif defined _TEXT_TGT_TRACE
; 1145 : #elif defined _TEXT_TGT_FILE
; 1146 : #endif
; 1147 : }

	pop	ebp
	ret	0
?MonoColor@@YAXE@Z ENDP					; MonoColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_rc$1 = -40						; size = 8
_b$2 = -32						; size = 4
tv75 = -28						; size = 4
_dwBufferSize$ = -24					; size = 4
_dwBufferCoord$ = -20					; size = 4
tv76 = -16						; size = 4
_loop$3 = -12						; size = 4
_dst$ = -8						; size = 4
_src$ = -4						; size = 4
_ptr$ = 8						; size = 4
?update_mono@@YGKPAX@Z PROC				; update_mono

; 691  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 692  : 	#if defined _TEXT_TGT_CONSOLE
; 693  : #if 1
; 694  : 	COORD dwBufferSize = { 80, 25 };

	mov	eax, 80					; 00000050H
	mov	WORD PTR _dwBufferSize$[ebp], ax
	mov	ecx, 25					; 00000019H
	mov	WORD PTR _dwBufferSize$[ebp+2], cx

; 695  : 	COORD dwBufferCoord = { 0, 0 };

	xor	edx, edx
	mov	WORD PTR _dwBufferCoord$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _dwBufferCoord$[ebp+2], ax
$LN5@update_mon:

; 696  : 
; 697  : 	char *src;
; 698  : 	CHAR_INFO *dst;
; 699  : 
; 700  : 	while(ptr && hStdoutDbg)

	cmp	DWORD PTR _ptr$[ebp], 0
	je	$LN4@update_mon
	cmp	DWORD PTR ?hStdoutDbg@@3PAXA, 0		; hStdoutDbg
	je	$LN4@update_mon

; 701  : 	{
; 702  : 		SMALL_RECT rc = { 0, 0, 80, 25 };

	xor	ecx, ecx
	mov	WORD PTR _rc$1[ebp], cx
	xor	edx, edx
	mov	WORD PTR _rc$1[ebp+2], dx
	mov	eax, 80					; 00000050H
	mov	WORD PTR _rc$1[ebp+4], ax
	mov	ecx, 25					; 00000019H
	mov	WORD PTR _rc$1[ebp+6], cx

; 703  : 
; 704  : 		src = mono_memory;

	mov	DWORD PTR _src$[ebp], OFFSET _mono_memory

; 705  : 		dst = charinfo;

	mov	DWORD PTR _dst$[ebp], OFFSET ?charinfo@@3PAU_CHAR_INFO@@A ; charinfo

; 706  : 
; 707  : 		for(int loop = 0; loop < 80 * 25 *2; loop ++)

	mov	DWORD PTR _loop$3[ebp], 0
	jmp	SHORT $LN3@update_mon
$LN2@update_mon:
	mov	edx, DWORD PTR _loop$3[ebp]
	add	edx, 1
	mov	DWORD PTR _loop$3[ebp], edx
$LN3@update_mon:
	cmp	DWORD PTR _loop$3[ebp], 4000		; 00000fa0H
	jge	SHORT $LN1@update_mon

; 708  : 		{
; 709  : 			dst->Char.AsciiChar = *src++;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax

; 710  : 			dst->Attributes = *src++ ? FOREGROUND_GREEN : FOREGROUND_BLUE;

	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv75[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN8@update_mon
	mov	DWORD PTR tv76[ebp], 2
	jmp	SHORT $LN9@update_mon
$LN8@update_mon:
	mov	DWORD PTR tv76[ebp], 1
$LN9@update_mon:
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	dx, WORD PTR tv76[ebp]
	mov	WORD PTR [ecx+2], dx

; 711  : 
; 712  : 			dst ++;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 4
	mov	DWORD PTR _dst$[ebp], eax

; 713  : 		}

	jmp	SHORT $LN2@update_mon
$LN1@update_mon:

; 714  : 
; 715  : 
; 716  : 		BOOL b = WriteConsoleOutput(hStdoutDbg, charinfo, dwBufferSize, dwBufferCoord, &rc);

	lea	ecx, DWORD PTR _rc$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwBufferCoord$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwBufferSize$[ebp]
	push	eax
	push	OFFSET ?charinfo@@3PAU_CHAR_INFO@@A	; charinfo
	mov	ecx, DWORD PTR ?hStdoutDbg@@3PAXA	; hStdoutDbg
	push	ecx
	call	DWORD PTR __imp__WriteConsoleOutputA@20
	mov	DWORD PTR _b$2[ebp], eax

; 717  :  
; 718  : 		Sleep (25);

	push	25					; 00000019H
	call	DWORD PTR __imp__Sleep@4

; 719  : 	}

	jmp	$LN5@update_mon
$LN4@update_mon:

; 720  : #elif defined _TEXT_TGT_TRACE
; 721  : #elif defined _TEXT_TGT_FILE
; 722  : #else
; 723  : 	COORD dwBufferCoord = { 0, 0 };
; 724  : 	DWORD cb;
; 725  : 
; 726  : 	while(ptr && hStdoutDbg)
; 727  : 	{
; 728  : 		if(!SetConsoleCursorPosition(hStdoutDbg, dwBufferCoord))
; 729  : 			OutputDebugString("Warning: WriteConsoleOutputA failed\n");
; 730  :  
; 731  : 		if(!WriteConsole(hStdoutDbg, mono_memory, 80 * 25 * 2, &cb, NULL))
; 732  : 			OutputDebugString("Warning: WriteConsoleOutputA failed\n");
; 733  :  
; 734  : 		Sleep (25);
; 735  : 	}
; 736  : #endif
; 737  : 	#else
; 738  : 	int
; 739  : 		loop;
; 740  : 
; 741  : 	char
; 742  : 		*src,
; 743  : 		*cmp,
; 744  : 		*dst;
; 745  : 
; 746  : 
; 747  : 	while (ptr)
; 748  : 	{
; 749  : 		src = mono_memory;
; 750  : 		cmp = mono_buffer;
; 751  : 		dst = (char *) MONO_TEXT;
; 752  : 
; 753  : 		for (loop = 0; loop < 80 * 25 *2; loop ++)
; 754  : 		{
; 755  : 			if (*cmp != *src)
; 756  : 			{
; 757  : 				*dst = *src;
; 758  : 				*cmp = *src;
; 759  : 			}
; 760  : 
; 761  : 			src ++;
; 762  : 			dst ++;
; 763  : 			cmp ++;
; 764  : 		}
; 765  : 
; 766  : 		dst = (char *) MONO_TEXT;
; 767  : 		dst[158] = spin[(spinner ++) & 3];;
; 768  : 		dst[159] = 7;
; 769  : 
; 770  : 		dst[156] = spin[spinner1 & 3];;
; 771  : 		dst[157] = 7;
; 772  : 
; 773  : 		dst[154] = spin[spinner2 & 3];;
; 774  : 		dst[155] = 7;
; 775  : 
; 776  : 		dst[152] = spin[spinner3 & 3];;
; 777  : 		dst[153] = 7;
; 778  : 
; 779  : 		Sleep (25);
; 780  : 	}
; 781  : 
; 782  : 	#endif
; 783  : 	return 0;

	xor	eax, eax

; 784  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?update_mono@@YGKPAX@Z ENDP				; update_mono
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_s$ = 8							; size = 4
?set_spinner3@@YAXH@Z PROC				; set_spinner3

; 670  : {

	push	ebp
	mov	ebp, esp

; 671  : 	if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN1@set_spinne

; 672  : 		return;

	jmp	SHORT $LN2@set_spinne
$LN1@set_spinne:

; 673  : 
; 674  : 	spinner3 = s;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _spinner3, eax
$LN2@set_spinne:

; 675  : #ifndef DISABLE_MONO_DISPLAY	   
; 676  : #if defined _TEXT_TGT_CONSOLE
; 677  : #elif defined _TEXT_TGT_TRACE
; 678  : #elif defined _TEXT_TGT_FILE
; 679  : #else
; 680  : 	char
; 681  : 		*dst;
; 682  : 
; 683  : 	dst = (char *) MONO_TEXT;
; 684  : 	dst[154] = spin[spinner3 & 3];;
; 685  : 	dst[155] = 7;
; 686  : #endif
; 687  : #endif
; 688  : }

	pop	ebp
	ret	0
?set_spinner3@@YAXH@Z ENDP				; set_spinner3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_s$ = 8							; size = 4
?set_spinner2@@YAXH@Z PROC				; set_spinner2

; 649  : {

	push	ebp
	mov	ebp, esp

; 650  : 	if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN1@set_spinne

; 651  : 		return;

	jmp	SHORT $LN2@set_spinne
$LN1@set_spinne:

; 652  : 
; 653  : 	spinner2 = s;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _spinner2, eax
$LN2@set_spinne:

; 654  : #ifndef DISABLE_MONO_DISPLAY	   
; 655  : #if defined _TEXT_TGT_CONSOLE
; 656  : #elif defined _TEXT_TGT_TRACE
; 657  : #elif defined _TEXT_TGT_FILE
; 658  : #else
; 659  : 	char
; 660  : 		*dst;
; 661  : 
; 662  : 	dst = (char *) MONO_TEXT;
; 663  : 	dst[154] = spin[spinner2 & 3];;
; 664  : 	dst[155] = 7;
; 665  : #endif
; 666  : #endif
; 667  : }

	pop	ebp
	ret	0
?set_spinner2@@YAXH@Z ENDP				; set_spinner2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_s$ = 8							; size = 4
?set_spinner1@@YAXH@Z PROC				; set_spinner1

; 627  : {

	push	ebp
	mov	ebp, esp

; 628  : 	if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN1@set_spinne

; 629  : 		return;

	jmp	SHORT $LN2@set_spinne
$LN1@set_spinne:

; 630  : 
; 631  : 	spinner1 = s;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _spinner1, eax
$LN2@set_spinne:

; 632  : 
; 633  : #ifndef DISABLE_MONO_DISPLAY	   
; 634  : #if defined _TEXT_TGT_CONSOLE
; 635  : #elif defined _TEXT_TGT_TRACE
; 636  : #elif defined _TEXT_TGT_FILE
; 637  : #else
; 638  : 	char
; 639  : 		*dst;
; 640  : 
; 641  : 	dst = (char *) MONO_TEXT;
; 642  : 	dst[156] = spin[spinner1 & 3];;
; 643  : 	dst[157] = 7;
; 644  : #endif
; 645  : #endif
; 646  : }

	pop	ebp
	ret	0
?set_spinner1@@YAXH@Z ENDP				; set_spinner1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_the_bit$ = -12						; size = 4
_the_byte$ = -8						; size = 4
_cur_val$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_WriteDebugPixel PROC

; 900  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 901  : int the_byte;
; 902  : int the_bit;
; 903  : char *cur_val;
; 904  : 
; 905  :    if ( x < 0 || y < 0 || x > (int)DebugScreenWidth || y > (int)DebugScreenHeight)

	cmp	DWORD PTR _x$[ebp], 0
	jl	SHORT $LN1@WriteDebug
	cmp	DWORD PTR _y$[ebp], 0
	jl	SHORT $LN1@WriteDebug
	cvttss2si eax, DWORD PTR _DebugScreenWidth
	cmp	DWORD PTR _x$[ebp], eax
	jg	SHORT $LN1@WriteDebug
	cvttss2si ecx, DWORD PTR _DebugScreenHeight
	cmp	DWORD PTR _y$[ebp], ecx
	jle	SHORT $LN2@WriteDebug
$LN1@WriteDebug:

; 906  :       return;

	jmp	SHORT $LN3@WriteDebug
$LN2@WriteDebug:

; 907  :    the_byte = 0x2000 * (y%4) + 90*(y/4) + x/8;

	mov	ecx, DWORD PTR _y$[ebp]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN5@WriteDebug
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN5@WriteDebug:
	shl	ecx, 13					; 0000000dH
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	imul	eax, 90					; 0000005aH
	add	ecx, eax
	mov	eax, DWORD PTR _x$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	ecx, eax
	mov	DWORD PTR _the_byte$[ebp], ecx

; 908  :    the_bit  = 7 - x%8;

	mov	edx, DWORD PTR _x$[ebp]
	and	edx, -2147483641			; 80000007H
	jns	SHORT $LN6@WriteDebug
	dec	edx
	or	edx, -8					; fffffff8H
	inc	edx
$LN6@WriteDebug:
	mov	eax, 7
	sub	eax, edx
	mov	DWORD PTR _the_bit$[ebp], eax

; 909  : 
; 910  :    cur_val = (char *)(screen_buffer[page] + the_byte);

	mov	ecx, DWORD PTR _page
	mov	edx, DWORD PTR _screen_buffer[ecx*4]
	add	edx, DWORD PTR _the_byte$[ebp]
	mov	DWORD PTR _cur_val$[ebp], edx

; 911  : #ifndef DISABLE_MONO_DISPLAY	   
; 912  :    *cur_val |= (char)(1 << the_bit);

	mov	eax, 1
	mov	ecx, DWORD PTR _the_bit$[ebp]
	shl	eax, cl
	movsx	ecx, al
	mov	edx, DWORD PTR _cur_val$[ebp]
	movsx	eax, BYTE PTR [edx]
	or	eax, ecx
	mov	ecx, DWORD PTR _cur_val$[ebp]
	mov	BYTE PTR [ecx], al
$LN3@WriteDebug:

; 913  : #endif
; 914  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_WriteDebugPixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_fSuccess$ = -8						; size = 4
_c$ = -1						; size = 1
_MonoScroll PROC

; 1102 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1103 :    if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN1@MonoScroll

; 1104 :       return;

	jmp	SHORT $LN2@MonoScroll
$LN1@MonoScroll:

; 1105 : 
; 1106 : #ifndef DISABLE_MONO_DISPLAY	   
; 1107 : #if defined _TEXT_TGT_CONSOLE
; 1108 : 	char c = '\n';	

	mov	BYTE PTR _c$[ebp], 10			; 0000000aH

; 1109 : 	BOOL fSuccess = WriteFile(hStdoutDbg, &c, 1, NULL, NULL);

	push	0
	push	0
	push	1
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?hStdoutDbg@@3PAXA	; hStdoutDbg
	push	ecx
	call	DWORD PTR __imp__WriteFile@20
	mov	DWORD PTR _fSuccess$[ebp], eax
$LN2@MonoScroll:

; 1110 : #elif defined _TEXT_TGT_TRACE
; 1111 : #elif defined _TEXT_TGT_FILE
; 1112 : #else
; 1113 :    memmove( (void *)mono_memory, (void *)(mono_memory + 160), (160*24) );
; 1114 :    memset( (void *)(mono_memory + (160*24)), 0, 160 );
; 1115 : #endif
; 1116 : #endif
; 1117 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MonoScroll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_fSuccess$ = -16					; size = 4
_cWritten$ = -12					; size = 4
_coord$ = -8						; size = 4
_chFillChar$ = -1					; size = 1
_MonoCls PROC

; 1150 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1151 :    if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN1@MonoCls

; 1152 :       return;

	jmp	SHORT $LN2@MonoCls
$LN1@MonoCls:

; 1153 : 
; 1154 : #ifndef DISABLE_MONO_DISPLAY	   
; 1155 : 
; 1156 : #if defined _TEXT_TGT_CONSOLE
; 1157 : 	COORD coord;
; 1158 :     coord.X = 0;            // start at first cell 

	xor	eax, eax
	mov	WORD PTR _coord$[ebp], ax

; 1159 :     coord.Y = 0;            //   of first row 

	xor	ecx, ecx
	mov	WORD PTR _coord$[ebp+2], cx

; 1160 :     char chFillChar = ' '; 

	mov	BYTE PTR _chFillChar$[ebp], 32		; 00000020H

; 1161 : 	DWORD cWritten = 0;

	mov	DWORD PTR _cWritten$[ebp], 0

; 1162 :  
; 1163 :     BOOL fSuccess = FillConsoleOutputCharacter( 
; 1164 :         hStdoutDbg,          // screen buffer handle 
; 1165 :         chFillChar,       // fill with spaces 
; 1166 :         80*25,            // number of cells to fill 
; 1167 :         coord,            // first cell to write to 
; 1168 :         &cWritten);       // actual number written 

	lea	edx, DWORD PTR _cWritten$[ebp]
	push	edx
	mov	eax, DWORD PTR _coord$[ebp]
	push	eax
	push	2000					; 000007d0H
	movzx	ecx, BYTE PTR _chFillChar$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?hStdoutDbg@@3PAXA	; hStdoutDbg
	push	edx
	call	DWORD PTR __imp__FillConsoleOutputCharacterA@20
	mov	DWORD PTR _fSuccess$[ebp], eax

; 1169 : #elif defined _TEXT_TGT_TRACE
; 1170 : #elif defined _TEXT_TGT_FILE
; 1171 : #else
; 1172 :    memset( (void *)mono_memory, 0, (160*25) );
; 1173 : #endif
; 1174 : #endif
; 1175 :    monoPenX = 0;

	mov	BYTE PTR _monoPenX, 0

; 1176 :    monoPenY = 0;

	mov	BYTE PTR _monoPenY, 0
$LN2@MonoCls:

; 1177 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MonoCls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_MonoGetLoc PROC

; 1131 : {

	push	ebp
	mov	ebp, esp

; 1132 :    *x = monoPenX;

	movzx	eax, BYTE PTR _monoPenX
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax

; 1133 :    *y = monoPenY;

	movzx	edx, BYTE PTR _monoPenY
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax], edx

; 1134 : }

	pop	ebp
	ret	0
_MonoGetLoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 1
_y$ = 12						; size = 1
_MonoLocate PROC

; 1120 : {

	push	ebp
	mov	ebp, esp

; 1121 :    if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN1@MonoLocate

; 1122 :       return;

	jmp	SHORT $LN2@MonoLocate
$LN1@MonoLocate:

; 1123 : 
; 1124 :    EnterCriticalSection (&mono_critical);

	push	OFFSET ?mono_critical@@3U_RTL_CRITICAL_SECTION@@A ; mono_critical
	call	DWORD PTR __imp__EnterCriticalSection@4

; 1125 :    monoPenX = x;

	mov	al, BYTE PTR _x$[ebp]
	mov	BYTE PTR _monoPenX, al

; 1126 :    monoPenY = y;

	mov	cl, BYTE PTR _y$[ebp]
	mov	BYTE PTR _monoPenY, cl

; 1127 :    LeaveCriticalSection (&mono_critical);

	push	OFFSET ?mono_critical@@3U_RTL_CRITICAL_SECTION@@A ; mono_critical
	call	DWORD PTR __imp__LeaveCriticalSection@4
$LN2@MonoLocate:

; 1128 : }

	pop	ebp
	ret	0
_MonoLocate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_idx$ = -52						; size = 4
_cb$1 = -48						; size = 4
_check$ = -44						; size = 4
_dwCursorPosition$ = -40				; size = 4
_params$ = -36						; size = 4
_b$ = -32						; size = 4
_csbi$2 = -28						; size = 22
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_MonoPrint PROC

; 972  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 973  : 	va_list params;   /* watcom manual 'Library' p.470 */
; 974  : 	int idx=0;

	mov	DWORD PTR _idx$[ebp], 0

; 975  : 	int   check;
; 976  : 	static char  _mono_buffer[1000];
; 977  : 	
; 978  : 	va_start( params, string );

	lea	eax, DWORD PTR _string$[ebp+4]
	mov	DWORD PTR _params$[ebp], eax

; 979  : 	
; 980  : 	if (graphicsMode != DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	je	SHORT $LN5@MonoPrint

; 981  : 		return;

	jmp	$LN6@MonoPrint
$LN5@MonoPrint:

; 982  : 	
; 983  : 	if( !string )

	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN4@MonoPrint

; 984  : 		return;

	jmp	$LN6@MonoPrint
$LN4@MonoPrint:

; 985  : 	
; 986  : 	EnterCriticalSection (&mono_critical);

	push	OFFSET ?mono_critical@@3U_RTL_CRITICAL_SECTION@@A ; mono_critical
	call	DWORD PTR __imp__EnterCriticalSection@4

; 987  : 	
; 988  : 	memset(mono_buffer, 0, sizeof(mono_buffer));

	push	4000					; 00000fa0H
	push	0
	push	OFFSET _mono_buffer
	call	_memset
	add	esp, 12					; 0000000cH

; 989  : 	check = vsprintf( _mono_buffer, string, params );

	mov	ecx, DWORD PTR _params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	push	OFFSET ?_mono_buffer@?1??MonoPrint@@9@4PADA
	call	_vsprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _check$[ebp], eax

; 990  : 	va_end( params );

	mov	DWORD PTR _params$[ebp], 0

; 991  : 
; 992  : //	FileOutput (_mono_buffer);
; 993  : 	
; 994  : #if defined _TEXT_TGT_CONSOLE
; 995  : 	COORD dwCursorPosition = { monoPenX, monoPenY };

	movzx	ax, BYTE PTR _monoPenX
	mov	WORD PTR _dwCursorPosition$[ebp], ax
	movzx	cx, BYTE PTR _monoPenY
	mov	WORD PTR _dwCursorPosition$[ebp+2], cx

; 996  : 	BOOL b = SetConsoleCursorPosition(hStdoutDbg, dwCursorPosition);

	mov	edx, DWORD PTR _dwCursorPosition$[ebp]
	push	edx
	mov	eax, DWORD PTR ?hStdoutDbg@@3PAXA	; hStdoutDbg
	push	eax
	call	DWORD PTR __imp__SetConsoleCursorPosition@8
	mov	DWORD PTR _b$[ebp], eax

; 997  : 
; 998  : 	if(b){

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN3@MonoPrint

; 999  : 		DWORD cb;
; 1000 : 		b = WriteConsole(hStdoutDbg, _mono_buffer, check, &cb, NULL);

	push	0
	lea	ecx, DWORD PTR _cb$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _check$[ebp]
	push	edx
	push	OFFSET ?_mono_buffer@?1??MonoPrint@@9@4PADA
	mov	eax, DWORD PTR ?hStdoutDbg@@3PAXA	; hStdoutDbg
	push	eax
	call	DWORD PTR __imp__WriteConsoleA@20
	mov	DWORD PTR _b$[ebp], eax

; 1001 : 
; 1002 : 		if(b){

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN3@MonoPrint

; 1003 : 			CONSOLE_SCREEN_BUFFER_INFO csbi;
; 1004 : 			b = GetConsoleScreenBufferInfo(hStdoutDbg, &csbi);

	lea	ecx, DWORD PTR _csbi$2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?hStdoutDbg@@3PAXA	; hStdoutDbg
	push	edx
	call	DWORD PTR __imp__GetConsoleScreenBufferInfo@8
	mov	DWORD PTR _b$[ebp], eax

; 1005 : 
; 1006 : 			if(b){

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN3@MonoPrint

; 1007 : 				monoPenX = (unsigned char) csbi.dwCursorPosition.X;

	mov	al, BYTE PTR _csbi$2[ebp+4]
	mov	BYTE PTR _monoPenX, al

; 1008 : 				monoPenY = (unsigned char) csbi.dwCursorPosition.Y;

	mov	cl, BYTE PTR _csbi$2[ebp+6]
	mov	BYTE PTR _monoPenY, cl
$LN3@MonoPrint:

; 1009 : 			}
; 1010 : 		}
; 1011 : 	}
; 1012 : #elif defined _TEXT_TGT_TRACE
; 1013 : 	if(_mono_buffer[check - 1] != '\n')
; 1014 : 		strcat(_mono_buffer, "\n");
; 1015 : 	OutputDebugString(_mono_buffer);
; 1016 : #elif defined _TEXT_TGT_FILE
; 1017 : 	if(_mono_buffer[check - 1] != '\n')
; 1018 : 	{
; 1019 : 		strcat(_mono_buffer, "\n");
; 1020 : 		check++;
; 1021 : 	}
; 1022 : 
; 1023 : 	DWORD cb;
; 1024 : 	WriteFile(hFileDbg, _mono_buffer, check, &cb, NULL);
; 1025 : #else
; 1026 : 	unsigned char  *mem_loc;
; 1027 : 	mem_loc = (unsigned char *)( monoPenY * 160 + monoPenX * 2 + mono_memory);
; 1028 : 	
; 1029 : 	while( _mono_buffer[idx] )
; 1030 : 	{
; 1031 : 		if( _mono_buffer[idx] == '\n' )
; 1032 : 		{
; 1033 : 			mem_loc = MonoNewline();
; 1034 : 			++idx;
; 1035 : 		}
; 1036 : 		else
; 1037 : 		{
; 1038 : #ifndef DISABLE_MONO_DISPLAY	   
; 1039 : 			*(mem_loc++) = _mono_buffer[idx];
; 1040 : 			*(mem_loc++) = ( unsigned char ) monoPenattribute;
; 1041 : #endif
; 1042 : 			idx++;
; 1043 : 			
; 1044 : 			if( (++monoPenX) > 79 )
; 1045 : 			{
; 1046 : 				mem_loc = MonoNewline();
; 1047 : 			}
; 1048 : 		}
; 1049 : 	}
; 1050 : #endif
; 1051 : 
; 1052 : 	LeaveCriticalSection (&mono_critical);

	push	OFFSET ?mono_critical@@3U_RTL_CRITICAL_SECTION@@A ; mono_critical
	call	DWORD PTR __imp__LeaveCriticalSection@4
$LN6@MonoPrint:

; 1053 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_MonoPrint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_DebugClear PROC

; 937  : {

	push	ebp
	mov	ebp, esp

; 938  :    if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN1@DebugClear

; 939  :       return;

	jmp	SHORT $LN2@DebugClear
$LN1@DebugClear:

; 940  : 
; 941  : #ifndef DISABLE_MONO_DISPLAY	   
; 942  :    memset ((void *)screen_buffer[page], 0, 0x8000);

	push	32768					; 00008000H
	push	0
	mov	eax, DWORD PTR _page
	mov	ecx, DWORD PTR _screen_buffer[eax*4]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@DebugClear:

; 943  : #endif
; 944  : }

	pop	ebp
	ret	0
_DebugClear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
_DebugSwapbuffer PROC

; 917  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 918  : int i;
; 919  :  
; 920  : 	if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN5@DebugSwapb

; 921  : 	   return;

	jmp	SHORT $LN6@DebugSwapb
$LN5@DebugSwapb:

; 922  : 
; 923  :    for (i=0; i<0x8000; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@DebugSwapb
$LN3@DebugSwapb:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@DebugSwapb:
	cmp	DWORD PTR _i$[ebp], 32768		; 00008000H
	jge	SHORT $LN2@DebugSwapb

; 924  :    {
; 925  :       if (*((char *)(screen_buffer[page] + i)) !=
; 926  :           *((char *)(screen_buffer[1-page] + i)))

	mov	ecx, DWORD PTR _page
	mov	edx, DWORD PTR _screen_buffer[ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	sub	edx, DWORD PTR _page
	mov	eax, DWORD PTR _screen_buffer[edx*4]
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR [eax+edx]
	cmp	ecx, eax
	je	SHORT $LN1@DebugSwapb

; 927  :          {
; 928  : #ifndef DISABLE_MONO_DISPLAY	   
; 929  :          *((char *)(MONO_TEXT + i)) = *((char *)(screen_buffer[page] + i));

	mov	ecx, DWORD PTR _page
	mov	edx, DWORD PTR _screen_buffer[ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [eax+720896], dl
$LN1@DebugSwapb:

; 930  : #endif
; 931  :          }
; 932  :    }

	jmp	SHORT $LN3@DebugSwapb
$LN2@DebugSwapb:

; 933  :    page = 1 - page;

	mov	eax, 1
	sub	eax, DWORD PTR _page
	mov	DWORD PTR _page, eax
$LN6@DebugSwapb:

; 934  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DebugSwapbuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_dse$ = -28						; size = 4
_de$ = -24						; size = 4
_d$ = -20						; size = 4
_y2$ = -16						; size = 4
_x2$ = -12						; size = 4
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_x_center$ = 8						; size = 4
_y_center$ = 12						; size = 4
_radius$ = 16						; size = 4
_DisplayDebugCircle PROC

; 507  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 508  : int x, y, d, de , dse;
; 509  : int x2, y2;
; 510  : 
; 511  :    if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN5@DisplayDeb

; 512  :       return;

	jmp	$LN6@DisplayDeb
$LN5@DisplayDeb:

; 513  : 
; 514  :    x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 515  :    y = radius;

	mov	eax, DWORD PTR _radius$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 516  :    d = 1 - y;

	mov	ecx, 1
	sub	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 517  :    de = 3;

	mov	DWORD PTR _de$[ebp], 3

; 518  :    dse = -2 * y + 5;

	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, -2					; fffffffeH
	add	edx, 5
	mov	DWORD PTR _dse$[ebp], edx

; 519  :    x2 = (int)((float)x * DebugScreenWidth/DebugScreenHeight * ASPECT_RATIO);

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _DebugScreenWidth
	divss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f466666
	cvttss2si eax, xmm0
	mov	DWORD PTR _x2$[ebp], eax

; 520  :    WriteDebugPixel (x2+x_center, y+y_center);

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$[ebp]
	add	edx, DWORD PTR _x_center$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8

; 521  :    WriteDebugPixel (-x2+x_center, y+y_center);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _y_center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x2$[ebp]
	neg	ecx
	add	ecx, DWORD PTR _x_center$[ebp]
	push	ecx
	call	_WriteDebugPixel
	add	esp, 8

; 522  :    WriteDebugPixel (-x2+x_center, -y+y_center);

	mov	edx, DWORD PTR _y$[ebp]
	neg	edx
	add	edx, DWORD PTR _y_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$[ebp]
	neg	eax
	add	eax, DWORD PTR _x_center$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8

; 523  :    WriteDebugPixel (x2+x_center, -y+y_center);

	mov	ecx, DWORD PTR _y$[ebp]
	neg	ecx
	add	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$[ebp]
	add	edx, DWORD PTR _x_center$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8

; 524  :    y2 = (int)((float)y * DebugScreenWidth/DebugScreenHeight * ASPECT_RATIO);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _DebugScreenWidth
	divss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f466666
	cvttss2si eax, xmm0
	mov	DWORD PTR _y2$[ebp], eax

; 525  :    WriteDebugPixel (y2+x_center, x+y_center);

	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y2$[ebp]
	add	edx, DWORD PTR _x_center$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8

; 526  :    WriteDebugPixel (-y2+x_center, x+y_center);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _y_center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y2$[ebp]
	neg	ecx
	add	ecx, DWORD PTR _x_center$[ebp]
	push	ecx
	call	_WriteDebugPixel
	add	esp, 8

; 527  :    WriteDebugPixel (-y2+x_center, -x+y_center);

	mov	edx, DWORD PTR _x$[ebp]
	neg	edx
	add	edx, DWORD PTR _y_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _y2$[ebp]
	neg	eax
	add	eax, DWORD PTR _x_center$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8

; 528  :    WriteDebugPixel (y2+x_center, -x+y_center);

	mov	ecx, DWORD PTR _x$[ebp]
	neg	ecx
	add	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y2$[ebp]
	add	edx, DWORD PTR _x_center$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8
$LN4@DisplayDeb:

; 529  : 
; 530  :    while ( y > x)

	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	jle	$LN3@DisplayDeb

; 531  :    {
; 532  :       if (d < 0)

	cmp	DWORD PTR _d$[ebp], 0
	jge	SHORT $LN2@DisplayDeb

; 533  :       {
; 534  :          d += de;

	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _de$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 535  :          de += 2;

	mov	edx, DWORD PTR _de$[ebp]
	add	edx, 2
	mov	DWORD PTR _de$[ebp], edx

; 536  :          dse += 2;

	mov	eax, DWORD PTR _dse$[ebp]
	add	eax, 2
	mov	DWORD PTR _dse$[ebp], eax

; 537  :          x ++;

	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx

; 538  :       }
; 539  :       else

	jmp	SHORT $LN1@DisplayDeb
$LN2@DisplayDeb:

; 540  :       {
; 541  :          d += dse;

	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _dse$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 542  :          de += 2;

	mov	eax, DWORD PTR _de$[ebp]
	add	eax, 2
	mov	DWORD PTR _de$[ebp], eax

; 543  :          dse += 4;

	mov	ecx, DWORD PTR _dse$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dse$[ebp], ecx

; 544  :          x++;

	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 1
	mov	DWORD PTR _x$[ebp], edx

; 545  :          y--;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN1@DisplayDeb:

; 546  :       }
; 547  : 
; 548  :       x2 = (int)((float)x * DebugScreenWidth/DebugScreenHeight * ASPECT_RATIO);

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _DebugScreenWidth
	divss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f466666
	cvttss2si ecx, xmm0
	mov	DWORD PTR _x2$[ebp], ecx

; 549  :       WriteDebugPixel (x2+x_center, y+y_center);

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _y_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$[ebp]
	add	eax, DWORD PTR _x_center$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8

; 550  :       WriteDebugPixel (-x2+x_center, y+y_center);

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$[ebp]
	neg	edx
	add	edx, DWORD PTR _x_center$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8

; 551  :       WriteDebugPixel (-x2+x_center, -y+y_center);

	mov	eax, DWORD PTR _y$[ebp]
	neg	eax
	add	eax, DWORD PTR _y_center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x2$[ebp]
	neg	ecx
	add	ecx, DWORD PTR _x_center$[ebp]
	push	ecx
	call	_WriteDebugPixel
	add	esp, 8

; 552  :       WriteDebugPixel (x2+x_center, -y+y_center);

	mov	edx, DWORD PTR _y$[ebp]
	neg	edx
	add	edx, DWORD PTR _y_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$[ebp]
	add	eax, DWORD PTR _x_center$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8

; 553  :       y2 = (int)((float)y * DebugScreenWidth/DebugScreenHeight * ASPECT_RATIO);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _DebugScreenWidth
	divss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f466666
	cvttss2si ecx, xmm0
	mov	DWORD PTR _y2$[ebp], ecx

; 554  :       WriteDebugPixel (y2+x_center, x+y_center);

	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _y_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _y2$[ebp]
	add	eax, DWORD PTR _x_center$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8

; 555  :       WriteDebugPixel (-y2+x_center, x+y_center);

	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	add	edx, DWORD PTR _x_center$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8

; 556  :       WriteDebugPixel (-y2+x_center, -x+y_center);

	mov	eax, DWORD PTR _x$[ebp]
	neg	eax
	add	eax, DWORD PTR _y_center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y2$[ebp]
	neg	ecx
	add	ecx, DWORD PTR _x_center$[ebp]
	push	ecx
	call	_WriteDebugPixel
	add	esp, 8

; 557  :       WriteDebugPixel (y2+x_center, -x+y_center);

	mov	edx, DWORD PTR _x$[ebp]
	neg	edx
	add	edx, DWORD PTR _y_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _y2$[ebp]
	add	eax, DWORD PTR _x_center$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8

; 558  :    }

	jmp	$LN4@DisplayDeb
$LN3@DisplayDeb:
$LN6@DisplayDeb:

; 559  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayDebugCircle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_incne$ = -32						; size = 4
_ince$ = -28						; size = 4
_pixcount$ = -24					; size = 4
_dx$ = -20						; size = 4
_dy$ = -16						; size = 4
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_d$ = -4						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_DisplayDebugLine PROC

; 381  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 382  : int dx, dy, ince, incne;
; 383  : int d, x, y, pixcount;
; 384  : 
; 385  :    if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN27@DisplayDeb

; 386  :       return;

	jmp	$LN28@DisplayDeb
$LN27@DisplayDeb:

; 387  : 
; 388  :    dx = x1 - x0;

	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _dx$[ebp], eax

; 389  :    dy = y1 - y0;

	mov	ecx, DWORD PTR _y1$[ebp]
	sub	ecx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _dy$[ebp], ecx

; 390  :    x = x0;

	mov	edx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], edx

; 391  :    y = y0;

	mov	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 392  :    pixcount = 0;

	mov	DWORD PTR _pixcount$[ebp], 0

; 393  : 
; 394  :    if (dy >= 0 && dy<= dx)

	cmp	DWORD PTR _dy$[ebp], 0
	jl	$LN26@DisplayDeb
	mov	ecx, DWORD PTR _dy$[ebp]
	cmp	ecx, DWORD PTR _dx$[ebp]
	jg	$LN26@DisplayDeb

; 395  :    {
; 396  :       d = 2*dy - dx;

	mov	edx, DWORD PTR _dy$[ebp]
	shl	edx, 1
	sub	edx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 397  :       ince = 2 * dy;

	mov	eax, DWORD PTR _dy$[ebp]
	shl	eax, 1
	mov	DWORD PTR _ince$[ebp], eax

; 398  :       incne = 2 * (dy-dx);

	mov	ecx, DWORD PTR _dy$[ebp]
	sub	ecx, DWORD PTR _dx$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _incne$[ebp], ecx

; 399  :       WriteDebugPixel (x, y);

	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8
$LN25@DisplayDeb:

; 400  :       while (x < x1)

	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR _x1$[ebp]
	jge	SHORT $LN24@DisplayDeb

; 401  :       {
; 402  :          if (d <= 0)

	cmp	DWORD PTR _d$[ebp], 0
	jg	SHORT $LN23@DisplayDeb

; 403  :          {
; 404  :             d += ince;

	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _ince$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 405  :             x ++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 406  :          }
; 407  :          else

	jmp	SHORT $LN22@DisplayDeb
$LN23@DisplayDeb:

; 408  :          {
; 409  :             d += incne;

	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _incne$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 410  :             x ++;

	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 1
	mov	DWORD PTR _x$[ebp], edx

; 411  :             y ++;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN22@DisplayDeb:

; 412  :          }
; 413  :          if (styles[linestyle] & (1 <<(pixcount % 16)))

	mov	ecx, DWORD PTR _pixcount$[ebp]
	and	ecx, -2147483633			; 8000000fH
	jns	SHORT $LN30@DisplayDeb
	dec	ecx
	or	ecx, -16				; fffffff0H
	inc	ecx
$LN30@DisplayDeb:
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _linestyle
	and	edx, DWORD PTR _styles[eax*4]
	je	SHORT $LN21@DisplayDeb

; 414  :             WriteDebugPixel (x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8
$LN21@DisplayDeb:

; 415  :          pixcount ++;

	mov	eax, DWORD PTR _pixcount$[ebp]
	add	eax, 1
	mov	DWORD PTR _pixcount$[ebp], eax

; 416  :       }

	jmp	SHORT $LN25@DisplayDeb
$LN24@DisplayDeb:

; 417  :    }
; 418  :    else if (dy < 0 && -dy < dx)

	jmp	$LN28@DisplayDeb
$LN26@DisplayDeb:
	cmp	DWORD PTR _dy$[ebp], 0
	jge	$LN19@DisplayDeb
	mov	ecx, DWORD PTR _dy$[ebp]
	neg	ecx
	cmp	ecx, DWORD PTR _dx$[ebp]
	jge	$LN19@DisplayDeb

; 419  :    {
; 420  :       d = -2*dy - dx;

	mov	edx, DWORD PTR _dy$[ebp]
	imul	edx, -2					; fffffffeH
	sub	edx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 421  :       ince = -2 * dy;

	mov	eax, DWORD PTR _dy$[ebp]
	imul	eax, -2					; fffffffeH
	mov	DWORD PTR _ince$[ebp], eax

; 422  :       incne = 2 * (-dy-dx);

	mov	ecx, DWORD PTR _dy$[ebp]
	neg	ecx
	sub	ecx, DWORD PTR _dx$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _incne$[ebp], ecx
$LN18@DisplayDeb:

; 423  :       while (x < x1)

	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _x1$[ebp]
	jge	SHORT $LN17@DisplayDeb

; 424  :       {
; 425  :          if (d <= 0)

	cmp	DWORD PTR _d$[ebp], 0
	jg	SHORT $LN16@DisplayDeb

; 426  :          {
; 427  :             d += ince;

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _ince$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 428  :             x ++;

	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx

; 429  :          }
; 430  :          else

	jmp	SHORT $LN15@DisplayDeb
$LN16@DisplayDeb:

; 431  :          {
; 432  :             d += incne;

	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _incne$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 433  :             x ++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 434  :             y --;

	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN15@DisplayDeb:

; 435  :          }
; 436  :          if (styles[linestyle] & (1 <<(pixcount % 16)))

	mov	ecx, DWORD PTR _pixcount$[ebp]
	and	ecx, -2147483633			; 8000000fH
	jns	SHORT $LN31@DisplayDeb
	dec	ecx
	or	ecx, -16				; fffffff0H
	inc	ecx
$LN31@DisplayDeb:
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _linestyle
	and	edx, DWORD PTR _styles[eax*4]
	je	SHORT $LN14@DisplayDeb

; 437  :             WriteDebugPixel (x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8
$LN14@DisplayDeb:

; 438  :          pixcount ++;

	mov	eax, DWORD PTR _pixcount$[ebp]
	add	eax, 1
	mov	DWORD PTR _pixcount$[ebp], eax

; 439  :       }

	jmp	SHORT $LN18@DisplayDeb
$LN17@DisplayDeb:

; 440  :    }
; 441  :    else if (dx >=0 && dy >= 0)

	jmp	$LN28@DisplayDeb
$LN19@DisplayDeb:
	cmp	DWORD PTR _dx$[ebp], 0
	jl	$LN12@DisplayDeb
	cmp	DWORD PTR _dy$[ebp], 0
	jl	$LN12@DisplayDeb

; 442  :    {
; 443  :       d = 2*dx - dy;

	mov	ecx, DWORD PTR _dx$[ebp]
	shl	ecx, 1
	sub	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 444  :       ince = 2 * dx;

	mov	edx, DWORD PTR _dx$[ebp]
	shl	edx, 1
	mov	DWORD PTR _ince$[ebp], edx

; 445  :       incne = 2 * (dx-dy);

	mov	eax, DWORD PTR _dx$[ebp]
	sub	eax, DWORD PTR _dy$[ebp]
	shl	eax, 1
	mov	DWORD PTR _incne$[ebp], eax

; 446  :       WriteDebugPixel (x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8
$LN11@DisplayDeb:

; 447  :       while (y < y1)

	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jge	SHORT $LN10@DisplayDeb

; 448  :       {
; 449  :          if (d <= 0)

	cmp	DWORD PTR _d$[ebp], 0
	jg	SHORT $LN9@DisplayDeb

; 450  :          {
; 451  :             d += ince;

	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _ince$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 452  :             y ++;

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx

; 453  :          }
; 454  :          else

	jmp	SHORT $LN8@DisplayDeb
$LN9@DisplayDeb:

; 455  :          {
; 456  :             x ++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 457  :             d += incne;

	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _incne$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 458  :             y ++;

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN8@DisplayDeb:

; 459  :          }
; 460  :          if (styles[linestyle] & (1 <<(pixcount % 16)))

	mov	ecx, DWORD PTR _pixcount$[ebp]
	and	ecx, -2147483633			; 8000000fH
	jns	SHORT $LN32@DisplayDeb
	dec	ecx
	or	ecx, -16				; fffffff0H
	inc	ecx
$LN32@DisplayDeb:
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _linestyle
	and	eax, DWORD PTR _styles[ecx*4]
	je	SHORT $LN7@DisplayDeb

; 461  :             WriteDebugPixel (x, y);

	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8
$LN7@DisplayDeb:

; 462  :          pixcount ++;

	mov	ecx, DWORD PTR _pixcount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pixcount$[ebp], ecx

; 463  :       }

	jmp	SHORT $LN11@DisplayDeb
$LN10@DisplayDeb:

; 464  :    }
; 465  :    else

	jmp	$LN28@DisplayDeb
$LN12@DisplayDeb:

; 466  :    {
; 467  :       d = 2*dx + dy;

	mov	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _dy$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _d$[ebp], ecx

; 468  :       ince = 2 * dx;

	mov	edx, DWORD PTR _dx$[ebp]
	shl	edx, 1
	mov	DWORD PTR _ince$[ebp], edx

; 469  :       incne = 2 * (dx+dy);

	mov	eax, DWORD PTR _dx$[ebp]
	add	eax, DWORD PTR _dy$[ebp]
	shl	eax, 1
	mov	DWORD PTR _incne$[ebp], eax

; 470  :       WriteDebugPixel (x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8
$LN5@DisplayDeb:

; 471  :       while (y > y1)

	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jle	SHORT $LN28@DisplayDeb

; 472  :       {
; 473  :          if (d <= 0)

	cmp	DWORD PTR _d$[ebp], 0
	jg	SHORT $LN3@DisplayDeb

; 474  :          {
; 475  :             d += ince;

	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _ince$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 476  :             y --;

	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, 1
	mov	DWORD PTR _y$[ebp], edx

; 477  :          }
; 478  :          else

	jmp	SHORT $LN2@DisplayDeb
$LN3@DisplayDeb:

; 479  :          {
; 480  :             d += incne;

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _incne$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 481  :             y --;

	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx

; 482  :             x ++;

	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 1
	mov	DWORD PTR _x$[ebp], edx
$LN2@DisplayDeb:

; 483  :          }
; 484  :          if (styles[linestyle] & (1 <<(pixcount % 16)))

	mov	ecx, DWORD PTR _pixcount$[ebp]
	and	ecx, -2147483633			; 8000000fH
	jns	SHORT $LN33@DisplayDeb
	dec	ecx
	or	ecx, -16				; fffffff0H
	inc	ecx
$LN33@DisplayDeb:
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _linestyle
	and	eax, DWORD PTR _styles[ecx*4]
	je	SHORT $LN1@DisplayDeb

; 485  :             WriteDebugPixel (x, y);

	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_WriteDebugPixel
	add	esp, 8
$LN1@DisplayDeb:

; 486  :          pixcount ++;

	mov	ecx, DWORD PTR _pixcount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pixcount$[ebp], ecx

; 487  :       }

	jmp	SHORT $LN5@DisplayDeb
$LN28@DisplayDeb:

; 488  :    }
; 489  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayDebugLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_x_center$ = -40					; size = 4
_y_center$ = -36					; size = 4
_y1in$ = -32						; size = 4
_x1in$ = -28						; size = 4
tv92 = -24						; size = 4
tv91 = -20						; size = 4
tv84 = -16						; size = 4
tv78 = -12						; size = 4
tv77 = -8						; size = 4
tv70 = -4						; size = 4
_xin$ = 8						; size = 4
_yin$ = 12						; size = 4
_radius$ = 16						; size = 4
_DrawDebugCircle PROC

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 493  : float x1in, y1in;
; 494  : int x_center, y_center;
; 495  : 
; 496  :    xin *= ASPECT_RATIO;

	movss	xmm0, DWORD PTR _xin$[ebp]
	mulss	xmm0, DWORD PTR __real@3f466666
	movss	DWORD PTR _xin$[ebp], xmm0

; 497  : 
; 498  :    x1in = min ( max (xin + x_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _xin$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN3@DrawDebugC
	movss	xmm0, DWORD PTR _xin$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv70[ebp], xmm0
	jmp	SHORT $LN4@DrawDebugC
$LN3@DrawDebugC:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv70[ebp], xmm0
$LN4@DrawDebugC:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv70[ebp]
	jbe	SHORT $LN7@DrawDebugC
	movss	xmm0, DWORD PTR _xin$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN5@DrawDebugC
	movss	xmm0, DWORD PTR _xin$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN6@DrawDebugC
$LN5@DrawDebugC:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv77[ebp], xmm0
$LN6@DrawDebugC:
	movss	xmm0, DWORD PTR tv77[ebp]
	movss	DWORD PTR tv78[ebp], xmm0
	jmp	SHORT $LN8@DrawDebugC
$LN7@DrawDebugC:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv78[ebp], xmm0
$LN8@DrawDebugC:
	movss	xmm0, DWORD PTR tv78[ebp]
	movss	DWORD PTR _x1in$[ebp], xmm0

; 499  :    y1in = min ( max (yin + y_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _yin$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN9@DrawDebugC
	movss	xmm0, DWORD PTR _yin$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv84[ebp], xmm0
	jmp	SHORT $LN10@DrawDebugC
$LN9@DrawDebugC:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv84[ebp], xmm0
$LN10@DrawDebugC:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv84[ebp]
	jbe	SHORT $LN13@DrawDebugC
	movss	xmm0, DWORD PTR _yin$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN11@DrawDebugC
	movss	xmm0, DWORD PTR _yin$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN12@DrawDebugC
$LN11@DrawDebugC:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv91[ebp], xmm0
$LN12@DrawDebugC:
	movss	xmm0, DWORD PTR tv91[ebp]
	movss	DWORD PTR tv92[ebp], xmm0
	jmp	SHORT $LN14@DrawDebugC
$LN13@DrawDebugC:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv92[ebp], xmm0
$LN14@DrawDebugC:
	movss	xmm0, DWORD PTR tv92[ebp]
	movss	DWORD PTR _y1in$[ebp], xmm0

; 500  :    x_center = (int)(DebugScreenWidth * 0.5F * (1.0F + x1in));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR _x_center$[ebp], eax

; 501  :    y_center = (int)(DebugScreenHeight * 0.5F * (1.0F - y1in));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _y_center$[ebp], ecx

; 502  : 
; 503  :    DisplayDebugCircle (x_center, y_center, (int)(DebugScreenHeight * 0.5F * radius));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _radius$[ebp]
	cvttss2si edx, xmm0
	push	edx
	mov	eax, DWORD PTR _y_center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_center$[ebp]
	push	ecx
	call	_DisplayDebugCircle
	add	esp, 12					; 0000000cH

; 504  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DrawDebugCircle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_x0$ = -24						; size = 4
_y0$ = -20						; size = 4
_x1$ = -16						; size = 4
_y1$ = -12						; size = 4
_y2$ = -8						; size = 4
_x2$ = -4						; size = 4
_x1in$ = 8						; size = 4
_y1in$ = 12						; size = 4
_x2in$ = 16						; size = 4
_y2in$ = 20						; size = 4
_DrawDebugLine PROC

; 348  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 349  : int x0, y0, x1, y1;
; 350  : float x2, y2;
; 351  : 
; 352  :    x2 = x1in * matrix00 + y1in * matrix01;

	movss	xmm0, DWORD PTR _x1in$[ebp]
	mulss	xmm0, DWORD PTR _matrix00
	movss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm1, DWORD PTR _matrix01
	addss	xmm0, xmm1
	movss	DWORD PTR _x2$[ebp], xmm0

; 353  :    y2 = x1in * matrix10 + y1in * matrix11;

	movss	xmm0, DWORD PTR _x1in$[ebp]
	mulss	xmm0, DWORD PTR _matrix10
	movss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm1, DWORD PTR _matrix11
	addss	xmm0, xmm1
	movss	DWORD PTR _y2$[ebp], xmm0

; 354  :    x1in = x2 + x_offset;

	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR _x1in$[ebp], xmm0

; 355  :    y1in = y2 + y_offset;

	movss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR _y1in$[ebp], xmm0

; 356  : 
; 357  :    x2 = x2in * matrix00 + y2in * matrix01;

	movss	xmm0, DWORD PTR _x2in$[ebp]
	mulss	xmm0, DWORD PTR _matrix00
	movss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm1, DWORD PTR _matrix01
	addss	xmm0, xmm1
	movss	DWORD PTR _x2$[ebp], xmm0

; 358  :    y2 = x2in * matrix10 + y2in * matrix11;

	movss	xmm0, DWORD PTR _x2in$[ebp]
	mulss	xmm0, DWORD PTR _matrix10
	movss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm1, DWORD PTR _matrix11
	addss	xmm0, xmm1
	movss	DWORD PTR _y2$[ebp], xmm0

; 359  :    x2in = x2 + x_offset;

	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR _x2in$[ebp], xmm0

; 360  :    y2in = y2 + y_offset;

	movss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR _y2in$[ebp], xmm0

; 361  : 
; 362  :    if (x1in <= x2in)

	movss	xmm0, DWORD PTR _x2in$[ebp]
	comiss	xmm0, DWORD PTR _x1in$[ebp]
	jb	$LN2@DrawDebugL

; 363  :    {        
; 364  :       x0 = (int)(DebugScreenWidth * 0.5F * (1.0F + x1in * ASPECT_RATIO));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _x1in$[ebp]
	mulss	xmm1, DWORD PTR __real@3f466666
	addss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR _x0$[ebp], eax

; 365  :       y0 = (int)(DebugScreenHeight * 0.5F * (1.0F - y1in));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _y0$[ebp], ecx

; 366  :       x1 = (int)(DebugScreenWidth * 0.5F * (1.0F + x2in * ASPECT_RATIO));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _x2in$[ebp]
	mulss	xmm1, DWORD PTR __real@3f466666
	addss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	DWORD PTR _x1$[ebp], edx

; 367  :       y1 = (int)(DebugScreenHeight * 0.5F * (1.0F - y2in));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR _y1$[ebp], eax

; 368  :    }
; 369  :    else

	jmp	$LN1@DrawDebugL
$LN2@DrawDebugL:

; 370  :    {        
; 371  :       x0 = (int)(DebugScreenWidth * 0.5F * (1.0F + x2in * ASPECT_RATIO));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _x2in$[ebp]
	mulss	xmm1, DWORD PTR __real@3f466666
	addss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _x0$[ebp], ecx

; 372  :       y0 = (int)(DebugScreenHeight * 0.5F * (1.0F - y2in));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	DWORD PTR _y0$[ebp], edx

; 373  :       x1 = (int)(DebugScreenWidth * 0.5F * (1.0F + x1in * ASPECT_RATIO));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _x1in$[ebp]
	mulss	xmm1, DWORD PTR __real@3f466666
	addss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR _x1$[ebp], eax

; 374  :       y1 = (int)(DebugScreenHeight * 0.5F * (1.0F - y1in));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _y1$[ebp], ecx
$LN1@DrawDebugL:

; 375  :    }
; 376  : 
; 377  :    DisplayDebugLine (x0, y0, x1, y1);

	mov	edx, DWORD PTR _y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 378  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DrawDebugLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
tv74 = -8						; size = 4
tv71 = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_str$ = 16						; size = 4
_DisplayDebugString PROC

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
$LN2@DisplayDeb:

; 341  :    while (*str)

	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@DisplayDeb

; 342  :    {
; 343  :       DisplayDebugCharacter ((int)(toupper(*str++) - ','), col, row );

	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	call	_toupper
	add	esp, 4
	sub	eax, 44					; 0000002cH
	mov	DWORD PTR tv74[ebp], eax
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	call	_DisplayDebugCharacter
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx

; 344  :       col += CHAR_WIDTH;

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 6
	mov	DWORD PTR _col$[ebp], eax

; 345  :    }

	jmp	SHORT $LN2@DisplayDeb
$LN3@DisplayDeb:

; 346  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayDebugString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
tv69 = -12						; size = 4
tv68 = -8						; size = 4
tv65 = -4						; size = 4
_style$ = 8						; size = 4
_SetDebugLineStyle PROC

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 226  :    linestyle = max ( min (style, MAX_STYLE), 0);

	cmp	DWORD PTR _style$[ebp], 1
	jge	SHORT $LN3@SetDebugLi
	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@SetDebugLi
$LN3@SetDebugLi:
	mov	DWORD PTR tv65[ebp], 1
$LN4@SetDebugLi:
	cmp	DWORD PTR tv65[ebp], 0
	jle	SHORT $LN7@SetDebugLi
	cmp	DWORD PTR _style$[ebp], 1
	jge	SHORT $LN5@SetDebugLi
	mov	ecx, DWORD PTR _style$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN6@SetDebugLi
$LN5@SetDebugLi:
	mov	DWORD PTR tv68[ebp], 1
$LN6@SetDebugLi:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN8@SetDebugLi
$LN7@SetDebugLi:
	mov	DWORD PTR tv69[ebp], 0
$LN8@SetDebugLi:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _linestyle, eax

; 227  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SetDebugLineStyle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_ResetTranslateDebug2D PROC

; 238  : {

	push	ebp
	mov	ebp, esp

; 239  :    x_offset = y_offset = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y_offset, xmm0
	movss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR _x_offset, xmm0

; 240  : }

	pop	ebp
	ret	0
_ResetTranslateDebug2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_TranslateDebug2D PROC

; 243  : {

	push	ebp
	mov	ebp, esp

; 244  :    x_offset += x;

	movss	xmm0, DWORD PTR _x_offset
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x_offset, xmm0

; 245  :    y_offset += y;

	movss	xmm0, DWORD PTR _y_offset
	addss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y_offset, xmm0

; 246  : }

	pop	ebp
	ret	0
_TranslateDebug2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_ResetRotateDebug2D PROC

; 230  : {

	push	ebp
	mov	ebp, esp

; 231  :    matrix00 = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _matrix00, xmm0

; 232  :    matrix01 = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _matrix01, xmm0

; 233  :    matrix10 = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _matrix10, xmm0

; 234  :    matrix11 = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _matrix11, xmm0

; 235  : }

	pop	ebp
	ret	0
_ResetRotateDebug2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_d$ = -36						; size = 4
_c$ = -32						; size = 4
_b$ = -28						; size = 4
_a$ = -24						; size = 4
tv93 = -20						; size = 4
_tmp11$ = -16						; size = 4
_tmp10$ = -12						; size = 4
_tmp01$ = -8						; size = 4
_tmp00$ = -4						; size = 4
_angle$ = 8						; size = 4
_RotateDebug2D PROC

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 250  : float tmp00, tmp01, tmp10, tmp11;
; 251  : float a, b, c, d;
; 252  : 
; 253  :    tmp00 = (float)cos(angle * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _tmp00$[ebp]

; 254  :    tmp01 = -(float)sin(angle * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv93[ebp]
	movss	xmm0, DWORD PTR tv93[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _tmp01$[ebp], xmm0

; 255  :    tmp10 = -tmp01;

	movss	xmm0, DWORD PTR _tmp01$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _tmp10$[ebp], xmm0

; 256  :    tmp11 = tmp00;

	movss	xmm0, DWORD PTR _tmp00$[ebp]
	movss	DWORD PTR _tmp11$[ebp], xmm0

; 257  : 
; 258  :    a = matrix00 * tmp00 + matrix01 * tmp10;

	movss	xmm0, DWORD PTR _matrix00
	mulss	xmm0, DWORD PTR _tmp00$[ebp]
	movss	xmm1, DWORD PTR _matrix01
	mulss	xmm1, DWORD PTR _tmp10$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _a$[ebp], xmm0

; 259  :    b = matrix00 * tmp01 + matrix01 * tmp11;

	movss	xmm0, DWORD PTR _matrix00
	mulss	xmm0, DWORD PTR _tmp01$[ebp]
	movss	xmm1, DWORD PTR _matrix01
	mulss	xmm1, DWORD PTR _tmp11$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _b$[ebp], xmm0

; 260  : 
; 261  :    c = matrix10 * tmp00 + matrix11 * tmp10;

	movss	xmm0, DWORD PTR _matrix10
	mulss	xmm0, DWORD PTR _tmp00$[ebp]
	movss	xmm1, DWORD PTR _matrix11
	mulss	xmm1, DWORD PTR _tmp10$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _c$[ebp], xmm0

; 262  :    d = matrix10 * tmp01 + matrix11 * tmp11;

	movss	xmm0, DWORD PTR _matrix10
	mulss	xmm0, DWORD PTR _tmp01$[ebp]
	movss	xmm1, DWORD PTR _matrix11
	mulss	xmm1, DWORD PTR _tmp11$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _d$[ebp], xmm0

; 263  : 
; 264  :    matrix00 = a;

	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR _matrix00, xmm0

; 265  :    matrix01 = b;

	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR _matrix01, xmm0

; 266  :    matrix10 = c;

	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _matrix10, xmm0

; 267  :    matrix11 = d;        

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _matrix11, xmm0

; 268  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_RotateDebug2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_row$ = -44						; size = 4
_col$ = -40						; size = 4
_len$ = -36						; size = 4
tv133 = -32						; size = 4
tv132 = -28						; size = 4
tv93 = -24						; size = 4
tv87 = -20						; size = 4
tv86 = -16						; size = 4
tv79 = -12						; size = 4
_y1$ = -8						; size = 4
_x1$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_str$ = 16						; size = 4
_DrawDebugStringRight PROC

; 295  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 296  : int row, col;
; 297  : int len;
; 298  : float x1, y1;
; 299  : 
; 300  :    if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN1@DrawDebugS

; 301  :       return;

	jmp	$LN2@DrawDebugS
$LN1@DrawDebugS:

; 302  : 
; 303  :    x *= ASPECT_RATIO;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR __real@3f466666
	movss	DWORD PTR _x$[ebp], xmm0

; 304  : 
; 305  :    x1 = x * matrix00 + y * matrix01;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _matrix00
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _matrix01
	addss	xmm0, xmm1
	movss	DWORD PTR _x1$[ebp], xmm0

; 306  :    y1 = x * matrix10 + y * matrix11;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _matrix10
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _matrix11
	addss	xmm0, xmm1
	movss	DWORD PTR _y1$[ebp], xmm0

; 307  : 
; 308  :    len = strlen (str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 309  : 
; 310  :    x = min ( max (x1 + x_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN4@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN5@DrawDebugS
$LN4@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv79[ebp], xmm0
$LN5@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv79[ebp]
	jbe	SHORT $LN8@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN6@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN7@DrawDebugS
$LN6@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv86[ebp], xmm0
$LN7@DrawDebugS:
	movss	xmm0, DWORD PTR tv86[ebp]
	movss	DWORD PTR tv87[ebp], xmm0
	jmp	SHORT $LN9@DrawDebugS
$LN8@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv87[ebp], xmm0
$LN9@DrawDebugS:
	movss	xmm0, DWORD PTR tv87[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 311  :    y = min ( max (y1 + y_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN10@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv93[ebp], xmm0
	jmp	SHORT $LN11@DrawDebugS
$LN10@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv93[ebp], xmm0
$LN11@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv93[ebp]
	jbe	SHORT $LN14@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN12@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN13@DrawDebugS
$LN12@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv132[ebp], xmm0
$LN13@DrawDebugS:
	movss	xmm0, DWORD PTR tv132[ebp]
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN15@DrawDebugS
$LN14@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv133[ebp], xmm0
$LN15@DrawDebugS:
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 312  : 
; 313  :    col = (int)(0.5 + DebugScreenWidth * 0.5F * (1.0F + x));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _col$[ebp], ecx

; 314  :    row = (int)(0.5 + DebugScreenHeight *0.5F * (1.0F - y));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si edx, xmm0
	mov	DWORD PTR _row$[ebp], edx

; 315  :    DisplayDebugString (row, col - len * CHAR_WIDTH, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _col$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	call	_DisplayDebugString
	add	esp, 12					; 0000000cH
$LN2@DrawDebugS:

; 316  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DrawDebugStringRight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_row$ = -40						; size = 4
_col$ = -36						; size = 4
tv131 = -32						; size = 4
tv130 = -28						; size = 4
tv91 = -24						; size = 4
tv85 = -20						; size = 4
tv84 = -16						; size = 4
tv77 = -12						; size = 4
_y1$ = -8						; size = 4
_x1$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_str$ = 16						; size = 4
_DrawDebugStringLeft PROC

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 320  : int row, col;
; 321  : float x1, y1;
; 322  : 
; 323  :    if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN1@DrawDebugS

; 324  :       return;

	jmp	$LN2@DrawDebugS
$LN1@DrawDebugS:

; 325  : 
; 326  :    x *= ASPECT_RATIO;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR __real@3f466666
	movss	DWORD PTR _x$[ebp], xmm0

; 327  : 
; 328  :    x1 = x * matrix00 + y * matrix01;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _matrix00
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _matrix01
	addss	xmm0, xmm1
	movss	DWORD PTR _x1$[ebp], xmm0

; 329  :    y1 = x * matrix10 + y * matrix11;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _matrix10
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _matrix11
	addss	xmm0, xmm1
	movss	DWORD PTR _y1$[ebp], xmm0

; 330  : 
; 331  :    x = min ( max (x1 + x_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN4@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN5@DrawDebugS
$LN4@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv77[ebp], xmm0
$LN5@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv77[ebp]
	jbe	SHORT $LN8@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN6@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv84[ebp], xmm0
	jmp	SHORT $LN7@DrawDebugS
$LN6@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv84[ebp], xmm0
$LN7@DrawDebugS:
	movss	xmm0, DWORD PTR tv84[ebp]
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN9@DrawDebugS
$LN8@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv85[ebp], xmm0
$LN9@DrawDebugS:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 332  :    y = min ( max (y1 + y_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN10@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN11@DrawDebugS
$LN10@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv91[ebp], xmm0
$LN11@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv91[ebp]
	jbe	SHORT $LN14@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN12@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN13@DrawDebugS
$LN12@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv130[ebp], xmm0
$LN13@DrawDebugS:
	movss	xmm0, DWORD PTR tv130[ebp]
	movss	DWORD PTR tv131[ebp], xmm0
	jmp	SHORT $LN15@DrawDebugS
$LN14@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv131[ebp], xmm0
$LN15@DrawDebugS:
	movss	xmm0, DWORD PTR tv131[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 333  : 
; 334  :    col = (int)(0.5 + DebugScreenWidth * 0.5F * (1.0F + x));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	mov	DWORD PTR _col$[ebp], eax

; 335  :    row = (int)(0.5 + DebugScreenHeight *0.5F * (1.0F - y));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _row$[ebp], ecx

; 336  :    DisplayDebugString (row, col, str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	call	_DisplayDebugString
	add	esp, 12					; 0000000cH
$LN2@DrawDebugS:

; 337  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DrawDebugStringLeft ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_row$ = -44						; size = 4
_col$ = -40						; size = 4
_len$ = -36						; size = 4
tv133 = -32						; size = 4
tv132 = -28						; size = 4
tv93 = -24						; size = 4
tv87 = -20						; size = 4
tv86 = -16						; size = 4
tv79 = -12						; size = 4
_y1$ = -8						; size = 4
_x1$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_str$ = 16						; size = 4
_DrawDebugString PROC

; 271  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 272  : int row, col;
; 273  : int len;
; 274  : float x1, y1;
; 275  : 
; 276  :    if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN1@DrawDebugS

; 277  :       return;

	jmp	$LN2@DrawDebugS
$LN1@DrawDebugS:

; 278  : 
; 279  :    x *= ASPECT_RATIO;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR __real@3f466666
	movss	DWORD PTR _x$[ebp], xmm0

; 280  : 
; 281  :    x1 = x * matrix00 + y * matrix01;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _matrix00
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _matrix01
	addss	xmm0, xmm1
	movss	DWORD PTR _x1$[ebp], xmm0

; 282  :    y1 = x * matrix10 + y * matrix11;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _matrix10
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _matrix11
	addss	xmm0, xmm1
	movss	DWORD PTR _y1$[ebp], xmm0

; 283  :        
; 284  :    len = strlen (str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 285  :      
; 286  :    x = min ( max (x1 + x_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN4@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN5@DrawDebugS
$LN4@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv79[ebp], xmm0
$LN5@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv79[ebp]
	jbe	SHORT $LN8@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN6@DrawDebugS
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x_offset
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN7@DrawDebugS
$LN6@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv86[ebp], xmm0
$LN7@DrawDebugS:
	movss	xmm0, DWORD PTR tv86[ebp]
	movss	DWORD PTR tv87[ebp], xmm0
	jmp	SHORT $LN9@DrawDebugS
$LN8@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv87[ebp], xmm0
$LN9@DrawDebugS:
	movss	xmm0, DWORD PTR tv87[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 287  :    y = min ( max (y1 + y_offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN10@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv93[ebp], xmm0
	jmp	SHORT $LN11@DrawDebugS
$LN10@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv93[ebp], xmm0
$LN11@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv93[ebp]
	jbe	SHORT $LN14@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN12@DrawDebugS
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y_offset
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN13@DrawDebugS
$LN12@DrawDebugS:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv132[ebp], xmm0
$LN13@DrawDebugS:
	movss	xmm0, DWORD PTR tv132[ebp]
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN15@DrawDebugS
$LN14@DrawDebugS:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv133[ebp], xmm0
$LN15@DrawDebugS:
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 288  : 
; 289  :    col = (int)(0.5 + DebugScreenWidth * 0.5F * (1.0F + x));

	movss	xmm0, DWORD PTR _DebugScreenWidth
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _col$[ebp], ecx

; 290  :    row = (int)(0.5 + DebugScreenHeight *0.5F * (1.0F - y));

	movss	xmm0, DWORD PTR _DebugScreenHeight
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si edx, xmm0
	mov	DWORD PTR _row$[ebp], edx

; 291  :    DisplayDebugString (row, col - len * CHAR_WIDTH / 2, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	eax, DWORD PTR _len$[ebp]
	imul	eax, 6
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _col$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	call	_DisplayDebugString
	add	esp, 12					; 0000000cH
$LN2@DrawDebugS:

; 292  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DrawDebugString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
_data$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_c$ = -1						; size = 1
_num$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_DisplayDebugCharacter PROC

; 562  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 563  : int i, j;
; 564  : unsigned char *data;
; 565  : unsigned char c;
; 566  :  
; 567  : 	if (graphicsMode != DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	je	SHORT $LN18@DisplayDeb

; 568  : 	   return;

	jmp	$LN19@DisplayDeb
$LN18@DisplayDeb:

; 569  : 
; 570  :    if (num < -4 || num > MAX_CHAR_IDX)

	cmp	DWORD PTR _num$[ebp], -4		; fffffffcH
	jl	SHORT $LN16@DisplayDeb
	cmp	DWORD PTR _num$[ebp], 47		; 0000002fH
	jle	SHORT $LN17@DisplayDeb
$LN16@DisplayDeb:

; 571  :       num = MAX_CHAR_IDX;

	mov	DWORD PTR _num$[ebp], 47		; 0000002fH
$LN17@DisplayDeb:

; 572  : 
; 573  :    data = CharList[num];

	mov	eax, DWORD PTR _num$[ebp]
	mov	ecx, DWORD PTR _CharList[eax*4]
	mov	DWORD PTR _data$[ebp], ecx

; 574  : 
; 575  : 
; 576  :    //LRKLUDGE
; 577  :    if (num == -1)

	cmp	DWORD PTR _num$[ebp], -1
	jne	$LN15@DisplayDeb

; 578  :    {
; 579  :       DisplayDebugLine (x-2, y-2, x-2, y+6);

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 6
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, 2
	push	edx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 580  :       DisplayDebugLine (x-2, y-2, x+5, y-2);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	push	eax
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 581  :       DisplayDebugLine (x+5, y+6, x+5, y-2);

	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 5
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 5
	push	ecx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 582  :       DisplayDebugLine (x-2, y+6, x+5, y+6);

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 6
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 5
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, 2
	push	edx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H
	jmp	$LN19@DisplayDeb
$LN15@DisplayDeb:

; 583  :    }
; 584  :    else if (num == -2)

	cmp	DWORD PTR _num$[ebp], -2		; fffffffeH
	jne	SHORT $LN13@DisplayDeb

; 585  :    {
; 586  :       DisplayDebugLine (x-2, y-2, x+5, y-2);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	push	eax
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 587  :       DisplayDebugLine (x-2, y+6, x+5, y+6);

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 5
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 2
	push	ecx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H
	jmp	$LN19@DisplayDeb
$LN13@DisplayDeb:

; 588  :    }
; 589  :    else if (num == -3)

	cmp	DWORD PTR _num$[ebp], -3		; fffffffdH
	jne	SHORT $LN11@DisplayDeb

; 590  :    {
; 591  :       DisplayDebugLine (x-2, y-2, x+5, y-2);

	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 5
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, 2
	push	edx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 592  :       DisplayDebugLine (x-2, y+6, x+5, y+6);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 6
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	push	eax
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 593  :       DisplayDebugLine (x+5, y+6, x+5, y-2);

	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 5
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 5
	push	ecx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H
	jmp	$LN19@DisplayDeb
$LN11@DisplayDeb:

; 594  :    }
; 595  :    else if (num == -4)

	cmp	DWORD PTR _num$[ebp], -4		; fffffffcH
	jne	SHORT $LN9@DisplayDeb

; 596  :    {
; 597  :       DisplayDebugLine (x-2, y-2, x+5, y-2);

	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 5
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, 2
	push	edx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 598  :       DisplayDebugLine (x-2, y+6, x+5, y+6);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 6
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	push	eax
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 599  :       DisplayDebugLine (x-2, y-2, x-2, y+6);

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 2
	push	ecx
	call	_DisplayDebugLine
	add	esp, 16					; 00000010H

; 600  :    }
; 601  :    else

	jmp	SHORT $LN19@DisplayDeb
$LN9@DisplayDeb:

; 602  :    {
; 603  :       for (i=0; i<7; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@DisplayDeb
$LN6@DisplayDeb:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@DisplayDeb:
	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN19@DisplayDeb

; 604  :       {
; 605  :          c = *data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl

; 606  :          for (j=0; j<5; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@DisplayDeb
$LN3@DisplayDeb:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN4@DisplayDeb:
	cmp	DWORD PTR _j$[ebp], 5
	jge	SHORT $LN2@DisplayDeb

; 607  :          {
; 608  :             if (c & 0x80)

	movzx	eax, BYTE PTR _c$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN1@DisplayDeb

; 609  :                WriteDebugPixel (x + j, y + i);

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	push	edx
	call	_WriteDebugPixel
	add	esp, 8
$LN1@DisplayDeb:

; 610  :             c = (char)(c << 1);

	movzx	eax, BYTE PTR _c$[ebp]
	shl	eax, 1
	mov	BYTE PTR _c$[ebp], al

; 611  :          }

	jmp	SHORT $LN3@DisplayDeb
$LN2@DisplayDeb:

; 612  :          data ++;

	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx

; 613  :       }

	jmp	SHORT $LN6@DisplayDeb
$LN19@DisplayDeb:

; 614  :    }
; 615  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayDebugCharacter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\mono\debuggr.cpp
_TEXT	SEGMENT
$T1 = -296						; size = 4
$T2 = -292						; size = 4
_coords$3 = -288					; size = 4
_i$4 = -284						; size = 4
_osInfo$ = -280						; size = 148
_text_mode$ = -132					; size = 64
_graph_mode$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_InitDebug PROC

; 790  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 791  : int graph_mode[] =
; 792  :    {53, 45, 46, 7, 91, 2, 87, 87, 2, 3, 0, 0, 0, 0, 0, 0};

	mov	DWORD PTR _graph_mode$[ebp], 53		; 00000035H
	mov	DWORD PTR _graph_mode$[ebp+4], 45	; 0000002dH
	mov	DWORD PTR _graph_mode$[ebp+8], 46	; 0000002eH
	mov	DWORD PTR _graph_mode$[ebp+12], 7
	mov	DWORD PTR _graph_mode$[ebp+16], 91	; 0000005bH
	mov	DWORD PTR _graph_mode$[ebp+20], 2
	mov	DWORD PTR _graph_mode$[ebp+24], 87	; 00000057H
	mov	DWORD PTR _graph_mode$[ebp+28], 87	; 00000057H
	mov	DWORD PTR _graph_mode$[ebp+32], 2
	mov	DWORD PTR _graph_mode$[ebp+36], 3
	mov	DWORD PTR _graph_mode$[ebp+40], 0
	mov	DWORD PTR _graph_mode$[ebp+44], 0
	mov	DWORD PTR _graph_mode$[ebp+48], 0
	mov	DWORD PTR _graph_mode$[ebp+52], 0
	mov	DWORD PTR _graph_mode$[ebp+56], 0
	mov	DWORD PTR _graph_mode$[ebp+60], 0

; 793  : int text_mode[] =
; 794  :    {97, 80, 82, 15, 25, 6, 25, 25, 2, 13, 11, 12, 0, 0, 0, 0};

	mov	DWORD PTR _text_mode$[ebp], 97		; 00000061H
	mov	DWORD PTR _text_mode$[ebp+4], 80	; 00000050H
	mov	DWORD PTR _text_mode$[ebp+8], 82	; 00000052H
	mov	DWORD PTR _text_mode$[ebp+12], 15	; 0000000fH
	mov	DWORD PTR _text_mode$[ebp+16], 25	; 00000019H
	mov	DWORD PTR _text_mode$[ebp+20], 6
	mov	DWORD PTR _text_mode$[ebp+24], 25	; 00000019H
	mov	DWORD PTR _text_mode$[ebp+28], 25	; 00000019H
	mov	DWORD PTR _text_mode$[ebp+32], 2
	mov	DWORD PTR _text_mode$[ebp+36], 13	; 0000000dH
	mov	DWORD PTR _text_mode$[ebp+40], 11	; 0000000bH
	mov	DWORD PTR _text_mode$[ebp+44], 12	; 0000000cH
	mov	DWORD PTR _text_mode$[ebp+48], 0
	mov	DWORD PTR _text_mode$[ebp+52], 0
	mov	DWORD PTR _text_mode$[ebp+56], 0
	mov	DWORD PTR _text_mode$[ebp+60], 0

; 795  : OSVERSIONINFO osInfo;
; 796  : 
; 797  :    osInfo.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);

	mov	DWORD PTR _osInfo$[ebp], 148		; 00000094H

; 798  :    GetVersionEx (&osInfo);

	lea	eax, DWORD PTR _osInfo$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExA@4

; 799  : 
; 800  : #ifdef NDEBUG
; 801  : //   if (mode == DEBUGGER_TEXT_MODE)
; 802  : //      return;
; 803  : #endif
; 804  : 
; 805  : #ifdef WRITE_FILE
; 806  :    if (!debugFile)
; 807  :       debugFile = fopen ("c:\\temp\\debug.dat", "w");
; 808  : #endif
; 809  : 
; 810  : //   if (osInfo.dwPlatformId != VER_PLATFORM_WIN32_WINDOWS)
; 811  :       //return;
; 812  : 
; 813  :    if (graphicsMode != mode)

	mov	ecx, DWORD PTR _graphicsMode
	cmp	ecx, DWORD PTR _mode$[ebp]
	je	$LN13@InitDebug

; 814  :    {
; 815  :       graphicsMode = mode;

	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR _graphicsMode, edx

; 816  : 
; 817  :       // Set in graphics mode
; 818  :       if (graphicsMode == DEBUGGER_GRAPHICS_MODE)

	cmp	DWORD PTR _graphicsMode, 1
	jne	$LN11@InitDebug

; 819  :       {
; 820  :          screen_buffer[0] = new char[0x8000];

	push	32768					; 00008000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _screen_buffer[eax], ecx

; 821  :          screen_buffer[1] = new char[0x8000];

	push	32768					; 00008000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _screen_buffer[edx], eax

; 822  : 
; 823  : #ifndef DISABLE_MONO_DISPLAY	   
; 824  :          OUT_BYTE (CONFIG_REG, 0x3);

	mov	edx, 959				; 000003bfH
	mov	al, 3
	out	dx, al

; 825  :          for (int i=0; i<16; i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN10@InitDebug
$LN9@InitDebug:
	mov	ecx, DWORD PTR _i$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$4[ebp], ecx
$LN10@InitDebug:
	cmp	DWORD PTR _i$4[ebp], 16			; 00000010H
	jge	SHORT $LN8@InitDebug

; 826  :             OUT_WORD (ADDRESS_REG, (short)((graph_mode[i] << 8) + i));

	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _graph_mode$[ebp+edx*4]
	shl	eax, 8
	add	eax, DWORD PTR _i$4[ebp]
	mov	edx, 948				; 000003b4H
	out	dx, ax
	jmp	SHORT $LN9@InitDebug
$LN8@InitDebug:

; 827  :          OUT_BYTE (CONTROL_REG, 0xe);

	mov	edx, 952				; 000003b8H
	mov	al, 14					; 0000000eH
	out	dx, al

; 828  :          memset ((void *)MONO_TEXT, 0, 0x8000);

	push	32768					; 00008000H
	push	0
	push	720896					; 000b0000H
	call	_memset
	add	esp, 12					; 0000000cH

; 829  :          memset ((void *)screen_buffer[0], 0, 0x8000);

	push	32768					; 00008000H
	push	0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _screen_buffer[eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 830  :          memset ((void *)screen_buffer[1], 0, 0x8000);

	push	32768					; 00008000H
	push	0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _screen_buffer[edx]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 831  : #endif
; 832  :          ResetRotateDebug2D();

	call	_ResetRotateDebug2D

; 833  :          ResetTranslateDebug2D();

	call	_ResetTranslateDebug2D

; 834  :          DebugClear();

	call	_DebugClear
	jmp	$LN13@InitDebug
$LN11@InitDebug:

; 835  :       }
; 836  :       else if (graphicsMode == DEBUGGER_TEXT_MODE)

	cmp	DWORD PTR _graphicsMode, 0
	jne	SHORT $LN13@InitDebug

; 837  :       {
; 838  : 			InitializeCriticalSection (&mono_critical);

	push	OFFSET ?mono_critical@@3U_RTL_CRITICAL_SECTION@@A ; mono_critical
	call	DWORD PTR __imp__InitializeCriticalSection@4

; 839  : 
; 840  : 			#if defined _TEXT_TGT_CONSOLE
; 841  : 			if(AllocConsole())

	call	DWORD PTR __imp__AllocConsole@0
	test	eax, eax
	je	SHORT $LN5@InitDebug

; 842  : 			{
; 843  : 				hStdoutDbg = GetStdHandle(STD_OUTPUT_HANDLE); 

	push	-11					; fffffff5H
	call	DWORD PTR __imp__GetStdHandle@4
	mov	DWORD PTR ?hStdoutDbg@@3PAXA, eax	; hStdoutDbg

; 844  : 				if(hStdoutDbg != INVALID_HANDLE_VALUE) 

	cmp	DWORD PTR ?hStdoutDbg@@3PAXA, -1	; hStdoutDbg
	je	SHORT $LN5@InitDebug

; 845  : 				{
; 846  : 					/*
; 847  : 					SMALL_RECT rc = { 0, 0, 800, 600 };
; 848  : 
; 849  : 					if(SetConsoleWindowInfo(hStdoutDbg, TRUE, &rc))
; 850  : 					{
; 851  : 					}
; 852  : 					*/
; 853  : 
; 854  : 					COORD coords = { 80, 25 };

	mov	ecx, 80					; 00000050H
	mov	WORD PTR _coords$3[ebp], cx
	mov	edx, 25					; 00000019H
	mov	WORD PTR _coords$3[ebp+2], dx

; 855  : 					if(SetConsoleScreenBufferSize(hStdoutDbg, coords))

	mov	eax, DWORD PTR _coords$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?hStdoutDbg@@3PAXA	; hStdoutDbg
	push	ecx
	call	DWORD PTR __imp__SetConsoleScreenBufferSize@8
	test	eax, eax
	je	SHORT $LN5@InitDebug

; 856  : 					{
; 857  : 						if(SetConsoleCP(10000))

	push	10000					; 00002710H
	call	DWORD PTR __imp__SetConsoleCP@4
	test	eax, eax
	je	SHORT $LN2@InitDebug
	jmp	SHORT $LN5@InitDebug
$LN2@InitDebug:

; 858  : 						{
; 859  : 						}
; 860  : 
; 861  : 						else OutputDebugString("InitDebug - Warning: SetConsoleOutputCP failed\n");

	push	OFFSET ??_C@_0DA@KMNDHINL@InitDebug?5?9?5Warning?3?5SetConsoleO@
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN5@InitDebug:

; 862  : 					}
; 863  :  				}
; 864  : 			}
; 865  : 
; 866  : 			#elif defined _TEXT_TGT_TRACE
; 867  : 			#elif defined _TEXT_TGT_FILE
; 868  : 			hFileDbg = CreateFile("dbg.dmp", GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_FLAG_WRITE_THROUGH, NULL);
; 869  : 			if(!hFileDbg) OutputDebugString("InitDebug - Warning: CreateFile failed\n");
; 870  : 			#else
; 871  : 			#ifndef DISABLE_MONO_DISPLAY	   
; 872  : 					 OUT_BYTE (CONFIG_REG, 0x0);
; 873  : 					 for (int i=0; i<16; i++)
; 874  : 						OUT_WORD (ADDRESS_REG, (short)((text_mode[i] << 8) + i));
; 875  : 					 OUT_BYTE (CONTROL_REG, 0x8);
; 876  : 					 memset( (void *)MONO_TEXT, 0, (160*25) );
; 877  : 			#endif
; 878  : 
; 879  : 	unsigned long
; 880  : 		id;
; 881  : 
; 882  : 			 CreateThread
; 883  : 			 (
; 884  : 				NULL,
; 885  : 				0,
; 886  : 				update_mono,
; 887  : 				(void*)0x1,
; 888  : 				0,
; 889  : 				&id
; 890  : 			 );
; 891  : 
; 892  : 			#endif
; 893  : 
; 894  : 			 MonoCls();

	call	_MonoCls
$LN13@InitDebug:

; 895  :       }
; 896  :    }
; 897  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_InitDebug ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
END
