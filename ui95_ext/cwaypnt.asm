; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ui95_ext\cwaypnt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
PUBLIC	_expf
PUBLIC	_logf
PUBLIC	?exp@@YAMM@Z					; exp
PUBLIC	?log@@YAMM@Z					; log
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??_GC_Hash@@QAEPAXI@Z				; C_Hash::`scalar deleting destructor'
PUBLIC	??1C_Base@@UAE@XZ				; C_Base::~C_Base
PUBLIC	?SetID@C_Base@@QAEXJ@Z				; C_Base::SetID
PUBLIC	?SetType@C_Base@@QAEXF@Z			; C_Base::SetType
PUBLIC	?_SetCType_@C_Base@@QAEXF@Z			; C_Base::_SetCType_
PUBLIC	?SetGroup@C_Base@@QAEXJ@Z			; C_Base::SetGroup
PUBLIC	?SetClient@C_Base@@QAEXF@Z			; C_Base::SetClient
PUBLIC	?SetFlags@C_Base@@UAEXJ@Z			; C_Base::SetFlags
PUBLIC	?SetFlagBitOn@C_Base@@UAEXJ@Z			; C_Base::SetFlagBitOn
PUBLIC	?SetFlagBitOff@C_Base@@UAEXJ@Z			; C_Base::SetFlagBitOff
PUBLIC	?SetX@C_Base@@UAEXJ@Z				; C_Base::SetX
PUBLIC	?SetY@C_Base@@UAEXJ@Z				; C_Base::SetY
PUBLIC	?SetW@C_Base@@UAEXJ@Z				; C_Base::SetW
PUBLIC	?SetH@C_Base@@UAEXJ@Z				; C_Base::SetH
PUBLIC	?SetXY@C_Base@@UAEXJJ@Z				; C_Base::SetXY
PUBLIC	?SetWH@C_Base@@UAEXJJ@Z				; C_Base::SetWH
PUBLIC	?SetXYWH@C_Base@@UAEXJJJJ@Z			; C_Base::SetXYWH
PUBLIC	?SetRelX@C_Base@@UAEXJ@Z			; C_Base::SetRelX
PUBLIC	?SetRelY@C_Base@@UAEXJ@Z			; C_Base::SetRelY
PUBLIC	?SetRelXY@C_Base@@UAEXJJ@Z			; C_Base::SetRelXY
PUBLIC	?SetParent@C_Base@@QAEXPAVC_Window@@@Z		; C_Base::SetParent
PUBLIC	?SetReady@C_Base@@QAEXF@Z			; C_Base::SetReady
PUBLIC	?SetState@C_Base@@UAEXF@Z			; C_Base::SetState
PUBLIC	?SetHotKey@C_Base@@UAEXF@Z			; C_Base::SetHotKey
PUBLIC	?SetMenu@C_Base@@UAEXJ@Z			; C_Base::SetMenu
PUBLIC	?SetFont@C_Base@@UAEXJ@Z			; C_Base::SetFont
PUBLIC	?SetSound@C_Base@@UAEXJF@Z			; C_Base::SetSound
PUBLIC	?SetCursorID@C_Base@@UAEXJ@Z			; C_Base::SetCursorID
PUBLIC	?SetDragCursorID@C_Base@@UAEXJ@Z		; C_Base::SetDragCursorID
PUBLIC	?SetHelpText@C_Base@@UAEXJ@Z			; C_Base::SetHelpText
PUBLIC	?SetMouseOver@C_Base@@UAEXF@Z			; C_Base::SetMouseOver
PUBLIC	?SetMouseOverColor@C_Base@@UAEXK@Z		; C_Base::SetMouseOverColor
PUBLIC	?SetMouseOverPerc@C_Base@@UAEXF@Z		; C_Base::SetMouseOverPerc
PUBLIC	?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z	; C_Base::SetCallback
PUBLIC	?GetType@C_Base@@QAEFXZ				; C_Base::GetType
PUBLIC	?GetFlags@C_Base@@QAEJXZ			; C_Base::GetFlags
PUBLIC	?GetClient@C_Base@@QAEFXZ			; C_Base::GetClient
PUBLIC	?GetX@C_Base@@QAEJXZ				; C_Base::GetX
PUBLIC	?GetY@C_Base@@QAEJXZ				; C_Base::GetY
PUBLIC	?GetW@C_Base@@QAEJXZ				; C_Base::GetW
PUBLIC	?GetH@C_Base@@QAEJXZ				; C_Base::GetH
PUBLIC	?GetRelX@C_Base@@UAEJXZ				; C_Base::GetRelX
PUBLIC	?GetRelY@C_Base@@UAEJXZ				; C_Base::GetRelY
PUBLIC	?Ready@C_Base@@QAEFXZ				; C_Base::Ready
PUBLIC	?GetState@C_Base@@UAEFXZ			; C_Base::GetState
PUBLIC	?GetHotKey@C_Base@@UAEFXZ			; C_Base::GetHotKey
PUBLIC	?GetMenu@C_Base@@UAEJXZ				; C_Base::GetMenu
PUBLIC	?GetFont@C_Base@@UAEJXZ				; C_Base::GetFont
PUBLIC	?GetHelpText@C_Base@@UAEJXZ			; C_Base::GetHelpText
PUBLIC	?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z		; C_Base::GetSound
PUBLIC	?GetMouseOver@C_Base@@UAEFXZ			; C_Base::GetMouseOver
PUBLIC	?GetCursorID@C_Base@@UAEJXZ			; C_Base::GetCursorID
PUBLIC	?GetDragCursorID@C_Base@@UAEJXZ			; C_Base::GetDragCursorID
PUBLIC	?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ		; C_Base::GetCallback
PUBLIC	?IsBase@C_Base@@UAEHXZ				; C_Base::IsBase
PUBLIC	?IsControl@C_Base@@UAEHXZ			; C_Base::IsControl
PUBLIC	?Refresh@C_Base@@UAEXXZ				; C_Base::Refresh
PUBLIC	?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z	; C_Base::Draw
PUBLIC	?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ; C_Base::HighLite
PUBLIC	?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z	; C_Base::SetSubParents
PUBLIC	?Cleanup@C_Base@@UAEXXZ				; C_Base::Cleanup
PUBLIC	?TimerUpdate@C_Base@@UAEHXZ			; C_Base::TimerUpdate
PUBLIC	?Activate@C_Base@@UAEXXZ			; C_Base::Activate
PUBLIC	?Deactivate@C_Base@@UAEXXZ			; C_Base::Deactivate
PUBLIC	?CheckHotSpots@C_Base@@UAEJJJ@Z			; C_Base::CheckHotSpots
PUBLIC	?CheckKeyboard@C_Base@@UAEHEEEJ@Z		; C_Base::CheckKeyboard
PUBLIC	?Process@C_Base@@UAEHJF@Z			; C_Base::Process
PUBLIC	?CloseWindow@C_Base@@UAEHXZ			; C_Base::CloseWindow
PUBLIC	?MouseOver@C_Base@@UAEHJJPAV1@@Z		; C_Base::MouseOver
PUBLIC	?GetMe@C_Base@@UAEPAV1@XZ			; C_Base::GetMe
PUBLIC	?Dragable@C_Base@@UAEHJ@Z			; C_Base::Dragable
PUBLIC	?GetItemXY@C_Base@@UAEXJPAJ0@Z			; C_Base::GetItemXY
PUBLIC	?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z	; C_Base::Drag
PUBLIC	?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z	; C_Base::Drop
PUBLIC	?Wheel@C_Base@@UAEHHGG@Z			; C_Base::Wheel
PUBLIC	?LocalFind@C_Base@@UAEFPAD@Z			; C_Base::LocalFind
PUBLIC	?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z ; C_Base::LocalFunction
PUBLIC	?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z	; C_Base::SaveText
PUBLIC	??_GC_Base@@UAEPAXI@Z				; C_Base::`scalar deleting destructor'
PUBLIC	??1C_Control@@UAE@XZ				; C_Control::~C_Control
PUBLIC	?SetRelX@C_Control@@UAEXJ@Z			; C_Control::SetRelX
PUBLIC	?SetRelY@C_Control@@UAEXJ@Z			; C_Control::SetRelY
PUBLIC	?SetRelXY@C_Control@@UAEXJJ@Z			; C_Control::SetRelXY
PUBLIC	?SetCursorID@C_Control@@UAEXJ@Z			; C_Control::SetCursorID
PUBLIC	?SetDragCursorID@C_Control@@UAEXJ@Z		; C_Control::SetDragCursorID
PUBLIC	?SetMenu@C_Control@@UAEXJ@Z			; C_Control::SetMenu
PUBLIC	?SetHelpText@C_Control@@UAEXJ@Z			; C_Control::SetHelpText
PUBLIC	?SetHotKey@C_Control@@UAEXF@Z			; C_Control::SetHotKey
PUBLIC	?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z ; C_Control::SetCallback
PUBLIC	?SetMouseOver@C_Control@@UAEXF@Z		; C_Control::SetMouseOver
PUBLIC	?SetMouseOverColor@C_Control@@UAEXK@Z		; C_Control::SetMouseOverColor
PUBLIC	?SetMouseOverPerc@C_Control@@UAEXF@Z		; C_Control::SetMouseOverPerc
PUBLIC	?IsBase@C_Control@@UAEHXZ			; C_Control::IsBase
PUBLIC	?IsControl@C_Control@@UAEHXZ			; C_Control::IsControl
PUBLIC	?GetRelX@C_Control@@UAEJXZ			; C_Control::GetRelX
PUBLIC	?GetRelY@C_Control@@UAEJXZ			; C_Control::GetRelY
PUBLIC	?GetCursorID@C_Control@@UAEJXZ			; C_Control::GetCursorID
PUBLIC	?GetDragCursorID@C_Control@@UAEJXZ		; C_Control::GetDragCursorID
PUBLIC	?GetMenu@C_Control@@UAEJXZ			; C_Control::GetMenu
PUBLIC	?GetHelpText@C_Control@@UAEJXZ			; C_Control::GetHelpText
PUBLIC	?GetHotKey@C_Control@@UAEFXZ			; C_Control::GetHotKey
PUBLIC	?GetMouseOver@C_Control@@UAEFXZ			; C_Control::GetMouseOver
PUBLIC	?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ ; C_Control::GetCallback
PUBLIC	??_GC_Control@@UAEPAXI@Z			; C_Control::`scalar deleting destructor'
PUBLIC	?GetX@C_Window@@QAEFXZ				; C_Window::GetX
PUBLIC	?GetY@C_Window@@QAEFXZ				; C_Window::GetY
PUBLIC	??0C_Waypoint@@QAE@XZ				; C_Waypoint::C_Waypoint
PUBLIC	??0C_Waypoint@@QAE@PAPAD@Z			; C_Waypoint::C_Waypoint
PUBLIC	??0C_Waypoint@@QAE@PAU_iobuf@@@Z		; C_Waypoint::C_Waypoint
PUBLIC	??1C_Waypoint@@UAE@XZ				; C_Waypoint::~C_Waypoint
PUBLIC	?Size@C_Waypoint@@QAEJXZ			; C_Waypoint::Size
PUBLIC	?Setup@C_Waypoint@@QAEXJF@Z			; C_Waypoint::Setup
PUBLIC	?Cleanup@C_Waypoint@@UAEXXZ			; C_Waypoint::Cleanup
PUBLIC	?SetDefaultFlags@C_Waypoint@@QAEXXZ		; C_Waypoint::SetDefaultFlags
PUBLIC	?SetFont@C_Waypoint@@UAEXJ@Z			; C_Waypoint::SetFont
PUBLIC	?GetFont@C_Waypoint@@UAEJXZ			; C_Waypoint::GetFont
PUBLIC	?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z ; C_Waypoint::AddWaypointToList
PUBLIC	?UpdateInfo@C_Waypoint@@QAEHJMM@Z		; C_Waypoint::UpdateInfo
PUBLIC	?EraseWaypointList@C_Waypoint@@QAEXXZ		; C_Waypoint::EraseWaypointList
PUBLIC	?EraseWaypointGroup@C_Waypoint@@QAEXJ@Z		; C_Waypoint::EraseWaypointGroup
PUBLIC	?ShowByType@C_Waypoint@@QAEHJ@Z			; C_Waypoint::ShowByType
PUBLIC	?HideByType@C_Waypoint@@QAEHJ@Z			; C_Waypoint::HideByType
PUBLIC	?SetScaleFactor@C_Waypoint@@QAEXM@Z		; C_Waypoint::SetScaleFactor
PUBLIC	?SetScaleType@C_Waypoint@@QAEXF@Z		; C_Waypoint::SetScaleType
PUBLIC	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z	; C_Waypoint::FindID
PUBLIC	?SetWPGroup@C_Waypoint@@QAEXJJ@Z		; C_Waypoint::SetWPGroup
PUBLIC	?SetState@C_Waypoint@@QAEXJF@Z			; C_Waypoint::SetState
PUBLIC	?SetGroupState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetGroupState
PUBLIC	?SetLabel@C_Waypoint@@QAEXJPAD@Z		; C_Waypoint::SetLabel
PUBLIC	?SetLabelColor@C_Waypoint@@QAEXJKKK@Z		; C_Waypoint::SetLabelColor
PUBLIC	?SetLineColor@C_Waypoint@@QAEXJKKK@Z		; C_Waypoint::SetLineColor
PUBLIC	?GetLabel@C_Waypoint@@QAEPADJ@Z			; C_Waypoint::GetLabel
PUBLIC	?SetTextOffset@C_Waypoint@@QAEXJFF@Z		; C_Waypoint::SetTextOffset
PUBLIC	?CheckHotSpots@C_Waypoint@@UAEJJJ@Z		; C_Waypoint::CheckHotSpots
PUBLIC	?Dragable@C_Waypoint@@UAEHJ@Z			; C_Waypoint::Dragable
PUBLIC	?Process@C_Waypoint@@UAEHJF@Z			; C_Waypoint::Process
PUBLIC	?MouseOver@C_Waypoint@@UAEHJJPAVC_Base@@@Z	; C_Waypoint::MouseOver
PUBLIC	?GetItemXY@C_Waypoint@@UAEXJPAJ0@Z		; C_Waypoint::GetItemXY
PUBLIC	?Drag@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ; C_Waypoint::Drag
PUBLIC	?Drop@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ; C_Waypoint::Drop
PUBLIC	?Refresh@C_Waypoint@@UAEXXZ			; C_Waypoint::Refresh
PUBLIC	?Draw@C_Waypoint@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ; C_Waypoint::Draw
PUBLIC	?SetSubParents@C_Waypoint@@UAEXPAVC_Window@@@Z	; C_Waypoint::SetSubParents
PUBLIC	??_GC_Waypoint@@UAEPAXI@Z			; C_Waypoint::`scalar deleting destructor'
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7C_Base@@6B@					; C_Base::`vftable'
PUBLIC	??_7C_Control@@6B@				; C_Control::`vftable'
PUBLIC	??_7C_Waypoint@@6B@				; C_Waypoint::`vftable'
PUBLIC	??_C@_05GBNOBMHE@?$CF6?41f?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4C_Base@@6B@				; C_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVC_Base@@@8				; C_Base `RTTI Type Descriptor'
PUBLIC	??_R3C_Base@@8					; C_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_Base@@8					; C_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_Base@@8				; C_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4C_Control@@6B@				; C_Control::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVC_Control@@@8				; C_Control `RTTI Type Descriptor'
PUBLIC	??_R3C_Control@@8				; C_Control::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_Control@@8				; C_Control::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_Control@@8			; C_Control::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4C_Waypoint@@6B@				; C_Waypoint::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVC_Waypoint@@@8				; C_Waypoint `RTTI Type Descriptor'
PUBLIC	??_R3C_Waypoint@@8				; C_Waypoint::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_Waypoint@@8				; C_Waypoint::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_Waypoint@@8			; C_Waypoint::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@38d1b717
PUBLIC	__real@392c987a
PUBLIC	__real@3a83126f
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d0df602
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41e6d2f2
PUBLIC	__real@42c80000
PUBLIC	__real@461c4000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_sprintf:PROC
EXTRN	_exp:PROC
EXTRN	_log:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??1C_Hash@@QAE@XZ:PROC				; C_Hash::~C_Hash
EXTRN	?Cleanup@C_Hash@@QAEXXZ:PROC			; C_Hash::Cleanup
EXTRN	?PlaySoundA@C_Sound@@QAEHPAVSOUND_RES@@@Z:PROC	; C_Sound::PlaySoundA
EXTRN	?AddText@C_String@@QAEJPBD@Z:PROC		; C_String::AddText
EXTRN	?GetText@C_String@@QAEPADJ@Z:PROC		; C_String::GetText
EXTRN	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z:PROC ; UI_Enter
EXTRN	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z:PROC	; UI_Leave
EXTRN	??_EC_Base@@UAEPAXI@Z:PROC			; C_Base::`vector deleting destructor'
EXTRN	??0C_Control@@QAE@XZ:PROC			; C_Control::C_Control
EXTRN	??0C_Control@@QAE@PAPAD@Z:PROC			; C_Control::C_Control
EXTRN	??0C_Control@@QAE@PAU_iobuf@@@Z:PROC		; C_Control::C_Control
EXTRN	?MouseOver@C_Control@@UAEHJJPAVC_Base@@@Z:PROC	; C_Control::MouseOver
EXTRN	?SetSound@C_Control@@UAEXJF@Z:PROC		; C_Control::SetSound
EXTRN	?HighLite@C_Control@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z:PROC ; C_Control::HighLite
EXTRN	?GetSound@C_Control@@UAEPAVSOUND_RES@@F@Z:PROC	; C_Control::GetSound
EXTRN	??_EC_Control@@UAEPAXI@Z:PROC			; C_Control::`vector deleting destructor'
EXTRN	??0C_Button@@QAE@XZ:PROC			; C_Button::C_Button
EXTRN	?Setup@C_Button@@QAEXJFJJ@Z:PROC		; C_Button::Setup
EXTRN	?GetLabel@C_Button@@QAEPADF@Z:PROC		; C_Button::GetLabel
EXTRN	?SetAllLabel@C_Button@@QAEXPAD@Z:PROC		; C_Button::SetAllLabel
EXTRN	?SetLabelOffset@C_Button@@QAEXFJJ@Z:PROC	; C_Button::SetLabelOffset
EXTRN	?SetLabelColor@C_Button@@QAEXFK@Z:PROC		; C_Button::SetLabelColor
EXTRN	?SetImage@C_Button@@QAEXFJ@Z:PROC		; C_Button::SetImage
EXTRN	?SetLabelInfo@C_Button@@QAEXXZ:PROC		; C_Button::SetLabelInfo
EXTRN	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z:PROC	; C_Window::SetUpdateRect
EXTRN	?RefreshClient@C_Window@@QAEXJ@Z:PROC		; C_Window::RefreshClient
EXTRN	?DrawLine@C_Window@@QAEXPAVSCREEN@@KJJJJJJPAUUI95_RECT@@@Z:PROC ; C_Window::DrawLine
EXTRN	??_EC_Waypoint@@UAEPAXI@Z:PROC			; C_Waypoint::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gSoundMgr@@3PAVC_Sound@@A:DWORD		; gSoundMgr
EXTRN	?gStringMgr@@3PAVC_String@@A:DWORD		; gStringMgr
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41e6d2f2
CONST	SEGMENT
__real@41e6d2f2 DD 041e6d2f2r			; 28.853
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3d0df602
CONST	SEGMENT
__real@3d0df602 DD 03d0df602r			; 0.0346584
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@C_Waypoint@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_Waypoint@@8 DD FLAT:??_R0?AVC_Waypoint@@@8 ; C_Waypoint::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_Waypoint@@8
rdata$r	ENDS
;	COMDAT ??_R2C_Waypoint@@8
rdata$r	SEGMENT
??_R2C_Waypoint@@8 DD FLAT:??_R1A@?0A@EA@C_Waypoint@@8	; C_Waypoint::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@C_Control@@8
	DD	FLAT:??_R1A@?0A@EA@C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R3C_Waypoint@@8
rdata$r	SEGMENT
??_R3C_Waypoint@@8 DD 00H				; C_Waypoint::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2C_Waypoint@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_Waypoint@@@8
_DATA	SEGMENT
??_R0?AVC_Waypoint@@@8 DD FLAT:??_7type_info@@6B@	; C_Waypoint `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_Waypoint@@', 00H
_DATA	ENDS
;	COMDAT ??_R4C_Waypoint@@6B@
rdata$r	SEGMENT
??_R4C_Waypoint@@6B@ DD 00H				; C_Waypoint::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVC_Waypoint@@@8
	DD	FLAT:??_R3C_Waypoint@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@C_Control@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_Control@@8 DD FLAT:??_R0?AVC_Control@@@8 ; C_Control::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_Control@@8
rdata$r	ENDS
;	COMDAT ??_R2C_Control@@8
rdata$r	SEGMENT
??_R2C_Control@@8 DD FLAT:??_R1A@?0A@EA@C_Control@@8	; C_Control::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R3C_Control@@8
rdata$r	SEGMENT
??_R3C_Control@@8 DD 00H				; C_Control::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2C_Control@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_Control@@@8
_DATA	SEGMENT
??_R0?AVC_Control@@@8 DD FLAT:??_7type_info@@6B@	; C_Control `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_Control@@', 00H
_DATA	ENDS
;	COMDAT ??_R4C_Control@@6B@
rdata$r	SEGMENT
??_R4C_Control@@6B@ DD 00H				; C_Control::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVC_Control@@@8
	DD	FLAT:??_R3C_Control@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@C_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_Base@@8 DD FLAT:??_R0?AVC_Base@@@8	; C_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2C_Base@@8
rdata$r	SEGMENT
??_R2C_Base@@8 DD FLAT:??_R1A@?0A@EA@C_Base@@8		; C_Base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3C_Base@@8
rdata$r	SEGMENT
??_R3C_Base@@8 DD 00H					; C_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_Base@@@8
_DATA	SEGMENT
??_R0?AVC_Base@@@8 DD FLAT:??_7type_info@@6B@		; C_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4C_Base@@6B@
rdata$r	SEGMENT
??_R4C_Base@@6B@ DD 00H					; C_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVC_Base@@@8
	DD	FLAT:??_R3C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05GBNOBMHE@?$CF6?41f?$AA@
CONST	SEGMENT
??_C@_05GBNOBMHE@?$CF6?41f?$AA@ DB '%6.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7C_Waypoint@@6B@
CONST	SEGMENT
??_7C_Waypoint@@6B@ DD FLAT:??_R4C_Waypoint@@6B@	; C_Waypoint::`vftable'
	DD	FLAT:??_EC_Waypoint@@UAEPAXI@Z
	DD	FLAT:?SetFlags@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOn@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOff@C_Base@@UAEXJ@Z
	DD	FLAT:?SetX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetW@C_Base@@UAEXJ@Z
	DD	FLAT:?SetH@C_Base@@UAEXJ@Z
	DD	FLAT:?SetXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetWH@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetXYWH@C_Base@@UAEXJJJJ@Z
	DD	FLAT:?SetRelX@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelY@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelXY@C_Control@@UAEXJJ@Z
	DD	FLAT:?SetState@C_Base@@UAEXF@Z
	DD	FLAT:?SetHotKey@C_Control@@UAEXF@Z
	DD	FLAT:?SetMenu@C_Control@@UAEXJ@Z
	DD	FLAT:?SetFont@C_Waypoint@@UAEXJ@Z
	DD	FLAT:?SetSound@C_Control@@UAEXJF@Z
	DD	FLAT:?SetCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetDragCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetHelpText@C_Control@@UAEXJ@Z
	DD	FLAT:?SetMouseOver@C_Control@@UAEXF@Z
	DD	FLAT:?SetMouseOverColor@C_Control@@UAEXK@Z
	DD	FLAT:?SetMouseOverPerc@C_Control@@UAEXF@Z
	DD	FLAT:?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z
	DD	FLAT:?GetRelX@C_Control@@UAEJXZ
	DD	FLAT:?GetRelY@C_Control@@UAEJXZ
	DD	FLAT:?GetState@C_Base@@UAEFXZ
	DD	FLAT:?GetHotKey@C_Control@@UAEFXZ
	DD	FLAT:?GetMenu@C_Control@@UAEJXZ
	DD	FLAT:?GetFont@C_Waypoint@@UAEJXZ
	DD	FLAT:?GetHelpText@C_Control@@UAEJXZ
	DD	FLAT:?GetSound@C_Control@@UAEPAVSOUND_RES@@F@Z
	DD	FLAT:?GetMouseOver@C_Control@@UAEFXZ
	DD	FLAT:?GetCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetDragCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ
	DD	FLAT:?IsBase@C_Control@@UAEHXZ
	DD	FLAT:?IsControl@C_Control@@UAEHXZ
	DD	FLAT:?Refresh@C_Waypoint@@UAEXXZ
	DD	FLAT:?Draw@C_Waypoint@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?HighLite@C_Control@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?SetSubParents@C_Waypoint@@UAEXPAVC_Window@@@Z
	DD	FLAT:?Cleanup@C_Waypoint@@UAEXXZ
	DD	FLAT:?TimerUpdate@C_Base@@UAEHXZ
	DD	FLAT:?Activate@C_Base@@UAEXXZ
	DD	FLAT:?Deactivate@C_Base@@UAEXXZ
	DD	FLAT:?CheckHotSpots@C_Waypoint@@UAEJJJ@Z
	DD	FLAT:?CheckKeyboard@C_Base@@UAEHEEEJ@Z
	DD	FLAT:?Process@C_Waypoint@@UAEHJF@Z
	DD	FLAT:?CloseWindow@C_Base@@UAEHXZ
	DD	FLAT:?MouseOver@C_Waypoint@@UAEHJJPAVC_Base@@@Z
	DD	FLAT:?GetMe@C_Base@@UAEPAV1@XZ
	DD	FLAT:?Dragable@C_Waypoint@@UAEHJ@Z
	DD	FLAT:?GetItemXY@C_Waypoint@@UAEXJPAJ0@Z
	DD	FLAT:?Drag@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Drop@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Wheel@C_Base@@UAEHHGG@Z
	DD	FLAT:?LocalFind@C_Base@@UAEFPAD@Z
	DD	FLAT:?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z
	DD	FLAT:?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z
CONST	ENDS
;	COMDAT ??_7C_Control@@6B@
CONST	SEGMENT
??_7C_Control@@6B@ DD FLAT:??_R4C_Control@@6B@		; C_Control::`vftable'
	DD	FLAT:??_EC_Control@@UAEPAXI@Z
	DD	FLAT:?SetFlags@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOn@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOff@C_Base@@UAEXJ@Z
	DD	FLAT:?SetX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetW@C_Base@@UAEXJ@Z
	DD	FLAT:?SetH@C_Base@@UAEXJ@Z
	DD	FLAT:?SetXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetWH@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetXYWH@C_Base@@UAEXJJJJ@Z
	DD	FLAT:?SetRelX@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelY@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelXY@C_Control@@UAEXJJ@Z
	DD	FLAT:?SetState@C_Base@@UAEXF@Z
	DD	FLAT:?SetHotKey@C_Control@@UAEXF@Z
	DD	FLAT:?SetMenu@C_Control@@UAEXJ@Z
	DD	FLAT:?SetFont@C_Base@@UAEXJ@Z
	DD	FLAT:?SetSound@C_Control@@UAEXJF@Z
	DD	FLAT:?SetCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetDragCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetHelpText@C_Control@@UAEXJ@Z
	DD	FLAT:?SetMouseOver@C_Control@@UAEXF@Z
	DD	FLAT:?SetMouseOverColor@C_Control@@UAEXK@Z
	DD	FLAT:?SetMouseOverPerc@C_Control@@UAEXF@Z
	DD	FLAT:?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z
	DD	FLAT:?GetRelX@C_Control@@UAEJXZ
	DD	FLAT:?GetRelY@C_Control@@UAEJXZ
	DD	FLAT:?GetState@C_Base@@UAEFXZ
	DD	FLAT:?GetHotKey@C_Control@@UAEFXZ
	DD	FLAT:?GetMenu@C_Control@@UAEJXZ
	DD	FLAT:?GetFont@C_Base@@UAEJXZ
	DD	FLAT:?GetHelpText@C_Control@@UAEJXZ
	DD	FLAT:?GetSound@C_Control@@UAEPAVSOUND_RES@@F@Z
	DD	FLAT:?GetMouseOver@C_Control@@UAEFXZ
	DD	FLAT:?GetCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetDragCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ
	DD	FLAT:?IsBase@C_Control@@UAEHXZ
	DD	FLAT:?IsControl@C_Control@@UAEHXZ
	DD	FLAT:?Refresh@C_Base@@UAEXXZ
	DD	FLAT:?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?HighLite@C_Control@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z
	DD	FLAT:?Cleanup@C_Base@@UAEXXZ
	DD	FLAT:?TimerUpdate@C_Base@@UAEHXZ
	DD	FLAT:?Activate@C_Base@@UAEXXZ
	DD	FLAT:?Deactivate@C_Base@@UAEXXZ
	DD	FLAT:?CheckHotSpots@C_Base@@UAEJJJ@Z
	DD	FLAT:?CheckKeyboard@C_Base@@UAEHEEEJ@Z
	DD	FLAT:?Process@C_Base@@UAEHJF@Z
	DD	FLAT:?CloseWindow@C_Base@@UAEHXZ
	DD	FLAT:?MouseOver@C_Control@@UAEHJJPAVC_Base@@@Z
	DD	FLAT:?GetMe@C_Base@@UAEPAV1@XZ
	DD	FLAT:?Dragable@C_Base@@UAEHJ@Z
	DD	FLAT:?GetItemXY@C_Base@@UAEXJPAJ0@Z
	DD	FLAT:?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Wheel@C_Base@@UAEHHGG@Z
	DD	FLAT:?LocalFind@C_Base@@UAEFPAD@Z
	DD	FLAT:?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z
	DD	FLAT:?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z
CONST	ENDS
;	COMDAT ??_7C_Base@@6B@
CONST	SEGMENT
??_7C_Base@@6B@ DD FLAT:??_R4C_Base@@6B@		; C_Base::`vftable'
	DD	FLAT:??_EC_Base@@UAEPAXI@Z
	DD	FLAT:?SetFlags@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOn@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOff@C_Base@@UAEXJ@Z
	DD	FLAT:?SetX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetW@C_Base@@UAEXJ@Z
	DD	FLAT:?SetH@C_Base@@UAEXJ@Z
	DD	FLAT:?SetXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetWH@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetXYWH@C_Base@@UAEXJJJJ@Z
	DD	FLAT:?SetRelX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetRelY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetRelXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetState@C_Base@@UAEXF@Z
	DD	FLAT:?SetHotKey@C_Base@@UAEXF@Z
	DD	FLAT:?SetMenu@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFont@C_Base@@UAEXJ@Z
	DD	FLAT:?SetSound@C_Base@@UAEXJF@Z
	DD	FLAT:?SetCursorID@C_Base@@UAEXJ@Z
	DD	FLAT:?SetDragCursorID@C_Base@@UAEXJ@Z
	DD	FLAT:?SetHelpText@C_Base@@UAEXJ@Z
	DD	FLAT:?SetMouseOver@C_Base@@UAEXF@Z
	DD	FLAT:?SetMouseOverColor@C_Base@@UAEXK@Z
	DD	FLAT:?SetMouseOverPerc@C_Base@@UAEXF@Z
	DD	FLAT:?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z
	DD	FLAT:?GetRelX@C_Base@@UAEJXZ
	DD	FLAT:?GetRelY@C_Base@@UAEJXZ
	DD	FLAT:?GetState@C_Base@@UAEFXZ
	DD	FLAT:?GetHotKey@C_Base@@UAEFXZ
	DD	FLAT:?GetMenu@C_Base@@UAEJXZ
	DD	FLAT:?GetFont@C_Base@@UAEJXZ
	DD	FLAT:?GetHelpText@C_Base@@UAEJXZ
	DD	FLAT:?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z
	DD	FLAT:?GetMouseOver@C_Base@@UAEFXZ
	DD	FLAT:?GetCursorID@C_Base@@UAEJXZ
	DD	FLAT:?GetDragCursorID@C_Base@@UAEJXZ
	DD	FLAT:?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ
	DD	FLAT:?IsBase@C_Base@@UAEHXZ
	DD	FLAT:?IsControl@C_Base@@UAEHXZ
	DD	FLAT:?Refresh@C_Base@@UAEXXZ
	DD	FLAT:?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z
	DD	FLAT:?Cleanup@C_Base@@UAEXXZ
	DD	FLAT:?TimerUpdate@C_Base@@UAEHXZ
	DD	FLAT:?Activate@C_Base@@UAEXXZ
	DD	FLAT:?Deactivate@C_Base@@UAEXXZ
	DD	FLAT:?CheckHotSpots@C_Base@@UAEJJJ@Z
	DD	FLAT:?CheckKeyboard@C_Base@@UAEHEEEJ@Z
	DD	FLAT:?Process@C_Base@@UAEHJF@Z
	DD	FLAT:?CloseWindow@C_Base@@UAEHXZ
	DD	FLAT:?MouseOver@C_Base@@UAEHJJPAV1@@Z
	DD	FLAT:?GetMe@C_Base@@UAEPAV1@XZ
	DD	FLAT:?Dragable@C_Base@@UAEHJ@Z
	DD	FLAT:?GetItemXY@C_Base@@UAEXJPAJ0@Z
	DD	FLAT:?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Wheel@C_Base@@UAEHHGG@Z
	DD	FLAT:?LocalFind@C_Base@@UAEFPAD@Z
	DD	FLAT:?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z
	DD	FLAT:?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z$0
__unwindtable$??1C_Waypoint@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1C_Waypoint@@UAE@XZ$0
__unwindtable$??0C_Waypoint@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0C_Waypoint@@QAE@XZ$0
__ehfuncinfo$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1C_Waypoint@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1C_Waypoint@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0C_Waypoint@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0C_Waypoint@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1C_Control@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1C_Control@@UAE@XZ$0
__ehfuncinfo$??1C_Control@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1C_Control@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_Waypoint@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Waypoint@@UAEPAXI@Z PROC				; C_Waypoint::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Waypoint@@UAE@XZ			; C_Waypoint::~C_Waypoint
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Waypoint@@UAEPAXI@Z ENDP				; C_Waypoint::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_par$ = 8						; size = 4
?SetSubParents@C_Waypoint@@UAEXPAVC_Window@@@Z PROC	; C_Waypoint::SetSubParents
; _this$ = ecx

; 736  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 737  : 	WAYPOINTLIST *cur;
; 738  : 
; 739  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@SetSubPare:

; 740  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@SetSubPare

; 741  : 	{
; 742  : 		cur->Icon->SetParent(par);

	mov	edx, DWORD PTR _par$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 743  : 		cur->Icon->SetSubParents(par);

	mov	ecx, DWORD PTR _par$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+172]
	call	eax

; 744  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 745  : 	}

	jmp	SHORT $LN2@SetSubPare
$LN3@SetSubPare:

; 746  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSubParents@C_Waypoint@@UAEXPAVC_Window@@@Z ENDP	; C_Waypoint::SetSubParents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_prev$ = -12						; size = 4
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?Draw@C_Waypoint@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; C_Waypoint::Draw
; _this$ = ecx

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 408  : 	WAYPOINTLIST *cur,*prev;
; 409  : 
; 410  : 	if(!Ready()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ready@C_Base@@QAEFXZ			; C_Base::Ready
	cwde
	test	eax, eax
	jne	SHORT $LN9@Draw
	jmp	$LN10@Draw
$LN9@Draw:

; 411  : 
; 412  : 	cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _cur$[ebp], edx

; 413  : 	prev=cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
$LN8@Draw:

; 414  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN10@Draw

; 415  : 	{
; 416  : 		if(cur->ID)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN6@Draw

; 417  : 		{
; 418  : 			if(!(cur->Flags & C_BIT_INVISIBLE))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	jne	$LN5@Draw

; 419  : 			{
; 420  : 				if(cur->Flags & C_BIT_USELINE)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN4@Draw

; 421  : 					if(prev != cur)

	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _cur$[ebp]
	je	SHORT $LN4@Draw

; 422  : 						if(prev->Group == cur->Group)

	mov	ecx, DWORD PTR _prev$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN4@Draw

; 423  : 							Parent_->DrawLine(surface,cur->LineColor_[cur->state],prev->x,prev->y,cur->x,cur->y,GetFlags(),GetClient(),cliprect);

	mov	ecx, DWORD PTR _cliprect$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	push	eax
	mov	eax, DWORD PTR _cur$[ebp]
	movsx	ecx, WORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	movsx	eax, WORD PTR [edx+18]
	push	eax
	mov	ecx, DWORD PTR _prev$[ebp]
	movsx	edx, WORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _prev$[ebp]
	movsx	ecx, WORD PTR [eax+18]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	movsx	eax, WORD PTR [edx+16]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+40]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?DrawLine@C_Window@@QAEXPAVSCREEN@@KJJJJJJPAUUI95_RECT@@@Z ; C_Window::DrawLine
$LN4@Draw:

; 424  : 
; 425  : 				if(cur->Icon)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN5@Draw

; 426  : 					cur->Icon->Draw(surface,cliprect);

	mov	eax, DWORD PTR _cliprect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN5@Draw:

; 427  : 			}
; 428  : 			prev=cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], ecx
$LN6@Draw:

; 429  : 		}
; 430  : 		cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _cur$[ebp], eax

; 431  : 	}

	jmp	$LN8@Draw
$LN10@Draw:

; 432  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Draw@C_Waypoint@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; C_Waypoint::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_cur$ = -24						; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?Refresh@C_Waypoint@@UAEXXZ PROC			; C_Waypoint::Refresh
; _this$ = ecx

; 374  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 	WAYPOINTLIST *cur;
; 376  : 	UI95_RECT rect;
; 377  : 	if(!Ready() || GetFlags() & C_BIT_INVISIBLE || Parent_ == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ready@C_Base@@QAEFXZ			; C_Base::Ready
	cwde
	test	eax, eax
	je	SHORT $LN8@Refresh
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	SHORT $LN8@Refresh
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN9@Refresh
$LN8@Refresh:

; 378  : 		return;

	jmp	$LN10@Refresh
$LN9@Refresh:

; 379  : 
; 380  : 	rect.left=5000;

	mov	DWORD PTR _rect$[ebp], 5000		; 00001388H

; 381  : 	rect.top=5000;

	mov	DWORD PTR _rect$[ebp+4], 5000		; 00001388H

; 382  : 	rect.bottom=0;

	mov	DWORD PTR _rect$[ebp+12], 0

; 383  : 	rect.right=0;

	mov	DWORD PTR _rect$[ebp+8], 0

; 384  : 
; 385  : 	cur=Root_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _cur$[ebp], eax
$LN7@Refresh:

; 386  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN6@Refresh

; 387  : 	{
; 388  : 		if(!(cur->Flags & C_BIT_INVISIBLE))

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	jne	$LN5@Refresh

; 389  : 		{
; 390  : 			if(cur->Icon->GetX() < rect.left)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	cmp	eax, DWORD PTR _rect$[ebp]
	jge	SHORT $LN4@Refresh

; 391  : 				rect.left=cur->Icon->GetX();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	DWORD PTR _rect$[ebp], eax
$LN4@Refresh:

; 392  : 			if(cur->Icon->GetY() < rect.top)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	cmp	eax, DWORD PTR _rect$[ebp+4]
	jge	SHORT $LN3@Refresh

; 393  : 				rect.top=cur->Icon->GetY();

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	DWORD PTR _rect$[ebp+4], eax
$LN3@Refresh:

; 394  : 			if((cur->Icon->GetX()+cur->Icon->GetW()) > rect.right)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	add	esi, eax
	cmp	esi, DWORD PTR _rect$[ebp+8]
	jle	SHORT $LN2@Refresh

; 395  : 				rect.right=cur->Icon->GetX()+cur->Icon->GetW();

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	add	esi, eax
	mov	DWORD PTR _rect$[ebp+8], esi
$LN2@Refresh:

; 396  : 			if((cur->Icon->GetY()+cur->Icon->GetH()) > rect.bottom)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	esi, eax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	add	esi, eax
	cmp	esi, DWORD PTR _rect$[ebp+12]
	jle	SHORT $LN5@Refresh

; 397  : 				rect.bottom=cur->Icon->GetY()+cur->Icon->GetH();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	esi, eax
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	add	esi, eax
	mov	DWORD PTR _rect$[ebp+12], esi
$LN5@Refresh:

; 398  : 		}
; 399  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _cur$[ebp], ecx

; 400  : 	}

	jmp	$LN7@Refresh
$LN6@Refresh:

; 401  : 	Parent_->SetUpdateRect(last_.left,last_.top,last_.right,last_.bottom,GetFlags(),GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect

; 402  : 	Parent_->SetUpdateRect(rect.left,rect.top,rect.right,rect.bottom,GetFlags(),GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	push	eax
	mov	ecx, DWORD PTR _rect$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _rect$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _rect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect

; 403  : 	last_=rect;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN10@Refresh:

; 404  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@C_Waypoint@@UAEXXZ ENDP			; C_Waypoint::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 2
___formal$ = 16						; size = 2
___formal$ = 20						; size = 4
?Drop@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC ; C_Waypoint::Drop
; _this$ = ecx

; 730  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 	Dragging_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+162], ax

; 732  : 	return(0);

	xor	eax, eax

; 733  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drop@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP ; C_Waypoint::Drop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
tv877 = -76						; size = 4
tv1029 = -72						; size = 4
_Leave$ = -68						; size = 4
tv967 = -64						; size = 4
_relx$ = -60						; size = 4
_rely$ = -56						; size = 4
_dx$ = -52						; size = 4
_dy$ = -48						; size = 4
_x$ = -44						; size = 4
_wk1$ = -40						; size = 4
_y$ = -36						; size = 4
_Waypoint$ = -32					; size = 4
_wk2$ = -28						; size = 4
_this$ = -24						; size = 4
_buf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
_Drag$ = 8						; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
_over$ = 20						; size = 4
?Drag@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC ; C_Waypoint::Drag
; _this$ = ecx

; 551  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 552  : 	WAYPOINTLIST *Waypoint,*wk1,*wk2;
; 553  : 	long relx,rely;
; 554  : 	long x,y;
; 555  : 	float dx,dy;
; 556  : 	_TCHAR buf[15];
; 557  : 	F4CSECTIONHANDLE* Leave;
; 558  : 
; 559  : 	if(GetFlags() & C_BIT_INVISIBLE || !(GetFlags() & C_BIT_ENABLED) || !Dragable(0))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	SHORT $LN30@Drag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN30@Drag
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	jne	SHORT $LN31@Drag
$LN30@Drag:

; 560  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN32@Drag
$LN31@Drag:

; 561  : 
; 562  : 	if(over != Parent_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _over$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	je	SHORT $LN29@Drag

; 563  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN32@Drag
$LN29@Drag:

; 564  : 
; 565  : 	if(!(GetFlags() & C_BIT_ABSOLUTE))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	$LN25@Drag

; 566  : 	{
; 567  : 		relx=MouseX - over->GetX();

	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _over$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	sub	esi, eax
	mov	DWORD PTR _relx$[ebp], esi

; 568  : 		rely=MouseY- over->GetY();

	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _over$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	mov	DWORD PTR _rely$[ebp], esi

; 569  : 
; 570  : 		if(relx < over->ClientArea_[GetClient()].left || relx > over->ClientArea_[GetClient()].right)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	mov	eax, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR _relx$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+168]
	jl	SHORT $LN26@Drag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	mov	eax, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR _relx$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+176]
	jle	SHORT $LN27@Drag
$LN26@Drag:

; 571  : 			return(FALSE);

	xor	eax, eax
	jmp	$LN32@Drag
$LN27@Drag:

; 572  : 		if(rely < over->ClientArea_[GetClient()].top || rely > over->ClientArea_[GetClient()].bottom)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	mov	eax, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR _rely$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+172]
	jl	SHORT $LN24@Drag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	mov	eax, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR _rely$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+180]
	jle	SHORT $LN25@Drag
$LN24@Drag:

; 573  : 			return(FALSE);

	xor	eax, eax
	jmp	$LN32@Drag
$LN25@Drag:

; 574  : 	}
; 575  : 
; 576  : 	if(LastWP_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+104], 0
	jne	SHORT $LN23@Drag

; 577  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN32@Drag
$LN23@Drag:

; 578  : 
; 579  : 	if(!(LastWP_->Flags & C_BIT_DRAGABLE))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN22@Drag

; 580  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN32@Drag
$LN22@Drag:

; 581  : 
; 582  : 	Leave=UI_Enter(Parent_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 583  : 	Waypoint=LastWP_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _Waypoint$[ebp], eax

; 584  : 
; 585  : #if 0
; 586  : 	cur=Root_;
; 587  : 	prev=NULL;
; 588  : 	if(cur != Waypoint)
; 589  : 	{
; 590  : 		prev=cur;
; 591  : 		while(cur->Next && cur->Next != Waypoint)
; 592  : 		{
; 593  : 			prev=cur;
; 594  : 			cur=cur->Next;
; 595  : 		}
; 596  : 	}
; 597  : 
; 598  : 	next=Waypoint->Next;
; 599  : 
; 600  : 	rect.left=Waypoint->x;
; 601  : 	rect.top=Waypoint->y;
; 602  : 	rect.right=Waypoint->x;
; 603  : 	rect.bottom=Waypoint->y;
; 604  : 
; 605  : 	if(prev)
; 606  : 	{
; 607  : 		if(prev->x < rect.left)
; 608  : 			rect.left=prev->x;
; 609  : 		if(prev->y < rect.top)
; 610  : 			rect.top=prev->y;
; 611  : 		if(prev->x > rect.right)
; 612  : 			rect.right=prev->x;
; 613  : 		if(prev->y > rect.bottom)
; 614  : 			rect.bottom=prev->y;
; 615  : //		prev->Icon->Refresh();
; 616  : 	}
; 617  : 	if(next)
; 618  : 	{
; 619  : 		if(next->x < rect.left)
; 620  : 			rect.left=next->x;
; 621  : 		if(next->y < rect.top)
; 622  : 			rect.top=next->y;
; 623  : 		if(next->x > rect.right)
; 624  : 			rect.right=next->x;
; 625  : 		if(next->y > rect.bottom)
; 626  : 			rect.bottom=next->y;
; 627  : //		next->Icon->Refresh();
; 628  : 	}
; 629  : //	Waypoint->Icon->Refresh();
; 630  : #endif
; 631  : 	Dragging_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+162], cx

; 632  : 
; 633  : 
; 634  : 	if(GetType() == C_TYPE_DRAGXY || GetType() == C_TYPE_DRAGX)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	cwde
	cmp	eax, 38					; 00000026H
	je	SHORT $LN20@Drag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	movsx	ecx, ax
	cmp	ecx, 36					; 00000024H
	jne	SHORT $LN21@Drag
$LN20@Drag:

; 635  : 		x=Drag->ItemX_ + (MouseX - Drag->StartX_);

	movzx	edx, WORD PTR _MouseX$[ebp]
	mov	eax, DWORD PTR _Drag$[ebp]
	sub	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Drag$[ebp]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _x$[ebp], edx

; 636  : 	else

	jmp	SHORT $LN19@Drag
$LN21@Drag:

; 637  : 		x=Waypoint->x;

	mov	edx, DWORD PTR _Waypoint$[ebp]
	movsx	eax, WORD PTR [edx+18]
	mov	DWORD PTR _x$[ebp], eax
$LN19@Drag:

; 638  : 
; 639  : 	if(GetType() == C_TYPE_DRAGXY || GetType() == C_TYPE_DRAGY)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	movsx	ecx, ax
	cmp	ecx, 38					; 00000026H
	je	SHORT $LN17@Drag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	movsx	edx, ax
	cmp	edx, 37					; 00000025H
	jne	SHORT $LN18@Drag
$LN17@Drag:

; 640  : 		y=Drag->ItemY_ + (MouseY - Drag->StartY_);

	movzx	eax, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _Drag$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Drag$[ebp]
	add	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _y$[ebp], eax

; 641  : 	else

	jmp	SHORT $LN16@Drag
$LN18@Drag:

; 642  : 		y=Waypoint->y;

	mov	eax, DWORD PTR _Waypoint$[ebp]
	movsx	ecx, WORD PTR [eax+20]
	mov	DWORD PTR _y$[ebp], ecx
$LN16@Drag:

; 643  : 
; 644  : 	if(x < (over->ClientArea_[GetClient()].left-over->VX_[GetClient()]))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	mov	eax, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR _over$[ebp]
	mov	eax, DWORD PTR [eax+esi+168]
	sub	eax, DWORD PTR [ecx+edx*4+480]
	cmp	DWORD PTR _x$[ebp], eax
	jge	SHORT $LN15@Drag

; 645  : 		x=over->ClientArea_[GetClient()].left-over->VX_[GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _over$[ebp]
	mov	eax, DWORD PTR _over$[ebp]
	mov	edx, DWORD PTR [edx+esi+168]
	sub	edx, DWORD PTR [eax+ecx*4+480]
	mov	DWORD PTR _x$[ebp], edx
$LN15@Drag:

; 646  : 	if(x > (over->ClientArea_[GetClient()].right-over->VX_[GetClient()]))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _over$[ebp]
	mov	edx, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR [ecx+esi+176]
	sub	ecx, DWORD PTR [edx+eax*4+480]
	cmp	DWORD PTR _x$[ebp], ecx
	jle	SHORT $LN14@Drag

; 647  : 		x=over->ClientArea_[GetClient()].right-over->VX_[GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	mov	eax, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR _over$[ebp]
	mov	eax, DWORD PTR [eax+esi+176]
	sub	eax, DWORD PTR [ecx+edx*4+480]
	mov	DWORD PTR _x$[ebp], eax
$LN14@Drag:

; 648  : 	if(y < (over->ClientArea_[GetClient()].top-over->VY_[GetClient()]))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _over$[ebp]
	mov	eax, DWORD PTR _over$[ebp]
	mov	edx, DWORD PTR [edx+esi+172]
	sub	edx, DWORD PTR [eax+ecx*4+512]
	cmp	DWORD PTR _y$[ebp], edx
	jge	SHORT $LN13@Drag

; 649  : 		y=over->ClientArea_[GetClient()].top-over->VY_[GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _over$[ebp]
	mov	edx, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR [ecx+esi+172]
	sub	ecx, DWORD PTR [edx+eax*4+512]
	mov	DWORD PTR _y$[ebp], ecx
$LN13@Drag:

; 650  : 	if(y > (over->ClientArea_[GetClient()].bottom-over->VY_[GetClient()]))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	mov	eax, DWORD PTR _over$[ebp]
	mov	ecx, DWORD PTR _over$[ebp]
	mov	eax, DWORD PTR [eax+esi+180]
	sub	eax, DWORD PTR [ecx+edx*4+512]
	cmp	DWORD PTR _y$[ebp], eax
	jle	SHORT $LN12@Drag

; 651  : 		y=over->ClientArea_[GetClient()].bottom-over->VY_[GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	esi, ax
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _over$[ebp]
	mov	eax, DWORD PTR _over$[ebp]
	mov	edx, DWORD PTR [edx+esi+180]
	sub	edx, DWORD PTR [eax+ecx*4+512]
	mov	DWORD PTR _y$[ebp], edx
$LN12@Drag:

; 652  : 
; 653  : 	Waypoint->x=static_cast<short>(x);

	mov	eax, DWORD PTR _Waypoint$[ebp]
	mov	cx, WORD PTR _x$[ebp]
	mov	WORD PTR [eax+18], cx

; 654  : 	Waypoint->y=static_cast<short>(y);

	mov	edx, DWORD PTR _Waypoint$[ebp]
	mov	ax, WORD PTR _y$[ebp]
	mov	WORD PTR [edx+20], ax

; 655  : 
; 656  : 	if(!WPScaleType_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+160]
	test	edx, edx
	jne	SHORT $LN11@Drag

; 657  : 	{
; 658  : 		Waypoint->worldx=x/scale_;

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+180]
	mov	ecx, DWORD PTR _Waypoint$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 659  : 		Waypoint->worldy=y/scale_;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+180]
	mov	eax, DWORD PTR _Waypoint$[ebp]
	movss	DWORD PTR [eax+28], xmm0
	jmp	$LN5@Drag
$LN11@Drag:

; 660  : 	}
; 661  : 	else if(WPScaleType_ == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+160]
	cmp	edx, 1
	jne	SHORT $LN9@Drag

; 662  : 	{
; 663  : 		Waypoint->worldy=-((float)exp((MaxWorldY_ - y)*0.034658441f)-1.0f) * 10000.0f; //(0.03nnn = 1/28.853)

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+156]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3d0df602
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?exp@@YAMM@Z				; exp
	add	esp, 4
	fstp	DWORD PTR tv877[ebp]
	movss	xmm0, DWORD PTR tv877[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@461c4000
	mov	ecx, DWORD PTR _Waypoint$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 664  : 		if(Waypoint->worldy > 0)

	mov	edx, DWORD PTR _Waypoint$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN8@Drag

; 665  : 			Waypoint->worldy=0;

	mov	eax, DWORD PTR _Waypoint$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
$LN8@Drag:

; 666  : 	}

	jmp	SHORT $LN5@Drag
$LN9@Drag:

; 667  : 	else if(WPScaleType_ == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+160]
	cmp	edx, 2
	jne	SHORT $LN5@Drag

; 668  : 	{
; 669  : 		Waypoint->worldy=-(float)((MaxWorldY_ - y) * 100);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+156]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@42c80000
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _Waypoint$[ebp]
	movss	DWORD PTR [ecx+28], xmm1

; 670  : 		if(Waypoint->worldy > 0)

	mov	edx, DWORD PTR _Waypoint$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@Drag

; 671  : 			Waypoint->worldy=0;

	mov	eax, DWORD PTR _Waypoint$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
$LN5@Drag:

; 672  : 	}
; 673  : 	Waypoint->Icon->SetXY(x-Waypoint->Icon->GetW()/2,y-Waypoint->Icon->GetH()/2);

	mov	ecx, DWORD PTR _Waypoint$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _Waypoint$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _Waypoint$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _Waypoint$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 674  : 
; 675  : 	if(!(Waypoint->ID & 0x60000000))

	mov	ecx, DWORD PTR _Waypoint$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1610612736				; 60000000H
	jne	$LN2@Drag

; 676  : 	{
; 677  : 		wk1=FindID(Waypoint->ID-1);

	mov	eax, DWORD PTR _Waypoint$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk1$[ebp], eax

; 678  : 		wk2=FindID(0x40000000+Waypoint->ID);

	mov	edx, DWORD PTR _Waypoint$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1073741824				; 40000000H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk2$[ebp], eax

; 679  : 		if(wk1 && wk2)

	cmp	DWORD PTR _wk1$[ebp], 0
	je	$LN3@Drag
	cmp	DWORD PTR _wk2$[ebp], 0
	je	$LN3@Drag

; 680  : 		{
; 681  : 			dx=(Waypoint->worldx - wk1->worldx);

	mov	ecx, DWORD PTR _Waypoint$[ebp]
	mov	edx, DWORD PTR _wk1$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	subss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR _dx$[ebp], xmm0

; 682  : 			dy=(Waypoint->worldy - wk1->worldy);

	mov	eax, DWORD PTR _Waypoint$[ebp]
	mov	ecx, DWORD PTR _wk1$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	subss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _dy$[ebp], xmm0

; 683  : 
; 684  : 			wk2->worldx = wk1->worldx + dx * .5F;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _wk1$[ebp]
	addss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 685  : 			wk2->worldy = wk1->worldy + dy * .5F;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _wk1$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 686  : 			wk2->x=(short)(wk2->worldx*scale_);

	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+180]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [eax+18], dx

; 687  : 			wk2->y=(short)(wk2->worldy*scale_);

	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR [edx+180]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [ecx+20], ax

; 688  : 			wk2->Icon->SetXY(wk2->x - wk2->Icon->GetW()/2,wk2->y - wk2->Icon->GetH()/2);

	mov	edx, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [edx+20]
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [ecx+18]
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 689  : 			_stprintf(buf,"%6.1f",sqrt(dx * dx + dy * dy)*FT_TO_NM);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv967[ebp]
	movss	xmm0, DWORD PTR tv967[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05GBNOBMHE@?$CF6?41f?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 690  : 			wk2->Icon->SetAllLabel(gStringMgr->GetText(gStringMgr->AddText(buf)));

	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetAllLabel@C_Button@@QAEXPAD@Z	; C_Button::SetAllLabel
$LN3@Drag:

; 691  : 		}
; 692  : 		wk1=FindID(Waypoint->ID+1);

	mov	eax, DWORD PTR _Waypoint$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk1$[ebp], eax

; 693  : 		wk2=FindID(0x40000000+Waypoint->ID+1);

	mov	edx, DWORD PTR _Waypoint$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1073741825				; 40000001H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk2$[ebp], eax

; 694  : 		if(wk1 && wk2)

	cmp	DWORD PTR _wk1$[ebp], 0
	je	$LN2@Drag
	cmp	DWORD PTR _wk2$[ebp], 0
	je	$LN2@Drag

; 695  : 		{
; 696  : 			dx=(wk1->worldx - Waypoint->worldx);

	mov	ecx, DWORD PTR _wk1$[ebp]
	mov	edx, DWORD PTR _Waypoint$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	subss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR _dx$[ebp], xmm0

; 697  : 			dy=(wk1->worldy - Waypoint->worldy);

	mov	eax, DWORD PTR _wk1$[ebp]
	mov	ecx, DWORD PTR _Waypoint$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	subss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _dy$[ebp], xmm0

; 698  : 
; 699  : 			wk2->worldx = Waypoint->worldx + dx * .5F;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _Waypoint$[ebp]
	addss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 700  : 			wk2->worldy = Waypoint->worldy + dy * .5F;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _Waypoint$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 701  : 			wk2->x=(short)(wk2->worldx*scale_);

	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+180]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [eax+18], dx

; 702  : 			wk2->y=(short)(wk2->worldy*scale_);

	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR [edx+180]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [ecx+20], ax

; 703  : 			wk2->Icon->SetXY(wk2->x - wk2->Icon->GetW()/2,wk2->y - wk2->Icon->GetH()/2);

	mov	edx, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [edx+20]
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [ecx+18]
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 704  : 			_stprintf(buf,"%6.1f",sqrt(dx * dx + dy * dy)*FT_TO_NM);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1029[ebp]
	movss	xmm0, DWORD PTR tv1029[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05GBNOBMHE@?$CF6?41f?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 705  : 			wk2->Icon->SetAllLabel(gStringMgr->GetText(gStringMgr->AddText(buf)));

	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetAllLabel@C_Button@@QAEXPAD@Z	; C_Button::SetAllLabel
$LN2@Drag:

; 706  : 		}
; 707  : 	}
; 708  : 	Parent_->RefreshClient(GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?RefreshClient@C_Window@@QAEXJ@Z	; C_Window::RefreshClient

; 709  : 
; 710  : 	if(Callback_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN1@Drag

; 711  : 		(*Callback_)(LastWP_->ID,C_TYPE_MOUSEMOVE,this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 12					; 0000000cH
$LN1@Drag:

; 712  : 	UI_Leave(Leave);

	mov	eax, DWORD PTR _Leave$[ebp]
	push	eax
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 713  : 
; 714  : 	return(TRUE);

	mov	eax, 1
$LN32@Drag:

; 715  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drag@C_Waypoint@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP ; C_Waypoint::Drag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Waypoint$ = -4						; size = 4
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?GetItemXY@C_Waypoint@@UAEXJPAJ0@Z PROC			; C_Waypoint::GetItemXY
; _this$ = ecx

; 718  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 719  : 	WAYPOINTLIST *Waypoint;
; 720  : 
; 721  : 	Waypoint=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _Waypoint$[ebp], eax

; 722  : 	if(Waypoint == NULL)

	cmp	DWORD PTR _Waypoint$[ebp], 0
	jne	SHORT $LN1@GetItemXY

; 723  : 		return;

	jmp	SHORT $LN2@GetItemXY
$LN1@GetItemXY:

; 724  : 
; 725  : 	*x=Waypoint->x;

	mov	ecx, DWORD PTR _Waypoint$[ebp]
	movsx	edx, WORD PTR [ecx+18]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], edx

; 726  : 	*y=Waypoint->y;

	mov	ecx, DWORD PTR _Waypoint$[ebp]
	movsx	edx, WORD PTR [ecx+20]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax], edx
$LN2@GetItemXY:

; 727  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetItemXY@C_Waypoint@@UAEXJPAJ0@Z ENDP			; C_Waypoint::GetItemXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_relX$ = 8						; size = 4
_relY$ = 12						; size = 4
___formal$ = 16						; size = 4
?MouseOver@C_Waypoint@@UAEHJJPAVC_Base@@@Z PROC		; C_Waypoint::MouseOver
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	WAYPOINTLIST *cur;
; 534  : 
; 535  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@MouseOver:

; 536  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@MouseOver

; 537  : 	{
; 538  : 		if(!(cur->Flags & C_BIT_INVISIBLE) && cur->Flags & C_BIT_ENABLED)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	jne	SHORT $LN2@MouseOver
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2048				; 00000800H
	je	SHORT $LN2@MouseOver

; 539  : 		{
; 540  : 			if(cur->Icon && cur->Icon->MouseOver(relX,relY,cur->Icon)) // possible CTD fix

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@MouseOver
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _relY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _relX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	je	SHORT $LN2@MouseOver

; 541  : 			{
; 542  : 				return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN5@MouseOver
$LN2@MouseOver:

; 543  : 			}
; 544  : 		}
; 545  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 546  : 	}

	jmp	SHORT $LN4@MouseOver
$LN3@MouseOver:

; 547  : 	return(FALSE);

	xor	eax, eax
$LN5@MouseOver:

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MouseOver@C_Waypoint@@UAEHJJPAVC_Base@@@Z ENDP		; C_Waypoint::MouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_HitType$ = 12						; size = 2
?Process@C_Waypoint@@UAEHJF@Z PROC			; C_Waypoint::Process
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	gSoundMgr->PlaySound(GetSound(HitType));

	movzx	eax, WORD PTR _HitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax
	push	eax
	mov	ecx, DWORD PTR ?gSoundMgr@@3PAVC_Sound@@A ; gSoundMgr
	call	?PlaySoundA@C_Sound@@QAEHPAVSOUND_RES@@@Z ; C_Sound::PlaySoundA

; 99   : 	if(Callback_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	je	SHORT $LN2@Process

; 100  : 		(*Callback_)(ID,HitType,this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	movzx	eax, WORD PTR _HitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 12					; 0000000cH
$LN2@Process:

; 101  : 	if(LastWP_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN1@Process

; 102  : 		return(LastWP_->Icon->Process(ID,HitType));

	movzx	edx, WORD PTR _HitType$[ebp]
	push	edx
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+200]
	call	edx
	jmp	SHORT $LN3@Process
$LN1@Process:

; 103  : 	return(FALSE);

	xor	eax, eax
$LN3@Process:

; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Process@C_Waypoint@@UAEHJF@Z ENDP			; C_Waypoint::Process
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.h
;	COMDAT ?Dragable@C_Waypoint@@UAEHJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dragable@C_Waypoint@@UAEHJ@Z PROC			; C_Waypoint::Dragable, COMDAT
; _this$ = ecx

; 96   : 		BOOL Dragable(long) { return(GetFlags() & C_BIT_DRAGABLE);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 4096				; 00001000H
	mov	esp, ebp
	pop	ebp
	ret	4
?Dragable@C_Waypoint@@UAEHJ@Z ENDP			; C_Waypoint::Dragable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_relX$ = 8						; size = 4
_relY$ = 12						; size = 4
?CheckHotSpots@C_Waypoint@@UAEJJJ@Z PROC		; C_Waypoint::CheckHotSpots
; _this$ = ecx

; 509  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 	WAYPOINTLIST *cur;
; 511  : 
; 512  : 	LastWP_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0

; 513  : 	cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _cur$[ebp], edx
$LN5@CheckHotSp:

; 514  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN4@CheckHotSp

; 515  : 	{
; 516  : 		if(!(cur->Flags & C_BIT_INVISIBLE) && cur->Flags & C_BIT_ENABLED)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN3@CheckHotSp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 2048				; 00000800H
	je	SHORT $LN3@CheckHotSp

; 517  : 		{
; 518  : 			if(cur->Icon->CheckHotSpots(relX,relY))

	mov	ecx, DWORD PTR _relY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _relX$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN3@CheckHotSp

; 519  : 				LastWP_=cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+104], ecx
$LN3@CheckHotSp:

; 520  : 		}
; 521  : 		cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _cur$[ebp], eax

; 522  : 	}

	jmp	SHORT $LN5@CheckHotSp
$LN4@CheckHotSp:

; 523  : 	if(LastWP_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN1@CheckHotSp

; 524  : 	{
; 525  : 		SetRelXY(relX-GetX(),relY-GetY());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	edx, DWORD PTR _relY$[ebp]
	sub	edx, eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	ecx, DWORD PTR _relX$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx

; 526  : 		return(LastWP_->ID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN6@CheckHotSp
$LN1@CheckHotSp:

; 527  : 	}
; 528  : 	return(0);

	xor	eax, eax
$LN6@CheckHotSp:

; 529  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CheckHotSpots@C_Waypoint@@UAEJJJ@Z ENDP		; C_Waypoint::CheckHotSpots
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_x$ = 12						; size = 2
_y$ = 16						; size = 2
?SetTextOffset@C_Waypoint@@QAEXJFF@Z PROC		; C_Waypoint::SetTextOffset
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	WAYPOINTLIST *cur;
; 277  : 
; 278  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 279  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@SetTextOff

; 280  : 	{
; 281  : 		cur->Icon->SetLabelOffset(C_STATE_0,x,y);

	movsx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movsx	edx, WORD PTR _x$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetLabelOffset@C_Button@@QAEXFJJ@Z	; C_Button::SetLabelOffset

; 282  : 		cur->Icon->SetLabelOffset(C_STATE_1,x,y);

	movsx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movsx	edx, WORD PTR _x$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetLabelOffset@C_Button@@QAEXFJJ@Z	; C_Button::SetLabelOffset

; 283  : 		cur->Icon->SetLabelOffset(C_STATE_2,x,y);

	movsx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movsx	edx, WORD PTR _x$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetLabelOffset@C_Button@@QAEXFJJ@Z	; C_Button::SetLabelOffset

; 284  : 		cur->Icon->SetLabelInfo();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetLabelInfo@C_Button@@QAEXXZ		; C_Button::SetLabelInfo
$LN2@SetTextOff:

; 285  : 	}
; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTextOffset@C_Waypoint@@QAEXJFF@Z ENDP		; C_Waypoint::SetTextOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?GetLabel@C_Waypoint@@QAEPADJ@Z PROC			; C_Waypoint::GetLabel
; _this$ = ecx

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 266  : 	WAYPOINTLIST *cur;
; 267  : 
; 268  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 269  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@GetLabel

; 270  : 		return(cur->Icon->GetLabel(C_STATE_0));

	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetLabel@C_Button@@QAEPADF@Z		; C_Button::GetLabel
	jmp	SHORT $LN2@GetLabel
$LN1@GetLabel:

; 271  : 	return(NULL);

	xor	eax, eax
$LN2@GetLabel:

; 272  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetLabel@C_Waypoint@@QAEPADJ@Z ENDP			; C_Waypoint::GetLabel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_norm$ = 12						; size = 4
_sel$ = 16						; size = 4
_othr$ = 20						; size = 4
?SetLineColor@C_Waypoint@@QAEXJKKK@Z PROC		; C_Waypoint::SetLineColor
; _this$ = ecx

; 252  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	WAYPOINTLIST *cur;
; 254  : 
; 255  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 256  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@SetLineCol

; 257  : 	{
; 258  : 		cur->LineColor_[0]=norm;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _norm$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax

; 259  : 		cur->LineColor_[1]=sel;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _sel$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax

; 260  : 		cur->LineColor_[2]=othr;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _othr$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax
$LN2@SetLineCol:

; 261  : 	}
; 262  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetLineColor@C_Waypoint@@QAEXJKKK@Z ENDP		; C_Waypoint::SetLineColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_norm$ = 12						; size = 4
_sel$ = 16						; size = 4
_othr$ = 20						; size = 4
?SetLabelColor@C_Waypoint@@QAEXJKKK@Z PROC		; C_Waypoint::SetLabelColor
; _this$ = ecx

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 	WAYPOINTLIST *cur;
; 241  : 
; 242  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 243  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@SetLabelCo

; 244  : 	{
; 245  : 		cur->Icon->SetLabelColor(C_STATE_0,norm);

	mov	ecx, DWORD PTR _norm$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetLabelColor@C_Button@@QAEXFK@Z	; C_Button::SetLabelColor

; 246  : 		cur->Icon->SetLabelColor(C_STATE_1,sel);

	mov	eax, DWORD PTR _sel$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetLabelColor@C_Button@@QAEXFK@Z	; C_Button::SetLabelColor

; 247  : 		cur->Icon->SetLabelColor(C_STATE_2,othr);

	mov	edx, DWORD PTR _othr$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetLabelColor@C_Button@@QAEXFK@Z	; C_Button::SetLabelColor
$LN2@SetLabelCo:

; 248  : 	}
; 249  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetLabelColor@C_Waypoint@@QAEXJKKK@Z ENDP		; C_Waypoint::SetLabelColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_txt$ = 12						; size = 4
?SetLabel@C_Waypoint@@QAEXJPAD@Z PROC			; C_Waypoint::SetLabel
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 	WAYPOINTLIST *cur;
; 232  : 
; 233  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 234  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@SetLabel

; 235  : 		cur->Icon->SetAllLabel(gStringMgr->GetText(gStringMgr->AddText(txt)));

	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetAllLabel@C_Button@@QAEXPAD@Z	; C_Button::SetAllLabel
$LN2@SetLabel:

; 236  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabel@C_Waypoint@@QAEXJPAD@Z ENDP			; C_Waypoint::SetLabel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_group$ = 8						; size = 4
_state$ = 12						; size = 2
?SetGroupState@C_Waypoint@@QAEXJF@Z PROC		; C_Waypoint::SetGroupState
; _this$ = ecx

; 310  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 	WAYPOINTLIST *cur;
; 312  : 
; 313  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@SetGroupSt:

; 314  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN4@SetGroupSt

; 315  : 	{
; 316  : 		if(cur->Group == group)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _group$[ebp]
	jne	SHORT $LN1@SetGroupSt

; 317  : 		{
; 318  : 			cur->state=state;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	dx, WORD PTR _state$[ebp]
	mov	WORD PTR [ecx+16], dx

; 319  : 			cur->Icon->SetState(state);

	movzx	eax, WORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN1@SetGroupSt:

; 320  : 		}
; 321  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 322  : 	}

	jmp	SHORT $LN3@SetGroupSt
$LN4@SetGroupSt:

; 323  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetGroupState@C_Waypoint@@QAEXJF@Z ENDP		; C_Waypoint::SetGroupState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_state$ = 12						; size = 2
?SetState@C_Waypoint@@QAEXJF@Z PROC			; C_Waypoint::SetState
; _this$ = ecx

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 	WAYPOINTLIST *cur;
; 300  : 
; 301  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 302  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@SetState

; 303  : 	{
; 304  : 		cur->state=state;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	dx, WORD PTR _state$[ebp]
	mov	WORD PTR [ecx+16], dx

; 305  : 		cur->Icon->SetState(state);

	movzx	eax, WORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN2@SetState:

; 306  : 	}
; 307  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetState@C_Waypoint@@QAEXJF@Z ENDP			; C_Waypoint::SetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_group$ = 12						; size = 4
?SetWPGroup@C_Waypoint@@QAEXJJ@Z PROC			; C_Waypoint::SetWPGroup
; _this$ = ecx

; 289  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 	WAYPOINTLIST *cur;
; 291  : 
; 292  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 293  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@SetWPGroup

; 294  : 		cur->Group=group;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _group$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN2@SetWPGroup:

; 295  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetWPGroup@C_Waypoint@@QAEXJJ@Z ENDP			; C_Waypoint::SetWPGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_iID$ = 8						; size = 4
?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z PROC	; C_Waypoint::FindID
; _this$ = ecx

; 435  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 	WAYPOINTLIST *cur;
; 437  : 
; 438  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@FindID:

; 439  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@FindID

; 440  : 	{
; 441  : 		if(cur->ID == iID)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _iID$[ebp]
	jne	SHORT $LN1@FindID

; 442  : 			return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN4@FindID
$LN1@FindID:

; 443  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 444  : 	}

	jmp	SHORT $LN3@FindID
$LN2@FindID:

; 445  : 	return(NULL);

	xor	eax, eax
$LN4@FindID:

; 446  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ENDP	; C_Waypoint::FindID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
tv211 = -12						; size = 4
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_scaletype$ = 8						; size = 2
?SetScaleType@C_Waypoint@@QAEXF@Z PROC			; C_Waypoint::SetScaleType
; _this$ = ecx

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 	WAYPOINTLIST *cur;
; 347  : 
; 348  : 	WPScaleType_=scaletype;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _scaletype$[ebp]
	mov	WORD PTR [eax+160], cx

; 349  : 
; 350  : 
; 351  : 	if(scaletype == 1)

	movsx	edx, WORD PTR _scaletype$[ebp]
	cmp	edx, 1
	jne	$LN7@SetScaleTy

; 352  : 	{
; 353  : 		cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@SetScaleTy:

; 354  : 		while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@SetScaleTy

; 355  : 		{
; 356  : 			cur->y=(short)(MaxWorldY_ - (28.853f * (log(-cur->worldy * 0.0001f + 1.0f)))); // Only care about the Z

	mov	edx, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@38d1b717
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?log@@YAMM@Z				; log
	add	esp, 4
	fstp	DWORD PTR tv211[ebp]
	movss	xmm0, DWORD PTR tv211[ebp]
	mulss	xmm0, DWORD PTR __real@41e6d2f2
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+156]
	subss	xmm1, xmm0
	cvttss2si ecx, xmm1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	WORD PTR [edx+20], cx

; 357  : 			cur->Icon->SetXY(cur->x-cur->Icon->GetW()/2,cur->y-cur->Icon->GetH()/2);

	mov	eax, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [eax+20]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	edx, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [edx+18]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 358  : 			cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 359  : 		}

	jmp	$LN6@SetScaleTy
$LN5@SetScaleTy:

; 360  : 	}
; 361  : 	else if(scaletype == 2)

	jmp	$LN1@SetScaleTy
$LN7@SetScaleTy:
	movsx	eax, WORD PTR _scaletype$[ebp]
	cmp	eax, 2
	jne	$LN1@SetScaleTy

; 362  : 	{
; 363  : 		cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _cur$[ebp], edx
$LN2@SetScaleTy:

; 364  : 		while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@SetScaleTy

; 365  : 		{
; 366  : 			cur->y=(short)(MaxWorldY_ + cur->worldy*0.01f);

	mov	eax, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+156]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	WORD PTR [eax+20], dx

; 367  : 			cur->Icon->SetXY(cur->x-cur->Icon->GetW()/2,cur->y-cur->Icon->GetH()/2);

	mov	ecx, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [ecx+20]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [eax+18]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 368  : 			cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 369  : 		}

	jmp	SHORT $LN2@SetScaleTy
$LN1@SetScaleTy:

; 370  : 	}
; 371  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleType@C_Waypoint@@QAEXF@Z ENDP			; C_Waypoint::SetScaleType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_scale$ = 8						; size = 4
?SetScaleFactor@C_Waypoint@@QAEXM@Z PROC		; C_Waypoint::SetScaleFactor
; _this$ = ecx

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 327  : 	WAYPOINTLIST *cur;
; 328  : 
; 329  : 	if(scale <= 0.0f || scale == scale_ || WPScaleType_)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _scale$[ebp]
	jae	SHORT $LN3@SetScaleFa
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	ucomiss	xmm0, DWORD PTR [eax+180]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@SetScaleFa
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+160]
	test	edx, edx
	je	SHORT $LN4@SetScaleFa
$LN3@SetScaleFa:

; 330  : 		return;

	jmp	$LN5@SetScaleFa
$LN4@SetScaleFa:

; 331  : 
; 332  : 	scale_=scale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+180], xmm0

; 333  : 
; 334  : 	cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _cur$[ebp], edx
$LN2@SetScaleFa:

; 335  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN1@SetScaleFa

; 336  : 	{
; 337  : 		cur->x=(short)(cur->worldx*scale_);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+180]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	WORD PTR [eax+18], dx

; 338  : 		cur->y=(short)(cur->worldy*scale_);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR [edx+180]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	WORD PTR [ecx+20], ax

; 339  : 		cur->Icon->SetXY(cur->x-cur->Icon->GetW()/2,cur->y-cur->Icon->GetH()/2);

	mov	edx, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [edx+20]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [ecx+18]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 340  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _cur$[ebp], ecx

; 341  : 	}

	jmp	$LN2@SetScaleFa
$LN1@SetScaleFa:
$LN5@SetScaleFa:

; 342  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleFactor@C_Waypoint@@QAEXM@Z ENDP		; C_Waypoint::SetScaleFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_retval$ = -8						; size = 4
_cur$ = -4						; size = 4
_typemask$ = 8						; size = 4
?HideByType@C_Waypoint@@QAEHJ@Z PROC			; C_Waypoint::HideByType
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 	WAYPOINTLIST *cur;
; 80   : 	BOOL retval=FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 81   : 
; 82   : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@HideByType:

; 83   : 
; 84   : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@HideByType

; 85   : 	{
; 86   : 		if(cur->Type & typemask)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, DWORD PTR _typemask$[ebp]
	je	SHORT $LN1@HideByType

; 87   : 		{
; 88   : 			cur->Flags |= C_BIT_INVISIBLE;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 8192				; 00002000H
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+8], edx

; 89   : 			retval=TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN1@HideByType:

; 90   : 		}
; 91   : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 92   : 	}

	jmp	SHORT $LN3@HideByType
$LN2@HideByType:

; 93   : 	return(retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 94   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HideByType@C_Waypoint@@QAEHJ@Z ENDP			; C_Waypoint::HideByType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_retval$ = -8						; size = 4
_cur$ = -4						; size = 4
_typemask$ = 8						; size = 4
?ShowByType@C_Waypoint@@QAEHJ@Z PROC			; C_Waypoint::ShowByType
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	WAYPOINTLIST *cur;
; 61   : 	BOOL retval=FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 62   : 
; 63   : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@ShowByType:

; 64   : 
; 65   : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@ShowByType

; 66   : 	{
; 67   : 		if(cur->Type & typemask)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, DWORD PTR _typemask$[ebp]
	je	SHORT $LN1@ShowByType

; 68   : 		{
; 69   : 			cur->Flags &= (0xffffffff ^ C_BIT_INVISIBLE);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -8193				; ffffdfffH
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+8], edx

; 70   : 			retval=TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN1@ShowByType:

; 71   : 		}
; 72   : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 73   : 	}

	jmp	SHORT $LN3@ShowByType
$LN2@ShowByType:

; 74   : 	return(retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 75   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ShowByType@C_Waypoint@@QAEHJ@Z ENDP			; C_Waypoint::ShowByType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
tv171 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
tv137 = -32						; size = 4
$T4 = -28						; size = 4
_prev$ = -24						; size = 4
$T5 = -20						; size = 4
$T6 = -16						; size = 4
_this$ = -12						; size = 4
_cur$ = -8						; size = 4
_last$ = -4						; size = 4
_groupid$ = 8						; size = 4
?EraseWaypointGroup@C_Waypoint@@QAEXJ@Z PROC		; C_Waypoint::EraseWaypointGroup
; _this$ = ecx

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 189  : 	WAYPOINTLIST *cur,*last,*prev;
; 190  : 
; 191  : 	if(Root_ == NULL || Parent_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN9@EraseWaypo
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN8@EraseWaypo
$LN9@EraseWaypo:

; 192  : 		return;

	jmp	$LN11@EraseWaypo
$LN8@EraseWaypo:

; 193  : 
; 194  : 	while(Root_ && Root_->Group == groupid)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	je	$LN7@EraseWaypo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _groupid$[ebp]
	jne	SHORT $LN7@EraseWaypo

; 195  : 	{
; 196  : 		last=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _last$[ebp], ecx

; 197  : 		Root_=Root_->Next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR [ecx+100], edx

; 198  : 		if(last->Icon)

	mov	eax, DWORD PTR _last$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN6@EraseWaypo

; 199  : 		{
; 200  : 			last->Icon->Cleanup();

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 201  : 			delete last->Icon;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN13@EraseWaypo
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN6@EraseWaypo
$LN13@EraseWaypo:
	mov	DWORD PTR tv137[ebp], 0
$LN6@EraseWaypo:

; 202  : 		}
; 203  : 		delete last;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 204  : 	}

	jmp	$LN8@EraseWaypo
$LN7@EraseWaypo:

; 205  : 
; 206  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx
$LN5@EraseWaypo:

; 207  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN11@EraseWaypo

; 208  : 	{
; 209  : 		prev=cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], edx

; 210  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _cur$[ebp], ecx

; 211  : 		if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@EraseWaypo

; 212  : 		{
; 213  : 			if(cur->Group == groupid)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _groupid$[ebp]
	jne	SHORT $LN3@EraseWaypo

; 214  : 			{
; 215  : 				last=cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _last$[ebp], ecx

; 216  : 				prev->Next=cur->Next;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+52], ecx

; 217  : 				if(last->Icon)

	mov	edx, DWORD PTR _last$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN1@EraseWaypo

; 218  : 				{
; 219  : 					last->Icon->Cleanup();

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _last$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+176]
	call	edx

; 220  : 					delete last->Icon;

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN15@EraseWaypo
	push	1
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN1@EraseWaypo
$LN15@EraseWaypo:
	mov	DWORD PTR tv171[ebp], 0
$LN1@EraseWaypo:

; 221  : 				}
; 222  : 				delete last;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 223  : 				cur=prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN3@EraseWaypo:

; 224  : 			}
; 225  : 		}
; 226  : 	}

	jmp	$LN5@EraseWaypo
$LN11@EraseWaypo:

; 227  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EraseWaypointGroup@C_Waypoint@@QAEXJ@Z ENDP		; C_Waypoint::EraseWaypointGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 4
tv133 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_cur$ = -12						; size = 4
_last$ = -8						; size = 4
_this$ = -4						; size = 4
?EraseWaypointList@C_Waypoint@@QAEXXZ PROC		; C_Waypoint::EraseWaypointList
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	WAYPOINTLIST *cur,*last;
; 166  : 
; 167  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _cur$[ebp], ecx

; 168  : 
; 169  : 	if(Root_ == NULL || Parent_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	je	SHORT $LN4@EraseWaypo
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN5@EraseWaypo
$LN4@EraseWaypo:

; 170  : 		return;

	jmp	$LN6@EraseWaypo
$LN5@EraseWaypo:

; 171  : 
; 172  : 	Root_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 0

; 173  : 	LastWP_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], 0
$LN3@EraseWaypo:

; 174  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@EraseWaypo

; 175  : 	{
; 176  : 		last=cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _last$[ebp], eax

; 177  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 178  : 		if(last->Icon)

	mov	eax, DWORD PTR _last$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@EraseWaypo

; 179  : 		{
; 180  : 			last->Icon->Cleanup();

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 181  : 			delete last->Icon;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN8@EraseWaypo
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN1@EraseWaypo
$LN8@EraseWaypo:
	mov	DWORD PTR tv133[ebp], 0
$LN1@EraseWaypo:

; 182  : 		}
; 183  : 		delete last;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 184  : 	}

	jmp	SHORT $LN3@EraseWaypo
$LN6@EraseWaypo:

; 185  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EraseWaypointList@C_Waypoint@@QAEXXZ ENDP		; C_Waypoint::EraseWaypointList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
tv506 = -60						; size = 4
tv444 = -56						; size = 4
_oy$ = -52						; size = 2
_ox$ = -48						; size = 2
_dx$ = -44						; size = 4
_dy$ = -40						; size = 4
_wk1$ = -36						; size = 4
_this$ = -32						; size = 4
_cur$ = -28						; size = 4
_wk2$ = -24						; size = 4
_buf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?UpdateInfo@C_Waypoint@@QAEHJMM@Z PROC			; C_Waypoint::UpdateInfo
; _this$ = ecx

; 449  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 450  : 	WAYPOINTLIST *cur,*wk1,*wk2;
; 451  : 	short ox,oy;
; 452  : 	float dx,dy;
; 453  : 	_TCHAR buf[15];
; 454  : 
; 455  : 	cur=FindID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _cur$[ebp], eax

; 456  : 	if(cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@UpdateInfo

; 457  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN9@UpdateInfo
$LN8@UpdateInfo:

; 458  : 
; 459  : 	if(cur->worldx != x || cur->worldy != y)

	mov	ecx, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	ucomiss	xmm0, DWORD PTR _x$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@UpdateInfo
	mov	edx, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	ucomiss	xmm0, DWORD PTR _y$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@UpdateInfo
$LN6@UpdateInfo:

; 460  : 	{
; 461  : 		cur->worldx=x;

	mov	eax, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 462  : 		cur->worldy=y;

	mov	ecx, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 463  : 		ox=cur->x;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ax, WORD PTR [edx+18]
	mov	WORD PTR _ox$[ebp], ax

; 464  : 		oy=cur->y;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	dx, WORD PTR [ecx+20]
	mov	WORD PTR _oy$[ebp], dx

; 465  : 		cur->x=(short)(cur->worldx*scale_);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+180]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	WORD PTR [eax+18], dx

; 466  : 		cur->y=(short)(cur->worldy*scale_);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR [edx+180]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	WORD PTR [ecx+20], ax

; 467  : 		cur->Icon->SetXY(cur->x - cur->Icon->GetW()/2,cur->y - cur->Icon->GetH()/2);

	mov	edx, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [edx+20]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _cur$[ebp]
	movsx	esi, WORD PTR [ecx+18]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 468  : 
; 469  : 		if(!(ID & 0x60000000))

	mov	eax, DWORD PTR _ID$[ebp]
	and	eax, 1610612736				; 60000000H
	jne	$LN3@UpdateInfo

; 470  : 		{
; 471  : 			wk1=FindID(ID-1);

	mov	ecx, DWORD PTR _ID$[ebp]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk1$[ebp], eax

; 472  : 			wk2=FindID(0x40000000+ID);

	mov	edx, DWORD PTR _ID$[ebp]
	add	edx, 1073741824				; 40000000H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk2$[ebp], eax

; 473  : 			if(wk1 && wk2)

	cmp	DWORD PTR _wk1$[ebp], 0
	je	$LN4@UpdateInfo
	cmp	DWORD PTR _wk2$[ebp], 0
	je	$LN4@UpdateInfo

; 474  : 			{
; 475  : 				dx=(cur->worldx - wk1->worldx);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _wk1$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _dx$[ebp], xmm0

; 476  : 				dy=(cur->worldy - wk1->worldy);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _wk1$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	subss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR _dy$[ebp], xmm0

; 477  : 
; 478  : 				wk2->worldx = wk1->worldx + dx * .5F;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _wk1$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 479  : 				wk2->worldy = wk1->worldy + dy * .5F;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _wk1$[ebp]
	addss	xmm0, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 480  : 				wk2->x=(short)(wk2->worldx*scale_);

	mov	edx, DWORD PTR _wk2$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR [eax+180]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [edx+18], cx

; 481  : 				wk2->y=(short)(wk2->worldy*scale_);

	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+180]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [eax+20], dx

; 482  : 				_stprintf(buf,"%6.1f",sqrt(dx * dx + dy * dy)*FT_TO_NM);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv444[ebp]
	movss	xmm0, DWORD PTR tv444[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05GBNOBMHE@?$CF6?41f?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 483  : 				wk2->Icon->SetXY(wk2->x - wk2->Icon->GetW()/2,wk2->y - wk2->Icon->GetH()/2);

	mov	edx, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [edx+20]
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [ecx+18]
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 484  : 				wk2->Icon->SetAllLabel(gStringMgr->GetText(gStringMgr->AddText(buf)));

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetAllLabel@C_Button@@QAEXPAD@Z	; C_Button::SetAllLabel
$LN4@UpdateInfo:

; 485  : 			}
; 486  : 			wk1=FindID(ID+1);

	mov	edx, DWORD PTR _ID$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk1$[ebp], eax

; 487  : 			wk2=FindID(0x60000000+ID+1);

	mov	eax, DWORD PTR _ID$[ebp]
	add	eax, 1610612737				; 60000001H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Waypoint@@QAEPAVWAYPOINTLIST@@J@Z ; C_Waypoint::FindID
	mov	DWORD PTR _wk2$[ebp], eax

; 488  : 			if(wk1 && wk2)

	cmp	DWORD PTR _wk1$[ebp], 0
	je	$LN3@UpdateInfo
	cmp	DWORD PTR _wk2$[ebp], 0
	je	$LN3@UpdateInfo

; 489  : 			{
; 490  : 				dx=(wk1->worldx - cur->worldx);

	mov	ecx, DWORD PTR _wk1$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	subss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR _dx$[ebp], xmm0

; 491  : 				dy=(wk1->worldy - cur->worldy);

	mov	eax, DWORD PTR _wk1$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	subss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _dy$[ebp], xmm0

; 492  : 
; 493  : 				wk2->worldx = cur->worldx + dx * .5F;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _cur$[ebp]
	addss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 494  : 				wk2->worldy = cur->worldy + dy * .5F;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _cur$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _wk2$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 495  : 				wk2->x=(short)(wk2->worldx*scale_);

	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+180]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [eax+18], dx

; 496  : 				wk2->y=(short)(wk2->worldy*scale_);

	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR [edx+180]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	WORD PTR [ecx+20], ax

; 497  : 				_stprintf(buf,"%6.1f",sqrt(dx * dx + dy * dy)*FT_TO_NM);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv506[ebp]
	movss	xmm0, DWORD PTR tv506[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05GBNOBMHE@?$CF6?41f?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 498  : 				wk2->Icon->SetXY(wk2->x - wk2->Icon->GetW()/2,wk2->y - wk2->Icon->GetH()/2);

	mov	eax, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [eax+20]
	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	edx, DWORD PTR _wk2$[ebp]
	movsx	esi, WORD PTR [edx+18]
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _wk2$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _wk2$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 499  : 				wk2->Icon->SetAllLabel(gStringMgr->GetText(gStringMgr->AddText(buf)));

	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	mov	edx, DWORD PTR _wk2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetAllLabel@C_Button@@QAEXPAD@Z	; C_Button::SetAllLabel
$LN3@UpdateInfo:

; 500  : 			}
; 501  : 		}
; 502  : 		if((ox != cur->x || oy != cur->y) && !(cur->Flags & C_BIT_INVISIBLE))

	movsx	eax, WORD PTR _ox$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	movsx	edx, WORD PTR [ecx+18]
	cmp	eax, edx
	jne	SHORT $LN1@UpdateInfo
	movsx	eax, WORD PTR _oy$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	movsx	edx, WORD PTR [ecx+20]
	cmp	eax, edx
	je	SHORT $LN2@UpdateInfo
$LN1@UpdateInfo:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN2@UpdateInfo

; 503  : 			return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN9@UpdateInfo
$LN2@UpdateInfo:

; 504  : 	}
; 505  : 	return(FALSE);

	xor	eax, eax
$LN9@UpdateInfo:

; 506  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?UpdateInfo@C_Waypoint@@QAEHJMM@Z ENDP			; C_Waypoint::UpdateInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
tv373 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
tv75 = -32						; size = 4
$T4 = -28						; size = 4
_cur$ = -24						; size = 4
_this$ = -20						; size = 4
_newitem$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_CampID$ = 8						; size = 4
_type$ = 12						; size = 2
_NormID$ = 16						; size = 4
_SelID$ = 20						; size = 4
_OthrID$ = 24						; size = 4
_x$ = 28						; size = 4
_y$ = 32						; size = 4
_Dragable$ = 36						; size = 2
?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z PROC ; C_Waypoint::AddWaypointToList
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	WAYPOINTLIST *newitem,*cur;
; 109  : 
; 110  : 	newitem=new WAYPOINTLIST;

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _newitem$[ebp], eax

; 111  : 	
; 112  : 	if(newitem == NULL)

	cmp	DWORD PTR _newitem$[ebp], 0
	jne	SHORT $LN13@AddWaypoin

; 113  : 		return(NULL);

	xor	eax, eax
	jmp	$LN14@AddWaypoin
$LN13@AddWaypoin:

; 114  : 
; 115  : 	newitem->Icon=new C_Button;

	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN16@AddWaypoin
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0C_Button@@QAE@XZ			; C_Button::C_Button
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN17@AddWaypoin
$LN16@AddWaypoin:
	mov	DWORD PTR tv75[ebp], 0
$LN17@AddWaypoin:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+32], eax

; 116  : 
; 117  : 	newitem->ID=CampID;

	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	edx, DWORD PTR _CampID$[ebp]
	mov	DWORD PTR [ecx], edx

; 118  : 	newitem->Group = 0; // JPO initialise

	mov	eax, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [eax+12], 0

; 119  : 	newitem->Type=type;

	movsx	ecx, WORD PTR _type$[ebp]
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 120  : 	newitem->Icon->Setup(CampID,C_TYPE_CUSTOM,0,0);

	push	0
	push	0
	push	29					; 0000001dH
	mov	eax, DWORD PTR _CampID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Setup@C_Button@@QAEXJFJJ@Z		; C_Button::Setup

; 121  : 	newitem->Icon->SetImage(C_STATE_0,NormID);

	mov	edx, DWORD PTR _NormID$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetImage@C_Button@@QAEXFJ@Z		; C_Button::SetImage

; 122  : 	newitem->Icon->SetImage(C_STATE_1,SelID);

	mov	ecx, DWORD PTR _SelID$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetImage@C_Button@@QAEXFJ@Z		; C_Button::SetImage

; 123  : 	newitem->Icon->SetImage(C_STATE_2,OthrID);

	mov	eax, DWORD PTR _OthrID$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetImage@C_Button@@QAEXFJ@Z		; C_Button::SetImage

; 124  : 	if(Dragable)

	movsx	edx, WORD PTR _Dragable$[ebp]
	test	edx, edx
	je	SHORT $LN12@AddWaypoin

; 125  : 		newitem->Icon->SetFlags((GetFlags() & ~(C_BIT_DRAGABLE)) | C_BIT_DRAGABLE);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, -4097				; ffffefffH
	or	eax, 4096				; 00001000H
	push	eax
	mov	eax, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 126  : 	else

	jmp	SHORT $LN11@AddWaypoin
$LN12@AddWaypoin:

; 127  : 		newitem->Icon->SetFlags((GetFlags() & ~(C_BIT_DRAGABLE)));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, -4097				; ffffefffH
	push	eax
	mov	eax, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN11@AddWaypoin:

; 128  : 	newitem->Icon->SetClient(GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 129  : 	newitem->Icon->SetParent(Parent_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 130  : 	newitem->Flags=C_BIT_ENABLED;

	mov	edx, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [edx+8], 2048			; 00000800H

; 131  : 	if(Dragable)

	movsx	eax, WORD PTR _Dragable$[ebp]
	test	eax, eax
	je	SHORT $LN10@AddWaypoin

; 132  : 		newitem->Flags|=C_BIT_DRAGABLE;

	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN10@AddWaypoin:

; 133  : 	newitem->Dragable=Dragable;

	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	dx, WORD PTR _Dragable$[ebp]
	mov	WORD PTR [ecx+36], dx

; 134  : 	newitem->state=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	WORD PTR [ecx+16], ax

; 135  : 	newitem->LineColor_[0]=0;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [eax+edx+40], 0

; 136  : 	newitem->LineColor_[1]=0;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [edx+ecx+40], 0

; 137  : 	newitem->LineColor_[2]=0;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [ecx+eax+40], 0

; 138  : 	newitem->worldx=x;

	mov	edx, DWORD PTR _newitem$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 139  : 	newitem->worldy=y;

	mov	eax, DWORD PTR _newitem$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 140  : 	newitem->x=(short)(scale_*x);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+180]
	mulss	xmm0, DWORD PTR _x$[ebp]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _newitem$[ebp]
	mov	WORD PTR [eax+18], dx

; 141  : 	if(!WPScaleType_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+160]
	test	edx, edx
	jne	SHORT $LN9@AddWaypoin

; 142  : 		newitem->y=(short)(scale_*y);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+180]
	mulss	xmm0, DWORD PTR _y$[ebp]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	WORD PTR [edx+20], cx
	jmp	$LN5@AddWaypoin
$LN9@AddWaypoin:

; 143  : 	else if(WPScaleType_ == 1)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+160]
	cmp	ecx, 1
	jne	SHORT $LN7@AddWaypoin

; 144  : 		newitem->y=(short)(MaxWorldY_ - (28.853f * (log(-y * 0.0001f + 1.0f))));

	movss	xmm0, DWORD PTR _y$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@38d1b717
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?log@@YAMM@Z				; log
	add	esp, 4
	fstp	DWORD PTR tv373[ebp]
	movss	xmm0, DWORD PTR tv373[ebp]
	mulss	xmm0, DWORD PTR __real@41e6d2f2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+156]
	subss	xmm1, xmm0
	cvttss2si eax, xmm1
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	WORD PTR [ecx+20], ax
	jmp	SHORT $LN5@AddWaypoin
$LN7@AddWaypoin:

; 145  : 	else if(WPScaleType_ == 2)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+160]
	cmp	eax, 2
	jne	SHORT $LN5@AddWaypoin

; 146  : 		newitem->y=(short)(MaxWorldY_ + y*0.001f);

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+156]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _newitem$[ebp]
	mov	WORD PTR [eax+20], dx
$LN5@AddWaypoin:

; 147  : 
; 148  : 	newitem->Icon->SetXY(newitem->x-newitem->Icon->GetW()/2,newitem->y-newitem->Icon->GetH()/2);

	mov	ecx, DWORD PTR _newitem$[ebp]
	movsx	esi, WORD PTR [ecx+20]
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _newitem$[ebp]
	movsx	esi, WORD PTR [eax+18]
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	push	esi
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 149  : 	newitem->Next=NULL;

	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [ecx+52], 0

; 150  : 
; 151  : 	if(Root_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	jne	SHORT $LN4@AddWaypoin

; 152  : 		Root_=newitem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [eax+100], ecx

; 153  : 	else

	jmp	SHORT $LN3@AddWaypoin
$LN4@AddWaypoin:

; 154  : 	{
; 155  : 		cur=Root_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@AddWaypoin:

; 156  : 		while(cur->Next)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN1@AddWaypoin

; 157  : 			cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN2@AddWaypoin
$LN1@AddWaypoin:

; 158  : 		cur->Next=newitem;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _newitem$[ebp]
	mov	DWORD PTR [ecx+52], edx
$LN3@AddWaypoin:

; 159  : 	}
; 160  : 	return(newitem);

	mov	eax, DWORD PTR _newitem$[ebp]
$LN14@AddWaypoin:

; 161  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddWaypointToList@C_Waypoint@@QAEPAVWAYPOINTLIST@@JFJJJMMF@Z ENDP ; C_Waypoint::AddWaypointToList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.h
;	COMDAT ?GetFont@C_Waypoint@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFont@C_Waypoint@@UAEJXZ PROC			; C_Waypoint::GetFont, COMDAT
; _this$ = ecx

; 71   : 		long GetFont() { return(Font_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+108]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFont@C_Waypoint@@UAEJXZ ENDP			; C_Waypoint::GetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.h
;	COMDAT ?SetFont@C_Waypoint@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetFont@C_Waypoint@@UAEXJ@Z PROC			; C_Waypoint::SetFont, COMDAT
; _this$ = ecx

; 70   : 		void SetFont(long ID) { Font_=ID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax+108], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFont@C_Waypoint@@UAEXJ@Z ENDP			; C_Waypoint::SetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.h
;	COMDAT ?SetDefaultFlags@C_Waypoint@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDefaultFlags@C_Waypoint@@QAEXXZ PROC		; C_Waypoint::SetDefaultFlags, COMDAT
; _this$ = ecx

; 66   : 		void SetDefaultFlags() { SetFlags(DefaultFlags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDefaultFlags@C_Waypoint@@QAEXXZ ENDP		; C_Waypoint::SetDefaultFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup@C_Waypoint@@UAEXXZ PROC			; C_Waypoint::Cleanup
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 	if(Root_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN1@Cleanup

; 53   : 		EraseWaypointList();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EraseWaypointList@C_Waypoint@@QAEXXZ	; C_Waypoint::EraseWaypointList
$LN1@Cleanup:

; 54   : 	Root_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 0

; 55   : 	LastWP_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], 0

; 56   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@C_Waypoint@@UAEXXZ ENDP			; C_Waypoint::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_Type$ = 12						; size = 2
?Setup@C_Waypoint@@QAEXJF@Z PROC			; C_Waypoint::Setup
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 	SetID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetID@C_Base@@QAEXJ@Z			; C_Base::SetID

; 44   : 	SetType(Type);

	movzx	ecx, WORD PTR _Type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetType@C_Base@@QAEXF@Z		; C_Base::SetType

; 45   : 	SetDefaultFlags();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultFlags@C_Waypoint@@QAEXXZ	; C_Waypoint::SetDefaultFlags

; 46   : 	SetGroup(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroup@C_Base@@QAEXJ@Z		; C_Base::SetGroup

; 47   : 	SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@C_Base@@QAEXF@Z		; C_Base::SetReady

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Setup@C_Waypoint@@QAEXJF@Z ENDP			; C_Waypoint::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@C_Waypoint@@QAEJXZ PROC				; C_Waypoint::Size
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	return(0);

	xor	eax, eax

; 39   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Size@C_Waypoint@@QAEJXZ ENDP				; C_Waypoint::Size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1C_Waypoint@@UAE@XZ PROC				; C_Waypoint::~C_Waypoint
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1C_Waypoint@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_Waypoint@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 32   : 	if(Root_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	je	SHORT $LN2@C_Waypoint

; 33   : 		Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@C_Waypoint@@UAEXXZ		; C_Waypoint::Cleanup
$LN2@C_Waypoint:

; 34   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Control@@UAE@XZ			; C_Control::~C_Control
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1C_Waypoint@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1C_Control@@UAE@XZ			; C_Control::~C_Control
__ehhandler$??1C_Waypoint@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1C_Waypoint@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1C_Waypoint@@UAE@XZ ENDP				; C_Waypoint::~C_Waypoint
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fp$ = 8						; size = 4
??0C_Waypoint@@QAE@PAU_iobuf@@@Z PROC			; C_Waypoint::C_Waypoint
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0C_Control@@QAE@PAU_iobuf@@@Z		; C_Control::C_Control
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7C_Waypoint@@6B@

; 28   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0C_Waypoint@@QAE@PAU_iobuf@@@Z ENDP			; C_Waypoint::C_Waypoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
??0C_Waypoint@@QAE@PAPAD@Z PROC				; C_Waypoint::C_Waypoint
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0C_Control@@QAE@PAPAD@Z		; C_Control::C_Control
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7C_Waypoint@@6B@

; 24   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0C_Waypoint@@QAE@PAPAD@Z ENDP				; C_Waypoint::C_Waypoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0C_Waypoint@@QAE@XZ PROC				; C_Waypoint::C_Waypoint
; _this$ = ecx

; 6    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0C_Waypoint@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0C_Control@@QAE@XZ			; C_Control::C_Control
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_Waypoint@@6B@

; 7    : 	Root_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 0

; 8    : 	_SetCType_(_CNTL_WAYPOINT_);

	push	16406					; 00004016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetCType_@C_Base@@QAEXF@Z		; C_Base::_SetCType_

; 9    : 	SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@C_Base@@QAEXF@Z		; C_Base::SetReady

; 10   : 	DefaultFlags_=C_BIT_ENABLED|C_BIT_SELECTABLE|C_BIT_MOUSEOVER;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], 268961792		; 10080800H

; 11   : 	WPScaleType_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+160], ax

; 12   : 	MinWorldX_=0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+144], xmm0

; 13   : 	MinWorldY_=0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+148], xmm0

; 14   : 	MaxWorldX_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+152], xmm0

; 15   : 	MaxWorldY_=0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+156], xmm0

; 16   : 	scale_=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+180], xmm0

; 17   : 	Dragging_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+162], cx

; 18   : 	LastWP_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0

; 19   : 	memset(&last_,0,sizeof(UI95_RECT));

	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 20   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0C_Waypoint@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1C_Control@@UAE@XZ			; C_Control::~C_Control
__ehhandler$??0C_Waypoint@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0C_Waypoint@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0C_Waypoint@@QAE@XZ ENDP				; C_Waypoint::C_Waypoint
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetY@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Window@@QAEFXZ PROC				; C_Window::GetY, COMDAT
; _this$ = ecx

; 311  : 		short GetY() { return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+430]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Window@@QAEFXZ ENDP				; C_Window::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetX@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Window@@QAEFXZ PROC				; C_Window::GetX, COMDAT
; _this$ = ecx

; 310  : 		short GetX() { return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+428]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Window@@QAEFXZ ENDP				; C_Window::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_Control@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Control@@UAEPAXI@Z PROC				; C_Control::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Control@@UAE@XZ			; C_Control::~C_Control
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Control@@UAEPAXI@Z ENDP				; C_Control::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ PROC	; C_Control::GetCallback, COMDAT
; _this$ = ecx

; 82   : 		void (*GetCallback())(long,short,C_Base*)	{ return(Callback_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+96]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ ENDP	; C_Control::GetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetMouseOver@C_Control@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseOver@C_Control@@UAEFXZ PROC			; C_Control::GetMouseOver, COMDAT
; _this$ = ecx

; 80   : 		short GetMouseOver()			{ return(MouseOver_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+82]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseOver@C_Control@@UAEFXZ ENDP			; C_Control::GetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetHotKey@C_Control@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHotKey@C_Control@@UAEFXZ PROC			; C_Control::GetHotKey, COMDAT
; _this$ = ecx

; 79   : 		short GetHotKey()				{ return(HotKey_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+80]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHotKey@C_Control@@UAEFXZ ENDP			; C_Control::GetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetHelpText@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHelpText@C_Control@@UAEJXZ PROC			; C_Control::GetHelpText, COMDAT
; _this$ = ecx

; 78   : 		long  GetHelpText()				{ return(HelpTextID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHelpText@C_Control@@UAEJXZ ENDP			; C_Control::GetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetMenu@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMenu@C_Control@@UAEJXZ PROC				; C_Control::GetMenu, COMDAT
; _this$ = ecx

; 77   : 		long  GetMenu()					{ return(MenuID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMenu@C_Control@@UAEJXZ ENDP				; C_Control::GetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetDragCursorID@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDragCursorID@C_Control@@UAEJXZ PROC			; C_Control::GetDragCursorID, COMDAT
; _this$ = ecx

; 76   : 		long  GetDragCursorID()			{ return(DragCursor_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDragCursorID@C_Control@@UAEJXZ ENDP			; C_Control::GetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetCursorID@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorID@C_Control@@UAEJXZ PROC			; C_Control::GetCursorID, COMDAT
; _this$ = ecx

; 75   : 		long  GetCursorID()				{ return(Cursor_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorID@C_Control@@UAEJXZ ENDP			; C_Control::GetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetRelY@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelY@C_Control@@UAEJXZ PROC				; C_Control::GetRelY, COMDAT
; _this$ = ecx

; 73   : 		long GetRelY()					{ return(RelY_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelY@C_Control@@UAEJXZ ENDP				; C_Control::GetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetRelX@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelX@C_Control@@UAEJXZ PROC				; C_Control::GetRelX, COMDAT
; _this$ = ecx

; 72   : 		long GetRelX()					{ return(RelX_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelX@C_Control@@UAEJXZ ENDP				; C_Control::GetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?IsControl@C_Control@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsControl@C_Control@@UAEHXZ PROC			; C_Control::IsControl, COMDAT
; _this$ = ecx

; 71   : 		BOOL  IsControl()				{ return(TRUE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsControl@C_Control@@UAEHXZ ENDP			; C_Control::IsControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?IsBase@C_Control@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBase@C_Control@@UAEHXZ PROC				; C_Control::IsBase, COMDAT
; _this$ = ecx

; 70   : 		BOOL  IsBase()					{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBase@C_Control@@UAEHXZ ENDP				; C_Control::IsBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMouseOverPerc@C_Control@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_perc$ = 8						; size = 2
?SetMouseOverPerc@C_Control@@UAEXF@Z PROC		; C_Control::SetMouseOverPerc, COMDAT
; _this$ = ecx

; 67   : 		void SetMouseOverPerc(short perc)				{ MouseOverPercent_=perc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _perc$[ebp]
	mov	WORD PTR [eax+84], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverPerc@C_Control@@UAEXF@Z ENDP		; C_Control::SetMouseOverPerc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMouseOverColor@C_Control@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetMouseOverColor@C_Control@@UAEXK@Z PROC		; C_Control::SetMouseOverColor, COMDAT
; _this$ = ecx

; 66   : 		void SetMouseOverColor(COLORREF color)			{ MouseOverColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverColor@C_Control@@UAEXK@Z ENDP		; C_Control::SetMouseOverColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMouseOver@C_Control@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetMouseOver@C_Control@@UAEXF@Z PROC			; C_Control::SetMouseOver, COMDAT
; _this$ = ecx

; 65   : 		void SetMouseOver(short state)					{ MouseOver_=state; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _state$[ebp]
	mov	WORD PTR [eax+82], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOver@C_Control@@UAEXF@Z ENDP			; C_Control::SetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cb$ = 8						; size = 4
?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z PROC	; C_Control::SetCallback, COMDAT
; _this$ = ecx

; 63   : 		void SetCallback(void (*cb)(long,short,C_Base*)) { Callback_=cb; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z ENDP	; C_Control::SetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetHotKey@C_Control@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 2
?SetHotKey@C_Control@@UAEXF@Z PROC			; C_Control::SetHotKey, COMDAT
; _this$ = ecx

; 62   : 		void SetHotKey(short key)						{ HotKey_=key; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _key$[ebp]
	mov	WORD PTR [eax+80], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHotKey@C_Control@@UAEXF@Z ENDP			; C_Control::SetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetHelpText@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetHelpText@C_Control@@UAEXJ@Z PROC			; C_Control::SetHelpText, COMDAT
; _this$ = ecx

; 61   : 		void SetHelpText(long id)						{ HelpTextID_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHelpText@C_Control@@UAEXJ@Z ENDP			; C_Control::SetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMenu@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetMenu@C_Control@@UAEXJ@Z PROC			; C_Control::SetMenu, COMDAT
; _this$ = ecx

; 60   : 		void SetMenu(long id)							{ MenuID_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMenu@C_Control@@UAEXJ@Z ENDP			; C_Control::SetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetDragCursorID@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetDragCursorID@C_Control@@UAEXJ@Z PROC		; C_Control::SetDragCursorID, COMDAT
; _this$ = ecx

; 59   : 		void SetDragCursorID(long id)					{ DragCursor_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragCursorID@C_Control@@UAEXJ@Z ENDP		; C_Control::SetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetCursorID@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetCursorID@C_Control@@UAEXJ@Z PROC			; C_Control::SetCursorID, COMDAT
; _this$ = ecx

; 58   : 		void SetCursorID(long id)						{ Cursor_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCursorID@C_Control@@UAEXJ@Z ENDP			; C_Control::SetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetRelXY@C_Control@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetRelXY@C_Control@@UAEXJJ@Z PROC			; C_Control::SetRelXY, COMDAT
; _this$ = ecx

; 57   : 		void SetRelXY(long x,long y)					{ RelX_=x; RelY_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+76], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRelXY@C_Control@@UAEXJJ@Z ENDP			; C_Control::SetRelXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetRelY@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetRelY@C_Control@@UAEXJ@Z PROC			; C_Control::SetRelY, COMDAT
; _this$ = ecx

; 56   : 		void SetRelY(long y)							{ RelY_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+76], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelY@C_Control@@UAEXJ@Z ENDP			; C_Control::SetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetRelX@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetRelX@C_Control@@UAEXJ@Z PROC			; C_Control::SetRelX, COMDAT
; _this$ = ecx

; 55   : 		void SetRelX(long x)							{ RelX_=x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelX@C_Control@@UAEXJ@Z ENDP			; C_Control::SetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ??1C_Control@@UAE@XZ
_TEXT	SEGMENT
tv83 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1C_Control@@UAE@XZ PROC				; C_Control::~C_Control, COMDAT
; _this$ = ecx

; 40   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1C_Control@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_Control@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 41   : 			if(Sound_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN2@C_Control

; 42   : 			{
; 43   : 				Sound_->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?Cleanup@C_Hash@@QAEXXZ			; C_Hash::Cleanup

; 44   : 				delete Sound_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@C_Control
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GC_Hash@@QAEPAXI@Z
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN2@C_Control
$LN4@C_Control:
	mov	DWORD PTR tv83[ebp], 0
$LN2@C_Control:

; 45   : 			}
; 46   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Base@@UAE@XZ			; C_Base::~C_Base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1C_Control@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1C_Base@@UAE@XZ			; C_Base::~C_Base
__ehhandler$??1C_Control@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1C_Control@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1C_Control@@UAE@XZ ENDP				; C_Control::~C_Control
; Function compile flags: /Odtp
;	COMDAT ??_GC_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Base@@UAEPAXI@Z PROC				; C_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Base@@UAE@XZ			; C_Base::~C_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Base@@UAEPAXI@Z ENDP				; C_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ofp$ = 8						; size = 4
_Parser$ = 12						; size = 4
?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z PROC		; C_Base::SaveText, COMDAT
; _this$ = ecx

; 193  : 		virtual void SaveText(HANDLE ofp,C_Parser *Parser) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z ENDP		; C_Base::SaveText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 2
_P$ = 12						; size = 4
_str$ = 16						; size = 4
_Hndlr$ = 20						; size = 4
?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z PROC	; C_Base::LocalFunction, COMDAT
; _this$ = ecx

; 192  : 		virtual void LocalFunction(short ID,long P[],_TCHAR *str,C_Handler *Hndlr) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z ENDP	; C_Base::LocalFunction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?LocalFind@C_Base@@UAEFPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?LocalFind@C_Base@@UAEFPAD@Z PROC			; C_Base::LocalFind, COMDAT
; _this$ = ecx

; 191  : 		virtual short LocalFind(char *str) { return(-1); } // Search local token list

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	mov	esp, ebp
	pop	ebp
	ret	4
?LocalFind@C_Base@@UAEFPAD@Z ENDP			; C_Base::LocalFind
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Wheel@C_Base@@UAEHHGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_increments$ = 8					; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
?Wheel@C_Base@@UAEHHGG@Z PROC				; C_Base::Wheel, COMDAT
; _this$ = ecx

; 187  : 		virtual BOOL Wheel(int increments, WORD MouseX, WORD MouseY)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Wheel@C_Base@@UAEHHGG@Z ENDP				; C_Base::Wheel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Drag$ = 8						; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
_over$ = 20						; size = 4
?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC	; C_Base::Drop, COMDAT
; _this$ = ecx

; 182  : 		virtual BOOL Drop(GRABBER *Drag,WORD MouseX,WORD MouseY,C_Window *over) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP	; C_Base::Drop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Drag$ = 8						; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
_over$ = 20						; size = 4
?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC	; C_Base::Drag, COMDAT
; _this$ = ecx

; 181  : 		virtual BOOL Drag(GRABBER *Drag,WORD MouseX,WORD MouseY,C_Window *over) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP	; C_Base::Drag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetItemXY@C_Base@@UAEXJPAJ0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?GetItemXY@C_Base@@UAEXJPAJ0@Z PROC			; C_Base::GetItemXY, COMDAT
; _this$ = ecx

; 180  : 		virtual void GetItemXY(long ID,long *x,long *y)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetItemXY@C_Base@@UAEXJPAJ0@Z ENDP			; C_Base::GetItemXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Dragable@C_Base@@UAEHJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Dragable@C_Base@@UAEHJ@Z PROC				; C_Base::Dragable, COMDAT
; _this$ = ecx

; 179  : 		virtual BOOL Dragable(long ID)					{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?Dragable@C_Base@@UAEHJ@Z ENDP				; C_Base::Dragable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMe@C_Base@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMe@C_Base@@UAEPAV1@XZ PROC				; C_Base::GetMe, COMDAT
; _this$ = ecx

; 178  : 		virtual C_Base *GetMe()							{ return(this); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMe@C_Base@@UAEPAV1@XZ ENDP				; C_Base::GetMe
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?MouseOver@C_Base@@UAEHJJPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_relX$ = 8						; size = 4
_relY$ = 12						; size = 4
_me$ = 16						; size = 4
?MouseOver@C_Base@@UAEHJJPAV1@@Z PROC			; C_Base::MouseOver, COMDAT
; _this$ = ecx

; 177  : 		virtual BOOL MouseOver(long relX,long relY,C_Base *me) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MouseOver@C_Base@@UAEHJJPAV1@@Z ENDP			; C_Base::MouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CloseWindow@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseWindow@C_Base@@UAEHXZ PROC			; C_Base::CloseWindow, COMDAT
; _this$ = ecx

; 176  : 		virtual BOOL CloseWindow()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?CloseWindow@C_Base@@UAEHXZ ENDP			; C_Base::CloseWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Process@C_Base@@UAEHJF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_HitType$ = 12						; size = 2
?Process@C_Base@@UAEHJF@Z PROC				; C_Base::Process, COMDAT
; _this$ = ecx

; 175  : 		virtual BOOL Process(long ID,short HitType)		{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?Process@C_Base@@UAEHJF@Z ENDP				; C_Base::Process
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CheckKeyboard@C_Base@@UAEHEEEJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DKScanCode$ = 8					; size = 1
_Ascii$ = 12						; size = 1
_ShiftStates$ = 16					; size = 1
_RepeatCount$ = 20					; size = 4
?CheckKeyboard@C_Base@@UAEHEEEJ@Z PROC			; C_Base::CheckKeyboard, COMDAT
; _this$ = ecx

; 174  : 		virtual BOOL CheckKeyboard(uchar DKScanCode,uchar Ascii,uchar ShiftStates,long RepeatCount) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CheckKeyboard@C_Base@@UAEHEEEJ@Z ENDP			; C_Base::CheckKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CheckHotSpots@C_Base@@UAEJJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_relx$ = 8						; size = 4
_rely$ = 12						; size = 4
?CheckHotSpots@C_Base@@UAEJJJ@Z PROC			; C_Base::CheckHotSpots, COMDAT
; _this$ = ecx

; 173  : 		virtual long CheckHotSpots(long relx,long rely)	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?CheckHotSpots@C_Base@@UAEJJJ@Z ENDP			; C_Base::CheckHotSpots
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Deactivate@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deactivate@C_Base@@UAEXXZ PROC				; C_Base::Deactivate, COMDAT
; _this$ = ecx

; 172  : 		virtual void Deactivate()						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Deactivate@C_Base@@UAEXXZ ENDP				; C_Base::Deactivate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Activate@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Activate@C_Base@@UAEXXZ PROC				; C_Base::Activate, COMDAT
; _this$ = ecx

; 171  : 		virtual void Activate()							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Activate@C_Base@@UAEXXZ ENDP				; C_Base::Activate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?TimerUpdate@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TimerUpdate@C_Base@@UAEHXZ PROC			; C_Base::TimerUpdate, COMDAT
; _this$ = ecx

; 170  : 		virtual BOOL TimerUpdate()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?TimerUpdate@C_Base@@UAEHXZ ENDP			; C_Base::TimerUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Cleanup@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup@C_Base@@UAEXXZ PROC				; C_Base::Cleanup, COMDAT
; _this$ = ecx

; 169  : 		virtual void Cleanup()							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@C_Base@@UAEXXZ ENDP				; C_Base::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Parent$ = 8						; size = 4
?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z PROC		; C_Base::SetSubParents, COMDAT
; _this$ = ecx

; 168  : 		virtual void SetSubParents(C_Window *Parent)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z ENDP		; C_Base::SetSubParents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; C_Base::HighLite, COMDAT
; _this$ = ecx

; 167  : 		virtual void HighLite(SCREEN *surface,UI95_RECT *cliprect)		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; C_Base::HighLite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; C_Base::Draw, COMDAT
; _this$ = ecx

; 166  : 		virtual void Draw(SCREEN *surface,UI95_RECT *cliprect)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; C_Base::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Refresh@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Refresh@C_Base@@UAEXXZ PROC				; C_Base::Refresh, COMDAT
; _this$ = ecx

; 165  : 		virtual void Refresh()							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@C_Base@@UAEXXZ ENDP				; C_Base::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?IsControl@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsControl@C_Base@@UAEHXZ PROC				; C_Base::IsControl, COMDAT
; _this$ = ecx

; 164  : 		virtual BOOL IsControl()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsControl@C_Base@@UAEHXZ ENDP				; C_Base::IsControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?IsBase@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBase@C_Base@@UAEHXZ PROC				; C_Base::IsBase, COMDAT
; _this$ = ecx

; 163  : 		virtual BOOL IsBase()							{ return(TRUE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBase@C_Base@@UAEHXZ ENDP				; C_Base::IsBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ PROC		; C_Base::GetCallback, COMDAT
; _this$ = ecx

; 160  : 		virtual void (*GetCallback())(long,short,C_Base*) { return(NULL); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ ENDP		; C_Base::GetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetDragCursorID@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDragCursorID@C_Base@@UAEJXZ PROC			; C_Base::GetDragCursorID, COMDAT
; _this$ = ecx

; 159  : 		virtual long  GetDragCursorID()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDragCursorID@C_Base@@UAEJXZ ENDP			; C_Base::GetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetCursorID@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorID@C_Base@@UAEJXZ PROC			; C_Base::GetCursorID, COMDAT
; _this$ = ecx

; 158  : 		virtual long  GetCursorID()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorID@C_Base@@UAEJXZ ENDP			; C_Base::GetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMouseOver@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseOver@C_Base@@UAEFXZ PROC			; C_Base::GetMouseOver, COMDAT
; _this$ = ecx

; 157  : 		virtual short GetMouseOver() { return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseOver@C_Base@@UAEFXZ ENDP			; C_Base::GetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 2
?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z PROC		; C_Base::GetSound, COMDAT
; _this$ = ecx

; 156  : 		virtual SOUND_RES *GetSound(short Type) { return(NULL); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z ENDP		; C_Base::GetSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetHelpText@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHelpText@C_Base@@UAEJXZ PROC			; C_Base::GetHelpText, COMDAT
; _this$ = ecx

; 155  : 		virtual long  GetHelpText()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHelpText@C_Base@@UAEJXZ ENDP			; C_Base::GetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetFont@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFont@C_Base@@UAEJXZ PROC				; C_Base::GetFont, COMDAT
; _this$ = ecx

; 154  : 		virtual long  GetFont()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFont@C_Base@@UAEJXZ ENDP				; C_Base::GetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMenu@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMenu@C_Base@@UAEJXZ PROC				; C_Base::GetMenu, COMDAT
; _this$ = ecx

; 153  : 		virtual long  GetMenu()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMenu@C_Base@@UAEJXZ ENDP				; C_Base::GetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetHotKey@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHotKey@C_Base@@UAEFXZ PROC				; C_Base::GetHotKey, COMDAT
; _this$ = ecx

; 152  : 		virtual short GetHotKey()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHotKey@C_Base@@UAEFXZ ENDP				; C_Base::GetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetState@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetState@C_Base@@UAEFXZ PROC				; C_Base::GetState, COMDAT
; _this$ = ecx

; 151  : 		virtual short GetState()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@C_Base@@UAEFXZ ENDP				; C_Base::GetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Ready@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Ready@C_Base@@QAEFXZ PROC				; C_Base::Ready, COMDAT
; _this$ = ecx

; 150  : 		short  Ready()				{ return(Ready_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+42]
	mov	esp, ebp
	pop	ebp
	ret	0
?Ready@C_Base@@QAEFXZ ENDP				; C_Base::Ready
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetRelY@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelY@C_Base@@UAEJXZ PROC				; C_Base::GetRelY, COMDAT
; _this$ = ecx

; 148  : 		virtual long GetRelY()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelY@C_Base@@UAEJXZ ENDP				; C_Base::GetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetRelX@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelX@C_Base@@UAEJXZ PROC				; C_Base::GetRelX, COMDAT
; _this$ = ecx

; 147  : 		virtual long GetRelX()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelX@C_Base@@UAEJXZ ENDP				; C_Base::GetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetH@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetH@C_Base@@QAEJXZ PROC				; C_Base::GetH, COMDAT
; _this$ = ecx

; 144  : 		long GetH()					{ return(h_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetH@C_Base@@QAEJXZ ENDP				; C_Base::GetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetW@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetW@C_Base@@QAEJXZ PROC				; C_Base::GetW, COMDAT
; _this$ = ecx

; 143  : 		long GetW()					{ return(w_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetW@C_Base@@QAEJXZ ENDP				; C_Base::GetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetY@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Base@@QAEJXZ PROC				; C_Base::GetY, COMDAT
; _this$ = ecx

; 142  : 		long GetY()					{ return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Base@@QAEJXZ ENDP				; C_Base::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetX@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Base@@QAEJXZ PROC				; C_Base::GetX, COMDAT
; _this$ = ecx

; 141  : 		long GetX()					{ return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Base@@QAEJXZ ENDP				; C_Base::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetClient@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClient@C_Base@@QAEFXZ PROC				; C_Base::GetClient, COMDAT
; _this$ = ecx

; 140  : 		short GetClient()			{ return(Client_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClient@C_Base@@QAEFXZ ENDP				; C_Base::GetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetFlags@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlags@C_Base@@QAEJXZ PROC				; C_Base::GetFlags, COMDAT
; _this$ = ecx

; 139  : 		long  GetFlags()			{ return(Flags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlags@C_Base@@QAEJXZ ENDP				; C_Base::GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetType@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@C_Base@@QAEFXZ PROC				; C_Base::GetType, COMDAT
; _this$ = ecx

; 135  : 		short GetType()				{ return(Type_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+22]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@C_Base@@QAEFXZ ENDP				; C_Base::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cb$ = 8						; size = 4
?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z PROC		; C_Base::SetCallback, COMDAT
; _this$ = ecx

; 131  : 		virtual void SetCallback(void (*cb)(long,short,C_Base*)){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z ENDP		; C_Base::SetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOverPerc@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_perc$ = 8						; size = 2
?SetMouseOverPerc@C_Base@@UAEXF@Z PROC			; C_Base::SetMouseOverPerc, COMDAT
; _this$ = ecx

; 130  : 		virtual void SetMouseOverPerc(short perc)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverPerc@C_Base@@UAEXF@Z ENDP			; C_Base::SetMouseOverPerc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOverColor@C_Base@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetMouseOverColor@C_Base@@UAEXK@Z PROC			; C_Base::SetMouseOverColor, COMDAT
; _this$ = ecx

; 129  : 		virtual void SetMouseOverColor(COLORREF color)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverColor@C_Base@@UAEXK@Z ENDP			; C_Base::SetMouseOverColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOver@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetMouseOver@C_Base@@UAEXF@Z PROC			; C_Base::SetMouseOver, COMDAT
; _this$ = ecx

; 128  : 		virtual void SetMouseOver(short state)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOver@C_Base@@UAEXF@Z ENDP			; C_Base::SetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetHelpText@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetHelpText@C_Base@@UAEXJ@Z PROC			; C_Base::SetHelpText, COMDAT
; _this$ = ecx

; 127  : 		virtual void SetHelpText(long id)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHelpText@C_Base@@UAEXJ@Z ENDP			; C_Base::SetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetDragCursorID@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetDragCursorID@C_Base@@UAEXJ@Z PROC			; C_Base::SetDragCursorID, COMDAT
; _this$ = ecx

; 126  : 		virtual void SetDragCursorID(long id)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragCursorID@C_Base@@UAEXJ@Z ENDP			; C_Base::SetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetCursorID@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetCursorID@C_Base@@UAEXJ@Z PROC			; C_Base::SetCursorID, COMDAT
; _this$ = ecx

; 125  : 		virtual void SetCursorID(long id)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCursorID@C_Base@@UAEXJ@Z ENDP			; C_Base::SetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetSound@C_Base@@UAEXJF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_type$ = 12						; size = 2
?SetSound@C_Base@@UAEXJF@Z PROC				; C_Base::SetSound, COMDAT
; _this$ = ecx

; 124  : 		virtual void SetSound(long ID,short type)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSound@C_Base@@UAEXJF@Z ENDP				; C_Base::SetSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFont@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetFont@C_Base@@UAEXJ@Z PROC				; C_Base::SetFont, COMDAT
; _this$ = ecx

; 123  : 		virtual void SetFont(long ID)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFont@C_Base@@UAEXJ@Z ENDP				; C_Base::SetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMenu@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetMenu@C_Base@@UAEXJ@Z PROC				; C_Base::SetMenu, COMDAT
; _this$ = ecx

; 122  : 		virtual void SetMenu(long ID)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMenu@C_Base@@UAEXJ@Z ENDP				; C_Base::SetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetHotKey@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 2
?SetHotKey@C_Base@@UAEXF@Z PROC				; C_Base::SetHotKey, COMDAT
; _this$ = ecx

; 121  : 		virtual void SetHotKey(short key)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHotKey@C_Base@@UAEXF@Z ENDP				; C_Base::SetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetState@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetState@C_Base@@UAEXF@Z PROC				; C_Base::SetState, COMDAT
; _this$ = ecx

; 120  : 		virtual void SetState(short state)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetState@C_Base@@UAEXF@Z ENDP				; C_Base::SetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetReady@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 2
?SetReady@C_Base@@QAEXF@Z PROC				; C_Base::SetReady, COMDAT
; _this$ = ecx

; 116  : 		void SetReady(short r)									{ Ready_=r; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _r$[ebp]
	mov	WORD PTR [eax+42], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetReady@C_Base@@QAEXF@Z ENDP				; C_Base::SetReady
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetParent@C_Base@@QAEXPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_win$ = 8						; size = 4
?SetParent@C_Base@@QAEXPAVC_Window@@@Z PROC		; C_Base::SetParent, COMDAT
; _this$ = ecx

; 115  : 		void SetParent(C_Window *win)							{ Parent_=win; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetParent@C_Base@@QAEXPAVC_Window@@@Z ENDP		; C_Base::SetParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelXY@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetRelXY@C_Base@@UAEXJJ@Z PROC				; C_Base::SetRelXY, COMDAT
; _this$ = ecx

; 112  : 		virtual void SetRelXY(long x,long y)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRelXY@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetRelXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelY@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetRelY@C_Base@@UAEXJ@Z PROC				; C_Base::SetRelY, COMDAT
; _this$ = ecx

; 111  : 		virtual void SetRelY(long y)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelY@C_Base@@UAEXJ@Z ENDP				; C_Base::SetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelX@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetRelX@C_Base@@UAEXJ@Z PROC				; C_Base::SetRelX, COMDAT
; _this$ = ecx

; 110  : 		virtual void SetRelX(long x)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelX@C_Base@@UAEXJ@Z ENDP				; C_Base::SetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetXYWH@C_Base@@UAEXJJJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
?SetXYWH@C_Base@@UAEXJJJJ@Z PROC			; C_Base::SetXYWH, COMDAT
; _this$ = ecx

; 109  : 		virtual void SetXYWH(long x,long y,long w,long h)		{ x_=x; y_=y; w_=w; h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetXYWH@C_Base@@UAEXJJJJ@Z ENDP			; C_Base::SetXYWH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetWH@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
?SetWH@C_Base@@UAEXJJ@Z PROC				; C_Base::SetWH, COMDAT
; _this$ = ecx

; 108  : 		virtual void SetWH(long w,long h)						{ w_=w; h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetWH@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetWH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetXY@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetXY@C_Base@@UAEXJJ@Z PROC				; C_Base::SetXY, COMDAT
; _this$ = ecx

; 107  : 		virtual void SetXY(long x,long y)						{ x_=x; y_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetXY@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetH@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
?SetH@C_Base@@UAEXJ@Z PROC				; C_Base::SetH, COMDAT
; _this$ = ecx

; 106  : 		virtual void SetH(long h)								{ h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetH@C_Base@@UAEXJ@Z ENDP				; C_Base::SetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetW@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
?SetW@C_Base@@UAEXJ@Z PROC				; C_Base::SetW, COMDAT
; _this$ = ecx

; 105  : 		virtual void SetW(long w)								{ w_=w; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetW@C_Base@@UAEXJ@Z ENDP				; C_Base::SetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetY@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetY@C_Base@@UAEXJ@Z PROC				; C_Base::SetY, COMDAT
; _this$ = ecx

; 104  : 		virtual void SetY(long y)								{ y_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetY@C_Base@@UAEXJ@Z ENDP				; C_Base::SetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetX@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetX@C_Base@@UAEXJ@Z PROC				; C_Base::SetX, COMDAT
; _this$ = ecx

; 103  : 		virtual void SetX(long x)								{ x_=x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetX@C_Base@@UAEXJ@Z ENDP				; C_Base::SetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlagBitOff@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
?SetFlagBitOff@C_Base@@UAEXJ@Z PROC			; C_Base::SetFlagBitOff, COMDAT
; _this$ = ecx

; 102  : 		virtual void SetFlagBitOff(long bits)					{ Flags_ &= ~bits; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _bits$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBitOff@C_Base@@UAEXJ@Z ENDP			; C_Base::SetFlagBitOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlagBitOn@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
?SetFlagBitOn@C_Base@@UAEXJ@Z PROC			; C_Base::SetFlagBitOn, COMDAT
; _this$ = ecx

; 101  : 		virtual void SetFlagBitOn(long bits)					{ Flags_ |= bits; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBitOn@C_Base@@UAEXJ@Z ENDP			; C_Base::SetFlagBitOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlags@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flags$ = 8						; size = 4
?SetFlags@C_Base@@UAEXJ@Z PROC				; C_Base::SetFlags, COMDAT
; _this$ = ecx

; 100  : 		virtual void SetFlags(long flags)						{ Flags_=flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlags@C_Base@@UAEXJ@Z ENDP				; C_Base::SetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetClient@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_client$ = 8						; size = 2
?SetClient@C_Base@@QAEXF@Z PROC				; C_Base::SetClient, COMDAT
; _this$ = ecx

; 98   : 		void SetClient(short client)							{ Client_=client; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _client$[ebp]
	mov	WORD PTR [eax+40], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetClient@C_Base@@QAEXF@Z ENDP				; C_Base::SetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetGroup@C_Base@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetGroup@C_Base@@QAEXJ@Z PROC				; C_Base::SetGroup, COMDAT
; _this$ = ecx

; 96   : 		void SetGroup(long id)									{ Section_[_GROUP_]=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGroup@C_Base@@QAEXJ@Z ENDP				; C_Base::SetGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?_SetCType_@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ctype$ = 8						; size = 2
?_SetCType_@C_Base@@QAEXF@Z PROC			; C_Base::_SetCType_, COMDAT
; _this$ = ecx

; 95   : 		void _SetCType_(short ctype)							{ _CType_=ctype; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _ctype$[ebp]
	mov	WORD PTR [eax+20], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?_SetCType_@C_Base@@QAEXF@Z ENDP			; C_Base::_SetCType_
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetType@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 2
?SetType@C_Base@@QAEXF@Z PROC				; C_Base::SetType, COMDAT
; _this$ = ecx

; 94   : 		void SetType(short type)								{ Type_=type; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _type$[ebp]
	mov	WORD PTR [eax+22], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@C_Base@@QAEXF@Z ENDP				; C_Base::SetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetID@C_Base@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetID@C_Base@@QAEXJ@Z PROC				; C_Base::SetID, COMDAT
; _this$ = ecx

; 93   : 		void SetID(long id)										{ ID_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@C_Base@@QAEXJ@Z ENDP				; C_Base::SetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ??1C_Base@@UAE@XZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
??1C_Base@@UAE@XZ PROC					; C_Base::~C_Base, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_Base@@6B@

; 82   : 			if(User_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN2@C_Base

; 83   : 			{
; 84   : 				User_->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	call	?Cleanup@C_Hash@@QAEXXZ			; C_Hash::Cleanup

; 85   : 				delete User_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@C_Base
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GC_Hash@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN2@C_Base
$LN4@C_Base:
	mov	DWORD PTR tv74[ebp], 0
$LN2@C_Base:

; 86   : 			}
; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1C_Base@@UAE@XZ ENDP					; C_Base::~C_Base
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_Hash@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Hash@@QAEPAXI@Z PROC				; C_Hash::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Hash@@QAE@XZ			; C_Hash::~C_Hash
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Hash@@QAEPAXI@Z ENDP				; C_Hash::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?log@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?log@@YAMM@Z PROC					; log, COMDAT

; 527  :         {return (logf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_logf
	add	esp, 4
	pop	ebp
	ret	0
?log@@YAMM@Z ENDP					; log
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?exp@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?exp@@YAMM@Z PROC					; exp, COMDAT

; 515  :         {return (expf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_expf
	add	esp, 4
	pop	ebp
	ret	0
?exp@@YAMM@Z ENDP					; exp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _logf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_logf	PROC						; COMDAT

; 420  :         {return ((float)log((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_logf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _expf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_expf	PROC						; COMDAT

; 414  :         {return ((float)exp((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_exp
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_expf	ENDP
_TEXT	ENDS
END
